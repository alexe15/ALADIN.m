
// File: index.xml

// File: classcasadi_1_1Assertion.xml


// File: classcasadi_1_1Bilin.xml


// File: classcasadi_1_1BinaryMX.xml


// File: classcasadi_1_1BinarySX.xml


// File: classcasadi_1_1Blocksqp.xml
%feature("docstring") casadi::Blocksqp::reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::Blocksqp::_set_temp "[INTERNAL]  Set the
(temporary) work vectors.

";

%feature("docstring") casadi::Blocksqp::get_options "[INTERNAL]  Options.

";

%feature("docstring") casadi::Blocksqp::type_name "[INTERNAL]  Get type
name.

";

%feature("docstring") casadi::Blocksqp::memory "[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::Blocksqp::map_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::Blocksqp::get_name_out "[INTERNAL]  Names of
function input and outputs.

";

%feature("docstring") casadi::Blocksqp::get_forward "[INTERNAL]  Return
function that calculates forward derivatives forward(nfwd) returns a cached
instance if available, and calls  Function get_forward(int nfwd) if no
cached version is available.

";

%feature("docstring") casadi::Blocksqp::getJacSparsityHierarchical "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::Blocksqp::_setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";

%feature("docstring") casadi::Blocksqp::alloc_arg "[INTERNAL]  Ensure
required length of arg field.

";

%feature("docstring") casadi::Blocksqp::finalize "[INTERNAL]  Finalize
initialization.

";

%feature("docstring") casadi::Blocksqp::getJacSparsityGen "[INTERNAL]  Get
the sparsity pattern, forward mode.

";

%feature("docstring") casadi::Blocksqp::adjViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::Blocksqp::generateFunction "[INTERNAL]
Generate code the function.

";

%feature("docstring") casadi::Blocksqp::plugin_name "[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::log "

>  void casadi::FunctionInternal::log(const std::string &msg) const 
------------------------------------------------------------------------
[INTERNAL] 
Log the status of the solver.

>  void casadi::FunctionInternal::log(const std::string &fcn, const std::string &msg) const 
------------------------------------------------------------------------
[INTERNAL] 
Log the status of the solver, function given.

";

%feature("docstring") casadi::Blocksqp::mx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Blocksqp::grad_sx "[INTERNAL]  Gradient
expression.

";

%feature("docstring") casadi::Blocksqp::alloc_memory "[INTERNAL]  Create
memory block.

";

%feature("docstring") casadi::Blocksqp::printProgress "[INTERNAL]  Print
one line of output to stdout about the current iteration.

";

%feature("docstring") casadi::Blocksqp::checkRes "[INTERNAL]  Check if
output arguments have correct length and dimensions.

";

%feature("docstring") casadi::Blocksqp::wrap "[INTERNAL]  Wrap in an
Function instance consisting of only one MX call.

";

%feature("docstring") casadi::Blocksqp::generateBody "[INTERNAL]  Generate
code for the function body.

";

%feature("docstring") casadi::Blocksqp::alloc_w "[INTERNAL]  Ensure
required length of w field.

";

%feature("docstring") casadi::Blocksqp::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::Blocksqp::init "[INTERNAL]  Initialize.

";

%feature("docstring") casadi::Blocksqp::has_spfwd "[INTERNAL]  Is the class
able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Blocksqp::sp_rev "[INTERNAL]  Propagate
sparsity backwards.

";

%feature("docstring") casadi::Blocksqp::construct "[INTERNAL]  Construct
Prepares the function for evaluation.

";

%feature("docstring") casadi::Blocksqp::size_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Blocksqp::addDependency "[INTERNAL]  Add a
dependent function.

";

%feature("docstring") casadi::Blocksqp::codegen_name "[INTERNAL]  Get name
in codegen.

";

%feature("docstring") casadi::Blocksqp::matchingArg "[INTERNAL]  Check if
input arguments that needs to be replaced.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::Blocksqp::reduceSOCStepsize "[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::sizeHessianCOL "[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::has_codegen "[INTERNAL]  Is codegen
supported?

";

%feature("docstring") casadi::Blocksqp::gradient "[INTERNAL]  Return
gradient function.

";

%feature("docstring") casadi::Blocksqp::calcBFGS "[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::n_nodes "[INTERNAL]  Number of
nodes in the algorithm.

";

%feature("docstring") casadi::Blocksqp::pairInFilter "[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::reset_sqp "[INTERNAL]  Reset
variables that any SQP code needs.

";

%feature("docstring") casadi::Blocksqp::resetHessian "[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::has_function "[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::fullstep "[INTERNAL]  No
globalization strategy.

";

%feature("docstring") casadi::Blocksqp::getTangent "[INTERNAL]  Return
tangent function.

";

%feature("docstring") casadi::Blocksqp::jacobian "[INTERNAL]  Return
Jacobian function.

";

%feature("docstring") casadi::Blocksqp::tang_sx "[INTERNAL]  Tangent
expression.

";

%feature("docstring") casadi::Blocksqp::call_forward "[INTERNAL]  Forward
mode AD, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Blocksqp::name_out "[INTERNAL]  Get output
scheme name by index.

";

%feature("docstring") casadi::Blocksqp::jac_mx "[INTERNAL]  Jacobian
expression.

";

%feature("docstring") casadi::Blocksqp::checkArg "[INTERNAL]  Check if
input arguments have correct length and dimensions.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::Blocksqp::sp_fwd "[INTERNAL]  Propagate
sparsity forward.

";

%feature("docstring") casadi::Blocksqp::get_n_in "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::Blocksqp::alloc_res "[INTERNAL]  Ensure
required length of res field.

";

%feature("docstring") casadi::Blocksqp::alloc "[INTERNAL]  Ensure work
vectors long enough to evaluate function.

";

%feature("docstring") casadi::Blocksqp::setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";

%feature("docstring") casadi::Blocksqp::get_sparsity_in "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Blocksqp::initIterate "[INTERNAL]  Set
initial filter, objective function, tolerances etc.

";

%feature("docstring") casadi::Blocksqp::_call "[INTERNAL]   Call a
function, overloaded.

";

%feature("docstring") casadi::Blocksqp::codegen_decref "[INTERNAL]  Codegen
decref for dependencies.

";

%feature("docstring") casadi::Blocksqp::has_sprev "[INTERNAL]  Is the class
able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Blocksqp::fullJacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Blocksqp::sz_w "[INTERNAL]  Get required
length of w field.

";

%feature("docstring") casadi::Blocksqp::calcHessianUpdate "[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::checkout "[INTERNAL]  Checkout a
memory object.

";

%feature("docstring") casadi::Blocksqp::slice "[INTERNAL]  returns a new
function with a selection of inputs/outputs of the original

";

%feature("docstring") casadi::Blocksqp::initializeFilter "[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::getReducedHessian "[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::getJacobian "[INTERNAL]  Return
Jacobian function.

";

%feature("docstring") casadi::Blocksqp::generateMeta "[INTERNAL]  Generate
meta-information allowing a user to evaluate a generated function.

";

%feature("docstring") casadi::Blocksqp::get_function "[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::set_jac_sparsity "[INTERNAL]
Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Blocksqp::sparsity_jac "[INTERNAL]  Get, if
necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Blocksqp::Blocksqp "[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::computeNextHessian "[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::getAlgorithmSize "[INTERNAL]  Get
the number of atomic operations.

";

%feature("docstring") casadi::Blocksqp::sz_res "[INTERNAL]  Get required
length of res field.

";

%feature("docstring") casadi::Blocksqp::simple "[INTERNAL]  Evaluate
numerically, simplied syntax.

";

%feature("docstring") casadi::Blocksqp::expand "[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::acceptStep "

>  void casadi::Blocksqp::acceptStep(BlocksqpMemory *m, const double *deltaXi, const double *lambdaQP, double alpha, int nSOCS) const 
------------------------------------------------------------------------
[INTERNAL] 
Set new primal dual iterate.

>  void casadi::Blocksqp::acceptStep(BlocksqpMemory *m, double alpha) const 
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::Blocksqp "

'blocksqp' plugin for Nlpsol

This is a modified version of blockSQP by Janka et al.

Dennis Janka, Joel Andersson

>List of available options

+----------------------------+-----------+---------------------------------+
|             Id             |   Type    |           Description           |
+============================+===========+=================================+
| block_hess                 | OT_INT    | Blockwise Hessian               |
|                            |           | approximation?                  |
+----------------------------+-----------+---------------------------------+
| col_eps                    | OT_DOUBLE | Epsilon for COL scaling         |
|                            |           | strategy                        |
+----------------------------+-----------+---------------------------------+
| col_tau1                   | OT_DOUBLE | tau1 for COL scaling strategy   |
+----------------------------+-----------+---------------------------------+
| col_tau2                   | OT_DOUBLE | tau2 for COL scaling strategy   |
+----------------------------+-----------+---------------------------------+
| conv_strategy              | OT_INT    | Convexification strategy        |
+----------------------------+-----------+---------------------------------+
| delta                      | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| delta_h0                   | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| eps                        | OT_DOUBLE | Values smaller than this are    |
|                            |           | regarded as numerically zero    |
+----------------------------+-----------+---------------------------------+
| eta                        | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| fallback_scaling           | OT_INT    | If indefinite update is used,   |
|                            |           | the type of fallback strategy   |
+----------------------------+-----------+---------------------------------+
| fallback_update            | OT_INT    | If indefinite update is used,   |
|                            |           | the type of fallback strategy   |
+----------------------------+-----------+---------------------------------+
| gamma_f                    | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| gamma_theta                | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| globalization              | OT_BOOL   | Enable globalization            |
+----------------------------+-----------+---------------------------------+
| hess_damp                  | OT_INT    | Activate Powell damping for     |
|                            |           | BFGS                            |
+----------------------------+-----------+---------------------------------+
| hess_damp_fac              | OT_DOUBLE | Damping factor for BFGS Powell  |
|                            |           | modification                    |
+----------------------------+-----------+---------------------------------+
| hess_lim_mem               | OT_INT    | Full or limited memory          |
+----------------------------+-----------+---------------------------------+
| hess_memsize               | OT_INT    | Memory size for L-BFGS updates  |
+----------------------------+-----------+---------------------------------+
| hess_scaling               | OT_INT    | Scaling strategy for Hessian    |
|                            |           | approximation                   |
+----------------------------+-----------+---------------------------------+
| hess_update                | OT_INT    | Type of Hessian approximation   |
+----------------------------+-----------+---------------------------------+
| ini_hess_diag              | OT_DOUBLE | Initial Hessian guess: diagonal |
|                            |           | matrix diag(iniHessDiag)        |
+----------------------------+-----------+---------------------------------+
| kappa_f                    | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| kappa_minus                | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| kappa_plus                 | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| kappa_plus_max             | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| kappa_soc                  | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| linsol                     | OT_STRING | The linear solver to be used by |
|                            |           | the QP method                   |
+----------------------------+-----------+---------------------------------+
| max_consec_reduced_steps   | OT_INT    | Maximum number of consecutive   |
|                            |           | reduced steps                   |
+----------------------------+-----------+---------------------------------+
| max_consec_skipped_updates | OT_INT    | Maximum number of consecutive   |
|                            |           | skipped updates                 |
+----------------------------+-----------+---------------------------------+
| max_conv_qp                | OT_INT    | How many additional QPs may be  |
|                            |           | solved for convexification per  |
|                            |           | iteration?                      |
+----------------------------+-----------+---------------------------------+
| max_it_qp                  | OT_INT    | Maximum number of QP iterations |
|                            |           | per SQP iteration               |
+----------------------------+-----------+---------------------------------+
| max_iter                   | OT_INT    | Maximum number of SQP           |
|                            |           | iterations                      |
+----------------------------+-----------+---------------------------------+
| max_line_search            | OT_INT    | Maximum number of steps in line |
|                            |           | search                          |
+----------------------------+-----------+---------------------------------+
| max_soc_iter               | OT_INT    | Maximum number of SOC line      |
|                            |           | search iterations               |
+----------------------------+-----------+---------------------------------+
| max_time_qp                | OT_DOUBLE | Maximum number of time in       |
|                            |           | seconds per QP solve per SQP    |
|                            |           | iteration                       |
+----------------------------+-----------+---------------------------------+
| nlinfeastol                | OT_DOUBLE | Nonlinear feasibility tolerance |
+----------------------------+-----------+---------------------------------+
| obj_lo                     | OT_DOUBLE | Lower bound on objective        |
|                            |           | function [-inf]                 |
+----------------------------+-----------+---------------------------------+
| obj_up                     | OT_DOUBLE | Upper bound on objective        |
|                            |           | function [inf]                  |
+----------------------------+-----------+---------------------------------+
| opttol                     | OT_DOUBLE | Optimality tolerance            |
+----------------------------+-----------+---------------------------------+
| print_header               | OT_BOOL   | Print solver header at startup  |
+----------------------------+-----------+---------------------------------+
| print_iteration            | OT_BOOL   | Print SQP iterations            |
+----------------------------+-----------+---------------------------------+
| qpsol                      | OT_STRING | The QP solver to be used by the |
|                            |           | SQP method                      |
+----------------------------+-----------+---------------------------------+
| qpsol_options              | OT_DICT   | Options to be passed to the QP  |
|                            |           | solver                          |
+----------------------------+-----------+---------------------------------+
| restore_feas               | OT_BOOL   | Use feasibility restoration     |
|                            |           | phase                           |
+----------------------------+-----------+---------------------------------+
| s_f                        | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| s_theta                    | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| schur                      | OT_BOOL   | Use qpOASES Schur compliment    |
|                            |           | approach                        |
+----------------------------+-----------+---------------------------------+
| skip_first_globalization   | OT_BOOL   | No globalization strategy in    |
|                            |           | first iteration                 |
+----------------------------+-----------+---------------------------------+
| theta_max                  | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| theta_min                  | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| warmstart                  | OT_BOOL   | Use warmstarting                |
+----------------------------+-----------+---------------------------------+
| which_second_derv          | OT_INT    | For which block should second   |
|                            |           | derivatives be provided by the  |
|                            |           | user                            |
+----------------------------+-----------+---------------------------------+

>List of available options

+-------------------+---------------+-------------------+------------------+
|        Id         |     Type      |    Description    |     Used in      |
+===================+===============+===================+==================+
| block_hess        | OT_INT        | Blockwise Hessian | casadi::Blocksqp |
|                   |               | approximation?    |                  |
+-------------------+---------------+-------------------+------------------+
| col_eps           | OT_DOUBLE     | Epsilon for COL   | casadi::Blocksqp |
|                   |               | scaling strategy  |                  |
+-------------------+---------------+-------------------+------------------+
| col_tau1          | OT_DOUBLE     | tau1 for COL      | casadi::Blocksqp |
|                   |               | scaling strategy  |                  |
+-------------------+---------------+-------------------+------------------+
| col_tau2          | OT_DOUBLE     | tau2 for COL      | casadi::Blocksqp |
|                   |               | scaling strategy  |                  |
+-------------------+---------------+-------------------+------------------+
| conv_strategy     | OT_INT        | Convexification   | casadi::Blocksqp |
|                   |               | strategy          |                  |
+-------------------+---------------+-------------------+------------------+
| delta             | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| delta_h0          | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| discrete          | OT_BOOLVECTOR | Indicates which   | casadi::Nlpsol   |
|                   |               | of the variables  |                  |
|                   |               | are discrete,     |                  |
|                   |               | i.e. integer-     |                  |
|                   |               | valued            |                  |
+-------------------+---------------+-------------------+------------------+
| eps               | OT_DOUBLE     | Values smaller    | casadi::Blocksqp |
|                   |               | than this are     |                  |
|                   |               | regarded as       |                  |
|                   |               | numerically zero  |                  |
+-------------------+---------------+-------------------+------------------+
| eta               | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| eval_errors_fatal | OT_BOOL       | When errors occur | casadi::Nlpsol   |
|                   |               | during evaluation |                  |
|                   |               | of f,g,...,stop   |                  |
|                   |               | the iterations    |                  |
+-------------------+---------------+-------------------+------------------+
| expand            | OT_BOOL       | Replace MX with   | casadi::Nlpsol   |
|                   |               | SX expressions in |                  |
|                   |               | problem           |                  |
|                   |               | formulation       |                  |
|                   |               | [false]           |                  |
+-------------------+---------------+-------------------+------------------+
| fallback_scaling  | OT_INT        | If indefinite     | casadi::Blocksqp |
|                   |               | update is used,   |                  |
|                   |               | the type of       |                  |
|                   |               | fallback strategy |                  |
+-------------------+---------------+-------------------+------------------+
| fallback_update   | OT_INT        | If indefinite     | casadi::Blocksqp |
|                   |               | update is used,   |                  |
|                   |               | the type of       |                  |
|                   |               | fallback strategy |                  |
+-------------------+---------------+-------------------+------------------+
| gamma_f           | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| gamma_theta       | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| globalization     | OT_BOOL       | Enable            | casadi::Blocksqp |
|                   |               | globalization     |                  |
+-------------------+---------------+-------------------+------------------+
| hess_damp         | OT_INT        | Activate Powell   | casadi::Blocksqp |
|                   |               | damping for BFGS  |                  |
+-------------------+---------------+-------------------+------------------+
| hess_damp_fac     | OT_DOUBLE     | Damping factor    | casadi::Blocksqp |
|                   |               | for BFGS Powell   |                  |
|                   |               | modification      |                  |
+-------------------+---------------+-------------------+------------------+
| hess_lim_mem      | OT_INT        | Full or limited   | casadi::Blocksqp |
|                   |               | memory            |                  |
+-------------------+---------------+-------------------+------------------+
| hess_memsize      | OT_INT        | Memory size for   | casadi::Blocksqp |
|                   |               | L-BFGS updates    |                  |
+-------------------+---------------+-------------------+------------------+
| hess_scaling      | OT_INT        | Scaling strategy  | casadi::Blocksqp |
|                   |               | for Hessian       |                  |
|                   |               | approximation     |                  |
+-------------------+---------------+-------------------+------------------+
| hess_update       | OT_INT        | Type of Hessian   | casadi::Blocksqp |
|                   |               | approximation     |                  |
+-------------------+---------------+-------------------+------------------+
| ignore_check_vec  | OT_BOOL       | If set to true,   | casadi::Nlpsol   |
|                   |               | the input shape   |                  |
|                   |               | of F will not be  |                  |
|                   |               | checked.          |                  |
+-------------------+---------------+-------------------+------------------+
| ini_hess_diag     | OT_DOUBLE     | Initial Hessian   | casadi::Blocksqp |
|                   |               | guess: diagonal   |                  |
|                   |               | matrix            |                  |
|                   |               | diag(iniHessDiag) |                  |
+-------------------+---------------+-------------------+------------------+
| iteration_callbac | OT_FUNCTION   | A function that   | casadi::Nlpsol   |
| k                 |               | will be called at |                  |
|                   |               | each iteration    |                  |
|                   |               | with the solver   |                  |
|                   |               | as input. Check   |                  |
|                   |               | documentation of  |                  |
|                   |               | Callback .        |                  |
+-------------------+---------------+-------------------+------------------+
| iteration_callbac | OT_BOOL       | If set to true,   | casadi::Nlpsol   |
| k_ignore_errors   |               | errors thrown by  |                  |
|                   |               | iteration_callbac |                  |
|                   |               | k will be         |                  |
|                   |               | ignored.          |                  |
+-------------------+---------------+-------------------+------------------+
| iteration_callbac | OT_INT        | Only call the     | casadi::Nlpsol   |
| k_step            |               | callback function |                  |
|                   |               | every few         |                  |
|                   |               | iterations.       |                  |
+-------------------+---------------+-------------------+------------------+
| kappa_f           | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| kappa_minus       | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| kappa_plus        | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| kappa_plus_max    | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| kappa_soc         | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| linsol            | OT_STRING     | The linear solver | casadi::Blocksqp |
|                   |               | to be used by the |                  |
|                   |               | QP method         |                  |
+-------------------+---------------+-------------------+------------------+
| max_consec_reduce | OT_INT        | Maximum number of | casadi::Blocksqp |
| d_steps           |               | consecutive       |                  |
|                   |               | reduced steps     |                  |
+-------------------+---------------+-------------------+------------------+
| max_consec_skippe | OT_INT        | Maximum number of | casadi::Blocksqp |
| d_updates         |               | consecutive       |                  |
|                   |               | skipped updates   |                  |
+-------------------+---------------+-------------------+------------------+
| max_conv_qp       | OT_INT        | How many          | casadi::Blocksqp |
|                   |               | additional QPs    |                  |
|                   |               | may be solved for |                  |
|                   |               | convexification   |                  |
|                   |               | per iteration?    |                  |
+-------------------+---------------+-------------------+------------------+
| max_it_qp         | OT_INT        | Maximum number of | casadi::Blocksqp |
|                   |               | QP iterations per |                  |
|                   |               | SQP iteration     |                  |
+-------------------+---------------+-------------------+------------------+
| max_iter          | OT_INT        | Maximum number of | casadi::Blocksqp |
|                   |               | SQP iterations    |                  |
+-------------------+---------------+-------------------+------------------+
| max_line_search   | OT_INT        | Maximum number of | casadi::Blocksqp |
|                   |               | steps in line     |                  |
|                   |               | search            |                  |
+-------------------+---------------+-------------------+------------------+
| max_soc_iter      | OT_INT        | Maximum number of | casadi::Blocksqp |
|                   |               | SOC line search   |                  |
|                   |               | iterations        |                  |
+-------------------+---------------+-------------------+------------------+
| max_time_qp       | OT_DOUBLE     | Maximum number of | casadi::Blocksqp |
|                   |               | time in seconds   |                  |
|                   |               | per QP solve per  |                  |
|                   |               | SQP iteration     |                  |
+-------------------+---------------+-------------------+------------------+
| nlinfeastol       | OT_DOUBLE     | Nonlinear         | casadi::Blocksqp |
|                   |               | feasibility       |                  |
|                   |               | tolerance         |                  |
+-------------------+---------------+-------------------+------------------+
| obj_lo            | OT_DOUBLE     | Lower bound on    | casadi::Blocksqp |
|                   |               | objective         |                  |
|                   |               | function [-inf]   |                  |
+-------------------+---------------+-------------------+------------------+
| obj_up            | OT_DOUBLE     | Upper bound on    | casadi::Blocksqp |
|                   |               | objective         |                  |
|                   |               | function [inf]    |                  |
+-------------------+---------------+-------------------+------------------+
| opttol            | OT_DOUBLE     | Optimality        | casadi::Blocksqp |
|                   |               | tolerance         |                  |
+-------------------+---------------+-------------------+------------------+
| print_header      | OT_BOOL       | Print solver      | casadi::Blocksqp |
|                   |               | header at startup |                  |
+-------------------+---------------+-------------------+------------------+
| print_iteration   | OT_BOOL       | Print SQP         | casadi::Blocksqp |
|                   |               | iterations        |                  |
+-------------------+---------------+-------------------+------------------+
| qpsol             | OT_STRING     | The QP solver to  | casadi::Blocksqp |
|                   |               | be used by the    |                  |
|                   |               | SQP method        |                  |
+-------------------+---------------+-------------------+------------------+
| qpsol_options     | OT_DICT       | Options to be     | casadi::Blocksqp |
|                   |               | passed to the QP  |                  |
|                   |               | solver            |                  |
+-------------------+---------------+-------------------+------------------+
| restore_feas      | OT_BOOL       | Use feasibility   | casadi::Blocksqp |
|                   |               | restoration phase |                  |
+-------------------+---------------+-------------------+------------------+
| s_f               | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| s_theta           | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| schur             | OT_BOOL       | Use qpOASES Schur | casadi::Blocksqp |
|                   |               | compliment        |                  |
|                   |               | approach          |                  |
+-------------------+---------------+-------------------+------------------+
| skip_first_global | OT_BOOL       | No globalization  | casadi::Blocksqp |
| ization           |               | strategy in first |                  |
|                   |               | iteration         |                  |
+-------------------+---------------+-------------------+------------------+
| theta_max         | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| theta_min         | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| verbose_init      | OT_BOOL       | Print out timing  | casadi::Nlpsol   |
|                   |               | information about |                  |
|                   |               | the different     |                  |
|                   |               | stages of         |                  |
|                   |               | initialization    |                  |
+-------------------+---------------+-------------------+------------------+
| warmstart         | OT_BOOL       | Use warmstarting  | casadi::Blocksqp |
+-------------------+---------------+-------------------+------------------+
| warn_initial_boun | OT_BOOL       | Warn if the       | casadi::Nlpsol   |
| ds                |               | initial guess     |                  |
|                   |               | does not satisfy  |                  |
|                   |               | LBX and UBX       |                  |
+-------------------+---------------+-------------------+------------------+
| which_second_derv | OT_INT        | For which block   | casadi::Blocksqp |
|                   |               | should second     |                  |
|                   |               | derivatives be    |                  |
|                   |               | provided by the   |                  |
|                   |               | user              |                  |
+-------------------+---------------+-------------------+------------------+

Diagrams
--------



C++ includes: blocksqp.hpp ";

%feature("docstring") casadi::Blocksqp::repr "[INTERNAL]  Print.

";

%feature("docstring") casadi::Blocksqp::addShorthand "[INTERNAL]  Generate
shorthand macro.

";

%feature("docstring") casadi::Blocksqp::secondOrderCorrection "[INTERNAL]
";

%feature("docstring") casadi::Blocksqp::solve "[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::generateDeclarations "[INTERNAL]
Generate code for the declarations of the C function.

";

%feature("docstring") casadi::Blocksqp::kktErrorReduction "[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::getAtomicOperation "[INTERNAL]  Get
an atomic operation operator index.

";

%feature("docstring") casadi::Blocksqp::tangent "[INTERNAL]  Return tangent
function.

";

%feature("docstring") casadi::Blocksqp::verbose "[INTERNAL]  Verbose mode?

";

%feature("docstring") casadi::Blocksqp::name "[INTERNAL]  Name of the
function.

";

%feature("docstring") casadi::Blocksqp::setOptionsFromFile "[INTERNAL]
Read options from parameter xml.

";

%feature("docstring") casadi::Blocksqp::_eval "

>  void casadi::FunctionInternal::_eval(const double **arg, double **res, int *iw, double *w, int mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate numerically.

>  void casadi::FunctionInternal::_eval(const SXElem **arg, SXElem **res, int *iw, SXElem *w, int mem) const

>  void casadi::FunctionInternal::_eval(const bvec_t **arg, bvec_t **res, int *iw, bvec_t *w, int mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

%feature("docstring") casadi::Blocksqp::set_function "[INTERNAL]  Register
the function for evaluation and statistics gathering

";

%feature("docstring") casadi::Blocksqp::replaceFwdSeed "[INTERNAL]  Replace
0-by-0 forward seeds.

";

%feature("docstring") casadi::Blocksqp::feasibilityRestorationPhase "[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::updateStepBounds "[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::ad_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::Blocksqp::getAtomicInputReal "[INTERNAL]  Get
the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::Blocksqp::index_in "[INTERNAL]  Get input
scheme index by name.

";

%feature("docstring") casadi::Blocksqp::filterLineSearch "[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::size2_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Blocksqp::symbolicOutput "[INTERNAL]  Get a
vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::Blocksqp::mx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Blocksqp::calcOptTol "[INTERNAL]  Update
optimization tolerance (similar to SNOPT) in current iterate.

";

%feature("docstring") casadi::Blocksqp::oracle "[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::Blocksqp::calcInitialHessian "[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::tang_mx "[INTERNAL]  Tangent
expression.

";

%feature("docstring") casadi::Blocksqp::hasFullJacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Blocksqp::call "[INTERNAL]   Call a function,
templated.

";

%feature("docstring") casadi::Blocksqp::augmentFilter "[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::print_option "[INTERNAL]  Print all
information there is to know about a certain option.

";

%feature("docstring") casadi::Blocksqp::numel_out "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::Blocksqp::getAdaptorSolverName "[INTERNAL]
Obtain solver name from Adaptor.

";

%feature("docstring") casadi::Blocksqp::integer_support "[INTERNAL]  Can
discrete variables be treated.

";

%feature("docstring") casadi::Blocksqp::get_name_in "[INTERNAL]  Names of
function input and outputs.

";

%feature("docstring") casadi::Blocksqp::calcHessianUpdateLimitedMemory "[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::~Blocksqp "[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::sp_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode, sparsity propagation.

";

%feature("docstring") casadi::Blocksqp::symbolicAdjSeed "[INTERNAL]
Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::Blocksqp::n_in "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::Blocksqp::getWorkSize "[INTERNAL]  Get the
length of the work vector.

";

%feature("docstring") casadi::Blocksqp::sz_iw "[INTERNAL]  Get required
length of iw field.

";

%feature("docstring") casadi::Blocksqp::checkInputs "

>  virtual void casadi::Nlpsol::checkInputs(void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Check if the inputs correspond to a well-posed problem.

>  virtual void casadi::FunctionInternal::checkInputs() const 
------------------------------------------------------------------------
[INTERNAL] 
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::Blocksqp::eval_mx "[INTERNAL]  Evaluate with
symbolic matrices.

";

%feature("docstring") casadi::Blocksqp::hessian "[INTERNAL]  Return Hessian
function.

";

%feature("docstring") casadi::Blocksqp::getHessian "[INTERNAL]  Return
Hessian function.

";

%feature("docstring") casadi::Blocksqp::evaluate "

>  int casadi::Blocksqp::evaluate(BlocksqpMemory *m, double *f, double *g, double *grad_f, double *jac_g) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate objective and constraints, including derivatives.

>  int casadi::Blocksqp::evaluate(BlocksqpMemory *m, const double *xk, double *f, double *g) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate objective and constraints, no derivatives.

";

%feature("docstring") casadi::Blocksqp::_get_stats "[INTERNAL]  Get all
statistics

";

%feature("docstring") casadi::Blocksqp::call_reverse "[INTERNAL]  Reverse
mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Blocksqp::free_memory "[INTERNAL]  Free
memory block.

";

%feature("docstring") casadi::Blocksqp::eval_name "[INTERNAL]  Get name of
the evaluation function.

";

%feature("docstring") casadi::Blocksqp::symbolicFwdSeed "[INTERNAL]
Symbolic expressions for the forward seeds.

";

%feature("docstring") casadi::Blocksqp::size2_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Blocksqp::alloc_iw "[INTERNAL]  Ensure
required length of iw field.

";

%feature("docstring") casadi::Blocksqp::set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::Blocksqp::self "[INTERNAL]  Get a public
class instance.

";

%feature("docstring") casadi::Blocksqp::get_n_out "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::Blocksqp::setJacobian "[INTERNAL]  Return
Jacobian function.

";

%feature("docstring") casadi::Blocksqp::signature "[INTERNAL]  Code
generate the function.

";

%feature("docstring") casadi::Blocksqp::jac_sx "[INTERNAL]  Jacobian
expression.

";

%feature("docstring") casadi::Blocksqp::calcSR1 "[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::sz_arg "[INTERNAL]  Get required
length of arg field.

";

%feature("docstring") casadi::Blocksqp::matchingRes "[INTERNAL]  Check if
output arguments that needs to be replaced.

";

%feature("docstring") casadi::Blocksqp::print_free "[INTERNAL]  Print free
variables.

";

%feature("docstring") casadi::Blocksqp::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::Blocksqp::getAtomicOutput "[INTERNAL]  Get
the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::Blocksqp::hess_sx "[INTERNAL]  Hessian
expression.

";

%feature("docstring") casadi::Blocksqp::initStats "[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::printInfo "[INTERNAL]  Print
information about the SQP method.

";

%feature("docstring") casadi::Blocksqp::print_dimensions "[INTERNAL]  Print
dimensions of inputs and outputs.

";

%feature("docstring") casadi::Blocksqp::replaceAdjSeed "[INTERNAL]  Replace
0-by-0 reverse seeds.

";

%feature("docstring") casadi::Blocksqp::get_n_reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::Blocksqp::getJacSparsityHierarchicalSymm "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::Blocksqp::run "[INTERNAL]  Main Loop of SQP
method.

";

%feature("docstring") casadi::Blocksqp::init_memory "[INTERNAL]  Initalize
memory block.

";

%feature("docstring") casadi::Blocksqp::sz_work "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") casadi::Blocksqp::nnz_in "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::Blocksqp::grad_mx "[INTERNAL]  Gradient
expression.

";

%feature("docstring") casadi::Blocksqp::has_free "[INTERNAL]  Does the
function have free variables.

";

%feature("docstring") casadi::Blocksqp::updateDeltaGamma "[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::free_mx "[INTERNAL]  Get free
variables ( MX)

";

%feature("docstring") casadi::Blocksqp::getPartition "[INTERNAL]  Get the
unidirectional or bidirectional partition.

";

%feature("docstring") casadi::Blocksqp::mapsum_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::Blocksqp::release "[INTERNAL]  Release a
memory object.

";

%feature("docstring") casadi::Blocksqp::jit_dependencies "[INTERNAL]  JIT
for dependencies.

";

%feature("docstring") casadi::Blocksqp::print_fstats "[INTERNAL]  Print
statistics.

";

%feature("docstring") casadi::Blocksqp::size_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Blocksqp::getAtomicInput "[INTERNAL]  Get the
(integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::Blocksqp::fwdViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::Blocksqp::generate_dependencies "[INTERNAL]
Export / Generate C code for the generated functions.

";

%feature("docstring") casadi::Blocksqp::sx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Blocksqp::_set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::Blocksqp::getJacSparsity "[INTERNAL]
Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Blocksqp::print "[INTERNAL]  Print.

";

%feature("docstring") casadi::Blocksqp::codegen_incref "[INTERNAL]  Codegen
incref for dependencies.

";

%feature("docstring") casadi::Blocksqp::sparsity_out "[INTERNAL]  Get
sparsity of a given output.

";

%feature("docstring") casadi::Blocksqp::factory "[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::replaceRes "[INTERNAL]  Replace
0-by-0 outputs.

";

%feature("docstring") casadi::Blocksqp::set_temp "[INTERNAL]  Set the work
vectors.

";

%feature("docstring") casadi::Blocksqp::forward "[INTERNAL]  Return
function that calculates forward derivatives forward(nfwd) returns a cached
instance if available, and calls  Function get_forward(int nfwd) if no
cached version is available.

";

%feature("docstring") casadi::Blocksqp::getGradient "[INTERNAL]  Return
gradient function.

";

%feature("docstring") casadi::Blocksqp::hasDerivative "[INTERNAL]  Can
derivatives be calculated in any way?

";

%feature("docstring") casadi::Blocksqp::solveQP "[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::is_a "[INTERNAL]  Check if the
function is of a particular type.

";

%feature("docstring") casadi::Blocksqp::simplifiedCall "[INTERNAL]  Use
simplified signature.

";

%feature("docstring") casadi::Blocksqp::get_stats "[INTERNAL]  Get all
statistics.

";

%feature("docstring") casadi::Blocksqp::generate_lifted "[INTERNAL]
Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::Blocksqp::get_n_forward "[INTERNAL]  Return
function that calculates forward derivatives forward(nfwd) returns a cached
instance if available, and calls  Function get_forward(int nfwd) if no
cached version is available.

";

%feature("docstring") casadi::Blocksqp::reduceStepsize "[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::sx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Blocksqp::getFullJacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Blocksqp::lInfConstraintNorm "[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::print_options "[INTERNAL]  Print
list of options.

";

%feature("docstring") casadi::Blocksqp::size1_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Blocksqp::index_out "[INTERNAL]  Get output
scheme index by name.

";

%feature("docstring") casadi::Blocksqp::numel_in "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::Blocksqp::calcLagrangeGradient "

>  void casadi::Blocksqp::calcLagrangeGradient(BlocksqpMemory *m, const double *lam_x, const double *lam_g, const double *grad_f, double *jacNz, double *grad_lag, int flag) const 
------------------------------------------------------------------------
[INTERNAL] 
Compute gradient of Lagrangian function (sparse version)

>  void casadi::Blocksqp::calcLagrangeGradient(BlocksqpMemory *m, double *grad_lag, int flag) const 
------------------------------------------------------------------------
[INTERNAL] 
Overloaded function for convenience, uses current variables of
SQPiterate vars.

";

%feature("docstring") casadi::Blocksqp::n_mem "[INTERNAL]  Maximum number
of memory objects.

";

%feature("docstring") casadi::Blocksqp::eval_sx "[INTERNAL]  Evaluate with
symbolic scalars.

";

%feature("docstring") casadi::Blocksqp::clear_memory "[INTERNAL]  Clear all
memory (called from destructor)

";

%feature("docstring") casadi::Blocksqp::sizeInitialHessian "[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::size1_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Blocksqp::nnz_out "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::Blocksqp::sparsity_in "[INTERNAL]  Get
sparsity of a given input.

";

%feature("docstring") casadi::Blocksqp::get_reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::Blocksqp::which_depends "[INTERNAL]  Which
variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::Blocksqp::free_sx "[INTERNAL]  Get free
variables (SX)

";

%feature("docstring") casadi::Blocksqp::feasibilityRestorationHeuristic "[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::eval "[INTERNAL]  Evaluate
numerically.

";

%feature("docstring") casadi::Blocksqp::get_sparsity_out "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Blocksqp::create_function "[INTERNAL]  Create
an oracle function

";

%feature("docstring") casadi::Blocksqp::name_in "[INTERNAL]  Get input
scheme name by index.

";

%feature("docstring") casadi::Blocksqp::calc_function "[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::n_out "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::Blocksqp::monitored "[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::default_in "[INTERNAL]  Get default
input value.

";

%feature("docstring") casadi::Blocksqp::replaceArg "[INTERNAL]  Replace
0-by-0 inputs.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::Blocksqp::convertHessian "[INTERNAL]  Convert
*hess to column compressed sparse format.

";

%feature("docstring") casadi::Blocksqp::updateStats "[INTERNAL] ";


// File: classcasadi_1_1BonMinMessageHandler.xml
%feature("docstring") casadi::BonMinMessageHandler "[INTERNAL]

>List of available options

+-------------------+---------------+-------------------+------------------+
|        Id         |     Type      |    Description    |     Used in      |
+===================+===============+===================+==================+
| bonmin            | OT_DICT       | Options to be     | casadi::BonMinMe |
|                   |               | passed to BONMIN  | ssageHandler     |
+-------------------+---------------+-------------------+------------------+
| con_integer_md    | OT_DICT       | Integer metadata  | casadi::BonMinMe |
|                   |               | (a dictionary     | ssageHandler     |
|                   |               | with lists of     |                  |
|                   |               | integers) about   |                  |
|                   |               | constraints to be |                  |
|                   |               | passed to BONMIN  |                  |
+-------------------+---------------+-------------------+------------------+
| con_numeric_md    | OT_DICT       | Numeric metadata  | casadi::BonMinMe |
|                   |               | (a dictionary     | ssageHandler     |
|                   |               | with lists of     |                  |
|                   |               | reals) about      |                  |
|                   |               | constraints to be |                  |
|                   |               | passed to BONMIN  |                  |
+-------------------+---------------+-------------------+------------------+
| con_string_md     | OT_DICT       | String metadata   | casadi::BonMinMe |
|                   |               | (a dictionary     | ssageHandler     |
|                   |               | with lists of     |                  |
|                   |               | strings) about    |                  |
|                   |               | constraints to be |                  |
|                   |               | passed to BONMIN  |                  |
+-------------------+---------------+-------------------+------------------+
| discrete          | OT_BOOLVECTOR | Indicates which   | casadi::Nlpsol   |
|                   |               | of the variables  |                  |
|                   |               | are discrete,     |                  |
|                   |               | i.e. integer-     |                  |
|                   |               | valued            |                  |
+-------------------+---------------+-------------------+------------------+
| eval_errors_fatal | OT_BOOL       | When errors occur | casadi::Nlpsol   |
|                   |               | during evaluation |                  |
|                   |               | of f,g,...,stop   |                  |
|                   |               | the iterations    |                  |
+-------------------+---------------+-------------------+------------------+
| expand            | OT_BOOL       | Replace MX with   | casadi::Nlpsol   |
|                   |               | SX expressions in |                  |
|                   |               | problem           |                  |
|                   |               | formulation       |                  |
|                   |               | [false]           |                  |
+-------------------+---------------+-------------------+------------------+
| grad_f            | OT_FUNCTION   | Function for      | casadi::BonMinMe |
|                   |               | calculating the   | ssageHandler     |
|                   |               | gradient of the   |                  |
|                   |               | objective         |                  |
|                   |               | (column,          |                  |
|                   |               | autogenerated by  |                  |
|                   |               | default)          |                  |
+-------------------+---------------+-------------------+------------------+
| grad_f_options    | OT_DICT       | Options for the   | casadi::BonMinMe |
|                   |               | autogenerated     | ssageHandler     |
|                   |               | gradient of the   |                  |
|                   |               | objective.        |                  |
+-------------------+---------------+-------------------+------------------+
| hess_lag          | OT_FUNCTION   | Function for      | casadi::BonMinMe |
|                   |               | calculating the   | ssageHandler     |
|                   |               | Hessian of the    |                  |
|                   |               | Lagrangian        |                  |
|                   |               | (autogenerated by |                  |
|                   |               | default)          |                  |
+-------------------+---------------+-------------------+------------------+
| hess_lag_options  | OT_DICT       | Options for the   | casadi::BonMinMe |
|                   |               | autogenerated     | ssageHandler     |
|                   |               | Hessian of the    |                  |
|                   |               | Lagrangian.       |                  |
+-------------------+---------------+-------------------+------------------+
| ignore_check_vec  | OT_BOOL       | If set to true,   | casadi::Nlpsol   |
|                   |               | the input shape   |                  |
|                   |               | of F will not be  |                  |
|                   |               | checked.          |                  |
+-------------------+---------------+-------------------+------------------+
| iteration_callbac | OT_FUNCTION   | A function that   | casadi::Nlpsol   |
| k                 |               | will be called at |                  |
|                   |               | each iteration    |                  |
|                   |               | with the solver   |                  |
|                   |               | as input. Check   |                  |
|                   |               | documentation of  |                  |
|                   |               | Callback .        |                  |
+-------------------+---------------+-------------------+------------------+
| iteration_callbac | OT_BOOL       | If set to true,   | casadi::Nlpsol   |
| k_ignore_errors   |               | errors thrown by  |                  |
|                   |               | iteration_callbac |                  |
|                   |               | k will be         |                  |
|                   |               | ignored.          |                  |
+-------------------+---------------+-------------------+------------------+
| iteration_callbac | OT_INT        | Only call the     | casadi::Nlpsol   |
| k_step            |               | callback function |                  |
|                   |               | every few         |                  |
|                   |               | iterations.       |                  |
+-------------------+---------------+-------------------+------------------+
| jac_g             | OT_FUNCTION   | Function for      | casadi::BonMinMe |
|                   |               | calculating the   | ssageHandler     |
|                   |               | Jacobian of the   |                  |
|                   |               | constraints       |                  |
|                   |               | (autogenerated by |                  |
|                   |               | default)          |                  |
+-------------------+---------------+-------------------+------------------+
| jac_g_options     | OT_DICT       | Options for the   | casadi::BonMinMe |
|                   |               | autogenerated     | ssageHandler     |
|                   |               | Jacobian of the   |                  |
|                   |               | constraints.      |                  |
+-------------------+---------------+-------------------+------------------+
| pass_nonlinear_va | OT_BOOL       | Pass list of      | casadi::BonMinMe |
| riables           |               | variables         | ssageHandler     |
|                   |               | entering          |                  |
|                   |               | nonlinearly to    |                  |
|                   |               | BONMIN            |                  |
+-------------------+---------------+-------------------+------------------+
| var_integer_md    | OT_DICT       | Integer metadata  | casadi::BonMinMe |
|                   |               | (a dictionary     | ssageHandler     |
|                   |               | with lists of     |                  |
|                   |               | integers) about   |                  |
|                   |               | variables to be   |                  |
|                   |               | passed to BONMIN  |                  |
+-------------------+---------------+-------------------+------------------+
| var_numeric_md    | OT_DICT       | Numeric metadata  | casadi::BonMinMe |
|                   |               | (a dictionary     | ssageHandler     |
|                   |               | with lists of     |                  |
|                   |               | reals) about      |                  |
|                   |               | variables to be   |                  |
|                   |               | passed to BONMIN  |                  |
+-------------------+---------------+-------------------+------------------+
| var_string_md     | OT_DICT       | String metadata   | casadi::BonMinMe |
|                   |               | (a dictionary     | ssageHandler     |
|                   |               | with lists of     |                  |
|                   |               | strings) about    |                  |
|                   |               | variables to be   |                  |
|                   |               | passed to BONMIN  |                  |
+-------------------+---------------+-------------------+------------------+
| verbose_init      | OT_BOOL       | Print out timing  | casadi::Nlpsol   |
|                   |               | information about |                  |
|                   |               | the different     |                  |
|                   |               | stages of         |                  |
|                   |               | initialization    |                  |
+-------------------+---------------+-------------------+------------------+
| warn_initial_boun | OT_BOOL       | Warn if the       | casadi::Nlpsol   |
| ds                |               | initial guess     |                  |
|                   |               | does not satisfy  |                  |
|                   |               | LBX and UBX       |                  |
+-------------------+---------------+-------------------+------------------+

Diagrams
--------



C++ includes: b0_options.hpp ";


// File: classcasadi_1_1BonminUserClass.xml
%feature("docstring") casadi::BonminUserClass "[INTERNAL] C++ includes:
bonmin_nlp.hpp ";

%feature("docstring") casadi::BonminUserClass::finalize_solution "[INTERNAL]  This method is called when the algorithm is complete so the TNLP
can store/write the solution

";

%feature("docstring") casadi::BonminUserClass::eval_g "[INTERNAL]  Method
to return the constraint residuals

";

%feature("docstring") casadi::BonminUserClass::eval_f "[INTERNAL]  Method
to return the objective value

";

%feature("docstring") casadi::BonminUserClass::get_constraints_linearity "[INTERNAL] ";

%feature("docstring") casadi::BonminUserClass::BonminUserClass "[INTERNAL]
";

%feature("docstring") casadi::BonminUserClass::get_starting_point "[INTERNAL]  Method to return the starting point for the algorithm

";

%feature("docstring")
casadi::BonminUserClass::get_number_of_nonlinear_variables "[INTERNAL]
Specify the number of variables that appear in the Hessian

";

%feature("docstring") casadi::BonminUserClass::eval_jac_g "[INTERNAL]
Method to return: 1) The structure of the Jacobian (if \"values\" is NULL)
2) The values of the Jacobian (if \"values\" is not NULL)

";

%feature("docstring") casadi::BonminUserClass::intermediate_callback "[INTERNAL]  This method is called at every iteration

";

%feature("docstring") casadi::BonminUserClass::eval_h "[INTERNAL]  Method
to return: 1) The structure of the hessian of the Lagrangian (if \"values\"
is NULL) 2) The values of the hessian of the Lagrangian (if \"values\" is
not NULL)

";

%feature("docstring") casadi::BonminUserClass::get_variables_types "[INTERNAL] ";

%feature("docstring") casadi::BonminUserClass::~BonminUserClass "[INTERNAL]
";

%feature("docstring")
casadi::BonminUserClass::get_list_of_nonlinear_variables "[INTERNAL]
Specify which variables that appear in the Hessian

";

%feature("docstring") casadi::BonminUserClass::get_bounds_info "[INTERNAL]
Method to return the bounds for my problem

";

%feature("docstring") casadi::BonminUserClass::sosConstraints "[INTERNAL]
";

%feature("docstring") casadi::BonminUserClass::get_nlp_info "[INTERNAL]
Method to return some info about the nlp

";

%feature("docstring") casadi::BonminUserClass::branchingInfo "[INTERNAL] ";

%feature("docstring") casadi::BonminUserClass::eval_grad_f "[INTERNAL]
Method to return the gradient of the objective

";

%feature("docstring") casadi::BonminUserClass::get_variables_linearity "[INTERNAL] ";


// File: classcasadi_1_1BSpline.xml
%feature("docstring") casadi::BSpline::get_sparsity_in "

Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::BSpline::generate_dependencies "[INTERNAL]
Export / Generate C code for the dependency function.

";

%feature("docstring") casadi::BSpline::get_name_out "[INTERNAL]  Names of
function input and outputs.

";

%feature("docstring") casadi::BSpline::jac_sx "[INTERNAL]  Jacobian
expression.

";

%feature("docstring") casadi::BSpline::set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::BSpline::has_function "[INTERNAL] ";

%feature("docstring") casadi::BSpline::slice "[INTERNAL]  returns a new
function with a selection of inputs/outputs of the original

";

%feature("docstring") casadi::BSpline::_setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";

%feature("docstring") casadi::BSpline::numel_in "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::BSpline::generateMeta "[INTERNAL]  Generate
meta-information allowing a user to evaluate a generated function.

";

%feature("docstring") casadi::BSpline::_get_stats "[INTERNAL]  Get all
statistics

";

%feature("docstring") casadi::BSpline::tangent "[INTERNAL]  Return tangent
function.

";

%feature("docstring") casadi::BSpline::symbolicFwdSeed "[INTERNAL]
Symbolic expressions for the forward seeds.

";

%feature("docstring") casadi::BSpline::mx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::BSpline::size1_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::BSpline::getFullJacobian "

Return Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::BSpline::hessian "[INTERNAL]  Return Hessian
function.

";

%feature("docstring") casadi::BSpline::checkout "[INTERNAL]  Checkout a
memory object.

";

%feature("docstring") casadi::BSpline::sp_fwd "[INTERNAL]  Propagate
sparsity forward.

";

%feature("docstring") casadi::BSpline::_set_temp "[INTERNAL]  Set the
(temporary) work vectors.

";

%feature("docstring") casadi::BSpline::sz_iw "[INTERNAL]  Get required
length of iw field.

";

%feature("docstring") casadi::BSpline::finalize "[INTERNAL]  Finalize the
object creation This function, which visits the class hierarchy in reverse
order is run after init() has been completed.

";

%feature("docstring") casadi::BSpline::hasFullJacobian "

Return Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::BSpline::simplifiedCall "[INTERNAL]  Use
simplified signature.

";

%feature("docstring") casadi::BSpline::mapsum_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::BSpline::free_memory "[INTERNAL]  Free memory
block.

";

%feature("docstring") casadi::BSpline::free_mx "[INTERNAL]  Get free
variables ( MX)

";

%feature("docstring") casadi::BSpline::getJacSparsityGen "[INTERNAL]  Get
the sparsity pattern, forward mode.

";

%feature("docstring") casadi::BSpline::getAtomicOutput "[INTERNAL]  Get the
(integer) output argument of an atomic operation.

";

%feature("docstring") casadi::BSpline::sx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::BSpline::n_nodes "[INTERNAL]  Number of nodes
in the algorithm.

";

%feature("docstring") casadi::BSpline::construct "[INTERNAL]  Construct
Prepares the function for evaluation.

";

%feature("docstring") casadi::BSpline::print_free "[INTERNAL]  Print free
variables.

";

%feature("docstring") casadi::BSpline::print_options "[INTERNAL]  Print
list of options.

";

%feature("docstring") casadi::BSpline::numel_out "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::BSpline::get_forward "

Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::BSpline::is_a "[INTERNAL]  Check if the
function is of a particular type.

";

%feature("docstring") casadi::BSpline::adjViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::BSpline::hasDerivative "[INTERNAL]  Can
derivatives be calculated in any way?

";

%feature("docstring") casadi::BSpline::log "

>  void casadi::FunctionInternal::log(const std::string &msg) const 
------------------------------------------------------------------------
[INTERNAL] 
Log the status of the solver.

>  void casadi::FunctionInternal::log(const std::string &fcn, const std::string &msg) const 
------------------------------------------------------------------------
[INTERNAL] 
Log the status of the solver, function given.

";

%feature("docstring") casadi::BSpline::getPartition "[INTERNAL]  Get the
unidirectional or bidirectional partition.

";

%feature("docstring") casadi::BSpline::symbolicAdjSeed "[INTERNAL]
Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::BSpline::which_depends "[INTERNAL]  Which
variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::BSpline::generate_lifted "[INTERNAL]  Extract
the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::BSpline::print_option "[INTERNAL]  Print all
information there is to know about a certain option.

";

%feature("docstring") casadi::BSpline::replaceFwdSeed "[INTERNAL]  Replace
0-by-0 forward seeds.

";

%feature("docstring") casadi::BSpline::get_n_reverse "

Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::BSpline::has_codegen "

Is codegen supported?

";

%feature("docstring") casadi::BSpline::checkInputs "[INTERNAL]  Check if
the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::BSpline::getWorkSize "[INTERNAL]  Get the
length of the work vector.

";

%feature("docstring") casadi::BSpline::_call "[INTERNAL]   Call a function,
overloaded.

";

%feature("docstring") casadi::BSpline::sx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::BSpline::get_options "

Options.

";

%feature("docstring") casadi::BSpline::get_sparsity_out "

Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::BSpline::type_name "

Get type name.

";

%feature("docstring") casadi::BSpline::size_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::BSpline::grad_sx "[INTERNAL]  Gradient
expression.

";

%feature("docstring") casadi::BSpline::eval_sx "[INTERNAL]  Evaluate with
symbolic scalars.

";

%feature("docstring") casadi::BSpline::index_in "[INTERNAL]  Get input
scheme index by name.

";

%feature("docstring") casadi::BSpline::size2_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::BSpline::_eval "

>  void casadi::FunctionInternal::_eval(const double **arg, double **res, int *iw, double *w, int mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate numerically.

>  void casadi::FunctionInternal::_eval(const SXElem **arg, SXElem **res, int *iw, SXElem *w, int mem) const

>  void casadi::FunctionInternal::_eval(const bvec_t **arg, bvec_t **res, int *iw, bvec_t *w, int mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

%feature("docstring") casadi::BSpline::repr "[INTERNAL]  Print.

";

%feature("docstring") casadi::BSpline::sp_rev "[INTERNAL]  Propagate
sparsity backwards.

";

%feature("docstring") casadi::BSpline::getAlgorithmSize "[INTERNAL]  Get
the number of atomic operations.

";

%feature("docstring") casadi::BSpline::setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";

%feature("docstring") casadi::BSpline::init_memory "[INTERNAL]  Initalize
memory block.

";

%feature("docstring") casadi::BSpline::simple "[INTERNAL]  Evaluate
numerically, simplied syntax.

";

%feature("docstring") casadi::BSpline::n_mem "[INTERNAL]  Maximum number of
memory objects.

";

%feature("docstring") casadi::BSpline::addShorthand "[INTERNAL]  Generate
shorthand macro.

";

%feature("docstring") casadi::BSpline::has_sprev "[INTERNAL]  Is the class
able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::BSpline::getTangent "[INTERNAL]  Return
tangent function.

";

%feature("docstring") casadi::BSpline::jac_mx "[INTERNAL]  Jacobian
expression.

";

%feature("docstring") casadi::BSpline::hess_sx "[INTERNAL]  Hessian
expression.

";

%feature("docstring") casadi::BSpline::get_function "[INTERNAL] ";

%feature("docstring") casadi::BSpline::get_n_out "

Number of function inputs and outputs.

";

%feature("docstring") casadi::BSpline::alloc_memory "[INTERNAL]  Create
memory block.

";

%feature("docstring") casadi::BSpline::name_in "[INTERNAL]  Get input
scheme name by index.

";

%feature("docstring") casadi::BSpline::factory "[INTERNAL] ";

%feature("docstring") casadi::BSpline::sz_res "[INTERNAL]  Get required
length of res field.

";

%feature("docstring") casadi::BSpline::_set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::BSpline::reverse "[INTERNAL]  Return function
that calculates adjoint derivatives reverse(nadj) returns a cached instance
if available, and calls  Function get_reverse(int nadj) if no cached version
is available.

";

%feature("docstring") casadi::BSpline::init "

Initialize.

";

%feature("docstring") casadi::BSpline::get_reverse "

Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::BSpline::set_temp "[INTERNAL]  Set the
(temporary) work vectors.

";

%feature("docstring") casadi::BSpline::replaceAdjSeed "[INTERNAL]  Replace
0-by-0 reverse seeds.

";

%feature("docstring") casadi::BSpline::getGradient "[INTERNAL]  Return
gradient function.

";

%feature("docstring") casadi::BSpline::generateFunction "[INTERNAL]
Generate code the function.

";

%feature("docstring") casadi::BSpline::wrap "[INTERNAL]  Wrap in an
Function instance consisting of only one MX call.

";

%feature("docstring") casadi::BSpline::size_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::BSpline::addDependency "[INTERNAL]  Add a
dependent function.

";

%feature("docstring") casadi::BSpline::matchingRes "[INTERNAL]  Check if
output arguments that needs to be replaced.

";

%feature("docstring") casadi::BSpline::mx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::BSpline::sparsity_jac "[INTERNAL]  Get, if
necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::BSpline::alloc_arg "[INTERNAL]  Ensure
required length of arg field.

";

%feature("docstring") casadi::BSpline::gradient "[INTERNAL]  Return
gradient function.

";

%feature("docstring") casadi::BSpline::getAtomicInputReal "[INTERNAL]  Get
the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::BSpline::print "

Print description.

";

%feature("docstring") casadi::BSpline::ad_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::BSpline::grad_mx "[INTERNAL]  Gradient
expression.

";

%feature("docstring") casadi::BSpline::index_out "[INTERNAL]  Get output
scheme index by name.

";

%feature("docstring") casadi::BSpline::get_name_in "[INTERNAL]  Names of
function input and outputs.

";

%feature("docstring") casadi::BSpline::jacobian "[INTERNAL]  Return
Jacobian function.

";

%feature("docstring") casadi::BSpline::nnz_out "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::BSpline::set_jac_sparsity "[INTERNAL]
Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::BSpline::default_in "[INTERNAL]  Get default
input value.

";

%feature("docstring") casadi::BSpline::self "[INTERNAL]  Get a public class
instance.

";

%feature("docstring") casadi::BSpline::tang_mx "[INTERNAL]  Tangent
expression.

";

%feature("docstring") casadi::BSpline::clear_memory "[INTERNAL]  Clear all
memory (called from destructor)

";

%feature("docstring") casadi::BSpline::replaceRes "[INTERNAL]  Replace
0-by-0 outputs.

";

%feature("docstring") casadi::BSpline::setJacobian "[INTERNAL]  Return
Jacobian function.

";

%feature("docstring") casadi::BSpline::n_in "[INTERNAL]  Number of function
inputs and outputs.

";

%feature("docstring") casadi::BSpline::checkRes "[INTERNAL]  Check if
output arguments have correct length and dimensions.

";

%feature("docstring") casadi::BSpline::call_reverse "[INTERNAL]  Reverse
mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::BSpline::fwdViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::BSpline::map_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::BSpline::sp_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode, sparsity propagation.

";

%feature("docstring") casadi::BSpline::call "[INTERNAL]   Call a function,
templated.

";

%feature("docstring") casadi::BSpline::memory "[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::BSpline::get_n_forward "

Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::BSpline::getJacSparsityHierarchicalSymm "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::BSpline::getAdaptorSolverName "[INTERNAL]
Obtain solver name from Adaptor.

";

%feature("docstring") casadi::BSpline::alloc_iw "[INTERNAL]  Ensure
required length of iw field.

";

%feature("docstring") casadi::BSpline::codegen_name "[INTERNAL]  Get name
in codegen.

";

%feature("docstring") casadi::BSpline::print_dimensions "[INTERNAL]  Print
dimensions of inputs and outputs.

";

%feature("docstring") casadi::BSpline::codegen_decref "[INTERNAL]  Codegen
decref for dependencies.

";

%feature("docstring") casadi::BSpline::generateDeclarations "

Generate code for the declarations of the C function.

";

%feature("docstring") casadi::BSpline::alloc_w "[INTERNAL]  Ensure required
length of w field.

";

%feature("docstring") casadi::BSpline::sparsity_out "[INTERNAL]  Get
sparsity of a given output.

";

%feature("docstring") casadi::BSpline::replaceArg "[INTERNAL]  Replace
0-by-0 inputs.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::BSpline::get_n_in "

Number of function inputs and outputs.

";

%feature("docstring") casadi::BSpline::forward "[INTERNAL]  Return function
that calculates forward derivatives forward(nfwd) returns a cached instance
if available, and calls  Function get_forward(int nfwd) if no cached version
is available.

";

%feature("docstring") casadi::BSpline::size1_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::BSpline::generateBody "

Generate code for the body of the C function.

";

%feature("docstring") casadi::BSpline::getAtomicInput "[INTERNAL]  Get the
(integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::BSpline::get_stats "[INTERNAL]  Get all
statistics

";

%feature("docstring") casadi::BSpline::has_free "[INTERNAL]  Does the
function have free variables.

";

%feature("docstring") casadi::BSpline::oracle "[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::BSpline::getHessian "[INTERNAL]  Return
Hessian function.

";

%feature("docstring") casadi::BSpline::name_out "[INTERNAL]  Get output
scheme name by index.

";

%feature("docstring") casadi::BSpline::call_forward "[INTERNAL]  Forward
mode AD, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::BSpline::eval "

Evaluate numerically, work vectors given.

";

%feature("docstring") casadi::BSpline::signature "[INTERNAL]  Code generate
the function.

";

%feature("docstring") casadi::BSpline::name "[INTERNAL]  Name of the
function.

";

%feature("docstring") casadi::BSpline::getJacSparsity "[INTERNAL]  Generate
the sparsity of a Jacobian block.

";

%feature("docstring") casadi::BSpline::getAtomicOperation "[INTERNAL]  Get
an atomic operation operator index.

";

%feature("docstring") casadi::BSpline::fullJacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::BSpline::tang_sx "[INTERNAL]  Tangent
expression.

";

%feature("docstring") casadi::BSpline::nnz_in "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::BSpline::eval_name "[INTERNAL]  Get name of
the evaluation function.

";

%feature("docstring") casadi::BSpline::sz_arg "[INTERNAL]  Get required
length of arg field.

";

%feature("docstring") casadi::BSpline::getJacSparsityHierarchical "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::BSpline "

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Custom input     | casadi::Function |
|                  |                 | scheme           | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| lookup_mode      | OT_STRINGVECTOR | Sets, for each   | casadi::BSpline  |
|                  |                 | grid dimenion,   |                  |
|                  |                 | the lookup       |                  |
|                  |                 | algorithm used   |                  |
|                  |                 | to find the      |                  |
|                  |                 | correct index.   |                  |
|                  |                 | 'linear' uses a  |                  |
|                  |                 | for-loop +       |                  |
|                  |                 | break; 'exact'   |                  |
|                  |                 | uses floored     |                  |
|                  |                 | division (only   |                  |
|                  |                 | for uniform      |                  |
|                  |                 | grids).          |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Custom output    | casadi::Function |
|                  |                 | scheme           | Internal         |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: bspline.hpp ";

%feature("docstring") casadi::BSpline::getJacobian "[INTERNAL]  Return
Jacobian function.

";

%feature("docstring") casadi::BSpline::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::BSpline::alloc_res "[INTERNAL]  Ensure
required length of res field.

";

%feature("docstring") casadi::BSpline::free_sx "[INTERNAL]  Get free
variables (SX)

";

%feature("docstring") casadi::BSpline::jit_dependencies "[INTERNAL]   Jit
dependencies.

";

%feature("docstring") casadi::BSpline::sz_w "[INTERNAL]  Get required
length of w field.

";

%feature("docstring") casadi::BSpline::n_out "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::BSpline::codegen_incref "[INTERNAL]  Codegen
incref for dependencies.

";

%feature("docstring") casadi::BSpline::alloc "[INTERNAL]  Ensure work
vectors long enough to evaluate function.

";

%feature("docstring") casadi::BSpline::~BSpline "

Destructor.

";

%feature("docstring") casadi::BSpline::sz_work "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") casadi::BSpline::symbolicOutput "[INTERNAL]  Get a
vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::BSpline::verbose "[INTERNAL]  Verbose mode?

";

%feature("docstring") casadi::BSpline::sparsity_in "[INTERNAL]  Get
sparsity of a given input.

";

%feature("docstring") casadi::BSpline::release "[INTERNAL]  Release a
memory object.

";

%feature("docstring") casadi::BSpline::size2_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::BSpline::eval_mx "[INTERNAL]  Evaluate with
symbolic matrices.

";

%feature("docstring") casadi::BSpline::checkArg "[INTERNAL]  Check if input
arguments have correct length and dimensions.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::BSpline::matchingArg "[INTERNAL]  Check if
input arguments that needs to be replaced.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::BSpline::BSpline "";

%feature("docstring") casadi::BSpline::has_spfwd "[INTERNAL]  Is the class
able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::BSpline::getCount "[INTERNAL]  Get the
reference count.

";


// File: classcasadi_1_1BSplineCommon.xml
%feature("docstring") casadi::BSplineCommon::tang_mx "[INTERNAL]  Tangent
expression.

";

%feature("docstring") casadi::BSplineCommon::gradient "[INTERNAL]  Return
gradient function.

";

%feature("docstring") casadi::BSplineCommon::set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::BSplineCommon::eval_mx "[INTERNAL]  Evaluate
with symbolic matrices.

";

%feature("docstring") casadi::BSplineCommon::sz_w "[INTERNAL]  Get required
length of w field.

";

%feature("docstring") casadi::BSplineCommon::simple "[INTERNAL]  Evaluate
numerically, simplied syntax.

";

%feature("docstring") casadi::BSplineCommon::get_reverse "[INTERNAL]
Return function that calculates adjoint derivatives reverse(nadj) returns a
cached instance if available, and calls  Function get_reverse(int nadj) if
no cached version is available.

";

%feature("docstring") casadi::BSplineCommon::set_temp "[INTERNAL]  Set the
(temporary) work vectors.

";

%feature("docstring") casadi::BSplineCommon::eval_name "[INTERNAL]  Get
name of the evaluation function.

";

%feature("docstring") casadi::BSplineCommon::print_options "[INTERNAL]
Print list of options.

";

%feature("docstring") casadi::BSplineCommon::release "[INTERNAL]  Release a
memory object.

";

%feature("docstring") casadi::BSplineCommon::symbolicFwdSeed "[INTERNAL]
Symbolic expressions for the forward seeds.

";

%feature("docstring") casadi::BSplineCommon::hess_sx "[INTERNAL]  Hessian
expression.

";

%feature("docstring") casadi::BSplineCommon::eval "[INTERNAL]  Evaluate
numerically.

";

%feature("docstring") casadi::BSplineCommon::has_sprev "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::BSplineCommon::sp_fwd "[INTERNAL]  Propagate
sparsity forward.

";

%feature("docstring") casadi::BSplineCommon::getAdaptorSolverName "[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring") casadi::BSplineCommon::verbose "[INTERNAL]  Verbose
mode?

";

%feature("docstring") casadi::BSplineCommon::mx_in "[INTERNAL]  Get
function input(s) and output(s)

";

%feature("docstring") casadi::BSplineCommon::addShorthand "[INTERNAL]
Generate shorthand macro.

";

%feature("docstring") casadi::BSplineCommon::getAlgorithmSize "[INTERNAL]
Get the number of atomic operations.

";

%feature("docstring") casadi::BSplineCommon::codegen_name "[INTERNAL]  Get
name in codegen.

";

%feature("docstring") casadi::BSplineCommon::get_forward "[INTERNAL]
Return function that calculates forward derivatives forward(nfwd) returns a
cached instance if available, and calls  Function get_forward(int nfwd) if
no cached version is available.

";

%feature("docstring") casadi::BSplineCommon::construct "[INTERNAL]
Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::BSplineCommon::slice "[INTERNAL]  returns a
new function with a selection of inputs/outputs of the original

";

%feature("docstring") casadi::BSplineCommon::sx_in "[INTERNAL]  Get
function input(s) and output(s)

";

%feature("docstring") casadi::BSplineCommon::repr "[INTERNAL]  Print.

";

%feature("docstring") casadi::BSplineCommon::self "[INTERNAL]  Get a public
class instance.

";

%feature("docstring") casadi::BSplineCommon::alloc_arg "[INTERNAL]  Ensure
required length of arg field.

";

%feature("docstring") casadi::BSplineCommon::has_free "[INTERNAL]  Does the
function have free variables.

";

%feature("docstring") casadi::BSplineCommon::simplifiedCall "[INTERNAL]
Use simplified signature.

";

%feature("docstring") casadi::BSplineCommon::which_depends "[INTERNAL]
Which variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::BSplineCommon::hasFullJacobian "[INTERNAL]
Return Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::BSplineCommon::print_option "[INTERNAL]
Print all information there is to know about a certain option.

";

%feature("docstring") casadi::BSplineCommon::size2_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::BSplineCommon::free_memory "[INTERNAL]  Free
memory block.

";

%feature("docstring") casadi::BSplineCommon::generateBody "[INTERNAL]
Generate code for the function body.

";

%feature("docstring") casadi::BSplineCommon::getJacSparsityHierarchical "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::BSplineCommon::memory "[INTERNAL]  Memory
objects.

";

%feature("docstring") casadi::BSplineCommon::size_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::BSplineCommon::replaceFwdSeed "[INTERNAL]
Replace 0-by-0 forward seeds.

";

%feature("docstring") casadi::BSplineCommon::replaceRes "[INTERNAL]
Replace 0-by-0 outputs.

";

%feature("docstring") casadi::BSplineCommon::setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";

%feature("docstring") casadi::BSplineCommon::checkout "[INTERNAL]  Checkout
a memory object.

";

%feature("docstring") casadi::BSplineCommon::print "[INTERNAL]  Print.

";

%feature("docstring") casadi::BSplineCommon::addDependency "[INTERNAL]  Add
a dependent function.

";

%feature("docstring") casadi::BSplineCommon::_get_stats "[INTERNAL]  Get
all statistics

";

%feature("docstring") casadi::BSplineCommon::forward "[INTERNAL]  Return
function that calculates forward derivatives forward(nfwd) returns a cached
instance if available, and calls  Function get_forward(int nfwd) if no
cached version is available.

";

%feature("docstring") casadi::BSplineCommon::name_out "[INTERNAL]  Get
output scheme name by index.

";

%feature("docstring") casadi::BSplineCommon::tangent "[INTERNAL]  Return
tangent function.

";

%feature("docstring") casadi::BSplineCommon::sx_out "[INTERNAL]  Get
function input(s) and output(s)

";

%feature("docstring") casadi::BSplineCommon::getJacSparsity "[INTERNAL]
Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::BSplineCommon::call_forward "[INTERNAL]
Forward mode AD, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::BSplineCommon::getWorkSize "[INTERNAL]  Get
the length of the work vector.

";

%feature("docstring") casadi::BSplineCommon::sparsity_in "[INTERNAL]  Get
sparsity of a given input.

";

%feature("docstring") casadi::BSplineCommon::eval_sx "[INTERNAL]  Evaluate
with symbolic scalars.

";

%feature("docstring") casadi::BSplineCommon::get_sparsity_out "[INTERNAL]
Get sparsity of a given output.

";

%feature("docstring") casadi::BSplineCommon::reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::BSplineCommon::replaceArg "[INTERNAL]
Replace 0-by-0 inputs.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::BSplineCommon::setJacobian "[INTERNAL]
Return Jacobian function.

";

%feature("docstring") casadi::BSplineCommon::get_n_out "

Number of function inputs and outputs.

";

%feature("docstring") casadi::BSplineCommon::checkRes "[INTERNAL]  Check if
output arguments have correct length and dimensions.

";

%feature("docstring") casadi::BSplineCommon::generateMeta "[INTERNAL]
Generate meta-information allowing a user to evaluate a generated function.

";

%feature("docstring") casadi::BSplineCommon::get_name_out "[INTERNAL]
Names of function input and outputs.

";

%feature("docstring") casadi::BSplineCommon::n_out "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::BSplineCommon::symbolicAdjSeed "[INTERNAL]
Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::BSplineCommon::signature "[INTERNAL]  Code
generate the function.

";

%feature("docstring") casadi::BSplineCommon::get_name_in "[INTERNAL]  Names
of function input and outputs.

";

%feature("docstring") casadi::BSplineCommon::_set_temp "[INTERNAL]  Set the
(temporary) work vectors.

";

%feature("docstring") casadi::BSplineCommon::has_spfwd "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::BSplineCommon::grad_sx "[INTERNAL]  Gradient
expression.

";

%feature("docstring") casadi::BSplineCommon::getAtomicOutput "[INTERNAL]
Get the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::BSplineCommon::jit_dependencies "[INTERNAL]
Jit dependencies.

";

%feature("docstring") casadi::BSplineCommon::size_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::BSplineCommon::getJacSparsityHierarchicalSymm
"[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::BSplineCommon::default_in "[INTERNAL]  Get
default input value.

";

%feature("docstring") casadi::BSplineCommon::n_nodes "[INTERNAL]  Number of
nodes in the algorithm.

";

%feature("docstring") casadi::BSplineCommon::get_n_forward "[INTERNAL]
Return function that calculates forward derivatives forward(nfwd) returns a
cached instance if available, and calls  Function get_forward(int nfwd) if
no cached version is available.

";

%feature("docstring") casadi::BSplineCommon::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::BSplineCommon::index_in "[INTERNAL]  Get
input scheme index by name.

";

%feature("docstring") casadi::BSplineCommon::generateFunction "[INTERNAL]
Generate code the function.

";

%feature("docstring") casadi::BSplineCommon::print_free "[INTERNAL]  Print
free variables.

";

%feature("docstring") casadi::BSplineCommon::get_stats "[INTERNAL]  Get all
statistics

";

%feature("docstring") casadi::BSplineCommon::checkInputs "[INTERNAL]  Check
if the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::BSplineCommon::call "[INTERNAL]   Call a
function, templated.

";

%feature("docstring") casadi::BSplineCommon::name "[INTERNAL]  Name of the
function.

";

%feature("docstring") casadi::BSplineCommon::get_n_in "

Number of function inputs and outputs.

";

%feature("docstring") casadi::BSplineCommon::getJacobian "[INTERNAL]
Return Jacobian function.

";

%feature("docstring") casadi::BSplineCommon::generate_lifted "[INTERNAL]
Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::BSplineCommon::call_reverse "[INTERNAL]
Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::BSplineCommon::grad_mx "[INTERNAL]  Gradient
expression.

";

%feature("docstring") casadi::BSplineCommon::matchingRes "[INTERNAL]  Check
if output arguments that needs to be replaced.

";

%feature("docstring") casadi::BSplineCommon::set_jac_sparsity "[INTERNAL]
Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::BSplineCommon::n_in "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::BSplineCommon::factory "[INTERNAL] ";

%feature("docstring") casadi::BSplineCommon::hessian "[INTERNAL]  Return
Hessian function.

";

%feature("docstring") casadi::BSplineCommon::sparsity_out "[INTERNAL]  Get
sparsity of a given output.

";

%feature("docstring") casadi::BSplineCommon::alloc_w "[INTERNAL]  Ensure
required length of w field.

";

%feature("docstring") casadi::BSplineCommon::_call "[INTERNAL]   Call a
function, overloaded.

";

%feature("docstring") casadi::BSplineCommon::sparsity_jac "[INTERNAL]  Get,
if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::BSplineCommon::generate_dependencies "[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring") casadi::BSplineCommon::alloc "[INTERNAL]  Ensure work
vectors long enough to evaluate function.

";

%feature("docstring") casadi::BSplineCommon::getPartition "[INTERNAL]  Get
the unidirectional or bidirectional partition.

";

%feature("docstring") casadi::BSplineCommon::free_mx "[INTERNAL]  Get free
variables ( MX)

";

%feature("docstring") casadi::BSplineCommon::codegen_incref "[INTERNAL]
Codegen incref for dependencies.

";

%feature("docstring") casadi::BSplineCommon::checkArg "[INTERNAL]  Check if
input arguments have correct length and dimensions.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::BSplineCommon::numel_out "[INTERNAL]  Number
of input/output elements.

";

%feature("docstring") casadi::BSplineCommon::size1_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::BSplineCommon::size1_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::BSplineCommon::symbolicOutput "[INTERNAL]
Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::BSplineCommon "

Base class for BSpline evaluators

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Custom input     | casadi::Function |
|                  |                 | scheme           | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| lookup_mode      | OT_STRINGVECTOR | Sets, for each   | casadi::BSplineC |
|                  |                 | grid dimenion,   | ommon            |
|                  |                 | the lookup       |                  |
|                  |                 | algorithm used   |                  |
|                  |                 | to find the      |                  |
|                  |                 | correct index.   |                  |
|                  |                 | 'linear' uses a  |                  |
|                  |                 | for-loop +       |                  |
|                  |                 | break; 'exact'   |                  |
|                  |                 | uses floored     |                  |
|                  |                 | division (only   |                  |
|                  |                 | for uniform      |                  |
|                  |                 | grids).          |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Custom output    | casadi::Function |
|                  |                 | scheme           | Internal         |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: bspline.hpp ";

%feature("docstring") casadi::BSplineCommon::mapsum_mx "[INTERNAL]
Parallel evaluation.

";

%feature("docstring") casadi::BSplineCommon::log "

>  void casadi::FunctionInternal::log(const std::string &msg) const 
------------------------------------------------------------------------
[INTERNAL] 
Log the status of the solver.

>  void casadi::FunctionInternal::log(const std::string &fcn, const std::string &msg) const 
------------------------------------------------------------------------
[INTERNAL] 
Log the status of the solver, function given.

";

%feature("docstring") casadi::BSplineCommon::wrap "[INTERNAL]  Wrap in an
Function instance consisting of only one MX call.

";

%feature("docstring") casadi::BSplineCommon::adjViaJac "[INTERNAL]
Calculate derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::BSplineCommon::getFullJacobian "[INTERNAL]
Return Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::BSplineCommon::clear_memory "[INTERNAL]
Clear all memory (called from destructor)

";

%feature("docstring") casadi::BSplineCommon::getJacSparsityGen "[INTERNAL]
Get the sparsity pattern, forward mode.

";

%feature("docstring") casadi::BSplineCommon::getAtomicInput "[INTERNAL]
Get the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::BSplineCommon::codegen_decref "[INTERNAL]
Codegen decref for dependencies.

";

%feature("docstring") casadi::BSplineCommon::nnz_out "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::BSplineCommon::hasDerivative "[INTERNAL]  Can
derivatives be calculated in any way?

";

%feature("docstring") casadi::BSplineCommon::fwdViaJac "[INTERNAL]
Calculate derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::BSplineCommon::alloc_res "[INTERNAL]  Ensure
required length of res field.

";

%feature("docstring") casadi::BSplineCommon::matchingArg "[INTERNAL]  Check
if input arguments that needs to be replaced.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::BSplineCommon::alloc_memory "[INTERNAL]
Create memory block.

";

%feature("docstring") casadi::BSplineCommon::BSplineCommon "";

%feature("docstring") casadi::BSplineCommon::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::BSplineCommon::_eval "

>  void casadi::FunctionInternal::_eval(const double **arg, double **res, int *iw, double *w, int mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate numerically.

>  void casadi::FunctionInternal::_eval(const SXElem **arg, SXElem **res, int *iw, SXElem *w, int mem) const

>  void casadi::FunctionInternal::_eval(const bvec_t **arg, bvec_t **res, int *iw, bvec_t *w, int mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

%feature("docstring") casadi::BSplineCommon::type_name "[INTERNAL]  Get
type name.

";

%feature("docstring") casadi::BSplineCommon::_set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::BSplineCommon::jacobian "[INTERNAL]  Return
Jacobian function.

";

%feature("docstring") casadi::BSplineCommon::nnz_in "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::BSplineCommon::get_n_reverse "[INTERNAL]
Return function that calculates adjoint derivatives reverse(nadj) returns a
cached instance if available, and calls  Function get_reverse(int nadj) if
no cached version is available.

";

%feature("docstring") casadi::BSplineCommon::sz_res "[INTERNAL]  Get
required length of res field.

";

%feature("docstring") casadi::BSplineCommon::get_sparsity_in "[INTERNAL]
Get sparsity of a given input.

";

%feature("docstring") casadi::BSplineCommon::fullJacobian "[INTERNAL]
Return Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::BSplineCommon::print_dimensions "[INTERNAL]
Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::BSplineCommon::numel_in "[INTERNAL]  Number
of input/output elements.

";

%feature("docstring") casadi::BSplineCommon::map_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::BSplineCommon::index_out "[INTERNAL]  Get
output scheme index by name.

";

%feature("docstring") casadi::BSplineCommon::finalize "[INTERNAL]  Finalize
the object creation This function, which visits the class hierarchy in
reverse order is run after init() has been completed.

";

%feature("docstring") casadi::BSplineCommon::getAtomicInputReal "[INTERNAL]
Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::BSplineCommon::getHessian "[INTERNAL]  Return
Hessian function.

";

%feature("docstring") casadi::BSplineCommon::sz_work "[INTERNAL]  Get
number of temporary variables needed.

";

%feature("docstring") casadi::BSplineCommon::tang_sx "[INTERNAL]  Tangent
expression.

";

%feature("docstring") casadi::BSplineCommon::jac_mx "[INTERNAL]  Jacobian
expression.

";

%feature("docstring") casadi::BSplineCommon::init_memory "[INTERNAL]
Initalize memory block.

";

%feature("docstring") casadi::BSplineCommon::init "

Initialize.

";

%feature("docstring") casadi::BSplineCommon::sz_iw "[INTERNAL]  Get
required length of iw field.

";

%feature("docstring") casadi::BSplineCommon::name_in "[INTERNAL]  Get input
scheme name by index.

";

%feature("docstring") casadi::BSplineCommon::has_function "[INTERNAL] ";

%feature("docstring") casadi::BSplineCommon::is_a "[INTERNAL]  Check if the
function is of a particular type.

";

%feature("docstring") casadi::BSplineCommon::free_sx "[INTERNAL]  Get free
variables (SX)

";

%feature("docstring") casadi::BSplineCommon::_setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";

%feature("docstring") casadi::BSplineCommon::generateDeclarations "[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring") casadi::BSplineCommon::mx_out "[INTERNAL]  Get
function input(s) and output(s)

";

%feature("docstring") casadi::BSplineCommon::getGradient "[INTERNAL]
Return gradient function.

";

%feature("docstring") casadi::BSplineCommon::getAtomicOperation "[INTERNAL]
Get an atomic operation operator index.

";

%feature("docstring") casadi::BSplineCommon::size2_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::BSplineCommon::get_function "[INTERNAL] ";

%feature("docstring") casadi::BSplineCommon::sz_arg "[INTERNAL]  Get
required length of arg field.

";

%feature("docstring") casadi::BSplineCommon::get_options "

Options.

";

%feature("docstring") casadi::BSplineCommon::jac_sx "[INTERNAL]  Jacobian
expression.

";

%feature("docstring") casadi::BSplineCommon::n_mem "[INTERNAL]  Maximum
number of memory objects.

";

%feature("docstring") casadi::BSplineCommon::has_codegen "[INTERNAL]  Is
codegen supported?

";

%feature("docstring") casadi::BSplineCommon::sp_rev "[INTERNAL]  Propagate
sparsity backwards.

";

%feature("docstring") casadi::BSplineCommon::ad_weight "[INTERNAL]
Weighting factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::BSplineCommon::getTangent "[INTERNAL]  Return
tangent function.

";

%feature("docstring") casadi::BSplineCommon::sp_weight "[INTERNAL]
Weighting factor for chosing forward/reverse mode, sparsity propagation.

";

%feature("docstring") casadi::BSplineCommon::alloc_iw "[INTERNAL]  Ensure
required length of iw field.

";

%feature("docstring") casadi::BSplineCommon::replaceAdjSeed "[INTERNAL]
Replace 0-by-0 reverse seeds.

";

%feature("docstring") casadi::BSplineCommon::oracle "[INTERNAL]  Get
oracle.

";


// File: classcasadi_1_1BSplineDual.xml
%feature("docstring") casadi::BSplineDual::construct "[INTERNAL]  Construct
Prepares the function for evaluation.

";

%feature("docstring") casadi::BSplineDual::codegen_name "[INTERNAL]  Get
name in codegen.

";

%feature("docstring") casadi::BSplineDual::sx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::BSplineDual::n_in "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::BSplineDual::gradient "[INTERNAL]  Return
gradient function.

";

%feature("docstring") casadi::BSplineDual::sz_w "[INTERNAL]  Get required
length of w field.

";

%feature("docstring") casadi::BSplineDual::getAtomicInputReal "[INTERNAL]
Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::BSplineDual::finalize "[INTERNAL]  Finalize
the object creation This function, which visits the class hierarchy in
reverse order is run after init() has been completed.

";

%feature("docstring") casadi::BSplineDual::set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::BSplineDual::type_name "

Get type name.

";

%feature("docstring") casadi::BSplineDual::sz_res "[INTERNAL]  Get required
length of res field.

";

%feature("docstring") casadi::BSplineDual::signature "[INTERNAL]  Code
generate the function.

";

%feature("docstring") casadi::BSplineDual::addShorthand "[INTERNAL]
Generate shorthand macro.

";

%feature("docstring") casadi::BSplineDual::sparsity_jac "[INTERNAL]  Get,
if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::BSplineDual::_get_stats "[INTERNAL]  Get all
statistics

";

%feature("docstring") casadi::BSplineDual::sz_work "[INTERNAL]  Get number
of temporary variables needed.

";

%feature("docstring") casadi::BSplineDual::jacobian "[INTERNAL]  Return
Jacobian function.

";

%feature("docstring") casadi::BSplineDual::self "[INTERNAL]  Get a public
class instance.

";

%feature("docstring") casadi::BSplineDual::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::BSplineDual::getJacSparsityHierarchicalSymm "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::BSplineDual::getJacobian "[INTERNAL]  Return
Jacobian function.

";

%feature("docstring") casadi::BSplineDual::matchingRes "[INTERNAL]  Check
if output arguments that needs to be replaced.

";

%feature("docstring") casadi::BSplineDual::hess_sx "[INTERNAL]  Hessian
expression.

";

%feature("docstring") casadi::BSplineDual::eval_sx "[INTERNAL]  Evaluate
with symbolic scalars.

";

%feature("docstring") casadi::BSplineDual::alloc "[INTERNAL]  Ensure work
vectors long enough to evaluate function.

";

%feature("docstring") casadi::BSplineDual::getPartition "[INTERNAL]  Get
the unidirectional or bidirectional partition.

";

%feature("docstring") casadi::BSplineDual::call_forward "[INTERNAL]
Forward mode AD, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::BSplineDual::addDependency "[INTERNAL]  Add a
dependent function.

";

%feature("docstring") casadi::BSplineDual::free_memory "[INTERNAL]  Free
memory block.

";

%feature("docstring") casadi::BSplineDual::hasDerivative "[INTERNAL]  Can
derivatives be calculated in any way?

";

%feature("docstring") casadi::BSplineDual::setJacobian "[INTERNAL]  Return
Jacobian function.

";

%feature("docstring") casadi::BSplineDual::getAtomicOutput "[INTERNAL]  Get
the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::BSplineDual::has_function "[INTERNAL] ";

%feature("docstring") casadi::BSplineDual::index_in "[INTERNAL]  Get input
scheme index by name.

";

%feature("docstring") casadi::BSplineDual::symbolicFwdSeed "[INTERNAL]
Symbolic expressions for the forward seeds.

";

%feature("docstring") casadi::BSplineDual::get_name_out "[INTERNAL]  Names
of function input and outputs.

";

%feature("docstring") casadi::BSplineDual::alloc_iw "[INTERNAL]  Ensure
required length of iw field.

";

%feature("docstring") casadi::BSplineDual::get_sparsity_in "

Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::BSplineDual::get_options "

Options.

";

%feature("docstring") casadi::BSplineDual::init "

Initialize.

";

%feature("docstring") casadi::BSplineDual::size2_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::BSplineDual::get_name_in "[INTERNAL]  Names
of function input and outputs.

";

%feature("docstring") casadi::BSplineDual::simple "[INTERNAL]  Evaluate
numerically, simplied syntax.

";

%feature("docstring") casadi::BSplineDual::set_temp "[INTERNAL]  Set the
(temporary) work vectors.

";

%feature("docstring") casadi::BSplineDual::replaceRes "[INTERNAL]  Replace
0-by-0 outputs.

";

%feature("docstring") casadi::BSplineDual::nnz_in "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::BSplineDual::get_n_reverse "

Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::BSplineDual::size1_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::BSplineDual::print "

Print description.

";

%feature("docstring") casadi::BSplineDual::numel_in "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::BSplineDual::nnz_out "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::BSplineDual::sp_rev "

Propagate sparsity backwards.

";

%feature("docstring") casadi::BSplineDual::_call "[INTERNAL]   Call a
function, overloaded.

";

%feature("docstring") casadi::BSplineDual::get_n_forward "

Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::BSplineDual::~BSplineDual "

Destructor.

";

%feature("docstring") casadi::BSplineDual::getHessian "[INTERNAL]  Return
Hessian function.

";

%feature("docstring") casadi::BSplineDual::_set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::BSplineDual::eval_name "[INTERNAL]  Get name
of the evaluation function.

";

%feature("docstring") casadi::BSplineDual::get_n_in "

Number of function inputs and outputs.

";

%feature("docstring") casadi::BSplineDual::n_nodes "[INTERNAL]  Number of
nodes in the algorithm.

";

%feature("docstring") casadi::BSplineDual::print_free "[INTERNAL]  Print
free variables.

";

%feature("docstring") casadi::BSplineDual::codegen_incref "[INTERNAL]
Codegen incref for dependencies.

";

%feature("docstring") casadi::BSplineDual::_setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";

%feature("docstring") casadi::BSplineDual::init_memory "[INTERNAL]
Initalize memory block.

";

%feature("docstring") casadi::BSplineDual::default_in "[INTERNAL]  Get
default input value.

";

%feature("docstring") casadi::BSplineDual::replaceArg "[INTERNAL]  Replace
0-by-0 inputs.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::BSplineDual::mx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::BSplineDual::fwdViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::BSplineDual::print_option "[INTERNAL]  Print
all information there is to know about a certain option.

";

%feature("docstring") casadi::BSplineDual::slice "[INTERNAL]  returns a new
function with a selection of inputs/outputs of the original

";

%feature("docstring") casadi::BSplineDual::getAlgorithmSize "[INTERNAL]
Get the number of atomic operations.

";

%feature("docstring") casadi::BSplineDual::alloc_memory "[INTERNAL]  Create
memory block.

";

%feature("docstring") casadi::BSplineDual::get_stats "[INTERNAL]  Get all
statistics

";

%feature("docstring") casadi::BSplineDual::replaceAdjSeed "[INTERNAL]
Replace 0-by-0 reverse seeds.

";

%feature("docstring") casadi::BSplineDual::has_codegen "

Is codegen supported?

";

%feature("docstring") casadi::BSplineDual::eval "

Evaluate numerically, work vectors given.

";

%feature("docstring") casadi::BSplineDual::fullJacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::BSplineDual::verbose "[INTERNAL]  Verbose
mode?

";

%feature("docstring") casadi::BSplineDual::set_jac_sparsity "[INTERNAL]
Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::BSplineDual::release "[INTERNAL]  Release a
memory object.

";

%feature("docstring") casadi::BSplineDual::memory "[INTERNAL]  Memory
objects.

";

%feature("docstring") casadi::BSplineDual::numel_out "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::BSplineDual::sz_arg "[INTERNAL]  Get required
length of arg field.

";

%feature("docstring") casadi::BSplineDual::reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::BSplineDual "

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Custom input     | casadi::Function |
|                  |                 | scheme           | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| lookup_mode      | OT_STRINGVECTOR | Sets, for each   | casadi::BSplineD |
|                  |                 | grid dimenion,   | ual              |
|                  |                 | the lookup       |                  |
|                  |                 | algorithm used   |                  |
|                  |                 | to find the      |                  |
|                  |                 | correct index.   |                  |
|                  |                 | 'linear' uses a  |                  |
|                  |                 | for-loop +       |                  |
|                  |                 | break; 'exact'   |                  |
|                  |                 | uses floored     |                  |
|                  |                 | division (only   |                  |
|                  |                 | for uniform      |                  |
|                  |                 | grids).          |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Custom output    | casadi::Function |
|                  |                 | scheme           | Internal         |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: bspline.hpp ";

%feature("docstring") casadi::BSplineDual::map_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::BSplineDual::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::BSplineDual::generate_dependencies "[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring") casadi::BSplineDual::getJacSparsityHierarchical "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::BSplineDual::getAtomicOperation "[INTERNAL]
Get an atomic operation operator index.

";

%feature("docstring") casadi::BSplineDual::size1_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::BSplineDual::generateFunction "[INTERNAL]
Generate code the function.

";

%feature("docstring") casadi::BSplineDual::forward "[INTERNAL]  Return
function that calculates forward derivatives forward(nfwd) returns a cached
instance if available, and calls  Function get_forward(int nfwd) if no
cached version is available.

";

%feature("docstring") casadi::BSplineDual::free_sx "[INTERNAL]  Get free
variables (SX)

";

%feature("docstring") casadi::BSplineDual::wrap "[INTERNAL]  Wrap in an
Function instance consisting of only one MX call.

";

%feature("docstring") casadi::BSplineDual::symbolicAdjSeed "[INTERNAL]
Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::BSplineDual::checkout "[INTERNAL]  Checkout a
memory object.

";

%feature("docstring") casadi::BSplineDual::hessian "[INTERNAL]  Return
Hessian function.

";

%feature("docstring") casadi::BSplineDual::getWorkSize "[INTERNAL]  Get the
length of the work vector.

";

%feature("docstring") casadi::BSplineDual::getJacSparsityGen "[INTERNAL]
Get the sparsity pattern, forward mode.

";

%feature("docstring") casadi::BSplineDual::adjViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::BSplineDual::has_spfwd "

Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::BSplineDual::tang_sx "[INTERNAL]  Tangent
expression.

";

%feature("docstring") casadi::BSplineDual::alloc_w "[INTERNAL]  Ensure
required length of w field.

";

%feature("docstring") casadi::BSplineDual::call "[INTERNAL]   Call a
function, templated.

";

%feature("docstring") casadi::BSplineDual::oracle "[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::BSplineDual::get_reverse "

Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::BSplineDual::alloc_res "[INTERNAL]  Ensure
required length of res field.

";

%feature("docstring") casadi::BSplineDual::free_mx "[INTERNAL]  Get free
variables ( MX)

";

%feature("docstring") casadi::BSplineDual::getFullJacobian "[INTERNAL]
Return Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::BSplineDual::sz_iw "[INTERNAL]  Get required
length of iw field.

";

%feature("docstring") casadi::BSplineDual::sp_fwd "

Propagate sparsity forward.

";

%feature("docstring") casadi::BSplineDual::grad_sx "[INTERNAL]  Gradient
expression.

";

%feature("docstring") casadi::BSplineDual::simplifiedCall "[INTERNAL]  Use
simplified signature.

";

%feature("docstring") casadi::BSplineDual::generateBody "

Generate code for the body of the C function.

";

%feature("docstring") casadi::BSplineDual::print_options "[INTERNAL]  Print
list of options.

";

%feature("docstring") casadi::BSplineDual::replaceFwdSeed "[INTERNAL]
Replace 0-by-0 forward seeds.

";

%feature("docstring") casadi::BSplineDual::getJacSparsity "[INTERNAL]
Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::BSplineDual::repr "[INTERNAL]  Print.

";

%feature("docstring") casadi::BSplineDual::codegen_decref "[INTERNAL]
Codegen decref for dependencies.

";

%feature("docstring") casadi::BSplineDual::matchingArg "[INTERNAL]  Check
if input arguments that needs to be replaced.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::BSplineDual::sparsity_out "[INTERNAL]  Get
sparsity of a given output.

";

%feature("docstring") casadi::BSplineDual::has_sprev "

Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::BSplineDual::alloc_arg "[INTERNAL]  Ensure
required length of arg field.

";

%feature("docstring") casadi::BSplineDual::name_in "[INTERNAL]  Get input
scheme name by index.

";

%feature("docstring") casadi::BSplineDual::factory "[INTERNAL] ";

%feature("docstring") casadi::BSplineDual::jac_sx "[INTERNAL]  Jacobian
expression.

";

%feature("docstring") casadi::BSplineDual::BSplineDual "";

%feature("docstring") casadi::BSplineDual::n_mem "[INTERNAL]  Maximum
number of memory objects.

";

%feature("docstring") casadi::BSplineDual::print_dimensions "[INTERNAL]
Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::BSplineDual::generateDeclarations "

Generate code for the declarations of the C function.

";

%feature("docstring") casadi::BSplineDual::jac_mx "[INTERNAL]  Jacobian
expression.

";

%feature("docstring") casadi::BSplineDual::generate_lifted "[INTERNAL]
Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::BSplineDual::call_reverse "[INTERNAL]
Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::BSplineDual::tangent "[INTERNAL]  Return
tangent function.

";

%feature("docstring") casadi::BSplineDual::tang_mx "[INTERNAL]  Tangent
expression.

";

%feature("docstring") casadi::BSplineDual::name_out "[INTERNAL]  Get output
scheme name by index.

";

%feature("docstring") casadi::BSplineDual::n_out "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::BSplineDual::symbolicOutput "[INTERNAL]  Get
a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::BSplineDual::getGradient "[INTERNAL]  Return
gradient function.

";

%feature("docstring") casadi::BSplineDual::log "

>  void casadi::FunctionInternal::log(const std::string &msg) const 
------------------------------------------------------------------------
[INTERNAL] 
Log the status of the solver.

>  void casadi::FunctionInternal::log(const std::string &fcn, const std::string &msg) const 
------------------------------------------------------------------------
[INTERNAL] 
Log the status of the solver, function given.

";

%feature("docstring") casadi::BSplineDual::jit_dependencies "[INTERNAL]
Jit dependencies.

";

%feature("docstring") casadi::BSplineDual::getTangent "[INTERNAL]  Return
tangent function.

";

%feature("docstring") casadi::BSplineDual::is_a "[INTERNAL]  Check if the
function is of a particular type.

";

%feature("docstring") casadi::BSplineDual::name "[INTERNAL]  Name of the
function.

";

%feature("docstring") casadi::BSplineDual::clear_memory "[INTERNAL]  Clear
all memory (called from destructor)

";

%feature("docstring") casadi::BSplineDual::mapsum_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::BSplineDual::get_sparsity_out "

Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::BSplineDual::has_free "[INTERNAL]  Does the
function have free variables.

";

%feature("docstring") casadi::BSplineDual::size_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::BSplineDual::sp_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode, sparsity propagation.

";

%feature("docstring") casadi::BSplineDual::get_function "[INTERNAL] ";

%feature("docstring") casadi::BSplineDual::checkRes "[INTERNAL]  Check if
output arguments have correct length and dimensions.

";

%feature("docstring") casadi::BSplineDual::sx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::BSplineDual::eval_mx "[INTERNAL]  Evaluate
with symbolic matrices.

";

%feature("docstring") casadi::BSplineDual::generateMeta "[INTERNAL]
Generate meta-information allowing a user to evaluate a generated function.

";

%feature("docstring") casadi::BSplineDual::mx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::BSplineDual::grad_mx "[INTERNAL]  Gradient
expression.

";

%feature("docstring") casadi::BSplineDual::getAtomicInput "[INTERNAL]  Get
the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::BSplineDual::sparsity_in "[INTERNAL]  Get
sparsity of a given input.

";

%feature("docstring") casadi::BSplineDual::index_out "[INTERNAL]  Get
output scheme index by name.

";

%feature("docstring") casadi::BSplineDual::getAdaptorSolverName "[INTERNAL]
Obtain solver name from Adaptor.

";

%feature("docstring") casadi::BSplineDual::size2_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::BSplineDual::_eval "

>  void casadi::FunctionInternal::_eval(const double **arg, double **res, int *iw, double *w, int mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate numerically.

>  void casadi::FunctionInternal::_eval(const SXElem **arg, SXElem **res, int *iw, SXElem *w, int mem) const

>  void casadi::FunctionInternal::_eval(const bvec_t **arg, bvec_t **res, int *iw, bvec_t *w, int mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

%feature("docstring") casadi::BSplineDual::get_n_out "

Number of function inputs and outputs.

";

%feature("docstring") casadi::BSplineDual::hasFullJacobian "[INTERNAL]
Return Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::BSplineDual::size_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::BSplineDual::ad_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::BSplineDual::which_depends "[INTERNAL]  Which
variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::BSplineDual::checkInputs "[INTERNAL]  Check
if the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::BSplineDual::_set_temp "[INTERNAL]  Set the
(temporary) work vectors.

";

%feature("docstring") casadi::BSplineDual::checkArg "[INTERNAL]  Check if
input arguments have correct length and dimensions.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::BSplineDual::get_forward "

Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::BSplineDual::setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";


// File: classcasadi_1_1BSplineInterpolant.xml
%feature("docstring") casadi::BSplineInterpolant::sparsity_jac "[INTERNAL]
Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::BSplineInterpolant::jac_sx "[INTERNAL]
Jacobian expression.

";

%feature("docstring") casadi::BSplineInterpolant::weak "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring") casadi::BSplineInterpolant::set_temp "[INTERNAL]  Set
the (temporary) work vectors.

";

%feature("docstring") casadi::BSplineInterpolant::index_in "[INTERNAL]  Get
input scheme index by name.

";

%feature("docstring") casadi::BSplineInterpolant::size2_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::BSplineInterpolant::getPartition "[INTERNAL]
Get the unidirectional or bidirectional partition.

";

%feature("docstring") casadi::BSplineInterpolant::addShorthand "[INTERNAL]
Generate shorthand macro.

";

%feature("docstring") casadi::BSplineInterpolant::get_sparsity_in "[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::BSplineInterpolant::getJacobian "[INTERNAL]
Return Jacobian function.

";

%feature("docstring") casadi::BSplineInterpolant::jacobian "[INTERNAL]
Return Jacobian function.

";

%feature("docstring") casadi::BSplineInterpolant::size_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::BSplineInterpolant::size1_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::BSplineInterpolant::get_function "[INTERNAL]
";

%feature("docstring") casadi::BSplineInterpolant::is_a "[INTERNAL]  Check
if the function is of a particular type.

";

%feature("docstring") casadi::BSplineInterpolant::mx_in "[INTERNAL]  Get
function input(s) and output(s)

";

%feature("docstring") casadi::BSplineInterpolant::gradient "[INTERNAL]
Return gradient function.

";

%feature("docstring") casadi::BSplineInterpolant::codegen_incref "[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring") casadi::BSplineInterpolant::eval_sx "[INTERNAL]
Evaluate with symbolic scalars.

";

%feature("docstring") casadi::BSplineInterpolant::sparsity_in "[INTERNAL]
Get sparsity of a given input.

";

%feature("docstring") casadi::BSplineInterpolant::_set_temp "[INTERNAL]
Set the (temporary) work vectors.

";

%feature("docstring") casadi::BSplineInterpolant::mx_out "[INTERNAL]  Get
function input(s) and output(s)

";

%feature("docstring") casadi::BSplineInterpolant::sp_rev "[INTERNAL]
Propagate sparsity backwards.

";

%feature("docstring") casadi::BSplineInterpolant::sz_iw "[INTERNAL]  Get
required length of iw field.

";

%feature("docstring") casadi::BSplineInterpolant::forward "[INTERNAL]
Return function that calculates forward derivatives forward(nfwd) returns a
cached instance if available, and calls  Function get_forward(int nfwd) if
no cached version is available.

";

%feature("docstring") casadi::BSplineInterpolant::getJacSparsity "[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::BSplineInterpolant::self "[INTERNAL]  Get a
public class instance.

";

%feature("docstring") casadi::BSplineInterpolant::print_options "[INTERNAL]
Print list of options.

";

%feature("docstring") casadi::BSplineInterpolant::construct "[INTERNAL]
Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::BSplineInterpolant::set_jac_sparsity "[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::BSplineInterpolant::free_memory "[INTERNAL]
Free memory block.

";

%feature("docstring") casadi::BSplineInterpolant::alloc_iw "[INTERNAL]
Ensure required length of iw field.

";

%feature("docstring") casadi::BSplineInterpolant::~BSplineInterpolant "[INTERNAL] ";

%feature("docstring") casadi::BSplineInterpolant::replaceFwdSeed "[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring") casadi::BSplineInterpolant::index_out "[INTERNAL]
Get output scheme index by name.

";

%feature("docstring") casadi::BSplineInterpolant::getWorkSize "[INTERNAL]
Get the length of the work vector.

";

%feature("docstring") casadi::BSplineInterpolant::free_sx "[INTERNAL]  Get
free variables (SX)

";

%feature("docstring") casadi::BSplineInterpolant::simplifiedCall "[INTERNAL]  Use simplified signature.

";

%feature("docstring") casadi::BSplineInterpolant::getJacSparsityHierarchical
"[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::BSplineInterpolant::get_n_out "[INTERNAL]
Number of function inputs and outputs.

";

%feature("docstring") casadi::BSplineInterpolant::get_options "[INTERNAL]
Options.

";

%feature("docstring") casadi::BSplineInterpolant::get_n_in "[INTERNAL]
Number of function inputs and outputs.

";

%feature("docstring") casadi::BSplineInterpolant::finalize "[INTERNAL]
Finalize the object creation This function, which visits the class hierarchy
in reverse order is run after init() has been completed.

";

%feature("docstring") casadi::BSplineInterpolant::tang_sx "[INTERNAL]
Tangent expression.

";

%feature("docstring") casadi::BSplineInterpolant::mapsum_mx "[INTERNAL]
Parallel evaluation.

";

%feature("docstring") casadi::BSplineInterpolant::generate_dependencies "[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring") casadi::BSplineInterpolant::slice "[INTERNAL]
returns a new function with a selection of inputs/outputs of the original

";

%feature("docstring") casadi::BSplineInterpolant::adjViaJac "[INTERNAL]
Calculate derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::BSplineInterpolant::print "[INTERNAL]  Print.

";

%feature("docstring") casadi::BSplineInterpolant::memory "[INTERNAL]
Memory objects.

";

%feature("docstring") casadi::BSplineInterpolant "

'bspline' plugin for Interpolant

N-dimensional BSpline interpolator

Uses not-a-knot conditions. For 1D and 2D cases, this code is equivalent to
fitpack

>List of available options

+---------------+--------------+-------------------------------------------+
|      Id       |     Type     |                Description                |
+===============+==============+===========================================+
| degree        | OT_INTVECTOR | Sets, for each grid dimenion, the degree  |
|               |              | of the spline.                            |
+---------------+--------------+-------------------------------------------+
| linear_solver | OT_STRING    | Solver used for constructing the          |
|               |              | coefficient tensor.                       |
+---------------+--------------+-------------------------------------------+

Joris Gillis

>List of available options

+---------------+--------------+---------------------+---------------------+
|      Id       |     Type     |     Description     |       Used in       |
+===============+==============+=====================+=====================+
| degree        | OT_INTVECTOR | Sets, for each grid | casadi::BSplineInte |
|               |              | dimenion, the       | rpolant             |
|               |              | degree of the       |                     |
|               |              | spline.             |                     |
+---------------+--------------+---------------------+---------------------+
| linear_solver | OT_STRING    | Solver used for     | casadi::BSplineInte |
|               |              | constructing the    | rpolant             |
|               |              | coefficient tensor. |                     |
+---------------+--------------+---------------------+---------------------+

Diagrams
--------



C++ includes: bspline_interpolant.hpp ";

%feature("docstring") casadi::BSplineInterpolant::hasDerivative "[INTERNAL]
Can derivatives be calculated in any way?

";

%feature("docstring") casadi::BSplineInterpolant::set_work "[INTERNAL]  Set
the (persistent) work vectors.

";

%feature("docstring") casadi::BSplineInterpolant::alloc_res "[INTERNAL]
Ensure required length of res field.

";

%feature("docstring") casadi::BSplineInterpolant::generateFunction "[INTERNAL]  Generate code the function.

";

%feature("docstring") casadi::BSplineInterpolant::fullJacobian "[INTERNAL]
Return Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::BSplineInterpolant::numel_out "[INTERNAL]
Number of input/output elements.

";

%feature("docstring") casadi::BSplineInterpolant::getCount "[INTERNAL]  Get
the reference count.

";

%feature("docstring") casadi::BSplineInterpolant::grad_mx "[INTERNAL]
Gradient expression.

";

%feature("docstring") casadi::BSplineInterpolant::getAtomicInputReal "[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::BSplineInterpolant::name_out "[INTERNAL]  Get
output scheme name by index.

";

%feature("docstring") casadi::BSplineInterpolant::checkRes "[INTERNAL]
Check if output arguments have correct length and dimensions.

";

%feature("docstring") casadi::BSplineInterpolant::call "[INTERNAL]   Call a
function, templated.

";

%feature("docstring") casadi::BSplineInterpolant::repr "[INTERNAL]  Print.

";

%feature("docstring") casadi::BSplineInterpolant::_set_work "[INTERNAL]
Set the (persistent) work vectors.

";

%feature("docstring") casadi::BSplineInterpolant::matchingRes "[INTERNAL]
Check if output arguments that needs to be replaced.

";

%feature("docstring") casadi::BSplineInterpolant::init_memory "[INTERNAL]
Initalize memory block.

";

%feature("docstring") casadi::BSplineInterpolant::default_in "[INTERNAL]
Get default input value.

";

%feature("docstring") casadi::BSplineInterpolant::symbolicOutput "[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::BSplineInterpolant::release "[INTERNAL]
Release a memory object.

";

%feature("docstring") casadi::BSplineInterpolant::ad_weight "[INTERNAL]
Weighting factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::BSplineInterpolant::setJacobian "[INTERNAL]
Return Jacobian function.

";

%feature("docstring") casadi::BSplineInterpolant::sx_out "[INTERNAL]  Get
function input(s) and output(s)

";

%feature("docstring") casadi::BSplineInterpolant::sz_res "[INTERNAL]  Get
required length of res field.

";

%feature("docstring") casadi::BSplineInterpolant::eval_name "[INTERNAL]
Get name of the evaluation function.

";

%feature("docstring") casadi::BSplineInterpolant::has_function "[INTERNAL]
";

%feature("docstring") casadi::BSplineInterpolant::checkout "[INTERNAL]
Checkout a memory object.

";

%feature("docstring") casadi::BSplineInterpolant::get_stats "[INTERNAL]
Get all statistics

";

%feature("docstring") casadi::BSplineInterpolant::call_reverse "[INTERNAL]
Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::BSplineInterpolant::symbolicAdjSeed "[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::BSplineInterpolant::simple "[INTERNAL]
Evaluate numerically, simplied syntax.

";

%feature("docstring") casadi::BSplineInterpolant::tangent "[INTERNAL]
Return tangent function.

";

%feature("docstring") casadi::BSplineInterpolant::factory "[INTERNAL] ";

%feature("docstring") casadi::BSplineInterpolant::_call "[INTERNAL]   Call
a function, overloaded.

";

%feature("docstring") casadi::BSplineInterpolant::map_mx "[INTERNAL]
Parallel evaluation.

";

%feature("docstring") casadi::BSplineInterpolant::get_n_reverse "[INTERNAL]
Return function that calculates adjoint derivatives reverse(nadj) returns a
cached instance if available, and calls  Function get_reverse(int nadj) if
no cached version is available.

";

%feature("docstring") casadi::BSplineInterpolant::getHessian "[INTERNAL]
Return Hessian function.

";

%feature("docstring") casadi::BSplineInterpolant::getAtomicInput "[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::BSplineInterpolant::getAlgorithmSize "[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring") casadi::BSplineInterpolant::sz_w "[INTERNAL]  Get
required length of w field.

";

%feature("docstring") casadi::BSplineInterpolant::nnz_in "[INTERNAL]
Number of input/output nonzeros.

";

%feature("docstring") casadi::BSplineInterpolant::symbolicFwdSeed "[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring") casadi::BSplineInterpolant::clear_memory "[INTERNAL]
Clear all memory (called from destructor)

";

%feature("docstring") casadi::BSplineInterpolant::size_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::BSplineInterpolant::get_forward "[INTERNAL]
Return function that calculates forward derivatives forward(nfwd) returns a
cached instance if available, and calls  Function get_forward(int nfwd) if
no cached version is available.

";

%feature("docstring") casadi::BSplineInterpolant::get_sparsity_out "[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::BSplineInterpolant::sz_work "[INTERNAL]  Get
number of temporary variables needed.

";

%feature("docstring") casadi::BSplineInterpolant::codegen_decref "[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring") casadi::BSplineInterpolant::get_n_forward "[INTERNAL]
Return function that calculates forward derivatives forward(nfwd) returns a
cached instance if available, and calls  Function get_forward(int nfwd) if
no cached version is available.

";

%feature("docstring") casadi::BSplineInterpolant::sz_arg "[INTERNAL]  Get
required length of arg field.

";

%feature("docstring") casadi::BSplineInterpolant::n_mem "[INTERNAL]
Maximum number of memory objects.

";

%feature("docstring") casadi::BSplineInterpolant::get_name_out "[INTERNAL]
Names of function input and outputs.

";

%feature("docstring") casadi::BSplineInterpolant::getAtomicOperation "[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring") casadi::BSplineInterpolant::which_depends "[INTERNAL]
Which variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::BSplineInterpolant::checkInputs "[INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::BSplineInterpolant::hess_sx "[INTERNAL]
Hessian expression.

";

%feature("docstring") casadi::BSplineInterpolant::n_in "[INTERNAL]  Number
of function inputs and outputs.

";

%feature("docstring") casadi::BSplineInterpolant::sx_in "[INTERNAL]  Get
function input(s) and output(s)

";

%feature("docstring") casadi::BSplineInterpolant::eval "[INTERNAL]
Evaluate numerically.

";

%feature("docstring") casadi::BSplineInterpolant::init "[INTERNAL]
Initialize Initialize and make the object ready for setting arguments and
evaluation. This method is typically called after setting options but before
evaluating. If passed to another class (in the constructor), this class
should invoke this function when initialized.

";

%feature("docstring") casadi::BSplineInterpolant::addDependency "[INTERNAL]
Add a dependent function.

";

%feature("docstring") casadi::BSplineInterpolant::name_in "[INTERNAL]  Get
input scheme name by index.

";

%feature("docstring") casadi::BSplineInterpolant::getFullJacobian "[INTERNAL]  Full Jacobian.

";

%feature("docstring") casadi::BSplineInterpolant::print_free "[INTERNAL]
Print free variables.

";

%feature("docstring") casadi::BSplineInterpolant::getAtomicOutput "[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::BSplineInterpolant::log "

>  void casadi::FunctionInternal::log(const std::string &msg) const 
------------------------------------------------------------------------
[INTERNAL] 
Log the status of the solver.

>  void casadi::FunctionInternal::log(const std::string &fcn, const std::string &msg) const 
------------------------------------------------------------------------
[INTERNAL] 
Log the status of the solver, function given.

";

%feature("docstring") casadi::BSplineInterpolant::oracle "[INTERNAL]  Get
oracle.

";

%feature("docstring") casadi::BSplineInterpolant::alloc_arg "[INTERNAL]
Ensure required length of arg field.

";

%feature("docstring") casadi::BSplineInterpolant::nnz_out "[INTERNAL]
Number of input/output nonzeros.

";

%feature("docstring") casadi::BSplineInterpolant::replaceRes "[INTERNAL]
Replace 0-by-0 outputs.

";

%feature("docstring") casadi::BSplineInterpolant::checkArg "[INTERNAL]
Check if input arguments have correct length and dimensions.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::BSplineInterpolant::codegen_name "[INTERNAL]
Get name in codegen.

";

%feature("docstring") casadi::BSplineInterpolant::print_dimensions "[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::BSplineInterpolant::get_reverse "[INTERNAL]
Return function that calculates adjoint derivatives reverse(nadj) returns a
cached instance if available, and calls  Function get_reverse(int nadj) if
no cached version is available.

";

%feature("docstring") casadi::BSplineInterpolant::size2_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::BSplineInterpolant::plugin_name "[INTERNAL]
";

%feature("docstring") casadi::BSplineInterpolant::replaceAdjSeed "[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring") casadi::BSplineInterpolant::getAdaptorSolverName "[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring") casadi::BSplineInterpolant::grad_sx "[INTERNAL]
Gradient expression.

";

%feature("docstring") casadi::BSplineInterpolant::n_out "[INTERNAL]  Number
of function inputs and outputs.

";

%feature("docstring") casadi::BSplineInterpolant::sp_weight "[INTERNAL]
Weighting factor for chosing forward/reverse mode, sparsity propagation.

";

%feature("docstring") casadi::BSplineInterpolant::jac_mx "[INTERNAL]
Jacobian expression.

";

%feature("docstring") casadi::BSplineInterpolant::has_sprev "[INTERNAL]  Is
the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::BSplineInterpolant::hessian "[INTERNAL]
Return Hessian function.

";

%feature("docstring") casadi::BSplineInterpolant::BSplineInterpolant "[INTERNAL] ";

%feature("docstring") casadi::BSplineInterpolant::has_free "[INTERNAL]
Does the function have free variables.

";

%feature("docstring") casadi::BSplineInterpolant::type_name "[INTERNAL]
Get type name.

";

%feature("docstring") casadi::BSplineInterpolant::sp_fwd "[INTERNAL]
Propagate sparsity forward.

";

%feature("docstring") casadi::BSplineInterpolant::n_nodes "[INTERNAL]
Number of nodes in the algorithm.

";

%feature("docstring") casadi::BSplineInterpolant::replaceArg "[INTERNAL]
Replace 0-by-0 inputs.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::BSplineInterpolant::_setup "[INTERNAL]  Set
the (persistent and temporary) work vectors.

";

%feature("docstring") casadi::BSplineInterpolant::eval_mx "[INTERNAL]
Evaluate with symbolic matrices.

";

%feature("docstring") casadi::BSplineInterpolant::print_option "[INTERNAL]
Print all information there is to know about a certain option.

";

%feature("docstring") casadi::BSplineInterpolant::_eval "

>  void casadi::FunctionInternal::_eval(const double **arg, double **res, int *iw, double *w, int mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate numerically.

>  void casadi::FunctionInternal::_eval(const SXElem **arg, SXElem **res, int *iw, SXElem *w, int mem) const

>  void casadi::FunctionInternal::_eval(const bvec_t **arg, bvec_t **res, int *iw, bvec_t *w, int mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

%feature("docstring") casadi::BSplineInterpolant::jit_dependencies "[INTERNAL]   Jit dependencies.

";

%feature("docstring") casadi::BSplineInterpolant::free_mx "[INTERNAL]  Get
free variables ( MX)

";

%feature("docstring") casadi::BSplineInterpolant::generateBody "[INTERNAL]
Generate code for the body of the C function.

";

%feature("docstring") casadi::BSplineInterpolant::generate_lifted "[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::BSplineInterpolant::generateDeclarations "[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring") casadi::BSplineInterpolant::setup "[INTERNAL]  Set
the (persistent and temporary) work vectors.

";

%feature("docstring") casadi::BSplineInterpolant::alloc_memory "[INTERNAL]
Create memory block.

";

%feature("docstring") casadi::BSplineInterpolant::call_forward "[INTERNAL]
Forward mode AD, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::BSplineInterpolant::_get_stats "[INTERNAL]
Get all statistics

";

%feature("docstring") casadi::BSplineInterpolant::getTangent "[INTERNAL]
Return tangent function.

";

%feature("docstring") casadi::BSplineInterpolant::getGradient "[INTERNAL]
Return gradient function.

";

%feature("docstring") casadi::BSplineInterpolant::fwdViaJac "[INTERNAL]
Calculate derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::BSplineInterpolant::has_spfwd "[INTERNAL]  Is
the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::BSplineInterpolant::tang_mx "[INTERNAL]
Tangent expression.

";

%feature("docstring") casadi::BSplineInterpolant::matchingArg "[INTERNAL]
Check if input arguments that needs to be replaced.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::BSplineInterpolant::wrap "[INTERNAL]  Wrap in
an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::BSplineInterpolant::size1_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::BSplineInterpolant::verbose "[INTERNAL]
Verbose mode?

";

%feature("docstring") casadi::BSplineInterpolant::numel_in "[INTERNAL]
Number of input/output elements.

";

%feature("docstring") casadi::BSplineInterpolant::sparsity_out "[INTERNAL]
Get sparsity of a given output.

";

%feature("docstring") casadi::BSplineInterpolant::has_codegen "[INTERNAL]
Is codegen supported?

";

%feature("docstring") casadi::BSplineInterpolant::reverse "[INTERNAL]
Return function that calculates adjoint derivatives reverse(nadj) returns a
cached instance if available, and calls  Function get_reverse(int nadj) if
no cached version is available.

";

%feature("docstring") casadi::BSplineInterpolant::alloc_w "[INTERNAL]
Ensure required length of w field.

";

%feature("docstring") casadi::BSplineInterpolant::name "[INTERNAL]  Name of
the function.

";

%feature("docstring") casadi::BSplineInterpolant::alloc "[INTERNAL]  Ensure
work vectors long enough to evaluate function.

";

%feature("docstring") casadi::BSplineInterpolant::signature "[INTERNAL]
Code generate the function.

";

%feature("docstring") casadi::BSplineInterpolant::getJacSparsityGen "[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")
casadi::BSplineInterpolant::getJacSparsityHierarchicalSymm "[INTERNAL]  A
flavor of getJacSparsity that does hierarchical block structure recognition
for symmetric Jacobians

";

%feature("docstring") casadi::BSplineInterpolant::generateMeta "[INTERNAL]
Generate meta-information allowing a user to evaluate a generated function.

";

%feature("docstring") casadi::BSplineInterpolant::hasFullJacobian "[INTERNAL]  Full Jacobian.

";

%feature("docstring") casadi::BSplineInterpolant::get_name_in "[INTERNAL]
Names of function input and outputs.

";


// File: classcasadi_1_1Call.xml


// File: classcasadi_1_1Callback.xml
%feature("docstring") casadi::Callback::size2_in "

Get input dimension.

";

%feature("docstring") casadi::Callback::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::Callback::generate_dependencies "

Export / Generate C code for the dependency function.

";

%feature("docstring") casadi::Callback::get_n_in "

Get the number of inputs This function is called during construction.

";

%feature("docstring") casadi::Callback::get_n_out "

Get the number of outputs This function is called during construction.

";

%feature("docstring") casadi::Callback::size_in "

Get input dimension.

";

%feature("docstring") casadi::Callback::Callback "

>  casadi::Callback::Callback()
------------------------------------------------------------------------

Default constructor.

>  casadi::Callback::Callback(const Callback &obj)
------------------------------------------------------------------------

Copy constructor (throws an error)

";

%feature("docstring") casadi::Callback::get_name_in "

Get the sparsity of an input This function is called during construction.

";

%feature("docstring") casadi::Callback::getWorkSize "

Get the length of the work vector.

";

%feature("docstring") casadi::Callback::sz_arg "[INTERNAL]  Get required
length of arg field.

";

%feature("docstring") casadi::Callback::slice "

returns a new function with a selection of inputs/outputs of the original

";

%feature("docstring") casadi::Callback::hessian_old "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output Legacy function: To be deprecated in a future
version of CasADi. Exists only for compatibility with Function::hessian pre-
CasADi 3.2

";

%feature("docstring") casadi::Callback::print "

Print a description of the object.

";

%feature("docstring") casadi::Callback::has_function "";

%feature("docstring") casadi::Callback::nnz_out "

Get number of output nonzeros.

For a particular output or for all of the outputs

";

%feature("docstring") casadi::Callback::factory "";

%feature("docstring") casadi::Callback::print_free "

Print free variables.

";

%feature("docstring") casadi::Callback::free_sx "

Get all the free variables of the function.

";

%feature("docstring") casadi::Callback::name_out "

>  std::vector<std::string> casadi::Function::name_out() const 
------------------------------------------------------------------------

Get output scheme.

>  std::string casadi::Function::name_out(int ind) const 
------------------------------------------------------------------------

Get output scheme name by index.

";

%feature("docstring") casadi::Callback::nnz_in "

Get number of input nonzeros.

For a particular input or for all of the inputs

";

%feature("docstring") casadi::Callback::forward "

Get a function that calculates nfwd forward derivatives.

Returns a function with n_in + n_out + n_in inputs and nfwd outputs. The
first n_in inputs correspond to nondifferentiated inputs. The next n_out
inputs correspond to nondifferentiated outputs. and the last n_in inputs
correspond to forward seeds, stacked horizontally The n_out outputs
correspond to forward sensitivities, stacked horizontally. * (n_in = n_in(),
n_out = n_out())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::Callback::default_in "

Get default input value (NOTE: constant reference)

";

%feature("docstring") casadi::Callback::init "

Initialize the object This function is called after the object construction
(for the whole class hierarchy) is complete, but before the finalization
step. It is called recursively for the whole class hierarchy, starting with
the lowest level.

";

%feature("docstring") casadi::Callback::numel_out "

Get number of output elements.

For a particular output or for all of the outputs

";

%feature("docstring") casadi::Callback::print_dimensions "

Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::Callback::generate "

Export / Generate C code for the function.

";

%feature("docstring") casadi::Callback::getAtomicInput "

Get the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::Callback::getAtomicInputReal "

Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::Callback::checkInputs "[INTERNAL]  Check if
the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::Callback::is_null "

Is a null pointer?

";

%feature("docstring") casadi::Callback::get_n_reverse "

Return function that calculates adjoint derivatives reverse(nadj) returns a
cached instance if available, and calls  Function get_reverse(int nadj) if
no cached version is available.

";

%feature("docstring") casadi::Callback::type_name "

Get type name.

";

%feature("docstring") casadi::Callback::jacobian "

>  Function casadi::Function::jacobian(int iind=0, int oind=0, bool compact=false, bool symmetric=false)
------------------------------------------------------------------------

[DEPRECATED] Alias of Function::jacobian_old This function is of internal
character and should be avoided, if possible. The preferred way is to use
unction::factory instead. This function will change behavior in the next
version of CasADi.

>  Function casadi::Function::jacobian(const std::string &iind, int oind=0, bool compact=false, bool symmetric=false)

>  Function casadi::Function::jacobian(int iind, const std::string &oind, bool compact=false, bool symmetric=false)

>  Function casadi::Function::jacobian(const std::string &iind, const std::string &oind, bool compact=false, bool symmetric=false)
------------------------------------------------------------------------
[INTERNAL] 
Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output Legacy function: To be deprecated in a future
version of CasADi. Exists only for compatibility with Function::jacobian
pre-CasADi 3.2

";

%feature("docstring") casadi::Callback::sz_iw "[INTERNAL]  Get required
length of iw field.

";

%feature("docstring") casadi::Callback::n_nodes "

Number of nodes in the algorithm.

";

%feature("docstring") casadi::Callback::sx_out "

Get symbolic primitives equivalent to the output expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring") casadi::Callback::print_options "

Print options to a stream.

";

%feature("docstring") casadi::Callback::checkout "

Checkout a memory object.

";

%feature("docstring") casadi::Callback::reverse "

Get a function that calculates nadj adjoint derivatives.

Returns a function with n_in + n_out + n_out inputs and n_in outputs. The
first n_in inputs correspond to nondifferentiated inputs. The next n_out
inputs correspond to nondifferentiated outputs. and the last n_out inputs
correspond to adjoint seeds, stacked horizontally The n_in outputs
correspond to adjoint sensitivities, stacked horizontally. * (n_in = n_in(),
n_out = n_out())

(n_in = n_in(), n_out = n_out())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::Callback::~Callback "

Destructor.

";

%feature("docstring") casadi::Callback::getAtomicOutput "

Get the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::Callback::hessian "

[DEPRECATED] Alias of Function::jacobian_old This function is of internal
character and should be avoided, if possible. The preferred way is to use
unction::factory instead. This function will change behavior in the next
version of CasADi.

";

%feature("docstring") casadi::Callback::conic_debug "

Generate native code in the interfaced language for debugging

";

%feature("docstring") casadi::Callback::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::Callback::which_depends "

Which variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::Callback::setFullJacobian "

[DEPRECATED] Set the Jacobian of all the input nonzeros with respect to all
output nonzeros NOTE: Does not take ownership, only weak references to the
Jacobian are kept internally

";

%feature("docstring") casadi::Callback::repr "

Print a representation of the object.

";

%feature("docstring") casadi::Callback::index_out "

Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLPSOL_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::Callback::construct "

Construct internal object This is the step that actually construct the
internal object, as the class constructor only creates a null pointer. It
should be called from the user constructor.

";

%feature("docstring") casadi::Callback::get_n_forward "

Return function that calculates forward derivatives forward(nfwd) returns a
cached instance if available, and calls  Function get_forward(int nfwd) if
no cached version is available.

";

%feature("docstring") casadi::Callback::sx_in "

Get symbolic primitives equivalent to the input expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring") casadi::Callback::get_forward "

Return function that calculates forward derivatives forward(nfwd) returns a
cached instance if available, and calls  Function get_forward(int nfwd) if
no cached version is available.

";

%feature("docstring") casadi::Callback::sparsity_jac "

>  const Sparsity casadi::Function::sparsity_jac(int iind, int oind, bool compact=false, bool symmetric=false) const

>  const Sparsity casadi::Function::sparsity_jac(const std::string &iind, int oind=0, bool compact=false, bool symmetric=false) const

>  const Sparsity casadi::Function::sparsity_jac(int iind, const std::string &oind, bool compact=false, bool symmetric=false) const

>  const Sparsity casadi::Function::sparsity_jac(const std::string &iind, const std::string &oind, bool compact=false, bool symmetric=false) const 
------------------------------------------------------------------------

Get, if necessary generate, the sparsity of a Jacobian block

>  const Sparsity casadi::Function::sparsity_jac(int iind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::Callback::rootfinder_fun "

[DEPRECATED] Use oracle() instead

";

%feature("docstring") casadi::Callback::alloc_w "

Allocate work vectors.

";

%feature("docstring") casadi::Callback::size1_out "

Get output dimension.

";

%feature("docstring") casadi::Callback::spCanEvaluate "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::Callback::has_jacobian "

Return Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Callback::finalize "

Finalize the object This function is called after the construction and init
steps are completed, but before user functions are called. It is called
recursively for the whole class hierarchy, starting with the highest level.

";

%feature("docstring") casadi::Callback::size2_out "

Get output dimension.

";

%feature("docstring") casadi::Callback::mx_in "

Get symbolic primitives equivalent to the input expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring") casadi::Callback::release "

Release a memory object.

";

%feature("docstring") casadi::Callback::is_a "

Check if the function is of a particular type Optionally check if name
matches one of the base classes (default true)

";

%feature("docstring") casadi::Callback::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::Callback::wrap "

Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::Callback::get_sparsity_out "

Get the sparsity of an output This function is called during construction.

";

%feature("docstring") casadi::Callback::assert_size_out "

Assert that an output dimension is equal so some given value.

";

%feature("docstring") casadi::Callback::name_in "

>  std::vector<std::string> casadi::Function::name_in() const 
------------------------------------------------------------------------

Get input scheme.

>  std::string casadi::Function::name_in(int ind) const 
------------------------------------------------------------------------

Get input scheme name by index.

";

%feature("docstring") casadi::Callback::has_free "

Does the function have free variables.

";

%feature("docstring") casadi::Callback::alloc_res "

Allocate work vectors.

";

%feature("docstring") casadi::Callback::assert_size_in "

Assert that an input dimension is equal so some given value.

";

%feature("docstring") casadi::Callback::get_sparsity_in "

Get the sparsity of an input This function is called during construction.

";

%feature("docstring") casadi::Callback::tangent "

[DEPRECATED] Use Function::factory instead

";

%feature("docstring") casadi::Callback::n_in "

Get the number of function inputs.

";

%feature("docstring") casadi::Callback::sz_w "[INTERNAL]  Get required
length of w field.

";

%feature("docstring") casadi::Callback::gradient "

[DEPRECATED] Use Function::factory instead

";

%feature("docstring") casadi::Callback::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::Callback::set_jac_sparsity "

[DEPRECATED] Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::Callback::mapsum "

Evaluate symbolically in parallel and sum (matrix graph)

Parameters:
-----------

parallelization:  Type of parallelization used: unroll|serial|openmp

";

%feature("docstring") casadi::Callback::getAlgorithmSize "

Get the number of atomic operations.

";

%feature("docstring") casadi::Callback::sz_res "[INTERNAL]  Get required
length of res field.

";

%feature("docstring") casadi::Callback::get_jacobian "

Return Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Callback::alloc_iw "

Allocate work vectors.

";

%feature("docstring") casadi::Callback::alloc_arg "

Allocate work vectors.

";

%feature("docstring") casadi::Callback::oracle "

Get oracle.

";

%feature("docstring") casadi::Callback::setJacobian "

[DEPRECATED] Set the Jacobian function of output oind with respect to input
iind NOTE: Does not take ownership, only weak references to the Jacobians
are kept internally

";

%feature("docstring") casadi::Callback::eval "

Evaluate numerically, temporary matrices and work vectors.

";

%feature("docstring") casadi::Callback::numel_in "

Get number of input elements.

For a particular input or for all of the inputs

";

%feature("docstring") casadi::Callback::getAtomicOperation "

Get an atomic operation operator index.

";

%feature("docstring") casadi::Callback::map "

>  Function casadi::Function::map(const std::string &name, const std::string &parallelization, int n, const std::vector< int > &reduce_in, const std::vector< int > &reduce_out, const Dict &opts=Dict()) const

>  Function casadi::Function::map(const std::string &name, const std::string &parallelization, int n, const std::vector< std::string > &reduce_in, const std::vector< std::string > &reduce_out, const Dict &opts=Dict()) const 
------------------------------------------------------------------------

Map with reduction A subset of the inputs are non-repeated and a subset of
the outputs summed up.

>  Function casadi::Function::map(int n, const std::string &parallelization=\"serial\") const 
------------------------------------------------------------------------

Create a mapped version of this function.

Suppose the function has a signature of:

::

     f: (a, p) -> ( s )
  



The the mapped version has the signature:

::

     F: (A, P) -> (S )
  
      with
          A: horzcat([a0, a1, ..., a_(N-1)])
          P: horzcat([p0, p1, ..., p_(N-1)])
          S: horzcat([s0, s1, ..., s_(N-1)])
      and
          s0 <- f(a0, p0)
          s1 <- f(a1, p1)
          ...
          s_(N-1) <- f(a_(N-1), p_(N-1))
  



Parameters:
-----------

parallelization:  Type of parallelization used: unroll|serial|openmp

";

%feature("docstring") casadi::Callback::print_option "

Print all information there is to know about a certain option.

";

%feature("docstring") casadi::Callback::mapaccum "

Create a mapaccumulated version of this function.

Suppose the function has a signature of:

::

     f: (x, u) -> (x_next , y )
  



The the mapaccumulated version has the signature:

::

     F: (x0, U) -> (X , Y )
  
      with
          U: horzcat([u0, u1, ..., u_(N-1)])
          X: horzcat([x1, x2, ..., x_N])
          Y: horzcat([y0, y1, ..., y_(N-1)])
  
      and
          x1, y0 <- f(x0, u0)
          x2, y1 <- f(x1, u1)
          ...
          x_N, y_(N-1) <- f(x_(N-1), u_(N-1))
  



";

%feature("docstring") casadi::Callback::size1_in "

Get input dimension.

";

%feature("docstring") casadi::Callback::sparsity_in "

Get sparsity of a given input.

";

%feature("docstring") casadi::Callback::get_reverse "

Return function that calculates adjoint derivatives reverse(nadj) returns a
cached instance if available, and calls  Function get_reverse(int nadj) if
no cached version is available.

";

%feature("docstring") casadi::Callback::expand "

Expand a function to SX.

";

%feature("docstring") casadi::Callback "

Callback function functionality.

This class provides a public API to the FunctionInternal class that can be
subclassed by the user, who is then able to implement the different virtual
method. Note that the Function class also provides a public API to
FunctionInternal, but only allows calling, not being called.

The user is responsible for not deleting this class for the lifetime of the
internal function object.

Joris Gillis, Joel Andersson

C++ includes: callback.hpp ";

%feature("docstring") casadi::Callback::n_out "

Get the number of function outputs.

";

%feature("docstring") casadi::Callback::jacobian_old "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output Legacy function: To be deprecated in a future
version of CasADi. Exists only for compatibility with Function::jacobian
pre-CasADi 3.2

";

%feature("docstring") casadi::Callback::__hash__ "

Returns a number that is unique for a given Node. If the Object does not
point to any node, \"0\" is returned.

";

%feature("docstring") casadi::Callback::free_mx "

Get all the free variables of the function.

";

%feature("docstring") casadi::Callback::index_in "

Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLPSOL_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::Callback::generate_lifted "

Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::Callback::sparsity_out "

Get sparsity of a given output.

";

%feature("docstring") casadi::Callback::stats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::Callback::name "

Name of the function.

";

%feature("docstring") casadi::Callback::size_out "

Get output dimension.

";

%feature("docstring") casadi::Callback::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements). Legacy function: To be deprecated.

";

%feature("docstring") casadi::Callback::get_function "";

%feature("docstring") casadi::Callback::get_name_out "

Get the sparsity of an output This function is called during construction.

";

%feature("docstring") casadi::Callback::mx_out "

Get symbolic primitives equivalent to the output expressions There is no
guarantee that subsequent calls return unique answers.

";


// File: classcasadi_1_1casadi__limits.xml
%feature("docstring") casadi::casadi_limits "

casadi_limits class

The following class, which acts as a complements to the standard
numeric_limits class, allows specifying certain properties of scalar
objects. The template can be specialized for e.g. symbolic scalars Joel
Andersson

C++ includes: casadi_limits.hpp ";


// File: classcasadi_1_1CasadiException.xml
%feature("docstring") casadi::CasadiException::what "throw () Display
error.

";

%feature("docstring") casadi::CasadiException::CasadiException "

>  casadi::CasadiException::CasadiException()
------------------------------------------------------------------------

Default constructor.

>  casadi::CasadiException::CasadiException(const std::string &msg)
------------------------------------------------------------------------

Form message string.

";

%feature("docstring") casadi::CasadiException "

Casadi exception class.

Joel Andersson

C++ includes: exception.hpp ";

%feature("docstring") casadi::CasadiException::~CasadiException "throw ()
Destructor.

";


// File: classcasadi_1_1CasadiMeta.xml
%feature("docstring") casadi::CasadiMeta "

Collects global CasADi meta information.

Joris Gillis

C++ includes: casadi_meta.hpp ";


// File: classcasadi_1_1ClangCompiler.xml
%feature("docstring") casadi::ClangCompiler::ClangCompiler "[INTERNAL]
Constructor.

";

%feature("docstring") casadi::ClangCompiler::init "[INTERNAL]  Initialize.

";

%feature("docstring") casadi::ClangCompiler::read_external "[INTERNAL]  Get
an external function declaration.

";

%feature("docstring") casadi::ClangCompiler::body "[INTERNAL]  Get the
function body, if inlined.

";

%feature("docstring") casadi::ClangCompiler::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::ClangCompiler::repr "[INTERNAL]  Print
representation.

";

%feature("docstring") casadi::ClangCompiler::get_options "[INTERNAL]
Options.

";

%feature("docstring") casadi::ClangCompiler::print "[INTERNAL]  Print.

";

%feature("docstring") casadi::ClangCompiler "

'clang' plugin for Importer

Joris Gillis  Interface to the JIT compiler CLANG

>List of available options

+--------------+-----------------+-----------------------------------------+
|      Id      |      Type       |               Description               |
+==============+=================+=========================================+
| flags        | OT_STRINGVECTOR | Compile flags for the JIT compiler.     |
|              |                 | Default: None                           |
+--------------+-----------------+-----------------------------------------+
| include_path | OT_STRING       | Include paths for the JIT compiler. The |
|              |                 | include directory shipped with CasADi   |
|              |                 | will be automatically appended.         |
+--------------+-----------------+-----------------------------------------+

>List of available options

+--------------+-----------------+--------------------+--------------------+
|      Id      |      Type       |    Description     |      Used in       |
+==============+=================+====================+====================+
| flags        | OT_STRINGVECTOR | Compile flags for  | casadi::ClangCompi |
|              |                 | the JIT compiler.  | ler                |
|              |                 | Default: None      |                    |
+--------------+-----------------+--------------------+--------------------+
| include_path | OT_STRING       | Include paths for  | casadi::ClangCompi |
|              |                 | the JIT compiler.  | ler                |
|              |                 | The include        |                    |
|              |                 | directory shipped  |                    |
|              |                 | with CasADi will   |                    |
|              |                 | be automatically   |                    |
|              |                 | appended.          |                    |
+--------------+-----------------+--------------------+--------------------+
| verbose      | OT_BOOL         | Verbose evaluation | casadi::ImporterIn |
|              |                 | for debugging      | ternal             |
+--------------+-----------------+--------------------+--------------------+

Diagrams
--------



C++ includes: clang_compiler.hpp ";

%feature("docstring") casadi::ClangCompiler::read_meta "[INTERNAL]  Get
meta information.

";

%feature("docstring") casadi::ClangCompiler::to_text "[INTERNAL]  Get entry
as a text.

";

%feature("docstring") casadi::ClangCompiler::can_have_meta "[INTERNAL]  Can
meta information be read?

";

%feature("docstring") casadi::ClangCompiler::construct "[INTERNAL]
Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::ClangCompiler::inlined "[INTERNAL] ";

%feature("docstring") casadi::ClangCompiler::has_meta "[INTERNAL]  Does an
entry exist?

";

%feature("docstring") casadi::ClangCompiler::get_meta "[INTERNAL]  Get
entry as a text.

";

%feature("docstring") casadi::ClangCompiler::get_function "[INTERNAL]  Get
a function pointer for numerical evaluation.

";

%feature("docstring") casadi::ClangCompiler::~ClangCompiler "[INTERNAL]
Destructor.

";

%feature("docstring") casadi::ClangCompiler::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::ClangCompiler::plugin_name "[INTERNAL]  Get
name of plugin.

";

%feature("docstring") casadi::ClangCompiler::has_function "[INTERNAL]  Get
a function pointer for numerical evaluation.

";


// File: classcasadi_1_1CodeGenerator.xml
%feature("docstring") casadi::CodeGenerator::addInclude "

Add an include file optionally using a relative path \"...\" instead of an
absolute path <...>

";

%feature("docstring") casadi::CodeGenerator "

Helper class for C code generation.

Joel Andersson

C++ includes: code_generator.hpp ";

%feature("docstring") casadi::CodeGenerator::dump "

Generate a file, return code as string.

";

%feature("docstring") casadi::CodeGenerator::add "

Add a function (name generated)

";

%feature("docstring") casadi::CodeGenerator::CodeGenerator "

Constructor.

";

%feature("docstring") casadi::CodeGenerator::generate "

Generate file(s) The \"prefix\" argument will be prepended to the generated
files and may be a directory or a file prefix. returns the filename.

";


// File: classcasadi_1_1Collocation.xml
%feature("docstring") casadi::Collocation::name_in "[INTERNAL]  Get input
scheme name by index.

";

%feature("docstring") casadi::Collocation::print_option "[INTERNAL]  Print
all information there is to know about a certain option.

";

%feature("docstring") casadi::Collocation::slice "[INTERNAL]  returns a new
function with a selection of inputs/outputs of the original

";

%feature("docstring") casadi::Collocation::hessian "[INTERNAL]  Return
Hessian function.

";

%feature("docstring") casadi::Collocation::index_in "[INTERNAL]  Get input
scheme index by name.

";

%feature("docstring") casadi::Collocation::tang_mx "[INTERNAL]  Tangent
expression.

";

%feature("docstring") casadi::Collocation::advance "[INTERNAL]  Advance
solution in time.

";

%feature("docstring") casadi::Collocation::hess_sx "[INTERNAL]  Hessian
expression.

";

%feature("docstring") casadi::Collocation::getJacSparsityHierarchicalSymm "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::Collocation::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::Collocation::codegen_decref "[INTERNAL]
Codegen decref for dependencies.

";

%feature("docstring") casadi::Collocation::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::Collocation::sz_arg "[INTERNAL]  Get required
length of arg field.

";

%feature("docstring") casadi::Collocation::factory "[INTERNAL] ";

%feature("docstring") casadi::Collocation::tangent "[INTERNAL]  Return
tangent function.

";

%feature("docstring") casadi::Collocation::oracle "[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::Collocation::Collocation "[INTERNAL]
Constructor.

";

%feature("docstring") casadi::Collocation::matchingRes "[INTERNAL]  Check
if output arguments that needs to be replaced.

";

%feature("docstring") casadi::Collocation::free_mx "[INTERNAL]  Get free
variables ( MX)

";

%feature("docstring") casadi::Collocation::replaceFwdSeed "[INTERNAL]
Replace 0-by-0 forward seeds.

";

%feature("docstring") casadi::Collocation::get_sparsity_in "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Collocation::default_in "[INTERNAL]  Get
default input value.

";

%feature("docstring") casadi::Collocation::eval_mx "[INTERNAL]  Evaluate
with symbolic matrices.

";

%feature("docstring") casadi::Collocation::set_function "[INTERNAL]
Register the function for evaluation and statistics gathering

";

%feature("docstring") casadi::Collocation::size_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::Collocation::~Collocation "[INTERNAL]
Destructor.

";

%feature("docstring") casadi::Collocation::self "[INTERNAL]  Get a public
class instance.

";

%feature("docstring") casadi::Collocation::release "[INTERNAL]  Release a
memory object.

";

%feature("docstring") casadi::Collocation::print_free "[INTERNAL]  Print
free variables.

";

%feature("docstring") casadi::Collocation::_set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::Collocation::codegen_name "[INTERNAL]  Get
name in codegen.

";

%feature("docstring") casadi::Collocation::jac_sx "[INTERNAL]  Jacobian
expression.

";

%feature("docstring") casadi::Collocation::set_temp "[INTERNAL]  Set the
work vectors.

";

%feature("docstring") casadi::Collocation::getJacSparsityGen "[INTERNAL]
Get the sparsity pattern, forward mode.

";

%feature("docstring") casadi::Collocation::mapsum_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::Collocation::map_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::Collocation::plugin_name "[INTERNAL] ";

%feature("docstring") casadi::Collocation::print_options "[INTERNAL]  Print
list of options.

";

%feature("docstring") casadi::Collocation::index_out "[INTERNAL]  Get
output scheme index by name.

";

%feature("docstring") casadi::Collocation::getExplicitB "[INTERNAL]  Get
explicit dynamics (backward problem)

";

%feature("docstring") casadi::Collocation::replaceRes "[INTERNAL]  Replace
0-by-0 outputs.

";

%feature("docstring") casadi::Collocation "

'collocation' plugin for Integrator

Fixed-step implicit Runge-Kutta integrator ODE/DAE integrator based on
collocation schemes

The method is still under development

>List of available options

+---------------------------+-----------------+----------------------------+
|            Id             |      Type       |        Description         |
+===========================+=================+============================+
| augmented_options         | OT_DICT         | Options to be passed down  |
|                           |                 | to the augmented           |
|                           |                 | integrator, if one is      |
|                           |                 | constructed.               |
+---------------------------+-----------------+----------------------------+
| collocation_scheme        | OT_STRING       | Collocation scheme:        |
|                           |                 | radau|legendre             |
+---------------------------+-----------------+----------------------------+
| expand                    | OT_BOOL         | Replace MX with SX         |
|                           |                 | expressions in problem     |
|                           |                 | formulation [false]        |
+---------------------------+-----------------+----------------------------+
| grid                      | OT_DOUBLEVECTOR | Time grid                  |
+---------------------------+-----------------+----------------------------+
| interpolation_order       | OT_INT          | Order of the interpolating |
|                           |                 | polynomials                |
+---------------------------+-----------------+----------------------------+
| number_of_finite_elements | OT_INT          | Number of finite elements  |
+---------------------------+-----------------+----------------------------+
| output_t0                 | OT_BOOL         | Output the state at the    |
|                           |                 | initial time               |
+---------------------------+-----------------+----------------------------+
| print_stats               | OT_BOOL         | Print out statistics after |
|                           |                 | integration                |
+---------------------------+-----------------+----------------------------+
| rootfinder                | OT_STRING       | An implicit function       |
|                           |                 | solver                     |
+---------------------------+-----------------+----------------------------+
| rootfinder_options        | OT_DICT         | Options to be passed to    |
|                           |                 | the NLP Solver             |
+---------------------------+-----------------+----------------------------+
| t0                        | OT_DOUBLE       | Beginning of the time      |
|                           |                 | horizon                    |
+---------------------------+-----------------+----------------------------+
| tf                        | OT_DOUBLE       | End of the time horizon    |
+---------------------------+-----------------+----------------------------+

Joel Andersson

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| augmented_option | OT_DICT         | Options to be    | casadi::Implicit |
| s                |                 | passed down to   | FixedStepIntegra |
|                  |                 | the augmented    | tor              |
|                  |                 | integrator, if   |                  |
|                  |                 | one is           |                  |
|                  |                 | constructed.     |                  |
+------------------+-----------------+------------------+------------------+
| collocation_sche | OT_STRING       | Collocation      | casadi::Collocat |
| me               |                 | scheme:          | ion              |
|                  |                 | radau|legendre   |                  |
+------------------+-----------------+------------------+------------------+
| expand           | OT_BOOL         | Replace MX with  | casadi::Implicit |
|                  |                 | SX expressions   | FixedStepIntegra |
|                  |                 | in problem       | tor              |
|                  |                 | formulation      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| grid             | OT_DOUBLEVECTOR | Time grid        | casadi::Implicit |
|                  |                 |                  | FixedStepIntegra |
|                  |                 |                  | tor              |
+------------------+-----------------+------------------+------------------+
| interpolation_or | OT_INT          | Order of the     | casadi::Collocat |
| der              |                 | interpolating    | ion              |
|                  |                 | polynomials      |                  |
+------------------+-----------------+------------------+------------------+
| number_of_finite | OT_INT          | Number of finite | casadi::Implicit |
| _elements        |                 | elements         | FixedStepIntegra |
|                  |                 |                  | tor              |
+------------------+-----------------+------------------+------------------+
| output_t0        | OT_BOOL         | Output the state | casadi::Implicit |
|                  |                 | at the initial   | FixedStepIntegra |
|                  |                 | time             | tor              |
+------------------+-----------------+------------------+------------------+
| print_stats      | OT_BOOL         | Print out        | casadi::Implicit |
|                  |                 | statistics after | FixedStepIntegra |
|                  |                 | integration      | tor              |
+------------------+-----------------+------------------+------------------+
| rootfinder       | OT_STRING       | An implicit      | casadi::Implicit |
|                  |                 | function solver  | FixedStepIntegra |
|                  |                 |                  | tor              |
+------------------+-----------------+------------------+------------------+
| rootfinder_optio | OT_DICT         | Options to be    | casadi::Implicit |
| ns               |                 | passed to the    | FixedStepIntegra |
|                  |                 | NLP Solver       | tor              |
+------------------+-----------------+------------------+------------------+
| t0               | OT_DOUBLE       | Beginning of the | casadi::Implicit |
|                  |                 | time horizon     | FixedStepIntegra |
|                  |                 |                  | tor              |
+------------------+-----------------+------------------+------------------+
| tf               | OT_DOUBLE       | End of the time  | casadi::Implicit |
|                  |                 | horizon          | FixedStepIntegra |
|                  |                 |                  | tor              |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: collocation.hpp ";

%feature("docstring") casadi::Collocation::setupFG "[INTERNAL]  Setup F and
G.

";

%feature("docstring") casadi::Collocation::generateDeclarations "[INTERNAL]
Generate code for the declarations of the C function.

";

%feature("docstring") casadi::Collocation::sz_w "[INTERNAL]  Get required
length of w field.

";

%feature("docstring") casadi::Collocation::getAtomicOutput "[INTERNAL]  Get
the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::Collocation::print_stats "[INTERNAL]  Print
solver statistics.

";

%feature("docstring") casadi::Collocation::has_function "[INTERNAL] ";

%feature("docstring") casadi::Collocation::generateBody "[INTERNAL]
Generate code for the function body.

";

%feature("docstring") casadi::Collocation::_eval "

>  void casadi::FunctionInternal::_eval(const double **arg, double **res, int *iw, double *w, int mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate numerically.

>  void casadi::FunctionInternal::_eval(const SXElem **arg, SXElem **res, int *iw, SXElem *w, int mem) const

>  void casadi::FunctionInternal::_eval(const bvec_t **arg, bvec_t **res, int *iw, bvec_t *w, int mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

%feature("docstring") casadi::Collocation::getTangent "[INTERNAL]  Return
tangent function.

";

%feature("docstring") casadi::Collocation::eval "[INTERNAL]  evaluate

";

%feature("docstring") casadi::Collocation::get_name_in "[INTERNAL]  Names
of function input and outputs.

";

%feature("docstring") casadi::Collocation::get_n_in "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::Collocation::checkRes "[INTERNAL]  Check if
output arguments have correct length and dimensions.

";

%feature("docstring") casadi::Collocation::eval_sx "[INTERNAL]  Evaluate
with symbolic scalars.

";

%feature("docstring") casadi::Collocation::n_in "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::Collocation::call_forward "[INTERNAL]
Forward mode AD, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Collocation::is_a "[INTERNAL]  Check if the
function is of a particular type.

";

%feature("docstring") casadi::Collocation::checkInputs "[INTERNAL]  Check
if the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::Collocation::alloc_arg "[INTERNAL]  Ensure
required length of arg field.

";

%feature("docstring") casadi::Collocation::checkout "[INTERNAL]  Checkout a
memory object.

";

%feature("docstring") casadi::Collocation::generate_dependencies "[INTERNAL]  Export / Generate C code for the generated functions.

";

%feature("docstring") casadi::Collocation::alloc_res "[INTERNAL]  Ensure
required length of res field.

";

%feature("docstring") casadi::Collocation::setJacobian "[INTERNAL]  Return
Jacobian function.

";

%feature("docstring") casadi::Collocation::expand "[INTERNAL] ";

%feature("docstring") casadi::Collocation::free_memory "[INTERNAL]  Free
memory block.

";

%feature("docstring") casadi::Collocation::set_jac_sparsity "[INTERNAL]
Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Collocation::x "[INTERNAL] ";

%feature("docstring") casadi::Collocation::name "[INTERNAL]  Name of the
function.

";

%feature("docstring") casadi::Collocation::n_mem "[INTERNAL]  Maximum
number of memory objects.

";

%feature("docstring") casadi::Collocation::has_sprev "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Collocation::_get_stats "[INTERNAL]  Get all
statistics

";

%feature("docstring") casadi::Collocation::generateMeta "[INTERNAL]
Generate meta-information allowing a user to evaluate a generated function.

";

%feature("docstring") casadi::Collocation::init_memory "[INTERNAL]
Initalize memory block.

";

%feature("docstring") casadi::Collocation::addShorthand "[INTERNAL]
Generate shorthand macro.

";

%feature("docstring") casadi::Collocation::has_free "[INTERNAL]  Does the
function have free variables.

";

%feature("docstring") casadi::Collocation::size2_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::Collocation::_set_temp "[INTERNAL]  Set the
(temporary) work vectors.

";

%feature("docstring") casadi::Collocation::call "[INTERNAL]   Call a
function, templated.

";

%feature("docstring") casadi::Collocation::gradient "[INTERNAL]  Return
gradient function.

";

%feature("docstring") casadi::Collocation::addDependency "[INTERNAL]  Add a
dependent function.

";

%feature("docstring") casadi::Collocation::_call "[INTERNAL]   Call a
function, overloaded.

";

%feature("docstring") casadi::Collocation::free_sx "[INTERNAL]  Get free
variables (SX)

";

%feature("docstring") casadi::Collocation::getDerivativeOptions "[INTERNAL]
Set solver specific options to generated augmented integrators.

";

%feature("docstring") casadi::Collocation::aug_adj "[INTERNAL]  Generate a
augmented DAE system with nadj adjoint sensitivities.

";

%feature("docstring") casadi::Collocation::getAdaptorSolverName "[INTERNAL]
Obtain solver name from Adaptor.

";

%feature("docstring") casadi::Collocation::alloc_iw "[INTERNAL]  Ensure
required length of iw field.

";

%feature("docstring") casadi::Collocation::hasDerivative "[INTERNAL]  Can
derivatives be calculated in any way?

";

%feature("docstring") casadi::Collocation::print_fstats "[INTERNAL]  Print
statistics.

";

%feature("docstring") casadi::Collocation::sz_iw "[INTERNAL]  Get required
length of iw field.

";

%feature("docstring") casadi::Collocation::getPartition "[INTERNAL]  Get
the unidirectional or bidirectional partition.

";

%feature("docstring") casadi::Collocation::jacobian "[INTERNAL]  Return
Jacobian function.

";

%feature("docstring") casadi::Collocation::fullJacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Collocation::print "[INTERNAL]  Print.

";

%feature("docstring") casadi::Collocation::tang_sx "[INTERNAL]  Tangent
expression.

";

%feature("docstring") casadi::Collocation::getJacobian "[INTERNAL]  Return
Jacobian function.

";

%feature("docstring") casadi::Collocation::calc_function "[INTERNAL] ";

%feature("docstring") casadi::Collocation::signature "[INTERNAL]  Code
generate the function.

";

%feature("docstring") casadi::Collocation::get_forward "[INTERNAL]
Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::Collocation::mx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Collocation::codegen_incref "[INTERNAL]
Codegen incref for dependencies.

";

%feature("docstring") casadi::Collocation::generate_lifted "[INTERNAL]
Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::Collocation::getAtomicInputReal "[INTERNAL]
Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::Collocation::sp_jac_dae "[INTERNAL]  Create
sparsity pattern of the extended Jacobian (forward problem)

";

%feature("docstring") casadi::Collocation::sparsity_in "[INTERNAL]  Get
sparsity of a given input.

";

%feature("docstring") casadi::Collocation::getGradient "[INTERNAL]  Return
gradient function.

";

%feature("docstring") casadi::Collocation::repr "[INTERNAL]  Print.

";

%feature("docstring") casadi::Collocation::mx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Collocation::z "[INTERNAL] ";

%feature("docstring") casadi::Collocation::reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::Collocation::matchingArg "[INTERNAL]  Check
if input arguments that needs to be replaced.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::Collocation::_setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";

%feature("docstring") casadi::Collocation::name_out "[INTERNAL]  Get output
scheme name by index.

";

%feature("docstring") casadi::Collocation::p "[INTERNAL] ";

%feature("docstring") casadi::Collocation::q "[INTERNAL] ";

%feature("docstring") casadi::Collocation::t "[INTERNAL] ";

%feature("docstring") casadi::Collocation::type_name "[INTERNAL]  Get type
name.

";

%feature("docstring") casadi::Collocation::nnz_in "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::Collocation::simple "[INTERNAL]  Evaluate
numerically, simplied syntax.

";

%feature("docstring") casadi::Collocation::alloc_memory "[INTERNAL]  Create
memory block.

";

%feature("docstring") casadi::Collocation::getJacSparsityHierarchical "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::Collocation::generateFunction "[INTERNAL]
Generate code the function.

";

%feature("docstring") casadi::Collocation::checkArg "[INTERNAL]  Check if
input arguments have correct length and dimensions.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::Collocation::setStopTime "[INTERNAL]  Set
stop time for the integration.

";

%feature("docstring") casadi::Collocation::simplifiedCall "[INTERNAL]  Use
simplified signature.

";

%feature("docstring") casadi::Collocation::setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";

%feature("docstring") casadi::Collocation::call_reverse "[INTERNAL]
Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Collocation::adjViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::Collocation::sp_rev "[INTERNAL]  Propagate
sparsity backwards.

";

%feature("docstring") casadi::Collocation::get_n_forward "[INTERNAL]
Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::Collocation::getAtomicOperation "[INTERNAL]
Get an atomic operation operator index.

";

%feature("docstring") casadi::Collocation::rx "[INTERNAL] ";

%feature("docstring") casadi::Collocation::rz "[INTERNAL] ";

%feature("docstring") casadi::Collocation::get_options "[INTERNAL]
Options.

";

%feature("docstring") casadi::Collocation::rq "[INTERNAL] ";

%feature("docstring") casadi::Collocation::rp "[INTERNAL] ";

%feature("docstring") casadi::Collocation::sparsity_jac "[INTERNAL]  Get,
if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Collocation::getJacSparsity "[INTERNAL]
Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Collocation::alloc "[INTERNAL]  Ensure work
vectors long enough to evaluate function.

";

%feature("docstring") casadi::Collocation::sp_jac_rdae "[INTERNAL]  Create
sparsity pattern of the extended Jacobian (backward problem)

";

%feature("docstring") casadi::Collocation::sp_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode, sparsity propagation.

";

%feature("docstring") casadi::Collocation::create_function "[INTERNAL]
Create an oracle function

";

%feature("docstring") casadi::Collocation::getWorkSize "[INTERNAL]  Get the
length of the work vector.

";

%feature("docstring") casadi::Collocation::get_stats "[INTERNAL]  Get all
statistics.

";

%feature("docstring") casadi::Collocation::ad_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::Collocation::grad_mx "[INTERNAL]  Gradient
expression.

";

%feature("docstring") casadi::Collocation::get_function "[INTERNAL] ";

%feature("docstring") casadi::Collocation::size1_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::Collocation::numel_in "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::Collocation::sx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Collocation::eval_name "[INTERNAL]  Get name
of the evaluation function.

";

%feature("docstring") casadi::Collocation::getExplicit "[INTERNAL]  Get
explicit dynamics.

";

%feature("docstring") casadi::Collocation::sx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Collocation::init "[INTERNAL]  Initialize
stage.

";

%feature("docstring") casadi::Collocation::hasFullJacobian "[INTERNAL]
Return Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Collocation::symbolicAdjSeed "[INTERNAL]
Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::Collocation::jit_dependencies "[INTERNAL]
JIT for dependencies.

";

%feature("docstring") casadi::Collocation::verbose "[INTERNAL]  Verbose
mode?

";

%feature("docstring") casadi::Collocation::finalize "[INTERNAL]  Finalize
initialization.

";

%feature("docstring") casadi::Collocation::print_dimensions "[INTERNAL]
Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::Collocation::resetB "[INTERNAL]  Reset the
backward problem and take time to tf.

";

%feature("docstring") casadi::Collocation::replaceAdjSeed "[INTERNAL]
Replace 0-by-0 reverse seeds.

";

%feature("docstring") casadi::Collocation::get_n_out "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::Collocation::get_sparsity_out "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Collocation::numel_out "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::Collocation::sz_work "[INTERNAL]  Get number
of temporary variables needed.

";

%feature("docstring") casadi::Collocation::get_n_reverse "[INTERNAL]
Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::Collocation::monitored "[INTERNAL] ";

%feature("docstring") casadi::Collocation::getAlgorithmSize "[INTERNAL]
Get the number of atomic operations.

";

%feature("docstring") casadi::Collocation::nnz_out "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::Collocation::symbolicFwdSeed "[INTERNAL]
Symbolic expressions for the forward seeds.

";

%feature("docstring") casadi::Collocation::size_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::Collocation::sp_fwd "[INTERNAL]  Propagate
sparsity forward.

";

%feature("docstring") casadi::Collocation::set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::Collocation::aug_fwd "[INTERNAL]  Generate a
augmented DAE system with nfwd forward sensitivities.

";

%feature("docstring") casadi::Collocation::symbolicOutput "[INTERNAL]  Get
a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::Collocation::getAtomicInput "[INTERNAL]  Get
the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::Collocation::replaceArg "[INTERNAL]  Replace
0-by-0 inputs.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::Collocation::wrap "[INTERNAL]  Wrap in an
Function instance consisting of only one MX call.

";

%feature("docstring") casadi::Collocation::log "

>  void casadi::FunctionInternal::log(const std::string &msg) const 
------------------------------------------------------------------------
[INTERNAL] 
Log the status of the solver.

>  void casadi::FunctionInternal::log(const std::string &fcn, const std::string &msg) const 
------------------------------------------------------------------------
[INTERNAL] 
Log the status of the solver, function given.

";

%feature("docstring") casadi::Collocation::n_nodes "[INTERNAL]  Number of
nodes in the algorithm.

";

%feature("docstring") casadi::Collocation::construct "[INTERNAL]  Construct
Prepares the function for evaluation.

";

%feature("docstring") casadi::Collocation::forward "[INTERNAL]  Return
function that calculates forward derivatives forward(nfwd) returns a cached
instance if available, and calls  Function get_forward(int nfwd) if no
cached version is available.

";

%feature("docstring") casadi::Collocation::jac_mx "[INTERNAL]  Jacobian
expression.

";

%feature("docstring") casadi::Collocation::fwdViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::Collocation::sparsity_out "[INTERNAL]  Get
sparsity of a given output.

";

%feature("docstring") casadi::Collocation::has_codegen "[INTERNAL]  Is
codegen supported?

";

%feature("docstring") casadi::Collocation::size1_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::Collocation::grad_sx "[INTERNAL]  Gradient
expression.

";

%feature("docstring") casadi::Collocation::n_out "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::Collocation::size2_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::Collocation::which_depends "[INTERNAL]  Which
variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::Collocation::getHessian "[INTERNAL]  Return
Hessian function.

";

%feature("docstring") casadi::Collocation::has_spfwd "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Collocation::get_reverse "[INTERNAL]
Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::Collocation::retreat "[INTERNAL]  Retreat
solution in time.

";

%feature("docstring") casadi::Collocation::get_name_out "[INTERNAL]  Names
of function input and outputs.

";

%feature("docstring") casadi::Collocation::getFullJacobian "[INTERNAL]
Return Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Collocation::alloc_w "[INTERNAL]  Ensure
required length of w field.

";

%feature("docstring") casadi::Collocation::reset "[INTERNAL]  Reset the
forward problem.

";

%feature("docstring") casadi::Collocation::memory "[INTERNAL]  Memory
objects.

";

%feature("docstring") casadi::Collocation::clear_memory "[INTERNAL]  Clear
all memory (called from destructor)

";

%feature("docstring") casadi::Collocation::sz_res "[INTERNAL]  Get required
length of res field.

";


// File: classcasadi_1_1Concat.xml


// File: classcasadi_1_1Conic.xml
%feature("docstring") casadi::Conic::call_forward "[INTERNAL]  Forward mode
AD, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Conic::call "[INTERNAL]   Call a function,
templated.

";

%feature("docstring") casadi::Conic::hess_sx "[INTERNAL]  Hessian
expression.

";

%feature("docstring") casadi::Conic::getPartition "[INTERNAL]  Get the
unidirectional or bidirectional partition.

";

%feature("docstring") casadi::Conic::ad_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::Conic::_setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";

%feature("docstring") casadi::Conic::self "[INTERNAL]  Get a public class
instance.

";

%feature("docstring") casadi::Conic::has_function "[INTERNAL] ";

%feature("docstring") casadi::Conic::sx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Conic::signature "[INTERNAL]  Code generate
the function.

";

%feature("docstring") casadi::Conic::sparsity_out "[INTERNAL]  Get sparsity
of a given output.

";

%feature("docstring") casadi::Conic::jac_sx "[INTERNAL]  Jacobian
expression.

";

%feature("docstring") casadi::Conic::get_n_in "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::Conic::which_depends "[INTERNAL]  Which
variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::Conic::alloc_res "[INTERNAL]  Ensure required
length of res field.

";

%feature("docstring") casadi::Conic::_call "[INTERNAL]   Call a function,
overloaded.

";

%feature("docstring") casadi::Conic::generateNativeCode "[INTERNAL]
Generate native code in the interfaced language for debugging

";

%feature("docstring") casadi::Conic::codegen_decref "[INTERNAL]  Codegen
decref for dependencies.

";

%feature("docstring") casadi::Conic::size1_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Conic::generateFunction "[INTERNAL]  Generate
code the function.

";

%feature("docstring") casadi::Conic::nnz_in "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::Conic::call_reverse "[INTERNAL]  Reverse
mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Conic::eval "[INTERNAL]  Evaluate
numerically.

";

%feature("docstring") casadi::Conic::name_out "[INTERNAL]  Get output
scheme name by index.

";

%feature("docstring") casadi::Conic::addDependency "[INTERNAL]  Add a
dependent function.

";

%feature("docstring") casadi::Conic::getTangent "[INTERNAL]  Return tangent
function.

";

%feature("docstring") casadi::Conic::free_memory "[INTERNAL]  Free memory
block.

";

%feature("docstring") casadi::Conic::get_reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::Conic::finalize "[INTERNAL]  Finalize the
object creation This function, which visits the class hierarchy in reverse
order is run after init() has been completed.

";

%feature("docstring") casadi::Conic::grad_mx "[INTERNAL]  Gradient
expression.

";

%feature("docstring") casadi::Conic::print_option "[INTERNAL]  Print all
information there is to know about a certain option.

";

%feature("docstring") casadi::Conic::sparsity_jac "[INTERNAL]  Get, if
necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Conic::slice "[INTERNAL]  returns a new
function with a selection of inputs/outputs of the original

";

%feature("docstring") casadi::Conic::eval_sx "[INTERNAL]  Evaluate with
symbolic scalars.

";

%feature("docstring") casadi::Conic::sz_arg "[INTERNAL]  Get required
length of arg field.

";

%feature("docstring") casadi::Conic::adjViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::Conic::repr "[INTERNAL]  Print.

";

%feature("docstring") casadi::Conic::free_sx "[INTERNAL]  Get free
variables (SX)

";

%feature("docstring") casadi::Conic::matchingArg "[INTERNAL]  Check if
input arguments that needs to be replaced.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::Conic::setup "[INTERNAL]  Set the (persistent
and temporary) work vectors.

";

%feature("docstring") casadi::Conic::alloc_w "[INTERNAL]  Ensure required
length of w field.

";

%feature("docstring") casadi::Conic::get_n_out "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::Conic::get_forward "[INTERNAL]  Return
function that calculates forward derivatives forward(nfwd) returns a cached
instance if available, and calls  Function get_forward(int nfwd) if no
cached version is available.

";

%feature("docstring") casadi::Conic::set_temp "[INTERNAL]  Set the
(temporary) work vectors.

";

%feature("docstring") casadi::Conic::n_nodes "[INTERNAL]  Number of nodes
in the algorithm.

";

%feature("docstring") casadi::Conic::getJacobian "[INTERNAL]  Return
Jacobian function.

";

%feature("docstring") casadi::Conic::get_sparsity_out "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Conic::setJacobian "[INTERNAL]  Return
Jacobian function.

";

%feature("docstring") casadi::Conic::jacobian "[INTERNAL]  Return Jacobian
function.

";

%feature("docstring") casadi::Conic::set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::Conic::symbolicAdjSeed "[INTERNAL]  Symbolic
expressions for the adjoint seeds.

";

%feature("docstring") casadi::Conic::init "[INTERNAL]  Initialize
Initialize and make the object ready for setting arguments and evaluation.
This method is typically called after setting options but before evaluating.
If passed to another class (in the constructor), this class should invoke
this function when initialized.

";

%feature("docstring") casadi::Conic::clear_memory "[INTERNAL]  Clear all
memory (called from destructor)

";

%feature("docstring") casadi::Conic::free_mx "[INTERNAL]  Get free
variables ( MX)

";

%feature("docstring") casadi::Conic::getAtomicOutput "[INTERNAL]  Get the
(integer) output argument of an atomic operation.

";

%feature("docstring") casadi::Conic::weak "[INTERNAL]  Get a weak reference
to the object.

";

%feature("docstring") casadi::Conic::index_in "[INTERNAL]  Get input scheme
index by name.

";

%feature("docstring") casadi::Conic::sp_rev "[INTERNAL]  Propagate sparsity
backwards.

";

%feature("docstring") casadi::Conic::size2_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Conic::tang_mx "[INTERNAL]  Tangent
expression.

";

%feature("docstring") casadi::Conic::integer_support "[INTERNAL]  Can
discrete variables be treated.

";

%feature("docstring") casadi::Conic::generate_dependencies "[INTERNAL]
Export / Generate C code for the dependency function.

";

%feature("docstring") casadi::Conic::alloc_memory "[INTERNAL]  Create
memory block.

";

%feature("docstring") casadi::Conic::fullJacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Conic::get_name_in "[INTERNAL]  Names of
function input and outputs.

";

%feature("docstring") casadi::Conic::mapsum_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::Conic::~Conic "[INTERNAL] ";

%feature("docstring") casadi::Conic::sz_work "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") casadi::Conic::generateBody "[INTERNAL]  Generate
code for the function body.

";

%feature("docstring") casadi::Conic::addShorthand "[INTERNAL]  Generate
shorthand macro.

";

%feature("docstring") casadi::Conic::alloc_arg "[INTERNAL]  Ensure required
length of arg field.

";

%feature("docstring") casadi::Conic::plugin_name "[INTERNAL] ";

%feature("docstring") casadi::Conic::checkArg "[INTERNAL]  Check if input
arguments have correct length and dimensions.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::Conic::Conic "[INTERNAL] ";

%feature("docstring") casadi::Conic::getHessian "[INTERNAL]  Return Hessian
function.

";

%feature("docstring") casadi::Conic::eval_name "[INTERNAL]  Get name of the
evaluation function.

";

%feature("docstring") casadi::Conic::_set_temp "[INTERNAL]  Set the
(temporary) work vectors.

";

%feature("docstring") casadi::Conic::getWorkSize "[INTERNAL]  Get the
length of the work vector.

";

%feature("docstring") casadi::Conic::name_in "[INTERNAL]  Get input scheme
name by index.

";

%feature("docstring") casadi::Conic::getJacSparsity "[INTERNAL]  Generate
the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Conic::fwdViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::Conic::jac_mx "[INTERNAL]  Jacobian
expression.

";

%feature("docstring") casadi::Conic::sx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Conic::replaceFwdSeed "[INTERNAL]  Replace
0-by-0 forward seeds.

";

%feature("docstring") casadi::Conic::sz_iw "[INTERNAL]  Get required length
of iw field.

";

%feature("docstring") casadi::Conic::eval_mx "[INTERNAL]  Evaluate with
symbolic matrices.

";

%feature("docstring") casadi::Conic::generateDeclarations "[INTERNAL]
Generate code for the declarations of the C function.

";

%feature("docstring") casadi::Conic::alloc_iw "[INTERNAL]  Ensure required
length of iw field.

";

%feature("docstring") casadi::Conic::reverse "[INTERNAL]  Return function
that calculates adjoint derivatives reverse(nadj) returns a cached instance
if available, and calls  Function get_reverse(int nadj) if no cached version
is available.

";

%feature("docstring") casadi::Conic::verbose "[INTERNAL]  Verbose mode?

";

%feature("docstring") casadi::Conic::index_out "[INTERNAL]  Get output
scheme index by name.

";

%feature("docstring") casadi::Conic::_eval "

>  void casadi::FunctionInternal::_eval(const double **arg, double **res, int *iw, double *w, int mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate numerically.

>  void casadi::FunctionInternal::_eval(const SXElem **arg, SXElem **res, int *iw, SXElem *w, int mem) const

>  void casadi::FunctionInternal::_eval(const bvec_t **arg, bvec_t **res, int *iw, bvec_t *w, int mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

%feature("docstring") casadi::Conic::tangent "[INTERNAL]  Return tangent
function.

";

%feature("docstring") casadi::Conic::checkRes "[INTERNAL]  Check if output
arguments have correct length and dimensions.

";

%feature("docstring") casadi::Conic::checkInputs "[INTERNAL]  Check if the
numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::Conic::gradient "[INTERNAL]  Return gradient
function.

";

%feature("docstring") casadi::Conic::is_a "[INTERNAL]  Check if the
function is of a particular type.

";

%feature("docstring") casadi::Conic::name "[INTERNAL]  Name of the
function.

";

%feature("docstring") casadi::Conic::grad_sx "[INTERNAL]  Gradient
expression.

";

%feature("docstring") casadi::Conic::default_in "[INTERNAL]  Get default
input value.

";

%feature("docstring") casadi::Conic::n_out "[INTERNAL]  Number of function
inputs and outputs.

";

%feature("docstring") casadi::Conic::tang_sx "[INTERNAL]  Tangent
expression.

";

%feature("docstring") casadi::Conic::mx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Conic::print_free "[INTERNAL]  Print free
variables.

";

%feature("docstring") casadi::Conic::get_function "[INTERNAL] ";

%feature("docstring") casadi::Conic::sz_w "[INTERNAL]  Get required length
of w field.

";

%feature("docstring") casadi::Conic::replaceArg "[INTERNAL]  Replace 0-by-0
inputs.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::Conic::getAdaptorSolverName "[INTERNAL]
Obtain solver name from Adaptor.

";

%feature("docstring") casadi::Conic::map_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::Conic::has_spfwd "[INTERNAL]  Is the class
able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Conic::symbolicFwdSeed "[INTERNAL]  Symbolic
expressions for the forward seeds.

";

%feature("docstring") casadi::Conic::construct "[INTERNAL]  Construct
Prepares the function for evaluation.

";

%feature("docstring") casadi::Conic::hasDerivative "[INTERNAL]  Can
derivatives be calculated in any way?

";

%feature("docstring") casadi::Conic::size2_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Conic "

Internal class.

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| discrete         | OT_BOOLVECTOR   | Indicates which  | casadi::Conic    |
|                  |                 | of the variables |                  |
|                  |                 | are discrete,    |                  |
|                  |                 | i.e. integer-    |                  |
|                  |                 | valued           |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Custom input     | casadi::Function |
|                  |                 | scheme           | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Custom output    | casadi::Function |
|                  |                 | scheme           | Internal         |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: conic_impl.hpp ";

%feature("docstring") casadi::Conic::size1_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Conic::numel_out "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::Conic::generate_lifted "[INTERNAL]  Extract
the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::Conic::mx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Conic::numel_in "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::Conic::matchingRes "[INTERNAL]  Check if
output arguments that needs to be replaced.

";

%feature("docstring") casadi::Conic::print_dimensions "[INTERNAL]  Print
dimensions of inputs and outputs.

";

%feature("docstring") casadi::Conic::getGradient "[INTERNAL]  Return
gradient function.

";

%feature("docstring") casadi::Conic::sparsity_in "[INTERNAL]  Get sparsity
of a given input.

";

%feature("docstring") casadi::Conic::release "[INTERNAL]  Release a memory
object.

";

%feature("docstring") casadi::Conic::getAtomicInputReal "[INTERNAL]  Get
the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::Conic::alloc "[INTERNAL]  Ensure work vectors
long enough to evaluate function.

";

%feature("docstring") casadi::Conic::getJacSparsityHierarchicalSymm "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::Conic::print "[INTERNAL]  Print.

";

%feature("docstring") casadi::Conic::get_n_reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::Conic::type_name "[INTERNAL]  Get type name.

";

%feature("docstring") casadi::Conic::nnz_out "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::Conic::sp_fwd "[INTERNAL]  Propagate sparsity
forward.

";

%feature("docstring") casadi::Conic::sz_res "[INTERNAL]  Get required
length of res field.

";

%feature("docstring") casadi::Conic::codegen_incref "[INTERNAL]  Codegen
incref for dependencies.

";

%feature("docstring") casadi::Conic::oracle "[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::Conic::factory "[INTERNAL] ";

%feature("docstring") casadi::Conic::getAlgorithmSize "[INTERNAL]  Get the
number of atomic operations.

";

%feature("docstring") casadi::Conic::get_stats "[INTERNAL]  Get all
statistics

";

%feature("docstring") casadi::Conic::jit_dependencies "[INTERNAL]   Jit
dependencies.

";

%feature("docstring") casadi::Conic::codegen_name "[INTERNAL]  Get name in
codegen.

";

%feature("docstring") casadi::Conic::has_sprev "[INTERNAL]  Is the class
able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Conic::get_name_out "[INTERNAL]  Names of
function input and outputs.

";

%feature("docstring") casadi::Conic::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::Conic::getAtomicInput "[INTERNAL]  Get the
(integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::Conic::getJacSparsityGen "[INTERNAL]  Get the
sparsity pattern, forward mode.

";

%feature("docstring") casadi::Conic::n_mem "[INTERNAL]  Maximum number of
memory objects.

";

%feature("docstring") casadi::Conic::getFullJacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Conic::simple "[INTERNAL]  Evaluate
numerically, simplied syntax.

";

%feature("docstring") casadi::Conic::checkout "[INTERNAL]  Checkout a
memory object.

";

%feature("docstring") casadi::Conic::size_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Conic::get_options "[INTERNAL]  Options.

";

%feature("docstring") casadi::Conic::replaceRes "[INTERNAL]  Replace 0-by-0
outputs.

";

%feature("docstring") casadi::Conic::getJacSparsityHierarchical "[INTERNAL]
A flavor of getJacSparsity that does hierarchical block structure
recognition.

";

%feature("docstring") casadi::Conic::set_jac_sparsity "[INTERNAL]  Generate
the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Conic::print_fstats "[INTERNAL]  Print
statistics.

";

%feature("docstring") casadi::Conic::n_in "[INTERNAL]  Number of function
inputs and outputs.

";

%feature("docstring") casadi::Conic::get_sparsity_in "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Conic::print_options "[INTERNAL]  Print list
of options.

";

%feature("docstring") casadi::Conic::_get_stats "[INTERNAL]  Get all
statistics

";

%feature("docstring") casadi::Conic::get_n_forward "[INTERNAL]  Return
function that calculates forward derivatives forward(nfwd) returns a cached
instance if available, and calls  Function get_forward(int nfwd) if no
cached version is available.

";

%feature("docstring") casadi::Conic::has_codegen "[INTERNAL]  Is codegen
supported?

";

%feature("docstring") casadi::Conic::generateMeta "[INTERNAL]  Generate
meta-information allowing a user to evaluate a generated function.

";

%feature("docstring") casadi::Conic::sp_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode, sparsity propagation.

";

%feature("docstring") casadi::Conic::replaceAdjSeed "[INTERNAL]  Replace
0-by-0 reverse seeds.

";

%feature("docstring") casadi::Conic::size_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Conic::_set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::Conic::hasFullJacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Conic::log "

>  void casadi::FunctionInternal::log(const std::string &msg) const 
------------------------------------------------------------------------
[INTERNAL] 
Log the status of the solver.

>  void casadi::FunctionInternal::log(const std::string &fcn, const std::string &msg) const 
------------------------------------------------------------------------
[INTERNAL] 
Log the status of the solver, function given.

";

%feature("docstring") casadi::Conic::memory "[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::Conic::wrap "[INTERNAL]  Wrap in an Function
instance consisting of only one MX call.

";

%feature("docstring") casadi::Conic::init_memory "[INTERNAL]  Initalize
memory block.

";

%feature("docstring") casadi::Conic::forward "[INTERNAL]  Return function
that calculates forward derivatives forward(nfwd) returns a cached instance
if available, and calls  Function get_forward(int nfwd) if no cached version
is available.

";

%feature("docstring") casadi::Conic::has_free "[INTERNAL]  Does the
function have free variables.

";

%feature("docstring") casadi::Conic::hessian "[INTERNAL]  Return Hessian
function.

";

%feature("docstring") casadi::Conic::getAtomicOperation "[INTERNAL]  Get an
atomic operation operator index.

";

%feature("docstring") casadi::Conic::simplifiedCall "[INTERNAL]  Use
simplified signature.

";

%feature("docstring") casadi::Conic::symbolicOutput "[INTERNAL]  Get a
vector of symbolic variables corresponding to the outputs.

";


// File: classcasadi_1_1Constant.xml


// File: classcasadi_1_1ConstantDM.xml


// File: classcasadi_1_1ConstantMX.xml


// File: classcasadi_1_1ConstantSX.xml


// File: classcasadi_1_1DaeBuilder.xml


/*  Variables and equations  */

/* Public data members

*/

/*  Symbolic modeling  */

/* Formulate an optimal control problem

*/

/*  Manipulation  */

/* Reformulate the dynamic optimization problem.

*/

/*  Import and export  */ %feature("docstring") casadi::DaeBuilder::add_s "

Add a implicit state.

";

%feature("docstring") casadi::DaeBuilder::sanity_check "

Check if dimensions match.

";

%feature("docstring") casadi::DaeBuilder::set_unit "

Set the unit for a component.

";

%feature("docstring") casadi::DaeBuilder::DaeBuilder "

Default constructor.

";

%feature("docstring") casadi::DaeBuilder::sort_dae "

Sort the DAE and implicitly defined states.

";

%feature("docstring") casadi::DaeBuilder::start "

>  double casadi::DaeBuilder::start(const std::string &name, bool normalized=false) const 
------------------------------------------------------------------------

Get the (optionally normalized) value at time 0 by name.

>  std::vector<double> casadi::DaeBuilder::start(const MX &var, bool normalized=false) const 
------------------------------------------------------------------------

Get the (optionally normalized) value(s) at time 0 by expression.

";

%feature("docstring") casadi::DaeBuilder::add_variable "

>  void casadi::DaeBuilder::add_variable(const std::string &name, const Variable &var)
------------------------------------------------------------------------

Add a variable.

>  MX casadi::DaeBuilder::add_variable(const std::string &name, int n=1)

>  MX casadi::DaeBuilder::add_variable(const std::string &name, const Sparsity &sp)
------------------------------------------------------------------------

Add a new variable: returns corresponding symbolic expression.

";

%feature("docstring") casadi::DaeBuilder::min "

>  double casadi::DaeBuilder::min(const std::string &name, bool normalized=false) const 
------------------------------------------------------------------------

Get the lower bound by name.

>  std::vector<double> casadi::DaeBuilder::min(const MX &var, bool normalized=false) const 
------------------------------------------------------------------------

Get the lower bound(s) by expression.

";

%feature("docstring") casadi::DaeBuilder::add_quad "

Add a quadrature equation.

";

%feature("docstring") casadi::DaeBuilder::nominal "

>  double casadi::DaeBuilder::nominal(const std::string &name) const 
------------------------------------------------------------------------

Get the nominal value by name.

>  std::vector<double> casadi::DaeBuilder::nominal(const MX &var) const 
------------------------------------------------------------------------

Get the nominal value(s) by expression.

";

%feature("docstring") casadi::DaeBuilder::max "

>  double casadi::DaeBuilder::max(const std::string &name, bool normalized=false) const 
------------------------------------------------------------------------

Get the upper bound by name.

>  std::vector<double> casadi::DaeBuilder::max(const MX &var, bool normalized=false) const 
------------------------------------------------------------------------

Get the upper bound(s) by expression.

";

%feature("docstring") casadi::DaeBuilder::make_semi_explicit "

Transform the implicit DAE to a semi-explicit DAE.

";

%feature("docstring") casadi::DaeBuilder::set_derivative_start "

>  void casadi::DaeBuilder::set_derivative_start(const std::string &name, double val, bool normalized=false)
------------------------------------------------------------------------

Set the (optionally normalized) derivative value at time 0 by name.

>  void casadi::DaeBuilder::set_derivative_start(const MX &var, const std::vector< double > &val, bool normalized=false)
------------------------------------------------------------------------

Set the (optionally normalized) derivative value(s) at time 0 by expression.

";

%feature("docstring") casadi::DaeBuilder::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::DaeBuilder::add_lc "

Add a named linear combination of output expressions.

";

%feature("docstring") casadi::DaeBuilder::sort_d "

Sort dependent parameters.

";

%feature("docstring") casadi::DaeBuilder::print "

Print description.

";

%feature("docstring") casadi::DaeBuilder::sort_alg "

Sort the algebraic equations and algebraic states.

";

%feature("docstring") casadi::DaeBuilder::add_dae "

Add a differential-algebraic equation.

";

%feature("docstring") casadi::DaeBuilder::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::DaeBuilder::make_explicit "

Transform the implicit DAE or semi-explicit DAE into an explicit ODE.

";

%feature("docstring") casadi::DaeBuilder "

An initial-value problem in differential-algebraic equations.

Independent variables:
======================





::

  t:      time
  



Time-continuous variables:
==========================





::

  x:      states defined by ODE
  s:      implicitly defined states
  z:      algebraic variables
  u:      control signals
  q:      quadrature states
  y:      outputs
  



Time-constant variables:
========================





::

  p:      free parameters
  d:      dependent parameters
  



Dynamic constraints (imposed everywhere):
=========================================





::

  ODE                    \\\\dot{x} ==  ode(t, x, s, z, u, p, d)
  DAE or implicit ODE:         0 ==  dae(t, x, s, z, u, p, d, sdot)
  algebraic equations:         0 ==  alg(t, x, s, z, u, p, d)
  quadrature equations:  \\\\dot{q} == quad(t, x, s, z, u, p, d)
  dependent parameters:        d == ddef(t, x, s, z, u, p, d)
  output equations:            y == ydef(t, x, s, z, u, p, d)
  



Point constraints (imposed pointwise):
======================================





::

  Initial equations:           0 == init(t, x, s, z, u, p, d, sdot)
  



Joel Andersson

C++ includes: dae_builder.hpp ";

%feature("docstring") casadi::DaeBuilder::add_q "

Add a new quadrature state.

";

%feature("docstring") casadi::DaeBuilder::add_p "

Add a new parameter

";

%feature("docstring") casadi::DaeBuilder::add_u "

Add a new control.

";

%feature("docstring") casadi::DaeBuilder::set_guess "

>  void casadi::DaeBuilder::set_guess(const std::string &name, double val, bool normalized=false)
------------------------------------------------------------------------

Set the initial guess by name.

>  void casadi::DaeBuilder::set_guess(const MX &var, const std::vector< double > &val, bool normalized=false)
------------------------------------------------------------------------

Set the initial guess(es) by expression.

";

%feature("docstring") casadi::DaeBuilder::add_z "

Add a new algebraic variable.

";

%feature("docstring") casadi::DaeBuilder::add_y "

Add a new output.

";

%feature("docstring") casadi::DaeBuilder::add_x "

Add a new differential state.

";

%feature("docstring") casadi::DaeBuilder::eliminate_quad "

Eliminate quadrature states and turn them into ODE states.

";

%feature("docstring") casadi::DaeBuilder::derivative_start "

>  double casadi::DaeBuilder::derivative_start(const std::string &name, bool normalized=false) const 
------------------------------------------------------------------------

Get the (optionally normalized) derivative value at time 0 by name.

>  std::vector<double> casadi::DaeBuilder::derivative_start(const MX &var, bool normalized=false) const 
------------------------------------------------------------------------

Get the (optionally normalized) derivative value(s) at time 0 by expression.

";

%feature("docstring") casadi::DaeBuilder::set_nominal "

>  void casadi::DaeBuilder::set_nominal(const std::string &name, double val)
------------------------------------------------------------------------

Set the nominal value by name.

>  void casadi::DaeBuilder::set_nominal(const MX &var, const std::vector< double > &val)
------------------------------------------------------------------------

Set the nominal value(s) by expression.

";

%feature("docstring") casadi::DaeBuilder::parse_fmi "

Import existing problem from FMI/XML

";

%feature("docstring") casadi::DaeBuilder::add_d "

Add a new dependent parameter.

";

%feature("docstring") casadi::DaeBuilder::split_dae "

Identify and separate the algebraic variables and equations in the DAE.

";

%feature("docstring") casadi::DaeBuilder::add_alg "

Add an algebraic equation.

";

%feature("docstring") casadi::DaeBuilder::repr "

Print representation.

";

%feature("docstring") casadi::DaeBuilder::create "

Construct a function object.

";

%feature("docstring") casadi::DaeBuilder::guess "

>  double casadi::DaeBuilder::guess(const std::string &name, bool normalized=false) const 
------------------------------------------------------------------------

Get the initial guess by name.

>  std::vector<double> casadi::DaeBuilder::guess(const MX &var, bool normalized=false) const 
------------------------------------------------------------------------

Get the initial guess(es) by expression.

";

%feature("docstring") casadi::DaeBuilder::variable "

Access a variable by name

";

%feature("docstring") casadi::DaeBuilder::set_max "

>  void casadi::DaeBuilder::set_max(const std::string &name, double val, bool normalized=false)
------------------------------------------------------------------------

Set the upper bound by name.

>  void casadi::DaeBuilder::set_max(const MX &var, const std::vector< double > &val, bool normalized=false)
------------------------------------------------------------------------

Set the upper bound(s) by expression.

";

%feature("docstring") casadi::DaeBuilder::eliminate_alg "

Eliminate algebraic variables and equations transforming them into outputs.

";

%feature("docstring") casadi::DaeBuilder::set_min "

>  void casadi::DaeBuilder::set_min(const std::string &name, double val, bool normalized=false)
------------------------------------------------------------------------

Set the lower bound by name.

>  void casadi::DaeBuilder::set_min(const MX &var, const std::vector< double > &val, bool normalized=false)
------------------------------------------------------------------------

Set the lower bound(s) by expression.

";

%feature("docstring") casadi::DaeBuilder::set_start "

>  void casadi::DaeBuilder::set_start(const std::string &name, double val, bool normalized=false)
------------------------------------------------------------------------

Set the (optionally normalized) value at time 0 by name.

>  void casadi::DaeBuilder::set_start(const MX &var, const std::vector< double > &val, bool normalized=false)
------------------------------------------------------------------------

Set the (optionally normalized) value(s) at time 0 by expression.

";

%feature("docstring") casadi::DaeBuilder::unit "

>  std::string casadi::DaeBuilder::unit(const std::string &name) const 
------------------------------------------------------------------------

Get the unit for a component.

>  std::string casadi::DaeBuilder::unit(const MX &var) const 
------------------------------------------------------------------------

Get the unit given a vector of symbolic variables (all units must be
identical)

";

%feature("docstring") casadi::DaeBuilder::scale_variables "

Scale the variables.

";

%feature("docstring") casadi::DaeBuilder::split_d "

Eliminate interdependencies amongst dependent parameters.

";

%feature("docstring") casadi::DaeBuilder::eliminate_d "

Eliminate dependent parameters.

";

%feature("docstring") casadi::DaeBuilder::der "

>  MX casadi::DaeBuilder::der(const std::string &name) const 
------------------------------------------------------------------------

Get a derivative expression by name.

>  MX casadi::DaeBuilder::der(const MX &var) const 
------------------------------------------------------------------------

Get a derivative expression by non-differentiated expression.

";

%feature("docstring") casadi::DaeBuilder::scale_equations "

Scale the implicit equations.

";

%feature("docstring") casadi::DaeBuilder::add_ode "

Add an ordinary differential equation.

";


// File: classcasadi_1_1DenseMultiplication.xml


// File: classcasadi_1_1DenseTranspose.xml


// File: classcasadi_1_1Determinant.xml


// File: classcasadi_1_1Diagcat.xml


// File: classcasadi_1_1Diagsplit.xml


// File: classcasadi_1_1DllLibrary.xml
%feature("docstring") casadi::DllLibrary::construct "[INTERNAL]  Construct
Prepares the function for evaluation.

";

%feature("docstring") casadi::DllLibrary::DllLibrary "[INTERNAL] ";

%feature("docstring") casadi::DllLibrary::print "[INTERNAL]  Print.

";

%feature("docstring") casadi::DllLibrary "

Dynamically linked library.

Joel Andersson

>List of available options

+---------+---------+---------------------------------+--------------------+
|   Id    |  Type   |           Description           |      Used in       |
+=========+=========+=================================+====================+
| verbose | OT_BOOL | Verbose evaluation  for         | casadi::DllLibrary |
|         |         | debugging                       |                    |
+---------+---------+---------------------------------+--------------------+

Diagrams
--------



C++ includes: importer_internal.hpp ";

%feature("docstring") casadi::DllLibrary::get_function "[INTERNAL]  Get a
function pointer for numerical evaluation.

";

%feature("docstring") casadi::DllLibrary::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::DllLibrary::get_options "[INTERNAL]  Options.

";

%feature("docstring") casadi::DllLibrary::read_meta "[INTERNAL]  Get meta
information.

";

%feature("docstring") casadi::DllLibrary::can_have_meta "[INTERNAL]  Can
meta information be read?

";

%feature("docstring") casadi::DllLibrary::plugin_name "[INTERNAL]  Queery
plugin name.

";

%feature("docstring") casadi::DllLibrary::to_text "[INTERNAL]  Get entry as
a text.

";

%feature("docstring") casadi::DllLibrary::get_meta "[INTERNAL]  Get entry
as a text.

";

%feature("docstring") casadi::DllLibrary::read_external "[INTERNAL]  Get an
external function declaration.

";

%feature("docstring") casadi::DllLibrary::body "[INTERNAL]  Get the
function body, if inlined.

";

%feature("docstring") casadi::DllLibrary::init "[INTERNAL]  Initialize.

";

%feature("docstring") casadi::DllLibrary::repr "[INTERNAL]  Print
representation.

";

%feature("docstring") casadi::DllLibrary::~DllLibrary "[INTERNAL] ";

%feature("docstring") casadi::DllLibrary::inlined "[INTERNAL] ";

%feature("docstring") casadi::DllLibrary::has_function "[INTERNAL]  Get a
function pointer for numerical evaluation.

";

%feature("docstring") casadi::DllLibrary::has_meta "[INTERNAL]  Does an
entry exist?

";

%feature("docstring") casadi::DllLibrary::getCount "[INTERNAL]  Get the
reference count.

";


// File: classcasadi_1_1Dot.xml


// File: classcasadi_1_1Dple.xml
%feature("docstring") casadi::Dple::_set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::Dple::getFullJacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Dple::fullJacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Dple::sz_w "[INTERNAL]  Get required length
of w field.

";

%feature("docstring") casadi::Dple::eval "[INTERNAL]  Evaluate numerically.

";

%feature("docstring") casadi::Dple::generate_lifted "[INTERNAL]  Extract
the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::Dple::checkout "[INTERNAL]  Checkout a memory
object.

";

%feature("docstring") casadi::Dple::fwdViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::Dple::sx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Dple::generateMeta "[INTERNAL]  Generate
meta-information allowing a user to evaluate a generated function.

";

%feature("docstring") casadi::Dple::get_function "[INTERNAL] ";

%feature("docstring") casadi::Dple::print "[INTERNAL]  Print.

";

%feature("docstring") casadi::Dple::factory "[INTERNAL] ";

%feature("docstring") casadi::Dple::set_temp "[INTERNAL]  Set the
(temporary) work vectors.

";

%feature("docstring") casadi::Dple::sparsity_jac "[INTERNAL]  Get, if
necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Dple::getWorkSize "[INTERNAL]  Get the length
of the work vector.

";

%feature("docstring") casadi::Dple::getAlgorithmSize "[INTERNAL]  Get the
number of atomic operations.

";

%feature("docstring") casadi::Dple::forward "[INTERNAL]  Return function
that calculates forward derivatives forward(nfwd) returns a cached instance
if available, and calls  Function get_forward(int nfwd) if no cached version
is available.

";

%feature("docstring") casadi::Dple::getJacSparsity "[INTERNAL]  Generate
the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Dple::getGradient "[INTERNAL]  Return
gradient function.

";

%feature("docstring") casadi::Dple::sz_res "[INTERNAL]  Get required length
of res field.

";

%feature("docstring") casadi::Dple::repr "[INTERNAL]  Print.

";

%feature("docstring") casadi::Dple "

Internal class.

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| const_dim        | OT_BOOL         | Assume constant  | casadi::Dple     |
|                  |                 | dimension of P   |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| eps_unstable     | OT_DOUBLE       | A margin for     | casadi::Dple     |
|                  |                 | unstability      |                  |
|                  |                 | detection        |                  |
+------------------+-----------------+------------------+------------------+
| error_unstable   | OT_BOOL         | Throw an         | casadi::Dple     |
|                  |                 | exception when   |                  |
|                  |                 | it is detected   |                  |
|                  |                 | that             |                  |
|                  |                 | Product(A_i,     |                  |
|                  |                 | i=N..1)has       |                  |
|                  |                 | eigenvalues      |                  |
|                  |                 | greater than     |                  |
|                  |                 | 1-eps_unstable   |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Custom input     | casadi::Function |
|                  |                 | scheme           | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Custom output    | casadi::Function |
|                  |                 | scheme           | Internal         |
+------------------+-----------------+------------------+------------------+
| pos_def          | OT_BOOL         | Assume P         | casadi::Dple     |
|                  |                 | positive         |                  |
|                  |                 | definite         |                  |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: dple_impl.hpp ";

%feature("docstring") casadi::Dple::n_nodes "[INTERNAL]  Number of nodes in
the algorithm.

";

%feature("docstring") casadi::Dple::tang_sx "[INTERNAL]  Tangent
expression.

";

%feature("docstring") casadi::Dple::name_in "[INTERNAL]  Get input scheme
name by index.

";

%feature("docstring") casadi::Dple::get_stats "[INTERNAL]  Get all
statistics

";

%feature("docstring") casadi::Dple::codegen_decref "[INTERNAL]  Codegen
decref for dependencies.

";

%feature("docstring") casadi::Dple::get_n_forward "[INTERNAL]  Generate a
function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::Dple::eval_sx "[INTERNAL]  Evaluate with
symbolic scalars.

";

%feature("docstring") casadi::Dple::print_options "[INTERNAL]  Print list
of options.

";

%feature("docstring") casadi::Dple::symbolicFwdSeed "[INTERNAL]  Symbolic
expressions for the forward seeds.

";

%feature("docstring") casadi::Dple::name "[INTERNAL]  Name of the function.

";

%feature("docstring") casadi::Dple::size1_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Dple::nnz_out "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::Dple::which_depends "[INTERNAL]  Which
variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::Dple::sparsity_in "[INTERNAL]  Get sparsity
of a given input.

";

%feature("docstring") casadi::Dple::release "[INTERNAL]  Release a memory
object.

";

%feature("docstring") casadi::Dple::get_reverse "[INTERNAL]  Generate a
function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::Dple::free_sx "[INTERNAL]  Get free variables
(SX)

";

%feature("docstring") casadi::Dple::symbolicOutput "[INTERNAL]  Get a
vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::Dple::call "[INTERNAL]   Call a function,
templated.

";

%feature("docstring") casadi::Dple::replaceFwdSeed "[INTERNAL]  Replace
0-by-0 forward seeds.

";

%feature("docstring") casadi::Dple::n_out "[INTERNAL]  Number of function
inputs and outputs.

";

%feature("docstring") casadi::Dple::index_out "[INTERNAL]  Get output
scheme index by name.

";

%feature("docstring") casadi::Dple::n_in "[INTERNAL]  Number of function
inputs and outputs.

";

%feature("docstring") casadi::Dple::print_dimensions "[INTERNAL]  Print
dimensions of inputs and outputs.

";

%feature("docstring") casadi::Dple::get_options "[INTERNAL]  Options.

";

%feature("docstring") casadi::Dple::sz_work "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") casadi::Dple::_set_temp "[INTERNAL]  Set the
(temporary) work vectors.

";

%feature("docstring") casadi::Dple::get_forward "[INTERNAL]  Generate a
function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::Dple::plugin_name "[INTERNAL] ";

%feature("docstring") casadi::Dple::getHessian "[INTERNAL]  Return Hessian
function.

";

%feature("docstring") casadi::Dple::log "

>  void casadi::FunctionInternal::log(const std::string &msg) const 
------------------------------------------------------------------------
[INTERNAL] 
Log the status of the solver.

>  void casadi::FunctionInternal::log(const std::string &fcn, const std::string &msg) const 
------------------------------------------------------------------------
[INTERNAL] 
Log the status of the solver, function given.

";

%feature("docstring") casadi::Dple::call_reverse "[INTERNAL]  Reverse mode,
virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Dple::_get_stats "[INTERNAL]  Get all
statistics

";

%feature("docstring") casadi::Dple::adjViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::Dple::alloc_iw "[INTERNAL]  Ensure required
length of iw field.

";

%feature("docstring") casadi::Dple::addShorthand "[INTERNAL]  Generate
shorthand macro.

";

%feature("docstring") casadi::Dple::Dple "[INTERNAL] ";

%feature("docstring") casadi::Dple::size2_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Dple::getAdaptorSolverName "[INTERNAL]
Obtain solver name from Adaptor.

";

%feature("docstring") casadi::Dple::construct "[INTERNAL]  Construct
Prepares the function for evaluation.

";

%feature("docstring") casadi::Dple::size_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Dple::set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::Dple::get_sparsity_in "[INTERNAL]  Sparsities
of function inputs and outputs.

";

%feature("docstring") casadi::Dple::matchingArg "[INTERNAL]  Check if input
arguments that needs to be replaced.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::Dple::getCount "[INTERNAL]  Get the reference
count.

";

%feature("docstring") casadi::Dple::jac_sx "[INTERNAL]  Jacobian
expression.

";

%feature("docstring") casadi::Dple::addDependency "[INTERNAL]  Add a
dependent function.

";

%feature("docstring") casadi::Dple::sz_arg "[INTERNAL]  Get required length
of arg field.

";

%feature("docstring") casadi::Dple::getPartition "[INTERNAL]  Get the
unidirectional or bidirectional partition.

";

%feature("docstring") casadi::Dple::simplifiedCall "[INTERNAL]  Use
simplified signature.

";

%feature("docstring") casadi::Dple::has_codegen "[INTERNAL]  Is codegen
supported?

";

%feature("docstring") casadi::Dple::self "[INTERNAL]  Get a public class
instance.

";

%feature("docstring") casadi::Dple::replaceAdjSeed "[INTERNAL]  Replace
0-by-0 reverse seeds.

";

%feature("docstring") casadi::Dple::get_name_in "[INTERNAL]  Names of
function input and outputs.

";

%feature("docstring") casadi::Dple::is_a "[INTERNAL]  Check if the function
is of a particular type.

";

%feature("docstring") casadi::Dple::has_free "[INTERNAL]  Does the function
have free variables.

";

%feature("docstring") casadi::Dple::nnz_in "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::Dple::tang_mx "[INTERNAL]  Tangent
expression.

";

%feature("docstring") casadi::Dple::index_in "[INTERNAL]  Get input scheme
index by name.

";

%feature("docstring") casadi::Dple::oracle "[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::Dple::jit_dependencies "[INTERNAL]   Jit
dependencies.

";

%feature("docstring") casadi::Dple::setup "[INTERNAL]  Set the (persistent
and temporary) work vectors.

";

%feature("docstring") casadi::Dple::alloc_res "[INTERNAL]  Ensure required
length of res field.

";

%feature("docstring") casadi::Dple::print_option "[INTERNAL]  Print all
information there is to know about a certain option.

";

%feature("docstring") casadi::Dple::_call "[INTERNAL]   Call a function,
overloaded.

";

%feature("docstring") casadi::Dple::size_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Dple::slice "[INTERNAL]  returns a new
function with a selection of inputs/outputs of the original

";

%feature("docstring") casadi::Dple::has_sprev "[INTERNAL]  Is the class
able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Dple::reverse "[INTERNAL]  Return function
that calculates adjoint derivatives reverse(nadj) returns a cached instance
if available, and calls  Function get_reverse(int nadj) if no cached version
is available.

";

%feature("docstring") casadi::Dple::getJacobian "[INTERNAL]  Return
Jacobian function.

";

%feature("docstring") casadi::Dple::sp_weight "[INTERNAL]  Weighting factor
for chosing forward/reverse mode, sparsity propagation.

";

%feature("docstring") casadi::Dple::sparsity_out "[INTERNAL]  Get sparsity
of a given output.

";

%feature("docstring") casadi::Dple::alloc_w "[INTERNAL]  Ensure required
length of w field.

";

%feature("docstring") casadi::Dple::alloc_arg "[INTERNAL]  Ensure required
length of arg field.

";

%feature("docstring") casadi::Dple::grad_sx "[INTERNAL]  Gradient
expression.

";

%feature("docstring") casadi::Dple::codegen_incref "[INTERNAL]  Codegen
incref for dependencies.

";

%feature("docstring") casadi::Dple::replaceRes "[INTERNAL]  Replace 0-by-0
outputs.

";

%feature("docstring") casadi::Dple::clear_memory "[INTERNAL]  Clear all
memory (called from destructor)

";

%feature("docstring") casadi::Dple::sx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Dple::tangent "[INTERNAL]  Return tangent
function.

";

%feature("docstring") casadi::Dple::verbose "[INTERNAL]  Verbose mode?

";

%feature("docstring") casadi::Dple::memory "[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::Dple::hasDerivative "[INTERNAL]  Can
derivatives be calculated in any way?

";

%feature("docstring") casadi::Dple::checkInputs "[INTERNAL]  Check if the
numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::Dple::set_jac_sparsity "[INTERNAL]  Generate
the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Dple::ad_weight "[INTERNAL]  Weighting factor
for chosing forward/reverse mode.

";

%feature("docstring") casadi::Dple::_eval "

>  void casadi::FunctionInternal::_eval(const double **arg, double **res, int *iw, double *w, int mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate numerically.

>  void casadi::FunctionInternal::_eval(const SXElem **arg, SXElem **res, int *iw, SXElem *w, int mem) const

>  void casadi::FunctionInternal::_eval(const bvec_t **arg, bvec_t **res, int *iw, bvec_t *w, int mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

%feature("docstring") casadi::Dple::~Dple "[INTERNAL] ";

%feature("docstring") casadi::Dple::numel_in "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::Dple::getAtomicInputReal "[INTERNAL]  Get the
floating point output argument of an atomic operation.

";

%feature("docstring") casadi::Dple::getAtomicOperation "[INTERNAL]  Get an
atomic operation operator index.

";

%feature("docstring") casadi::Dple::size1_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Dple::get_sparsity_out "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Dple::getAtomicInput "[INTERNAL]  Get the
(integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::Dple::size2_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Dple::mx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Dple::print_free "[INTERNAL]  Print free
variables.

";

%feature("docstring") casadi::Dple::generate_dependencies "[INTERNAL]
Export / Generate C code for the dependency function.

";

%feature("docstring") casadi::Dple::replaceArg "[INTERNAL]  Replace 0-by-0
inputs.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::Dple::n_mem "[INTERNAL]  Maximum number of
memory objects.

";

%feature("docstring") casadi::Dple::default_in "[INTERNAL]  Get default
input value.

";

%feature("docstring") casadi::Dple::numel_out "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::Dple::_setup "[INTERNAL]  Set the (persistent
and temporary) work vectors.

";

%feature("docstring") casadi::Dple::eval_mx "[INTERNAL]  Evaluate with
symbolic matrices.

";

%feature("docstring") casadi::Dple::simple "[INTERNAL]  Evaluate
numerically, simplied syntax.

";

%feature("docstring") casadi::Dple::weak "[INTERNAL]  Get a weak reference
to the object.

";

%feature("docstring") casadi::Dple::getJacSparsityHierarchical "[INTERNAL]
A flavor of getJacSparsity that does hierarchical block structure
recognition.

";

%feature("docstring") casadi::Dple::sz_iw "[INTERNAL]  Get required length
of iw field.

";

%feature("docstring") casadi::Dple::map_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::Dple::get_name_out "[INTERNAL]  Names of
function input and outputs.

";

%feature("docstring") casadi::Dple::getAtomicOutput "[INTERNAL]  Get the
(integer) output argument of an atomic operation.

";

%feature("docstring") casadi::Dple::alloc "[INTERNAL]  Ensure work vectors
long enough to evaluate function.

";

%feature("docstring") casadi::Dple::type_name "[INTERNAL]  Get type name.

";

%feature("docstring") casadi::Dple::generateDeclarations "[INTERNAL]
Generate code for the declarations of the C function.

";

%feature("docstring") casadi::Dple::mx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Dple::hessian "[INTERNAL]  Return Hessian
function.

";

%feature("docstring") casadi::Dple::finalize "[INTERNAL]  Finalize the
object creation This function, which visits the class hierarchy in reverse
order is run after init() has been completed.

";

%feature("docstring") casadi::Dple::jac_mx "[INTERNAL]  Jacobian
expression.

";

%feature("docstring") casadi::Dple::free_memory "[INTERNAL]  Free memory
block.

";

%feature("docstring") casadi::Dple::wrap "[INTERNAL]  Wrap in an Function
instance consisting of only one MX call.

";

%feature("docstring") casadi::Dple::generateBody "[INTERNAL]  Generate code
for the function body.

";

%feature("docstring") casadi::Dple::alloc_memory "[INTERNAL]  Create memory
block.

";

%feature("docstring") casadi::Dple::getJacSparsityHierarchicalSymm "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::Dple::checkRes "[INTERNAL]  Check if output
arguments have correct length and dimensions.

";

%feature("docstring") casadi::Dple::eval_name "[INTERNAL]  Get name of the
evaluation function.

";

%feature("docstring") casadi::Dple::generateFunction "[INTERNAL]  Generate
code the function.

";

%feature("docstring") casadi::Dple::init "[INTERNAL]  Initialize Initialize
and make the object ready for setting arguments and evaluation. This method
is typically called after setting options but before evaluating. If passed
to another class (in the constructor), this class should invoke this
function when initialized.

";

%feature("docstring") casadi::Dple::get_n_out "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::Dple::symbolicAdjSeed "[INTERNAL]  Symbolic
expressions for the adjoint seeds.

";

%feature("docstring") casadi::Dple::setJacobian "[INTERNAL]  Return
Jacobian function.

";

%feature("docstring") casadi::Dple::sp_rev "[INTERNAL]  Propagate sparsity
backwards.

";

%feature("docstring") casadi::Dple::codegen_name "[INTERNAL]  Get name in
codegen.

";

%feature("docstring") casadi::Dple::gradient "[INTERNAL]  Return gradient
function.

";

%feature("docstring") casadi::Dple::matchingRes "[INTERNAL]  Check if
output arguments that needs to be replaced.

";

%feature("docstring") casadi::Dple::signature "[INTERNAL]  Code generate
the function.

";

%feature("docstring") casadi::Dple::has_spfwd "[INTERNAL]  Is the class
able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Dple::getTangent "[INTERNAL]  Return tangent
function.

";

%feature("docstring") casadi::Dple::has_function "[INTERNAL] ";

%feature("docstring") casadi::Dple::hess_sx "[INTERNAL]  Hessian
expression.

";

%feature("docstring") casadi::Dple::get_n_reverse "[INTERNAL]  Generate a
function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::Dple::call_forward "[INTERNAL]  Forward mode
AD, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Dple::grad_mx "[INTERNAL]  Gradient
expression.

";

%feature("docstring") casadi::Dple::getJacSparsityGen "[INTERNAL]  Get the
sparsity pattern, forward mode.

";

%feature("docstring") casadi::Dple::init_memory "[INTERNAL]  Initalize
memory block.

";

%feature("docstring") casadi::Dple::sp_fwd "[INTERNAL]  Propagate sparsity
forward.

";

%feature("docstring") casadi::Dple::name_out "[INTERNAL]  Get output scheme
name by index.

";

%feature("docstring") casadi::Dple::jacobian "[INTERNAL]  Return Jacobian
function.

";

%feature("docstring") casadi::Dple::mapsum_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::Dple::get_n_in "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::Dple::free_mx "[INTERNAL]  Get free variables
( MX)

";

%feature("docstring") casadi::Dple::checkArg "[INTERNAL]  Check if input
arguments have correct length and dimensions.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::Dple::hasFullJacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";


// File: classcasadi_1_1Einstein.xml


// File: classcasadi_1_1Expm.xml
%feature("docstring") casadi::Expm::get_n_forward "[INTERNAL]  Generate a
function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::Expm::has_free "[INTERNAL]  Does the function
have free variables.

";

%feature("docstring") casadi::Expm::addDependency "[INTERNAL]  Add a
dependent function.

";

%feature("docstring") casadi::Expm::alloc_memory "[INTERNAL]  Create memory
block.

";

%feature("docstring") casadi::Expm::self "[INTERNAL]  Get a public class
instance.

";

%feature("docstring") casadi::Expm::hasDerivative "[INTERNAL]  Can
derivatives be calculated in any way?

";

%feature("docstring") casadi::Expm::plugin_name "[INTERNAL] ";

%feature("docstring") casadi::Expm::getAlgorithmSize "[INTERNAL]  Get the
number of atomic operations.

";

%feature("docstring") casadi::Expm::eval_sx "[INTERNAL]  Evaluate with
symbolic scalars.

";

%feature("docstring") casadi::Expm::size1_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Expm::size2_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Expm::sx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Expm::matchingRes "[INTERNAL]  Check if
output arguments that needs to be replaced.

";

%feature("docstring") casadi::Expm::alloc_w "[INTERNAL]  Ensure required
length of w field.

";

%feature("docstring") casadi::Expm::factory "[INTERNAL] ";

%feature("docstring") casadi::Expm::getTangent "[INTERNAL]  Return tangent
function.

";

%feature("docstring") casadi::Expm::log "

>  void casadi::FunctionInternal::log(const std::string &msg) const 
------------------------------------------------------------------------
[INTERNAL] 
Log the status of the solver.

>  void casadi::FunctionInternal::log(const std::string &fcn, const std::string &msg) const 
------------------------------------------------------------------------
[INTERNAL] 
Log the status of the solver, function given.

";

%feature("docstring") casadi::Expm::print_dimensions "[INTERNAL]  Print
dimensions of inputs and outputs.

";

%feature("docstring") casadi::Expm::has_sprev "[INTERNAL]  Is the class
able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Expm::alloc "[INTERNAL]  Ensure work vectors
long enough to evaluate function.

";

%feature("docstring") casadi::Expm::setJacobian "[INTERNAL]  Return
Jacobian function.

";

%feature("docstring") casadi::Expm::getAtomicInputReal "[INTERNAL]  Get the
floating point output argument of an atomic operation.

";

%feature("docstring") casadi::Expm::addShorthand "[INTERNAL]  Generate
shorthand macro.

";

%feature("docstring") casadi::Expm::fwdViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::Expm::sparsity_out "[INTERNAL]  Get sparsity
of a given output.

";

%feature("docstring") casadi::Expm::_get_stats "[INTERNAL]  Get all
statistics

";

%feature("docstring") casadi::Expm::get_name_in "[INTERNAL]  Names of
function input and outputs.

";

%feature("docstring") casadi::Expm::index_out "[INTERNAL]  Get output
scheme index by name.

";

%feature("docstring") casadi::Expm::free_sx "[INTERNAL]  Get free variables
(SX)

";

%feature("docstring") casadi::Expm::jit_dependencies "[INTERNAL]   Jit
dependencies.

";

%feature("docstring") casadi::Expm::Expm "[INTERNAL] ";

%feature("docstring") casadi::Expm::oracle "[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::Expm::_eval "

>  void casadi::FunctionInternal::_eval(const double **arg, double **res, int *iw, double *w, int mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate numerically.

>  void casadi::FunctionInternal::_eval(const SXElem **arg, SXElem **res, int *iw, SXElem *w, int mem) const

>  void casadi::FunctionInternal::_eval(const bvec_t **arg, bvec_t **res, int *iw, bvec_t *w, int mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

%feature("docstring") casadi::Expm::set_jac_sparsity "[INTERNAL]  Generate
the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Expm::get_n_in "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::Expm::size2_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Expm::name_in "[INTERNAL]  Get input scheme
name by index.

";

%feature("docstring") casadi::Expm::has_function "[INTERNAL] ";

%feature("docstring") casadi::Expm::checkInputs "[INTERNAL]  Check if the
numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::Expm::get_function "[INTERNAL] ";

%feature("docstring") casadi::Expm::type_name "[INTERNAL]  Get type name.

";

%feature("docstring") casadi::Expm::sp_weight "[INTERNAL]  Weighting factor
for chosing forward/reverse mode, sparsity propagation.

";

%feature("docstring") casadi::Expm::get_options "[INTERNAL]  Options.

";

%feature("docstring") casadi::Expm::fullJacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Expm::getCount "[INTERNAL]  Get the reference
count.

";

%feature("docstring") casadi::Expm::alloc_iw "[INTERNAL]  Ensure required
length of iw field.

";

%feature("docstring") casadi::Expm::call_reverse "[INTERNAL]  Reverse mode,
virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Expm::nnz_in "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::Expm::getGradient "[INTERNAL]  Return
gradient function.

";

%feature("docstring") casadi::Expm::checkArg "[INTERNAL]  Check if input
arguments have correct length and dimensions.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::Expm::forward "[INTERNAL]  Return function
that calculates forward derivatives forward(nfwd) returns a cached instance
if available, and calls  Function get_forward(int nfwd) if no cached version
is available.

";

%feature("docstring") casadi::Expm::numel_in "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::Expm::print "[INTERNAL]  Print.

";

%feature("docstring") casadi::Expm::numel_out "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::Expm::codegen_decref "[INTERNAL]  Codegen
decref for dependencies.

";

%feature("docstring") casadi::Expm::set_temp "[INTERNAL]  Set the
(temporary) work vectors.

";

%feature("docstring") casadi::Expm::jacobian "[INTERNAL]  Return Jacobian
function.

";

%feature("docstring") casadi::Expm::replaceFwdSeed "[INTERNAL]  Replace
0-by-0 forward seeds.

";

%feature("docstring") casadi::Expm::mapsum_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::Expm::wrap "[INTERNAL]  Wrap in an Function
instance consisting of only one MX call.

";

%feature("docstring") casadi::Expm::call "[INTERNAL]   Call a function,
templated.

";

%feature("docstring") casadi::Expm::adjViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::Expm::finalize "[INTERNAL]  Finalize the
object creation This function, which visits the class hierarchy in reverse
order is run after init() has been completed.

";

%feature("docstring") casadi::Expm::mx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Expm::index_in "[INTERNAL]  Get input scheme
index by name.

";

%feature("docstring") casadi::Expm::get_sparsity_in "[INTERNAL]  Sparsities
of function inputs and outputs.

";

%feature("docstring") casadi::Expm::free_memory "[INTERNAL]  Free memory
block.

";

%feature("docstring") casadi::Expm::tang_sx "[INTERNAL]  Tangent
expression.

";

%feature("docstring") casadi::Expm::init "[INTERNAL]  Initialize Initialize
and make the object ready for setting arguments and evaluation. This method
is typically called after setting options but before evaluating. If passed
to another class (in the constructor), this class should invoke this
function when initialized.

";

%feature("docstring") casadi::Expm::free_mx "[INTERNAL]  Get free variables
( MX)

";

%feature("docstring") casadi::Expm::matchingArg "[INTERNAL]  Check if input
arguments that needs to be replaced.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::Expm::hessian "[INTERNAL]  Return Hessian
function.

";

%feature("docstring") casadi::Expm::get_n_out "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::Expm::getPartition "[INTERNAL]  Get the
unidirectional or bidirectional partition.

";

%feature("docstring") casadi::Expm::setup "[INTERNAL]  Set the (persistent
and temporary) work vectors.

";

%feature("docstring") casadi::Expm::has_codegen "[INTERNAL]  Is codegen
supported?

";

%feature("docstring") casadi::Expm::generate_dependencies "[INTERNAL]
Export / Generate C code for the dependency function.

";

%feature("docstring") casadi::Expm::_set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::Expm::get_stats "[INTERNAL]  Get all
statistics

";

%feature("docstring") casadi::Expm::mx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Expm::sparsity_jac "[INTERNAL]  Get, if
necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Expm::generate_lifted "[INTERNAL]  Extract
the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::Expm::sz_iw "[INTERNAL]  Get required length
of iw field.

";

%feature("docstring") casadi::Expm::which_depends "[INTERNAL]  Which
variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::Expm::name_out "[INTERNAL]  Get output scheme
name by index.

";

%feature("docstring") casadi::Expm::alloc_arg "[INTERNAL]  Ensure required
length of arg field.

";

%feature("docstring") casadi::Expm::getAtomicOutput "[INTERNAL]  Get the
(integer) output argument of an atomic operation.

";

%feature("docstring") casadi::Expm::getAtomicInput "[INTERNAL]  Get the
(integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::Expm::grad_sx "[INTERNAL]  Gradient
expression.

";

%feature("docstring") casadi::Expm::sz_arg "[INTERNAL]  Get required length
of arg field.

";

%feature("docstring") casadi::Expm::jac_sx "[INTERNAL]  Jacobian
expression.

";

%feature("docstring") casadi::Expm::sz_w "[INTERNAL]  Get required length
of w field.

";

%feature("docstring") casadi::Expm::get_sparsity_out "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Expm::default_in "[INTERNAL]  Get default
input value.

";

%feature("docstring") casadi::Expm::gradient "[INTERNAL]  Return gradient
function.

";

%feature("docstring") casadi::Expm::size_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Expm::jac_mx "[INTERNAL]  Jacobian
expression.

";

%feature("docstring") casadi::Expm::_call "[INTERNAL]   Call a function,
overloaded.

";

%feature("docstring") casadi::Expm::has_spfwd "[INTERNAL]  Is the class
able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Expm::map_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::Expm::checkout "[INTERNAL]  Checkout a memory
object.

";

%feature("docstring") casadi::Expm::tangent "[INTERNAL]  Return tangent
function.

";

%feature("docstring") casadi::Expm::getJacobian "[INTERNAL]  Return
Jacobian function.

";

%feature("docstring") casadi::Expm::sz_res "[INTERNAL]  Get required length
of res field.

";

%feature("docstring") casadi::Expm::sp_fwd "[INTERNAL]  Propagate sparsity
forward.

";

%feature("docstring") casadi::Expm::sz_work "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") casadi::Expm::reverse "[INTERNAL]  Return function
that calculates adjoint derivatives reverse(nadj) returns a cached instance
if available, and calls  Function get_reverse(int nadj) if no cached version
is available.

";

%feature("docstring") casadi::Expm::hess_sx "[INTERNAL]  Hessian
expression.

";

%feature("docstring") casadi::Expm::eval_mx "[INTERNAL]  Evaluate with
symbolic matrices.

";

%feature("docstring") casadi::Expm::getJacSparsityGen "[INTERNAL]  Get the
sparsity pattern, forward mode.

";

%feature("docstring") casadi::Expm::get_forward "[INTERNAL]  Generate a
function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::Expm::call_forward "[INTERNAL]  Forward mode
AD, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Expm::sx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Expm::set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::Expm::replaceArg "[INTERNAL]  Replace 0-by-0
inputs.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::Expm::size_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Expm::generateBody "[INTERNAL]  Generate code
for the function body.

";

%feature("docstring") casadi::Expm::verbose "[INTERNAL]  Verbose mode?

";

%feature("docstring") casadi::Expm::getJacSparsityHierarchicalSymm "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::Expm "

Internal class.

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| const_A          | OT_BOOL         | Assume A is      | casadi::Expm     |
|                  |                 | constant.        |                  |
|                  |                 | Default: false.  |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Custom input     | casadi::Function |
|                  |                 | scheme           | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Custom output    | casadi::Function |
|                  |                 | scheme           | Internal         |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: expm_impl.hpp ";

%feature("docstring") casadi::Expm::size1_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Expm::symbolicOutput "[INTERNAL]  Get a
vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::Expm::sparsity_in "[INTERNAL]  Get sparsity
of a given input.

";

%feature("docstring") casadi::Expm::generateFunction "[INTERNAL]  Generate
code the function.

";

%feature("docstring") casadi::Expm::_setup "[INTERNAL]  Set the (persistent
and temporary) work vectors.

";

%feature("docstring") casadi::Expm::n_in "[INTERNAL]  Number of function
inputs and outputs.

";

%feature("docstring") casadi::Expm::n_nodes "[INTERNAL]  Number of nodes in
the algorithm.

";

%feature("docstring") casadi::Expm::print_free "[INTERNAL]  Print free
variables.

";

%feature("docstring") casadi::Expm::codegen_name "[INTERNAL]  Get name in
codegen.

";

%feature("docstring") casadi::Expm::checkRes "[INTERNAL]  Check if output
arguments have correct length and dimensions.

";

%feature("docstring") casadi::Expm::init_memory "[INTERNAL]  Initalize
memory block.

";

%feature("docstring") casadi::Expm::replaceAdjSeed "[INTERNAL]  Replace
0-by-0 reverse seeds.

";

%feature("docstring") casadi::Expm::hasFullJacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Expm::symbolicAdjSeed "[INTERNAL]  Symbolic
expressions for the adjoint seeds.

";

%feature("docstring") casadi::Expm::release "[INTERNAL]  Release a memory
object.

";

%feature("docstring") casadi::Expm::signature "[INTERNAL]  Code generate
the function.

";

%feature("docstring") casadi::Expm::generateDeclarations "[INTERNAL]
Generate code for the declarations of the C function.

";

%feature("docstring") casadi::Expm::tang_mx "[INTERNAL]  Tangent
expression.

";

%feature("docstring") casadi::Expm::getAtomicOperation "[INTERNAL]  Get an
atomic operation operator index.

";

%feature("docstring") casadi::Expm::replaceRes "[INTERNAL]  Replace 0-by-0
outputs.

";

%feature("docstring") casadi::Expm::getHessian "[INTERNAL]  Return Hessian
function.

";

%feature("docstring") casadi::Expm::getJacSparsity "[INTERNAL]  Generate
the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Expm::get_name_out "[INTERNAL]  Names of
function input and outputs.

";

%feature("docstring") casadi::Expm::n_mem "[INTERNAL]  Maximum number of
memory objects.

";

%feature("docstring") casadi::Expm::simplifiedCall "[INTERNAL]  Use
simplified signature.

";

%feature("docstring") casadi::Expm::name "[INTERNAL]  Name of the function.

";

%feature("docstring") casadi::Expm::eval_name "[INTERNAL]  Get name of the
evaluation function.

";

%feature("docstring") casadi::Expm::get_reverse "[INTERNAL]  Generate a
function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::Expm::n_out "[INTERNAL]  Number of function
inputs and outputs.

";

%feature("docstring") casadi::Expm::print_option "[INTERNAL]  Print all
information there is to know about a certain option.

";

%feature("docstring") casadi::Expm::weak "[INTERNAL]  Get a weak reference
to the object.

";

%feature("docstring") casadi::Expm::repr "[INTERNAL]  Print.

";

%feature("docstring") casadi::Expm::alloc_res "[INTERNAL]  Ensure required
length of res field.

";

%feature("docstring") casadi::Expm::construct "[INTERNAL]  Construct
Prepares the function for evaluation.

";

%feature("docstring") casadi::Expm::getJacSparsityHierarchical "[INTERNAL]
A flavor of getJacSparsity that does hierarchical block structure
recognition.

";

%feature("docstring") casadi::Expm::print_options "[INTERNAL]  Print list
of options.

";

%feature("docstring") casadi::Expm::ad_weight "[INTERNAL]  Weighting factor
for chosing forward/reverse mode.

";

%feature("docstring") casadi::Expm::eval "[INTERNAL]  Evaluate numerically.

";

%feature("docstring") casadi::Expm::grad_mx "[INTERNAL]  Gradient
expression.

";

%feature("docstring") casadi::Expm::simple "[INTERNAL]  Evaluate
numerically, simplied syntax.

";

%feature("docstring") casadi::Expm::get_n_reverse "[INTERNAL]  Generate a
function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::Expm::_set_temp "[INTERNAL]  Set the
(temporary) work vectors.

";

%feature("docstring") casadi::Expm::generateMeta "[INTERNAL]  Generate
meta-information allowing a user to evaluate a generated function.

";

%feature("docstring") casadi::Expm::~Expm "[INTERNAL] ";

%feature("docstring") casadi::Expm::codegen_incref "[INTERNAL]  Codegen
incref for dependencies.

";

%feature("docstring") casadi::Expm::nnz_out "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::Expm::sp_rev "[INTERNAL]  Propagate sparsity
backwards.

";

%feature("docstring") casadi::Expm::getAdaptorSolverName "[INTERNAL]
Obtain solver name from Adaptor.

";

%feature("docstring") casadi::Expm::slice "[INTERNAL]  returns a new
function with a selection of inputs/outputs of the original

";

%feature("docstring") casadi::Expm::is_a "[INTERNAL]  Check if the function
is of a particular type.

";

%feature("docstring") casadi::Expm::getFullJacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Expm::symbolicFwdSeed "[INTERNAL]  Symbolic
expressions for the forward seeds.

";

%feature("docstring") casadi::Expm::memory "[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::Expm::getWorkSize "[INTERNAL]  Get the length
of the work vector.

";

%feature("docstring") casadi::Expm::clear_memory "[INTERNAL]  Clear all
memory (called from destructor)

";


// File: classcasadi_1_1External.xml
%feature("docstring") casadi::External::call_reverse "[INTERNAL]  Reverse
mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::External::jacobian "[INTERNAL]  Return
Jacobian function.

";

%feature("docstring") casadi::External::call "[INTERNAL]   Call a function,
templated.

";

%feature("docstring") casadi::External::_call "[INTERNAL]   Call a
function, overloaded.

";

%feature("docstring") casadi::External::alloc_res "[INTERNAL]  Ensure
required length of res field.

";

%feature("docstring") casadi::External::sparsity_out "[INTERNAL]  Get
sparsity of a given output.

";

%feature("docstring") casadi::External::default_in "[INTERNAL]  Get default
input value.

";

%feature("docstring") casadi::External::alloc_arg "[INTERNAL]  Ensure
required length of arg field.

";

%feature("docstring") casadi::External::get_name_in "[INTERNAL]  Names of
function input and outputs.

";

%feature("docstring") casadi::External::codegen_decref "[INTERNAL]  Codegen
decref for dependencies.

";

%feature("docstring") casadi::External::mapsum_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::External::sx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::External::setJacobian "[INTERNAL]  Return
Jacobian function.

";

%feature("docstring") casadi::External::hasFullJacobian "[INTERNAL]  Full
Jacobian.

";

%feature("docstring") casadi::External::call_forward "[INTERNAL]  Forward
mode AD, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::External::sp_rev "[INTERNAL]  Propagate
sparsity backwards.

";

%feature("docstring") casadi::External::tang_mx "[INTERNAL]  Tangent
expression.

";

%feature("docstring") casadi::External::addShorthand "[INTERNAL]  Generate
shorthand macro.

";

%feature("docstring") casadi::External::matchingArg "[INTERNAL]  Check if
input arguments that needs to be replaced.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::External::replaceAdjSeed "[INTERNAL]  Replace
0-by-0 reverse seeds.

";

%feature("docstring") casadi::External::getWorkSize "[INTERNAL]  Get the
length of the work vector.

";

%feature("docstring") casadi::External::checkRes "[INTERNAL]  Check if
output arguments have correct length and dimensions.

";

%feature("docstring") casadi::External::index_out "[INTERNAL]  Get output
scheme index by name.

";

%feature("docstring") casadi::External::sparsity_in "[INTERNAL]  Get
sparsity of a given input.

";

%feature("docstring") casadi::External::sx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::External::sp_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode, sparsity propagation.

";

%feature("docstring") casadi::External::alloc "[INTERNAL]  Ensure work
vectors long enough to evaluate function.

";

%feature("docstring") casadi::External::getGradient "[INTERNAL]  Return
gradient function.

";

%feature("docstring") casadi::External::checkout "[INTERNAL]  Checkout a
memory object.

";

%feature("docstring") casadi::External::generateMeta "[INTERNAL]  Generate
meta-information allowing a user to evaluate a generated function.

";

%feature("docstring") casadi::External::size_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::External::set_jac_sparsity "[INTERNAL]
Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::External::checkArg "[INTERNAL]  Check if
input arguments have correct length and dimensions.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::External::getAdaptorSolverName "[INTERNAL]
Obtain solver name from Adaptor.

";

%feature("docstring") casadi::External::sz_arg "[INTERNAL]  Get required
length of arg field.

";

%feature("docstring") casadi::External::set_temp "[INTERNAL]  Set the
(temporary) work vectors.

";

%feature("docstring") casadi::External::codegen_name "[INTERNAL]  Get name
in codegen.

";

%feature("docstring") casadi::External::replaceRes "[INTERNAL]  Replace
0-by-0 outputs.

";

%feature("docstring") casadi::External::_get_stats "[INTERNAL]  Get all
statistics

";

%feature("docstring") casadi::External::is_a "[INTERNAL]  Check if the
function is of a particular type.

";

%feature("docstring") casadi::External::get_sparsity_out "[INTERNAL]  Get
sparsity of a given output.

";

%feature("docstring") casadi::External::get_reverse "[INTERNAL]  Reverse
mode derivatives.

";

%feature("docstring") casadi::External::print "[INTERNAL]  Print.

";

%feature("docstring") casadi::External::_setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";

%feature("docstring") casadi::External::factory "[INTERNAL] ";

%feature("docstring") casadi::External::self "[INTERNAL]  Get a public
class instance.

";

%feature("docstring") casadi::External::jac_mx "[INTERNAL]  Jacobian
expression.

";

%feature("docstring") casadi::External "[INTERNAL] C++ includes:
external_impl.hpp ";

%feature("docstring") casadi::External::has_free "[INTERNAL]  Does the
function have free variables.

";

%feature("docstring") casadi::External::getAtomicInput "[INTERNAL]  Get the
(integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::External::matchingRes "[INTERNAL]  Check if
output arguments that needs to be replaced.

";

%feature("docstring") casadi::External::symbolicAdjSeed "[INTERNAL]
Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::External::getJacobian "[INTERNAL]  Return
Jacobian function.

";

%feature("docstring") casadi::External::alloc_w "[INTERNAL]  Ensure
required length of w field.

";

%feature("docstring") casadi::External::getTangent "[INTERNAL]  Return
tangent function.

";

%feature("docstring") casadi::External::alloc_memory "[INTERNAL]  Create
memory block.

";

%feature("docstring") casadi::External::getAtomicOperation "[INTERNAL]  Get
an atomic operation operator index.

";

%feature("docstring") casadi::External::repr "[INTERNAL]  Print.

";

%feature("docstring") casadi::External::construct "[INTERNAL]  Construct
Prepares the function for evaluation.

";

%feature("docstring") casadi::External::generateBody "[INTERNAL]  Generate
code for the function body.

";

%feature("docstring") casadi::External::mx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::External::External "[INTERNAL]  Constructor.

";

%feature("docstring") casadi::External::getAlgorithmSize "[INTERNAL]  Get
the number of atomic operations.

";

%feature("docstring") casadi::External::print_options "[INTERNAL]  Print
list of options.

";

%feature("docstring") casadi::External::get_function "[INTERNAL] ";

%feature("docstring") casadi::External::set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::External::name "[INTERNAL]  Name of the
function.

";

%feature("docstring") casadi::External::type_name "[INTERNAL]  Get type
name.

";

%feature("docstring") casadi::External::n_in "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::External::reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::External::codegen_incref "[INTERNAL]  Codegen
incref for dependencies.

";

%feature("docstring") casadi::External::sz_w "[INTERNAL]  Get required
length of w field.

";

%feature("docstring") casadi::External::getAtomicInputReal "[INTERNAL]  Get
the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::External::size1_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::External::_eval "

>  void casadi::FunctionInternal::_eval(const double **arg, double **res, int *iw, double *w, int mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate numerically.

>  void casadi::FunctionInternal::_eval(const SXElem **arg, SXElem **res, int *iw, SXElem *w, int mem) const

>  void casadi::FunctionInternal::_eval(const bvec_t **arg, bvec_t **res, int *iw, bvec_t *w, int mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

%feature("docstring") casadi::External::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::External::generateDeclarations "[INTERNAL]
Generate code for the declarations of the C function.

";

%feature("docstring") casadi::External::has_function "[INTERNAL] ";

%feature("docstring") casadi::External::replaceFwdSeed "[INTERNAL]  Replace
0-by-0 forward seeds.

";

%feature("docstring") casadi::External::free_memory "[INTERNAL]  Free
memory block.

";

%feature("docstring") casadi::External::get_stats "[INTERNAL]  Get all
statistics

";

%feature("docstring") casadi::External::simple "[INTERNAL]  Evaluate
numerically, simplied syntax.

";

%feature("docstring") casadi::External::_set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::External::eval_name "[INTERNAL]  Get name of
the evaluation function.

";

%feature("docstring") casadi::External::get_n_forward "[INTERNAL]  Forward
mode derivatives.

";

%feature("docstring") casadi::External::init "[INTERNAL]  Initialize.

";

%feature("docstring") casadi::External::eval_mx "[INTERNAL]  Evaluate with
symbolic matrices.

";

%feature("docstring") casadi::External::index_in "[INTERNAL]  Get input
scheme index by name.

";

%feature("docstring") casadi::External::forward "[INTERNAL]  Return
function that calculates forward derivatives forward(nfwd) returns a cached
instance if available, and calls  Function get_forward(int nfwd) if no
cached version is available.

";

%feature("docstring") casadi::External::memory "[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::External::free_mx "[INTERNAL]  Get free
variables ( MX)

";

%feature("docstring") casadi::External::n_out "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::External::get_n_out "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::External::~External "[INTERNAL]  Destructor.

";

%feature("docstring") casadi::External::slice "[INTERNAL]  returns a new
function with a selection of inputs/outputs of the original

";

%feature("docstring") casadi::External::log "

>  void casadi::FunctionInternal::log(const std::string &msg) const 
------------------------------------------------------------------------
[INTERNAL] 
Log the status of the solver.

>  void casadi::FunctionInternal::log(const std::string &fcn, const std::string &msg) const 
------------------------------------------------------------------------
[INTERNAL] 
Log the status of the solver, function given.

";

%feature("docstring") casadi::External::sparsity_jac "[INTERNAL]  Get, if
necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::External::n_nodes "[INTERNAL]  Number of
nodes in the algorithm.

";

%feature("docstring") casadi::External::simplifiedCall "[INTERNAL]  Use
simplified signature.

";

%feature("docstring") casadi::External::getHessian "[INTERNAL]  Return
Hessian function.

";

%feature("docstring") casadi::External::name_out "[INTERNAL]  Get output
scheme name by index.

";

%feature("docstring") casadi::External::has_spfwd "[INTERNAL]  Is the class
able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::External::get_name_out "[INTERNAL]  Names of
function input and outputs.

";

%feature("docstring") casadi::External::getJacSparsity "[INTERNAL]
Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::External::replaceArg "[INTERNAL]  Replace
0-by-0 inputs.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::External::sz_res "[INTERNAL]  Get required
length of res field.

";

%feature("docstring") casadi::External::get_options "[INTERNAL]  Options.

";

%feature("docstring") casadi::External::name_in "[INTERNAL]  Get input
scheme name by index.

";

%feature("docstring") casadi::External::checkInputs "[INTERNAL]  Check if
the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::External::numel_in "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::External::release "[INTERNAL]  Release a
memory object.

";

%feature("docstring") casadi::External::n_mem "[INTERNAL]  Maximum number
of memory objects.

";

%feature("docstring") casadi::External::jac_sx "[INTERNAL]  Jacobian
expression.

";

%feature("docstring") casadi::External::print_option "[INTERNAL]  Print all
information there is to know about a certain option.

";

%feature("docstring") casadi::External::has_sprev "[INTERNAL]  Is the class
able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::External::symbolicOutput "[INTERNAL]  Get a
vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::External::getJacSparsityGen "[INTERNAL]  Get
the sparsity pattern, forward mode.

";

%feature("docstring") casadi::External::init_memory "[INTERNAL]  Initalize
memory block.

";

%feature("docstring") casadi::External::size_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::External::hessian "[INTERNAL]  Return Hessian
function.

";

%feature("docstring") casadi::External::get_n_in "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::External::has_codegen "[INTERNAL]  Is codegen
supported?

";

%feature("docstring") casadi::External::getPartition "[INTERNAL]  Get the
unidirectional or bidirectional partition.

";

%feature("docstring") casadi::External::mx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::External::getJacSparsityHierarchical "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::External::size2_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::External::signature "[INTERNAL]  Code
generate the function.

";

%feature("docstring") casadi::External::size1_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::External::alloc_iw "[INTERNAL]  Ensure
required length of iw field.

";

%feature("docstring") casadi::External::print_free "[INTERNAL]  Print free
variables.

";

%feature("docstring") casadi::External::free_sx "[INTERNAL]  Get free
variables (SX)

";

%feature("docstring") casadi::External::sz_work "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") casadi::External::jit_dependencies "[INTERNAL]   Jit
dependencies.

";

%feature("docstring") casadi::External::grad_mx "[INTERNAL]  Gradient
expression.

";

%feature("docstring") casadi::External::gradient "[INTERNAL]  Return
gradient function.

";

%feature("docstring") casadi::External::nnz_out "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::External::get_n_reverse "[INTERNAL]  Reverse
mode derivatives.

";

%feature("docstring") casadi::External::eval "[INTERNAL]  Evaluate
numerically.

";

%feature("docstring") casadi::External::generate_lifted "[INTERNAL]
Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::External::sp_fwd "[INTERNAL]  Propagate
sparsity forward.

";

%feature("docstring") casadi::External::numel_out "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::External::tangent "[INTERNAL]  Return tangent
function.

";

%feature("docstring") casadi::External::nnz_in "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::External::map_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::External::getFullJacobian "[INTERNAL]  Full
Jacobian.

";

%feature("docstring") casadi::External::finalize "[INTERNAL]  Finalize the
object creation This function, which visits the class hierarchy in reverse
order is run after init() has been completed.

";

%feature("docstring") casadi::External::size2_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::External::ad_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::External::adjViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::External::get_forward "[INTERNAL]  Forward
mode derivatives.

";

%feature("docstring") casadi::External::grad_sx "[INTERNAL]  Gradient
expression.

";

%feature("docstring") casadi::External::oracle "[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::External::generateFunction "[INTERNAL]
Generate code the function.

";

%feature("docstring") casadi::External::getJacSparsityHierarchicalSymm "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::External::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::External::which_depends "[INTERNAL]  Which
variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::External::symbolicFwdSeed "[INTERNAL]
Symbolic expressions for the forward seeds.

";

%feature("docstring") casadi::External::fullJacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::External::hasDerivative "[INTERNAL]  Can
derivatives be calculated in any way?

";

%feature("docstring") casadi::External::clear_memory "[INTERNAL]  Clear all
memory (called from destructor)

";

%feature("docstring") casadi::External::setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";

%feature("docstring") casadi::External::eval_sx "[INTERNAL]  Evaluate with
symbolic scalars.

";

%feature("docstring") casadi::External::addDependency "[INTERNAL]  Add a
dependent function.

";

%feature("docstring") casadi::External::hess_sx "[INTERNAL]  Hessian
expression.

";

%feature("docstring") casadi::External::getAtomicOutput "[INTERNAL]  Get
the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::External::sz_iw "[INTERNAL]  Get required
length of iw field.

";

%feature("docstring") casadi::External::verbose "[INTERNAL]  Verbose mode?

";

%feature("docstring") casadi::External::_set_temp "[INTERNAL]  Set the
(temporary) work vectors.

";

%feature("docstring") casadi::External::tang_sx "[INTERNAL]  Tangent
expression.

";

%feature("docstring") casadi::External::wrap "[INTERNAL]  Wrap in an
Function instance consisting of only one MX call.

";

%feature("docstring") casadi::External::print_dimensions "[INTERNAL]  Print
dimensions of inputs and outputs.

";

%feature("docstring") casadi::External::get_sparsity_in "[INTERNAL]  Get
sparsity of a given input.

";

%feature("docstring") casadi::External::fwdViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::External::generate_dependencies "[INTERNAL]
Export / Generate C code for the dependency function.

";


// File: classcasadi_1_1Factory.xml
%feature("docstring") casadi::Factory::has_in "[INTERNAL] ";

%feature("docstring") casadi::Factory::add_output "[INTERNAL] ";

%feature("docstring") casadi::Factory::calculate "[INTERNAL] ";

%feature("docstring") casadi::Factory::get_output "[INTERNAL] ";

%feature("docstring") casadi::Factory "[INTERNAL] C++ includes: factory.hpp
";

%feature("docstring") casadi::Factory::request_output "[INTERNAL] ";

%feature("docstring") casadi::Factory::get_input "[INTERNAL] ";

%feature("docstring") casadi::Factory::add_input "[INTERNAL] ";

%feature("docstring") casadi::Factory::has_out "[INTERNAL] ";

%feature("docstring") casadi::Factory::request_input "[INTERNAL] ";

%feature("docstring") casadi::Factory::name_out "[INTERNAL] ";

%feature("docstring") casadi::Factory::Factory "[INTERNAL] ";

%feature("docstring") casadi::Factory::name_in "[INTERNAL] ";


// File: classcasadi_1_1Find.xml


// File: classcasadi_1_1FixedStepIntegrator.xml
%feature("docstring") casadi::FixedStepIntegrator::grad_mx "[INTERNAL]
Gradient expression.

";

%feature("docstring") casadi::FixedStepIntegrator::fullJacobian "[INTERNAL]
Return Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::FixedStepIntegrator::alloc_iw "[INTERNAL]
Ensure required length of iw field.

";

%feature("docstring") casadi::FixedStepIntegrator::calc_function "[INTERNAL] ";

%feature("docstring") casadi::FixedStepIntegrator::jit_dependencies "[INTERNAL]  JIT for dependencies.

";

%feature("docstring") casadi::FixedStepIntegrator::aug_fwd "[INTERNAL]
Generate a augmented DAE system with nfwd forward sensitivities.

";

%feature("docstring") casadi::FixedStepIntegrator::generateFunction "[INTERNAL]  Generate code the function.

";

%feature("docstring") casadi::FixedStepIntegrator::z "[INTERNAL] ";

%feature("docstring") casadi::FixedStepIntegrator::default_in "[INTERNAL]
Get default input value.

";

%feature("docstring") casadi::FixedStepIntegrator::x "[INTERNAL] ";

%feature("docstring") casadi::FixedStepIntegrator::tangent "[INTERNAL]
Return tangent function.

";

%feature("docstring") casadi::FixedStepIntegrator::set_work "[INTERNAL]
Set the (persistent) work vectors.

";

%feature("docstring") casadi::FixedStepIntegrator::p "[INTERNAL] ";

%feature("docstring") casadi::FixedStepIntegrator::q "[INTERNAL] ";

%feature("docstring") casadi::FixedStepIntegrator::t "[INTERNAL] ";

%feature("docstring") casadi::FixedStepIntegrator::generateBody "[INTERNAL]
Generate code for the function body.

";

%feature("docstring") casadi::FixedStepIntegrator::print_free "[INTERNAL]
Print free variables.

";

%feature("docstring") casadi::FixedStepIntegrator::_get_stats "[INTERNAL]
Get all statistics

";

%feature("docstring") casadi::FixedStepIntegrator::hasFullJacobian "[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::FixedStepIntegrator::get_name_in "[INTERNAL]
Names of function input and outputs.

";

%feature("docstring") casadi::FixedStepIntegrator::codegen_decref "[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring") casadi::FixedStepIntegrator::sparsity_out "[INTERNAL]
Get sparsity of a given output.

";

%feature("docstring") casadi::FixedStepIntegrator::getFullJacobian "[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::FixedStepIntegrator::sz_w "[INTERNAL]  Get
required length of w field.

";

%feature("docstring") casadi::FixedStepIntegrator::codegen_name "[INTERNAL]
Get name in codegen.

";

%feature("docstring") casadi::FixedStepIntegrator::matchingArg "[INTERNAL]
Check if input arguments that needs to be replaced.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::FixedStepIntegrator::simplifiedCall "[INTERNAL]  Use simplified signature.

";

%feature("docstring") casadi::FixedStepIntegrator::getGradient "[INTERNAL]
Return gradient function.

";

%feature("docstring") casadi::FixedStepIntegrator::tang_mx "[INTERNAL]
Tangent expression.

";

%feature("docstring") casadi::FixedStepIntegrator::expand "[INTERNAL] ";

%feature("docstring") casadi::FixedStepIntegrator::getPartition "[INTERNAL]
Get the unidirectional or bidirectional partition.

";

%feature("docstring") casadi::FixedStepIntegrator::setJacobian "[INTERNAL]
Return Jacobian function.

";

%feature("docstring") casadi::FixedStepIntegrator::replaceArg "[INTERNAL]
Replace 0-by-0 inputs.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::FixedStepIntegrator::getJacSparsity "[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::FixedStepIntegrator::getAlgorithmSize "[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring") casadi::FixedStepIntegrator::get_reverse "[INTERNAL]
Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::FixedStepIntegrator::get_options "[INTERNAL]
Options.

";

%feature("docstring") casadi::FixedStepIntegrator::log "

>  void casadi::FunctionInternal::log(const std::string &msg) const 
------------------------------------------------------------------------
[INTERNAL] 
Log the status of the solver.

>  void casadi::FunctionInternal::log(const std::string &fcn, const std::string &msg) const 
------------------------------------------------------------------------
[INTERNAL] 
Log the status of the solver, function given.

";

%feature("docstring") casadi::FixedStepIntegrator::construct "[INTERNAL]
Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::FixedStepIntegrator::get_sparsity_out "[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::FixedStepIntegrator::size2_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::FixedStepIntegrator::sparsity_jac "[INTERNAL]
Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::FixedStepIntegrator::setStopTime "[INTERNAL]
Set stop time for the integration.

";

%feature("docstring") casadi::FixedStepIntegrator::sparsity_in "[INTERNAL]
Get sparsity of a given input.

";

%feature("docstring") casadi::FixedStepIntegrator::sz_iw "[INTERNAL]  Get
required length of iw field.

";

%feature("docstring") casadi::FixedStepIntegrator::fwdViaJac "[INTERNAL]
Calculate derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::FixedStepIntegrator::getAtomicOutput "[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::FixedStepIntegrator::call "[INTERNAL]   Call
a function, templated.

";

%feature("docstring") casadi::FixedStepIntegrator::getAtomicOperation "[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring") casadi::FixedStepIntegrator::clear_memory "[INTERNAL]
Clear all memory (called from destructor)

";

%feature("docstring") casadi::FixedStepIntegrator::sx_out "[INTERNAL]  Get
function input(s) and output(s)

";

%feature("docstring") casadi::FixedStepIntegrator::get_n_reverse "[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::FixedStepIntegrator::hess_sx "[INTERNAL]
Hessian expression.

";

%feature("docstring") casadi::FixedStepIntegrator::resetB "[INTERNAL]
Reset the backward problem and take time to tf.

";

%feature("docstring") casadi::FixedStepIntegrator::init_memory "[INTERNAL]
Initalize memory block.

";

%feature("docstring") casadi::FixedStepIntegrator::_call "[INTERNAL]   Call
a function, overloaded.

";

%feature("docstring") casadi::FixedStepIntegrator::alloc_memory "[INTERNAL]
Create memory block.

";

%feature("docstring") casadi::FixedStepIntegrator::slice "[INTERNAL]
returns a new function with a selection of inputs/outputs of the original

";

%feature("docstring") casadi::FixedStepIntegrator::memory "[INTERNAL]
Memory objects.

";

%feature("docstring") casadi::FixedStepIntegrator::alloc_w "[INTERNAL]
Ensure required length of w field.

";

%feature("docstring") casadi::FixedStepIntegrator::~FixedStepIntegrator "[INTERNAL]  Destructor.

";

%feature("docstring") casadi::FixedStepIntegrator::getAtomicInput "[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::FixedStepIntegrator::jac_sx "[INTERNAL]
Jacobian expression.

";

%feature("docstring") casadi::FixedStepIntegrator::mx_in "[INTERNAL]  Get
function input(s) and output(s)

";

%feature("docstring") casadi::FixedStepIntegrator::advance "[INTERNAL]
Advance solution in time.

";

%feature("docstring") casadi::FixedStepIntegrator::_set_work "[INTERNAL]
Set the (persistent) work vectors.

";

%feature("docstring") casadi::FixedStepIntegrator::reverse "[INTERNAL]
Return function that calculates adjoint derivatives reverse(nadj) returns a
cached instance if available, and calls  Function get_reverse(int nadj) if
no cached version is available.

";

%feature("docstring") casadi::FixedStepIntegrator::checkRes "[INTERNAL]
Check if output arguments have correct length and dimensions.

";

%feature("docstring") casadi::FixedStepIntegrator::addDependency "[INTERNAL]  Add a dependent function.

";

%feature("docstring") casadi::FixedStepIntegrator::set_jac_sparsity "[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::FixedStepIntegrator::which_depends "[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::FixedStepIntegrator::size_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::FixedStepIntegrator::nnz_in "[INTERNAL]
Number of input/output nonzeros.

";

%feature("docstring") casadi::FixedStepIntegrator::map_mx "[INTERNAL]
Parallel evaluation.

";

%feature("docstring") casadi::FixedStepIntegrator::get_name_out "[INTERNAL]
Names of function input and outputs.

";

%feature("docstring") casadi::FixedStepIntegrator::self "[INTERNAL]  Get a
public class instance.

";

%feature("docstring") casadi::FixedStepIntegrator::getJacobian "[INTERNAL]
Return Jacobian function.

";

%feature("docstring") casadi::FixedStepIntegrator::numel_out "[INTERNAL]
Number of input/output elements.

";

%feature("docstring") casadi::FixedStepIntegrator::get_n_forward "[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::FixedStepIntegrator::has_free "[INTERNAL]
Does the function have free variables.

";

%feature("docstring") casadi::FixedStepIntegrator::eval_mx "[INTERNAL]
Evaluate with symbolic matrices.

";

%feature("docstring") casadi::FixedStepIntegrator::print_dimensions "[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::FixedStepIntegrator::simple "[INTERNAL]
Evaluate numerically, simplied syntax.

";

%feature("docstring") casadi::FixedStepIntegrator::retreat "[INTERNAL]
Retreat solution in time.

";

%feature("docstring") casadi::FixedStepIntegrator::eval_name "[INTERNAL]
Get name of the evaluation function.

";

%feature("docstring") casadi::FixedStepIntegrator::repr "[INTERNAL]  Print.

";

%feature("docstring") casadi::FixedStepIntegrator::factory "[INTERNAL] ";

%feature("docstring") casadi::FixedStepIntegrator::sx_in "[INTERNAL]  Get
function input(s) and output(s)

";

%feature("docstring") casadi::FixedStepIntegrator::type_name "[INTERNAL]
Get type name.

";

%feature("docstring") casadi::FixedStepIntegrator::alloc "[INTERNAL]
Ensure work vectors long enough to evaluate function.

";

%feature("docstring") casadi::FixedStepIntegrator::nnz_out "[INTERNAL]
Number of input/output nonzeros.

";

%feature("docstring") casadi::FixedStepIntegrator::free_mx "[INTERNAL]  Get
free variables ( MX)

";

%feature("docstring") casadi::FixedStepIntegrator::getHessian "[INTERNAL]
Return Hessian function.

";

%feature("docstring") casadi::FixedStepIntegrator::finalize "[INTERNAL]
Finalize initialization.

";

%feature("docstring") casadi::FixedStepIntegrator::eval_sx "[INTERNAL]
Evaluate with symbolic scalars.

";

%feature("docstring") casadi::FixedStepIntegrator::n_in "[INTERNAL]  Number
of function inputs and outputs.

";

%feature("docstring") casadi::FixedStepIntegrator::generate_lifted "[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::FixedStepIntegrator::_setup "[INTERNAL]  Set
the (persistent and temporary) work vectors.

";

%feature("docstring") casadi::FixedStepIntegrator::setupFG "[INTERNAL]
Setup F and G.

";

%feature("docstring") casadi::FixedStepIntegrator::forward "[INTERNAL]
Return function that calculates forward derivatives forward(nfwd) returns a
cached instance if available, and calls  Function get_forward(int nfwd) if
no cached version is available.

";

%feature("docstring") casadi::FixedStepIntegrator::generate_dependencies "[INTERNAL]  Export / Generate C code for the generated functions.

";

%feature("docstring") casadi::FixedStepIntegrator::create_function "[INTERNAL]  Create an oracle function

";

%feature("docstring") casadi::FixedStepIntegrator::_set_temp "[INTERNAL]
Set the (temporary) work vectors.

";

%feature("docstring") casadi::FixedStepIntegrator::has_codegen "[INTERNAL]
Is codegen supported?

";

%feature("docstring") casadi::FixedStepIntegrator::sp_weight "[INTERNAL]
Weighting factor for chosing forward/reverse mode, sparsity propagation.

";

%feature("docstring") casadi::FixedStepIntegrator::replaceFwdSeed "[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring") casadi::FixedStepIntegrator::init "[INTERNAL]
Initialize stage.

";

%feature("docstring") casadi::FixedStepIntegrator::sp_jac_rdae "[INTERNAL]
Create sparsity pattern of the extended Jacobian (backward problem)

";

%feature("docstring") casadi::FixedStepIntegrator::print_option "[INTERNAL]
Print all information there is to know about a certain option.

";

%feature("docstring") casadi::FixedStepIntegrator::FixedStepIntegrator "[INTERNAL]  Constructor.

";

%feature("docstring") casadi::FixedStepIntegrator::sp_rev "[INTERNAL]
Propagate sparsity backwards.

";

%feature("docstring") casadi::FixedStepIntegrator::get_stats "[INTERNAL]
Get all statistics.

";

%feature("docstring") casadi::FixedStepIntegrator::get_sparsity_in "[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::FixedStepIntegrator::gradient "[INTERNAL]
Return gradient function.

";

%feature("docstring") casadi::FixedStepIntegrator::replaceAdjSeed "[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring") casadi::FixedStepIntegrator::print_options "[INTERNAL]  Print list of options.

";

%feature("docstring") casadi::FixedStepIntegrator::weak "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring") casadi::FixedStepIntegrator::numel_in "[INTERNAL]
Number of input/output elements.

";

%feature("docstring") casadi::FixedStepIntegrator::free_sx "[INTERNAL]  Get
free variables (SX)

";

%feature("docstring") casadi::FixedStepIntegrator::name_out "[INTERNAL]
Get output scheme name by index.

";

%feature("docstring") casadi::FixedStepIntegrator::n_mem "[INTERNAL]
Maximum number of memory objects.

";

%feature("docstring") casadi::FixedStepIntegrator::getAdaptorSolverName "[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring") casadi::FixedStepIntegrator "

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| augmented_option | OT_DICT         | Options to be    | casadi::FixedSte |
| s                |                 | passed down to   | pIntegrator      |
|                  |                 | the augmented    |                  |
|                  |                 | integrator, if   |                  |
|                  |                 | one is           |                  |
|                  |                 | constructed.     |                  |
+------------------+-----------------+------------------+------------------+
| common_options   | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | auto-generated   | nction           |
|                  |                 | functions        |                  |
+------------------+-----------------+------------------+------------------+
| expand           | OT_BOOL         | Replace MX with  | casadi::FixedSte |
|                  |                 | SX expressions   | pIntegrator      |
|                  |                 | in problem       |                  |
|                  |                 | formulation      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| grid             | OT_DOUBLEVECTOR | Time grid        | casadi::FixedSte |
|                  |                 |                  | pIntegrator      |
+------------------+-----------------+------------------+------------------+
| monitor          | OT_STRINGVECTOR | Set of user      | casadi::OracleFu |
|                  |                 | problem          | nction           |
|                  |                 | functions to be  |                  |
|                  |                 | monitored        |                  |
+------------------+-----------------+------------------+------------------+
| number_of_finite | OT_INT          | Number of finite | casadi::FixedSte |
| _elements        |                 | elements         | pIntegrator      |
+------------------+-----------------+------------------+------------------+
| output_t0        | OT_BOOL         | Output the state | casadi::FixedSte |
|                  |                 | at the initial   | pIntegrator      |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| print_stats      | OT_BOOL         | Print out        | casadi::FixedSte |
|                  |                 | statistics after | pIntegrator      |
|                  |                 | integration      |                  |
+------------------+-----------------+------------------+------------------+
| rootfinder       | OT_STRING       | An implicit      | casadi::FixedSte |
|                  |                 | function solver  | pIntegrator      |
+------------------+-----------------+------------------+------------------+
| rootfinder_optio | OT_DICT         | Options to be    | casadi::FixedSte |
| ns               |                 | passed to the    | pIntegrator      |
|                  |                 | NLP Solver       |                  |
+------------------+-----------------+------------------+------------------+
| specific_options | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | specific auto-   | nction           |
|                  |                 | generated        |                  |
|                  |                 | functions,       |                  |
|                  |                 | overwriting the  |                  |
|                  |                 | defaults from    |                  |
|                  |                 | common_options.  |                  |
|                  |                 | Nested           |                  |
|                  |                 | dictionary.      |                  |
+------------------+-----------------+------------------+------------------+
| t0               | OT_DOUBLE       | Beginning of the | casadi::FixedSte |
|                  |                 | time horizon     | pIntegrator      |
+------------------+-----------------+------------------+------------------+
| tf               | OT_DOUBLE       | End of the time  | casadi::FixedSte |
|                  |                 | horizon          | pIntegrator      |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: integrator_impl.hpp ";

%feature("docstring") casadi::FixedStepIntegrator::getTangent "[INTERNAL]
Return tangent function.

";

%feature("docstring") casadi::FixedStepIntegrator::mapsum_mx "[INTERNAL]
Parallel evaluation.

";

%feature("docstring") casadi::FixedStepIntegrator::monitored "[INTERNAL] ";

%feature("docstring") casadi::FixedStepIntegrator::alloc_arg "[INTERNAL]
Ensure required length of arg field.

";

%feature("docstring") casadi::FixedStepIntegrator::codegen_incref "[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring") casadi::FixedStepIntegrator::call_forward "[INTERNAL]
Forward mode AD, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::FixedStepIntegrator::setup "[INTERNAL]  Set
the (persistent and temporary) work vectors.

";

%feature("docstring") casadi::FixedStepIntegrator::eval "[INTERNAL]
evaluate

";

%feature("docstring") casadi::FixedStepIntegrator::signature "[INTERNAL]
Code generate the function.

";

%feature("docstring") casadi::FixedStepIntegrator::aug_adj "[INTERNAL]
Generate a augmented DAE system with nadj adjoint sensitivities.

";

%feature("docstring") casadi::FixedStepIntegrator::size1_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::FixedStepIntegrator::symbolicAdjSeed "[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::FixedStepIntegrator::print "[INTERNAL]
Print.

";

%feature("docstring") casadi::FixedStepIntegrator::n_nodes "[INTERNAL]
Number of nodes in the algorithm.

";

%feature("docstring") casadi::FixedStepIntegrator::index_out "[INTERNAL]
Get output scheme index by name.

";

%feature("docstring") casadi::FixedStepIntegrator::checkArg "[INTERNAL]
Check if input arguments have correct length and dimensions.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::FixedStepIntegrator::addShorthand "[INTERNAL]
Generate shorthand macro.

";

%feature("docstring")
casadi::FixedStepIntegrator::getJacSparsityHierarchicalSymm "[INTERNAL]  A
flavor of getJacSparsity that does hierarchical block structure recognition
for symmetric Jacobians

";

%feature("docstring") casadi::FixedStepIntegrator::getCount "[INTERNAL]
Get the reference count.

";

%feature("docstring") casadi::FixedStepIntegrator::sz_res "[INTERNAL]  Get
required length of res field.

";

%feature("docstring") casadi::FixedStepIntegrator::sz_work "[INTERNAL]  Get
number of temporary variables needed.

";

%feature("docstring") casadi::FixedStepIntegrator::get_forward "[INTERNAL]
Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::FixedStepIntegrator::sp_jac_dae "[INTERNAL]
Create sparsity pattern of the extended Jacobian (forward problem)

";

%feature("docstring") casadi::FixedStepIntegrator::symbolicFwdSeed "[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring") casadi::FixedStepIntegrator::n_out "[INTERNAL]
Number of function inputs and outputs.

";

%feature("docstring") casadi::FixedStepIntegrator::index_in "[INTERNAL]
Get input scheme index by name.

";

%feature("docstring") casadi::FixedStepIntegrator::sp_fwd "[INTERNAL]
Propagate sparsity forward.

";

%feature("docstring") casadi::FixedStepIntegrator::hessian "[INTERNAL]
Return Hessian function.

";

%feature("docstring") casadi::FixedStepIntegrator::ad_weight "[INTERNAL]
Weighting factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::FixedStepIntegrator::name_in "[INTERNAL]  Get
input scheme name by index.

";

%feature("docstring") casadi::FixedStepIntegrator::_eval "

>  void casadi::FunctionInternal::_eval(const double **arg, double **res, int *iw, double *w, int mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate numerically.

>  void casadi::FunctionInternal::_eval(const SXElem **arg, SXElem **res, int *iw, SXElem *w, int mem) const

>  void casadi::FunctionInternal::_eval(const bvec_t **arg, bvec_t **res, int *iw, bvec_t *w, int mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

%feature("docstring") casadi::FixedStepIntegrator::getJacSparsityGen "[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring") casadi::FixedStepIntegrator::getExplicitB "[INTERNAL]
Get explicit dynamics (backward problem)

";

%feature("docstring") casadi::FixedStepIntegrator::symbolicOutput "[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::FixedStepIntegrator::checkInputs "[INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::FixedStepIntegrator::getExplicit "[INTERNAL]
Get explicit dynamics.

";

%feature("docstring") casadi::FixedStepIntegrator::oracle "[INTERNAL]  Get
oracle.

";

%feature("docstring") casadi::FixedStepIntegrator::size1_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::FixedStepIntegrator::jac_mx "[INTERNAL]
Jacobian expression.

";

%feature("docstring") casadi::FixedStepIntegrator::adjViaJac "[INTERNAL]
Calculate derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::FixedStepIntegrator::sz_arg "[INTERNAL]  Get
required length of arg field.

";

%feature("docstring") casadi::FixedStepIntegrator::reset "[INTERNAL]  Reset
the forward problem.

";

%feature("docstring") casadi::FixedStepIntegrator::checkout "[INTERNAL]
Checkout a memory object.

";

%feature("docstring") casadi::FixedStepIntegrator::print_fstats "[INTERNAL]
Print statistics.

";

%feature("docstring") casadi::FixedStepIntegrator::release "[INTERNAL]
Release a memory object.

";

%feature("docstring") casadi::FixedStepIntegrator::verbose "[INTERNAL]
Verbose mode?

";

%feature("docstring") casadi::FixedStepIntegrator::getAtomicInputReal "[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::FixedStepIntegrator::set_temp "[INTERNAL]
Set the work vectors.

";

%feature("docstring") casadi::FixedStepIntegrator::call_reverse "[INTERNAL]
Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::FixedStepIntegrator::print_stats "[INTERNAL]
Print solver statistics.

";

%feature("docstring") casadi::FixedStepIntegrator::hasDerivative "[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring") casadi::FixedStepIntegrator::size2_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring")
casadi::FixedStepIntegrator::getJacSparsityHierarchical "[INTERNAL]  A
flavor of getJacSparsity that does hierarchical block structure recognition.

";

%feature("docstring") casadi::FixedStepIntegrator::replaceRes "[INTERNAL]
Replace 0-by-0 outputs.

";

%feature("docstring") casadi::FixedStepIntegrator::size_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::FixedStepIntegrator::jacobian "[INTERNAL]
Return Jacobian function.

";

%feature("docstring") casadi::FixedStepIntegrator::has_sprev "[INTERNAL]
Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::FixedStepIntegrator::mx_out "[INTERNAL]  Get
function input(s) and output(s)

";

%feature("docstring") casadi::FixedStepIntegrator::get_function "[INTERNAL]
";

%feature("docstring") casadi::FixedStepIntegrator::has_spfwd "[INTERNAL]
Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::FixedStepIntegrator::tang_sx "[INTERNAL]
Tangent expression.

";

%feature("docstring") casadi::FixedStepIntegrator::name "[INTERNAL]  Name
of the function.

";

%feature("docstring") casadi::FixedStepIntegrator::get_n_in "[INTERNAL]
Number of function inputs and outputs.

";

%feature("docstring") casadi::FixedStepIntegrator::alloc_res "[INTERNAL]
Ensure required length of res field.

";

%feature("docstring") casadi::FixedStepIntegrator::has_function "[INTERNAL]
";

%feature("docstring") casadi::FixedStepIntegrator::free_memory "[INTERNAL]
Free memory block.

";

%feature("docstring") casadi::FixedStepIntegrator::wrap "[INTERNAL]  Wrap
in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::FixedStepIntegrator::grad_sx "[INTERNAL]
Gradient expression.

";

%feature("docstring") casadi::FixedStepIntegrator::getWorkSize "[INTERNAL]
Get the length of the work vector.

";

%feature("docstring") casadi::FixedStepIntegrator::set_function "[INTERNAL]
Register the function for evaluation and statistics gathering

";

%feature("docstring") casadi::FixedStepIntegrator::generateDeclarations "[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring") casadi::FixedStepIntegrator::matchingRes "[INTERNAL]
Check if output arguments that needs to be replaced.

";

%feature("docstring") casadi::FixedStepIntegrator::plugin_name "[INTERNAL]
";

%feature("docstring") casadi::FixedStepIntegrator::is_a "[INTERNAL]  Check
if the function is of a particular type.

";

%feature("docstring") casadi::FixedStepIntegrator::generateMeta "[INTERNAL]
Generate meta-information allowing a user to evaluate a generated function.

";

%feature("docstring") casadi::FixedStepIntegrator::get_n_out "[INTERNAL]
Number of function inputs and outputs.

";

%feature("docstring") casadi::FixedStepIntegrator::rx "[INTERNAL] ";

%feature("docstring") casadi::FixedStepIntegrator::rz "[INTERNAL] ";

%feature("docstring") casadi::FixedStepIntegrator::getDerivativeOptions "[INTERNAL]  Set solver specific options to generated augmented integrators.

";

%feature("docstring") casadi::FixedStepIntegrator::rq "[INTERNAL] ";

%feature("docstring") casadi::FixedStepIntegrator::rp "[INTERNAL] ";


// File: classcasadi_1_1FStats.xml
%feature("docstring") casadi::FStats::tic "[INTERNAL]  Start timing.

";

%feature("docstring") casadi::FStats::reset "[INTERNAL]  Reset the
statistics.

";

%feature("docstring") casadi::FStats::FStats "[INTERNAL]  Constructor.

";

%feature("docstring") casadi::FStats "[INTERNAL]  Timer class

FStats hack; hack.tic(); .... hack.toc();

C++ includes: timing.hpp ";

%feature("docstring") casadi::FStats::toc "[INTERNAL]  Stop timing.

";


// File: classcasadi_1_1Function.xml
%feature("docstring") casadi::Function::repr "

Print a representation of the object.

";

%feature("docstring") casadi::Function::gradient "

[DEPRECATED] Use Function::factory instead

";

%feature("docstring") casadi::Function::nnz_in "

Get number of input nonzeros.

For a particular input or for all of the inputs

";

%feature("docstring") casadi::Function::sz_res "[INTERNAL]  Get required
length of res field.

";

%feature("docstring") casadi::Function::name "

Name of the function.

";

%feature("docstring") casadi::Function::checkInputs "[INTERNAL]  Check if
the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::Function::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::Function::jacobian "

>  Function casadi::Function::jacobian(int iind=0, int oind=0, bool compact=false, bool symmetric=false)
------------------------------------------------------------------------

[DEPRECATED] Alias of Function::jacobian_old This function is of internal
character and should be avoided, if possible. The preferred way is to use
unction::factory instead. This function will change behavior in the next
version of CasADi.

>  Function casadi::Function::jacobian(const std::string &iind, int oind=0, bool compact=false, bool symmetric=false)

>  Function casadi::Function::jacobian(int iind, const std::string &oind, bool compact=false, bool symmetric=false)

>  Function casadi::Function::jacobian(const std::string &iind, const std::string &oind, bool compact=false, bool symmetric=false)
------------------------------------------------------------------------
[INTERNAL] 
Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output Legacy function: To be deprecated in a future
version of CasADi. Exists only for compatibility with Function::jacobian
pre-CasADi 3.2

";

%feature("docstring") casadi::Function::stats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::Function::setFullJacobian "

[DEPRECATED] Set the Jacobian of all the input nonzeros with respect to all
output nonzeros NOTE: Does not take ownership, only weak references to the
Jacobian are kept internally

";

%feature("docstring") casadi::Function::sparsity_out "

Get sparsity of a given output.

";

%feature("docstring") casadi::Function::oracle "

Get oracle.

";

%feature("docstring") casadi::Function::wrap "

Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::Function::getAtomicOperation "

Get an atomic operation operator index.

";

%feature("docstring") casadi::Function::spCanEvaluate "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::Function::getAlgorithmSize "

Get the number of atomic operations.

";

%feature("docstring") casadi::Function::numel_out "

Get number of output elements.

For a particular output or for all of the outputs

";

%feature("docstring") casadi::Function::print_dimensions "

Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::Function::__hash__ "

Returns a number that is unique for a given Node. If the Object does not
point to any node, \"0\" is returned.

";

%feature("docstring") casadi::Function::name_out "

>  std::vector<std::string> casadi::Function::name_out() const 
------------------------------------------------------------------------

Get output scheme.

>  std::string casadi::Function::name_out(int ind) const 
------------------------------------------------------------------------

Get output scheme name by index.

";

%feature("docstring") casadi::Function::n_in "

Get the number of function inputs.

";

%feature("docstring") casadi::Function::mx_out "

Get symbolic primitives equivalent to the output expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring") casadi::Function::generate_dependencies "

Export / Generate C code for the dependency function.

";

%feature("docstring") casadi::Function::free_sx "

Get all the free variables of the function.

";

%feature("docstring") casadi::Function::mapaccum "

Create a mapaccumulated version of this function.

Suppose the function has a signature of:

::

     f: (x, u) -> (x_next , y )
  



The the mapaccumulated version has the signature:

::

     F: (x0, U) -> (X , Y )
  
      with
          U: horzcat([u0, u1, ..., u_(N-1)])
          X: horzcat([x1, x2, ..., x_N])
          Y: horzcat([y0, y1, ..., y_(N-1)])
  
      and
          x1, y0 <- f(x0, u0)
          x2, y1 <- f(x1, u1)
          ...
          x_N, y_(N-1) <- f(x_(N-1), u_(N-1))
  



";

%feature("docstring") casadi::Function::Function "

>  casadi::Function::Function(const std::string &name, const std::vector< SX > &arg, const std::vector< SX > &res, const Dict &opts=Dict())

>  casadi::Function::Function(const std::string &name, const std::vector< SX > &arg, const std::vector< SX > &res, const std::vector< std::string > &argn, const std::vector< std::string > &resn, const Dict &opts=Dict())

>  casadi::Function::Function(const std::string &name, const std::map< std::string, SX > &dict, const std::vector< std::string > &argn, const std::vector< std::string > &resn, const Dict &opts=Dict())
------------------------------------------------------------------------

Construct an SX function.

>  casadi::Function::Function(const std::string &name, const std::vector< MX > &arg, const std::vector< MX > &res, const Dict &opts=Dict())

>  casadi::Function::Function(const std::string &name, const std::vector< MX > &arg, const std::vector< MX > &res, const std::vector< std::string > &argn, const std::vector< std::string > &resn, const Dict &opts=Dict())

>  casadi::Function::Function(const std::string &name, const std::map< std::string, MX > &dict, const std::vector< std::string > &argn, const std::vector< std::string > &resn, const Dict &opts=Dict())
------------------------------------------------------------------------

Construct an MX function.

>  casadi::Function::Function()
------------------------------------------------------------------------

Default constructor, null pointer.

>  casadi::Function::Function(const std::string &fname)
------------------------------------------------------------------------

Construct from a file.

";

%feature("docstring") casadi::Function::type_name "

Get type name.

";

%feature("docstring") casadi::Function::numel_in "

Get number of input elements.

For a particular input or for all of the inputs

";

%feature("docstring") casadi::Function::get_function "";

%feature("docstring") casadi::Function::is_null "

Is a null pointer?

";

%feature("docstring") casadi::Function::forward "

Get a function that calculates nfwd forward derivatives.

Returns a function with n_in + n_out + n_in inputs and nfwd outputs. The
first n_in inputs correspond to nondifferentiated inputs. The next n_out
inputs correspond to nondifferentiated outputs. and the last n_in inputs
correspond to forward seeds, stacked horizontally The n_out outputs
correspond to forward sensitivities, stacked horizontally. * (n_in = n_in(),
n_out = n_out())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::Function::n_out "

Get the number of function outputs.

";

%feature("docstring") casadi::Function::getAtomicInput "

Get the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::Function::index_in "

Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLPSOL_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::Function::assert_size_out "

Assert that an output dimension is equal so some given value.

";

%feature("docstring") casadi::Function::~Function "

To resolve ambiguity on some compilers.

Destructor

";

%feature("docstring") casadi::Function::index_out "

Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLPSOL_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::Function::free_mx "

Get all the free variables of the function.

";

%feature("docstring") casadi::Function::size_out "

Get output dimension.

";

%feature("docstring") casadi::Function::slice "

returns a new function with a selection of inputs/outputs of the original

";

%feature("docstring") casadi::Function::mapsum "

Evaluate symbolically in parallel and sum (matrix graph)

Parameters:
-----------

parallelization:  Type of parallelization used: unroll|serial|openmp

";

%feature("docstring") casadi::Function::nnz_out "

Get number of output nonzeros.

For a particular output or for all of the outputs

";

%feature("docstring") casadi::Function::sparsity_jac "

>  const Sparsity casadi::Function::sparsity_jac(int iind, int oind, bool compact=false, bool symmetric=false) const

>  const Sparsity casadi::Function::sparsity_jac(const std::string &iind, int oind=0, bool compact=false, bool symmetric=false) const

>  const Sparsity casadi::Function::sparsity_jac(int iind, const std::string &oind, bool compact=false, bool symmetric=false) const

>  const Sparsity casadi::Function::sparsity_jac(const std::string &iind, const std::string &oind, bool compact=false, bool symmetric=false) const 
------------------------------------------------------------------------

Get, if necessary generate, the sparsity of a Jacobian block

>  const Sparsity casadi::Function::sparsity_jac(int iind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::Function::print "

Print a description of the object.

";

%feature("docstring") casadi::Function::hessian "

[DEPRECATED] Alias of Function::jacobian_old This function is of internal
character and should be avoided, if possible. The preferred way is to use
unction::factory instead. This function will change behavior in the next
version of CasADi.

";

%feature("docstring") casadi::Function::expand "

Expand a function to SX.

";

%feature("docstring") casadi::Function::factory "";

%feature("docstring") casadi::Function::checkout "

Checkout a memory object.

";

%feature("docstring") casadi::Function::print_option "

Print all information there is to know about a certain option.

";

%feature("docstring") casadi::Function::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements). Legacy function: To be deprecated.

";

%feature("docstring") casadi::Function::hessian_old "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output Legacy function: To be deprecated in a future
version of CasADi. Exists only for compatibility with Function::hessian pre-
CasADi 3.2

";

%feature("docstring") casadi::Function::map "

>  Function casadi::Function::map(const std::string &name, const std::string &parallelization, int n, const std::vector< int > &reduce_in, const std::vector< int > &reduce_out, const Dict &opts=Dict()) const

>  Function casadi::Function::map(const std::string &name, const std::string &parallelization, int n, const std::vector< std::string > &reduce_in, const std::vector< std::string > &reduce_out, const Dict &opts=Dict()) const 
------------------------------------------------------------------------

Map with reduction A subset of the inputs are non-repeated and a subset of
the outputs summed up.

>  Function casadi::Function::map(int n, const std::string &parallelization=\"serial\") const 
------------------------------------------------------------------------

Create a mapped version of this function.

Suppose the function has a signature of:

::

     f: (a, p) -> ( s )
  



The the mapped version has the signature:

::

     F: (A, P) -> (S )
  
      with
          A: horzcat([a0, a1, ..., a_(N-1)])
          P: horzcat([p0, p1, ..., p_(N-1)])
          S: horzcat([s0, s1, ..., s_(N-1)])
      and
          s0 <- f(a0, p0)
          s1 <- f(a1, p1)
          ...
          s_(N-1) <- f(a_(N-1), p_(N-1))
  



Parameters:
-----------

parallelization:  Type of parallelization used: unroll|serial|openmp

";

%feature("docstring") casadi::Function::sx_in "

Get symbolic primitives equivalent to the input expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring") casadi::Function::size1_in "

Get input dimension.

";

%feature("docstring") casadi::Function::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::Function::n_nodes "

Number of nodes in the algorithm.

";

%feature("docstring") casadi::Function::conic_debug "

Generate native code in the interfaced language for debugging

";

%feature("docstring") casadi::Function::sz_iw "[INTERNAL]  Get required
length of iw field.

";

%feature("docstring") casadi::Function::is_a "

Check if the function is of a particular type Optionally check if name
matches one of the base classes (default true)

";

%feature("docstring") casadi::Function::name_in "

>  std::vector<std::string> casadi::Function::name_in() const 
------------------------------------------------------------------------

Get input scheme.

>  std::string casadi::Function::name_in(int ind) const 
------------------------------------------------------------------------

Get input scheme name by index.

";

%feature("docstring") casadi::Function::mx_in "

Get symbolic primitives equivalent to the input expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring") casadi::Function::reverse "

Get a function that calculates nadj adjoint derivatives.

Returns a function with n_in + n_out + n_out inputs and n_in outputs. The
first n_in inputs correspond to nondifferentiated inputs. The next n_out
inputs correspond to nondifferentiated outputs. and the last n_out inputs
correspond to adjoint seeds, stacked horizontally The n_in outputs
correspond to adjoint sensitivities, stacked horizontally. * (n_in = n_in(),
n_out = n_out())

(n_in = n_in(), n_out = n_out())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::Function "

General function.

A general function $f$ in casadi can be multi-input, multi-output. Number of
inputs: nin n_in() Number of outputs: nout n_out()  We can view this
function as a being composed of a ( nin, nout) grid of single-input, single-
output primitive functions. Each such primitive function $f_ {i, j}
\\\\forall i \\\\in [0, nin-1], j \\\\in [0, nout-1]$ can map as $\\\\mathbf
{R}^{n, m}\\\\to\\\\mathbf{R}^{p, q}$, in which n, m, p, q can take
different values for every (i, j) pair.  When passing input, you specify
which partition $i$ is active. You pass the numbers vectorized, as a vector
of size $(n*m)$. When requesting output, you specify which partition $j$ is
active. You get the numbers vectorized, as a vector of size $(p*q)$.  To
calculate Jacobians, you need to have $(m=1, q=1)$.

Write the Jacobian as $J_ {i, j} = \\\\nabla f_{i, j} = \\\\frac
{\\\\partial f_{i, j}(\\\\vec{x})}{\\\\partial \\\\vec{x}}$.

We have the following relationships for function mapping from a row vector
to a row vector:

$ \\\\vec {s}_f = \\\\nabla f_{i, j} . \\\\vec{v}$ $ \\\\vec {s}_a =
(\\\\nabla f_{i, j})^T . \\\\vec{w}$

Some quantities in these formulas must be transposed: input col: transpose $
\\\\vec {v} $ and $\\\\vec{s}_a$ output col: transpose $ \\\\vec {w} $ and
$\\\\vec{s}_f$  NOTE: Functions are allowed to modify their input arguments
when evaluating: implicitFunction, IDAS solver Further releases may disallow
this.

Joel Andersson >List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Custom input     | casadi::Function |
|                  |                 | scheme           | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Custom output    | casadi::Function |
|                  |                 | scheme           | Internal         |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

C++ includes: function.hpp ";

%feature("docstring") casadi::Function::set_jac_sparsity "

[DEPRECATED] Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::Function::tangent "

[DEPRECATED] Use Function::factory instead

";

%feature("docstring") casadi::Function::print_free "

Print free variables.

";

%feature("docstring") casadi::Function::getAtomicInputReal "

Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::Function::setJacobian "

[DEPRECATED] Set the Jacobian function of output oind with respect to input
iind NOTE: Does not take ownership, only weak references to the Jacobians
are kept internally

";

%feature("docstring") casadi::Function::generate "

Export / Generate C code for the function.

";

%feature("docstring") casadi::Function::rootfinder_fun "

[DEPRECATED] Use oracle() instead

";

%feature("docstring") casadi::Function::has_free "

Does the function have free variables.

";

%feature("docstring") casadi::Function::assert_size_in "

Assert that an input dimension is equal so some given value.

";

%feature("docstring") casadi::Function::getAtomicOutput "

Get the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::Function::release "

Release a memory object.

";

%feature("docstring") casadi::Function::size_in "

Get input dimension.

";

%feature("docstring") casadi::Function::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::Function::size2_out "

Get output dimension.

";

%feature("docstring") casadi::Function::size1_out "

Get output dimension.

";

%feature("docstring") casadi::Function::generate_lifted "

Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::Function::sparsity_in "

Get sparsity of a given input.

";

%feature("docstring") casadi::Function::which_depends "

Which variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::Function::getWorkSize "

Get the length of the work vector.

";

%feature("docstring") casadi::Function::jacobian_old "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output Legacy function: To be deprecated in a future
version of CasADi. Exists only for compatibility with Function::jacobian
pre-CasADi 3.2

";

%feature("docstring") casadi::Function::sz_arg "[INTERNAL]  Get required
length of arg field.

";

%feature("docstring") casadi::Function::print_options "

Print options to a stream.

";

%feature("docstring") casadi::Function::size2_in "

Get input dimension.

";

%feature("docstring") casadi::Function::sz_w "[INTERNAL]  Get required
length of w field.

";

%feature("docstring") casadi::Function::has_function "";

%feature("docstring") casadi::Function::sx_out "

Get symbolic primitives equivalent to the output expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring") casadi::Function::default_in "

Get default input value (NOTE: constant reference)

";

%feature("docstring") casadi::Function::getDescription "

Return a string with a description (for SWIG)

";


// File: classcasadi_1_1GenericCall.xml


// File: classcasadi_1_1GenericExpression.xml
%feature("docstring") friendwrap_floor "

Round down to nearest integer.

";

%feature("docstring") friendwrap_acos "

Arc cosine.

";

%feature("docstring") friendwrap_if_else_zero "

Conditional assignment.

";

%feature("docstring") friendwrap_exp "

Exponential function.

";

%feature("docstring") friendwrap_ceil "

Round up to nearest integer.

";

%feature("docstring") friendwrap_printme "

Debug printing.

";

%feature("docstring") friendwrap_cos "

Cosine.

";

%feature("docstring") friendwrap_asinh "

Inverse hyperbolic sine.

";

%feature("docstring") friendwrap_atanh "

Inverse hyperbolic tangent.

";

%feature("docstring") friendwrap_tan "

Tangent.

";

%feature("docstring") friendwrap_acosh "

Inverse hyperbolic cosine.

";

%feature("docstring") friendwrap_erfinv "

Invers error function.

";

%feature("docstring") friendwrap_fmod "

Remainder after division.

";

%feature("docstring") friendwrap_constpow "

Elementwise power with const power.

";

%feature("docstring") friendwrap_log "

Natural logarithm.

";

%feature("docstring") friendwrap_log10 "

Base-10 logarithm.

";

%feature("docstring") friendwrap_copysign "

Copy sign.

";

%feature("docstring") friendwrap_abs "

Absolute value.

";

%feature("docstring") friendwrap_fmax "

Largest of two values.

";

%feature("docstring") friendwrap_sqrt "

Square root.

";

%feature("docstring") friendwrap_sign "

Sine function sign(x) := -1 for x<0 sign(x) := 1 for x>0, sign(0) := 0
sign(NaN) := NaN

";

%feature("docstring") friendwrap_logic_and "

Logical and, alternative syntax.

";

%feature("docstring") friendwrap_fmin "

Smallest of two values.

";

%feature("docstring") friendwrap_erf "

Error function.

";

%feature("docstring") friendwrap_pow "

Elementwise power.

";

%feature("docstring") friendwrap_atan2 "

Two argument arc tangent.

";

%feature("docstring") friendwrap_logic_or "

Logical or, alterntive syntax.

";

%feature("docstring") friendwrap_fabs "

Absolute value.

";

%feature("docstring") friendwrap_sq "

Square.

";

%feature("docstring") friendwrap_sinh "

Hyperbolic sine.

";

%feature("docstring") friendwrap_tanh "

Hyperbolic tangent.

";

%feature("docstring") friendwrap_cosh "

Hyperbolic cosine.

";

%feature("docstring") friendwrap_logic_not "

Logical not, alternative syntax.

";

%feature("docstring") friendwrap_atan "

Arc tangent.

";

%feature("docstring") casadi::GenericExpression "

Expression interface.

This is a common base class for SX, MX and Matrix<>, introducing a uniform
syntax and implementing common functionality using the curiously recurring
template pattern (CRTP) idiom. Joel Andersson

C++ includes: generic_expression.hpp ";

%feature("docstring") friendwrap_is_equal "

Check if two nodes are equivalent up to a given depth. Depth=0 checks if the
expressions are identical, i.e. points to the same node.

a = x*x b = x*x

a.is_equal(b, 0) will return false, but a.is_equal(b, 1) will return true

";

%feature("docstring") friendwrap_sin "

Sine.

";

%feature("docstring") friendwrap_asin "

Arc sine.

";


// File: classcasadi_1_1GenericExternal.xml
%feature("docstring") casadi::GenericExternal::size_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::GenericExternal::index_in "[INTERNAL]  Get
input scheme index by name.

";

%feature("docstring") casadi::GenericExternal::alloc_memory "[INTERNAL]
Create memory block.

";

%feature("docstring") casadi::GenericExternal::codegen_incref "[INTERNAL]
Codegen incref for dependencies.

";

%feature("docstring") casadi::GenericExternal::map_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::GenericExternal::print "[INTERNAL]  Print.

";

%feature("docstring") casadi::GenericExternal::numel_out "[INTERNAL]
Number of input/output elements.

";

%feature("docstring") casadi::GenericExternal::nnz_out "[INTERNAL]  Number
of input/output nonzeros.

";

%feature("docstring") casadi::GenericExternal::_set_temp "[INTERNAL]  Set
the (temporary) work vectors.

";

%feature("docstring") casadi::GenericExternal::symbolicAdjSeed "[INTERNAL]
Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::GenericExternal::sp_weight "[INTERNAL]
Weighting factor for chosing forward/reverse mode, sparsity propagation.

";

%feature("docstring") casadi::GenericExternal::replaceAdjSeed "[INTERNAL]
Replace 0-by-0 reverse seeds.

";

%feature("docstring") casadi::GenericExternal::free_mx "[INTERNAL]  Get
free variables ( MX)

";

%feature("docstring") casadi::GenericExternal::sparsity_out "[INTERNAL]
Get sparsity of a given output.

";

%feature("docstring") casadi::GenericExternal::checkInputs "[INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::GenericExternal::has_sprev "[INTERNAL]  Is
the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::GenericExternal::generate_lifted "[INTERNAL]
Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::GenericExternal::sp_fwd "[INTERNAL]
Propagate sparsity forward.

";

%feature("docstring") casadi::GenericExternal::print_free "[INTERNAL]
Print free variables.

";

%feature("docstring") casadi::GenericExternal::tangent "[INTERNAL]  Return
tangent function.

";

%feature("docstring") casadi::GenericExternal::getAdaptorSolverName "[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring") casadi::GenericExternal::set_work "[INTERNAL]  Set
the (persistent) work vectors.

";

%feature("docstring") casadi::GenericExternal "[INTERNAL] C++ includes:
external_impl.hpp ";

%feature("docstring") casadi::GenericExternal::print_options "[INTERNAL]
Print list of options.

";

%feature("docstring") casadi::GenericExternal::hess_sx "[INTERNAL]  Hessian
expression.

";

%feature("docstring") casadi::GenericExternal::getCount "[INTERNAL]  Get
the reference count.

";

%feature("docstring") casadi::GenericExternal::getJacSparsityHierarchical "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::GenericExternal::getJacSparsity "[INTERNAL]
Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::GenericExternal::jacobian "[INTERNAL]  Return
Jacobian function.

";

%feature("docstring") casadi::GenericExternal::oracle "[INTERNAL]  Get
oracle.

";

%feature("docstring") casadi::GenericExternal::index_out "[INTERNAL]  Get
output scheme index by name.

";

%feature("docstring") casadi::GenericExternal::print_dimensions "[INTERNAL]
Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::GenericExternal::name_out "[INTERNAL]  Get
output scheme name by index.

";

%feature("docstring") casadi::GenericExternal::has_codegen "[INTERNAL]  Is
codegen supported?

";

%feature("docstring") casadi::GenericExternal::slice "[INTERNAL]  returns a
new function with a selection of inputs/outputs of the original

";

%feature("docstring") casadi::GenericExternal::_eval "

>  void casadi::FunctionInternal::_eval(const double **arg, double **res, int *iw, double *w, int mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate numerically.

>  void casadi::FunctionInternal::_eval(const SXElem **arg, SXElem **res, int *iw, SXElem *w, int mem) const

>  void casadi::FunctionInternal::_eval(const bvec_t **arg, bvec_t **res, int *iw, bvec_t *w, int mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

%feature("docstring") casadi::GenericExternal::size_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::GenericExternal::_setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";

%feature("docstring") casadi::GenericExternal::verbose "[INTERNAL]  Verbose
mode?

";

%feature("docstring") casadi::GenericExternal::memory "[INTERNAL]  Memory
objects.

";

%feature("docstring") casadi::GenericExternal::log "

>  void casadi::FunctionInternal::log(const std::string &msg) const 
------------------------------------------------------------------------
[INTERNAL] 
Log the status of the solver.

>  void casadi::FunctionInternal::log(const std::string &fcn, const std::string &msg) const 
------------------------------------------------------------------------
[INTERNAL] 
Log the status of the solver, function given.

";

%feature("docstring") casadi::GenericExternal::call_forward "[INTERNAL]
Forward mode AD, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::GenericExternal::numel_in "[INTERNAL]  Number
of input/output elements.

";

%feature("docstring") casadi::GenericExternal::getAtomicOutput "[INTERNAL]
Get the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::GenericExternal::get_function "[INTERNAL] ";

%feature("docstring") casadi::GenericExternal::~GenericExternal "[INTERNAL]
Destructor.

";

%feature("docstring") casadi::GenericExternal::sz_res "[INTERNAL]  Get
required length of res field.

";

%feature("docstring") casadi::GenericExternal::init_memory "[INTERNAL]
Initalize memory block.

";

%feature("docstring") casadi::GenericExternal::get_reverse "[INTERNAL]
Reverse mode derivatives.

";

%feature("docstring") casadi::GenericExternal::generateDeclarations "[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring") casadi::GenericExternal::GenericExternal "[INTERNAL]
Constructor.

";

%feature("docstring") casadi::GenericExternal::call_reverse "[INTERNAL]
Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::GenericExternal::checkout "[INTERNAL]
Checkout a memory object.

";

%feature("docstring") casadi::GenericExternal::replaceFwdSeed "[INTERNAL]
Replace 0-by-0 forward seeds.

";

%feature("docstring") casadi::GenericExternal::alloc_arg "[INTERNAL]
Ensure required length of arg field.

";

%feature("docstring") casadi::GenericExternal::replaceRes "[INTERNAL]
Replace 0-by-0 outputs.

";

%feature("docstring") casadi::GenericExternal::set_jac_sparsity "[INTERNAL]
Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::GenericExternal::jit_dependencies "[INTERNAL]
Jit dependencies.

";

%feature("docstring") casadi::GenericExternal::eval_mx "[INTERNAL]
Evaluate with symbolic matrices.

";

%feature("docstring") casadi::GenericExternal::nnz_in "[INTERNAL]  Number
of input/output nonzeros.

";

%feature("docstring") casadi::GenericExternal::n_nodes "[INTERNAL]  Number
of nodes in the algorithm.

";

%feature("docstring") casadi::GenericExternal::forward "[INTERNAL]  Return
function that calculates forward derivatives forward(nfwd) returns a cached
instance if available, and calls  Function get_forward(int nfwd) if no
cached version is available.

";

%feature("docstring") casadi::GenericExternal::alloc_res "[INTERNAL]
Ensure required length of res field.

";

%feature("docstring") casadi::GenericExternal::print_option "[INTERNAL]
Print all information there is to know about a certain option.

";

%feature("docstring") casadi::GenericExternal::replaceArg "[INTERNAL]
Replace 0-by-0 inputs.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::GenericExternal::sz_iw "[INTERNAL]  Get
required length of iw field.

";

%feature("docstring") casadi::GenericExternal::getJacobian "[INTERNAL]
Return Jacobian function.

";

%feature("docstring") casadi::GenericExternal::sx_out "[INTERNAL]  Get
function input(s) and output(s)

";

%feature("docstring") casadi::GenericExternal::getWorkSize "[INTERNAL]  Get
the length of the work vector.

";

%feature("docstring") casadi::GenericExternal::getAlgorithmSize "[INTERNAL]
Get the number of atomic operations.

";

%feature("docstring") casadi::GenericExternal::alloc_iw "[INTERNAL]  Ensure
required length of iw field.

";

%feature("docstring") casadi::GenericExternal::_call "[INTERNAL]   Call a
function, overloaded.

";

%feature("docstring") casadi::GenericExternal::matchingArg "[INTERNAL]
Check if input arguments that needs to be replaced.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::GenericExternal::addDependency "[INTERNAL]
Add a dependent function.

";

%feature("docstring") casadi::GenericExternal::n_out "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::GenericExternal::get_name_out "[INTERNAL]
Names of function input and outputs.

";

%feature("docstring") casadi::GenericExternal::generateFunction "[INTERNAL]
Generate code the function.

";

%feature("docstring") casadi::GenericExternal::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::GenericExternal::size1_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::GenericExternal::hasDerivative "[INTERNAL]
Can derivatives be calculated in any way?

";

%feature("docstring") casadi::GenericExternal::getAtomicInputReal "[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::GenericExternal::mx_in "[INTERNAL]  Get
function input(s) and output(s)

";

%feature("docstring") casadi::GenericExternal::free_sx "[INTERNAL]  Get
free variables (SX)

";

%feature("docstring") casadi::GenericExternal::tang_sx "[INTERNAL]  Tangent
expression.

";

%feature("docstring") casadi::GenericExternal::has_function "[INTERNAL] ";

%feature("docstring") casadi::GenericExternal::release "[INTERNAL]  Release
a memory object.

";

%feature("docstring") casadi::GenericExternal::symbolicOutput "[INTERNAL]
Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::GenericExternal::call "[INTERNAL]   Call a
function, templated.

";

%feature("docstring") casadi::GenericExternal::getTangent "[INTERNAL]
Return tangent function.

";

%feature("docstring") casadi::GenericExternal::fwdViaJac "[INTERNAL]
Calculate derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::GenericExternal::finalize "[INTERNAL]
Finalize the object creation This function, which visits the class hierarchy
in reverse order is run after init() has been completed.

";

%feature("docstring") casadi::GenericExternal::checkArg "[INTERNAL]  Check
if input arguments have correct length and dimensions.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::GenericExternal::n_in "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::GenericExternal::get_n_reverse "[INTERNAL]
Reverse mode derivatives.

";

%feature("docstring") casadi::GenericExternal::factory "[INTERNAL] ";

%feature("docstring") casadi::GenericExternal::type_name "[INTERNAL]  Get
type name.

";

%feature("docstring") casadi::GenericExternal::signature "[INTERNAL]  Code
generate the function.

";

%feature("docstring") casadi::GenericExternal::sz_w "[INTERNAL]  Get
required length of w field.

";

%feature("docstring") casadi::GenericExternal::setJacobian "[INTERNAL]
Return Jacobian function.

";

%feature("docstring") casadi::GenericExternal::generate_dependencies "[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring") casadi::GenericExternal::alloc "[INTERNAL]  Ensure
work vectors long enough to evaluate function.

";

%feature("docstring") casadi::GenericExternal::tang_mx "[INTERNAL]  Tangent
expression.

";

%feature("docstring") casadi::GenericExternal::reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::GenericExternal::grad_sx "[INTERNAL]
Gradient expression.

";

%feature("docstring") casadi::GenericExternal::repr "[INTERNAL]  Print.

";

%feature("docstring") casadi::GenericExternal::matchingRes "[INTERNAL]
Check if output arguments that needs to be replaced.

";

%feature("docstring") casadi::GenericExternal::getGradient "[INTERNAL]
Return gradient function.

";

%feature("docstring") casadi::GenericExternal::get_options "[INTERNAL]
Options.

";

%feature("docstring")
casadi::GenericExternal::getJacSparsityHierarchicalSymm "[INTERNAL]  A
flavor of getJacSparsity that does hierarchical block structure recognition
for symmetric Jacobians

";

%feature("docstring") casadi::GenericExternal::jac_sx "[INTERNAL]  Jacobian
expression.

";

%feature("docstring") casadi::GenericExternal::_get_stats "[INTERNAL]  Get
all statistics

";

%feature("docstring") casadi::GenericExternal::adjViaJac "[INTERNAL]
Calculate derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::GenericExternal::alloc_w "[INTERNAL]  Ensure
required length of w field.

";

%feature("docstring") casadi::GenericExternal::clear_memory "[INTERNAL]
Clear all memory (called from destructor)

";

%feature("docstring") casadi::GenericExternal::ad_weight "[INTERNAL]
Weighting factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::GenericExternal::getAtomicOperation "[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring") casadi::GenericExternal::addShorthand "[INTERNAL]
Generate shorthand macro.

";

%feature("docstring") casadi::GenericExternal::get_forward "[INTERNAL]
Forward mode derivatives.

";

%feature("docstring") casadi::GenericExternal::getFullJacobian "[INTERNAL]
Full Jacobian.

";

%feature("docstring") casadi::GenericExternal::default_in "[INTERNAL]  Get
default input value.

";

%feature("docstring") casadi::GenericExternal::get_n_forward "[INTERNAL]
Forward mode derivatives.

";

%feature("docstring") casadi::GenericExternal::sz_work "[INTERNAL]  Get
number of temporary variables needed.

";

%feature("docstring") casadi::GenericExternal::eval_sx "[INTERNAL]
Evaluate with symbolic scalars.

";

%feature("docstring") casadi::GenericExternal::simplifiedCall "[INTERNAL]
Use simplified signature.

";

%feature("docstring") casadi::GenericExternal::self "[INTERNAL]  Get a
public class instance.

";

%feature("docstring") casadi::GenericExternal::getAtomicInput "[INTERNAL]
Get the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::GenericExternal::get_stats "[INTERNAL]  Get
all statistics

";

%feature("docstring") casadi::GenericExternal::generateMeta "[INTERNAL]
Generate meta-information allowing a user to evaluate a generated function.

";

%feature("docstring") casadi::GenericExternal::has_free "[INTERNAL]  Does
the function have free variables.

";

%feature("docstring") casadi::GenericExternal::wrap "[INTERNAL]  Wrap in an
Function instance consisting of only one MX call.

";

%feature("docstring") casadi::GenericExternal::codegen_name "[INTERNAL]
Get name in codegen.

";

%feature("docstring") casadi::GenericExternal::jac_mx "[INTERNAL]  Jacobian
expression.

";

%feature("docstring") casadi::GenericExternal::sx_in "[INTERNAL]  Get
function input(s) and output(s)

";

%feature("docstring") casadi::GenericExternal::name_in "[INTERNAL]  Get
input scheme name by index.

";

%feature("docstring") casadi::GenericExternal::mapsum_mx "[INTERNAL]
Parallel evaluation.

";

%feature("docstring") casadi::GenericExternal::size1_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::GenericExternal::_set_work "[INTERNAL]  Set
the (persistent) work vectors.

";

%feature("docstring") casadi::GenericExternal::get_n_out "[INTERNAL]
Number of function inputs and outputs.

";

%feature("docstring") casadi::GenericExternal::eval_name "[INTERNAL]  Get
name of the evaluation function.

";

%feature("docstring") casadi::GenericExternal::setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";

%feature("docstring") casadi::GenericExternal::hessian "[INTERNAL]  Return
Hessian function.

";

%feature("docstring") casadi::GenericExternal::hasFullJacobian "[INTERNAL]
Full Jacobian.

";

%feature("docstring") casadi::GenericExternal::codegen_decref "[INTERNAL]
Codegen decref for dependencies.

";

%feature("docstring") casadi::GenericExternal::n_mem "[INTERNAL]  Maximum
number of memory objects.

";

%feature("docstring") casadi::GenericExternal::construct "[INTERNAL]
Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::GenericExternal::get_name_in "[INTERNAL]
Names of function input and outputs.

";

%feature("docstring") casadi::GenericExternal::size2_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::GenericExternal::get_sparsity_in "[INTERNAL]
Retreive sparsities.

";

%feature("docstring") casadi::GenericExternal::has_spfwd "[INTERNAL]  Is
the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::GenericExternal::getPartition "[INTERNAL]
Get the unidirectional or bidirectional partition.

";

%feature("docstring") casadi::GenericExternal::name "[INTERNAL]  Name of
the function.

";

%feature("docstring") casadi::GenericExternal::sparsity_jac "[INTERNAL]
Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::GenericExternal::symbolicFwdSeed "[INTERNAL]
Symbolic expressions for the forward seeds.

";

%feature("docstring") casadi::GenericExternal::sparsity_in "[INTERNAL]  Get
sparsity of a given input.

";

%feature("docstring") casadi::GenericExternal::get_n_in "[INTERNAL]  Number
of function inputs and outputs.

";

%feature("docstring") casadi::GenericExternal::simple "[INTERNAL]  Evaluate
numerically, simplied syntax.

";

%feature("docstring") casadi::GenericExternal::eval "[INTERNAL]  Evaluate
numerically.

";

%feature("docstring") casadi::GenericExternal::get_sparsity_out "[INTERNAL]
Retreive sparsities.

";

%feature("docstring") casadi::GenericExternal::free_memory "[INTERNAL]
Free memory block.

";

%feature("docstring") casadi::GenericExternal::gradient "[INTERNAL]  Return
gradient function.

";

%feature("docstring") casadi::GenericExternal::getHessian "[INTERNAL]
Return Hessian function.

";

%feature("docstring") casadi::GenericExternal::mx_out "[INTERNAL]  Get
function input(s) and output(s)

";

%feature("docstring") casadi::GenericExternal::sp_rev "[INTERNAL]
Propagate sparsity backwards.

";

%feature("docstring") casadi::GenericExternal::getJacSparsityGen "[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring") casadi::GenericExternal::is_a "[INTERNAL]  Check if
the function is of a particular type.

";

%feature("docstring") casadi::GenericExternal::grad_mx "[INTERNAL]
Gradient expression.

";

%feature("docstring") casadi::GenericExternal::which_depends "[INTERNAL]
Which variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::GenericExternal::size2_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::GenericExternal::generateBody "[INTERNAL]
Generate code for the function body.

";

%feature("docstring") casadi::GenericExternal::fullJacobian "[INTERNAL]
Return Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::GenericExternal::init "[INTERNAL]
Initialize.

";

%feature("docstring") casadi::GenericExternal::sz_arg "[INTERNAL]  Get
required length of arg field.

";

%feature("docstring") casadi::GenericExternal::set_temp "[INTERNAL]  Set
the (temporary) work vectors.

";

%feature("docstring") casadi::GenericExternal::checkRes "[INTERNAL]  Check
if output arguments have correct length and dimensions.

";


// File: classcasadi_1_1GenericMatrix.xml


/*  Construct symbolic primitives  */

/* The \"sym\" function is intended to work in a similar way as \"sym\" used
in the Symbolic Toolbox for Matlab but instead creating a CasADi symbolic
primitive.

*/ %feature("docstring") friendwrap_sum2 "

Return a column-wise summation of elements.

";

%feature("docstring") friendwrap_sum1 "

Return a row-wise summation of elements.

";

%feature("docstring") friendwrap_mrdivide "

Matrix divide (cf. slash '/' in MATLAB)

";

%feature("docstring") friendwrap_if_else "

Branching on MX nodes Ternary operator, \"cond ? if_true : if_false\".

";

%feature("docstring") friendwrap_tril2symm "

Convert a lower triangular matrix to a symmetric one.

";

%feature("docstring") friendwrap_det "

Matrix determinant (experimental)

";

%feature("docstring") casadi::GenericMatrix::nnz_diag "

Get get the number of non-zeros on the diagonal.

";

%feature("docstring") friendwrap_conditional "

Create a switch.

If the condition

Parameters:
-----------

ind:  evaluates to the integer k, where 0<=k<f.size(), then x[k] will be
returned, otherwise

x_default:  will be returned.

";

%feature("docstring") friendwrap_pinv "

>  MatType pinv(const MatType &A)
------------------------------------------------------------------------

Computes the Moore-Penrose pseudo-inverse.

If the matrix A is fat (size1<size2), mul(A, pinv(A)) is unity.

pinv(A)' = (AA')^(-1) A

If the matrix A is slender (size1>size2), mul(pinv(A), A) is unity.

pinv(A) = (A'A)^(-1) A'

>  MatType pinv(const MatType &A, const std::string &lsolver, const Dict &dict=Dict())
------------------------------------------------------------------------

Computes the Moore-Penrose pseudo-inverse.

If the matrix A is fat (size1>size2), mul(A, pinv(A)) is unity. If the
matrix A is slender (size2<size1), mul(pinv(A), A) is unity.

";

%feature("docstring") friendwrap_solve "

>  MatType solve(const MatType &A, const MatType &b)
------------------------------------------------------------------------

Solve a system of equations: A*x = b The solve routine works similar to
Matlab's backslash when A is square and nonsingular. The algorithm used is
the following:

A simple forward or backward substitution if A is upper or lower triangular

If the linear system is at most 3-by-3, form the inverse via minor expansion
and multiply

Permute the variables and equations as to get a (structurally) nonzero
diagonal, then perform a QR factorization without pivoting and solve the
factorized system.

Note 1: If there are entries of the linear system known to be zero, these
will be removed. Elements that are very small, or will evaluate to be zero,
can still cause numerical errors, due to the lack of pivoting (which is not
possible since cannot compare the size of entries)

Note 2: When permuting the linear system, a BLT (block lower triangular)
transformation is formed. Only the permutation part of this is however used.
An improvement would be to solve block-by-block if there are multiple BLT
blocks.

>  MatType solve(const MatType &A, const MatType &b, const std::string &lsolver, const Dict &dict=Dict())
------------------------------------------------------------------------

Solve a system of equations: A*x = b.

";

%feature("docstring") friendwrap_which_depends "

Find out which variables enter with some order.

";

%feature("docstring") casadi::GenericMatrix::get_row "

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring") friendwrap_print_operator "

Get a string representation for a binary MatType, using custom arguments.

";

%feature("docstring") friendwrap_linearize "

Linearize an expression.

";

%feature("docstring") friendwrap_jacobian "

Calculate Jacobian.

";

%feature("docstring") casadi::GenericMatrix::is_dense "

Check if the matrix expression is dense.

";

%feature("docstring") casadi::GenericMatrix::nnz_lower "

Get the number of non-zeros in the lower triangular half.

";

%feature("docstring") casadi::GenericMatrix::rank1 "

Make a rank-1 update to a matrix A Calculates A + 1/2 * alpha * x*y'.

";

%feature("docstring") friendwrap_n_nodes "

Count number of nodes

";

%feature("docstring") friendwrap_hessian "";

%feature("docstring") friendwrap_nullspace "

Computes the nullspace of a matrix A.

Finds Z m-by-(m-n) such that AZ = 0 with A n-by-m with m > n

Assumes A is full rank

Inspired by Numerical Methods in Scientific Computing by Ake Bjorck

";

%feature("docstring") friendwrap_substitute_inplace "

Inplace substitution with piggyback expressions Substitute variables v out
of the expressions vdef sequentially, as well as out of a number of other
expressions piggyback.

";

%feature("docstring") casadi::GenericMatrix::is_scalar "

Check if the matrix expression is scalar.

";

%feature("docstring") casadi::GenericMatrix::is_column "

Check if the matrix is a column vector (i.e. size2()==1)

";

%feature("docstring") friendwrap_skew "

Generate a skew symmetric matrix from a 3-vector.

";

%feature("docstring") casadi::GenericMatrix::is_tril "

Check if the matrix is lower triangular.

";

%feature("docstring") casadi::GenericMatrix::colind "

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring") casadi::GenericMatrix::is_triu "

Check if the matrix is upper triangular.

";

%feature("docstring") friendwrap_gradient "

Calculate Jacobian.

";

%feature("docstring") friendwrap_unite "

Unite two matrices no overlapping sparsity.

";

%feature("docstring") casadi::GenericMatrix::dim "

Get string representation of dimensions. The representation is (nrow x ncol
= numel | size)

";

%feature("docstring") friendwrap_sum_square "

Calculate some of squares: sum_ij X_ij^2.

";

%feature("docstring") friendwrap_inv "

Matrix inverse.

";

%feature("docstring") casadi::GenericMatrix::size1 "

Get the first dimension (i.e. number of rows)

";

%feature("docstring") casadi::GenericMatrix::size2 "

Get the second dimension (i.e. number of columns)

";

%feature("docstring") friendwrap_norm_1 "

1-norm

";

%feature("docstring") friendwrap_norm_2 "

2-norm

";

%feature("docstring") friendwrap_forward "

Forward directional derivative.

";

%feature("docstring") friendwrap_diag "

Get the diagonal of a matrix or construct a diagonal When the input is
square, the diagonal elements are returned. If the input is vector- like, a
diagonal matrix is constructed with it.

";

%feature("docstring") friendwrap_project "

Create a new matrix with a given sparsity pattern but with the nonzeros
taken from an existing matrix.

";

%feature("docstring") friendwrap_jtimes "

Calculate the Jacobian and multiply by a vector from the right This is
equivalent to mul(jacobian(ex, arg), v) or mul(jacobian(ex, arg).T, v) for
tr set to false and true respectively. If contrast to these expressions, it
will use directional derivatives which is typically (but not necessarily)
more efficient if the complete Jacobian is not needed and v has few rows.

";

%feature("docstring") friendwrap_substitute "

>  MatType substitute(const MatType &ex, const MatType &v, const MatType &vdef)
------------------------------------------------------------------------

Substitute variable v with expression vdef in an expression ex.

>  std::vector<MatType> substitute(const std::vector< MatType > &ex, const std::vector< MatType > &v, const std::vector< MatType > &vdef)
------------------------------------------------------------------------

Substitute variable var with expression expr in multiple expressions.

";

%feature("docstring") casadi::GenericMatrix::bilin "

Calculate bilinear form x^T A y.

";

%feature("docstring") friendwrap_mldivide "

Matrix divide (cf. backslash '\\\\' in MATLAB)

";

%feature("docstring") casadi::GenericMatrix::get_colind "

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring") friendwrap_cross "

Matlab's cross command.

";

%feature("docstring") friendwrap_shared "

Extract shared subexpressions from an set of expressions.

";

%feature("docstring") casadi::GenericMatrix::is_empty "

Check if the sparsity is empty, i.e. if one of the dimensions is zero (or
optionally both dimensions)

";

%feature("docstring") casadi::GenericMatrix::is_row "

Check if the matrix is a row vector (i.e. size1()==1)

";

%feature("docstring") friendwrap_rank1 "

Make a rank-1 update to a matrix A Calculates A + 1/2 * alpha * x*y'.

";

%feature("docstring") friendwrap_inv_skew "

Generate the 3-vector progenitor of a skew symmetric matrix.

";

%feature("docstring") friendwrap_tangent "

Calculate Jacobian.

";

%feature("docstring") casadi::GenericMatrix::is_square "

Check if the matrix expression is square.

";

%feature("docstring") friendwrap_bilin "

Calculate bilinear form x^T A y.

";

%feature("docstring") casadi::GenericMatrix::jtimes "

Functions called by friend functions defined here

";

%feature("docstring") friendwrap_simplify "

Simplify an expression.

";

%feature("docstring") casadi::GenericMatrix::numel "

Get the number of elements.

";

%feature("docstring") friendwrap_linspace "

Matlab's linspace command.

";

%feature("docstring") casadi::GenericMatrix::nnz "

Get the number of (structural) non-zero elements.

";

%feature("docstring") casadi::GenericMatrix::sym "

>  static MatType casadi::GenericMatrix< MatType >::sym(const std::string &name, int nrow=1, int ncol=1)
------------------------------------------------------------------------

Create an nrow-by-ncol symbolic primitive.

>  static MatType casadi::GenericMatrix< MatType >::sym(const std::string &name, const std::pair< int, int > &rc)
------------------------------------------------------------------------

Construct a symbolic primitive with given dimensions.

>  static MatType casadi::GenericMatrix< MatType >::sym(const std::string &name, const Sparsity &sp)
------------------------------------------------------------------------

Create symbolic primitive with a given sparsity pattern.

>  std::vector< MatType > casadi::GenericMatrix< MatType >::sym(const std::string &name, const Sparsity &sp, int p)
------------------------------------------------------------------------

Create a vector of length p with with matrices with symbolic primitives of
given sparsity.

>  static std::vector<MatType > casadi::GenericMatrix< MatType >::sym(const std::string &name, int nrow, int ncol, int p)
------------------------------------------------------------------------

Create a vector of length p with nrow-by-ncol symbolic primitives.

>  std::vector< std::vector< MatType > > casadi::GenericMatrix< MatType >::sym(const std::string &name, const Sparsity &sp, int p, int r)
------------------------------------------------------------------------

Create a vector of length r of vectors of length p with symbolic primitives
with given sparsity.

>  static std::vector<std::vector<MatType> > casadi::GenericMatrix< MatType >::sym(const std::string &name, int nrow, int ncol, int p, int r)
------------------------------------------------------------------------

Create a vector of length r of vectors of length p with nrow-by-ncol
symbolic primitives.

";

%feature("docstring") casadi::GenericMatrix::row "

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring") friendwrap_inv_minor "

Matrix inverse (experimental)

";

%feature("docstring") casadi::GenericMatrix::nnz_upper "

Get the number of non-zeros in the upper triangular half.

";

%feature("docstring") casadi::GenericMatrix::sparsity "

Get the sparsity pattern.

";

%feature("docstring") friendwrap_norm_inf "

Infinity-norm.

";

%feature("docstring") casadi::GenericMatrix::mpower "

Functions called by friend functions defined here

";

%feature("docstring") friendwrap_trace "

Matrix trace.

";

%feature("docstring") friendwrap_einstein "

>  MatType einstein(const MatType &A, const MatType &B, const MatType &C, const std::vector< int > &dim_a, const std::vector< int > &dim_b, const std::vector< int > &dim_c, const std::vector< int > &a, const std::vector< int > &b, const std::vector< int > &c)
------------------------------------------------------------------------

Compute any contraction of two dense tensors, using index/einstein notation
einstein(A, B, a, b, c) -> C.

Given two tensors, A and B, computes a third tensor C such that:

C_c = A_a * B_b

With a, b, c representing einstein indices. Instead of the classical index
labels i,j,k,... we employ -1,-2,-3,...

A, B, C are represented as CasADi vectors, with dim_a, dim_b, dim_c
indictating theire tensorial dimensions.

>  MatType einstein(const MatType &A, const MatType &B, const std::vector< int > &dim_a, const std::vector< int > &dim_b, const std::vector< int > &dim_c, const std::vector< int > &a, const std::vector< int > &b, const std::vector< int > &c)
------------------------------------------------------------------------

Matrix power x^n.

";

%feature("docstring") friendwrap_repsum "

Given a repeated matrix, computes the sum of repeated parts.

";

%feature("docstring") friendwrap_dot "

Inner product of two matrices with x and y matrices of the same dimension.

";

%feature("docstring") casadi::GenericMatrix::size "

>  std::pair<int, int> casadi::GenericMatrix< MatType >::size() const 
------------------------------------------------------------------------

Get the shape.

>  int casadi::GenericMatrix< MatType >::size(int axis) const 
------------------------------------------------------------------------

Get the size along a particular dimensions.

";

%feature("docstring") casadi::GenericMatrix "

Matrix base class.

This is a common base class for MX and Matrix<>, introducing a uniform
syntax and implementing common functionality using the curiously recurring
template pattern (CRTP) idiom.  The class is designed with the idea that
\"everything is a matrix\", that is, also scalars and vectors. This
philosophy makes it easy to use and to interface in particularly with Python
and Matlab/Octave.  The syntax tries to stay as close as possible to the
ublas syntax when it comes to vector/matrix operations.  Index starts with
0. Index vec happens as follows: (rr, cc) -> k = rr+cc*size1() Vectors are
column vectors.  The storage format is Compressed Column Storage (CCS),
similar to that used for sparse matrices in Matlab, but unlike this format,
we do allow for elements to be structurally non-zero but numerically zero.
The sparsity pattern, which is reference counted and cached, can be accessed
with Sparsity& sparsity() Joel Andersson

C++ includes: generic_matrix.hpp ";

%feature("docstring") friendwrap_polyval "

Evaluate a polynomial with coefficients p in x.

";

%feature("docstring") friendwrap_triu2symm "

Convert a upper triangular matrix to a symmetric one.

";

%feature("docstring") friendwrap_depends_on "

Check if expression depends on the argument The argument must be symbolic.

";

%feature("docstring") friendwrap_symvar "

Get all symbols contained in the supplied expression Get all symbols on
which the supplied expression depends.

See:  SXFunction::getFree(), MXFunction::getFree()

";

%feature("docstring") casadi::GenericMatrix::is_vector "

Check if the matrix is a row or column vector.

";

%feature("docstring") friendwrap_mpower "

Matrix power x^n.

";

%feature("docstring") friendwrap_norm_fro "

Frobenius norm.

";

%feature("docstring") casadi::GenericMatrix::zeros "

Create a dense matrix or a matrix with specified sparsity with all entries
zero.

";

%feature("docstring") friendwrap_reverse "

Reverse directional derivative.

";

%feature("docstring") friendwrap_expm_const "";

%feature("docstring") friendwrap_expm "";

%feature("docstring") friendwrap_densify "

>  MatType densify(const MatType &x)
------------------------------------------------------------------------

Make the matrix dense if not already.

>  MatType densify(const MatType &x, const MatType &val)
------------------------------------------------------------------------

Make the matrix dense and assign nonzeros to a value.

";

%feature("docstring") casadi::GenericMatrix::linearize "

Functions called by friend functions defined here

";

%feature("docstring") casadi::GenericMatrix::ones "

Create a dense matrix or a matrix with specified sparsity with all entries
one.

";


// File: classcasadi_1_1GenericType.xml
%feature("docstring") casadi::GenericType "

Generic data type, can hold different types such as bool, int, string etc.

Joel Andersson

C++ includes: generic_type.hpp ";


// File: classcasadi_1_1GenericTypeBase.xml
%feature("docstring") casadi::GenericTypeBase::~GenericTypeBase "[INTERNAL]
";

%feature("docstring") casadi::GenericTypeBase::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::GenericTypeBase::getType "[INTERNAL] ";

%feature("docstring") casadi::GenericTypeBase::print "[INTERNAL]  Print a
description of the object.

";

%feature("docstring") casadi::GenericTypeBase::getCount "[INTERNAL]  Get
the reference count.

";

%feature("docstring") casadi::GenericTypeBase::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") casadi::GenericTypeBase "[INTERNAL] C++ includes:
generic_type_internal.hpp ";


// File: classcasadi_1_1GetNonzeros.xml


// File: classcasadi_1_1GetNonzerosSlice.xml


// File: classcasadi_1_1GetNonzerosSlice2.xml


// File: classcasadi_1_1GetNonzerosVector.xml


// File: classcasadi_1_1GlobalOptions.xml
%feature("docstring") casadi::GlobalOptions "

Collects global CasADi options.

Note to developers: use sparingly. Global options are - in general - a
rather bad idea

this class must never be instantiated. Access its static members directly
Joris Gillis

C++ includes: global_options.hpp ";


// File: classcasadi_1_1Horzcat.xml


// File: classcasadi_1_1HorzRepmat.xml


// File: classcasadi_1_1HorzRepsum.xml


// File: classcasadi_1_1Horzsplit.xml


// File: classcasadi_1_1ImplicitFixedStepIntegrator.xml
%feature("docstring") casadi::ImplicitFixedStepIntegrator::memory "[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::generateBody "[INTERNAL]  Generate code for the function body.

";

%feature("docstring")
casadi::ImplicitFixedStepIntegrator::getAtomicInputReal "[INTERNAL]  Get
the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::set_work "[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::get_options "[INTERNAL]  Options.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::sz_res "[INTERNAL]  Get required length of res field.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::sparsity_in "[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::fwdViaJac "[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::init "[INTERNAL]
Initialize stage.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::index_in "[INTERNAL]  Get input scheme index by name.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::n_in "[INTERNAL]
Number of function inputs and outputs.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::eval_name "[INTERNAL]  Get name of the evaluation function.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::n_out "[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::setStopTime "[INTERNAL]  Set stop time for the integration.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::getCount "[INTERNAL]  Get the reference count.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::type_name "[INTERNAL]  Get type name.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::_set_work "[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::init_memory "[INTERNAL]  Initalize memory block.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::getJacobian "[INTERNAL]  Return Jacobian function.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::sp_weight "[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::index_out "[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")
casadi::ImplicitFixedStepIntegrator::getDerivativeOptions "[INTERNAL]  Set
solver specific options to generated augmented integrators.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::tangent "[INTERNAL]  Return tangent function.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::sx_out "[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::print_option "[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::jit_dependencies
"[INTERNAL]  JIT for dependencies.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::advance "[INTERNAL]  Advance solution in time.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::sz_w "[INTERNAL]
Get required length of w field.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::print_fstats "[INTERNAL]  Print statistics.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::_eval "

>  void casadi::FunctionInternal::_eval(const double **arg, double **res, int *iw, double *w, int mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate numerically.

>  void casadi::FunctionInternal::_eval(const SXElem **arg, SXElem **res, int *iw, SXElem *w, int mem) const

>  void casadi::FunctionInternal::_eval(const bvec_t **arg, bvec_t **res, int *iw, bvec_t *w, int mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::grad_sx "[INTERNAL]  Gradient expression.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::get_sparsity_in "[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::alloc_arg "[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::nnz_in "[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::forward "[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::release "[INTERNAL]  Release a memory object.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::get_stats "[INTERNAL]  Get all statistics.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::alloc_iw "[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::call "[INTERNAL]
Call a function, templated.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::getJacSparsityGen
"[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::print_options "[INTERNAL]  Print list of options.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::size1_in "[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::replaceFwdSeed "[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::symbolicOutput "[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::ad_weight "[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::replaceRes "[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::set_function "[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::getAtomicOutput "[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator "

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| augmented_option | OT_DICT         | Options to be    | casadi::Implicit |
| s                |                 | passed down to   | FixedStepIntegra |
|                  |                 | the augmented    | tor              |
|                  |                 | integrator, if   |                  |
|                  |                 | one is           |                  |
|                  |                 | constructed.     |                  |
+------------------+-----------------+------------------+------------------+
| common_options   | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | auto-generated   | nction           |
|                  |                 | functions        |                  |
+------------------+-----------------+------------------+------------------+
| expand           | OT_BOOL         | Replace MX with  | casadi::Implicit |
|                  |                 | SX expressions   | FixedStepIntegra |
|                  |                 | in problem       | tor              |
|                  |                 | formulation      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| grid             | OT_DOUBLEVECTOR | Time grid        | casadi::Implicit |
|                  |                 |                  | FixedStepIntegra |
|                  |                 |                  | tor              |
+------------------+-----------------+------------------+------------------+
| monitor          | OT_STRINGVECTOR | Set of user      | casadi::OracleFu |
|                  |                 | problem          | nction           |
|                  |                 | functions to be  |                  |
|                  |                 | monitored        |                  |
+------------------+-----------------+------------------+------------------+
| number_of_finite | OT_INT          | Number of finite | casadi::Implicit |
| _elements        |                 | elements         | FixedStepIntegra |
|                  |                 |                  | tor              |
+------------------+-----------------+------------------+------------------+
| output_t0        | OT_BOOL         | Output the state | casadi::Implicit |
|                  |                 | at the initial   | FixedStepIntegra |
|                  |                 | time             | tor              |
+------------------+-----------------+------------------+------------------+
| print_stats      | OT_BOOL         | Print out        | casadi::Implicit |
|                  |                 | statistics after | FixedStepIntegra |
|                  |                 | integration      | tor              |
+------------------+-----------------+------------------+------------------+
| rootfinder       | OT_STRING       | An implicit      | casadi::Implicit |
|                  |                 | function solver  | FixedStepIntegra |
|                  |                 |                  | tor              |
+------------------+-----------------+------------------+------------------+
| rootfinder_optio | OT_DICT         | Options to be    | casadi::Implicit |
| ns               |                 | passed to the    | FixedStepIntegra |
|                  |                 | NLP Solver       | tor              |
+------------------+-----------------+------------------+------------------+
| specific_options | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | specific auto-   | nction           |
|                  |                 | generated        |                  |
|                  |                 | functions,       |                  |
|                  |                 | overwriting the  |                  |
|                  |                 | defaults from    |                  |
|                  |                 | common_options.  |                  |
|                  |                 | Nested           |                  |
|                  |                 | dictionary.      |                  |
+------------------+-----------------+------------------+------------------+
| t0               | OT_DOUBLE       | Beginning of the | casadi::Implicit |
|                  |                 | time horizon     | FixedStepIntegra |
|                  |                 |                  | tor              |
+------------------+-----------------+------------------+------------------+
| tf               | OT_DOUBLE       | End of the time  | casadi::Implicit |
|                  |                 | horizon          | FixedStepIntegra |
|                  |                 |                  | tor              |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: integrator_impl.hpp ";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::getFullJacobian "[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::alloc "[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::codegen_incref "[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::repr "[INTERNAL]
Print.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::weak "[INTERNAL]
Get a weak reference to the object.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::q "[INTERNAL] ";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::p "[INTERNAL] ";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::size2_out "[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::t "[INTERNAL] ";

%feature("docstring")
casadi::ImplicitFixedStepIntegrator::~ImplicitFixedStepIntegrator "[INTERNAL]  Destructor.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::z "[INTERNAL] ";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::x "[INTERNAL] ";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::symbolicFwdSeed "[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::clear_memory "[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::verbose "[INTERNAL]  Verbose mode?

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::name_in "[INTERNAL]  Get input scheme name by index.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::sp_rev "[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::reset "[INTERNAL]  Reset the forward problem.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::alloc_w "[INTERNAL]  Ensure required length of w field.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::slice "[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::mx_out "[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::getAlgorithmSize
"[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::tang_sx "[INTERNAL]  Tangent expression.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::checkArg "[INTERNAL]  Check if input arguments have correct length and dimensions.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::matchingArg "[INTERNAL]  Check if input arguments that needs to be replaced.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::size2_in "[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::replaceArg "[INTERNAL]  Replace 0-by-0 inputs.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::sx_in "[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::alloc_memory "[INTERNAL]  Create memory block.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::sp_jac_dae "[INTERNAL]  Create sparsity pattern of the extended Jacobian (forward
problem)

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::has_free "[INTERNAL]  Does the function have free variables.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::print_stats "[INTERNAL]  Print solver statistics.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::free_memory "[INTERNAL]  Free memory block.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::finalize "[INTERNAL]  Finalize initialization.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::sz_iw "[INTERNAL]  Get required length of iw field.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::generate_lifted "[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::checkout "[INTERNAL]  Checkout a memory object.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::which_depends "[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::expand "[INTERNAL] ";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::setJacobian "[INTERNAL]  Return Jacobian function.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::factory "[INTERNAL] ";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::getExplicitB "[INTERNAL]  Get explicit dynamics (backward problem)

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::tang_mx "[INTERNAL]  Tangent expression.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::map_mx "[INTERNAL]  Parallel evaluation.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::get_sparsity_out
"[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::addShorthand "[INTERNAL]  Generate shorthand macro.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::print "[INTERNAL]  Print.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::matchingRes "[INTERNAL]  Check if output arguments that needs to be replaced.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::getWorkSize "[INTERNAL]  Get the length of the work vector.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::has_codegen "[INTERNAL]  Is codegen supported?

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::name "[INTERNAL]
Name of the function.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::wrap "[INTERNAL]
Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::print_dimensions
"[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::hasFullJacobian "[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::_setup "[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::codegen_decref "[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::getJacSparsity "[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::replaceAdjSeed "[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::has_sprev "[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::free_sx "[INTERNAL]  Get free variables (SX)

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::size1_out "[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::setupFG "[INTERNAL]  Setup F and G.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::eval_sx "[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::monitored "[INTERNAL] ";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::getHessian "[INTERNAL]  Return Hessian function.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::getExplicit "[INTERNAL]  Get explicit dynamics.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::sp_fwd "[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::get_name_out "[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::jac_sx "[INTERNAL]  Jacobian expression.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::oracle "[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::simplifiedCall "[INTERNAL]  Use simplified signature.

";

%feature("docstring")
casadi::ImplicitFixedStepIntegrator::getJacSparsityHierarchical "[INTERNAL]
A flavor of getJacSparsity that does hierarchical block structure
recognition.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::aug_fwd "[INTERNAL]  Generate a augmented DAE system with nfwd forward sensitivities.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::sparsity_jac "[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::get_n_reverse "[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")
casadi::ImplicitFixedStepIntegrator::getJacSparsityHierarchicalSymm "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::checkInputs "[INTERNAL]  Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::get_function "[INTERNAL] ";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::set_jac_sparsity
"[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::adjViaJac "[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")
casadi::ImplicitFixedStepIntegrator::generate_dependencies "[INTERNAL]
Export / Generate C code for the generated functions.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::size_in "[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::print_free "[INTERNAL]  Print free variables.

";

%feature("docstring")
casadi::ImplicitFixedStepIntegrator::generateDeclarations "[INTERNAL]
Generate code for the declarations of the C function.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::self "[INTERNAL]
Get a public class instance.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::nnz_out "[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::signature "[INTERNAL]  Code generate the function.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::fullJacobian "[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::generateMeta "[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::n_nodes "[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::getAtomicInput "[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::eval "[INTERNAL]
evaluate

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::hess_sx "[INTERNAL]  Hessian expression.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::getPartition "[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::simple "[INTERNAL]  Evaluate numerically, simplied syntax.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::grad_mx "[INTERNAL]  Gradient expression.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::mapsum_mx "[INTERNAL]  Parallel evaluation.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::hasDerivative "[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")
casadi::ImplicitFixedStepIntegrator::getAdaptorSolverName "[INTERNAL]
Obtain solver name from Adaptor.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::has_function "[INTERNAL] ";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::log "

>  void casadi::FunctionInternal::log(const std::string &msg) const 
------------------------------------------------------------------------
[INTERNAL] 
Log the status of the solver.

>  void casadi::FunctionInternal::log(const std::string &fcn, const std::string &msg) const 
------------------------------------------------------------------------
[INTERNAL] 
Log the status of the solver, function given.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::call_reverse "[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::free_mx "[INTERNAL]  Get free variables ( MX)

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::_get_stats "[INTERNAL]  Get all statistics

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::alloc_res "[INTERNAL]  Ensure required length of res field.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::sz_work "[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::hessian "[INTERNAL]  Return Hessian function.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::construct "[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::eval_mx "[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::sz_arg "[INTERNAL]  Get required length of arg field.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::setup "[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::reverse "[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::_call "[INTERNAL]   Call a function, overloaded.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::numel_in "[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::set_temp "[INTERNAL]  Set the work vectors.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::is_a "[INTERNAL]
Check if the function is of a particular type.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::jac_mx "[INTERNAL]  Jacobian expression.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::getGradient "[INTERNAL]  Return gradient function.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::get_reverse "[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::getTangent "[INTERNAL]  Return tangent function.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::addDependency "[INTERNAL]  Add a dependent function.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::_set_temp "[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::rp "[INTERNAL]
";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::rq "[INTERNAL]
";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::get_forward "[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::rz "[INTERNAL]
";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::get_n_in "[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::rx "[INTERNAL]
";

%feature("docstring")
casadi::ImplicitFixedStepIntegrator::getAtomicOperation "[INTERNAL]  Get an
atomic operation operator index.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::n_mem "[INTERNAL]  Maximum number of memory objects.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::call_forward "[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::plugin_name "[INTERNAL] ";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::generateFunction
"[INTERNAL]  Generate code the function.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::gradient "[INTERNAL]  Return gradient function.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::size_out "[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::get_n_out "[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::sp_jac_rdae "[INTERNAL]  Create sparsity pattern of the extended Jacobian (backward
problem)

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::get_name_in "[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::name_out "[INTERNAL]  Get output scheme name by index.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::calc_function "[INTERNAL] ";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::mx_in "[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::codegen_name "[INTERNAL]  Get name in codegen.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::aug_adj "[INTERNAL]  Generate a augmented DAE system with nadj adjoint sensitivities.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::create_function "[INTERNAL]  Create an oracle function

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::get_n_forward "[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::sparsity_out "[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::symbolicAdjSeed "[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::resetB "[INTERNAL]  Reset the backward problem and take time to tf.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::has_spfwd "[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::checkRes "[INTERNAL]  Check if output arguments have correct length and dimensions.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::jacobian "[INTERNAL]  Return Jacobian function.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::numel_out "[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::retreat "[INTERNAL]  Retreat solution in time.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::default_in "[INTERNAL]  Get default input value.

";

%feature("docstring")
casadi::ImplicitFixedStepIntegrator::ImplicitFixedStepIntegrator "[INTERNAL]  Constructor.

";


// File: classcasadi_1_1ImplicitToNlp.xml
%feature("docstring") casadi::ImplicitToNlp::create_function "[INTERNAL]
Create an oracle function

";

%feature("docstring") casadi::ImplicitToNlp::print_fstats "[INTERNAL]
Print statistics.

";

%feature("docstring") casadi::ImplicitToNlp::ImplicitToNlp "[INTERNAL]
Constructor.

";

%feature("docstring") casadi::ImplicitToNlp::mx_out "[INTERNAL]  Get
function input(s) and output(s)

";

%feature("docstring") casadi::ImplicitToNlp::sz_iw "[INTERNAL]  Get
required length of iw field.

";

%feature("docstring") casadi::ImplicitToNlp::mapsum_mx "[INTERNAL]
Parallel evaluation.

";

%feature("docstring") casadi::ImplicitToNlp::getAlgorithmSize "[INTERNAL]
Get the number of atomic operations.

";

%feature("docstring") casadi::ImplicitToNlp::sx_in "[INTERNAL]  Get
function input(s) and output(s)

";

%feature("docstring") casadi::ImplicitToNlp::which_depends "[INTERNAL]
Which variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::ImplicitToNlp::free_mx "[INTERNAL]  Get free
variables ( MX)

";

%feature("docstring") casadi::ImplicitToNlp::n_out "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::ImplicitToNlp::free_memory "[INTERNAL]  Free
memory block.

";

%feature("docstring") casadi::ImplicitToNlp::sz_w "[INTERNAL]  Get required
length of w field.

";

%feature("docstring") casadi::ImplicitToNlp::has_spfwd "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::ImplicitToNlp::symbolicFwdSeed "[INTERNAL]
Symbolic expressions for the forward seeds.

";

%feature("docstring") casadi::ImplicitToNlp::getAtomicOperation "[INTERNAL]
Get an atomic operation operator index.

";

%feature("docstring") casadi::ImplicitToNlp::matchingRes "[INTERNAL]  Check
if output arguments that needs to be replaced.

";

%feature("docstring") casadi::ImplicitToNlp::sparsity_out "[INTERNAL]  Get
sparsity of a given output.

";

%feature("docstring") casadi::ImplicitToNlp::sz_work "[INTERNAL]  Get
number of temporary variables needed.

";

%feature("docstring") casadi::ImplicitToNlp::size1_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::ImplicitToNlp::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::ImplicitToNlp::symbolicOutput "[INTERNAL]
Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::ImplicitToNlp::free_sx "[INTERNAL]  Get free
variables (SX)

";

%feature("docstring") casadi::ImplicitToNlp::getJacobian "[INTERNAL]
Return Jacobian function.

";

%feature("docstring") casadi::ImplicitToNlp::call_forward "[INTERNAL]
Forward mode AD, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::ImplicitToNlp::set_function "[INTERNAL]
Register the function for evaluation and statistics gathering

";

%feature("docstring") casadi::ImplicitToNlp::nnz_out "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::ImplicitToNlp::index_in "[INTERNAL]  Get
input scheme index by name.

";

%feature("docstring") casadi::ImplicitToNlp::generate_lifted "[INTERNAL]
Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::ImplicitToNlp::setJacobian "[INTERNAL]
Return Jacobian function.

";

%feature("docstring") casadi::ImplicitToNlp::eval_name "[INTERNAL]  Get
name of the evaluation function.

";

%feature("docstring") casadi::ImplicitToNlp::addShorthand "[INTERNAL]
Generate shorthand macro.

";

%feature("docstring") casadi::ImplicitToNlp::getTangent "[INTERNAL]  Return
tangent function.

";

%feature("docstring") casadi::ImplicitToNlp::construct "[INTERNAL]
Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::ImplicitToNlp::tangent "[INTERNAL]  Return
tangent function.

";

%feature("docstring") casadi::ImplicitToNlp::alloc_res "[INTERNAL]  Ensure
required length of res field.

";

%feature("docstring") casadi::ImplicitToNlp::sx_out "[INTERNAL]  Get
function input(s) and output(s)

";

%feature("docstring") casadi::ImplicitToNlp::replaceFwdSeed "[INTERNAL]
Replace 0-by-0 forward seeds.

";

%feature("docstring") casadi::ImplicitToNlp::name_out "[INTERNAL]  Get
output scheme name by index.

";

%feature("docstring") casadi::ImplicitToNlp "

'nlp' plugin for Rootfinder

Use an Nlpsol as Rootfinder solver

>List of available options

+----------------+-----------+---------------------------------+
|       Id       |   Type    |           Description           |
+================+===========+=================================+
| nlpsol         | OT_STRING | Name of solver.                 |
+----------------+-----------+---------------------------------+
| nlpsol_options | OT_DICT   | Options to be passed to solver. |
+----------------+-----------+---------------------------------+

Joris Gillis

>List of available options

+-------------------+--------------+-------------------+-------------------+
|        Id         |     Type     |    Description    |      Used in      |
+===================+==============+===================+===================+
| constraints       | OT_INTVECTOR | Constrain the     | casadi::Rootfinde |
|                   |              | unknowns. 0       | r                 |
|                   |              | (default): no     |                   |
|                   |              | constraint on ui, |                   |
|                   |              | 1: ui >= 0.0, -1: |                   |
|                   |              | ui <= 0.0, 2: ui  |                   |
|                   |              | > 0.0, -2: ui <   |                   |
|                   |              | 0.0.              |                   |
+-------------------+--------------+-------------------+-------------------+
| implicit_input    | OT_INT       | Index of the      | casadi::Rootfinde |
|                   |              | input that        | r                 |
|                   |              | corresponds to    |                   |
|                   |              | the actual root-  |                   |
|                   |              | finding           |                   |
+-------------------+--------------+-------------------+-------------------+
| implicit_output   | OT_INT       | Index of the      | casadi::Rootfinde |
|                   |              | output that       | r                 |
|                   |              | corresponds to    |                   |
|                   |              | the actual root-  |                   |
|                   |              | finding           |                   |
+-------------------+--------------+-------------------+-------------------+
| jacobian_function | OT_FUNCTION  | Function object   | casadi::Rootfinde |
|                   |              | for calculating   | r                 |
|                   |              | the Jacobian      |                   |
|                   |              | (autogenerated by |                   |
|                   |              | default)          |                   |
+-------------------+--------------+-------------------+-------------------+
| linear_solver     | OT_STRING    | User-defined      | casadi::Rootfinde |
|                   |              | linear solver     | r                 |
|                   |              | class. Needed for |                   |
|                   |              | sensitivities.    |                   |
+-------------------+--------------+-------------------+-------------------+
| linear_solver_opt | OT_DICT      | Options to be     | casadi::Rootfinde |
| ions              |              | passed to the     | r                 |
|                   |              | linear solver.    |                   |
+-------------------+--------------+-------------------+-------------------+
| nlpsol            | OT_STRING    | Name of solver.   | casadi::ImplicitT |
|                   |              |                   | oNlp              |
+-------------------+--------------+-------------------+-------------------+
| nlpsol_options    | OT_DICT      | Options to be     | casadi::ImplicitT |
|                   |              | passed to solver. | oNlp              |
+-------------------+--------------+-------------------+-------------------+

Diagrams
--------



C++ includes: implicit_to_nlp.hpp ";

%feature("docstring") casadi::ImplicitToNlp::release "[INTERNAL]  Release a
memory object.

";

%feature("docstring") casadi::ImplicitToNlp::codegen_name "[INTERNAL]  Get
name in codegen.

";

%feature("docstring") casadi::ImplicitToNlp::matchingArg "[INTERNAL]  Check
if input arguments that needs to be replaced.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::ImplicitToNlp::solve "[INTERNAL]   Solve the
system of equations and calculate derivatives.

";

%feature("docstring") casadi::ImplicitToNlp::get_options "[INTERNAL]
Options.

";

%feature("docstring") casadi::ImplicitToNlp::jit_dependencies "[INTERNAL]
JIT for dependencies.

";

%feature("docstring") casadi::ImplicitToNlp::default_in "[INTERNAL]  Get
default input value.

";

%feature("docstring") casadi::ImplicitToNlp::repr "[INTERNAL]  Print.

";

%feature("docstring") casadi::ImplicitToNlp::print_option "[INTERNAL]
Print all information there is to know about a certain option.

";

%feature("docstring") casadi::ImplicitToNlp::init_memory "[INTERNAL]
Initalize memory block.

";

%feature("docstring") casadi::ImplicitToNlp::sparsity_jac "[INTERNAL]  Get,
if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::ImplicitToNlp::get_name_in "[INTERNAL]  Names
of function input and outputs.

";

%feature("docstring") casadi::ImplicitToNlp::is_a "[INTERNAL]  Check if the
function is of a particular type.

";

%feature("docstring") casadi::ImplicitToNlp::name_in "[INTERNAL]  Get input
scheme name by index.

";

%feature("docstring") casadi::ImplicitToNlp::has_codegen "[INTERNAL]  Is
codegen supported?

";

%feature("docstring") casadi::ImplicitToNlp::addDependency "[INTERNAL]  Add
a dependent function.

";

%feature("docstring") casadi::ImplicitToNlp::sz_res "[INTERNAL]  Get
required length of res field.

";

%feature("docstring") casadi::ImplicitToNlp::index_out "[INTERNAL]  Get
output scheme index by name.

";

%feature("docstring") casadi::ImplicitToNlp::print_free "[INTERNAL]  Print
free variables.

";

%feature("docstring") casadi::ImplicitToNlp::init "[INTERNAL]  Initialize.

";

%feature("docstring") casadi::ImplicitToNlp::size_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::ImplicitToNlp::replaceRes "[INTERNAL]
Replace 0-by-0 outputs.

";

%feature("docstring") casadi::ImplicitToNlp::getJacSparsityHierarchical "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::ImplicitToNlp::print_options "[INTERNAL]
Print list of options.

";

%feature("docstring") casadi::ImplicitToNlp::call "[INTERNAL]   Call a
function, templated.

";

%feature("docstring") casadi::ImplicitToNlp::sp_fwd "[INTERNAL]  Propagate
sparsity forward.

";

%feature("docstring") casadi::ImplicitToNlp::sparsity_in "[INTERNAL]  Get
sparsity of a given input.

";

%feature("docstring") casadi::ImplicitToNlp::verbose "[INTERNAL]  Verbose
mode?

";

%feature("docstring") casadi::ImplicitToNlp::memory "[INTERNAL]  Memory
objects.

";

%feature("docstring") casadi::ImplicitToNlp::has_free "[INTERNAL]  Does the
function have free variables.

";

%feature("docstring") casadi::ImplicitToNlp::symbolicAdjSeed "[INTERNAL]
Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::ImplicitToNlp::~ImplicitToNlp "[INTERNAL]
Destructor.

";

%feature("docstring") casadi::ImplicitToNlp::hasDerivative "[INTERNAL]  Can
derivatives be calculated in any way?

";

%feature("docstring") casadi::ImplicitToNlp::alloc_arg "[INTERNAL]  Ensure
required length of arg field.

";

%feature("docstring") casadi::ImplicitToNlp::setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";

%feature("docstring") casadi::ImplicitToNlp::get_n_out "[INTERNAL]  Number
of function inputs and outputs.

";

%feature("docstring") casadi::ImplicitToNlp::get_forward "[INTERNAL]
Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::ImplicitToNlp::get_n_reverse "[INTERNAL]
Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::ImplicitToNlp::getHessian "[INTERNAL]  Return
Hessian function.

";

%feature("docstring") casadi::ImplicitToNlp::n_in "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::ImplicitToNlp::alloc_memory "[INTERNAL]
Create memory block.

";

%feature("docstring") casadi::ImplicitToNlp::size_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::ImplicitToNlp::log "

>  void casadi::FunctionInternal::log(const std::string &msg) const 
------------------------------------------------------------------------
[INTERNAL] 
Log the status of the solver.

>  void casadi::FunctionInternal::log(const std::string &fcn, const std::string &msg) const 
------------------------------------------------------------------------
[INTERNAL] 
Log the status of the solver, function given.

";

%feature("docstring") casadi::ImplicitToNlp::alloc_w "[INTERNAL]  Ensure
required length of w field.

";

%feature("docstring") casadi::ImplicitToNlp::getAtomicInput "[INTERNAL]
Get the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::ImplicitToNlp::simplifiedCall "[INTERNAL]
Use simplified signature.

";

%feature("docstring") casadi::ImplicitToNlp::checkout "[INTERNAL]  Checkout
a memory object.

";

%feature("docstring") casadi::ImplicitToNlp::getAdaptorSolverName "[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring") casadi::ImplicitToNlp::getJacSparsityHierarchicalSymm
"[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::ImplicitToNlp::set_jac_sparsity "[INTERNAL]
Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::ImplicitToNlp::calc_function "[INTERNAL] ";

%feature("docstring") casadi::ImplicitToNlp::set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::ImplicitToNlp::type_name "[INTERNAL]  Get
type name.

";

%feature("docstring") casadi::ImplicitToNlp::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::ImplicitToNlp::tang_sx "[INTERNAL]  Tangent
expression.

";

%feature("docstring") casadi::ImplicitToNlp::numel_out "[INTERNAL]  Number
of input/output elements.

";

%feature("docstring") casadi::ImplicitToNlp::getFullJacobian "[INTERNAL]
Return Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::ImplicitToNlp::plugin_name "[INTERNAL] ";

%feature("docstring") casadi::ImplicitToNlp::generateDeclarations "[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring") casadi::ImplicitToNlp::grad_mx "[INTERNAL]  Gradient
expression.

";

%feature("docstring") casadi::ImplicitToNlp::codegen_incref "[INTERNAL]
Codegen incref for dependencies.

";

%feature("docstring") casadi::ImplicitToNlp::has_sprev "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::ImplicitToNlp::factory "[INTERNAL] ";

%feature("docstring") casadi::ImplicitToNlp::size1_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::ImplicitToNlp::get_reverse "[INTERNAL]
Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::ImplicitToNlp::set_temp "[INTERNAL]  Set the
work vectors.

";

%feature("docstring") casadi::ImplicitToNlp::getAtomicInputReal "[INTERNAL]
Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::ImplicitToNlp::eval "[INTERNAL]  Evaluate
numerically.

";

%feature("docstring") casadi::ImplicitToNlp::print_dimensions "[INTERNAL]
Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::ImplicitToNlp::generateFunction "[INTERNAL]
Generate code the function.

";

%feature("docstring") casadi::ImplicitToNlp::slice "[INTERNAL]  returns a
new function with a selection of inputs/outputs of the original

";

%feature("docstring") casadi::ImplicitToNlp::checkArg "[INTERNAL]  Check if
input arguments have correct length and dimensions.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::ImplicitToNlp::getGradient "[INTERNAL]
Return gradient function.

";

%feature("docstring") casadi::ImplicitToNlp::sz_arg "[INTERNAL]  Get
required length of arg field.

";

%feature("docstring") casadi::ImplicitToNlp::n_mem "[INTERNAL]  Maximum
number of memory objects.

";

%feature("docstring") casadi::ImplicitToNlp::getAtomicOutput "[INTERNAL]
Get the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::ImplicitToNlp::eval_forward "[INTERNAL]
Create call to (cached) derivative function, forward mode.

";

%feature("docstring") casadi::ImplicitToNlp::sp_weight "[INTERNAL]
Weighting factor for chosing forward/reverse mode, sparsity propagation.

";

%feature("docstring") casadi::ImplicitToNlp::eval_sx "[INTERNAL]  Evaluate
with symbolic scalars.

";

%feature("docstring") casadi::ImplicitToNlp::ad_weight "[INTERNAL]
Weighting factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::ImplicitToNlp::checkRes "[INTERNAL]  Check if
output arguments have correct length and dimensions.

";

%feature("docstring") casadi::ImplicitToNlp::has_function "[INTERNAL] ";

%feature("docstring") casadi::ImplicitToNlp::getWorkSize "[INTERNAL]  Get
the length of the work vector.

";

%feature("docstring") casadi::ImplicitToNlp::alloc "[INTERNAL]  Ensure work
vectors long enough to evaluate function.

";

%feature("docstring") casadi::ImplicitToNlp::get_sparsity_in "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::ImplicitToNlp::monitored "[INTERNAL] ";

%feature("docstring") casadi::ImplicitToNlp::hessian "[INTERNAL]  Return
Hessian function.

";

%feature("docstring") casadi::ImplicitToNlp::jacobian "[INTERNAL]  Return
Jacobian function.

";

%feature("docstring") casadi::ImplicitToNlp::_call "[INTERNAL]   Call a
function, overloaded.

";

%feature("docstring") casadi::ImplicitToNlp::size2_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::ImplicitToNlp::replaceAdjSeed "[INTERNAL]
Replace 0-by-0 reverse seeds.

";

%feature("docstring") casadi::ImplicitToNlp::signature "[INTERNAL]  Code
generate the function.

";

%feature("docstring") casadi::ImplicitToNlp::getJacSparsity "[INTERNAL]
Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::ImplicitToNlp::get_function "[INTERNAL] ";

%feature("docstring") casadi::ImplicitToNlp::checkInputs "[INTERNAL]  Check
if the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::ImplicitToNlp::simple "[INTERNAL]  Evaluate
numerically, simplied syntax.

";

%feature("docstring") casadi::ImplicitToNlp::finalize "[INTERNAL]  Finalize
initialization.

";

%feature("docstring") casadi::ImplicitToNlp::jac_mx "[INTERNAL]  Jacobian
expression.

";

%feature("docstring") casadi::ImplicitToNlp::alloc_iw "[INTERNAL]  Ensure
required length of iw field.

";

%feature("docstring") casadi::ImplicitToNlp::codegen_decref "[INTERNAL]
Codegen decref for dependencies.

";

%feature("docstring") casadi::ImplicitToNlp::generateMeta "[INTERNAL]
Generate meta-information allowing a user to evaluate a generated function.

";

%feature("docstring") casadi::ImplicitToNlp::fwdViaJac "[INTERNAL]
Calculate derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::ImplicitToNlp::reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::ImplicitToNlp::size2_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::ImplicitToNlp::sp_rev "[INTERNAL]  Propagate
sparsity backwards.

";

%feature("docstring") casadi::ImplicitToNlp::_set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::ImplicitToNlp::hasFullJacobian "[INTERNAL]
Return Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::ImplicitToNlp::n_nodes "[INTERNAL]  Number of
nodes in the algorithm.

";

%feature("docstring") casadi::ImplicitToNlp::_set_temp "[INTERNAL]  Set the
(temporary) work vectors.

";

%feature("docstring") casadi::ImplicitToNlp::map_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::ImplicitToNlp::generateBody "[INTERNAL]
Generate code for the function body.

";

%feature("docstring") casadi::ImplicitToNlp::get_sparsity_out "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::ImplicitToNlp::fullJacobian "[INTERNAL]
Return Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::ImplicitToNlp::eval_reverse "[INTERNAL]
Create call to (cached) derivative function, reverse mode.

";

%feature("docstring") casadi::ImplicitToNlp::nnz_in "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::ImplicitToNlp::tang_mx "[INTERNAL]  Tangent
expression.

";

%feature("docstring") casadi::ImplicitToNlp::hess_sx "[INTERNAL]  Hessian
expression.

";

%feature("docstring") casadi::ImplicitToNlp::replaceArg "[INTERNAL]
Replace 0-by-0 inputs.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::ImplicitToNlp::wrap "[INTERNAL]  Wrap in an
Function instance consisting of only one MX call.

";

%feature("docstring") casadi::ImplicitToNlp::gradient "[INTERNAL]  Return
gradient function.

";

%feature("docstring") casadi::ImplicitToNlp::generate_dependencies "[INTERNAL]  Export / Generate C code for the generated functions.

";

%feature("docstring") casadi::ImplicitToNlp::get_name_out "[INTERNAL]
Names of function input and outputs.

";

%feature("docstring") casadi::ImplicitToNlp::expand "[INTERNAL] ";

%feature("docstring") casadi::ImplicitToNlp::get_n_forward "[INTERNAL]
Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::ImplicitToNlp::get_stats "[INTERNAL]  Get all
statistics.

";

%feature("docstring") casadi::ImplicitToNlp::_eval "

>  void casadi::FunctionInternal::_eval(const double **arg, double **res, int *iw, double *w, int mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate numerically.

>  void casadi::FunctionInternal::_eval(const SXElem **arg, SXElem **res, int *iw, SXElem *w, int mem) const

>  void casadi::FunctionInternal::_eval(const bvec_t **arg, bvec_t **res, int *iw, bvec_t *w, int mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

%feature("docstring") casadi::ImplicitToNlp::getPartition "[INTERNAL]  Get
the unidirectional or bidirectional partition.

";

%feature("docstring") casadi::ImplicitToNlp::numel_in "[INTERNAL]  Number
of input/output elements.

";

%feature("docstring") casadi::ImplicitToNlp::adjViaJac "[INTERNAL]
Calculate derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::ImplicitToNlp::grad_sx "[INTERNAL]  Gradient
expression.

";

%feature("docstring") casadi::ImplicitToNlp::_get_stats "[INTERNAL]  Get
all statistics

";

%feature("docstring") casadi::ImplicitToNlp::name "[INTERNAL]  Name of the
function.

";

%feature("docstring") casadi::ImplicitToNlp::get_n_in "[INTERNAL]  Number
of function inputs and outputs.

";

%feature("docstring") casadi::ImplicitToNlp::oracle "[INTERNAL]  Get
oracle.

";

%feature("docstring") casadi::ImplicitToNlp::eval_mx "[INTERNAL]  Evaluate
with symbolic matrices.

";

%feature("docstring") casadi::ImplicitToNlp::clear_memory "[INTERNAL]
Clear all memory (called from destructor)

";

%feature("docstring") casadi::ImplicitToNlp::_setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";

%feature("docstring") casadi::ImplicitToNlp::self "[INTERNAL]  Get a public
class instance.

";

%feature("docstring") casadi::ImplicitToNlp::forward "[INTERNAL]  Return
function that calculates forward derivatives forward(nfwd) returns a cached
instance if available, and calls  Function get_forward(int nfwd) if no
cached version is available.

";

%feature("docstring") casadi::ImplicitToNlp::getJacSparsityGen "[INTERNAL]
Get the sparsity pattern, forward mode.

";

%feature("docstring") casadi::ImplicitToNlp::mx_in "[INTERNAL]  Get
function input(s) and output(s)

";

%feature("docstring") casadi::ImplicitToNlp::jac_sx "[INTERNAL]  Jacobian
expression.

";

%feature("docstring") casadi::ImplicitToNlp::print "[INTERNAL]  Print.

";

%feature("docstring") casadi::ImplicitToNlp::call_reverse "[INTERNAL]
Reverse mode, virtual functions overloaded in derived classes.

";


// File: classcasadi_1_1Importer.xml
%feature("docstring") casadi::Importer::repr "

Print a representation of the object.

";

%feature("docstring") casadi::Importer::body "

Get the function body, if inlined.

";

%feature("docstring") casadi::Importer::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::Importer::has_meta "

Does a meta entry exist?

";

%feature("docstring") casadi::Importer::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::Importer "

Importer.

Just-in-time compilation of code

General information
===================



List of plugins
===============



- clang

- shell

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
Importer.doc(\"myextraplugin\")



--------------------------------------------------------------------------------

clang
-----



Interface to the JIT compiler CLANG

>List of available options

+--------------+-----------------+-----------------------------------------+
|      Id      |      Type       |               Description               |
+==============+=================+=========================================+
| flags        | OT_STRINGVECTOR | Compile flags for the JIT compiler.     |
|              |                 | Default: None                           |
+--------------+-----------------+-----------------------------------------+
| include_path | OT_STRING       | Include paths for the JIT compiler. The |
|              |                 | include directory shipped with CasADi   |
|              |                 | will be automatically appended.         |
+--------------+-----------------+-----------------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

shell
-----



Interface to the JIT compiler SHELL

>List of available options

+----------------+-----------------+---------------------------------------+
|       Id       |      Type       |              Description              |
+================+=================+=======================================+
| cleanup        | OT_BOOL         | Cleanup temporary files when          |
|                |                 | unloading. Default: true              |
+----------------+-----------------+---------------------------------------+
| compiler       | OT_STRING       | Compiler command                      |
+----------------+-----------------+---------------------------------------+
| compiler_flags | OT_STRINGVECTOR | Alias for 'compiler_flags'            |
+----------------+-----------------+---------------------------------------+
| compiler_setup | OT_STRING       | Compiler setup command. Intended to   |
|                |                 | be fixed. The 'flag' option is the    |
|                |                 | prefered way to set custom flags.     |
+----------------+-----------------+---------------------------------------+
| flags          | OT_STRINGVECTOR | Compile flags for the JIT compiler.   |
|                |                 | Default: None                         |
+----------------+-----------------+---------------------------------------+
| folder         | OT_STRING       | Folder to put temporary objects in.   |
+----------------+-----------------+---------------------------------------+
| linker         | OT_STRING       | Linker command                        |
+----------------+-----------------+---------------------------------------+
| linker_flags   | OT_STRINGVECTOR | Linker flags for the JIT compiler.    |
|                |                 | Default: None                         |
+----------------+-----------------+---------------------------------------+
| linker_setup   | OT_STRING       | Linker setup command. Intended to be  |
|                |                 | fixed. The 'flag' option is the       |
|                |                 | prefered way to set custom flags.     |
+----------------+-----------------+---------------------------------------+

--------------------------------------------------------------------------------



Joris Gillis

C++ includes: importer.hpp ";

%feature("docstring") casadi::Importer::plugin_name "

Query plugin name.

";

%feature("docstring") casadi::Importer::has_function "";

%feature("docstring") casadi::Importer::Importer "

>  casadi::Importer::Importer()
------------------------------------------------------------------------

Default constructor.

>  casadi::Importer::Importer(const std::string &name, const std::string &compiler, const Dict &opts=Dict())
------------------------------------------------------------------------

Importer factory.

";

%feature("docstring") casadi::Importer::is_null "

Is a null pointer?

";

%feature("docstring") casadi::Importer::get_meta "

Get entry as a text.

";

%feature("docstring") casadi::Importer::print "

Print a description of the object.

";

%feature("docstring") casadi::Importer::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::Importer::__hash__ "

Returns a number that is unique for a given Node. If the Object does not
point to any node, \"0\" is returned.

";

%feature("docstring") casadi::Importer::inlined "

Check if a function is inlined.

";


// File: classcasadi_1_1InfSX.xml


// File: classcasadi_1_1Input.xml


// File: classcasadi_1_1IntegerSX.xml


// File: classcasadi_1_1Integrator.xml
%feature("docstring") casadi::Integrator::has_function "[INTERNAL] ";

%feature("docstring") casadi::Integrator::name_out "[INTERNAL]  Get output
scheme name by index.

";

%feature("docstring") casadi::Integrator::get_n_reverse "[INTERNAL]
Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::Integrator::_set_temp "[INTERNAL]  Set the
(temporary) work vectors.

";

%feature("docstring") casadi::Integrator::size_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Integrator::getFullJacobian "[INTERNAL]
Return Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Integrator::set_function "[INTERNAL]
Register the function for evaluation and statistics gathering

";

%feature("docstring") casadi::Integrator::addShorthand "[INTERNAL]
Generate shorthand macro.

";

%feature("docstring") casadi::Integrator::aug_fwd "[INTERNAL]  Generate a
augmented DAE system with nfwd forward sensitivities.

";

%feature("docstring") casadi::Integrator::sz_iw "[INTERNAL]  Get required
length of iw field.

";

%feature("docstring") casadi::Integrator::has_free "[INTERNAL]  Does the
function have free variables.

";

%feature("docstring") casadi::Integrator::wrap "[INTERNAL]  Wrap in an
Function instance consisting of only one MX call.

";

%feature("docstring") casadi::Integrator::hessian "[INTERNAL]  Return
Hessian function.

";

%feature("docstring") casadi::Integrator::jacobian "[INTERNAL]  Return
Jacobian function.

";

%feature("docstring") casadi::Integrator::simplifiedCall "[INTERNAL]  Use
simplified signature.

";

%feature("docstring") casadi::Integrator::factory "[INTERNAL] ";

%feature("docstring") casadi::Integrator::print_option "[INTERNAL]  Print
all information there is to know about a certain option.

";

%feature("docstring") casadi::Integrator::size1_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::Integrator::z "[INTERNAL] ";

%feature("docstring") casadi::Integrator::x "[INTERNAL] ";

%feature("docstring") casadi::Integrator::n_out "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::Integrator::_setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";

%feature("docstring") casadi::Integrator::alloc_arg "[INTERNAL]  Ensure
required length of arg field.

";

%feature("docstring") casadi::Integrator::_call "[INTERNAL]   Call a
function, overloaded.

";

%feature("docstring") casadi::Integrator::eval_sx "[INTERNAL]  Evaluate
with symbolic scalars.

";

%feature("docstring") casadi::Integrator::q "[INTERNAL] ";

%feature("docstring") casadi::Integrator::p "[INTERNAL] ";

%feature("docstring") casadi::Integrator::print_free "[INTERNAL]  Print
free variables.

";

%feature("docstring") casadi::Integrator::t "[INTERNAL] ";

%feature("docstring") casadi::Integrator::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::Integrator::adjViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::Integrator::alloc_res "[INTERNAL]  Ensure
required length of res field.

";

%feature("docstring") casadi::Integrator::calc_function "[INTERNAL] ";

%feature("docstring") casadi::Integrator::simple "[INTERNAL]  Evaluate
numerically, simplied syntax.

";

%feature("docstring") casadi::Integrator::jit_dependencies "[INTERNAL]  JIT
for dependencies.

";

%feature("docstring") casadi::Integrator::replaceAdjSeed "[INTERNAL]
Replace 0-by-0 reverse seeds.

";

%feature("docstring") casadi::Integrator::is_a "[INTERNAL]  Check if the
function is of a particular type.

";

%feature("docstring") casadi::Integrator::setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";

%feature("docstring") casadi::Integrator::_get_stats "[INTERNAL]  Get all
statistics

";

%feature("docstring") casadi::Integrator::sx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Integrator::reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::Integrator::sparsity_jac "[INTERNAL]  Get, if
necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Integrator::mapsum_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::Integrator::nnz_in "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::Integrator::generate_dependencies "[INTERNAL]
Export / Generate C code for the generated functions.

";

%feature("docstring") casadi::Integrator::tangent "[INTERNAL]  Return
tangent function.

";

%feature("docstring") casadi::Integrator::matchingRes "[INTERNAL]  Check if
output arguments that needs to be replaced.

";

%feature("docstring") casadi::Integrator::resetB "[INTERNAL]  Reset the
backward problem.

";

%feature("docstring") casadi::Integrator::call "[INTERNAL]   Call a
function, templated.

";

%feature("docstring") casadi::Integrator::sp_rev "[INTERNAL]  Propagate
sparsity backwards.

";

%feature("docstring") casadi::Integrator::generateMeta "[INTERNAL]
Generate meta-information allowing a user to evaluate a generated function.

";

%feature("docstring") casadi::Integrator::get_n_out "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::Integrator::alloc_w "[INTERNAL]  Ensure
required length of w field.

";

%feature("docstring") casadi::Integrator::replaceRes "[INTERNAL]  Replace
0-by-0 outputs.

";

%feature("docstring") casadi::Integrator::getAtomicInput "[INTERNAL]  Get
the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::Integrator::hasFullJacobian "[INTERNAL]
Return Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Integrator::alloc_memory "[INTERNAL]  Create
memory block.

";

%feature("docstring") casadi::Integrator::matchingArg "[INTERNAL]  Check if
input arguments that needs to be replaced.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::Integrator::getPartition "[INTERNAL]  Get the
unidirectional or bidirectional partition.

";

%feature("docstring") casadi::Integrator::plugin_name "[INTERNAL] ";

%feature("docstring") casadi::Integrator::symbolicOutput "[INTERNAL]  Get a
vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::Integrator::fullJacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Integrator::codegen_name "[INTERNAL]  Get
name in codegen.

";

%feature("docstring") casadi::Integrator::print "[INTERNAL]  Print.

";

%feature("docstring") casadi::Integrator::gradient "[INTERNAL]  Return
gradient function.

";

%feature("docstring") casadi::Integrator::Integrator "[INTERNAL]
Constructor.

";

%feature("docstring") casadi::Integrator::sp_jac_dae "[INTERNAL]  Create
sparsity pattern of the extended Jacobian (forward problem)

";

%feature("docstring") casadi::Integrator::alloc_iw "[INTERNAL]  Ensure
required length of iw field.

";

%feature("docstring") casadi::Integrator::print_options "[INTERNAL]  Print
list of options.

";

%feature("docstring") casadi::Integrator::hasDerivative "[INTERNAL]  Can
derivatives be calculated in any way?

";

%feature("docstring") casadi::Integrator::call_reverse "[INTERNAL]  Reverse
mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Integrator::has_sprev "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Integrator::getJacSparsity "[INTERNAL]
Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Integrator::create_function "[INTERNAL]
Create an oracle function

";

%feature("docstring") casadi::Integrator::init_memory "[INTERNAL]
Initalize memory block.

";

%feature("docstring") casadi::Integrator::advance "[INTERNAL]  Advance
solution in time.

";

%feature("docstring") casadi::Integrator::retreat "[INTERNAL]  Retreat
solution in time.

";

%feature("docstring") casadi::Integrator::getJacSparsityGen "[INTERNAL]
Get the sparsity pattern, forward mode.

";

%feature("docstring") casadi::Integrator::fwdViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::Integrator::sz_w "[INTERNAL]  Get required
length of w field.

";

%feature("docstring") casadi::Integrator::log "

>  void casadi::FunctionInternal::log(const std::string &msg) const 
------------------------------------------------------------------------
[INTERNAL] 
Log the status of the solver.

>  void casadi::FunctionInternal::log(const std::string &fcn, const std::string &msg) const 
------------------------------------------------------------------------
[INTERNAL] 
Log the status of the solver, function given.

";

%feature("docstring") casadi::Integrator "

Internal storage for integrator related data.

Joel Andersson

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| augmented_option | OT_DICT         | Options to be    | casadi::Integrat |
| s                |                 | passed down to   | or               |
|                  |                 | the augmented    |                  |
|                  |                 | integrator, if   |                  |
|                  |                 | one is           |                  |
|                  |                 | constructed.     |                  |
+------------------+-----------------+------------------+------------------+
| common_options   | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | auto-generated   | nction           |
|                  |                 | functions        |                  |
+------------------+-----------------+------------------+------------------+
| expand           | OT_BOOL         | Replace MX with  | casadi::Integrat |
|                  |                 | SX expressions   | or               |
|                  |                 | in problem       |                  |
|                  |                 | formulation      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| grid             | OT_DOUBLEVECTOR | Time grid        | casadi::Integrat |
|                  |                 |                  | or               |
+------------------+-----------------+------------------+------------------+
| monitor          | OT_STRINGVECTOR | Set of user      | casadi::OracleFu |
|                  |                 | problem          | nction           |
|                  |                 | functions to be  |                  |
|                  |                 | monitored        |                  |
+------------------+-----------------+------------------+------------------+
| number_of_finite | OT_INT          | Number of finite | casadi::Integrat |
| _elements        |                 | elements         | or               |
+------------------+-----------------+------------------+------------------+
| output_t0        | OT_BOOL         | Output the state | casadi::Integrat |
|                  |                 | at the initial   | or               |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| print_stats      | OT_BOOL         | Print out        | casadi::Integrat |
|                  |                 | statistics after | or               |
|                  |                 | integration      |                  |
+------------------+-----------------+------------------+------------------+
| rootfinder       | OT_STRING       | An implicit      | casadi::Integrat |
|                  |                 | function solver  | or               |
+------------------+-----------------+------------------+------------------+
| rootfinder_optio | OT_DICT         | Options to be    | casadi::Integrat |
| ns               |                 | passed to the    | or               |
|                  |                 | NLP Solver       |                  |
+------------------+-----------------+------------------+------------------+
| specific_options | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | specific auto-   | nction           |
|                  |                 | generated        |                  |
|                  |                 | functions,       |                  |
|                  |                 | overwriting the  |                  |
|                  |                 | defaults from    |                  |
|                  |                 | common_options.  |                  |
|                  |                 | Nested           |                  |
|                  |                 | dictionary.      |                  |
+------------------+-----------------+------------------+------------------+
| t0               | OT_DOUBLE       | Beginning of the | casadi::Integrat |
|                  |                 | time horizon     | or               |
+------------------+-----------------+------------------+------------------+
| tf               | OT_DOUBLE       | End of the time  | casadi::Integrat |
|                  |                 | horizon          | or               |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: integrator_impl.hpp ";

%feature("docstring") casadi::Integrator::free_sx "[INTERNAL]  Get free
variables (SX)

";

%feature("docstring") casadi::Integrator::symbolicAdjSeed "[INTERNAL]
Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::Integrator::replaceArg "[INTERNAL]  Replace
0-by-0 inputs.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::Integrator::setStopTime "[INTERNAL]  Set stop
time for the integration.

";

%feature("docstring") casadi::Integrator::eval_mx "[INTERNAL]  Evaluate
with symbolic matrices.

";

%feature("docstring") casadi::Integrator::type_name "[INTERNAL]  Get type
name.

";

%feature("docstring") casadi::Integrator::has_spfwd "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Integrator::print_fstats "[INTERNAL]  Print
statistics.

";

%feature("docstring") casadi::Integrator::getAtomicOperation "[INTERNAL]
Get an atomic operation operator index.

";

%feature("docstring") casadi::Integrator::set_jac_sparsity "[INTERNAL]
Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Integrator::_set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::Integrator::set_temp "[INTERNAL]  Set the
work vectors.

";

%feature("docstring") casadi::Integrator::tang_sx "[INTERNAL]  Tangent
expression.

";

%feature("docstring") casadi::Integrator::eval_name "[INTERNAL]  Get name
of the evaluation function.

";

%feature("docstring") casadi::Integrator::sparsity_in "[INTERNAL]  Get
sparsity of a given input.

";

%feature("docstring") casadi::Integrator::verbose "[INTERNAL]  Verbose
mode?

";

%feature("docstring") casadi::Integrator::size_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::Integrator::getDerivativeOptions "[INTERNAL]
Set solver specific options to generated augmented integrators.

";

%feature("docstring") casadi::Integrator::nnz_out "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::Integrator::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::Integrator::sz_work "[INTERNAL]  Get number
of temporary variables needed.

";

%feature("docstring") casadi::Integrator::getJacSparsityHierarchicalSymm "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::Integrator::sp_jac_rdae "[INTERNAL]  Create
sparsity pattern of the extended Jacobian (backward problem)

";

%feature("docstring") casadi::Integrator::numel_out "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::Integrator::repr "[INTERNAL]  Print.

";

%feature("docstring") casadi::Integrator::getAlgorithmSize "[INTERNAL]  Get
the number of atomic operations.

";

%feature("docstring") casadi::Integrator::map_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::Integrator::n_nodes "[INTERNAL]  Number of
nodes in the algorithm.

";

%feature("docstring") casadi::Integrator::get_name_in "[INTERNAL]  Names of
function input and outputs.

";

%feature("docstring") casadi::Integrator::get_n_in "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::Integrator::forward "[INTERNAL]  Return
function that calculates forward derivatives forward(nfwd) returns a cached
instance if available, and calls  Function get_forward(int nfwd) if no
cached version is available.

";

%feature("docstring") casadi::Integrator::checkRes "[INTERNAL]  Check if
output arguments have correct length and dimensions.

";

%feature("docstring") casadi::Integrator::print_dimensions "[INTERNAL]
Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::Integrator::jac_mx "[INTERNAL]  Jacobian
expression.

";

%feature("docstring") casadi::Integrator::construct "[INTERNAL]  Construct
Prepares the function for evaluation.

";

%feature("docstring") casadi::Integrator::sp_fwd "[INTERNAL]  Propagate
sparsity forward.

";

%feature("docstring") casadi::Integrator::memory "[INTERNAL]  Memory
objects.

";

%feature("docstring") casadi::Integrator::getAtomicInputReal "[INTERNAL]
Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::Integrator::free_mx "[INTERNAL]  Get free
variables ( MX)

";

%feature("docstring") casadi::Integrator::getJacSparsityHierarchical "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::Integrator::get_n_forward "[INTERNAL]
Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::Integrator::checkArg "[INTERNAL]  Check if
input arguments have correct length and dimensions.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::Integrator::aug_adj "[INTERNAL]  Generate a
augmented DAE system with nadj adjoint sensitivities.

";

%feature("docstring") casadi::Integrator::signature "[INTERNAL]  Code
generate the function.

";

%feature("docstring") casadi::Integrator::generate_lifted "[INTERNAL]
Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::Integrator::sz_arg "[INTERNAL]  Get required
length of arg field.

";

%feature("docstring") casadi::Integrator::has_codegen "[INTERNAL]  Is
codegen supported?

";

%feature("docstring") casadi::Integrator::get_sparsity_out "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Integrator::n_mem "[INTERNAL]  Maximum number
of memory objects.

";

%feature("docstring") casadi::Integrator::~Integrator "[INTERNAL]
Destructor.

";

%feature("docstring") casadi::Integrator::codegen_incref "[INTERNAL]
Codegen incref for dependencies.

";

%feature("docstring") casadi::Integrator::codegen_decref "[INTERNAL]
Codegen decref for dependencies.

";

%feature("docstring") casadi::Integrator::mx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Integrator::print_stats "[INTERNAL]  Print
solver statistics.

";

%feature("docstring") casadi::Integrator::monitored "[INTERNAL] ";

%feature("docstring") casadi::Integrator::eval "[INTERNAL]  evaluate

";

%feature("docstring") casadi::Integrator::size2_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::Integrator::jac_sx "[INTERNAL]  Jacobian
expression.

";

%feature("docstring") casadi::Integrator::symbolicFwdSeed "[INTERNAL]
Symbolic expressions for the forward seeds.

";

%feature("docstring") casadi::Integrator::get_sparsity_in "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Integrator::_eval "

>  void casadi::FunctionInternal::_eval(const double **arg, double **res, int *iw, double *w, int mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate numerically.

>  void casadi::FunctionInternal::_eval(const SXElem **arg, SXElem **res, int *iw, SXElem *w, int mem) const

>  void casadi::FunctionInternal::_eval(const bvec_t **arg, bvec_t **res, int *iw, bvec_t *w, int mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

%feature("docstring") casadi::Integrator::oracle "[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::Integrator::replaceFwdSeed "[INTERNAL]
Replace 0-by-0 forward seeds.

";

%feature("docstring") casadi::Integrator::getAdaptorSolverName "[INTERNAL]
Obtain solver name from Adaptor.

";

%feature("docstring") casadi::Integrator::sparsity_out "[INTERNAL]  Get
sparsity of a given output.

";

%feature("docstring") casadi::Integrator::addDependency "[INTERNAL]  Add a
dependent function.

";

%feature("docstring") casadi::Integrator::name "[INTERNAL]  Name of the
function.

";

%feature("docstring") casadi::Integrator::setJacobian "[INTERNAL]  Return
Jacobian function.

";

%feature("docstring") casadi::Integrator::slice "[INTERNAL]  returns a new
function with a selection of inputs/outputs of the original

";

%feature("docstring") casadi::Integrator::finalize "[INTERNAL]  Finalize
initialization.

";

%feature("docstring") casadi::Integrator::size2_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::Integrator::getGradient "[INTERNAL]  Return
gradient function.

";

%feature("docstring") casadi::Integrator::hess_sx "[INTERNAL]  Hessian
expression.

";

%feature("docstring") casadi::Integrator::index_in "[INTERNAL]  Get input
scheme index by name.

";

%feature("docstring") casadi::Integrator::sx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Integrator::generateBody "[INTERNAL]
Generate code for the function body.

";

%feature("docstring") casadi::Integrator::ad_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::Integrator::grad_sx "[INTERNAL]  Gradient
expression.

";

%feature("docstring") casadi::Integrator::tang_mx "[INTERNAL]  Tangent
expression.

";

%feature("docstring") casadi::Integrator::getJacobian "[INTERNAL]  Return
Jacobian function.

";

%feature("docstring") casadi::Integrator::getAtomicOutput "[INTERNAL]  Get
the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::Integrator::alloc "[INTERNAL]  Ensure work
vectors long enough to evaluate function.

";

%feature("docstring") casadi::Integrator::index_out "[INTERNAL]  Get output
scheme index by name.

";

%feature("docstring") casadi::Integrator::sp_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode, sparsity propagation.

";

%feature("docstring") casadi::Integrator::getHessian "[INTERNAL]  Return
Hessian function.

";

%feature("docstring") casadi::Integrator::get_function "[INTERNAL] ";

%feature("docstring") casadi::Integrator::getTangent "[INTERNAL]  Return
tangent function.

";

%feature("docstring") casadi::Integrator::name_in "[INTERNAL]  Get input
scheme name by index.

";

%feature("docstring") casadi::Integrator::numel_in "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::Integrator::n_in "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::Integrator::mx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Integrator::generateFunction "[INTERNAL]
Generate code the function.

";

%feature("docstring") casadi::Integrator::get_forward "[INTERNAL]  Generate
a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::Integrator::generateDeclarations "[INTERNAL]
Generate code for the declarations of the C function.

";

%feature("docstring") casadi::Integrator::set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::Integrator::getWorkSize "[INTERNAL]  Get the
length of the work vector.

";

%feature("docstring") casadi::Integrator::which_depends "[INTERNAL]  Which
variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::Integrator::get_name_out "[INTERNAL]  Names
of function input and outputs.

";

%feature("docstring") casadi::Integrator::reset "[INTERNAL]  Reset the
forward problem.

";

%feature("docstring") casadi::Integrator::expand "[INTERNAL] ";

%feature("docstring") casadi::Integrator::get_reverse "[INTERNAL]  Generate
a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::Integrator::default_in "[INTERNAL]  Get
default input value.

";

%feature("docstring") casadi::Integrator::sz_res "[INTERNAL]  Get required
length of res field.

";

%feature("docstring") casadi::Integrator::checkout "[INTERNAL]  Checkout a
memory object.

";

%feature("docstring") casadi::Integrator::call_forward "[INTERNAL]  Forward
mode AD, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Integrator::self "[INTERNAL]  Get a public
class instance.

";

%feature("docstring") casadi::Integrator::clear_memory "[INTERNAL]  Clear
all memory (called from destructor)

";

%feature("docstring") casadi::Integrator::rp "[INTERNAL] ";

%feature("docstring") casadi::Integrator::rq "[INTERNAL] ";

%feature("docstring") casadi::Integrator::get_options "[INTERNAL]  Options.

";

%feature("docstring") casadi::Integrator::size1_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::Integrator::rz "[INTERNAL] ";

%feature("docstring") casadi::Integrator::free_memory "[INTERNAL]  Free
memory block.

";

%feature("docstring") casadi::Integrator::rx "[INTERNAL] ";

%feature("docstring") casadi::Integrator::get_stats "[INTERNAL]  Get all
statistics.

";

%feature("docstring") casadi::Integrator::init "[INTERNAL]  Initialize.

";

%feature("docstring") casadi::Integrator::release "[INTERNAL]  Release a
memory object.

";

%feature("docstring") casadi::Integrator::grad_mx "[INTERNAL]  Gradient
expression.

";

%feature("docstring") casadi::Integrator::checkInputs "[INTERNAL]  Check if
the numerical values of the supplied bounds make sense.

";


// File: classcasadi_1_1Interpolant.xml
%feature("docstring") casadi::Interpolant::getAlgorithmSize "[INTERNAL]
Get the number of atomic operations.

";

%feature("docstring") casadi::Interpolant::fwdViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::Interpolant::oracle "[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::Interpolant::_get_stats "[INTERNAL]  Get all
statistics

";

%feature("docstring") casadi::Interpolant::get_n_forward "[INTERNAL]
Return function that calculates forward derivatives forward(nfwd) returns a
cached instance if available, and calls  Function get_forward(int nfwd) if
no cached version is available.

";

%feature("docstring") casadi::Interpolant::numel_out "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::Interpolant::repr "[INTERNAL]  Print.

";

%feature("docstring") casadi::Interpolant::get_function "[INTERNAL] ";

%feature("docstring") casadi::Interpolant::mx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Interpolant::get_sparsity_in "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Interpolant::call_forward "[INTERNAL]
Forward mode AD, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Interpolant::signature "[INTERNAL]  Code
generate the function.

";

%feature("docstring") casadi::Interpolant::size1_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::Interpolant::get_options "[INTERNAL]
Options.

";

%feature("docstring") casadi::Interpolant::replaceArg "[INTERNAL]  Replace
0-by-0 inputs.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::Interpolant::checkout "[INTERNAL]  Checkout a
memory object.

";

%feature("docstring") casadi::Interpolant::sx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Interpolant::wrap "[INTERNAL]  Wrap in an
Function instance consisting of only one MX call.

";

%feature("docstring") casadi::Interpolant::alloc "[INTERNAL]  Ensure work
vectors long enough to evaluate function.

";

%feature("docstring") casadi::Interpolant::has_spfwd "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Interpolant::generateMeta "[INTERNAL]
Generate meta-information allowing a user to evaluate a generated function.

";

%feature("docstring") casadi::Interpolant::sparsity_jac "[INTERNAL]  Get,
if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Interpolant::n_nodes "[INTERNAL]  Number of
nodes in the algorithm.

";

%feature("docstring") casadi::Interpolant::sp_fwd "[INTERNAL]  Propagate
sparsity forward.

";

%feature("docstring") casadi::Interpolant::finalize "[INTERNAL]  Finalize
the object creation This function, which visits the class hierarchy in
reverse order is run after init() has been completed.

";

%feature("docstring") casadi::Interpolant::get_reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::Interpolant::size1_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::Interpolant::get_sparsity_out "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Interpolant::replaceAdjSeed "[INTERNAL]
Replace 0-by-0 reverse seeds.

";

%feature("docstring") casadi::Interpolant::has_codegen "[INTERNAL]  Is
codegen supported?

";

%feature("docstring") casadi::Interpolant::alloc_arg "[INTERNAL]  Ensure
required length of arg field.

";

%feature("docstring") casadi::Interpolant::getJacSparsity "[INTERNAL]
Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Interpolant::memory "[INTERNAL]  Memory
objects.

";

%feature("docstring") casadi::Interpolant::reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::Interpolant::alloc_res "[INTERNAL]  Ensure
required length of res field.

";

%feature("docstring") casadi::Interpolant::tang_mx "[INTERNAL]  Tangent
expression.

";

%feature("docstring") casadi::Interpolant::sparsity_out "[INTERNAL]  Get
sparsity of a given output.

";

%feature("docstring") casadi::Interpolant::getJacSparsityHierarchical "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::Interpolant::getAtomicOperation "[INTERNAL]
Get an atomic operation operator index.

";

%feature("docstring") casadi::Interpolant::get_forward "[INTERNAL]  Return
function that calculates forward derivatives forward(nfwd) returns a cached
instance if available, and calls  Function get_forward(int nfwd) if no
cached version is available.

";

%feature("docstring") casadi::Interpolant::nnz_in "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::Interpolant::log "

>  void casadi::FunctionInternal::log(const std::string &msg) const 
------------------------------------------------------------------------
[INTERNAL] 
Log the status of the solver.

>  void casadi::FunctionInternal::log(const std::string &fcn, const std::string &msg) const 
------------------------------------------------------------------------
[INTERNAL] 
Log the status of the solver, function given.

";

%feature("docstring") casadi::Interpolant::hasFullJacobian "[INTERNAL]
Return Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Interpolant::codegen_decref "[INTERNAL]
Codegen decref for dependencies.

";

%feature("docstring") casadi::Interpolant::symbolicFwdSeed "[INTERNAL]
Symbolic expressions for the forward seeds.

";

%feature("docstring") casadi::Interpolant::sz_iw "[INTERNAL]  Get required
length of iw field.

";

%feature("docstring") casadi::Interpolant::name "[INTERNAL]  Name of the
function.

";

%feature("docstring") casadi::Interpolant::getAtomicOutput "[INTERNAL]  Get
the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::Interpolant::adjViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::Interpolant::get_n_in "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::Interpolant::sp_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode, sparsity propagation.

";

%feature("docstring") casadi::Interpolant::getJacSparsityHierarchicalSymm "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::Interpolant::generateBody "[INTERNAL]
Generate code for the function body.

";

%feature("docstring") casadi::Interpolant::sz_res "[INTERNAL]  Get required
length of res field.

";

%feature("docstring") casadi::Interpolant::get_name_in "[INTERNAL]  Names
of function input and outputs.

";

%feature("docstring") casadi::Interpolant::factory "[INTERNAL] ";

%feature("docstring") casadi::Interpolant::type_name "[INTERNAL]  Get type
name.

";

%feature("docstring") casadi::Interpolant::nnz_out "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::Interpolant::set_temp "[INTERNAL]  Set the
(temporary) work vectors.

";

%feature("docstring") casadi::Interpolant::alloc_w "[INTERNAL]  Ensure
required length of w field.

";

%feature("docstring") casadi::Interpolant::replaceRes "[INTERNAL]  Replace
0-by-0 outputs.

";

%feature("docstring") casadi::Interpolant::print_option "[INTERNAL]  Print
all information there is to know about a certain option.

";

%feature("docstring") casadi::Interpolant::print_free "[INTERNAL]  Print
free variables.

";

%feature("docstring") casadi::Interpolant::free_mx "[INTERNAL]  Get free
variables ( MX)

";

%feature("docstring") casadi::Interpolant::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::Interpolant::print_options "[INTERNAL]  Print
list of options.

";

%feature("docstring") casadi::Interpolant::is_a "[INTERNAL]  Check if the
function is of a particular type.

";

%feature("docstring") casadi::Interpolant::has_free "[INTERNAL]  Does the
function have free variables.

";

%feature("docstring") casadi::Interpolant::getTangent "[INTERNAL]  Return
tangent function.

";

%feature("docstring") casadi::Interpolant::getGradient "[INTERNAL]  Return
gradient function.

";

%feature("docstring") casadi::Interpolant::has_function "[INTERNAL] ";

%feature("docstring") casadi::Interpolant::n_out "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::Interpolant::grad_sx "[INTERNAL]  Gradient
expression.

";

%feature("docstring") casadi::Interpolant::getJacSparsityGen "[INTERNAL]
Get the sparsity pattern, forward mode.

";

%feature("docstring") casadi::Interpolant::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::Interpolant::codegen_incref "[INTERNAL]
Codegen incref for dependencies.

";

%feature("docstring") casadi::Interpolant::size2_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::Interpolant::set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::Interpolant::default_in "[INTERNAL]  Get
default input value.

";

%feature("docstring") casadi::Interpolant::set_jac_sparsity "[INTERNAL]
Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Interpolant::n_in "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::Interpolant::symbolicOutput "[INTERNAL]  Get
a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::Interpolant::self "[INTERNAL]  Get a public
class instance.

";

%feature("docstring") casadi::Interpolant::get_n_out "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::Interpolant::hessian "[INTERNAL]  Return
Hessian function.

";

%feature("docstring") casadi::Interpolant::sz_arg "[INTERNAL]  Get required
length of arg field.

";

%feature("docstring") casadi::Interpolant::size_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::Interpolant::addDependency "[INTERNAL]  Add a
dependent function.

";

%feature("docstring") casadi::Interpolant::matchingRes "[INTERNAL]  Check
if output arguments that needs to be replaced.

";

%feature("docstring") casadi::Interpolant::jacobian "[INTERNAL]  Return
Jacobian function.

";

%feature("docstring") casadi::Interpolant::call "[INTERNAL]   Call a
function, templated.

";

%feature("docstring") casadi::Interpolant::clear_memory "[INTERNAL]  Clear
all memory (called from destructor)

";

%feature("docstring") casadi::Interpolant::simplifiedCall "[INTERNAL]  Use
simplified signature.

";

%feature("docstring") casadi::Interpolant::_setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";

%feature("docstring") casadi::Interpolant::generate_lifted "[INTERNAL]
Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::Interpolant::mx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Interpolant::alloc_iw "[INTERNAL]  Ensure
required length of iw field.

";

%feature("docstring") casadi::Interpolant::_eval "

>  void casadi::FunctionInternal::_eval(const double **arg, double **res, int *iw, double *w, int mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate numerically.

>  void casadi::FunctionInternal::_eval(const SXElem **arg, SXElem **res, int *iw, SXElem *w, int mem) const

>  void casadi::FunctionInternal::_eval(const bvec_t **arg, bvec_t **res, int *iw, bvec_t *w, int mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

%feature("docstring") casadi::Interpolant::getAtomicInputReal "[INTERNAL]
Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::Interpolant::eval "[INTERNAL]  Evaluate
numerically.

";

%feature("docstring") casadi::Interpolant::checkInputs "[INTERNAL]  Check
if the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::Interpolant::getPartition "[INTERNAL]  Get
the unidirectional or bidirectional partition.

";

%feature("docstring") casadi::Interpolant::getJacobian "[INTERNAL]  Return
Jacobian function.

";

%feature("docstring") casadi::Interpolant::checkArg "[INTERNAL]  Check if
input arguments have correct length and dimensions.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::Interpolant::addShorthand "[INTERNAL]
Generate shorthand macro.

";

%feature("docstring") casadi::Interpolant::mapsum_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::Interpolant::generateFunction "[INTERNAL]
Generate code the function.

";

%feature("docstring") casadi::Interpolant "[INTERNAL]  Internal class

C++ includes: interpolant_impl.hpp ";

%feature("docstring") casadi::Interpolant::ad_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::Interpolant::checkRes "[INTERNAL]  Check if
output arguments have correct length and dimensions.

";

%feature("docstring") casadi::Interpolant::free_sx "[INTERNAL]  Get free
variables (SX)

";

%feature("docstring") casadi::Interpolant::sx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Interpolant::eval_mx "[INTERNAL]  Evaluate
with symbolic matrices.

";

%feature("docstring") casadi::Interpolant::slice "[INTERNAL]  returns a new
function with a selection of inputs/outputs of the original

";

%feature("docstring") casadi::Interpolant::size_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::Interpolant::matchingArg "[INTERNAL]  Check
if input arguments that needs to be replaced.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::Interpolant::forward "[INTERNAL]  Return
function that calculates forward derivatives forward(nfwd) returns a cached
instance if available, and calls  Function get_forward(int nfwd) if no
cached version is available.

";

%feature("docstring") casadi::Interpolant::which_depends "[INTERNAL]  Which
variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::Interpolant::getHessian "[INTERNAL]  Return
Hessian function.

";

%feature("docstring") casadi::Interpolant::has_sprev "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Interpolant::get_n_reverse "[INTERNAL]
Return function that calculates adjoint derivatives reverse(nadj) returns a
cached instance if available, and calls  Function get_reverse(int nadj) if
no cached version is available.

";

%feature("docstring") casadi::Interpolant::sz_work "[INTERNAL]  Get number
of temporary variables needed.

";

%feature("docstring") casadi::Interpolant::call_reverse "[INTERNAL]
Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Interpolant::grad_mx "[INTERNAL]  Gradient
expression.

";

%feature("docstring") casadi::Interpolant::_call "[INTERNAL]   Call a
function, overloaded.

";

%feature("docstring") casadi::Interpolant::getFullJacobian "[INTERNAL]
Return Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Interpolant::simple "[INTERNAL]  Evaluate
numerically, simplied syntax.

";

%feature("docstring") casadi::Interpolant::getWorkSize "[INTERNAL]  Get the
length of the work vector.

";

%feature("docstring") casadi::Interpolant::tangent "[INTERNAL]  Return
tangent function.

";

%feature("docstring") casadi::Interpolant::sp_rev "[INTERNAL]  Propagate
sparsity backwards.

";

%feature("docstring") casadi::Interpolant::name_in "[INTERNAL]  Get input
scheme name by index.

";

%feature("docstring") casadi::Interpolant::init_memory "[INTERNAL]
Initalize memory block.

";

%feature("docstring") casadi::Interpolant::Interpolant "[INTERNAL]
Constructor.

";

%feature("docstring") casadi::Interpolant::generateDeclarations "[INTERNAL]
Generate code for the declarations of the C function.

";

%feature("docstring") casadi::Interpolant::index_out "[INTERNAL]  Get
output scheme index by name.

";

%feature("docstring") casadi::Interpolant::sparsity_in "[INTERNAL]  Get
sparsity of a given input.

";

%feature("docstring") casadi::Interpolant::getAtomicInput "[INTERNAL]  Get
the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::Interpolant::index_in "[INTERNAL]  Get input
scheme index by name.

";

%feature("docstring") casadi::Interpolant::fullJacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Interpolant::verbose "[INTERNAL]  Verbose
mode?

";

%feature("docstring") casadi::Interpolant::free_memory "[INTERNAL]  Free
memory block.

";

%feature("docstring") casadi::Interpolant::~Interpolant "[INTERNAL]
Destructor.

";

%feature("docstring") casadi::Interpolant::eval_name "[INTERNAL]  Get name
of the evaluation function.

";

%feature("docstring") casadi::Interpolant::symbolicAdjSeed "[INTERNAL]
Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::Interpolant::print "[INTERNAL]  Print.

";

%feature("docstring") casadi::Interpolant::setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";

%feature("docstring") casadi::Interpolant::jit_dependencies "[INTERNAL]
Jit dependencies.

";

%feature("docstring") casadi::Interpolant::map_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::Interpolant::get_stats "[INTERNAL]  Get all
statistics

";

%feature("docstring") casadi::Interpolant::print_dimensions "[INTERNAL]
Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::Interpolant::gradient "[INTERNAL]  Return
gradient function.

";

%feature("docstring") casadi::Interpolant::replaceFwdSeed "[INTERNAL]
Replace 0-by-0 forward seeds.

";

%feature("docstring") casadi::Interpolant::jac_mx "[INTERNAL]  Jacobian
expression.

";

%feature("docstring") casadi::Interpolant::eval_sx "[INTERNAL]  Evaluate
with symbolic scalars.

";

%feature("docstring") casadi::Interpolant::hasDerivative "[INTERNAL]  Can
derivatives be calculated in any way?

";

%feature("docstring") casadi::Interpolant::name_out "[INTERNAL]  Get output
scheme name by index.

";

%feature("docstring") casadi::Interpolant::alloc_memory "[INTERNAL]  Create
memory block.

";

%feature("docstring") casadi::Interpolant::sz_w "[INTERNAL]  Get required
length of w field.

";

%feature("docstring") casadi::Interpolant::numel_in "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::Interpolant::generate_dependencies "[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring") casadi::Interpolant::release "[INTERNAL]  Release a
memory object.

";

%feature("docstring") casadi::Interpolant::n_mem "[INTERNAL]  Maximum
number of memory objects.

";

%feature("docstring") casadi::Interpolant::get_name_out "[INTERNAL]  Names
of function input and outputs.

";

%feature("docstring") casadi::Interpolant::hess_sx "[INTERNAL]  Hessian
expression.

";

%feature("docstring") casadi::Interpolant::tang_sx "[INTERNAL]  Tangent
expression.

";

%feature("docstring") casadi::Interpolant::_set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::Interpolant::codegen_name "[INTERNAL]  Get
name in codegen.

";

%feature("docstring") casadi::Interpolant::getAdaptorSolverName "[INTERNAL]
Obtain solver name from Adaptor.

";

%feature("docstring") casadi::Interpolant::setJacobian "[INTERNAL]  Return
Jacobian function.

";

%feature("docstring") casadi::Interpolant::plugin_name "[INTERNAL] ";

%feature("docstring") casadi::Interpolant::construct "[INTERNAL]  Construct
Prepares the function for evaluation.

";

%feature("docstring") casadi::Interpolant::init "[INTERNAL]  Initialize
Initialize and make the object ready for setting arguments and evaluation.
This method is typically called after setting options but before evaluating.
If passed to another class (in the constructor), this class should invoke
this function when initialized.

";

%feature("docstring") casadi::Interpolant::_set_temp "[INTERNAL]  Set the
(temporary) work vectors.

";

%feature("docstring") casadi::Interpolant::jac_sx "[INTERNAL]  Jacobian
expression.

";

%feature("docstring") casadi::Interpolant::size2_out "[INTERNAL]
Input/output dimensions.

";


// File: classcasadi_1_1InterruptHandler.xml
%feature("docstring") casadi::InterruptHandler "[INTERNAL]  Takes care of
user interrupts (Ctrl+C)

This is an internal class.

Joris Gillis

C++ includes: casadi_interrupt.hpp ";


// File: classcasadi_1_1Inverse.xml


// File: classcasadi_1_1IOInstruction.xml


// File: classcasadi_1_1IpoptUserClass.xml
%feature("docstring") casadi::IpoptUserClass::get_starting_point "[INTERNAL]  Method to return the starting point for the algorithm

";

%feature("docstring") casadi::IpoptUserClass::finalize_solution "[INTERNAL]
This method is called when the algorithm is complete so the TNLP can
store/write the solution

";

%feature("docstring") casadi::IpoptUserClass "[INTERNAL] C++ includes:
ipopt_nlp.hpp ";

%feature("docstring")
casadi::IpoptUserClass::get_list_of_nonlinear_variables "[INTERNAL]
Specify which variables that appear in the Hessian

";

%feature("docstring") casadi::IpoptUserClass::eval_grad_f "[INTERNAL]
Method to return the gradient of the objective

";

%feature("docstring") casadi::IpoptUserClass::get_var_con_metadata "[INTERNAL]  Allows setting information about variables and constraints

";

%feature("docstring") casadi::IpoptUserClass::~IpoptUserClass "[INTERNAL]
";

%feature("docstring") casadi::IpoptUserClass::eval_g "[INTERNAL]  Method to
return the constraint residuals

";

%feature("docstring") casadi::IpoptUserClass::get_nlp_info "[INTERNAL]
Method to return some info about the nlp

";

%feature("docstring") casadi::IpoptUserClass::eval_f "[INTERNAL]  Method to
return the objective value

";

%feature("docstring")
casadi::IpoptUserClass::get_number_of_nonlinear_variables "[INTERNAL]
Specify the number of variables that appear in the Hessian

";

%feature("docstring") casadi::IpoptUserClass::eval_jac_g "[INTERNAL]
Method to return: 1) The structure of the Jacobian (if \"values\" is NULL)
2) The values of the Jacobian (if \"values\" is not NULL)

";

%feature("docstring") casadi::IpoptUserClass::finalize_metadata "[INTERNAL]
Retrieve information about variables and constraints

";

%feature("docstring") casadi::IpoptUserClass::get_bounds_info "[INTERNAL]
Method to return the bounds for my problem

";

%feature("docstring") casadi::IpoptUserClass::eval_h "[INTERNAL]  Method to
return: 1) The structure of the hessian of the Lagrangian (if \"values\" is
NULL) 2) The values of the hessian of the Lagrangian (if \"values\" is not
NULL)

";

%feature("docstring") casadi::IpoptUserClass::intermediate_callback "[INTERNAL]  This method is called at every iteration

";

%feature("docstring") casadi::IpoptUserClass::IpoptUserClass "[INTERNAL] ";


// File: classcasadi_1_1Jit.xml
%feature("docstring") casadi::Jit::_eval "

>  void casadi::FunctionInternal::_eval(const double **arg, double **res, int *iw, double *w, int mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate numerically.

>  void casadi::FunctionInternal::_eval(const SXElem **arg, SXElem **res, int *iw, SXElem *w, int mem) const

>  void casadi::FunctionInternal::_eval(const bvec_t **arg, bvec_t **res, int *iw, bvec_t *w, int mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

%feature("docstring") casadi::Jit::matchingArg "[INTERNAL]  Check if input
arguments that needs to be replaced.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::Jit::~Jit "

Destructor.

";

%feature("docstring") casadi::Jit::simplifiedCall "

Use simplified signature.

";

%feature("docstring") casadi::Jit::codegen_decref "[INTERNAL]  Codegen
decref for dependencies.

";

%feature("docstring") casadi::Jit::size1_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Jit::type_name "

Get type name.

";

%feature("docstring") casadi::Jit::n_out "[INTERNAL]  Number of function
inputs and outputs.

";

%feature("docstring") casadi::Jit::generateBody "

Generate code for the function body.

";

%feature("docstring") casadi::Jit::sparsity_out "[INTERNAL]  Get sparsity
of a given output.

";

%feature("docstring") casadi::Jit::clear_memory "[INTERNAL]  Clear all
memory (called from destructor)

";

%feature("docstring") casadi::Jit::print_options "[INTERNAL]  Print list of
options.

";

%feature("docstring") casadi::Jit::symbolicFwdSeed "[INTERNAL]  Symbolic
expressions for the forward seeds.

";

%feature("docstring") casadi::Jit::getAlgorithmSize "[INTERNAL]  Get the
number of atomic operations.

";

%feature("docstring") casadi::Jit::get_sparsity_out "

All inputs and outputs are scalars.

";

%feature("docstring") casadi::Jit::index_out "[INTERNAL]  Get output scheme
index by name.

";

%feature("docstring") casadi::Jit::jac_mx "[INTERNAL]  Jacobian expression.

";

%feature("docstring") casadi::Jit::tangent "[INTERNAL]  Return tangent
function.

";

%feature("docstring") casadi::Jit::get_sparsity_in "

All inputs and outputs are scalars.

";

%feature("docstring") casadi::Jit::simple "[INTERNAL]  Evaluate
numerically, simplied syntax.

";

%feature("docstring") casadi::Jit::has_codegen "

Is codegen supported?

";

%feature("docstring") casadi::Jit::addShorthand "[INTERNAL]  Generate
shorthand macro.

";

%feature("docstring") casadi::Jit::size2_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Jit::replaceRes "[INTERNAL]  Replace 0-by-0
outputs.

";

%feature("docstring") casadi::Jit::sp_fwd "[INTERNAL]  Propagate sparsity
forward.

";

%feature("docstring") casadi::Jit::numel_out "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::Jit::has_spfwd "[INTERNAL]  Is the class able
to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Jit::size_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Jit::sparsity_jac "[INTERNAL]  Get, if
necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Jit::is_a "[INTERNAL]  Check if the function
is of a particular type.

";

%feature("docstring") casadi::Jit::has_function "[INTERNAL] ";

%feature("docstring") casadi::Jit::nnz_out "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::Jit::get_forward "[INTERNAL]  Return function
that calculates forward derivatives forward(nfwd) returns a cached instance
if available, and calls  Function get_forward(int nfwd) if no cached version
is available.

";

%feature("docstring") casadi::Jit::call_forward "[INTERNAL]  Forward mode
AD, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Jit::set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::Jit::sx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Jit::matchingRes "[INTERNAL]  Check if output
arguments that needs to be replaced.

";

%feature("docstring") casadi::Jit::generate_lifted "[INTERNAL]  Extract the
functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::Jit::sparsity_in "[INTERNAL]  Get sparsity of
a given input.

";

%feature("docstring") casadi::Jit::_setup "[INTERNAL]  Set the (persistent
and temporary) work vectors.

";

%feature("docstring") casadi::Jit::_set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::Jit::factory "[INTERNAL] ";

%feature("docstring") casadi::Jit::generateDeclarations "[INTERNAL]
Generate code for the declarations of the C function.

";

%feature("docstring") casadi::Jit::fullJacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Jit::default_in "[INTERNAL]  Get default
input value.

";

%feature("docstring") casadi::Jit::sz_arg "[INTERNAL]  Get required length
of arg field.

";

%feature("docstring") casadi::Jit::checkRes "[INTERNAL]  Check if output
arguments have correct length and dimensions.

";

%feature("docstring") casadi::Jit::sp_rev "[INTERNAL]  Propagate sparsity
backwards.

";

%feature("docstring") casadi::Jit::adjViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::Jit::numel_in "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::Jit::getPartition "[INTERNAL]  Get the
unidirectional or bidirectional partition.

";

%feature("docstring") casadi::Jit::symbolicOutput "[INTERNAL]  Get a vector
of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::Jit::alloc_w "[INTERNAL]  Ensure required
length of w field.

";

%feature("docstring") casadi::Jit::getAtomicInputReal "[INTERNAL]  Get the
floating point output argument of an atomic operation.

";

%feature("docstring") casadi::Jit::call "[INTERNAL]   Call a function,
templated.

";

%feature("docstring") casadi::Jit::getAtomicInput "[INTERNAL]  Get the
(integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::Jit::tang_mx "[INTERNAL]  Tangent expression.

";

%feature("docstring") casadi::Jit::gradient "[INTERNAL]  Return gradient
function.

";

%feature("docstring") casadi::Jit::get_n_in "

Number of function inputs and outputs.

";

%feature("docstring") casadi::Jit::getJacSparsityHierarchical "[INTERNAL]
A flavor of getJacSparsity that does hierarchical block structure
recognition.

";

%feature("docstring") casadi::Jit::release "[INTERNAL]  Release a memory
object.

";

%feature("docstring") casadi::Jit::sz_w "[INTERNAL]  Get required length of
w field.

";

%feature("docstring") casadi::Jit::getAtomicOutput "[INTERNAL]  Get the
(integer) output argument of an atomic operation.

";

%feature("docstring") casadi::Jit::size_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Jit::sp_weight "[INTERNAL]  Weighting factor
for chosing forward/reverse mode, sparsity propagation.

";

%feature("docstring") casadi::Jit::sz_work "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") casadi::Jit::sz_iw "[INTERNAL]  Get required length
of iw field.

";

%feature("docstring") casadi::Jit::codegen_name "[INTERNAL]  Get name in
codegen.

";

%feature("docstring") casadi::Jit::getTangent "[INTERNAL]  Return tangent
function.

";

%feature("docstring") casadi::Jit::nnz_in "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::Jit::free_sx "[INTERNAL]  Get free variables
(SX)

";

%feature("docstring") casadi::Jit::mapsum_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::Jit::memory "[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::Jit::getCount "[INTERNAL]  Get the reference
count.

";

%feature("docstring") casadi::Jit::get_options "

Options.

";

%feature("docstring") casadi::Jit::print_dimensions "[INTERNAL]  Print
dimensions of inputs and outputs.

";

%feature("docstring") casadi::Jit::getAtomicOperation "[INTERNAL]  Get an
atomic operation operator index.

";

%feature("docstring") casadi::Jit::has_sprev "[INTERNAL]  Is the class able
to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Jit::repr "[INTERNAL]  Print.

";

%feature("docstring") casadi::Jit::eval_name "[INTERNAL]  Get name of the
evaluation function.

";

%feature("docstring") casadi::Jit::forward "[INTERNAL]  Return function
that calculates forward derivatives forward(nfwd) returns a cached instance
if available, and calls  Function get_forward(int nfwd) if no cached version
is available.

";

%feature("docstring") casadi::Jit::_set_temp "[INTERNAL]  Set the
(temporary) work vectors.

";

%feature("docstring") casadi::Jit::hasDerivative "[INTERNAL]  Can
derivatives be calculated in any way?

";

%feature("docstring") casadi::Jit::getJacSparsity "[INTERNAL]  Generate the
sparsity of a Jacobian block.

";

%feature("docstring") casadi::Jit::_call "[INTERNAL]   Call a function,
overloaded.

";

%feature("docstring") casadi::Jit::fwdViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::Jit::eval_sx "[INTERNAL]  Evaluate with
symbolic scalars.

";

%feature("docstring") casadi::Jit::tang_sx "[INTERNAL]  Tangent expression.

";

%feature("docstring") casadi::Jit::hess_sx "[INTERNAL]  Hessian expression.

";

%feature("docstring") casadi::Jit::construct "[INTERNAL]  Construct
Prepares the function for evaluation.

";

%feature("docstring") casadi::Jit::generate_dependencies "[INTERNAL]
Export / Generate C code for the dependency function.

";

%feature("docstring") casadi::Jit::print_option "[INTERNAL]  Print all
information there is to know about a certain option.

";

%feature("docstring") casadi::Jit::hessian "[INTERNAL]  Return Hessian
function.

";

%feature("docstring") casadi::Jit::get_name_out "[INTERNAL]  Names of
function input and outputs.

";

%feature("docstring") casadi::Jit::size1_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Jit::mx_in "[INTERNAL]  Get function input(s)
and output(s)

";

%feature("docstring") casadi::Jit::get_n_reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::Jit::getFullJacobian "

Jacobian of all outputs with respect to all inputs.

";

%feature("docstring") casadi::Jit::verbose "[INTERNAL]  Verbose mode?

";

%feature("docstring") casadi::Jit::index_in "[INTERNAL]  Get input scheme
index by name.

";

%feature("docstring") casadi::Jit::getGradient "[INTERNAL]  Return gradient
function.

";

%feature("docstring") casadi::Jit::getJacSparsityHierarchicalSymm "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::Jit::free_memory "[INTERNAL]  Free memory
block.

";

%feature("docstring") casadi::Jit::n_mem "[INTERNAL]  Maximum number of
memory objects.

";

%feature("docstring") casadi::Jit::size2_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Jit::alloc_res "[INTERNAL]  Ensure required
length of res field.

";

%feature("docstring") casadi::Jit::replaceAdjSeed "[INTERNAL]  Replace
0-by-0 reverse seeds.

";

%feature("docstring") casadi::Jit::free_mx "[INTERNAL]  Get free variables
( MX)

";

%feature("docstring") casadi::Jit::ad_weight "[INTERNAL]  Weighting factor
for chosing forward/reverse mode.

";

%feature("docstring") casadi::Jit::jacobian "[INTERNAL]  Return Jacobian
function.

";

%feature("docstring") casadi::Jit::set_temp "[INTERNAL]  Set the
(temporary) work vectors.

";

%feature("docstring") casadi::Jit::get_stats "[INTERNAL]  Get all
statistics

";

%feature("docstring") casadi::Jit::getJacSparsityGen "[INTERNAL]  Get the
sparsity pattern, forward mode.

";

%feature("docstring") casadi::Jit::init_memory "[INTERNAL]  Initalize
memory block.

";

%feature("docstring") casadi::Jit::generateMeta "[INTERNAL]  Generate meta-
information allowing a user to evaluate a generated function.

";

%feature("docstring") casadi::Jit::alloc_memory "[INTERNAL]  Create memory
block.

";

%feature("docstring") casadi::Jit::signature "[INTERNAL]  Code generate the
function.

";

%feature("docstring") casadi::Jit::mx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Jit::oracle "[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::Jit::wrap "[INTERNAL]  Wrap in an Function
instance consisting of only one MX call.

";

%feature("docstring") casadi::Jit::sz_res "[INTERNAL]  Get required length
of res field.

";

%feature("docstring") casadi::Jit::alloc_arg "[INTERNAL]  Ensure required
length of arg field.

";

%feature("docstring") casadi::Jit::call_reverse "[INTERNAL]  Reverse mode,
virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Jit::symbolicAdjSeed "[INTERNAL]  Symbolic
expressions for the adjoint seeds.

";

%feature("docstring") casadi::Jit::which_depends "[INTERNAL]  Which
variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::Jit::addDependency "[INTERNAL]  Add a
dependent function.

";

%feature("docstring") casadi::Jit::get_reverse "[INTERNAL]  Return function
that calculates adjoint derivatives reverse(nadj) returns a cached instance
if available, and calls  Function get_reverse(int nadj) if no cached version
is available.

";

%feature("docstring") casadi::Jit::alloc "[INTERNAL]  Ensure work vectors
long enough to evaluate function.

";

%feature("docstring") casadi::Jit::getAdaptorSolverName "[INTERNAL]  Obtain
solver name from Adaptor.

";

%feature("docstring") casadi::Jit::replaceArg "[INTERNAL]  Replace 0-by-0
inputs.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::Jit::_get_stats "[INTERNAL]  Get all
statistics

";

%feature("docstring") casadi::Jit::finalize "[INTERNAL]  Finalize the
object creation This function, which visits the class hierarchy in reverse
order is run after init() has been completed.

";

%feature("docstring") casadi::Jit::Jit "

Constructor.

";

%feature("docstring") casadi::Jit::get_function "[INTERNAL] ";

%feature("docstring") casadi::Jit::name "[INTERNAL]  Name of the function.

";

%feature("docstring") casadi::Jit::alloc_iw "[INTERNAL]  Ensure required
length of iw field.

";

%feature("docstring") casadi::Jit::eval "[INTERNAL]  Evaluate numerically.

";

%feature("docstring") casadi::Jit::map_mx "[INTERNAL]  Parallel evaluation.

";

%feature("docstring") casadi::Jit::name_in "[INTERNAL]  Get input scheme
name by index.

";

%feature("docstring") casadi::Jit::codegen_incref "[INTERNAL]  Codegen
incref for dependencies.

";

%feature("docstring") casadi::Jit::generateFunction "[INTERNAL]  Generate
code the function.

";

%feature("docstring") casadi::Jit::setup "[INTERNAL]  Set the (persistent
and temporary) work vectors.

";

%feature("docstring") casadi::Jit::n_nodes "[INTERNAL]  Number of nodes in
the algorithm.

";

%feature("docstring") casadi::Jit::set_jac_sparsity "[INTERNAL]  Generate
the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Jit::getWorkSize "[INTERNAL]  Get the length
of the work vector.

";

%feature("docstring") casadi::Jit::name_out "[INTERNAL]  Get output scheme
name by index.

";

%feature("docstring") casadi::Jit::checkInputs "[INTERNAL]  Check if the
numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::Jit::n_in "[INTERNAL]  Number of function
inputs and outputs.

";

%feature("docstring") casadi::Jit::slice "[INTERNAL]  returns a new
function with a selection of inputs/outputs of the original

";

%feature("docstring") casadi::Jit::jit_dependencies "[INTERNAL]   Jit
dependencies.

";

%feature("docstring") casadi::Jit::weak "[INTERNAL]  Get a weak reference
to the object.

";

%feature("docstring") casadi::Jit::grad_sx "[INTERNAL]  Gradient
expression.

";

%feature("docstring") casadi::Jit::print "[INTERNAL]  Print.

";

%feature("docstring") casadi::Jit::getJacobian "[INTERNAL]  Return Jacobian
function.

";

%feature("docstring") casadi::Jit::checkout "[INTERNAL]  Checkout a memory
object.

";

%feature("docstring") casadi::Jit::setJacobian "[INTERNAL]  Return Jacobian
function.

";

%feature("docstring") casadi::Jit::get_name_in "[INTERNAL]  Names of
function input and outputs.

";

%feature("docstring") casadi::Jit::getHessian "[INTERNAL]  Return Hessian
function.

";

%feature("docstring") casadi::Jit::log "

>  void casadi::FunctionInternal::log(const std::string &msg) const 
------------------------------------------------------------------------
[INTERNAL] 
Log the status of the solver.

>  void casadi::FunctionInternal::log(const std::string &fcn, const std::string &msg) const 
------------------------------------------------------------------------
[INTERNAL] 
Log the status of the solver, function given.

";

%feature("docstring") casadi::Jit "

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| hess             | OT_STRING       | Function body    | casadi::Jit      |
|                  |                 | for Hessian      |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Custom input     | casadi::Function |
|                  |                 | scheme           | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| jac              | OT_STRING       | Function body    | casadi::Jit      |
|                  |                 | for Jacobian     |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Custom output    | casadi::Function |
|                  |                 | scheme           | Internal         |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: jit_impl.hpp ";

%feature("docstring") casadi::Jit::has_free "[INTERNAL]  Does the function
have free variables.

";

%feature("docstring") casadi::Jit::eval_mx "[INTERNAL]  Evaluate with
symbolic matrices.

";

%feature("docstring") casadi::Jit::get_n_out "

Number of function inputs and outputs.

";

%feature("docstring") casadi::Jit::checkArg "[INTERNAL]  Check if input
arguments have correct length and dimensions.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::Jit::hasFullJacobian "

Jacobian of all outputs with respect to all inputs.

";

%feature("docstring") casadi::Jit::replaceFwdSeed "[INTERNAL]  Replace
0-by-0 forward seeds.

";

%feature("docstring") casadi::Jit::init "

Initialize.

";

%feature("docstring") casadi::Jit::get_n_forward "[INTERNAL]  Return
function that calculates forward derivatives forward(nfwd) returns a cached
instance if available, and calls  Function get_forward(int nfwd) if no
cached version is available.

";

%feature("docstring") casadi::Jit::reverse "[INTERNAL]  Return function
that calculates adjoint derivatives reverse(nadj) returns a cached instance
if available, and calls  Function get_reverse(int nadj) if no cached version
is available.

";

%feature("docstring") casadi::Jit::jac_sx "[INTERNAL]  Jacobian expression.

";

%feature("docstring") casadi::Jit::grad_mx "[INTERNAL]  Gradient
expression.

";

%feature("docstring") casadi::Jit::self "[INTERNAL]  Get a public class
instance.

";

%feature("docstring") casadi::Jit::sx_in "[INTERNAL]  Get function input(s)
and output(s)

";

%feature("docstring") casadi::Jit::print_free "[INTERNAL]  Print free
variables.

";


// File: classcasadi_1_1LapackLu.xml
%feature("docstring") casadi::LapackLu::free_sx "[INTERNAL]  Get free
variables (SX)

";

%feature("docstring") casadi::LapackLu::size_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::LapackLu::alloc_w "[INTERNAL]  Ensure
required length of w field.

";

%feature("docstring") casadi::LapackLu::map_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::LapackLu::get_n_out "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::LapackLu::~LapackLu "[INTERNAL]  Destructor.

";

%feature("docstring") casadi::LapackLu::generateFunction "[INTERNAL]
Generate code the function.

";

%feature("docstring") casadi::LapackLu::construct "[INTERNAL]  Construct
Prepares the function for evaluation.

";

%feature("docstring") casadi::LapackLu::has_free "[INTERNAL]  Does the
function have free variables.

";

%feature("docstring") casadi::LapackLu::call "[INTERNAL]   Call a function,
templated.

";

%feature("docstring") casadi::LapackLu::getJacSparsityGen "[INTERNAL]  Get
the sparsity pattern, forward mode.

";

%feature("docstring") casadi::LapackLu::sparsity_out "[INTERNAL]  Get
sparsity of a given output.

";

%feature("docstring") casadi::LapackLu::reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::LapackLu::replaceFwdSeed "[INTERNAL]  Replace
0-by-0 forward seeds.

";

%feature("docstring") casadi::LapackLu::clear_memory "[INTERNAL]  Clear all
memory (called from destructor)

";

%feature("docstring") casadi::LapackLu::checkRes "[INTERNAL]  Check if
output arguments have correct length and dimensions.

";

%feature("docstring") casadi::LapackLu::getJacobian "[INTERNAL]  Return
Jacobian function.

";

%feature("docstring") casadi::LapackLu::linsol_eval_sx "[INTERNAL]
Evaluate SX, possibly transposed.

";

%feature("docstring") casadi::LapackLu::getHessian "[INTERNAL]  Return
Hessian function.

";

%feature("docstring") casadi::LapackLu::factorize "[INTERNAL]  Factorize
the linear system.

";

%feature("docstring") casadi::LapackLu::sp_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode, sparsity propagation.

";

%feature("docstring") casadi::LapackLu::generateDeclarations "[INTERNAL]
Generate code for the declarations of the C function.

";

%feature("docstring") casadi::LapackLu::getAtomicOutput "[INTERNAL]  Get
the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::LapackLu::LapackLu "[INTERNAL] ";

%feature("docstring") casadi::LapackLu::finalize "[INTERNAL]  Finalize the
object creation This function, which visits the class hierarchy in reverse
order is run after init() has been completed.

";

%feature("docstring") casadi::LapackLu::nnz_in "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::LapackLu::oracle "[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::LapackLu::get_n_in "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::LapackLu::sp_fwd "[INTERNAL]  Propagate
sparsity forward.

";

%feature("docstring") casadi::LapackLu::get_sparsity_in "[INTERNAL]  Get
sparsity of a given input.

";

%feature("docstring") casadi::LapackLu::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::LapackLu::get_n_reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::LapackLu::name_in "[INTERNAL]  Get input
scheme name by index.

";

%feature("docstring") casadi::LapackLu::matchingRes "[INTERNAL]  Check if
output arguments that needs to be replaced.

";

%feature("docstring") casadi::LapackLu::_get_stats "[INTERNAL]  Get all
statistics

";

%feature("docstring") casadi::LapackLu::get_options "[INTERNAL]  Options.

";

%feature("docstring") casadi::LapackLu::ad_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::LapackLu::alloc "[INTERNAL]  Ensure work
vectors long enough to evaluate function.

";

%feature("docstring") casadi::LapackLu::repr "[INTERNAL]  Print.

";

%feature("docstring") casadi::LapackLu::is_a "[INTERNAL]  Check if the
function is of a particular type.

";

%feature("docstring") casadi::LapackLu::neig "[INTERNAL]  Number of
negative eigenvalues.

";

%feature("docstring") casadi::LapackLu::getTangent "[INTERNAL]  Return
tangent function.

";

%feature("docstring") casadi::LapackLu::solve_cholesky "[INTERNAL]   Solve
Cholesky.

";

%feature("docstring") casadi::LapackLu::free_memory "[INTERNAL]  Free
memory block.

";

%feature("docstring") casadi::LapackLu::generate_lifted "[INTERNAL]
Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::LapackLu::getJacSparsity "[INTERNAL]
Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::LapackLu::nnz_out "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::LapackLu::alloc_arg "[INTERNAL]  Ensure
required length of arg field.

";

%feature("docstring") casadi::LapackLu::setJacobian "[INTERNAL]  Return
Jacobian function.

";

%feature("docstring") casadi::LapackLu::which_depends "[INTERNAL]  Which
variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::LapackLu::get_function "[INTERNAL] ";

%feature("docstring") casadi::LapackLu::verbose "[INTERNAL]  Verbose mode?

";

%feature("docstring") casadi::LapackLu::numel_in "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::LapackLu::wrap "[INTERNAL]  Wrap in an
Function instance consisting of only one MX call.

";

%feature("docstring") casadi::LapackLu::name_out "[INTERNAL]  Get output
scheme name by index.

";

%feature("docstring") casadi::LapackLu::size1_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::LapackLu::set_jac_sparsity "[INTERNAL]
Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::LapackLu::getFullJacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::LapackLu::symbolicFwdSeed "[INTERNAL]
Symbolic expressions for the forward seeds.

";

%feature("docstring") casadi::LapackLu::replaceRes "[INTERNAL]  Replace
0-by-0 outputs.

";

%feature("docstring") casadi::LapackLu::get_name_in "[INTERNAL]  Names of
function input and outputs.

";

%feature("docstring") casadi::LapackLu::replaceAdjSeed "[INTERNAL]  Replace
0-by-0 reverse seeds.

";

%feature("docstring") casadi::LapackLu::call_forward "[INTERNAL]  Forward
mode AD, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::LapackLu::has_sprev "[INTERNAL]  Is the class
able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::LapackLu::eval "[INTERNAL]  Evaluate
numerically.

";

%feature("docstring") casadi::LapackLu::hasFullJacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::LapackLu::get_n_forward "[INTERNAL]  Return
function that calculates forward derivatives forward(nfwd) returns a cached
instance if available, and calls  Function get_forward(int nfwd) if no
cached version is available.

";

%feature("docstring") casadi::LapackLu::n_mem "[INTERNAL]  Maximum number
of memory objects.

";

%feature("docstring") casadi::LapackLu::rank "[INTERNAL]   Matrix rank.

";

%feature("docstring") casadi::LapackLu::getAdaptorSolverName "[INTERNAL]
Obtain solver name from Adaptor.

";

%feature("docstring") casadi::LapackLu::sparsity_in "[INTERNAL]  Get
sparsity of a given input.

";

%feature("docstring") casadi::LapackLu::tang_mx "[INTERNAL]  Tangent
expression.

";

%feature("docstring") casadi::LapackLu::hess_sx "[INTERNAL]  Hessian
expression.

";

%feature("docstring") casadi::LapackLu::free_mx "[INTERNAL]  Get free
variables ( MX)

";

%feature("docstring") casadi::LapackLu::getAlgorithmSize "[INTERNAL]  Get
the number of atomic operations.

";

%feature("docstring") casadi::LapackLu::alloc_res "[INTERNAL]  Ensure
required length of res field.

";

%feature("docstring") casadi::LapackLu::linsol_cholesky_sparsity "[INTERNAL]   Sparsity pattern of the cholesky factors.

";

%feature("docstring") casadi::LapackLu::_set_temp "[INTERNAL]  Set the
(temporary) work vectors.

";

%feature("docstring") casadi::LapackLu::has_codegen "[INTERNAL]  Is codegen
supported?

";

%feature("docstring") casadi::LapackLu::linsol_cholesky "[INTERNAL]  Get
Cholesky factor.

";

%feature("docstring") casadi::LapackLu::set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::LapackLu::matchingArg "[INTERNAL]  Check if
input arguments that needs to be replaced.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::LapackLu::get_stats "[INTERNAL]  Get all
statistics

";

%feature("docstring") casadi::LapackLu::jac_sx "[INTERNAL]  Jacobian
expression.

";

%feature("docstring") casadi::LapackLu::fullJacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::LapackLu::hasDerivative "[INTERNAL]  Can
derivatives be calculated in any way?

";

%feature("docstring") casadi::LapackLu::codegen_decref "[INTERNAL]  Codegen
decref for dependencies.

";

%feature("docstring") casadi::LapackLu::simplifiedCall "[INTERNAL]  Use
simplified signature.

";

%feature("docstring") casadi::LapackLu::print "[INTERNAL]  Print.

";

%feature("docstring") casadi::LapackLu::adjViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::LapackLu::symbolicAdjSeed "[INTERNAL]
Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::LapackLu::alloc_iw "[INTERNAL]  Ensure
required length of iw field.

";

%feature("docstring") casadi::LapackLu::getAtomicInputReal "[INTERNAL]  Get
the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::LapackLu::init "[INTERNAL]  Initialize the
solver.

";

%feature("docstring") casadi::LapackLu::get_reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::LapackLu::sx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::LapackLu::n_nodes "[INTERNAL]  Number of
nodes in the algorithm.

";

%feature("docstring") casadi::LapackLu::sparsity_jac "[INTERNAL]  Get, if
necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::LapackLu::pivoting "[INTERNAL] ";

%feature("docstring") casadi::LapackLu::slice "[INTERNAL]  returns a new
function with a selection of inputs/outputs of the original

";

%feature("docstring") casadi::LapackLu::log "

>  void casadi::FunctionInternal::log(const std::string &msg) const 
------------------------------------------------------------------------
[INTERNAL] 
Log the status of the solver.

>  void casadi::FunctionInternal::log(const std::string &fcn, const std::string &msg) const 
------------------------------------------------------------------------
[INTERNAL] 
Log the status of the solver, function given.

";

%feature("docstring") casadi::LapackLu::hessian "[INTERNAL]  Return Hessian
function.

";

%feature("docstring") casadi::LapackLu::sx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::LapackLu::get_sparsity_out "[INTERNAL]  Get
sparsity of a given output.

";

%feature("docstring") casadi::LapackLu::memory "[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::LapackLu::jac_mx "[INTERNAL]  Jacobian
expression.

";

%feature("docstring") casadi::LapackLu::sz_work "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") casadi::LapackLu::size1_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::LapackLu::eval_name "[INTERNAL]  Get name of
the evaluation function.

";

%feature("docstring") casadi::LapackLu::checkInputs "[INTERNAL]  Check if
the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::LapackLu::index_in "[INTERNAL]  Get input
scheme index by name.

";

%feature("docstring") casadi::LapackLu::sz_iw "[INTERNAL]  Get required
length of iw field.

";

%feature("docstring") casadi::LapackLu::_eval "

>  void casadi::FunctionInternal::_eval(const double **arg, double **res, int *iw, double *w, int mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate numerically.

>  void casadi::FunctionInternal::_eval(const SXElem **arg, SXElem **res, int *iw, SXElem *w, int mem) const

>  void casadi::FunctionInternal::_eval(const bvec_t **arg, bvec_t **res, int *iw, bvec_t *w, int mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

%feature("docstring") casadi::LapackLu::checkArg "[INTERNAL]  Check if
input arguments have correct length and dimensions.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::LapackLu::symbolicOutput "[INTERNAL]  Get a
vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::LapackLu::sz_arg "[INTERNAL]  Get required
length of arg field.

";

%feature("docstring") casadi::LapackLu::getWorkSize "[INTERNAL]  Get the
length of the work vector.

";

%feature("docstring") casadi::LapackLu::setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";

%feature("docstring") casadi::LapackLu::alloc_memory "[INTERNAL]  Create
memory block.

";

%feature("docstring") casadi::LapackLu::get_forward "[INTERNAL]  Return
function that calculates forward derivatives forward(nfwd) returns a cached
instance if available, and calls  Function get_forward(int nfwd) if no
cached version is available.

";

%feature("docstring") casadi::LapackLu::getJacSparsityHierarchical "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::LapackLu::checkout "[INTERNAL]  Checkout a
memory object.

";

%feature("docstring") casadi::LapackLu::default_in "[INTERNAL]  Get default
input value.

";

%feature("docstring") casadi::LapackLu::sz_w "[INTERNAL]  Get required
length of w field.

";

%feature("docstring") casadi::LapackLu::sp_rev "[INTERNAL]  Propagate
sparsity backwards.

";

%feature("docstring") casadi::LapackLu::numel_out "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::LapackLu::release "[INTERNAL]  Release a
memory object.

";

%feature("docstring") casadi::LapackLu::print_free "[INTERNAL]  Print free
variables.

";

%feature("docstring") casadi::LapackLu::print_dimensions "[INTERNAL]  Print
dimensions of inputs and outputs.

";

%feature("docstring") casadi::LapackLu::simple "[INTERNAL]  Evaluate
numerically, simplied syntax.

";

%feature("docstring") casadi::LapackLu::_call "[INTERNAL]   Call a
function, overloaded.

";

%feature("docstring") casadi::LapackLu::size2_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::LapackLu::addDependency "[INTERNAL]  Add a
dependent function.

";

%feature("docstring") casadi::LapackLu::getPartition "[INTERNAL]  Get the
unidirectional or bidirectional partition.

";

%feature("docstring") casadi::LapackLu::getGradient "[INTERNAL]  Return
gradient function.

";

%feature("docstring") casadi::LapackLu::mapsum_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::LapackLu::name "[INTERNAL]  Name of the
function.

";

%feature("docstring") casadi::LapackLu::forward "[INTERNAL]  Return
function that calculates forward derivatives forward(nfwd) returns a cached
instance if available, and calls  Function get_forward(int nfwd) if no
cached version is available.

";

%feature("docstring") casadi::LapackLu::grad_mx "[INTERNAL]  Gradient
expression.

";

%feature("docstring") casadi::LapackLu::_setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";

%feature("docstring") casadi::LapackLu::mx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::LapackLu::mx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::LapackLu::index_out "[INTERNAL]  Get output
scheme index by name.

";

%feature("docstring") casadi::LapackLu::solve "[INTERNAL] ";

%feature("docstring") casadi::LapackLu::jit_dependencies "[INTERNAL]   Jit
dependencies.

";

%feature("docstring") casadi::LapackLu::print_options "[INTERNAL]  Print
list of options.

";

%feature("docstring") casadi::LapackLu::_set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::LapackLu::has_spfwd "[INTERNAL]  Is the class
able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::LapackLu::generateMeta "[INTERNAL]  Generate
meta-information allowing a user to evaluate a generated function.

";

%feature("docstring") casadi::LapackLu::gradient "[INTERNAL]  Return
gradient function.

";

%feature("docstring") casadi::LapackLu::self "[INTERNAL]  Get a public
class instance.

";

%feature("docstring") casadi::LapackLu::call_reverse "[INTERNAL]  Reverse
mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::LapackLu::tangent "[INTERNAL]  Return tangent
function.

";

%feature("docstring") casadi::LapackLu::addShorthand "[INTERNAL]  Generate
shorthand macro.

";

%feature("docstring") casadi::LapackLu::size2_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::LapackLu::eval_mx "[INTERNAL]  Evaluate with
symbolic matrices.

";

%feature("docstring") casadi::LapackLu::set_temp "[INTERNAL]  Set the
(temporary) work vectors.

";

%feature("docstring") casadi::LapackLu::signature "[INTERNAL]  Code
generate the function.

";

%feature("docstring") casadi::LapackLu::replaceArg "[INTERNAL]  Replace
0-by-0 inputs.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::LapackLu::codegen_incref "[INTERNAL]  Codegen
incref for dependencies.

";

%feature("docstring") casadi::LapackLu::reset "[INTERNAL] ";

%feature("docstring") casadi::LapackLu::codegen_name "[INTERNAL]  Get name
in codegen.

";

%feature("docstring") casadi::LapackLu::getAtomicOperation "[INTERNAL]  Get
an atomic operation operator index.

";

%feature("docstring") casadi::LapackLu::size_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::LapackLu::type_name "[INTERNAL]  Get type
name.

";

%feature("docstring") casadi::LapackLu::n_out "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::LapackLu::n_in "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::LapackLu::factory "[INTERNAL] ";

%feature("docstring") casadi::LapackLu::sz_res "[INTERNAL]  Get required
length of res field.

";

%feature("docstring") casadi::LapackLu::getJacSparsityHierarchicalSymm "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::LapackLu::generateBody "[INTERNAL]  Generate
code for the function body.

";

%feature("docstring") casadi::LapackLu "

'lapacklu' plugin for Linsol

This class solves the linear system A.x=b by making an LU factorization of
A: A = L.U, with L lower and U upper triangular

>List of available options

+-----------------------------+---------+----------------------------------+
|             Id              |  Type   |           Description            |
+=============================+=========+==================================+
| allow_equilibration_failure | OT_BOOL | Non-fatal error when             |
|                             |         | equilibration fails              |
+-----------------------------+---------+----------------------------------+
| equilibration               | OT_BOOL | Equilibrate the matrix           |
+-----------------------------+---------+----------------------------------+

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
+------------------+-----------------+------------------+------------------+
| allow_equilibrat | OT_BOOL         | Non-fatal error  | casadi::LapackLu |
| ion_failure      |                 | when             |                  |
|                  |                 | equilibration    |                  |
|                  |                 | fails            |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| equilibration    | OT_BOOL         | Equilibrate the  | casadi::LapackLu |
|                  |                 | matrix           |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Custom input     | casadi::Function |
|                  |                 | scheme           | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Custom output    | casadi::Function |
|                  |                 | scheme           | Internal         |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: lapack_lu.hpp ";

%feature("docstring") casadi::LapackLu::grad_sx "[INTERNAL]  Gradient
expression.

";

%feature("docstring") casadi::LapackLu::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::LapackLu::jacobian "[INTERNAL]  Return
Jacobian function.

";

%feature("docstring") casadi::LapackLu::getAtomicInput "[INTERNAL]  Get the
(integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::LapackLu::get_name_out "[INTERNAL]  Names of
function input and outputs.

";

%feature("docstring") casadi::LapackLu::eval_sx "[INTERNAL]  Evaluate with
symbolic scalars.

";

%feature("docstring") casadi::LapackLu::init_memory "[INTERNAL]  Initalize
memory block.

";

%feature("docstring") casadi::LapackLu::tang_sx "[INTERNAL]  Tangent
expression.

";

%feature("docstring") casadi::LapackLu::has_function "[INTERNAL] ";

%feature("docstring") casadi::LapackLu::fwdViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::LapackLu::generate_dependencies "[INTERNAL]
Export / Generate C code for the dependency function.

";

%feature("docstring") casadi::LapackLu::print_option "[INTERNAL]  Print all
information there is to know about a certain option.

";


// File: classcasadi_1_1LapackQr.xml
%feature("docstring") casadi::LapackQr::memory "[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::LapackQr::_call "[INTERNAL]   Call a
function, overloaded.

";

%feature("docstring") casadi::LapackQr::size2_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::LapackQr::eval_sx "[INTERNAL]  Evaluate with
symbolic scalars.

";

%feature("docstring") casadi::LapackQr::matchingArg "[INTERNAL]  Check if
input arguments that needs to be replaced.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::LapackQr::getTangent "[INTERNAL]  Return
tangent function.

";

%feature("docstring") casadi::LapackQr::getPartition "[INTERNAL]  Get the
unidirectional or bidirectional partition.

";

%feature("docstring") casadi::LapackQr::fullJacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::LapackQr::_solve "[INTERNAL] ";

%feature("docstring") casadi::LapackQr::get_name_in "[INTERNAL]  Names of
function input and outputs.

";

%feature("docstring") casadi::LapackQr::tang_sx "[INTERNAL]  Tangent
expression.

";

%feature("docstring") casadi::LapackQr::has_function "[INTERNAL] ";

%feature("docstring") casadi::LapackQr::print_option "[INTERNAL]  Print all
information there is to know about a certain option.

";

%feature("docstring") casadi::LapackQr::reset "[INTERNAL] ";

%feature("docstring") casadi::LapackQr::getJacSparsity "[INTERNAL]
Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::LapackQr::nnz_out "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::LapackQr::simplifiedCall "[INTERNAL]  Use
simplified signature.

";

%feature("docstring") casadi::LapackQr::setJacobian "[INTERNAL]  Return
Jacobian function.

";

%feature("docstring") casadi::LapackQr::getAdaptorSolverName "[INTERNAL]
Obtain solver name from Adaptor.

";

%feature("docstring") casadi::LapackQr::get_reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::LapackQr::n_nodes "[INTERNAL]  Number of
nodes in the algorithm.

";

%feature("docstring") casadi::LapackQr::has_spfwd "[INTERNAL]  Is the class
able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::LapackQr::get_n_reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::LapackQr::generateMeta "[INTERNAL]  Generate
meta-information allowing a user to evaluate a generated function.

";

%feature("docstring") casadi::LapackQr::alloc_res "[INTERNAL]  Ensure
required length of res field.

";

%feature("docstring") casadi::LapackQr "

'lapackqr' plugin for Linsol

This class solves the linear system A.x=b by making an QR factorization of
A: A = Q.R, with Q orthogonal and R upper triangular

>List of available options

+----------+--------+------------------------------------------------------+
|    Id    |  Type  |                     Description                      |
+==========+========+======================================================+
| max_nrhs | OT_INT | Maximum number of right-hand-sides that get          |
|          |        | processed in a single pass [default:10].             |
+----------+--------+------------------------------------------------------+

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Custom input     | casadi::Function |
|                  |                 | scheme           | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| max_nrhs         | OT_INT          | Maximum number   | casadi::LapackQr |
|                  |                 | of right-hand-   |                  |
|                  |                 | sides that get   |                  |
|                  |                 | processed in a   |                  |
|                  |                 | single pass      |                  |
|                  |                 | [default:10].    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Custom output    | casadi::Function |
|                  |                 | scheme           | Internal         |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: lapack_qr.hpp ";

%feature("docstring") casadi::LapackQr::getFullJacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::LapackQr::tang_mx "[INTERNAL]  Tangent
expression.

";

%feature("docstring") casadi::LapackQr::simple "[INTERNAL]  Evaluate
numerically, simplied syntax.

";

%feature("docstring") casadi::LapackQr::generate_lifted "[INTERNAL]
Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::LapackQr::jacobian "[INTERNAL]  Return
Jacobian function.

";

%feature("docstring") casadi::LapackQr::neig "[INTERNAL]  Number of
negative eigenvalues.

";

%feature("docstring") casadi::LapackQr::sp_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode, sparsity propagation.

";

%feature("docstring") casadi::LapackQr::solve_cholesky "[INTERNAL]   Solve
Cholesky.

";

%feature("docstring") casadi::LapackQr::addDependency "[INTERNAL]  Add a
dependent function.

";

%feature("docstring") casadi::LapackQr::call_forward "[INTERNAL]  Forward
mode AD, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::LapackQr::print "[INTERNAL]  Print.

";

%feature("docstring") casadi::LapackQr::getAtomicOperation "[INTERNAL]  Get
an atomic operation operator index.

";

%feature("docstring") casadi::LapackQr::default_in "[INTERNAL]  Get default
input value.

";

%feature("docstring") casadi::LapackQr::get_sparsity_in "[INTERNAL]  Get
sparsity of a given input.

";

%feature("docstring") casadi::LapackQr::construct "[INTERNAL]  Construct
Prepares the function for evaluation.

";

%feature("docstring") casadi::LapackQr::wrap "[INTERNAL]  Wrap in an
Function instance consisting of only one MX call.

";

%feature("docstring") casadi::LapackQr::name_in "[INTERNAL]  Get input
scheme name by index.

";

%feature("docstring") casadi::LapackQr::n_mem "[INTERNAL]  Maximum number
of memory objects.

";

%feature("docstring") casadi::LapackQr::gradient "[INTERNAL]  Return
gradient function.

";

%feature("docstring") casadi::LapackQr::free_mx "[INTERNAL]  Get free
variables ( MX)

";

%feature("docstring") casadi::LapackQr::getAlgorithmSize "[INTERNAL]  Get
the number of atomic operations.

";

%feature("docstring") casadi::LapackQr::grad_sx "[INTERNAL]  Gradient
expression.

";

%feature("docstring") casadi::LapackQr::matchingRes "[INTERNAL]  Check if
output arguments that needs to be replaced.

";

%feature("docstring") casadi::LapackQr::get_options "[INTERNAL]  Options.

";

%feature("docstring") casadi::LapackQr::ad_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::LapackQr::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::LapackQr::has_codegen "[INTERNAL]  Is codegen
supported?

";

%feature("docstring") casadi::LapackQr::free_memory "[INTERNAL]  Free
memory block.

";

%feature("docstring") casadi::LapackQr::sz_iw "[INTERNAL]  Get required
length of iw field.

";

%feature("docstring") casadi::LapackQr::symbolicOutput "[INTERNAL]  Get a
vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::LapackQr::generateDeclarations "[INTERNAL]
Generate code for the declarations of the C function.

";

%feature("docstring") casadi::LapackQr::init_memory "[INTERNAL]  Initalize
memory block.

";

%feature("docstring") casadi::LapackQr::sp_rev "[INTERNAL]  Propagate
sparsity backwards.

";

%feature("docstring") casadi::LapackQr::_setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";

%feature("docstring") casadi::LapackQr::alloc "[INTERNAL]  Ensure work
vectors long enough to evaluate function.

";

%feature("docstring") casadi::LapackQr::codegen_incref "[INTERNAL]  Codegen
incref for dependencies.

";

%feature("docstring") casadi::LapackQr::alloc_w "[INTERNAL]  Ensure
required length of w field.

";

%feature("docstring") casadi::LapackQr::symbolicAdjSeed "[INTERNAL]
Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::LapackQr::numel_in "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::LapackQr::sparsity_jac "[INTERNAL]  Get, if
necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::LapackQr::_get_stats "[INTERNAL]  Get all
statistics

";

%feature("docstring") casadi::LapackQr::size2_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::LapackQr::_set_temp "[INTERNAL]  Set the
(temporary) work vectors.

";

%feature("docstring") casadi::LapackQr::jac_mx "[INTERNAL]  Jacobian
expression.

";

%feature("docstring") casadi::LapackQr::addShorthand "[INTERNAL]  Generate
shorthand macro.

";

%feature("docstring") casadi::LapackQr::getWorkSize "[INTERNAL]  Get the
length of the work vector.

";

%feature("docstring") casadi::LapackQr::finalize "[INTERNAL]  Finalize the
object creation This function, which visits the class hierarchy in reverse
order is run after init() has been completed.

";

%feature("docstring") casadi::LapackQr::linsol_eval_sx "[INTERNAL]
Evaluate SX, possibly transposed.

";

%feature("docstring") casadi::LapackQr::eval_mx "[INTERNAL]  Evaluate with
symbolic matrices.

";

%feature("docstring") casadi::LapackQr::set_temp "[INTERNAL]  Set the
(temporary) work vectors.

";

%feature("docstring") casadi::LapackQr::replaceArg "[INTERNAL]  Replace
0-by-0 inputs.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::LapackQr::getAtomicInput "[INTERNAL]  Get the
(integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::LapackQr::_eval "

>  void casadi::FunctionInternal::_eval(const double **arg, double **res, int *iw, double *w, int mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate numerically.

>  void casadi::FunctionInternal::_eval(const SXElem **arg, SXElem **res, int *iw, SXElem *w, int mem) const

>  void casadi::FunctionInternal::_eval(const bvec_t **arg, bvec_t **res, int *iw, bvec_t *w, int mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

%feature("docstring") casadi::LapackQr::LapackQr "[INTERNAL] ";

%feature("docstring") casadi::LapackQr::checkArg "[INTERNAL]  Check if
input arguments have correct length and dimensions.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::LapackQr::self "[INTERNAL]  Get a public
class instance.

";

%feature("docstring") casadi::LapackQr::hasFullJacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::LapackQr::adjViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::LapackQr::solve "[INTERNAL] ";

%feature("docstring") casadi::LapackQr::size_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::LapackQr::getAtomicInputReal "[INTERNAL]  Get
the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::LapackQr::init "[INTERNAL]  Initialize.

";

%feature("docstring") casadi::LapackQr::log "

>  void casadi::FunctionInternal::log(const std::string &msg) const 
------------------------------------------------------------------------
[INTERNAL] 
Log the status of the solver.

>  void casadi::FunctionInternal::log(const std::string &fcn, const std::string &msg) const 
------------------------------------------------------------------------
[INTERNAL] 
Log the status of the solver, function given.

";

%feature("docstring") casadi::LapackQr::n_in "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::LapackQr::generateFunction "[INTERNAL]
Generate code the function.

";

%feature("docstring") casadi::LapackQr::checkInputs "[INTERNAL]  Check if
the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::LapackQr::linsol_cholesky_sparsity "[INTERNAL]   Sparsity pattern of the cholesky factors.

";

%feature("docstring") casadi::LapackQr::tangent "[INTERNAL]  Return tangent
function.

";

%feature("docstring") casadi::LapackQr::set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::LapackQr::set_jac_sparsity "[INTERNAL]
Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::LapackQr::get_stats "[INTERNAL]  Get all
statistics

";

%feature("docstring") casadi::LapackQr::signature "[INTERNAL]  Code
generate the function.

";

%feature("docstring") casadi::LapackQr::mapsum_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::LapackQr::get_n_in "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::LapackQr::print_options "[INTERNAL]  Print
list of options.

";

%feature("docstring") casadi::LapackQr::grad_mx "[INTERNAL]  Gradient
expression.

";

%feature("docstring") casadi::LapackQr::mx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::LapackQr::codegen_decref "[INTERNAL]  Codegen
decref for dependencies.

";

%feature("docstring") casadi::LapackQr::index_out "[INTERNAL]  Get output
scheme index by name.

";

%feature("docstring") casadi::LapackQr::oracle "[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::LapackQr::alloc_iw "[INTERNAL]  Ensure
required length of iw field.

";

%feature("docstring") casadi::LapackQr::alloc_arg "[INTERNAL]  Ensure
required length of arg field.

";

%feature("docstring") casadi::LapackQr::map_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::LapackQr::get_function "[INTERNAL] ";

%feature("docstring") casadi::LapackQr::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::LapackQr::sx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::LapackQr::factory "[INTERNAL] ";

%feature("docstring") casadi::LapackQr::name_out "[INTERNAL]  Get output
scheme name by index.

";

%feature("docstring") casadi::LapackQr::size1_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::LapackQr::call_reverse "[INTERNAL]  Reverse
mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::LapackQr::has_free "[INTERNAL]  Does the
function have free variables.

";

%feature("docstring") casadi::LapackQr::replaceFwdSeed "[INTERNAL]  Replace
0-by-0 forward seeds.

";

%feature("docstring") casadi::LapackQr::get_sparsity_out "[INTERNAL]  Get
sparsity of a given output.

";

%feature("docstring") casadi::LapackQr::generateBody "[INTERNAL]  Generate
code for the function body.

";

%feature("docstring") casadi::LapackQr::getJacobian "[INTERNAL]  Return
Jacobian function.

";

%feature("docstring") casadi::LapackQr::repr "[INTERNAL]  Print.

";

%feature("docstring") casadi::LapackQr::sz_work "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") casadi::LapackQr::symbolicFwdSeed "[INTERNAL]
Symbolic expressions for the forward seeds.

";

%feature("docstring") casadi::LapackQr::size1_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::LapackQr::eval_name "[INTERNAL]  Get name of
the evaluation function.

";

%feature("docstring") casadi::LapackQr::name "[INTERNAL]  Name of the
function.

";

%feature("docstring") casadi::LapackQr::call "[INTERNAL]   Call a function,
templated.

";

%feature("docstring") casadi::LapackQr::fwdViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::LapackQr::has_sprev "[INTERNAL]  Is the class
able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::LapackQr::alloc_memory "[INTERNAL]  Create
memory block.

";

%feature("docstring") casadi::LapackQr::get_forward "[INTERNAL]  Return
function that calculates forward derivatives forward(nfwd) returns a cached
instance if available, and calls  Function get_forward(int nfwd) if no
cached version is available.

";

%feature("docstring") casadi::LapackQr::nnz_in "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::LapackQr::replaceAdjSeed "[INTERNAL]  Replace
0-by-0 reverse seeds.

";

%feature("docstring") casadi::LapackQr::~LapackQr "[INTERNAL] ";

%feature("docstring") casadi::LapackQr::n_out "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::LapackQr::_set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::LapackQr::sz_res "[INTERNAL]  Get required
length of res field.

";

%feature("docstring") casadi::LapackQr::plugin_name "[INTERNAL] ";

%feature("docstring") casadi::LapackQr::clear_memory "[INTERNAL]  Clear all
memory (called from destructor)

";

%feature("docstring") casadi::LapackQr::reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::LapackQr::hessian "[INTERNAL]  Return Hessian
function.

";

%feature("docstring") casadi::LapackQr::getAtomicOutput "[INTERNAL]  Get
the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::LapackQr::jit_dependencies "[INTERNAL]   Jit
dependencies.

";

%feature("docstring") casadi::LapackQr::is_a "[INTERNAL]  Check if the
function is of a particular type.

";

%feature("docstring") casadi::LapackQr::slice "[INTERNAL]  returns a new
function with a selection of inputs/outputs of the original

";

%feature("docstring") casadi::LapackQr::jac_sx "[INTERNAL]  Jacobian
expression.

";

%feature("docstring") casadi::LapackQr::getGradient "[INTERNAL]  Return
gradient function.

";

%feature("docstring") casadi::LapackQr::factorize "[INTERNAL]  Factorize
the linear system.

";

%feature("docstring") casadi::LapackQr::type_name "[INTERNAL]  Get type
name.

";

%feature("docstring") casadi::LapackQr::hasDerivative "[INTERNAL]  Can
derivatives be calculated in any way?

";

%feature("docstring") casadi::LapackQr::print_dimensions "[INTERNAL]  Print
dimensions of inputs and outputs.

";

%feature("docstring") casadi::LapackQr::checkout "[INTERNAL]  Checkout a
memory object.

";

%feature("docstring") casadi::LapackQr::eval "[INTERNAL]  Evaluate
numerically.

";

%feature("docstring") casadi::LapackQr::free_sx "[INTERNAL]  Get free
variables (SX)

";

%feature("docstring") casadi::LapackQr::mx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::LapackQr::getJacSparsityHierarchical "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::LapackQr::verbose "[INTERNAL]  Verbose mode?

";

%feature("docstring") casadi::LapackQr::get_n_forward "[INTERNAL]  Return
function that calculates forward derivatives forward(nfwd) returns a cached
instance if available, and calls  Function get_forward(int nfwd) if no
cached version is available.

";

%feature("docstring") casadi::LapackQr::rank "[INTERNAL]   Matrix rank.

";

%feature("docstring") casadi::LapackQr::get_name_out "[INTERNAL]  Names of
function input and outputs.

";

%feature("docstring") casadi::LapackQr::print_free "[INTERNAL]  Print free
variables.

";

%feature("docstring") casadi::LapackQr::getJacSparsityHierarchicalSymm "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::LapackQr::release "[INTERNAL]  Release a
memory object.

";

%feature("docstring") casadi::LapackQr::sparsity_out "[INTERNAL]  Get
sparsity of a given output.

";

%feature("docstring") casadi::LapackQr::sx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::LapackQr::checkRes "[INTERNAL]  Check if
output arguments have correct length and dimensions.

";

%feature("docstring") casadi::LapackQr::linsol_cholesky "[INTERNAL]  Get
Cholesky factor.

";

%feature("docstring") casadi::LapackQr::replaceRes "[INTERNAL]  Replace
0-by-0 outputs.

";

%feature("docstring") casadi::LapackQr::setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";

%feature("docstring") casadi::LapackQr::getHessian "[INTERNAL]  Return
Hessian function.

";

%feature("docstring") casadi::LapackQr::hess_sx "[INTERNAL]  Hessian
expression.

";

%feature("docstring") casadi::LapackQr::index_in "[INTERNAL]  Get input
scheme index by name.

";

%feature("docstring") casadi::LapackQr::forward "[INTERNAL]  Return
function that calculates forward derivatives forward(nfwd) returns a cached
instance if available, and calls  Function get_forward(int nfwd) if no
cached version is available.

";

%feature("docstring") casadi::LapackQr::generate_dependencies "[INTERNAL]
Export / Generate C code for the dependency function.

";

%feature("docstring") casadi::LapackQr::sz_arg "[INTERNAL]  Get required
length of arg field.

";

%feature("docstring") casadi::LapackQr::which_depends "[INTERNAL]  Which
variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::LapackQr::codegen_name "[INTERNAL]  Get name
in codegen.

";

%feature("docstring") casadi::LapackQr::sz_w "[INTERNAL]  Get required
length of w field.

";

%feature("docstring") casadi::LapackQr::sp_fwd "[INTERNAL]  Propagate
sparsity forward.

";

%feature("docstring") casadi::LapackQr::get_n_out "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::LapackQr::size_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::LapackQr::sparsity_in "[INTERNAL]  Get
sparsity of a given input.

";

%feature("docstring") casadi::LapackQr::numel_out "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::LapackQr::pivoting "[INTERNAL] ";

%feature("docstring") casadi::LapackQr::getJacSparsityGen "[INTERNAL]  Get
the sparsity pattern, forward mode.

";


// File: classcasadi_1_1LinearInterpolant.xml
%feature("docstring") casadi::LinearInterpolant::grad_sx "[INTERNAL]
Gradient expression.

";

%feature("docstring") casadi::LinearInterpolant::get_n_forward "[INTERNAL]
Return function that calculates forward derivatives forward(nfwd) returns a
cached instance if available, and calls  Function get_forward(int nfwd) if
no cached version is available.

";

%feature("docstring") casadi::LinearInterpolant::get_sparsity_out "[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::LinearInterpolant::print "[INTERNAL]  Print.

";

%feature("docstring") casadi::LinearInterpolant::simplifiedCall "[INTERNAL]
Use simplified signature.

";

%feature("docstring") casadi::LinearInterpolant::slice "[INTERNAL]  returns
a new function with a selection of inputs/outputs of the original

";

%feature("docstring") casadi::LinearInterpolant::weak "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring") casadi::LinearInterpolant::getFullJacobian "[INTERNAL]  Full Jacobian.

";

%feature("docstring") casadi::LinearInterpolant::tang_sx "[INTERNAL]
Tangent expression.

";

%feature("docstring") casadi::LinearInterpolant::sz_iw "[INTERNAL]  Get
required length of iw field.

";

%feature("docstring") casadi::LinearInterpolant::alloc_iw "[INTERNAL]
Ensure required length of iw field.

";

%feature("docstring") casadi::LinearInterpolant::size1_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::LinearInterpolant::repr "[INTERNAL]  Print.

";

%feature("docstring") casadi::LinearInterpolant::call_reverse "[INTERNAL]
Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::LinearInterpolant::getPartition "[INTERNAL]
Get the unidirectional or bidirectional partition.

";

%feature("docstring") casadi::LinearInterpolant::name_in "[INTERNAL]  Get
input scheme name by index.

";

%feature("docstring") casadi::LinearInterpolant::generate_lifted "[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::LinearInterpolant::sp_weight "[INTERNAL]
Weighting factor for chosing forward/reverse mode, sparsity propagation.

";

%feature("docstring") casadi::LinearInterpolant::addDependency "[INTERNAL]
Add a dependent function.

";

%feature("docstring") casadi::LinearInterpolant::replaceArg "[INTERNAL]
Replace 0-by-0 inputs.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::LinearInterpolant::set_work "[INTERNAL]  Set
the (persistent) work vectors.

";

%feature("docstring") casadi::LinearInterpolant::mapsum_mx "[INTERNAL]
Parallel evaluation.

";

%feature("docstring") casadi::LinearInterpolant::mx_in "[INTERNAL]  Get
function input(s) and output(s)

";

%feature("docstring")
casadi::LinearInterpolant::getJacSparsityHierarchicalSymm "[INTERNAL]  A
flavor of getJacSparsity that does hierarchical block structure recognition
for symmetric Jacobians

";

%feature("docstring") casadi::LinearInterpolant::wrap "[INTERNAL]  Wrap in
an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::LinearInterpolant::addShorthand "[INTERNAL]
Generate shorthand macro.

";

%feature("docstring") casadi::LinearInterpolant::alloc_w "[INTERNAL]
Ensure required length of w field.

";

%feature("docstring") casadi::LinearInterpolant::size2_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::LinearInterpolant::jac_sx "[INTERNAL]
Jacobian expression.

";

%feature("docstring") casadi::LinearInterpolant::_set_work "[INTERNAL]  Set
the (persistent) work vectors.

";

%feature("docstring") casadi::LinearInterpolant::sx_in "[INTERNAL]  Get
function input(s) and output(s)

";

%feature("docstring") casadi::LinearInterpolant::getAlgorithmSize "[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring") casadi::LinearInterpolant::_eval "

>  void casadi::FunctionInternal::_eval(const double **arg, double **res, int *iw, double *w, int mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate numerically.

>  void casadi::FunctionInternal::_eval(const SXElem **arg, SXElem **res, int *iw, SXElem *w, int mem) const

>  void casadi::FunctionInternal::_eval(const bvec_t **arg, bvec_t **res, int *iw, bvec_t *w, int mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

%feature("docstring") casadi::LinearInterpolant::free_mx "[INTERNAL]  Get
free variables ( MX)

";

%feature("docstring") casadi::LinearInterpolant::hasDerivative "[INTERNAL]
Can derivatives be calculated in any way?

";

%feature("docstring") casadi::LinearInterpolant::get_forward "[INTERNAL]
Return function that calculates forward derivatives forward(nfwd) returns a
cached instance if available, and calls  Function get_forward(int nfwd) if
no cached version is available.

";

%feature("docstring") casadi::LinearInterpolant::index_out "[INTERNAL]  Get
output scheme index by name.

";

%feature("docstring") casadi::LinearInterpolant::default_in "[INTERNAL]
Get default input value.

";

%feature("docstring") casadi::LinearInterpolant::get_function "[INTERNAL]
";

%feature("docstring") casadi::LinearInterpolant::memory "[INTERNAL]  Memory
objects.

";

%feature("docstring") casadi::LinearInterpolant::n_out "[INTERNAL]  Number
of function inputs and outputs.

";

%feature("docstring") casadi::LinearInterpolant::symbolicOutput "[INTERNAL]
Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::LinearInterpolant::size_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::LinearInterpolant::ad_weight "[INTERNAL]
Weighting factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::LinearInterpolant::alloc "[INTERNAL]  Ensure
work vectors long enough to evaluate function.

";

%feature("docstring") casadi::LinearInterpolant::get_n_in "[INTERNAL]
Number of function inputs and outputs.

";

%feature("docstring") casadi::LinearInterpolant::checkInputs "[INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::LinearInterpolant::print_options "[INTERNAL]
Print list of options.

";

%feature("docstring") casadi::LinearInterpolant::fullJacobian "[INTERNAL]
Return Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::LinearInterpolant::generateFunction "[INTERNAL]  Generate code the function.

";

%feature("docstring") casadi::LinearInterpolant::init "[INTERNAL]
Initialize Initialize and make the object ready for setting arguments and
evaluation. This method is typically called after setting options but before
evaluating. If passed to another class (in the constructor), this class
should invoke this function when initialized.

";

%feature("docstring") casadi::LinearInterpolant::matchingArg "[INTERNAL]
Check if input arguments that needs to be replaced.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::LinearInterpolant::nnz_in "[INTERNAL]  Number
of input/output nonzeros.

";

%feature("docstring") casadi::LinearInterpolant::which_depends "[INTERNAL]
Which variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::LinearInterpolant::size_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::LinearInterpolant::getGradient "[INTERNAL]
Return gradient function.

";

%feature("docstring") casadi::LinearInterpolant::_setup "[INTERNAL]  Set
the (persistent and temporary) work vectors.

";

%feature("docstring") casadi::LinearInterpolant::print_option "[INTERNAL]
Print all information there is to know about a certain option.

";

%feature("docstring") casadi::LinearInterpolant::forward "[INTERNAL]
Return function that calculates forward derivatives forward(nfwd) returns a
cached instance if available, and calls  Function get_forward(int nfwd) if
no cached version is available.

";

%feature("docstring") casadi::LinearInterpolant::replaceFwdSeed "[INTERNAL]
Replace 0-by-0 forward seeds.

";

%feature("docstring") casadi::LinearInterpolant::symbolicAdjSeed "[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::LinearInterpolant::gradient "[INTERNAL]
Return gradient function.

";

%feature("docstring") casadi::LinearInterpolant::generateDeclarations "[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring") casadi::LinearInterpolant::eval_mx "[INTERNAL]
Evaluate with symbolic matrices.

";

%feature("docstring") casadi::LinearInterpolant::getTangent "[INTERNAL]
Return tangent function.

";

%feature("docstring") casadi::LinearInterpolant::getAtomicOutput "[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::LinearInterpolant::checkRes "[INTERNAL]
Check if output arguments have correct length and dimensions.

";

%feature("docstring") casadi::LinearInterpolant::construct "[INTERNAL]
Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::LinearInterpolant::type_name "[INTERNAL]  Get
type name.

";

%feature("docstring") casadi::LinearInterpolant::sz_arg "[INTERNAL]  Get
required length of arg field.

";

%feature("docstring") casadi::LinearInterpolant::free_sx "[INTERNAL]  Get
free variables (SX)

";

%feature("docstring") casadi::LinearInterpolant::_call "[INTERNAL]   Call a
function, overloaded.

";

%feature("docstring") casadi::LinearInterpolant::alloc_res "[INTERNAL]
Ensure required length of res field.

";

%feature("docstring") casadi::LinearInterpolant::has_spfwd "[INTERNAL]  Is
the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::LinearInterpolant::sx_out "[INTERNAL]  Get
function input(s) and output(s)

";

%feature("docstring") casadi::LinearInterpolant::map_mx "[INTERNAL]
Parallel evaluation.

";

%feature("docstring") casadi::LinearInterpolant::codegen_incref "[INTERNAL]
Codegen incref for dependencies.

";

%feature("docstring") casadi::LinearInterpolant::has_sprev "[INTERNAL]  Is
the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::LinearInterpolant::release "[INTERNAL]
Release a memory object.

";

%feature("docstring") casadi::LinearInterpolant::tang_mx "[INTERNAL]
Tangent expression.

";

%feature("docstring") casadi::LinearInterpolant::jit_dependencies "[INTERNAL]   Jit dependencies.

";

%feature("docstring") casadi::LinearInterpolant::grad_mx "[INTERNAL]
Gradient expression.

";

%feature("docstring") casadi::LinearInterpolant::get_name_out "[INTERNAL]
Names of function input and outputs.

";

%feature("docstring") casadi::LinearInterpolant::signature "[INTERNAL]
Code generate the function.

";

%feature("docstring") casadi::LinearInterpolant::sz_res "[INTERNAL]  Get
required length of res field.

";

%feature("docstring") casadi::LinearInterpolant::alloc_memory "[INTERNAL]
Create memory block.

";

%feature("docstring") casadi::LinearInterpolant::getJacSparsityGen "[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring") casadi::LinearInterpolant::init_memory "[INTERNAL]
Initalize memory block.

";

%feature("docstring") casadi::LinearInterpolant::log "

>  void casadi::FunctionInternal::log(const std::string &msg) const 
------------------------------------------------------------------------
[INTERNAL] 
Log the status of the solver.

>  void casadi::FunctionInternal::log(const std::string &fcn, const std::string &msg) const 
------------------------------------------------------------------------
[INTERNAL] 
Log the status of the solver, function given.

";

%feature("docstring") casadi::LinearInterpolant::hessian "[INTERNAL]
Return Hessian function.

";

%feature("docstring") casadi::LinearInterpolant::sz_work "[INTERNAL]  Get
number of temporary variables needed.

";

%feature("docstring") casadi::LinearInterpolant::free_memory "[INTERNAL]
Free memory block.

";

%feature("docstring") casadi::LinearInterpolant::getJacobian "[INTERNAL]
Return Jacobian function.

";

%feature("docstring") casadi::LinearInterpolant::has_codegen "[INTERNAL]
Is codegen supported?

";

%feature("docstring") casadi::LinearInterpolant::tangent "[INTERNAL]
Return tangent function.

";

%feature("docstring") casadi::LinearInterpolant::n_nodes "[INTERNAL]
Number of nodes in the algorithm.

";

%feature("docstring") casadi::LinearInterpolant::reverse "[INTERNAL]
Return function that calculates adjoint derivatives reverse(nadj) returns a
cached instance if available, and calls  Function get_reverse(int nadj) if
no cached version is available.

";

%feature("docstring") casadi::LinearInterpolant::get_name_in "[INTERNAL]
Names of function input and outputs.

";

%feature("docstring") casadi::LinearInterpolant::checkArg "[INTERNAL]
Check if input arguments have correct length and dimensions.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::LinearInterpolant::sparsity_out "[INTERNAL]
Get sparsity of a given output.

";

%feature("docstring") casadi::LinearInterpolant::get_n_reverse "[INTERNAL]
Return function that calculates adjoint derivatives reverse(nadj) returns a
cached instance if available, and calls  Function get_reverse(int nadj) if
no cached version is available.

";

%feature("docstring") casadi::LinearInterpolant::alloc_arg "[INTERNAL]
Ensure required length of arg field.

";

%feature("docstring") casadi::LinearInterpolant::mx_out "[INTERNAL]  Get
function input(s) and output(s)

";

%feature("docstring") casadi::LinearInterpolant::generateMeta "[INTERNAL]
Generate meta-information allowing a user to evaluate a generated function.

";

%feature("docstring") casadi::LinearInterpolant::n_mem "[INTERNAL]  Maximum
number of memory objects.

";

%feature("docstring") casadi::LinearInterpolant::symbolicFwdSeed "[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring") casadi::LinearInterpolant::getAtomicInput "[INTERNAL]
Get the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::LinearInterpolant::clear_memory "[INTERNAL]
Clear all memory (called from destructor)

";

%feature("docstring") casadi::LinearInterpolant::getWorkSize "[INTERNAL]
Get the length of the work vector.

";

%feature("docstring") casadi::LinearInterpolant::generate_dependencies "[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring") casadi::LinearInterpolant::plugin_name "[INTERNAL] ";

%feature("docstring") casadi::LinearInterpolant::factory "[INTERNAL] ";

%feature("docstring") casadi::LinearInterpolant::index_in "[INTERNAL]  Get
input scheme index by name.

";

%feature("docstring") casadi::LinearInterpolant::get_n_out "[INTERNAL]
Number of function inputs and outputs.

";

%feature("docstring") casadi::LinearInterpolant::getCount "[INTERNAL]  Get
the reference count.

";

%feature("docstring") casadi::LinearInterpolant::print_free "[INTERNAL]
Print free variables.

";

%feature("docstring") casadi::LinearInterpolant::setJacobian "[INTERNAL]
Return Jacobian function.

";

%feature("docstring") casadi::LinearInterpolant::call_forward "[INTERNAL]
Forward mode AD, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::LinearInterpolant::eval_name "[INTERNAL]  Get
name of the evaluation function.

";

%feature("docstring") casadi::LinearInterpolant::get_reverse "[INTERNAL]
Return function that calculates adjoint derivatives reverse(nadj) returns a
cached instance if available, and calls  Function get_reverse(int nadj) if
no cached version is available.

";

%feature("docstring") casadi::LinearInterpolant::setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";

%feature("docstring") casadi::LinearInterpolant::nnz_out "[INTERNAL]
Number of input/output nonzeros.

";

%feature("docstring") casadi::LinearInterpolant::replaceRes "[INTERNAL]
Replace 0-by-0 outputs.

";

%feature("docstring") casadi::LinearInterpolant::_get_stats "[INTERNAL]
Get all statistics

";

%feature("docstring") casadi::LinearInterpolant "

'linear' plugin for Interpolant Implements a multilinear interpolant: For
1D, the interpolating polynomial will be linear. For 2D, the interpolating
polynomial will be bilinear, etc.

>List of available options

+-------------+-----------------+------------------------------------------+
|     Id      |      Type       |               Description                |
+=============+=================+==========================================+
| lookup_mode | OT_STRINGVECTOR | Sets, for each grid dimenion, the lookup |
|             |                 | algorithm used to find the correct       |
|             |                 | index. 'linear' uses a for-loop + break; |
|             |                 | 'exact' uses floored division (only for  |
|             |                 | uniform grids).                          |
+-------------+-----------------+------------------------------------------+

Joel Andersson

>List of available options

+-------------+-----------------+---------------------+--------------------+
|     Id      |      Type       |     Description     |      Used in       |
+=============+=================+=====================+====================+
| lookup_mode | OT_STRINGVECTOR | Sets, for each grid | casadi::LinearInte |
|             |                 | dimenion, the       | rpolant            |
|             |                 | lookup algorithm    |                    |
|             |                 | used to find the    |                    |
|             |                 | correct index.      |                    |
|             |                 | 'linear' uses a     |                    |
|             |                 | for-loop + break;   |                    |
|             |                 | 'exact' uses        |                    |
|             |                 | floored division    |                    |
|             |                 | (only for uniform   |                    |
|             |                 | grids).             |                    |
+-------------+-----------------+---------------------+--------------------+

Diagrams
--------



C++ includes: linear_interpolant.hpp ";

%feature("docstring") casadi::LinearInterpolant::is_a "[INTERNAL]  Check if
the function is of a particular type.

";

%feature("docstring") casadi::LinearInterpolant::sp_fwd "[INTERNAL]
Propagate sparsity forward.

";

%feature("docstring") casadi::LinearInterpolant::codegen_decref "[INTERNAL]
Codegen decref for dependencies.

";

%feature("docstring") casadi::LinearInterpolant::has_free "[INTERNAL]  Does
the function have free variables.

";

%feature("docstring") casadi::LinearInterpolant::size2_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::LinearInterpolant::sp_rev "[INTERNAL]
Propagate sparsity backwards.

";

%feature("docstring") casadi::LinearInterpolant::name_out "[INTERNAL]  Get
output scheme name by index.

";

%feature("docstring") casadi::LinearInterpolant::numel_in "[INTERNAL]
Number of input/output elements.

";

%feature("docstring") casadi::LinearInterpolant::finalize "[INTERNAL]
Finalize the object creation This function, which visits the class hierarchy
in reverse order is run after init() has been completed.

";

%feature("docstring") casadi::LinearInterpolant::verbose "[INTERNAL]
Verbose mode?

";

%feature("docstring") casadi::LinearInterpolant::getJacSparsityHierarchical
"[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::LinearInterpolant::eval_sx "[INTERNAL]
Evaluate with symbolic scalars.

";

%feature("docstring") casadi::LinearInterpolant::LinearInterpolant "[INTERNAL] ";

%feature("docstring") casadi::LinearInterpolant::getAdaptorSolverName "[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring") casadi::LinearInterpolant::sparsity_jac "[INTERNAL]
Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::LinearInterpolant::name "[INTERNAL]  Name of
the function.

";

%feature("docstring") casadi::LinearInterpolant::jac_mx "[INTERNAL]
Jacobian expression.

";

%feature("docstring") casadi::LinearInterpolant::numel_out "[INTERNAL]
Number of input/output elements.

";

%feature("docstring") casadi::LinearInterpolant::codegen_name "[INTERNAL]
Get name in codegen.

";

%feature("docstring") casadi::LinearInterpolant::_set_temp "[INTERNAL]  Set
the (temporary) work vectors.

";

%feature("docstring") casadi::LinearInterpolant::call "[INTERNAL]   Call a
function, templated.

";

%feature("docstring") casadi::LinearInterpolant::size1_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::LinearInterpolant::get_stats "[INTERNAL]  Get
all statistics

";

%feature("docstring") casadi::LinearInterpolant::eval "[INTERNAL]  Evaluate
numerically.

";

%feature("docstring") casadi::LinearInterpolant::getAtomicOperation "[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring") casadi::LinearInterpolant::checkout "[INTERNAL]
Checkout a memory object.

";

%feature("docstring") casadi::LinearInterpolant::get_sparsity_in "[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::LinearInterpolant::jacobian "[INTERNAL]
Return Jacobian function.

";

%feature("docstring") casadi::LinearInterpolant::fwdViaJac "[INTERNAL]
Calculate derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::LinearInterpolant::n_in "[INTERNAL]  Number
of function inputs and outputs.

";

%feature("docstring") casadi::LinearInterpolant::getJacSparsity "[INTERNAL]
Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::LinearInterpolant::getAtomicInputReal "[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::LinearInterpolant::get_options "[INTERNAL]
Options.

";

%feature("docstring") casadi::LinearInterpolant::getHessian "[INTERNAL]
Return Hessian function.

";

%feature("docstring") casadi::LinearInterpolant::self "[INTERNAL]  Get a
public class instance.

";

%feature("docstring") casadi::LinearInterpolant::generateBody "[INTERNAL]
Generate code for the body of the C function.

";

%feature("docstring") casadi::LinearInterpolant::sparsity_in "[INTERNAL]
Get sparsity of a given input.

";

%feature("docstring") casadi::LinearInterpolant::sz_w "[INTERNAL]  Get
required length of w field.

";

%feature("docstring") casadi::LinearInterpolant::simple "[INTERNAL]
Evaluate numerically, simplied syntax.

";

%feature("docstring") casadi::LinearInterpolant::set_jac_sparsity "[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::LinearInterpolant::~LinearInterpolant "[INTERNAL] ";

%feature("docstring") casadi::LinearInterpolant::hess_sx "[INTERNAL]
Hessian expression.

";

%feature("docstring") casadi::LinearInterpolant::has_function "[INTERNAL]
";

%feature("docstring") casadi::LinearInterpolant::set_temp "[INTERNAL]  Set
the (temporary) work vectors.

";

%feature("docstring") casadi::LinearInterpolant::print_dimensions "[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::LinearInterpolant::replaceAdjSeed "[INTERNAL]
Replace 0-by-0 reverse seeds.

";

%feature("docstring") casadi::LinearInterpolant::hasFullJacobian "[INTERNAL]  Full Jacobian.

";

%feature("docstring") casadi::LinearInterpolant::oracle "[INTERNAL]  Get
oracle.

";

%feature("docstring") casadi::LinearInterpolant::adjViaJac "[INTERNAL]
Calculate derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::LinearInterpolant::matchingRes "[INTERNAL]
Check if output arguments that needs to be replaced.

";


// File: classcasadi_1_1LinearInterpolantJac.xml
%feature("docstring") casadi::LinearInterpolantJac::get_options "[INTERNAL]
Options.

";

%feature("docstring") casadi::LinearInterpolantJac::size_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::LinearInterpolantJac::init "[INTERNAL]
Initialize Initialize and make the object ready for setting arguments and
evaluation. This method is typically called after setting options but before
evaluating. If passed to another class (in the constructor), this class
should invoke this function when initialized.

";

%feature("docstring") casadi::LinearInterpolantJac::generateFunction "[INTERNAL]  Generate code the function.

";

%feature("docstring") casadi::LinearInterpolantJac::get_name_out "[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::LinearInterpolantJac::replaceArg "[INTERNAL]
Replace 0-by-0 inputs.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::LinearInterpolantJac::factory "[INTERNAL] ";

%feature("docstring") casadi::LinearInterpolantJac::_eval "

>  void casadi::FunctionInternal::_eval(const double **arg, double **res, int *iw, double *w, int mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate numerically.

>  void casadi::FunctionInternal::_eval(const SXElem **arg, SXElem **res, int *iw, SXElem *w, int mem) const

>  void casadi::FunctionInternal::_eval(const bvec_t **arg, bvec_t **res, int *iw, bvec_t *w, int mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

%feature("docstring") casadi::LinearInterpolantJac::set_temp "[INTERNAL]
Set the (temporary) work vectors.

";

%feature("docstring") casadi::LinearInterpolantJac::construct "[INTERNAL]
Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::LinearInterpolantJac::clear_memory "[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring") casadi::LinearInterpolantJac::call "[INTERNAL]   Call
a function, templated.

";

%feature("docstring") casadi::LinearInterpolantJac::eval_sx "[INTERNAL]
Evaluate with symbolic scalars.

";

%feature("docstring") casadi::LinearInterpolantJac::checkout "[INTERNAL]
Checkout a memory object.

";

%feature("docstring") casadi::LinearInterpolantJac::getAlgorithmSize "[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring") casadi::LinearInterpolantJac::codegen_decref "[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring") casadi::LinearInterpolantJac::_set_temp "[INTERNAL]
Set the (temporary) work vectors.

";

%feature("docstring") casadi::LinearInterpolantJac::repr "[INTERNAL]
Print.

";

%feature("docstring") casadi::LinearInterpolantJac::getAtomicInputReal "[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::LinearInterpolantJac::getGradient "[INTERNAL]
Return gradient function.

";

%feature("docstring") casadi::LinearInterpolantJac::_set_work "[INTERNAL]
Set the (persistent) work vectors.

";

%feature("docstring") casadi::LinearInterpolantJac::has_function "[INTERNAL] ";

%feature("docstring") casadi::LinearInterpolantJac::print_free "[INTERNAL]
Print free variables.

";

%feature("docstring") casadi::LinearInterpolantJac::sx_in "[INTERNAL]  Get
function input(s) and output(s)

";

%feature("docstring") casadi::LinearInterpolantJac::_setup "[INTERNAL]  Set
the (persistent and temporary) work vectors.

";

%feature("docstring") casadi::LinearInterpolantJac::ad_weight "[INTERNAL]
Weighting factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::LinearInterpolantJac::init_memory "[INTERNAL]
Initalize memory block.

";

%feature("docstring") casadi::LinearInterpolantJac::matchingArg "[INTERNAL]
Check if input arguments that needs to be replaced.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::LinearInterpolantJac::tang_mx "[INTERNAL]
Tangent expression.

";

%feature("docstring") casadi::LinearInterpolantJac::get_stats "[INTERNAL]
Get all statistics

";

%feature("docstring") casadi::LinearInterpolantJac::alloc_memory "[INTERNAL]  Create memory block.

";

%feature("docstring") casadi::LinearInterpolantJac::numel_in "[INTERNAL]
Number of input/output elements.

";

%feature("docstring") casadi::LinearInterpolantJac::size1_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::LinearInterpolantJac::alloc_iw "[INTERNAL]
Ensure required length of iw field.

";

%feature("docstring") casadi::LinearInterpolantJac::adjViaJac "[INTERNAL]
Calculate derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::LinearInterpolantJac::jit_dependencies "[INTERNAL]   Jit dependencies.

";

%feature("docstring") casadi::LinearInterpolantJac::n_mem "[INTERNAL]
Maximum number of memory objects.

";

%feature("docstring") casadi::LinearInterpolantJac::index_out "[INTERNAL]
Get output scheme index by name.

";

%feature("docstring") casadi::LinearInterpolantJac::reverse "[INTERNAL]
Return function that calculates adjoint derivatives reverse(nadj) returns a
cached instance if available, and calls  Function get_reverse(int nadj) if
no cached version is available.

";

%feature("docstring") casadi::LinearInterpolantJac::get_name_in "[INTERNAL]
Names of function input and outputs.

";

%feature("docstring") casadi::LinearInterpolantJac::call_reverse "[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::LinearInterpolantJac::eval "[INTERNAL]
Evaluate numerically.

";

%feature("docstring") casadi::LinearInterpolantJac::size2_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::LinearInterpolantJac::is_a "[INTERNAL]  Check
if the function is of a particular type.

";

%feature("docstring") casadi::LinearInterpolantJac::getAdaptorSolverName "[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring") casadi::LinearInterpolantJac::sparsity_in "[INTERNAL]
Get sparsity of a given input.

";

%feature("docstring") casadi::LinearInterpolantJac::index_in "[INTERNAL]
Get input scheme index by name.

";

%feature("docstring") casadi::LinearInterpolantJac::tangent "[INTERNAL]
Return tangent function.

";

%feature("docstring") casadi::LinearInterpolantJac::getJacSparsityGen "[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring") casadi::LinearInterpolantJac::nnz_in "[INTERNAL]
Number of input/output nonzeros.

";

%feature("docstring") casadi::LinearInterpolantJac::alloc_arg "[INTERNAL]
Ensure required length of arg field.

";

%feature("docstring") casadi::LinearInterpolantJac::forward "[INTERNAL]
Return function that calculates forward derivatives forward(nfwd) returns a
cached instance if available, and calls  Function get_forward(int nfwd) if
no cached version is available.

";

%feature("docstring") casadi::LinearInterpolantJac::hessian "[INTERNAL]
Return Hessian function.

";

%feature("docstring") casadi::LinearInterpolantJac::get_sparsity_in "[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring") casadi::LinearInterpolantJac::symbolicAdjSeed "[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::LinearInterpolantJac::getWorkSize "[INTERNAL]
Get the length of the work vector.

";

%feature("docstring") casadi::LinearInterpolantJac::oracle "[INTERNAL]  Get
oracle.

";

%feature("docstring") casadi::LinearInterpolantJac::which_depends "[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::LinearInterpolantJac::codegen_name "[INTERNAL]  Get name in codegen.

";

%feature("docstring") casadi::LinearInterpolantJac::checkInputs "[INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::LinearInterpolantJac::has_sprev "[INTERNAL]
Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::LinearInterpolantJac::_call "[INTERNAL]
Call a function, overloaded.

";

%feature("docstring") casadi::LinearInterpolantJac::checkArg "[INTERNAL]
Check if input arguments have correct length and dimensions.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::LinearInterpolantJac::get_n_reverse "[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring") casadi::LinearInterpolantJac::size1_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::LinearInterpolantJac::log "

>  void casadi::FunctionInternal::log(const std::string &msg) const 
------------------------------------------------------------------------
[INTERNAL] 
Log the status of the solver.

>  void casadi::FunctionInternal::log(const std::string &fcn, const std::string &msg) const 
------------------------------------------------------------------------
[INTERNAL] 
Log the status of the solver, function given.

";

%feature("docstring") casadi::LinearInterpolantJac::has_spfwd "[INTERNAL]
Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::LinearInterpolantJac::name_in "[INTERNAL]
Get input scheme name by index.

";

%feature("docstring") casadi::LinearInterpolantJac::alloc "[INTERNAL]
Ensure work vectors long enough to evaluate function.

";

%feature("docstring") casadi::LinearInterpolantJac::print "[INTERNAL]
Print.

";

%feature("docstring") casadi::LinearInterpolantJac::getCount "[INTERNAL]
Get the reference count.

";

%feature("docstring") casadi::LinearInterpolantJac::print_options "[INTERNAL]  Print list of options.

";

%feature("docstring") casadi::LinearInterpolantJac::wrap "[INTERNAL]  Wrap
in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::LinearInterpolantJac::generateMeta "[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring") casadi::LinearInterpolantJac::get_reverse "[INTERNAL]
Return function that calculates adjoint derivatives reverse(nadj) returns a
cached instance if available, and calls  Function get_reverse(int nadj) if
no cached version is available.

";

%feature("docstring") casadi::LinearInterpolantJac::call_forward "[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring") casadi::LinearInterpolantJac::_get_stats "[INTERNAL]
Get all statistics

";

%feature("docstring") casadi::LinearInterpolantJac::get_sparsity_out "[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring") casadi::LinearInterpolantJac::mx_in "[INTERNAL]  Get
function input(s) and output(s)

";

%feature("docstring") casadi::LinearInterpolantJac::symbolicOutput "[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::LinearInterpolantJac::numel_out "[INTERNAL]
Number of input/output elements.

";

%feature("docstring") casadi::LinearInterpolantJac::fwdViaJac "[INTERNAL]
Calculate derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::LinearInterpolantJac::codegen_incref "[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring") casadi::LinearInterpolantJac::replaceAdjSeed "[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring") casadi::LinearInterpolantJac::nnz_out "[INTERNAL]
Number of input/output nonzeros.

";

%feature("docstring") casadi::LinearInterpolantJac::matchingRes "[INTERNAL]
Check if output arguments that needs to be replaced.

";

%feature("docstring") casadi::LinearInterpolantJac::jac_sx "[INTERNAL]
Jacobian expression.

";

%feature("docstring") casadi::LinearInterpolantJac::get_forward "[INTERNAL]
Return function that calculates forward derivatives forward(nfwd) returns a
cached instance if available, and calls  Function get_forward(int nfwd) if
no cached version is available.

";

%feature("docstring") casadi::LinearInterpolantJac::getFullJacobian "[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::LinearInterpolantJac::setup "[INTERNAL]  Set
the (persistent and temporary) work vectors.

";

%feature("docstring") casadi::LinearInterpolantJac::n_out "[INTERNAL]
Number of function inputs and outputs.

";

%feature("docstring") casadi::LinearInterpolantJac::n_nodes "[INTERNAL]
Number of nodes in the algorithm.

";

%feature("docstring") casadi::LinearInterpolantJac::verbose "[INTERNAL]
Verbose mode?

";

%feature("docstring") casadi::LinearInterpolantJac::sparsity_jac "[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::LinearInterpolantJac::grad_mx "[INTERNAL]
Gradient expression.

";

%feature("docstring") casadi::LinearInterpolantJac::free_sx "[INTERNAL]
Get free variables (SX)

";

%feature("docstring") casadi::LinearInterpolantJac::sz_res "[INTERNAL]  Get
required length of res field.

";

%feature("docstring") casadi::LinearInterpolantJac::sx_out "[INTERNAL]  Get
function input(s) and output(s)

";

%feature("docstring") casadi::LinearInterpolantJac::eval_mx "[INTERNAL]
Evaluate with symbolic matrices.

";

%feature("docstring")
casadi::LinearInterpolantJac::getJacSparsityHierarchical "[INTERNAL]  A
flavor of getJacSparsity that does hierarchical block structure recognition.

";

%feature("docstring") casadi::LinearInterpolantJac::jacobian "[INTERNAL]
Return Jacobian function.

";

%feature("docstring") casadi::LinearInterpolantJac::setJacobian "[INTERNAL]
Return Jacobian function.

";

%feature("docstring") casadi::LinearInterpolantJac::sz_work "[INTERNAL]
Get number of temporary variables needed.

";

%feature("docstring") casadi::LinearInterpolantJac::getAtomicInput "[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::LinearInterpolantJac::getJacobian "[INTERNAL]
Return Jacobian function.

";

%feature("docstring") casadi::LinearInterpolantJac::default_in "[INTERNAL]
Get default input value.

";

%feature("docstring") casadi::LinearInterpolantJac::set_jac_sparsity "[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::LinearInterpolantJac::hess_sx "[INTERNAL]
Hessian expression.

";

%feature("docstring") casadi::LinearInterpolantJac::tang_sx "[INTERNAL]
Tangent expression.

";

%feature("docstring") casadi::LinearInterpolantJac::~LinearInterpolantJac "[INTERNAL]  Destructor.

";

%feature("docstring") casadi::LinearInterpolantJac::replaceFwdSeed "[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring") casadi::LinearInterpolantJac::signature "[INTERNAL]
Code generate the function.

";

%feature("docstring") casadi::LinearInterpolantJac "[INTERNAL]  First order
derivatives

>List of available options

+-------------+-----------------+---------------------+--------------------+
|     Id      |      Type       |     Description     |      Used in       |
+=============+=================+=====================+====================+
| lookup_mode | OT_STRINGVECTOR | Sets, for each grid | casadi::LinearInte |
|             |                 | dimenion, the       | rpolantJac         |
|             |                 | lookup algorithm    |                    |
|             |                 | used to find the    |                    |
|             |                 | correct index.      |                    |
|             |                 | 'linear' uses a     |                    |
|             |                 | for-loop + break;   |                    |
|             |                 | 'exact' uses        |                    |
|             |                 | floored division    |                    |
|             |                 | (only for uniform   |                    |
|             |                 | grids).             |                    |
+-------------+-----------------+---------------------+--------------------+

Diagrams
--------



C++ includes: linear_interpolant.hpp ";

%feature("docstring") casadi::LinearInterpolantJac::get_function "[INTERNAL] ";

%feature("docstring") casadi::LinearInterpolantJac::sz_arg "[INTERNAL]  Get
required length of arg field.

";

%feature("docstring") casadi::LinearInterpolantJac::addShorthand "[INTERNAL]  Generate shorthand macro.

";

%feature("docstring") casadi::LinearInterpolantJac::release "[INTERNAL]
Release a memory object.

";

%feature("docstring") casadi::LinearInterpolantJac::mapsum_mx "[INTERNAL]
Parallel evaluation.

";

%feature("docstring") casadi::LinearInterpolantJac::has_free "[INTERNAL]
Does the function have free variables.

";

%feature("docstring") casadi::LinearInterpolantJac::addDependency "[INTERNAL]  Add a dependent function.

";

%feature("docstring") casadi::LinearInterpolantJac::simple "[INTERNAL]
Evaluate numerically, simplied syntax.

";

%feature("docstring") casadi::LinearInterpolantJac::getPartition "[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring") casadi::LinearInterpolantJac::checkRes "[INTERNAL]
Check if output arguments have correct length and dimensions.

";

%feature("docstring") casadi::LinearInterpolantJac::slice "[INTERNAL]
returns a new function with a selection of inputs/outputs of the original

";

%feature("docstring") casadi::LinearInterpolantJac::alloc_res "[INTERNAL]
Ensure required length of res field.

";

%feature("docstring")
casadi::LinearInterpolantJac::getJacSparsityHierarchicalSymm "[INTERNAL]  A
flavor of getJacSparsity that does hierarchical block structure recognition
for symmetric Jacobians

";

%feature("docstring") casadi::LinearInterpolantJac::type_name "[INTERNAL]
Get type name.

";

%feature("docstring") casadi::LinearInterpolantJac::hasFullJacobian "[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::LinearInterpolantJac::simplifiedCall "[INTERNAL]  Use simplified signature.

";

%feature("docstring") casadi::LinearInterpolantJac::eval_name "[INTERNAL]
Get name of the evaluation function.

";

%feature("docstring") casadi::LinearInterpolantJac::get_n_out "[INTERNAL]
Number of function inputs and outputs.

";

%feature("docstring") casadi::LinearInterpolantJac::size_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::LinearInterpolantJac::sz_iw "[INTERNAL]  Get
required length of iw field.

";

%feature("docstring") casadi::LinearInterpolantJac::mx_out "[INTERNAL]  Get
function input(s) and output(s)

";

%feature("docstring") casadi::LinearInterpolantJac::free_memory "[INTERNAL]
Free memory block.

";

%feature("docstring") casadi::LinearInterpolantJac::name "[INTERNAL]  Name
of the function.

";

%feature("docstring") casadi::LinearInterpolantJac::weak "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring") casadi::LinearInterpolantJac::generate_lifted "[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::LinearInterpolantJac::sparsity_out "[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring") casadi::LinearInterpolantJac::name_out "[INTERNAL]
Get output scheme name by index.

";

%feature("docstring") casadi::LinearInterpolantJac::generateBody "[INTERNAL]  Generate code for the body of the C function.

";

%feature("docstring") casadi::LinearInterpolantJac::map_mx "[INTERNAL]
Parallel evaluation.

";

%feature("docstring") casadi::LinearInterpolantJac::getAtomicOutput "[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::LinearInterpolantJac::jac_mx "[INTERNAL]
Jacobian expression.

";

%feature("docstring") casadi::LinearInterpolantJac::alloc_w "[INTERNAL]
Ensure required length of w field.

";

%feature("docstring") casadi::LinearInterpolantJac::sp_fwd "[INTERNAL]
Propagate sparsity forward.

";

%feature("docstring") casadi::LinearInterpolantJac::replaceRes "[INTERNAL]
Replace 0-by-0 outputs.

";

%feature("docstring") casadi::LinearInterpolantJac::getAtomicOperation "[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring") casadi::LinearInterpolantJac::memory "[INTERNAL]
Memory objects.

";

%feature("docstring") casadi::LinearInterpolantJac::get_n_forward "[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring") casadi::LinearInterpolantJac::finalize "[INTERNAL]
Finalize the object creation This function, which visits the class hierarchy
in reverse order is run after init() has been completed.

";

%feature("docstring") casadi::LinearInterpolantJac::fullJacobian "[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::LinearInterpolantJac::generateDeclarations "[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring") casadi::LinearInterpolantJac::gradient "[INTERNAL]
Return gradient function.

";

%feature("docstring") casadi::LinearInterpolantJac::getTangent "[INTERNAL]
Return tangent function.

";

%feature("docstring") casadi::LinearInterpolantJac::getJacSparsity "[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::LinearInterpolantJac::get_n_in "[INTERNAL]
Number of function inputs and outputs.

";

%feature("docstring") casadi::LinearInterpolantJac::generate_dependencies "[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring") casadi::LinearInterpolantJac::set_work "[INTERNAL]
Set the (persistent) work vectors.

";

%feature("docstring") casadi::LinearInterpolantJac::print_option "[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring") casadi::LinearInterpolantJac::size2_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::LinearInterpolantJac::sz_w "[INTERNAL]  Get
required length of w field.

";

%feature("docstring") casadi::LinearInterpolantJac::getHessian "[INTERNAL]
Return Hessian function.

";

%feature("docstring") casadi::LinearInterpolantJac::has_codegen "[INTERNAL]
Is codegen supported?

";

%feature("docstring") casadi::LinearInterpolantJac::grad_sx "[INTERNAL]
Gradient expression.

";

%feature("docstring") casadi::LinearInterpolantJac::print_dimensions "[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::LinearInterpolantJac::n_in "[INTERNAL]
Number of function inputs and outputs.

";

%feature("docstring") casadi::LinearInterpolantJac::hasDerivative "[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring") casadi::LinearInterpolantJac::symbolicFwdSeed "[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring") casadi::LinearInterpolantJac::sp_weight "[INTERNAL]
Weighting factor for chosing forward/reverse mode, sparsity propagation.

";

%feature("docstring") casadi::LinearInterpolantJac::LinearInterpolantJac "[INTERNAL]  Constructor.

";

%feature("docstring") casadi::LinearInterpolantJac::sp_rev "[INTERNAL]
Propagate sparsity backwards.

";

%feature("docstring") casadi::LinearInterpolantJac::self "[INTERNAL]  Get a
public class instance.

";

%feature("docstring") casadi::LinearInterpolantJac::free_mx "[INTERNAL]
Get free variables ( MX)

";


// File: classcasadi_1_1Linsol.xml
%feature("docstring") casadi::Linsol::cholesky "

Obtain a numeric Cholesky factorization Only for Cholesky solvers.

";

%feature("docstring") casadi::Linsol::neig "

Number of negative eigenvalues Not available for all solvers.

";

%feature("docstring") casadi::Linsol::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::Linsol::cholesky_sparsity "

Obtain a symbolic Cholesky factorization Only for Cholesky solvers.

";

%feature("docstring") casadi::Linsol::solve "

>  DM casadi::Linsol::solve(const DM &A, const DM &B, bool tr=false) const 
------------------------------------------------------------------------

Solve numerically.

>  MX casadi::Linsol::solve(const MX &A, const MX &B, bool tr=false) const 
------------------------------------------------------------------------

Create a solve node.

";

%feature("docstring") casadi::Linsol::__hash__ "

Returns a number that is unique for a given Node. If the Object does not
point to any node, \"0\" is returned.

";

%feature("docstring") casadi::Linsol::Linsol "

>  casadi::Linsol::Linsol()
------------------------------------------------------------------------

Default constructor.

>  casadi::Linsol::Linsol(const std::string &name, const std::string &solver, const Dict &opts=Dict())
------------------------------------------------------------------------

Importer factory.

";

%feature("docstring") casadi::Linsol::print "

Print a description of the object.

";

%feature("docstring") casadi::Linsol "

Linear solver Create a solver for linear systems of equations Solves the
linear system A*X = B or A^T*X = B for X with A square and non- singular.

If A is structurally singular, an error will be thrown during init. If A is
numerically singular, the prepare step will fail.

General information
===================



List of plugins
===============



- csparsecholesky

- csparse

- ma27

- lapacklu

- lapackqr

- symbolicqr

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
Linsol.doc(\"myextraplugin\")



--------------------------------------------------------------------------------

csparsecholesky
---------------



Linsol with CSparseCholesky Interface

--------------------------------------------------------------------------------





--------------------------------------------------------------------------------

csparse
-------



Linsol with CSparse Interface

--------------------------------------------------------------------------------





--------------------------------------------------------------------------------

ma27
----



Interface to the sparse direct linear solver MA27 Works for symmetric
indefinite systems Partly adopted from qpOASES 3.2 Joel Andersson

--------------------------------------------------------------------------------

lapacklu
--------



This class solves the linear system A.x=b by making an LU factorization of
A: A = L.U, with L lower and U upper triangular

>List of available options

+-----------------------------+---------+----------------------------------+
|             Id              |  Type   |           Description            |
+=============================+=========+==================================+
| allow_equilibration_failure | OT_BOOL | Non-fatal error when             |
|                             |         | equilibration fails              |
+-----------------------------+---------+----------------------------------+
| equilibration               | OT_BOOL | Equilibrate the matrix           |
+-----------------------------+---------+----------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

lapackqr
--------



This class solves the linear system A.x=b by making an QR factorization of
A: A = Q.R, with Q orthogonal and R upper triangular

>List of available options

+----------+--------+------------------------------------------------------+
|    Id    |  Type  |                     Description                      |
+==========+========+======================================================+
| max_nrhs | OT_INT | Maximum number of right-hand-sides that get          |
|          |        | processed in a single pass [default:10].             |
+----------+--------+------------------------------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

symbolicqr
----------



Linear solver for sparse least-squares problems Inspired
fromhttps://github.com/scipy/scipy/blob/v0.14.0/scipy/sparse/linalg/isolve/lsqr.py#L96

Linsol based on QR factorization with sparsity pattern based reordering
without partial pivoting

>List of available options

+----------+-----------+---------------------------------------------------+
|    Id    |   Type    |                    Description                    |
+==========+===========+===================================================+
| codegen  | OT_BOOL   | C-code generation                                 |
+----------+-----------+---------------------------------------------------+
| compiler | OT_STRING | Compiler command to be used for compiling         |
|          |           | generated code                                    |
+----------+-----------+---------------------------------------------------+

--------------------------------------------------------------------------------



Joel Andersson

C++ includes: linsol.hpp ";

%feature("docstring") casadi::Linsol::repr "

Print a representation of the object.

";

%feature("docstring") casadi::Linsol::rank "

Matrix rank Not available for all solvers.

";

%feature("docstring") casadi::Linsol::is_null "

Is a null pointer?

";

%feature("docstring") casadi::Linsol::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::Linsol::plugin_name "

Query plugin name.

";

%feature("docstring") casadi::Linsol::getRepresentation "

Return a string with a representation (for SWIG)

";


// File: classcasadi_1_1Logger.xml
%feature("docstring") casadi::Logger "

Keeps track of logging output to screen and/or files. All printout from
CasADi routines should go through this files.

Joel Andersson

C++ includes: casadi_logger.hpp ";


// File: classcasadi_1_1Lsqr.xml
%feature("docstring") casadi::Lsqr::get_n_reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::Lsqr::print "[INTERNAL]  Print.

";

%feature("docstring") casadi::Lsqr::set_temp "[INTERNAL]  Set the
(temporary) work vectors.

";

%feature("docstring") casadi::Lsqr::nnz_out "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::Lsqr::get_sparsity_out "[INTERNAL]  Get
sparsity of a given output.

";

%feature("docstring") casadi::Lsqr::mx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Lsqr::jacobian "[INTERNAL]  Return Jacobian
function.

";

%feature("docstring") casadi::Lsqr::set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::Lsqr::get_stats "[INTERNAL]  Get all
statistics

";

%feature("docstring") casadi::Lsqr::has_codegen "[INTERNAL]  Is codegen
supported?

";

%feature("docstring") casadi::Lsqr::is_a "[INTERNAL]  Check if the function
is of a particular type.

";

%feature("docstring") casadi::Lsqr::clear_memory "[INTERNAL]  Clear all
memory (called from destructor)

";

%feature("docstring") casadi::Lsqr::tangent "[INTERNAL]  Return tangent
function.

";

%feature("docstring") casadi::Lsqr::print_options "[INTERNAL]  Print list
of options.

";

%feature("docstring") casadi::Lsqr::grad_sx "[INTERNAL]  Gradient
expression.

";

%feature("docstring") casadi::Lsqr::weak "[INTERNAL]  Get a weak reference
to the object.

";

%feature("docstring") casadi::Lsqr::has_sprev "[INTERNAL]  Is the class
able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Lsqr::sp_rev "[INTERNAL]  Propagate sparsity
backwards.

";

%feature("docstring") casadi::Lsqr::type_name "[INTERNAL]  Get type name.

";

%feature("docstring") casadi::Lsqr::size2_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Lsqr::getFullJacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Lsqr::generateFunction "[INTERNAL]  Generate
code the function.

";

%feature("docstring") casadi::Lsqr::fullJacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Lsqr::sz_w "[INTERNAL]  Get required length
of w field.

";

%feature("docstring") casadi::Lsqr::get_options "[INTERNAL]  Options.

";

%feature("docstring") casadi::Lsqr::getWorkSize "[INTERNAL]  Get the length
of the work vector.

";

%feature("docstring") casadi::Lsqr::get_sparsity_in "[INTERNAL]  Get
sparsity of a given input.

";

%feature("docstring") casadi::Lsqr::~Lsqr "[INTERNAL] ";

%feature("docstring") casadi::Lsqr::generateBody "[INTERNAL]  Generate code
for the function body.

";

%feature("docstring") casadi::Lsqr::sp_weight "[INTERNAL]  Weighting factor
for chosing forward/reverse mode, sparsity propagation.

";

%feature("docstring") casadi::Lsqr::linsol_eval_sx "[INTERNAL]  Evaluate
SX, possibly transposed.

";

%feature("docstring") casadi::Lsqr::checkArg "[INTERNAL]  Check if input
arguments have correct length and dimensions.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::Lsqr::getHessian "[INTERNAL]  Return Hessian
function.

";

%feature("docstring") casadi::Lsqr::solve_cholesky "[INTERNAL]   Solve
Cholesky.

";

%feature("docstring") casadi::Lsqr::get_n_forward "[INTERNAL]  Return
function that calculates forward derivatives forward(nfwd) returns a cached
instance if available, and calls  Function get_forward(int nfwd) if no
cached version is available.

";

%feature("docstring") casadi::Lsqr::hasFullJacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Lsqr::size_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Lsqr::init_memory "[INTERNAL]  Initalize
memory block.

";

%feature("docstring") casadi::Lsqr::_set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::Lsqr::has_spfwd "[INTERNAL]  Is the class
able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Lsqr::hessian "[INTERNAL]  Return Hessian
function.

";

%feature("docstring") casadi::Lsqr::forward "[INTERNAL]  Return function
that calculates forward derivatives forward(nfwd) returns a cached instance
if available, and calls  Function get_forward(int nfwd) if no cached version
is available.

";

%feature("docstring") casadi::Lsqr::name "[INTERNAL]  Name of the function.

";

%feature("docstring") casadi::Lsqr::getJacSparsityGen "[INTERNAL]  Get the
sparsity pattern, forward mode.

";

%feature("docstring") casadi::Lsqr::which_depends "[INTERNAL]  Which
variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::Lsqr::sx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Lsqr::pivoting "[INTERNAL] ";

%feature("docstring") casadi::Lsqr::getJacSparsityHierarchicalSymm "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::Lsqr::log "

>  void casadi::FunctionInternal::log(const std::string &msg) const 
------------------------------------------------------------------------
[INTERNAL] 
Log the status of the solver.

>  void casadi::FunctionInternal::log(const std::string &fcn, const std::string &msg) const 
------------------------------------------------------------------------
[INTERNAL] 
Log the status of the solver, function given.

";

%feature("docstring") casadi::Lsqr::signature "[INTERNAL]  Code generate
the function.

";

%feature("docstring") casadi::Lsqr::sparsity_out "[INTERNAL]  Get sparsity
of a given output.

";

%feature("docstring") casadi::Lsqr::checkRes "[INTERNAL]  Check if output
arguments have correct length and dimensions.

";

%feature("docstring") casadi::Lsqr::symbolicAdjSeed "[INTERNAL]  Symbolic
expressions for the adjoint seeds.

";

%feature("docstring") casadi::Lsqr::gradient "[INTERNAL]  Return gradient
function.

";

%feature("docstring") casadi::Lsqr::replaceFwdSeed "[INTERNAL]  Replace
0-by-0 forward seeds.

";

%feature("docstring") casadi::Lsqr::ad_weight "[INTERNAL]  Weighting factor
for chosing forward/reverse mode.

";

%feature("docstring") casadi::Lsqr::alloc_memory "[INTERNAL]  Create memory
block.

";

%feature("docstring") casadi::Lsqr::default_in "[INTERNAL]  Get default
input value.

";

%feature("docstring") casadi::Lsqr::alloc_res "[INTERNAL]  Ensure required
length of res field.

";

%feature("docstring") casadi::Lsqr::alloc_arg "[INTERNAL]  Ensure required
length of arg field.

";

%feature("docstring") casadi::Lsqr::_call "[INTERNAL]   Call a function,
overloaded.

";

%feature("docstring") casadi::Lsqr::get_function "[INTERNAL] ";

%feature("docstring") casadi::Lsqr::construct "[INTERNAL]  Construct
Prepares the function for evaluation.

";

%feature("docstring") casadi::Lsqr::size1_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Lsqr::getAdaptorSolverName "[INTERNAL]
Obtain solver name from Adaptor.

";

%feature("docstring") casadi::Lsqr::map_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::Lsqr::set_jac_sparsity "[INTERNAL]  Generate
the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Lsqr::neig "[INTERNAL]  Number of negative
eigenvalues.

";

%feature("docstring") casadi::Lsqr::size1_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Lsqr::free_memory "[INTERNAL]  Free memory
block.

";

%feature("docstring") casadi::Lsqr::grad_mx "[INTERNAL]  Gradient
expression.

";

%feature("docstring") casadi::Lsqr::getCount "[INTERNAL]  Get the reference
count.

";

%feature("docstring") casadi::Lsqr::get_n_in "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::Lsqr::get_reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::Lsqr::addDependency "[INTERNAL]  Add a
dependent function.

";

%feature("docstring") casadi::Lsqr::slice "[INTERNAL]  returns a new
function with a selection of inputs/outputs of the original

";

%feature("docstring") casadi::Lsqr::numel_in "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::Lsqr::getAtomicInput "[INTERNAL]  Get the
(integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::Lsqr::print_dimensions "[INTERNAL]  Print
dimensions of inputs and outputs.

";

%feature("docstring") casadi::Lsqr::name_out "[INTERNAL]  Get output scheme
name by index.

";

%feature("docstring") casadi::Lsqr::eval_sx "[INTERNAL]  Evaluate with
symbolic scalars.

";

%feature("docstring") casadi::Lsqr::free_sx "[INTERNAL]  Get free variables
(SX)

";

%feature("docstring") casadi::Lsqr::setup "[INTERNAL]  Set the (persistent
and temporary) work vectors.

";

%feature("docstring") casadi::Lsqr::getAtomicInputReal "[INTERNAL]  Get the
floating point output argument of an atomic operation.

";

%feature("docstring") casadi::Lsqr::adjViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::Lsqr::sp_fwd "[INTERNAL]  Propagate sparsity
forward.

";

%feature("docstring") casadi::Lsqr::matchingArg "[INTERNAL]  Check if input
arguments that needs to be replaced.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::Lsqr::alloc_w "[INTERNAL]  Ensure required
length of w field.

";

%feature("docstring") casadi::Lsqr::checkInputs "[INTERNAL]  Check if the
numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::Lsqr::get_forward "[INTERNAL]  Return
function that calculates forward derivatives forward(nfwd) returns a cached
instance if available, and calls  Function get_forward(int nfwd) if no
cached version is available.

";

%feature("docstring") casadi::Lsqr::n_nodes "[INTERNAL]  Number of nodes in
the algorithm.

";

%feature("docstring") casadi::Lsqr::print_free "[INTERNAL]  Print free
variables.

";

%feature("docstring") casadi::Lsqr::get_n_out "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::Lsqr::codegen_incref "[INTERNAL]  Codegen
incref for dependencies.

";

%feature("docstring") casadi::Lsqr::getJacobian "[INTERNAL]  Return
Jacobian function.

";

%feature("docstring") casadi::Lsqr::oracle "[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::Lsqr::setJacobian "[INTERNAL]  Return
Jacobian function.

";

%feature("docstring") casadi::Lsqr::replaceArg "[INTERNAL]  Replace 0-by-0
inputs.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::Lsqr::release "[INTERNAL]  Release a memory
object.

";

%feature("docstring") casadi::Lsqr::getAlgorithmSize "[INTERNAL]  Get the
number of atomic operations.

";

%feature("docstring") casadi::Lsqr::codegen_name "[INTERNAL]  Get name in
codegen.

";

%feature("docstring") casadi::Lsqr::index_in "[INTERNAL]  Get input scheme
index by name.

";

%feature("docstring") casadi::Lsqr::linsol_cholesky_sparsity "[INTERNAL]
Sparsity pattern of the cholesky factors.

";

%feature("docstring") casadi::Lsqr::replaceRes "[INTERNAL]  Replace 0-by-0
outputs.

";

%feature("docstring") casadi::Lsqr::get_name_out "[INTERNAL]  Names of
function input and outputs.

";

%feature("docstring") casadi::Lsqr::getAtomicOutput "[INTERNAL]  Get the
(integer) output argument of an atomic operation.

";

%feature("docstring") casadi::Lsqr::free_mx "[INTERNAL]  Get free variables
( MX)

";

%feature("docstring") casadi::Lsqr::generateMeta "[INTERNAL]  Generate
meta-information allowing a user to evaluate a generated function.

";

%feature("docstring") casadi::Lsqr::tang_mx "[INTERNAL]  Tangent
expression.

";

%feature("docstring") casadi::Lsqr::simple "[INTERNAL]  Evaluate
numerically, simplied syntax.

";

%feature("docstring") casadi::Lsqr::generate_dependencies "[INTERNAL]
Export / Generate C code for the dependency function.

";

%feature("docstring") casadi::Lsqr::size_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Lsqr::get_name_in "[INTERNAL]  Names of
function input and outputs.

";

%feature("docstring") casadi::Lsqr::factory "[INTERNAL] ";

%feature("docstring") casadi::Lsqr::getJacSparsityHierarchical "[INTERNAL]
A flavor of getJacSparsity that does hierarchical block structure
recognition.

";

%feature("docstring") casadi::Lsqr::mapsum_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::Lsqr::n_in "[INTERNAL]  Number of function
inputs and outputs.

";

%feature("docstring") casadi::Lsqr::factorize "[INTERNAL]  Factorize the
linear system.

";

%feature("docstring") casadi::Lsqr::_set_temp "[INTERNAL]  Set the
(temporary) work vectors.

";

%feature("docstring") casadi::Lsqr::plugin_name "[INTERNAL] ";

%feature("docstring") casadi::Lsqr::_get_stats "[INTERNAL]  Get all
statistics

";

%feature("docstring") casadi::Lsqr::replaceAdjSeed "[INTERNAL]  Replace
0-by-0 reverse seeds.

";

%feature("docstring") casadi::Lsqr "

'symbolicqr' plugin for Linsol

Linear solver for sparse least-squares problems Inspired
fromhttps://github.com/scipy/scipy/blob/v0.14.0/scipy/sparse/linalg/isolve/lsqr.py#L96

Linsol based on QR factorization with sparsity pattern based reordering
without partial pivoting

>List of available options

+----------+-----------+---------------------------------------------------+
|    Id    |   Type    |                    Description                    |
+==========+===========+===================================================+
| codegen  | OT_BOOL   | C-code generation                                 |
+----------+-----------+---------------------------------------------------+
| compiler | OT_STRING | Compiler command to be used for compiling         |
|          |           | generated code                                    |
+----------+-----------+---------------------------------------------------+

Joel Andersson

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
+------------------+-----------------+------------------+------------------+
| codegen          | OT_BOOL         | C-code           | casadi::Lsqr     |
|                  |                 | generation       |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Compiler command | casadi::Lsqr     |
|                  |                 | to be used for   |                  |
|                  |                 | compiling        |                  |
|                  |                 | generated code   |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Custom input     | casadi::Function |
|                  |                 | scheme           | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Custom output    | casadi::Function |
|                  |                 | scheme           | Internal         |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: lsqr.hpp ";

%feature("docstring") casadi::Lsqr::name_in "[INTERNAL]  Get input scheme
name by index.

";

%feature("docstring") casadi::Lsqr::memory "[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::Lsqr::fwdViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::Lsqr::sz_iw "[INTERNAL]  Get required length
of iw field.

";

%feature("docstring") casadi::Lsqr::reset "[INTERNAL] ";

%feature("docstring") casadi::Lsqr::wrap "[INTERNAL]  Wrap in an Function
instance consisting of only one MX call.

";

%feature("docstring") casadi::Lsqr::checkout "[INTERNAL]  Checkout a memory
object.

";

%feature("docstring") casadi::Lsqr::has_free "[INTERNAL]  Does the function
have free variables.

";

%feature("docstring") casadi::Lsqr::getGradient "[INTERNAL]  Return
gradient function.

";

%feature("docstring") casadi::Lsqr::eval_mx "[INTERNAL]  Evaluate with
symbolic matrices.

";

%feature("docstring") casadi::Lsqr::Lsqr "[INTERNAL] ";

%feature("docstring") casadi::Lsqr::getAtomicOperation "[INTERNAL]  Get an
atomic operation operator index.

";

%feature("docstring") casadi::Lsqr::n_mem "[INTERNAL]  Maximum number of
memory objects.

";

%feature("docstring") casadi::Lsqr::reverse "[INTERNAL]  Return function
that calculates adjoint derivatives reverse(nadj) returns a cached instance
if available, and calls  Function get_reverse(int nadj) if no cached version
is available.

";

%feature("docstring") casadi::Lsqr::symbolicOutput "[INTERNAL]  Get a
vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::Lsqr::simplifiedCall "[INTERNAL]  Use
simplified signature.

";

%feature("docstring") casadi::Lsqr::sz_res "[INTERNAL]  Get required length
of res field.

";

%feature("docstring") casadi::Lsqr::jit_dependencies "[INTERNAL]   Jit
dependencies.

";

%feature("docstring") casadi::Lsqr::call_forward "[INTERNAL]  Forward mode
AD, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Lsqr::call "[INTERNAL]   Call a function,
templated.

";

%feature("docstring") casadi::Lsqr::_eval "

>  void casadi::FunctionInternal::_eval(const double **arg, double **res, int *iw, double *w, int mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate numerically.

>  void casadi::FunctionInternal::_eval(const SXElem **arg, SXElem **res, int *iw, SXElem *w, int mem) const

>  void casadi::FunctionInternal::_eval(const bvec_t **arg, bvec_t **res, int *iw, bvec_t *w, int mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

%feature("docstring") casadi::Lsqr::index_out "[INTERNAL]  Get output
scheme index by name.

";

%feature("docstring") casadi::Lsqr::getPartition "[INTERNAL]  Get the
unidirectional or bidirectional partition.

";

%feature("docstring") casadi::Lsqr::_setup "[INTERNAL]  Set the (persistent
and temporary) work vectors.

";

%feature("docstring") casadi::Lsqr::has_function "[INTERNAL] ";

%feature("docstring") casadi::Lsqr::self "[INTERNAL]  Get a public class
instance.

";

%feature("docstring") casadi::Lsqr::sx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Lsqr::generateDeclarations "[INTERNAL]
Generate code for the declarations of the C function.

";

%feature("docstring") casadi::Lsqr::eval_name "[INTERNAL]  Get name of the
evaluation function.

";

%feature("docstring") casadi::Lsqr::n_out "[INTERNAL]  Number of function
inputs and outputs.

";

%feature("docstring") casadi::Lsqr::init "[INTERNAL]  Initialize.

";

%feature("docstring") casadi::Lsqr::mx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Lsqr::tang_sx "[INTERNAL]  Tangent
expression.

";

%feature("docstring") casadi::Lsqr::codegen_decref "[INTERNAL]  Codegen
decref for dependencies.

";

%feature("docstring") casadi::Lsqr::hess_sx "[INTERNAL]  Hessian
expression.

";

%feature("docstring") casadi::Lsqr::call_reverse "[INTERNAL]  Reverse mode,
virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Lsqr::nnz_in "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::Lsqr::symbolicFwdSeed "[INTERNAL]  Symbolic
expressions for the forward seeds.

";

%feature("docstring") casadi::Lsqr::verbose "[INTERNAL]  Verbose mode?

";

%feature("docstring") casadi::Lsqr::size2_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Lsqr::rank "[INTERNAL]   Matrix rank.

";

%feature("docstring") casadi::Lsqr::hasDerivative "[INTERNAL]  Can
derivatives be calculated in any way?

";

%feature("docstring") casadi::Lsqr::eval "[INTERNAL]  Evaluate numerically.

";

%feature("docstring") casadi::Lsqr::solve "[INTERNAL] ";

%feature("docstring") casadi::Lsqr::jac_sx "[INTERNAL]  Jacobian
expression.

";

%feature("docstring") casadi::Lsqr::getTangent "[INTERNAL]  Return tangent
function.

";

%feature("docstring") casadi::Lsqr::sz_work "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") casadi::Lsqr::finalize "[INTERNAL]  Finalize the
object creation This function, which visits the class hierarchy in reverse
order is run after init() has been completed.

";

%feature("docstring") casadi::Lsqr::generate_lifted "[INTERNAL]  Extract
the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::Lsqr::print_option "[INTERNAL]  Print all
information there is to know about a certain option.

";

%feature("docstring") casadi::Lsqr::getJacSparsity "[INTERNAL]  Generate
the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Lsqr::sparsity_jac "[INTERNAL]  Get, if
necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Lsqr::matchingRes "[INTERNAL]  Check if
output arguments that needs to be replaced.

";

%feature("docstring") casadi::Lsqr::linsol_cholesky "[INTERNAL]  Get
Cholesky factor.

";

%feature("docstring") casadi::Lsqr::numel_out "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::Lsqr::sz_arg "[INTERNAL]  Get required length
of arg field.

";

%feature("docstring") casadi::Lsqr::addShorthand "[INTERNAL]  Generate
shorthand macro.

";

%feature("docstring") casadi::Lsqr::sparsity_in "[INTERNAL]  Get sparsity
of a given input.

";

%feature("docstring") casadi::Lsqr::repr "[INTERNAL]  Print.

";

%feature("docstring") casadi::Lsqr::alloc "[INTERNAL]  Ensure work vectors
long enough to evaluate function.

";

%feature("docstring") casadi::Lsqr::jac_mx "[INTERNAL]  Jacobian
expression.

";

%feature("docstring") casadi::Lsqr::alloc_iw "[INTERNAL]  Ensure required
length of iw field.

";


// File: classcasadi_1_1Map.xml
%feature("docstring") casadi::Map::getAtomicInputReal "[INTERNAL]  Get the
floating point output argument of an atomic operation.

";

%feature("docstring") casadi::Map::hessian "[INTERNAL]  Return Hessian
function.

";

%feature("docstring") casadi::Map::clear_memory "[INTERNAL]  Clear all
memory (called from destructor)

";

%feature("docstring") casadi::Map::n_in "[INTERNAL]  Number of function
inputs and outputs.

";

%feature("docstring") casadi::Map::self "[INTERNAL]  Get a public class
instance.

";

%feature("docstring") casadi::Map::get_n_out "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::Map::get_n_in "[INTERNAL]  Number of function
inputs and outputs.

";

%feature("docstring") casadi::Map::call "[INTERNAL]   Call a function,
templated.

";

%feature("docstring") casadi::Map::size_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Map::matchingRes "[INTERNAL]  Check if output
arguments that needs to be replaced.

";

%feature("docstring") casadi::Map::numel_in "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::Map::_setup "[INTERNAL]  Set the (persistent
and temporary) work vectors.

";

%feature("docstring") casadi::Map::addDependency "[INTERNAL]  Add a
dependent function.

";

%feature("docstring") casadi::Map::_eval "

>  void casadi::FunctionInternal::_eval(const double **arg, double **res, int *iw, double *w, int mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate numerically.

>  void casadi::FunctionInternal::_eval(const SXElem **arg, SXElem **res, int *iw, SXElem *w, int mem) const

>  void casadi::FunctionInternal::_eval(const bvec_t **arg, bvec_t **res, int *iw, bvec_t *w, int mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

%feature("docstring") casadi::Map::fwdViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::Map::eval "[INTERNAL]  Evaluate the function
numerically.

";

%feature("docstring") casadi::Map::mx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Map::symbolicOutput "[INTERNAL]  Get a vector
of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::Map::alloc_iw "[INTERNAL]  Ensure required
length of iw field.

";

%feature("docstring") casadi::Map::getFullJacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Map::checkArg "[INTERNAL]  Check if input
arguments have correct length and dimensions.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::Map::getWorkSize "[INTERNAL]  Get the length
of the work vector.

";

%feature("docstring") casadi::Map::get_n_reverse "[INTERNAL]  Generate a
function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::Map::call_reverse "[INTERNAL]  Reverse mode,
virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Map "[INTERNAL]  Evaluate in parallel Joel
Andersson

C++ includes: map.hpp ";

%feature("docstring") casadi::Map::print_options "[INTERNAL]  Print list of
options.

";

%feature("docstring") casadi::Map::which_depends "[INTERNAL]  Which
variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::Map::free_sx "[INTERNAL]  Get free variables
(SX)

";

%feature("docstring") casadi::Map::sx_in "[INTERNAL]  Get function input(s)
and output(s)

";

%feature("docstring") casadi::Map::eval_mx "[INTERNAL]  Evaluate with
symbolic matrices.

";

%feature("docstring") casadi::Map::oracle "[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::Map::slice "[INTERNAL]  returns a new
function with a selection of inputs/outputs of the original

";

%feature("docstring") casadi::Map::mapsum_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::Map::matchingArg "[INTERNAL]  Check if input
arguments that needs to be replaced.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::Map::ad_weight "[INTERNAL]  Weighting factor
for chosing forward/reverse mode.

";

%feature("docstring") casadi::Map::forward "[INTERNAL]  Return function
that calculates forward derivatives forward(nfwd) returns a cached instance
if available, and calls  Function get_forward(int nfwd) if no cached version
is available.

";

%feature("docstring") casadi::Map::getHessian "[INTERNAL]  Return Hessian
function.

";

%feature("docstring") casadi::Map::checkout "[INTERNAL]  Checkout a memory
object.

";

%feature("docstring") casadi::Map::size_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Map::sz_iw "[INTERNAL]  Get required length
of iw field.

";

%feature("docstring") casadi::Map::generateFunction "[INTERNAL]  Generate
code the function.

";

%feature("docstring") casadi::Map::get_forward "[INTERNAL]  Generate a
function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::Map::getJacobian "[INTERNAL]  Return Jacobian
function.

";

%feature("docstring") casadi::Map::_call "[INTERNAL]   Call a function,
overloaded.

";

%feature("docstring") casadi::Map::jacobian "[INTERNAL]  Return Jacobian
function.

";

%feature("docstring") casadi::Map::simple "[INTERNAL]  Evaluate
numerically, simplied syntax.

";

%feature("docstring") casadi::Map::addShorthand "[INTERNAL]  Generate
shorthand macro.

";

%feature("docstring") casadi::Map::has_sprev "[INTERNAL]  Is the class able
to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Map::sp_weight "[INTERNAL]  Weighting factor
for chosing forward/reverse mode, sparsity propagation.

";

%feature("docstring") casadi::Map::sz_work "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") casadi::Map::checkInputs "[INTERNAL]  Check if the
numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::Map::grad_mx "[INTERNAL]  Gradient
expression.

";

%feature("docstring") casadi::Map::print_dimensions "[INTERNAL]  Print
dimensions of inputs and outputs.

";

%feature("docstring") casadi::Map::replaceFwdSeed "[INTERNAL]  Replace
0-by-0 forward seeds.

";

%feature("docstring") casadi::Map::tangent "[INTERNAL]  Return tangent
function.

";

%feature("docstring") casadi::Map::sp_rev "[INTERNAL]  Propagate sparsity
backwards.

";

%feature("docstring") casadi::Map::name_in "[INTERNAL]  Get input scheme
name by index.

";

%feature("docstring") casadi::Map::jit_dependencies "[INTERNAL]   Jit
dependencies.

";

%feature("docstring") casadi::Map::generateDeclarations "[INTERNAL]
Generate code for the declarations of the C function.

";

%feature("docstring") casadi::Map::index_out "[INTERNAL]  Get output scheme
index by name.

";

%feature("docstring") casadi::Map::verbose "[INTERNAL]  Verbose mode?

";

%feature("docstring") casadi::Map::is_a "[INTERNAL]  Check if the function
is of a particular type.

";

%feature("docstring") casadi::Map::index_in "[INTERNAL]  Get input scheme
index by name.

";

%feature("docstring") casadi::Map::symbolicAdjSeed "[INTERNAL]  Symbolic
expressions for the adjoint seeds.

";

%feature("docstring") casadi::Map::fullJacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Map::setup "[INTERNAL]  Set the (persistent
and temporary) work vectors.

";

%feature("docstring") casadi::Map::free_memory "[INTERNAL]  Free memory
block.

";

%feature("docstring") casadi::Map::jac_mx "[INTERNAL]  Jacobian expression.

";

%feature("docstring") casadi::Map::eval_name "[INTERNAL]  Get name of the
evaluation function.

";

%feature("docstring") casadi::Map::sparsity_in "[INTERNAL]  Get sparsity of
a given input.

";

%feature("docstring") casadi::Map::getAtomicInput "[INTERNAL]  Get the
(integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::Map::gradient "[INTERNAL]  Return gradient
function.

";

%feature("docstring") casadi::Map::map_mx "[INTERNAL]  Parallel evaluation.

";

%feature("docstring") casadi::Map::get_stats "[INTERNAL]  Get all
statistics

";

%feature("docstring") casadi::Map::alloc_w "[INTERNAL]  Ensure required
length of w field.

";

%feature("docstring") casadi::Map::name_out "[INTERNAL]  Get output scheme
name by index.

";

%feature("docstring") casadi::Map::getJacSparsityHierarchical "[INTERNAL]
A flavor of getJacSparsity that does hierarchical block structure
recognition.

";

%feature("docstring") casadi::Map::simplifiedCall "[INTERNAL]  Use
simplified signature.

";

%feature("docstring") casadi::Map::eval_sx "[INTERNAL]  evaluate
symbolically while also propagating directional derivatives

";

%feature("docstring") casadi::Map::free_mx "[INTERNAL]  Get free variables
( MX)

";

%feature("docstring") casadi::Map::generate_dependencies "[INTERNAL]
Export / Generate C code for the dependency function.

";

%feature("docstring") casadi::Map::setJacobian "[INTERNAL]  Return Jacobian
function.

";

%feature("docstring") casadi::Map::n_mem "[INTERNAL]  Maximum number of
memory objects.

";

%feature("docstring") casadi::Map::sz_w "[INTERNAL]  Get required length of
w field.

";

%feature("docstring") casadi::Map::get_name_out "[INTERNAL]  Names of
function input and outputs.

";

%feature("docstring") casadi::Map::codegen_name "[INTERNAL]  Get name in
codegen.

";

%feature("docstring") casadi::Map::getAdaptorSolverName "[INTERNAL]  Obtain
solver name from Adaptor.

";

%feature("docstring") casadi::Map::hess_sx "[INTERNAL]  Hessian expression.

";

%feature("docstring") casadi::Map::tang_sx "[INTERNAL]  Tangent expression.

";

%feature("docstring") casadi::Map::_set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::Map::init "[INTERNAL]  Initialize.

";

%feature("docstring") casadi::Map::_set_temp "[INTERNAL]  Set the
(temporary) work vectors.

";

%feature("docstring") casadi::Map::jac_sx "[INTERNAL]  Jacobian expression.

";

%feature("docstring") casadi::Map::numel_out "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::Map::codegen_decref "[INTERNAL]  Codegen
decref for dependencies.

";

%feature("docstring") casadi::Map::construct "[INTERNAL]  Construct
Prepares the function for evaluation.

";

%feature("docstring") casadi::Map::size1_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Map::get_options "[INTERNAL]  Options.

";

%feature("docstring") casadi::Map::getPartition "[INTERNAL]  Get the
unidirectional or bidirectional partition.

";

%feature("docstring") casadi::Map::_get_stats "[INTERNAL]  Get all
statistics

";

%feature("docstring") casadi::Map::repr "[INTERNAL]  Print.

";

%feature("docstring") casadi::Map::get_sparsity_in "[INTERNAL]  Sparsities
of function inputs and outputs.

";

%feature("docstring") casadi::Map::call_forward "[INTERNAL]  Forward mode
AD, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Map::get_function "[INTERNAL] ";

%feature("docstring") casadi::Map::get_n_forward "[INTERNAL]  Generate a
function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::Map::size2_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Map::init_memory "[INTERNAL]  Initalize
memory block.

";

%feature("docstring") casadi::Map::signature "[INTERNAL]  Code generate the
function.

";

%feature("docstring") casadi::Map::parallelization "[INTERNAL]  Type of
parallellization.

";

%feature("docstring") casadi::Map::mx_in "[INTERNAL]  Get function input(s)
and output(s)

";

%feature("docstring") casadi::Map::~Map "[INTERNAL]  Destructor.

";

%feature("docstring") casadi::Map::getAlgorithmSize "[INTERNAL]  Get the
number of atomic operations.

";

%feature("docstring") casadi::Map::replaceArg "[INTERNAL]  Replace 0-by-0
inputs.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::Map::has_spfwd "[INTERNAL]  Is the class able
to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Map::sparsity_out "[INTERNAL]  Get sparsity
of a given output.

";

%feature("docstring") casadi::Map::sparsity_jac "[INTERNAL]  Get, if
necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Map::getJacSparsity "[INTERNAL]  Generate the
sparsity of a Jacobian block.

";

%feature("docstring") casadi::Map::sx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Map::wrap "[INTERNAL]  Wrap in an Function
instance consisting of only one MX call.

";

%feature("docstring") casadi::Map::alloc "[INTERNAL]  Ensure work vectors
long enough to evaluate function.

";

%feature("docstring") casadi::Map::replaceAdjSeed "[INTERNAL]  Replace
0-by-0 reverse seeds.

";

%feature("docstring") casadi::Map::has_codegen "[INTERNAL]  Is codegen
supported?

";

%feature("docstring") casadi::Map::n_nodes "[INTERNAL]  Number of nodes in
the algorithm.

";

%feature("docstring") casadi::Map::get_reverse "[INTERNAL]  Generate a
function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::Map::get_sparsity_out "[INTERNAL]  Sparsities
of function inputs and outputs.

";

%feature("docstring") casadi::Map::alloc_arg "[INTERNAL]  Ensure required
length of arg field.

";

%feature("docstring") casadi::Map::sp_fwd "[INTERNAL]  Propagate sparsity
forward.

";

%feature("docstring") casadi::Map::finalize "[INTERNAL]  Finalize the
object creation This function, which visits the class hierarchy in reverse
order is run after init() has been completed.

";

%feature("docstring") casadi::Map::size1_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Map::alloc_res "[INTERNAL]  Ensure required
length of res field.

";

%feature("docstring") casadi::Map::tang_mx "[INTERNAL]  Tangent expression.

";

%feature("docstring") casadi::Map::generateMeta "[INTERNAL]  Generate meta-
information allowing a user to evaluate a generated function.

";

%feature("docstring") casadi::Map::memory "[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::Map::reverse "[INTERNAL]  Return function
that calculates adjoint derivatives reverse(nadj) returns a cached instance
if available, and calls  Function get_reverse(int nadj) if no cached version
is available.

";

%feature("docstring") casadi::Map::name "[INTERNAL]  Name of the function.

";

%feature("docstring") casadi::Map::log "

>  void casadi::FunctionInternal::log(const std::string &msg) const 
------------------------------------------------------------------------
[INTERNAL] 
Log the status of the solver.

>  void casadi::FunctionInternal::log(const std::string &fcn, const std::string &msg) const 
------------------------------------------------------------------------
[INTERNAL] 
Log the status of the solver, function given.

";

%feature("docstring") casadi::Map::weak "[INTERNAL]  Get a weak reference
to the object.

";

%feature("docstring") casadi::Map::nnz_in "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::Map::generateBody "[INTERNAL]  Generate code
for the body of the C function.

";

%feature("docstring") casadi::Map::get_name_in "[INTERNAL]  Names of
function input and outputs.

";

%feature("docstring") casadi::Map::evalGen "[INTERNAL]  Evaluate or
propagate sparsities.

";

%feature("docstring") casadi::Map::sz_res "[INTERNAL]  Get required length
of res field.

";

%feature("docstring") casadi::Map::getAtomicOutput "[INTERNAL]  Get the
(integer) output argument of an atomic operation.

";

%feature("docstring") casadi::Map::adjViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::Map::hasDerivative "[INTERNAL]  Can
derivatives be calculated in any way?

";

%feature("docstring") casadi::Map::symbolicFwdSeed "[INTERNAL]  Symbolic
expressions for the forward seeds.

";

%feature("docstring") casadi::Map::nnz_out "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::Map::set_temp "[INTERNAL]  Set the
(temporary) work vectors.

";

%feature("docstring") casadi::Map::getJacSparsityHierarchicalSymm "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::Map::getCount "[INTERNAL]  Get the reference
count.

";

%feature("docstring") casadi::Map::hasFullJacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Map::getAtomicOperation "[INTERNAL]  Get an
atomic operation operator index.

";

%feature("docstring") casadi::Map::factory "[INTERNAL] ";

%feature("docstring") casadi::Map::type_name "[INTERNAL]  Get type name.

";

%feature("docstring") casadi::Map::print "[INTERNAL]  Print.

";

%feature("docstring") casadi::Map::generate_lifted "[INTERNAL]  Extract the
functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::Map::set_jac_sparsity "[INTERNAL]  Generate
the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Map::replaceRes "[INTERNAL]  Replace 0-by-0
outputs.

";

%feature("docstring") casadi::Map::sz_arg "[INTERNAL]  Get required length
of arg field.

";

%feature("docstring") casadi::Map::size2_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Map::print_free "[INTERNAL]  Print free
variables.

";

%feature("docstring") casadi::Map::default_in "[INTERNAL]  Get default
input value.

";

%feature("docstring") casadi::Map::getJacSparsityGen "[INTERNAL]  Get the
sparsity pattern, forward mode.

";

%feature("docstring") casadi::Map::codegen_incref "[INTERNAL]  Codegen
incref for dependencies.

";

%feature("docstring") casadi::Map::has_free "[INTERNAL]  Does the function
have free variables.

";

%feature("docstring") casadi::Map::getTangent "[INTERNAL]  Return tangent
function.

";

%feature("docstring") casadi::Map::alloc_memory "[INTERNAL]  Create memory
block.

";

%feature("docstring") casadi::Map::grad_sx "[INTERNAL]  Gradient
expression.

";

%feature("docstring") casadi::Map::getGradient "[INTERNAL]  Return gradient
function.

";

%feature("docstring") casadi::Map::has_function "[INTERNAL] ";

%feature("docstring") casadi::Map::n_out "[INTERNAL]  Number of function
inputs and outputs.

";

%feature("docstring") casadi::Map::checkRes "[INTERNAL]  Check if output
arguments have correct length and dimensions.

";

%feature("docstring") casadi::Map::release "[INTERNAL]  Release a memory
object.

";

%feature("docstring") casadi::Map::set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::Map::print_option "[INTERNAL]  Print all
information there is to know about a certain option.

";


// File: classcasadi_1_1MapOmp.xml
%feature("docstring") casadi::MapOmp::set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::MapOmp::symbolicOutput "[INTERNAL]  Get a
vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::MapOmp::generate_lifted "[INTERNAL]  Extract
the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::MapOmp::free_memory "[INTERNAL]  Free memory
block.

";

%feature("docstring") casadi::MapOmp::getAdaptorSolverName "[INTERNAL]
Obtain solver name from Adaptor.

";

%feature("docstring") casadi::MapOmp::getAtomicInput "[INTERNAL]  Get the
(integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::MapOmp::sz_w "[INTERNAL]  Get required length
of w field.

";

%feature("docstring") casadi::MapOmp::jac_sx "[INTERNAL]  Jacobian
expression.

";

%feature("docstring") casadi::MapOmp::index_in "[INTERNAL]  Get input
scheme index by name.

";

%feature("docstring") casadi::MapOmp::generateFunction "[INTERNAL]
Generate code the function.

";

%feature("docstring") casadi::MapOmp::getJacSparsityGen "[INTERNAL]  Get
the sparsity pattern, forward mode.

";

%feature("docstring") casadi::MapOmp::free_mx "[INTERNAL]  Get free
variables ( MX)

";

%feature("docstring") casadi::MapOmp::sparsity_in "[INTERNAL]  Get sparsity
of a given input.

";

%feature("docstring") casadi::MapOmp::getGradient "[INTERNAL]  Return
gradient function.

";

%feature("docstring") casadi::MapOmp::symbolicFwdSeed "[INTERNAL]  Symbolic
expressions for the forward seeds.

";

%feature("docstring") casadi::MapOmp::set_temp "[INTERNAL]  Set the
(temporary) work vectors.

";

%feature("docstring") casadi::MapOmp::_eval "

>  void casadi::FunctionInternal::_eval(const double **arg, double **res, int *iw, double *w, int mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate numerically.

>  void casadi::FunctionInternal::_eval(const SXElem **arg, SXElem **res, int *iw, SXElem *w, int mem) const

>  void casadi::FunctionInternal::_eval(const bvec_t **arg, bvec_t **res, int *iw, bvec_t *w, int mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

%feature("docstring") casadi::MapOmp::factory "[INTERNAL] ";

%feature("docstring") casadi::MapOmp::alloc_arg "[INTERNAL]  Ensure
required length of arg field.

";

%feature("docstring") casadi::MapOmp::getJacSparsityHierarchicalSymm "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::MapOmp::get_forward "[INTERNAL]  Generate a
function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::MapOmp::has_spfwd "[INTERNAL]  Is the class
able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::MapOmp::n_out "[INTERNAL]  Number of function
inputs and outputs.

";

%feature("docstring") casadi::MapOmp::print_dimensions "[INTERNAL]  Print
dimensions of inputs and outputs.

";

%feature("docstring") casadi::MapOmp::tangent "[INTERNAL]  Return tangent
function.

";

%feature("docstring") casadi::MapOmp::numel_out "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::MapOmp::setJacobian "[INTERNAL]  Return
Jacobian function.

";

%feature("docstring") casadi::MapOmp::checkInputs "[INTERNAL]  Check if the
numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::MapOmp::n_nodes "[INTERNAL]  Number of nodes
in the algorithm.

";

%feature("docstring") casadi::MapOmp::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::MapOmp::eval_mx "[INTERNAL]  Evaluate with
symbolic matrices.

";

%feature("docstring") casadi::MapOmp::_set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::MapOmp::set_jac_sparsity "[INTERNAL]
Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::MapOmp::addShorthand "[INTERNAL]  Generate
shorthand macro.

";

%feature("docstring") casadi::MapOmp::getAtomicOutput "[INTERNAL]  Get the
(integer) output argument of an atomic operation.

";

%feature("docstring") casadi::MapOmp::free_sx "[INTERNAL]  Get free
variables (SX)

";

%feature("docstring") casadi::MapOmp::print_free "[INTERNAL]  Print free
variables.

";

%feature("docstring") casadi::MapOmp::generateDeclarations "[INTERNAL]
Generate code for the declarations of the C function.

";

%feature("docstring") casadi::MapOmp::hasFullJacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::MapOmp::mapsum_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::MapOmp::print_option "[INTERNAL]  Print all
information there is to know about a certain option.

";

%feature("docstring") casadi::MapOmp::grad_mx "[INTERNAL]  Gradient
expression.

";

%feature("docstring") casadi::MapOmp::name "[INTERNAL]  Name of the
function.

";

%feature("docstring") casadi::MapOmp::simplifiedCall "[INTERNAL]  Use
simplified signature.

";

%feature("docstring") casadi::MapOmp::sz_arg "[INTERNAL]  Get required
length of arg field.

";

%feature("docstring") casadi::MapOmp::slice "[INTERNAL]  returns a new
function with a selection of inputs/outputs of the original

";

%feature("docstring") casadi::MapOmp::_get_stats "[INTERNAL]  Get all
statistics

";

%feature("docstring") casadi::MapOmp::nnz_out "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::MapOmp::codegen_incref "[INTERNAL]  Codegen
incref for dependencies.

";

%feature("docstring") casadi::MapOmp::getJacSparsityHierarchical "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::MapOmp::hess_sx "[INTERNAL]  Hessian
expression.

";

%feature("docstring") casadi::MapOmp::generateMeta "[INTERNAL]  Generate
meta-information allowing a user to evaluate a generated function.

";

%feature("docstring") casadi::MapOmp::checkout "[INTERNAL]  Checkout a
memory object.

";

%feature("docstring") casadi::MapOmp::get_n_in "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::MapOmp::nnz_in "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::MapOmp::getAtomicInputReal "[INTERNAL]  Get
the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::MapOmp::generate_dependencies "[INTERNAL]
Export / Generate C code for the dependency function.

";

%feature("docstring") casadi::MapOmp::get_n_out "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::MapOmp::alloc_memory "[INTERNAL]  Create
memory block.

";

%feature("docstring") casadi::MapOmp::n_in "[INTERNAL]  Number of function
inputs and outputs.

";

%feature("docstring") casadi::MapOmp::sp_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode, sparsity propagation.

";

%feature("docstring") casadi::MapOmp::checkRes "[INTERNAL]  Check if output
arguments have correct length and dimensions.

";

%feature("docstring") casadi::MapOmp::mx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::MapOmp::print_options "[INTERNAL]  Print list
of options.

";

%feature("docstring") casadi::MapOmp::sparsity_out "[INTERNAL]  Get
sparsity of a given output.

";

%feature("docstring") casadi::MapOmp::clear_memory "[INTERNAL]  Clear all
memory (called from destructor)

";

%feature("docstring") casadi::MapOmp::finalize "[INTERNAL]  Finalize the
object creation This function, which visits the class hierarchy in reverse
order is run after init() has been completed.

";

%feature("docstring") casadi::MapOmp::getFullJacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::MapOmp::replaceAdjSeed "[INTERNAL]  Replace
0-by-0 reverse seeds.

";

%feature("docstring") casadi::MapOmp::replaceArg "[INTERNAL]  Replace
0-by-0 inputs.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::MapOmp::is_a "[INTERNAL]  Check if the
function is of a particular type.

";

%feature("docstring") casadi::MapOmp::codegen_name "[INTERNAL]  Get name in
codegen.

";

%feature("docstring") casadi::MapOmp::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::MapOmp::tang_mx "[INTERNAL]  Tangent
expression.

";

%feature("docstring") casadi::MapOmp::_setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";

%feature("docstring") casadi::MapOmp::jit_dependencies "[INTERNAL]   Jit
dependencies.

";

%feature("docstring") casadi::MapOmp::init_memory "[INTERNAL]  Initalize
memory block.

";

%feature("docstring") casadi::MapOmp::log "

>  void casadi::FunctionInternal::log(const std::string &msg) const 
------------------------------------------------------------------------
[INTERNAL] 
Log the status of the solver.

>  void casadi::FunctionInternal::log(const std::string &fcn, const std::string &msg) const 
------------------------------------------------------------------------
[INTERNAL] 
Log the status of the solver, function given.

";

%feature("docstring") casadi::MapOmp::default_in "[INTERNAL]  Get default
input value.

";

%feature("docstring") casadi::MapOmp::which_depends "[INTERNAL]  Which
variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::MapOmp::sx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::MapOmp::self "[INTERNAL]  Get a public class
instance.

";

%feature("docstring") casadi::MapOmp::adjViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::MapOmp::type_name "[INTERNAL]  Get type name.

";

%feature("docstring") casadi::MapOmp::gradient "[INTERNAL]  Return gradient
function.

";

%feature("docstring") casadi::MapOmp::replaceFwdSeed "[INTERNAL]  Replace
0-by-0 forward seeds.

";

%feature("docstring") casadi::MapOmp::eval_name "[INTERNAL]  Get name of
the evaluation function.

";

%feature("docstring") casadi::MapOmp::size1_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::MapOmp::sp_fwd "[INTERNAL]  Propagate
sparsity forward.

";

%feature("docstring") casadi::MapOmp::alloc_w "[INTERNAL]  Ensure required
length of w field.

";

%feature("docstring") casadi::MapOmp::jac_mx "[INTERNAL]  Jacobian
expression.

";

%feature("docstring") casadi::MapOmp::verbose "[INTERNAL]  Verbose mode?

";

%feature("docstring") casadi::MapOmp::memory "[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::MapOmp::wrap "[INTERNAL]  Wrap in an Function
instance consisting of only one MX call.

";

%feature("docstring") casadi::MapOmp::alloc_iw "[INTERNAL]  Ensure required
length of iw field.

";

%feature("docstring") casadi::MapOmp::forward "[INTERNAL]  Return function
that calculates forward derivatives forward(nfwd) returns a cached instance
if available, and calls  Function get_forward(int nfwd) if no cached version
is available.

";

%feature("docstring") casadi::MapOmp::oracle "[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::MapOmp::grad_sx "[INTERNAL]  Gradient
expression.

";

%feature("docstring") casadi::MapOmp::fullJacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::MapOmp::has_codegen "[INTERNAL]  Is codegen
supported?

";

%feature("docstring") casadi::MapOmp::get_sparsity_out "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::MapOmp::alloc "[INTERNAL]  Ensure work
vectors long enough to evaluate function.

";

%feature("docstring") casadi::MapOmp::getWorkSize "[INTERNAL]  Get the
length of the work vector.

";

%feature("docstring") casadi::MapOmp::symbolicAdjSeed "[INTERNAL]  Symbolic
expressions for the adjoint seeds.

";

%feature("docstring") casadi::MapOmp::simple "[INTERNAL]  Evaluate
numerically, simplied syntax.

";

%feature("docstring") casadi::MapOmp::sz_iw "[INTERNAL]  Get required
length of iw field.

";

%feature("docstring") casadi::MapOmp::call_reverse "[INTERNAL]  Reverse
mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::MapOmp "[INTERNAL]  A map Evaluate in
parallel using OpenMP Note: Do not use this class with much more than the
intended number of threads for the parallel evaluation as it will cause
excessive memory use.

Joel Andersson

C++ includes: map.hpp ";

%feature("docstring") casadi::MapOmp::getJacSparsity "[INTERNAL]  Generate
the sparsity of a Jacobian block.

";

%feature("docstring") casadi::MapOmp::mx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::MapOmp::evalGen "[INTERNAL]  Evaluate or
propagate sparsities.

";

%feature("docstring") casadi::MapOmp::get_n_forward "[INTERNAL]  Generate a
function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::MapOmp::hasDerivative "[INTERNAL]  Can
derivatives be calculated in any way?

";

%feature("docstring") casadi::MapOmp::size1_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::MapOmp::repr "[INTERNAL]  Print.

";

%feature("docstring") casadi::MapOmp::size_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::MapOmp::tang_sx "[INTERNAL]  Tangent
expression.

";

%feature("docstring") casadi::MapOmp::_call "[INTERNAL]   Call a function,
overloaded.

";

%feature("docstring") casadi::MapOmp::codegen_decref "[INTERNAL]  Codegen
decref for dependencies.

";

%feature("docstring") casadi::MapOmp::get_sparsity_in "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::MapOmp::checkArg "[INTERNAL]  Check if input
arguments have correct length and dimensions.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::MapOmp::get_n_reverse "[INTERNAL]  Generate a
function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::MapOmp::n_mem "[INTERNAL]  Maximum number of
memory objects.

";

%feature("docstring") casadi::MapOmp::get_name_in "[INTERNAL]  Names of
function input and outputs.

";

%feature("docstring") casadi::MapOmp::get_stats "[INTERNAL]  Get all
statistics

";

%feature("docstring") casadi::MapOmp::getJacobian "[INTERNAL]  Return
Jacobian function.

";

%feature("docstring") casadi::MapOmp::has_free "[INTERNAL]  Does the
function have free variables.

";

%feature("docstring") casadi::MapOmp::name_out "[INTERNAL]  Get output
scheme name by index.

";

%feature("docstring") casadi::MapOmp::getHessian "[INTERNAL]  Return
Hessian function.

";

%feature("docstring") casadi::MapOmp::sz_res "[INTERNAL]  Get required
length of res field.

";

%feature("docstring") casadi::MapOmp::size_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::MapOmp::ad_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::MapOmp::matchingRes "[INTERNAL]  Check if
output arguments that needs to be replaced.

";

%feature("docstring") casadi::MapOmp::getTangent "[INTERNAL]  Return
tangent function.

";

%feature("docstring") casadi::MapOmp::_set_temp "[INTERNAL]  Set the
(temporary) work vectors.

";

%feature("docstring") casadi::MapOmp::call_forward "[INTERNAL]  Forward
mode AD, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::MapOmp::size2_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::MapOmp::signature "[INTERNAL]  Code generate
the function.

";

%feature("docstring") casadi::MapOmp::sz_work "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") casadi::MapOmp::has_sprev "[INTERNAL]  Is the class
able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::MapOmp::get_name_out "[INTERNAL]  Names of
function input and outputs.

";

%feature("docstring") casadi::MapOmp::getPartition "[INTERNAL]  Get the
unidirectional or bidirectional partition.

";

%feature("docstring") casadi::MapOmp::sparsity_jac "[INTERNAL]  Get, if
necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::MapOmp::reverse "[INTERNAL]  Return function
that calculates adjoint derivatives reverse(nadj) returns a cached instance
if available, and calls  Function get_reverse(int nadj) if no cached version
is available.

";

%feature("docstring") casadi::MapOmp::fwdViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::MapOmp::size2_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::MapOmp::setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";

%feature("docstring") casadi::MapOmp::index_out "[INTERNAL]  Get output
scheme index by name.

";

%feature("docstring") casadi::MapOmp::get_function "[INTERNAL] ";

%feature("docstring") casadi::MapOmp::construct "[INTERNAL]  Construct
Prepares the function for evaluation.

";

%feature("docstring") casadi::MapOmp::numel_in "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::MapOmp::replaceRes "[INTERNAL]  Replace
0-by-0 outputs.

";

%feature("docstring") casadi::MapOmp::name_in "[INTERNAL]  Get input scheme
name by index.

";

%feature("docstring") casadi::MapOmp::get_reverse "[INTERNAL]  Generate a
function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::MapOmp::get_options "[INTERNAL]  Options.

";

%feature("docstring") casadi::MapOmp::getAtomicOperation "[INTERNAL]  Get
an atomic operation operator index.

";

%feature("docstring") casadi::MapOmp::getAlgorithmSize "[INTERNAL]  Get the
number of atomic operations.

";

%feature("docstring") casadi::MapOmp::alloc_res "[INTERNAL]  Ensure
required length of res field.

";

%feature("docstring") casadi::MapOmp::matchingArg "[INTERNAL]  Check if
input arguments that needs to be replaced.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::MapOmp::sx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::MapOmp::has_function "[INTERNAL] ";

%feature("docstring") casadi::MapOmp::sp_rev "[INTERNAL]  Propagate
sparsity backwards.

";

%feature("docstring") casadi::MapOmp::map_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::MapOmp::addDependency "[INTERNAL]  Add a
dependent function.

";

%feature("docstring") casadi::MapOmp::release "[INTERNAL]  Release a memory
object.

";

%feature("docstring") casadi::MapOmp::jacobian "[INTERNAL]  Return Jacobian
function.

";

%feature("docstring") casadi::MapOmp::eval_sx "[INTERNAL]  evaluate
symbolically while also propagating directional derivatives

";

%feature("docstring") casadi::MapOmp::call "[INTERNAL]   Call a function,
templated.

";

%feature("docstring") casadi::MapOmp::hessian "[INTERNAL]  Return Hessian
function.

";

%feature("docstring") casadi::MapOmp::print "[INTERNAL]  Print.

";


// File: classcasadi_1_1Matrix.xml


/*  Construct symbolic primitives  */

/* The \"sym\" function is intended to work in a similar way as \"sym\" used
in the Symbolic Toolbox for Matlab but instead creating a CasADi symbolic
primitive.

*/ %feature("docstring") casadi::Matrix::print_scalar "

Print scalar.

";

%feature("docstring") casadi::Matrix::nnz_upper "

Get the number of non-zeros in the upper triangular half.

";

%feature("docstring") casadi::Matrix::repr "

Print a representation of the object.

";

%feature("docstring") friendwrap_expand "

Expand the expression as a weighted sum (with constant weights)

";

%feature("docstring") casadi::Matrix::is_constant "

Check if the matrix is constant (note that false negative answers are
possible)

";

%feature("docstring") friendwrap_mtaylor "

>  Matrix<Scalar> mtaylor(const Matrix< Scalar > &ex, const Matrix< Scalar > &x, const Matrix< Scalar > &a, int order=1)
------------------------------------------------------------------------

multivariate Taylor series expansion

Do Taylor expansions until the aggregated order of a term is equal to
'order'. The aggregated order of $x^n y^m$ equals $n+m$.

>  Matrix<Scalar> mtaylor(const Matrix< Scalar > &ex, const Matrix< Scalar > &x, const Matrix< Scalar > &a, int order, const std::vector< int > &order_contributions)
------------------------------------------------------------------------

multivariate Taylor series expansion

Do Taylor expansions until the aggregated order of a term is equal to
'order'. The aggregated order of $x^n y^m$ equals $n+m$.

The argument order_contributions can denote how match each variable
contributes to the aggregated order. If x=[x, y] and order_contributions=[1,
2], then the aggregated order of $x^n y^m$ equals $1n+2m$.

Example usage

$ \\\\sin(b+a)+\\\\cos(b+a)(x-a)+\\\\cos(b+a)(y-b) $ $ y+x-(x^3+3y x^2+3 y^2
x+y^3)/6 $ $ (-3 x^2 y-x^3)/6+y+x $

";

%feature("docstring") casadi::Matrix::get_elements "

Get all elements.

";

%feature("docstring") casadi::Matrix::set "

>  void casadi::Matrix< T >::set(const Matrix< Scalar > &m, bool ind1, const Slice &rr)

>  void casadi::Matrix< T >::set(const Matrix< Scalar > &m, bool ind1, const Matrix< int > &rr)

>  void casadi::Matrix< T >::set(const Matrix< Scalar > &m, bool ind1, const Sparsity &sp)
------------------------------------------------------------------------

Set a submatrix, single argument

>  void casadi::Matrix< T >::set(const Matrix< Scalar > &m, bool ind1, const Slice &rr, const Slice &cc)

>  void casadi::Matrix< T >::set(const Matrix< Scalar > &m, bool ind1, const Slice &rr, const Matrix< int > &cc)

>  void casadi::Matrix< T >::set(const Matrix< Scalar > &m, bool ind1, const Matrix< int > &rr, const Slice &cc)

>  void casadi::Matrix< T >::set(const Matrix< Scalar > &m, bool ind1, const Matrix< int > &rr, const Matrix< int > &cc)
------------------------------------------------------------------------

Set a submatrix, two arguments

";

%feature("docstring") casadi::Matrix::nnz "

Get the number of (structural) non-zero elements.

";

%feature("docstring") casadi::Matrix::remove "

Remove columns and rows Remove/delete rows and/or columns of a matrix.

";

%feature("docstring") casadi::Matrix::get "

>  void casadi::Matrix< T >::get(Matrix< Scalar > &output_m, bool ind1, const Slice &rr) const

>  void casadi::Matrix< T >::get(Matrix< Scalar > &output_m, bool ind1, const Matrix< int > &rr) const

>  void casadi::Matrix< T >::get(Matrix< Scalar > &output_m, bool ind1, const Sparsity &sp) const 
------------------------------------------------------------------------

Get a submatrix, single argument

>  void casadi::Matrix< T >::get(Matrix< Scalar > &output_m, bool ind1, const Slice &rr, const Slice &cc) const

>  void casadi::Matrix< T >::get(Matrix< Scalar > &output_m, bool ind1, const Slice &rr, const Matrix< int > &cc) const

>  void casadi::Matrix< T >::get(Matrix< Scalar > &output_m, bool ind1, const Matrix< int > &rr, const Slice &cc) const

>  void casadi::Matrix< T >::get(Matrix< Scalar > &output_m, bool ind1, const Matrix< int > &rr, const Matrix< int > &cc) const 
------------------------------------------------------------------------

Get a submatrix, two arguments

";

%feature("docstring") friendwrap_triangle "

triangle function

\\\\[ \\\\begin {cases} \\\\Lambda(x) = 0 & |x| >= 1 \\\\\\\\ \\\\Lambda(x)
= 1-|x| & |x| < 1 \\\\end {cases} \\\\]

";

%feature("docstring") friendwrap_adj "

Matrix adjoint.

";

%feature("docstring") casadi::Matrix::triplet "";

%feature("docstring") casadi::Matrix::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::Matrix::set_width "

Set the 'precision, width & scientific' used in printing and serializing to
streams.

";

%feature("docstring") casadi::Matrix::sanity_check "

Check if the dimensions and colind, row vectors are compatible.

Parameters:
-----------

complete:  set to true to also check elementwise throws an error as possible
result

";

%feature("docstring") casadi::Matrix::print_split "[INTERNAL]  Get strings
corresponding to the nonzeros and the interdependencies.

";

%feature("docstring") casadi::Matrix::unary "[INTERNAL]  Create nodes by
their ID.

";

%feature("docstring") casadi::Matrix::set_precision "

Set the 'precision, width & scientific' used in printing and serializing to
streams.

";

%feature("docstring") casadi::Matrix::is_tril "

Check if the matrix is lower triangular.

";

%feature("docstring") friendwrap_norm_inf_mul "

Inf-norm of a Matrix-Matrix product.

";

%feature("docstring") casadi::Matrix::is_integer "

Check if the matrix is integer-valued (note that false negative answers are
possible)

";

%feature("docstring") casadi::Matrix::numel "

Get the number of elements.

";

%feature("docstring") casadi::Matrix::is_triu "

Check if the matrix is upper triangular.

";

%feature("docstring") friendwrap_all "

Returns true only if every element in the matrix is true.

";

%feature("docstring") casadi::Matrix::is_regular "[INTERNAL]  Checks if
expression does not contain NaN or Inf.

";

%feature("docstring") casadi::Matrix::set_nz "

Set a set of nonzeros

";

%feature("docstring") casadi::Matrix::nnz_diag "

Get get the number of non-zeros on the diagonal.

";

%feature("docstring") casadi::Matrix::sparsity "

Get the sparsity pattern.

";

%feature("docstring") casadi::Matrix::get_row "

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring") casadi::Matrix::get_sparsity "

Get an owning reference to the sparsity pattern.

";

%feature("docstring") casadi::Matrix::bilin "

Calculate bilinear form x^T A y.

";

%feature("docstring") casadi::Matrix::jtimes "

Functions called by friend functions defined here

";

%feature("docstring") casadi::Matrix::dim "

Get string representation of dimensions. The representation is (nrow x ncol
= numel | size)

";

%feature("docstring") casadi::Matrix::get_nz "

Get a set of nonzeros

";

%feature("docstring") casadi::Matrix::T "

Transpose the matrix.

";

%feature("docstring") friendwrap_any "

Returns true only if any element in the matrix is true.

";

%feature("docstring") casadi::Matrix::is_smooth "[INTERNAL]  Check if
smooth.

";

%feature("docstring") casadi::Matrix::clear "";

%feature("docstring") casadi::Matrix::is_minus_one "

check if the matrix is -1 (note that false negative answers are possible)

";

%feature("docstring") friendwrap_poly_roots "

Attempts to find the roots of a polynomial.

This will only work for polynomials up to order 3 It is assumed that the
roots are real.

";

%feature("docstring") casadi::Matrix::n_dep "[INTERNAL]  Get the number of
dependencies of a binary SXElem Only defined if symbolic scalar.

";

%feature("docstring") casadi::Matrix::is_dense "

Check if the matrix expression is dense.

";

%feature("docstring") casadi::Matrix::print_sparse "

Print sparse matrix style.

";

%feature("docstring") casadi::Matrix::nnz_lower "

Get the number of non-zeros in the lower triangular half.

";

%feature("docstring") casadi::Matrix::reserve "";

%feature("docstring") casadi::Matrix::erase "

>  void casadi::Matrix< T >::erase(const std::vector< int > &rr, const std::vector< int > &cc, bool ind1=false)
------------------------------------------------------------------------

Erase a submatrix (leaving structural zeros in its place) Erase rows and/or
columns of a matrix.

>  void casadi::Matrix< T >::erase(const std::vector< int > &rr, bool ind1=false)
------------------------------------------------------------------------

Erase a submatrix (leaving structural zeros in its place) Erase elements of
a matrix.

";

%feature("docstring") casadi::Matrix::inf "

create a matrix with all inf

";

%feature("docstring") casadi::Matrix::element_hash "[INTERNAL]  Returns a
number that is unique for a given symbolic scalar.

Only defined if symbolic scalar.

";

%feature("docstring") casadi::Matrix::scalar_matrix "[INTERNAL]  Create
nodes by their ID.

";

%feature("docstring") friendwrap_ramp "

ramp function

\\\\[ \\\\begin {cases} R(x) = 0 & x <= 1 \\\\\\\\ R(x) = x & x > 1 \\\\\\\\
\\\\end {cases} \\\\]

Also called: slope function

";

%feature("docstring") casadi::Matrix::print_vector "

Print vector-style.

";

%feature("docstring") casadi::Matrix::ones "

Create a dense matrix or a matrix with specified sparsity with all entries
one.

";

%feature("docstring") casadi::Matrix::resize "";

%feature("docstring") friendwrap_qr "

QR factorization using the modified Gram-Schmidt algorithm More stable than
the classical Gram-Schmidt, but may break down if the rows of A are nearly
linearly dependent See J. Demmel: Applied Numerical Linear Algebra
(algorithm 3.1.). Note that in SWIG, Q and R are returned by value.

";

%feature("docstring") casadi::Matrix::row "

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring") casadi::Matrix::zeros "

Create a dense matrix or a matrix with specified sparsity with all entries
zero.

";

%feature("docstring") casadi::Matrix::rank1 "

Make a rank-1 update to a matrix A Calculates A + 1/2 * alpha * x*y'.

";

%feature("docstring") casadi::Matrix "

Sparse matrix class. SX and DM are specializations.

General sparse matrix class that is designed with the idea that \"everything
is a matrix\", that is, also scalars and vectors. This philosophy makes it
easy to use and to interface in particularly with Python and Matlab/Octave.
Index starts with 0. Index vec happens as follows: (rr, cc) -> k =
rr+cc*size1() Vectors are column vectors.  The storage format is Compressed
Column Storage (CCS), similar to that used for sparse matrices in Matlab,
but unlike this format, we do allow for elements to be structurally non-zero
but numerically zero.  Matrix<Scalar> is polymorphic with a
std::vector<Scalar> that contain all non-identical-zero elements. The
sparsity can be accessed with Sparsity& sparsity() Joel Andersson

C++ includes: casadi_types.hpp ";

%feature("docstring") friendwrap_rectangle "

rectangle function

\\\\[ \\\\begin {cases} \\\\Pi(x) = 1 & |x| < 1/2 \\\\\\\\ \\\\Pi(x) = 1/2 &
|x| = 1/2 \\\\\\\\ \\\\Pi(x) = 0 & |x| > 1/2 \\\\\\\\ \\\\end {cases} \\\\]

Also called: gate function, block function, band function, pulse function,
window function

";

%feature("docstring") casadi::Matrix::sym "

>  static Matrix< Scalar >  casadi::GenericMatrix< Matrix< Scalar >  >::sym(const std::string &name, int nrow=1, int ncol=1)
------------------------------------------------------------------------

Create an nrow-by-ncol symbolic primitive.

>  static Matrix< Scalar >  casadi::GenericMatrix< Matrix< Scalar >  >::sym(const std::string &name, const std::pair< int, int > &rc)
------------------------------------------------------------------------

Construct a symbolic primitive with given dimensions.

>  static Matrix< Scalar >  casadi::GenericMatrix< Matrix< Scalar >  >::sym(const std::string &name, const Sparsity &sp)
------------------------------------------------------------------------

Create symbolic primitive with a given sparsity pattern.

>  static std::vector<Matrix< Scalar >  > casadi::GenericMatrix< Matrix< Scalar >  >::sym(const std::string &name, const Sparsity &sp, int p)
------------------------------------------------------------------------

Create a vector of length p with with matrices with symbolic primitives of
given sparsity.

>  static std::vector<Matrix< Scalar >  > casadi::GenericMatrix< Matrix< Scalar >  >::sym(const std::string &name, int nrow, int ncol, int p)
------------------------------------------------------------------------

Create a vector of length p with nrow-by-ncol symbolic primitives.

>  static std::vector<std::vector<Matrix< Scalar > > > casadi::GenericMatrix< Matrix< Scalar >  >::sym(const std::string &name, const Sparsity &sp, int p, int r)
------------------------------------------------------------------------

Create a vector of length r of vectors of length p with symbolic primitives
with given sparsity.

>  static std::vector<std::vector<Matrix< Scalar > > > casadi::GenericMatrix< Matrix< Scalar >  >::sym(const std::string &name, int nrow, int ncol, int p, int r)
------------------------------------------------------------------------

Create a vector of length r of vectors of length p with nrow-by-ncol
symbolic primitives.

";

%feature("docstring") friendwrap_eig_symbolic "

Attempts to find the eigenvalues of a symbolic matrix This will only work
for up to 3x3 matrices.

";

%feature("docstring") casadi::Matrix::is_leaf "[INTERNAL]  Check if SX is a
leaf of the SX graph.

Only defined if symbolic scalar.

";

%feature("docstring") friendwrap_sparsify "

Make a matrix sparse by removing numerical zeros.

";

%feature("docstring") friendwrap_cofactor "

Get the (i,j) cofactor matrix.

";

%feature("docstring") casadi::Matrix::colind "

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring") casadi::Matrix::print_dense "

Print dense matrix-stype.

";

%feature("docstring") casadi::Matrix::has_nz "

Returns true if the matrix has a non-zero at location rr, cc.

";

%feature("docstring") casadi::Matrix::matrix_scalar "[INTERNAL]  Create
nodes by their ID.

";

%feature("docstring") casadi::Matrix::nan "

create a matrix with all nan

";

%feature("docstring") casadi::Matrix::is_commutative "[INTERNAL]  Check
whether a binary SX is commutative.

Only defined if symbolic scalar.

";

%feature("docstring") casadi::Matrix::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::Matrix::is_valid_input "[INTERNAL]  Check if
matrix can be used to define function inputs. Sparse matrices can return
true if all non-zero elements are symbolic.

";

%feature("docstring") friendwrap_getMinor "

Get the (i,j) minor matrix.

";

%feature("docstring") friendwrap_heaviside "

Heaviside function.

\\\\[ \\\\begin {cases} H(x) = 0 & x<0 \\\\\\\\ H(x) = 1/2 & x=0 \\\\\\\\
H(x) = 1 & x>0 \\\\\\\\ \\\\end {cases} \\\\]

";

%feature("docstring") casadi::Matrix::size "

>  std::pair<int, int> casadi::GenericMatrix< Matrix< Scalar >  >::size() const
------------------------------------------------------------------------

Get the shape.

>  int casadi::GenericMatrix< Matrix< Scalar >  >::size(int axis) const
------------------------------------------------------------------------

Get the size along a particular dimensions.

";

%feature("docstring") casadi::Matrix::mpower "

Functions called by friend functions defined here

";

%feature("docstring") casadi::Matrix::is_one "

check if the matrix is 1 (note that false negative answers are possible)

";

%feature("docstring") casadi::Matrix::is_row "

Check if the matrix is a row vector (i.e. size1()==1)

";

%feature("docstring") casadi::Matrix::__nonzero__ "

>  bool casadi::Matrix< T >::__nonzero__() const 
------------------------------------------------------------------------

Returns the truth value of a Matrix.

>  bool casadi::Matrix< SXElem >::__nonzero__() const
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") friendwrap_taylor "

univariate Taylor series expansion

Calculate the Taylor expansion of expression 'ex' up to order 'order' with
respect to variable 'x' around the point 'a'

$(x)=f(a)+f'(a)(x-a)+f''(a)\\\\frac
{(x-a)^2}{2!}+f'''(a)\\\\frac{(x-a)^3}{3!}+\\\\ldots$

Example usage:

::

>>   x



";

%feature("docstring") casadi::Matrix::size2 "

Get the second dimension (i.e. number of columns)

";

%feature("docstring") casadi::Matrix::is_square "

Check if the matrix expression is square.

";

%feature("docstring") casadi::Matrix::size1 "

Get the first dimension (i.e. number of rows)

";

%feature("docstring") casadi::Matrix::is_empty "

Check if the sparsity is empty, i.e. if one of the dimensions is zero (or
optionally both dimensions)

";

%feature("docstring") casadi::Matrix::is_identity "

check if the matrix is an identity matrix (note that false negative answers
are possible)

";

%feature("docstring") casadi::Matrix::linearize "

Functions called by friend functions defined here

";

%feature("docstring") casadi::Matrix::reset_input "[INTERNAL]  Reset the
marker for an input expression.

";

%feature("docstring") friendwrap_poly_coeff "

extracts polynomial coefficients from an expression

Parameters:
-----------

ex:  Scalar expression that represents a polynomial

x:  Scalar symbol that the polynomial is build up with

";

%feature("docstring") casadi::Matrix::printme "";

%feature("docstring") friendwrap_gauss_quadrature "

>  Matrix<Scalar> gauss_quadrature(const Matrix< Scalar > &f, const Matrix< Scalar > &x, const Matrix< Scalar > &a, const Matrix< Scalar > &b, int order=5)
------------------------------------------------------------------------

Integrate f from a to b using Gaussian quadrature with n points.

>  Matrix<Scalar> gauss_quadrature(const Matrix< Scalar > &f, const Matrix< Scalar > &x, const Matrix< Scalar > &a, const Matrix< Scalar > &b, int order, const Matrix< Scalar > &w)
------------------------------------------------------------------------

Matrix adjoint.

";

%feature("docstring") casadi::Matrix::set_scientific "

Set the 'precision, width & scientific' used in printing and serializing to
streams.

";

%feature("docstring") friendwrap_pw_const "

Create a piecewise constant function Create a piecewise constant function
with n=val.size() intervals.

Inputs:

Parameters:
-----------

t:  a scalar variable (e.g. time)

tval:  vector with the discrete values of t at the interval transitions
(length n-1)

val:  vector with the value of the function for each interval (length n)

";

%feature("docstring") casadi::Matrix::enlarge "

Enlarge matrix Make the matrix larger by inserting empty rows and columns,
keeping the existing non-zeros.

";

%feature("docstring") casadi::Matrix::is_symbolic "[INTERNAL]  Check if
symbolic (Dense) Sparse matrices invariable return false.

";

%feature("docstring") friendwrap_pw_lin "

t a scalar variable (e.g. time)

Create a piecewise linear function Create a piecewise linear function:

Inputs: tval vector with the the discrete values of t (monotonically
increasing) val vector with the corresponding function values (same length
as tval)

";

%feature("docstring") casadi::Matrix::is_column "

Check if the matrix is a column vector (i.e. size2()==1)

";

%feature("docstring") casadi::Matrix::Matrix "

>  casadi::Matrix< T >::Matrix()
------------------------------------------------------------------------

constructors

empty 0-by-0 matrix constructor

>  casadi::Matrix< T >::Matrix(const Matrix< Scalar > &m)
------------------------------------------------------------------------

Copy constructor.

>  casadi::Matrix< T >::Matrix(int nrow, int ncol)
------------------------------------------------------------------------

Create a sparse matrix with all structural zeros.

>  casadi::Matrix< T >::Matrix(const Sparsity &sp)
------------------------------------------------------------------------

Create a sparse matrix from a sparsity pattern. Same as
Matrix::ones(sparsity)

>  casadi::Matrix< T >::Matrix(const Sparsity &sp, const Matrix< Scalar > &d)
------------------------------------------------------------------------

Construct matrix with a given sparsity and nonzeros.

>  casadi::Matrix< T >::Matrix(double val)
------------------------------------------------------------------------

This constructor enables implicit type conversion from a numeric type.

>  casadi::Matrix< T >::Matrix(const std::vector< std::vector< double > > &m)
------------------------------------------------------------------------

Dense matrix constructor with data given as vector of vectors.

>  casadi::Matrix< T >::Matrix(const std::vector< A > &x)
------------------------------------------------------------------------

Create an expression from a vector.

>  casadi::Matrix< T >::Matrix(const Matrix< A > &x)
------------------------------------------------------------------------

Create a matrix from another matrix with a different entry type Assumes that
the scalar conversion is valid.

";

%feature("docstring") friendwrap_chol "

Obtain a Cholesky factorisation of a matrix Returns an upper triangular R
such that R'R = A. Matrix A must be positive definite.

At the moment, the algorithm is dense (Cholesky-Banachiewicz). There is an
open ticket #1212 to make it sparse.

";

%feature("docstring") casadi::Matrix::dep "[INTERNAL]  Get expressions of
the children of the expression Only defined if symbolic scalar. Wraps SXElem
SXElem::dep(int ch=0) const.

";

%feature("docstring") casadi::Matrix::is_zero "

check if the matrix is 0 (note that false negative answers are possible)

";

%feature("docstring") casadi::Matrix::is_vector "

Check if the matrix is a row or column vector.

";

%feature("docstring") casadi::Matrix::matrix_matrix "[INTERNAL]  Create
nodes by their ID.

";

%feature("docstring") casadi::Matrix::binary "[INTERNAL]  Create nodes by
their ID.

";

%feature("docstring") casadi::Matrix::get_nonzeros "

Get all nonzeros.

Implementation of Matrix::get_nonzeros (in public API)

";

%feature("docstring") casadi::Matrix::has_duplicates "[INTERNAL]  Detect
duplicate symbolic expressions If there are symbolic primitives appearing
more than once, the function will return true and the names of the duplicate
expressions will be printed to userOut<true, PL_WARN>(). Note: Will mark the
node using SXElem::set_temp. Make sure to call reset_input() after usage.

";

%feature("docstring") casadi::Matrix::name "[INTERNAL]  Get name (only if
symbolic scalar)

";

%feature("docstring") casadi::Matrix::has_zeros "

Check if the matrix has any zero entries which are not structural zeros.

";

%feature("docstring") casadi::Matrix::is_scalar "

Check if the matrix expression is scalar.

";

%feature("docstring") casadi::Matrix::get_colind "

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring") casadi::Matrix::print "

Print a description of the object.

";


// File: classcasadi_1_1MinusInfSX.xml


// File: classcasadi_1_1MinusOneSX.xml


// File: classcasadi_1_1Monitor.xml


// File: classcasadi_1_1MultipleOutput.xml


// File: classcasadi_1_1Multiplication.xml


// File: classcasadi_1_1MX.xml


/*  Construct symbolic primitives  */

/* The \"sym\" function is intended to work in a similar way as \"sym\" used
in the Symbolic Toolbox for Matlab but instead creating a CasADi symbolic
primitive.

*/ %feature("docstring") casadi::MX::get_output "

Get the index of evaluation output - only valid when is_calloutput() is
true.

";

%feature("docstring") casadi::MX::attachAssert "

returns itself, but with an assertion attached

If y does not evaluate to 1, a runtime error is raised

";

%feature("docstring") casadi::MX::jtimes "

Functions called by friend functions defined here

";

%feature("docstring") friendwrap_inv_node "

Inverse node.

";

%feature("docstring") casadi::MX "

MX - Matrix expression.

The MX class is used to build up trees made up from MXNodes. It is a more
general graph representation than the scalar expression, SX, and much less
efficient for small objects. On the other hand, the class allows much more
general operations than does SX, in particular matrix valued operations and
calls to arbitrary differentiable functions.

The MX class is designed to have identical syntax with the Matrix<> template
class, and uses Matrix<double> as its internal representation of the values
at a node. By keeping the syntaxes identical, it is possible to switch from
one class to the other, as well as inlining MX functions to SXElem
functions.

Note that an operation is always \"lazy\", making a matrix multiplication
will create a matrix multiplication node, not perform the actual
multiplication.

Joel Andersson

C++ includes: mx.hpp ";

%feature("docstring") casadi::MX::is_scalar "

Check if the matrix expression is scalar.

";

%feature("docstring") casadi::MX::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::MX::erase "

>  void casadi::MX::erase(const std::vector< int > &rr, const std::vector< int > &cc, bool ind1=false)
------------------------------------------------------------------------

Erase a submatrix (leaving structural zeros in its place) Erase rows and/or
columns of a matrix.

>  void casadi::MX::erase(const std::vector< int > &rr, bool ind1=false)
------------------------------------------------------------------------

Erase a submatrix (leaving structural zeros in its place) Erase elements of
a matrix.

";

%feature("docstring") casadi::MX::monitor "

Monitor an expression Returns itself, but with the side effect of printing
the nonzeros along with a comment.

";

%feature("docstring") casadi::MX::primitives "

Get primitives.

";

%feature("docstring") casadi::MX::is_constant "

Check if constant.

";

%feature("docstring") casadi::MX::is_output "

Check if evaluation output.

";

%feature("docstring") casadi::MX::set "

>  void casadi::MX::set(const MX &m, bool ind1, const Slice &rr)

>  void casadi::MX::set(const MX &m, bool ind1, const Matrix< int > &rr)

>  void casadi::MX::set(const MX &m, bool ind1, const Sparsity &sp)
------------------------------------------------------------------------

Set a submatrix, single argument

";

%feature("docstring") casadi::MX::is_valid_input "

Check if matrix can be used to define function inputs. Valid inputs for
MXFunctions are combinations of Reshape, concatenations and SymbolicMX.

";

%feature("docstring") casadi::MX::binary "

Create nodes by their ID.

";

%feature("docstring") casadi::MX::sparsity "

Get the sparsity pattern.

";

%feature("docstring") friendwrap_lift "

Lift the expression Experimental feature.

";

%feature("docstring") casadi::MX::is_tril "

Check if the matrix is lower triangular.

";

%feature("docstring") casadi::MX::size2 "

Get the second dimension (i.e. number of columns)

";

%feature("docstring") casadi::MX::size1 "

Get the first dimension (i.e. number of rows)

";

%feature("docstring") casadi::MX::linearize "

Functions called by friend functions defined here

";

%feature("docstring") casadi::MX::is_op "

Is it a certain operation.

";

%feature("docstring") casadi::MX::is_triu "

Check if the matrix is upper triangular.

";

%feature("docstring") casadi::MX::~MX "[INTERNAL]  Destructor.

";

%feature("docstring") casadi::MX::set_nz "

Set a set of nonzeros

";

%feature("docstring") casadi::MX::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::MX::n_out "

Number of outputs.

";

%feature("docstring") casadi::MX::set_temp "[INTERNAL]  Set the temporary
variable.

";

%feature("docstring") casadi::MX::print "

Print a description of the object.

";

%feature("docstring") casadi::MX::is_one "

check if zero (note that false negative answers are possible)

";

%feature("docstring") casadi::MX::is_empty "

Check if the sparsity is empty, i.e. if one of the dimensions is zero (or
optionally both dimensions)

";

%feature("docstring") casadi::MX::get_nz "

Get a set of nonzeros

";

%feature("docstring") casadi::MX::ones "

Create a dense matrix or a matrix with specified sparsity with all entries
one.

";

%feature("docstring") casadi::MX::is_transpose "

Is the expression a transpose?

";

%feature("docstring") casadi::MX::einstein "

Computes an einstein dense tensor contraction.

Computes the product: C_c = A_a + B_b where a b c are index/einstein
notation in an encoded form

For example, an matrix-matrix product may be written as: C_ij = A_ik B_kj

The encoded form uses strictly negative numbers to indicate labels. For the
above example, we would have: a {-1, -3} b {-3, -2} c {-1 -2}

";

%feature("docstring") casadi::MX::is_binary "

Is binary operation.

";

%feature("docstring") casadi::MX::inf "

create a matrix with all inf

";

%feature("docstring") friendwrap_matrix_expand "

Expand MX graph to SXFunction call.

Expand the given expression e, optionally supplying expressions contained in
it at which expansion should stop.

";

%feature("docstring") casadi::MX::colind "

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring") casadi::MX::is_symbolic "

Check if symbolic.

";

%feature("docstring") casadi::MX::join_primitives "

Join an expression along symbolic primitives.

";

%feature("docstring") casadi::MX::reset_input "[INTERNAL]  Reset the marker
for an input expression.

";

%feature("docstring") casadi::MX::get_colind "

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring") casadi::MX::is_null "

Is a null pointer?

";

%feature("docstring") casadi::MX::is_multiplication "

Check if multiplication.

";

%feature("docstring") casadi::MX::printPtr "[INTERNAL]  Print the pointer
to the internal class

";

%feature("docstring") casadi::MX::nnz "

Get the number of (structural) non-zero elements.

";

%feature("docstring") casadi::MX::is_identity "

check if identity

";

%feature("docstring") casadi::MX::dim "

Get string representation of dimensions. The representation is (nrow x ncol
= numel | size)

";

%feature("docstring") friendwrap_find "

Find first nonzero If failed, returns the number of rows.

";

%feature("docstring") casadi::MX::is_minus_one "

check if zero (note that false negative answers are possible)

";

%feature("docstring") friendwrap_graph_substitute "

>  MX graph_substitute(const MX &ex, const std::vector< MX > &v, const std::vector< MX > &vdef)
------------------------------------------------------------------------

Substitute single expression in graph Substitute variable v with expression
vdef in an expression ex, preserving nodes.

>  std::vector<MX> graph_substitute(const std::vector< MX > &ex, const std::vector< MX > &v, const std::vector< MX > &vdef)
------------------------------------------------------------------------

Substitute multiple expressions in graph Substitute variable var with
expression expr in multiple expressions, preserving nodes.

";

%feature("docstring") casadi::MX::get_row "

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring") casadi::MX::is_call "

Check if evaluation.

";

%feature("docstring") casadi::MX::nnz_upper "

Get the number of non-zeros in the upper triangular half.

";

%feature("docstring") casadi::MX::get_temp "[INTERNAL]  Get the temporary
variable

";

%feature("docstring") casadi::MX::__hash__ "

Returns a number that is unique for a given Node. If the Object does not
point to any node, \"0\" is returned.

";

%feature("docstring") casadi::MX::getOutput "

Get an output.

";

%feature("docstring") casadi::MX::zeros "

Create a dense matrix or a matrix with specified sparsity with all entries
zero.

";

%feature("docstring") casadi::MX::is_zero "

check if zero (note that false negative answers are possible)

";

%feature("docstring") casadi::MX::size "

>  std::pair<int, int> casadi::GenericMatrix< MX  >::size() const
------------------------------------------------------------------------

Get the shape.

>  int casadi::GenericMatrix< MX  >::size(int axis) const
------------------------------------------------------------------------

Get the size along a particular dimensions.

";

%feature("docstring") casadi::MX::T "

Transpose the matrix.

";

%feature("docstring") casadi::MX::is_vector "

Check if the matrix is a row or column vector.

";

%feature("docstring") casadi::MX::printme "";

%feature("docstring") casadi::MX::nan "

create a matrix with all nan

";

%feature("docstring") casadi::MX::row "

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring") casadi::MX::n_dep "

Get the number of dependencies of a binary SXElem.

";

%feature("docstring") casadi::MX::has_duplicates "[INTERNAL]  Detect
duplicate symbolic expressions If there are symbolic primitives appearing
more than once, the function will return true and the names of the duplicate
expressions will be printed to userOut<true, PL_WARN>(). Note: Will mark the
node using MX::set_temp. Make sure to call reset_input() after usage.

";

%feature("docstring") casadi::MX::is_norm "

Check if norm.

";

%feature("docstring") casadi::MX::mpower "

Functions called by friend functions defined here

";

%feature("docstring") casadi::MX::numel "

Get the number of elements.

";

%feature("docstring") casadi::MX::enlarge "

Enlarge matrix Make the matrix larger by inserting empty rows and columns,
keeping the existing non-zeros.

";

%feature("docstring") casadi::MX::sym "

>  static MX  casadi::GenericMatrix< MX  >::sym(const std::string &name, int nrow=1, int ncol=1)
------------------------------------------------------------------------

Create an nrow-by-ncol symbolic primitive.

>  static MX  casadi::GenericMatrix< MX  >::sym(const std::string &name, const std::pair< int, int > &rc)
------------------------------------------------------------------------

Construct a symbolic primitive with given dimensions.

>  static MX  casadi::GenericMatrix< MX  >::sym(const std::string &name, const Sparsity &sp)
------------------------------------------------------------------------

Create symbolic primitive with a given sparsity pattern.

>  static std::vector<MX  > casadi::GenericMatrix< MX  >::sym(const std::string &name, const Sparsity &sp, int p)
------------------------------------------------------------------------

Create a vector of length p with with matrices with symbolic primitives of
given sparsity.

>  static std::vector<MX  > casadi::GenericMatrix< MX  >::sym(const std::string &name, int nrow, int ncol, int p)
------------------------------------------------------------------------

Create a vector of length p with nrow-by-ncol symbolic primitives.

>  static std::vector<std::vector<MX > > casadi::GenericMatrix< MX  >::sym(const std::string &name, const Sparsity &sp, int p, int r)
------------------------------------------------------------------------

Create a vector of length r of vectors of length p with symbolic primitives
with given sparsity.

>  static std::vector<std::vector<MX > > casadi::GenericMatrix< MX  >::sym(const std::string &name, int nrow, int ncol, int p, int r)
------------------------------------------------------------------------

Create a vector of length r of vectors of length p with nrow-by-ncol
symbolic primitives.

";

%feature("docstring") casadi::MX::is_square "

Check if the matrix expression is square.

";

%feature("docstring") casadi::MX::get "

>  void casadi::MX::get(MX &output_m, bool ind1, const Slice &rr) const

>  void casadi::MX::get(MX &output_m, bool ind1, const Matrix< int > &rr) const

>  void casadi::MX::get(MX &output_m, bool ind1, const Sparsity &sp) const 
------------------------------------------------------------------------

Get a submatrix, single argument

>  void casadi::MX::get(MX &output_m, bool ind1, const Slice &rr, const Slice &cc) const

>  void casadi::MX::get(MX &output_m, bool ind1, const Slice &rr, const Matrix< int > &cc) const

>  void casadi::MX::get(MX &output_m, bool ind1, const Matrix< int > &rr, const Slice &cc) const

>  void casadi::MX::get(MX &output_m, bool ind1, const Matrix< int > &rr, const Matrix< int > &cc) const 
------------------------------------------------------------------------

Get a submatrix, two arguments

";

%feature("docstring") casadi::MX::repr "

Print a representation of the object.

";

%feature("docstring") casadi::MX::getFunction "

Get function.

";

%feature("docstring") casadi::MX::numFunctions "

Number of functions.

";

%feature("docstring") casadi::MX::is_column "

Check if the matrix is a column vector (i.e. size2()==1)

";

%feature("docstring") casadi::MX::__nonzero__ "

Returns the truth value of an MX expression.

";

%feature("docstring") casadi::MX::name "

Get the name.

";

%feature("docstring") casadi::MX::MX "

>  casadi::MX::MX()
------------------------------------------------------------------------

Default constructor.

>  casadi::MX::MX(int nrow, int ncol)
------------------------------------------------------------------------

Create a sparse matrix with all structural zeros.

>  casadi::MX::MX(const Sparsity &sp)
------------------------------------------------------------------------

Create a sparse matrix from a sparsity pattern. Same as MX::ones(sparsity)

>  casadi::MX::MX(const Sparsity &sp, const MX &val)
------------------------------------------------------------------------

Construct matrix with a given sparsity and nonzeros.

>  casadi::MX::MX(double x)
------------------------------------------------------------------------

Create scalar constant (also implicit type conversion)

>  casadi::MX::MX(const MX &x)
------------------------------------------------------------------------

Copy constructor.

>  casadi::MX::MX(const std::vector< double > &x)
------------------------------------------------------------------------

Create vector constant (also implicit type conversion)

>  casadi::MX::MX(const Matrix< double > &x)
------------------------------------------------------------------------

Create sparse matrix constant (also implicit type conversion)

";

%feature("docstring") casadi::MX::rank1 "

Make a rank-1 update to a matrix A Calculates A + 1/2 * alpha * x*y'.

";

%feature("docstring") casadi::MX::bilin "

Calculate bilinear form x^T A y.

";

%feature("docstring") casadi::MX::nnz_lower "

Get the number of non-zeros in the lower triangular half.

";

%feature("docstring") casadi::MX::is_unary "

Is unary operation.

";

%feature("docstring") casadi::MX::is_commutative "

Check if commutative operation.

";

%feature("docstring") casadi::MX::mapping "

Get an IM representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") casadi::MX::split_primitives "

Split up an expression along symbolic primitives.

";

%feature("docstring") casadi::MX::is_dense "

Check if the matrix expression is dense.

";

%feature("docstring") casadi::MX::op "

Get operation type.

";

%feature("docstring") casadi::MX::n_primitives "

Get the number of primitives for MXFunction inputs/outputs.

";

%feature("docstring") casadi::MX::dep "

Get the nth dependency as MX.

";

%feature("docstring") casadi::MX::get_sparsity "

Get an owning reference to the sparsity pattern.

";

%feature("docstring") casadi::MX::nnz_diag "

Get get the number of non-zeros on the diagonal.

";

%feature("docstring") casadi::MX::unary "

Create nodes by their ID.

";

%feature("docstring") casadi::MX::is_regular "

Checks if expression does not contain NaN or Inf.

";

%feature("docstring") casadi::MX::is_row "

Check if the matrix is a row vector (i.e. size1()==1)

";


// File: classcasadi_1_1MXFunction.xml


// File: classcasadi_1_1NanSX.xml


// File: classcasadi_1_1Newton.xml
%feature("docstring") casadi::Newton::print "[INTERNAL]  Print.

";

%feature("docstring") casadi::Newton::getAlgorithmSize "[INTERNAL]  Get the
number of atomic operations.

";

%feature("docstring") casadi::Newton::init_memory "[INTERNAL]  Initalize
memory block.

";

%feature("docstring") casadi::Newton::print_options "[INTERNAL]  Print list
of options.

";

%feature("docstring") casadi::Newton::generateMeta "[INTERNAL]  Generate
meta-information allowing a user to evaluate a generated function.

";

%feature("docstring") casadi::Newton::jit_dependencies "[INTERNAL]  JIT for
dependencies.

";

%feature("docstring") casadi::Newton::adjViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::Newton::expand "[INTERNAL] ";

%feature("docstring") casadi::Newton::get_sparsity_in "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Newton::get_reverse "[INTERNAL]  Generate a
function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::Newton::calc_function "[INTERNAL] ";

%feature("docstring") casadi::Newton::checkArg "[INTERNAL]  Check if input
arguments have correct length and dimensions.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::Newton::checkout "[INTERNAL]  Checkout a
memory object.

";

%feature("docstring") casadi::Newton::jacobian "[INTERNAL]  Return Jacobian
function.

";

%feature("docstring") casadi::Newton::jac_mx "[INTERNAL]  Jacobian
expression.

";

%feature("docstring") casadi::Newton::getAtomicOutput "[INTERNAL]  Get the
(integer) output argument of an atomic operation.

";

%feature("docstring") casadi::Newton::replaceArg "[INTERNAL]  Replace
0-by-0 inputs.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::Newton::alloc_iw "[INTERNAL]  Ensure required
length of iw field.

";

%feature("docstring") casadi::Newton::sparsity_jac "[INTERNAL]  Get, if
necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Newton::replaceAdjSeed "[INTERNAL]  Replace
0-by-0 reverse seeds.

";

%feature("docstring") casadi::Newton::tang_mx "[INTERNAL]  Tangent
expression.

";

%feature("docstring") casadi::Newton::name_out "[INTERNAL]  Get output
scheme name by index.

";

%feature("docstring") casadi::Newton::getJacSparsity "[INTERNAL]  Generate
the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Newton::symbolicOutput "[INTERNAL]  Get a
vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::Newton::type_name "[INTERNAL]  Get type name.

";

%feature("docstring") casadi::Newton::set_temp "[INTERNAL]  Set the work
vectors.

";

%feature("docstring") casadi::Newton::is_a "[INTERNAL]  Check if the
function is of a particular type.

";

%feature("docstring") casadi::Newton::slice "[INTERNAL]  returns a new
function with a selection of inputs/outputs of the original

";

%feature("docstring") casadi::Newton::release "[INTERNAL]  Release a memory
object.

";

%feature("docstring") casadi::Newton::alloc_res "[INTERNAL]  Ensure
required length of res field.

";

%feature("docstring") casadi::Newton::get_n_out "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::Newton::get_sparsity_out "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Newton::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::Newton::construct "[INTERNAL]  Construct
Prepares the function for evaluation.

";

%feature("docstring") casadi::Newton::plugin_name "[INTERNAL] ";

%feature("docstring") casadi::Newton::which_depends "[INTERNAL]  Which
variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::Newton::setJacobian "[INTERNAL]  Return
Jacobian function.

";

%feature("docstring") casadi::Newton::reverse "[INTERNAL]  Return function
that calculates adjoint derivatives reverse(nadj) returns a cached instance
if available, and calls  Function get_reverse(int nadj) if no cached version
is available.

";

%feature("docstring") casadi::Newton::simple "[INTERNAL]  Evaluate
numerically, simplied syntax.

";

%feature("docstring") casadi::Newton::Newton "[INTERNAL]  Constructor.

";

%feature("docstring") casadi::Newton::alloc_memory "[INTERNAL]  Create
memory block.

";

%feature("docstring") casadi::Newton::getJacSparsityHierarchicalSymm "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::Newton::_setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";

%feature("docstring") casadi::Newton::init "[INTERNAL]  Initialize.

";

%feature("docstring") casadi::Newton::generateFunction "[INTERNAL]
Generate code the function.

";

%feature("docstring") casadi::Newton::eval_sx "[INTERNAL]  Evaluate with
symbolic scalars.

";

%feature("docstring") casadi::Newton::n_out "[INTERNAL]  Number of function
inputs and outputs.

";

%feature("docstring") casadi::Newton::checkInputs "[INTERNAL]  Check if the
numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::Newton::getPartition "[INTERNAL]  Get the
unidirectional or bidirectional partition.

";

%feature("docstring") casadi::Newton::size_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Newton::alloc_arg "[INTERNAL]  Ensure
required length of arg field.

";

%feature("docstring") casadi::Newton::sz_iw "[INTERNAL]  Get required
length of iw field.

";

%feature("docstring") casadi::Newton::numel_in "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::Newton::_set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::Newton::get_function "[INTERNAL] ";

%feature("docstring") casadi::Newton::map_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::Newton::~Newton "[INTERNAL]  Destructor.

";

%feature("docstring") casadi::Newton::log "

>  void casadi::FunctionInternal::log(const std::string &msg) const 
------------------------------------------------------------------------
[INTERNAL] 
Log the status of the solver.

>  void casadi::FunctionInternal::log(const std::string &fcn, const std::string &msg) const 
------------------------------------------------------------------------
[INTERNAL] 
Log the status of the solver, function given.

";

%feature("docstring") casadi::Newton::oracle "[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::Newton::name_in "[INTERNAL]  Get input scheme
name by index.

";

%feature("docstring") casadi::Newton::alloc "[INTERNAL]  Ensure work
vectors long enough to evaluate function.

";

%feature("docstring") casadi::Newton::sz_res "[INTERNAL]  Get required
length of res field.

";

%feature("docstring") casadi::Newton::getAdaptorSolverName "[INTERNAL]
Obtain solver name from Adaptor.

";

%feature("docstring") casadi::Newton::addDependency "[INTERNAL]  Add a
dependent function.

";

%feature("docstring") casadi::Newton::size1_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Newton::getTangent "[INTERNAL]  Return
tangent function.

";

%feature("docstring") casadi::Newton::has_spfwd "[INTERNAL]  Is the class
able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Newton::_call "[INTERNAL]   Call a function,
overloaded.

";

%feature("docstring") casadi::Newton::getAtomicOperation "[INTERNAL]  Get
an atomic operation operator index.

";

%feature("docstring") casadi::Newton::nnz_out "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::Newton "

'newton' plugin for Rootfinder

Implements simple newton iterations to solve an implicit function.

>List of available options

+-----------------+-----------+--------------------------------------------+
|       Id        |   Type    |                Description                 |
+=================+===========+============================================+
| abstol          | OT_DOUBLE | Stopping criterion tolerance on max(|F|)   |
+-----------------+-----------+--------------------------------------------+
| abstolStep      | OT_DOUBLE | Stopping criterion tolerance on step size  |
+-----------------+-----------+--------------------------------------------+
| max_iter        | OT_INT    | Maximum number of Newton iterations to     |
|                 |           | perform before returning.                  |
+-----------------+-----------+--------------------------------------------+
| print_iteration | OT_BOOL   | Print information about each iteration     |
+-----------------+-----------+--------------------------------------------+

Joris Gillis

>List of available options

+-------------------+--------------+-------------------+-------------------+
|        Id         |     Type     |    Description    |      Used in      |
+===================+==============+===================+===================+
| abstol            | OT_DOUBLE    | Stopping          | casadi::Newton    |
|                   |              | criterion         |                   |
|                   |              | tolerance on      |                   |
|                   |              | max(|F|)          |                   |
+-------------------+--------------+-------------------+-------------------+
| abstolStep        | OT_DOUBLE    | Stopping          | casadi::Newton    |
|                   |              | criterion         |                   |
|                   |              | tolerance on step |                   |
|                   |              | size              |                   |
+-------------------+--------------+-------------------+-------------------+
| constraints       | OT_INTVECTOR | Constrain the     | casadi::Rootfinde |
|                   |              | unknowns. 0       | r                 |
|                   |              | (default): no     |                   |
|                   |              | constraint on ui, |                   |
|                   |              | 1: ui >= 0.0, -1: |                   |
|                   |              | ui <= 0.0, 2: ui  |                   |
|                   |              | > 0.0, -2: ui <   |                   |
|                   |              | 0.0.              |                   |
+-------------------+--------------+-------------------+-------------------+
| implicit_input    | OT_INT       | Index of the      | casadi::Rootfinde |
|                   |              | input that        | r                 |
|                   |              | corresponds to    |                   |
|                   |              | the actual root-  |                   |
|                   |              | finding           |                   |
+-------------------+--------------+-------------------+-------------------+
| implicit_output   | OT_INT       | Index of the      | casadi::Rootfinde |
|                   |              | output that       | r                 |
|                   |              | corresponds to    |                   |
|                   |              | the actual root-  |                   |
|                   |              | finding           |                   |
+-------------------+--------------+-------------------+-------------------+
| jacobian_function | OT_FUNCTION  | Function object   | casadi::Rootfinde |
|                   |              | for calculating   | r                 |
|                   |              | the Jacobian      |                   |
|                   |              | (autogenerated by |                   |
|                   |              | default)          |                   |
+-------------------+--------------+-------------------+-------------------+
| linear_solver     | OT_STRING    | User-defined      | casadi::Rootfinde |
|                   |              | linear solver     | r                 |
|                   |              | class. Needed for |                   |
|                   |              | sensitivities.    |                   |
+-------------------+--------------+-------------------+-------------------+
| linear_solver_opt | OT_DICT      | Options to be     | casadi::Rootfinde |
| ions              |              | passed to the     | r                 |
|                   |              | linear solver.    |                   |
+-------------------+--------------+-------------------+-------------------+
| max_iter          | OT_INT       | Maximum number of | casadi::Newton    |
|                   |              | Newton iterations |                   |
|                   |              | to perform before |                   |
|                   |              | returning.        |                   |
+-------------------+--------------+-------------------+-------------------+
| print_iteration   | OT_BOOL      | Print information | casadi::Newton    |
|                   |              | about each        |                   |
|                   |              | iteration         |                   |
+-------------------+--------------+-------------------+-------------------+

Diagrams
--------



C++ includes: newton.hpp ";

%feature("docstring") casadi::Newton::_set_temp "[INTERNAL]  Set the
(temporary) work vectors.

";

%feature("docstring") casadi::Newton::generate_dependencies "[INTERNAL]
Export / Generate C code for the generated functions.

";

%feature("docstring") casadi::Newton::sparsity_out "[INTERNAL]  Get
sparsity of a given output.

";

%feature("docstring") casadi::Newton::generateDeclarations "[INTERNAL]
Generate code for the declarations of the C function.

";

%feature("docstring") casadi::Newton::print_fstats "[INTERNAL]  Print
statistics.

";

%feature("docstring") casadi::Newton::getWorkSize "[INTERNAL]  Get the
length of the work vector.

";

%feature("docstring") casadi::Newton::monitored "[INTERNAL] ";

%feature("docstring") casadi::Newton::print_dimensions "[INTERNAL]  Print
dimensions of inputs and outputs.

";

%feature("docstring") casadi::Newton::mx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Newton::eval_reverse "[INTERNAL]  Create call
to (cached) derivative function, reverse mode.

";

%feature("docstring") casadi::Newton::hasFullJacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Newton::get_n_reverse "[INTERNAL]  Generate a
function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::Newton::symbolicAdjSeed "[INTERNAL]  Symbolic
expressions for the adjoint seeds.

";

%feature("docstring") casadi::Newton::getAtomicInputReal "[INTERNAL]  Get
the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::Newton::_eval "

>  void casadi::FunctionInternal::_eval(const double **arg, double **res, int *iw, double *w, int mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate numerically.

>  void casadi::FunctionInternal::_eval(const SXElem **arg, SXElem **res, int *iw, SXElem *w, int mem) const

>  void casadi::FunctionInternal::_eval(const bvec_t **arg, bvec_t **res, int *iw, bvec_t *w, int mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

%feature("docstring") casadi::Newton::sparsity_in "[INTERNAL]  Get sparsity
of a given input.

";

%feature("docstring") casadi::Newton::get_name_in "[INTERNAL]  Names of
function input and outputs.

";

%feature("docstring") casadi::Newton::codegen_incref "[INTERNAL]  Codegen
incref for dependencies.

";

%feature("docstring") casadi::Newton::getJacobian "[INTERNAL]  Return
Jacobian function.

";

%feature("docstring") casadi::Newton::jac_sx "[INTERNAL]  Jacobian
expression.

";

%feature("docstring") casadi::Newton::n_nodes "[INTERNAL]  Number of nodes
in the algorithm.

";

%feature("docstring") casadi::Newton::has_free "[INTERNAL]  Does the
function have free variables.

";

%feature("docstring") casadi::Newton::symbolicFwdSeed "[INTERNAL]  Symbolic
expressions for the forward seeds.

";

%feature("docstring") casadi::Newton::has_sprev "[INTERNAL]  Is the class
able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Newton::addShorthand "[INTERNAL]  Generate
shorthand macro.

";

%feature("docstring") casadi::Newton::index_in "[INTERNAL]  Get input
scheme index by name.

";

%feature("docstring") casadi::Newton::n_in "[INTERNAL]  Number of function
inputs and outputs.

";

%feature("docstring") casadi::Newton::eval_forward "[INTERNAL]  Create call
to (cached) derivative function, forward mode.

";

%feature("docstring") casadi::Newton::print_free "[INTERNAL]  Print free
variables.

";

%feature("docstring") casadi::Newton::sz_arg "[INTERNAL]  Get required
length of arg field.

";

%feature("docstring") casadi::Newton::sz_w "[INTERNAL]  Get required length
of w field.

";

%feature("docstring") casadi::Newton::call "[INTERNAL]   Call a function,
templated.

";

%feature("docstring") casadi::Newton::clear_memory "[INTERNAL]  Clear all
memory (called from destructor)

";

%feature("docstring") casadi::Newton::self "[INTERNAL]  Get a public class
instance.

";

%feature("docstring") casadi::Newton::hessian "[INTERNAL]  Return Hessian
function.

";

%feature("docstring") casadi::Newton::generateBody "[INTERNAL]  Generate
code for the function body.

";

%feature("docstring") casadi::Newton::fwdViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::Newton::n_mem "[INTERNAL]  Maximum number of
memory objects.

";

%feature("docstring") casadi::Newton::replaceFwdSeed "[INTERNAL]  Replace
0-by-0 forward seeds.

";

%feature("docstring") casadi::Newton::getGradient "[INTERNAL]  Return
gradient function.

";

%feature("docstring") casadi::Newton::replaceRes "[INTERNAL]  Replace
0-by-0 outputs.

";

%feature("docstring") casadi::Newton::generate_lifted "[INTERNAL]  Extract
the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::Newton::repr "[INTERNAL]  Print.

";

%feature("docstring") casadi::Newton::eval_name "[INTERNAL]  Get name of
the evaluation function.

";

%feature("docstring") casadi::Newton::get_options "[INTERNAL]  Options.

";

%feature("docstring") casadi::Newton::nnz_in "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::Newton::checkRes "[INTERNAL]  Check if output
arguments have correct length and dimensions.

";

%feature("docstring") casadi::Newton::setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";

%feature("docstring") casadi::Newton::sp_rev "[INTERNAL]  Propagate
sparsity backwards.

";

%feature("docstring") casadi::Newton::alloc_w "[INTERNAL]  Ensure required
length of w field.

";

%feature("docstring") casadi::Newton::getAtomicInput "[INTERNAL]  Get the
(integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::Newton::codegen_name "[INTERNAL]  Get name in
codegen.

";

%feature("docstring") casadi::Newton::verbose "[INTERNAL]  Verbose mode?

";

%feature("docstring") casadi::Newton::sp_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode, sparsity propagation.

";

%feature("docstring") casadi::Newton::get_forward "[INTERNAL]  Generate a
function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::Newton::grad_sx "[INTERNAL]  Gradient
expression.

";

%feature("docstring") casadi::Newton::has_function "[INTERNAL] ";

%feature("docstring") casadi::Newton::fullJacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Newton::has_codegen "[INTERNAL]  Is codegen
supported?

";

%feature("docstring") casadi::Newton::codegen_decref "[INTERNAL]  Codegen
decref for dependencies.

";

%feature("docstring") casadi::Newton::matchingArg "[INTERNAL]  Check if
input arguments that needs to be replaced.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::Newton::forward "[INTERNAL]  Return function
that calculates forward derivatives forward(nfwd) returns a cached instance
if available, and calls  Function get_forward(int nfwd) if no cached version
is available.

";

%feature("docstring") casadi::Newton::ad_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::Newton::getJacSparsityHierarchical "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::Newton::size2_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Newton::mx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Newton::create_function "[INTERNAL]  Create
an oracle function

";

%feature("docstring") casadi::Newton::call_forward "[INTERNAL]  Forward
mode AD, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Newton::getJacSparsityGen "[INTERNAL]  Get
the sparsity pattern, forward mode.

";

%feature("docstring") casadi::Newton::index_out "[INTERNAL]  Get output
scheme index by name.

";

%feature("docstring") casadi::Newton::get_stats "[INTERNAL]  Get all
statistics.

";

%feature("docstring") casadi::Newton::get_name_out "[INTERNAL]  Names of
function input and outputs.

";

%feature("docstring") casadi::Newton::simplifiedCall "[INTERNAL]  Use
simplified signature.

";

%feature("docstring") casadi::Newton::signature "[INTERNAL]  Code generate
the function.

";

%feature("docstring") casadi::Newton::_get_stats "[INTERNAL]  Get all
statistics

";

%feature("docstring") casadi::Newton::mapsum_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::Newton::matchingRes "[INTERNAL]  Check if
output arguments that needs to be replaced.

";

%feature("docstring") casadi::Newton::getFullJacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Newton::memory "[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::Newton::name "[INTERNAL]  Name of the
function.

";

%feature("docstring") casadi::Newton::set_jac_sparsity "[INTERNAL]
Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Newton::wrap "[INTERNAL]  Wrap in an Function
instance consisting of only one MX call.

";

%feature("docstring") casadi::Newton::numel_out "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::Newton::get_n_in "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::Newton::set_function "[INTERNAL]  Register
the function for evaluation and statistics gathering

";

%feature("docstring") casadi::Newton::size1_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Newton::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::Newton::free_sx "[INTERNAL]  Get free
variables (SX)

";

%feature("docstring") casadi::Newton::set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::Newton::default_in "[INTERNAL]  Get default
input value.

";

%feature("docstring") casadi::Newton::size2_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Newton::call_reverse "[INTERNAL]  Reverse
mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Newton::tang_sx "[INTERNAL]  Tangent
expression.

";

%feature("docstring") casadi::Newton::sz_work "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") casadi::Newton::factory "[INTERNAL] ";

%feature("docstring") casadi::Newton::sx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Newton::size_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Newton::eval "[INTERNAL]  Evaluate
numerically.

";

%feature("docstring") casadi::Newton::sp_fwd "[INTERNAL]  Propagate
sparsity forward.

";

%feature("docstring") casadi::Newton::get_n_forward "[INTERNAL]  Generate a
function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::Newton::eval_mx "[INTERNAL]  Evaluate with
symbolic matrices.

";

%feature("docstring") casadi::Newton::sx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Newton::getHessian "[INTERNAL]  Return
Hessian function.

";

%feature("docstring") casadi::Newton::tangent "[INTERNAL]  Return tangent
function.

";

%feature("docstring") casadi::Newton::free_mx "[INTERNAL]  Get free
variables ( MX)

";

%feature("docstring") casadi::Newton::hasDerivative "[INTERNAL]  Can
derivatives be calculated in any way?

";

%feature("docstring") casadi::Newton::gradient "[INTERNAL]  Return gradient
function.

";

%feature("docstring") casadi::Newton::free_memory "[INTERNAL]  Free memory
block.

";

%feature("docstring") casadi::Newton::hess_sx "[INTERNAL]  Hessian
expression.

";

%feature("docstring") casadi::Newton::print_option "[INTERNAL]  Print all
information there is to know about a certain option.

";

%feature("docstring") casadi::Newton::solve "[INTERNAL]   Solve the system
of equations and calculate derivatives.

";

%feature("docstring") casadi::Newton::finalize "[INTERNAL]  Finalize
initialization.

";

%feature("docstring") casadi::Newton::grad_mx "[INTERNAL]  Gradient
expression.

";


// File: classcasadi_1_1NlpBuilder.xml


/*  Symbolic representation of the NLP  */

/* Data members

*/ %feature("docstring") casadi::NlpBuilder "

A symbolic NLP representation.

Joel Andersson

C++ includes: nlp_builder.hpp ";

%feature("docstring") casadi::NlpBuilder::import_nl "

Import an .nl file.

";

%feature("docstring") casadi::NlpBuilder::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::NlpBuilder::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::NlpBuilder::repr "

Print a representation of the object.

";

%feature("docstring") casadi::NlpBuilder::print "

Print a description of the object.

";


// File: classcasadi_1_1Nlpsol.xml
%feature("docstring") casadi::Nlpsol::generateFunction "[INTERNAL]
Generate code the function.

";

%feature("docstring") casadi::Nlpsol::_get_stats "[INTERNAL]  Get all
statistics

";

%feature("docstring") casadi::Nlpsol::getAlgorithmSize "[INTERNAL]  Get the
number of atomic operations.

";

%feature("docstring") casadi::Nlpsol::alloc "[INTERNAL]  Ensure work
vectors long enough to evaluate function.

";

%feature("docstring") casadi::Nlpsol::oracle "[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::Nlpsol::replaceAdjSeed "[INTERNAL]  Replace
0-by-0 reverse seeds.

";

%feature("docstring") casadi::Nlpsol::memory "[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::Nlpsol::size1_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Nlpsol::get_sparsity_in "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Nlpsol::call_forward "[INTERNAL]  Forward
mode AD, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Nlpsol::repr "[INTERNAL]  Print.

";

%feature("docstring") casadi::Nlpsol::sx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Nlpsol::addShorthand "[INTERNAL]  Generate
shorthand macro.

";

%feature("docstring") casadi::Nlpsol::get_function "[INTERNAL] ";

%feature("docstring") casadi::Nlpsol::signature "[INTERNAL]  Code generate
the function.

";

%feature("docstring") casadi::Nlpsol::mx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Nlpsol::name "[INTERNAL]  Name of the
function.

";

%feature("docstring") casadi::Nlpsol::Nlpsol "[INTERNAL]  Constructor.

";

%feature("docstring") casadi::Nlpsol::get_n_forward "[INTERNAL]  Return
function that calculates forward derivatives forward(nfwd) returns a cached
instance if available, and calls  Function get_forward(int nfwd) if no
cached version is available.

";

%feature("docstring") casadi::Nlpsol::sparsity_jac "[INTERNAL]  Get, if
necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Nlpsol::matchingArg "[INTERNAL]  Check if
input arguments that needs to be replaced.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::Nlpsol::getReducedHessian "[INTERNAL] ";

%feature("docstring") casadi::Nlpsol::sparsity_out "[INTERNAL]  Get
sparsity of a given output.

";

%feature("docstring") casadi::Nlpsol::getPartition "[INTERNAL]  Get the
unidirectional or bidirectional partition.

";

%feature("docstring") casadi::Nlpsol::wrap "[INTERNAL]  Wrap in an Function
instance consisting of only one MX call.

";

%feature("docstring") casadi::Nlpsol::getJacSparsity "[INTERNAL]  Generate
the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Nlpsol::print_fstats "[INTERNAL]  Print
statistics.

";

%feature("docstring") casadi::Nlpsol::create_function "[INTERNAL]  Create
an oracle function

";

%feature("docstring") casadi::Nlpsol::n_nodes "[INTERNAL]  Number of nodes
in the algorithm.

";

%feature("docstring") casadi::Nlpsol::has_codegen "[INTERNAL]  Is codegen
supported?

";

%feature("docstring") casadi::Nlpsol::gradient "[INTERNAL]  Return gradient
function.

";

%feature("docstring") casadi::Nlpsol::get_options "[INTERNAL]  Options.

";

%feature("docstring") casadi::Nlpsol::get_reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::Nlpsol::get_sparsity_out "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Nlpsol::size1_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Nlpsol::finalize "[INTERNAL]  Finalize
initialization.

";

%feature("docstring") casadi::Nlpsol::alloc_arg "[INTERNAL]  Ensure
required length of arg field.

";

%feature("docstring") casadi::Nlpsol::clear_memory "[INTERNAL]  Clear all
memory (called from destructor)

";

%feature("docstring") casadi::Nlpsol::sp_fwd "[INTERNAL]  Propagate
sparsity forward.

";

%feature("docstring") casadi::Nlpsol::tang_mx "[INTERNAL]  Tangent
expression.

";

%feature("docstring") casadi::Nlpsol::monitored "[INTERNAL] ";

%feature("docstring") casadi::Nlpsol::factory "[INTERNAL] ";

%feature("docstring") casadi::Nlpsol::getJacSparsityHierarchical "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::Nlpsol::reverse "[INTERNAL]  Return function
that calculates adjoint derivatives reverse(nadj) returns a cached instance
if available, and calls  Function get_reverse(int nadj) if no cached version
is available.

";

%feature("docstring") casadi::Nlpsol::getAtomicOperation "[INTERNAL]  Get
an atomic operation operator index.

";

%feature("docstring") casadi::Nlpsol::log "

>  void casadi::FunctionInternal::log(const std::string &msg) const 
------------------------------------------------------------------------
[INTERNAL] 
Log the status of the solver.

>  void casadi::FunctionInternal::log(const std::string &fcn, const std::string &msg) const 
------------------------------------------------------------------------
[INTERNAL] 
Log the status of the solver, function given.

";

%feature("docstring") casadi::Nlpsol::alloc_w "[INTERNAL]  Ensure required
length of w field.

";

%feature("docstring") casadi::Nlpsol::nnz_in "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::Nlpsol::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::Nlpsol::generateBody "[INTERNAL]  Generate
code for the function body.

";

%feature("docstring") casadi::Nlpsol::setOptionsFromFile "[INTERNAL]  Read
options from parameter xml.

";

%feature("docstring") casadi::Nlpsol::get_name_in "[INTERNAL]  Names of
function input and outputs.

";

%feature("docstring") casadi::Nlpsol::sz_res "[INTERNAL]  Get required
length of res field.

";

%feature("docstring") casadi::Nlpsol::getAtomicOutput "[INTERNAL]  Get the
(integer) output argument of an atomic operation.

";

%feature("docstring") casadi::Nlpsol::adjViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::Nlpsol::set_function "[INTERNAL]  Register
the function for evaluation and statistics gathering

";

%feature("docstring") casadi::Nlpsol::release "[INTERNAL]  Release a memory
object.

";

%feature("docstring") casadi::Nlpsol::symbolicFwdSeed "[INTERNAL]  Symbolic
expressions for the forward seeds.

";

%feature("docstring") casadi::Nlpsol::type_name "[INTERNAL]  Get type name.

";

%feature("docstring") casadi::Nlpsol::getJacSparsityHierarchicalSymm "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::Nlpsol::nnz_out "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::Nlpsol::hasFullJacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Nlpsol::get_n_in "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::Nlpsol::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::Nlpsol::set_temp "[INTERNAL]  Set the work
vectors.

";

%feature("docstring") casadi::Nlpsol::get_forward "[INTERNAL]  Return
function that calculates forward derivatives forward(nfwd) returns a cached
instance if available, and calls  Function get_forward(int nfwd) if no
cached version is available.

";

%feature("docstring") casadi::Nlpsol::default_in "[INTERNAL]  Get default
input value.

";

%feature("docstring") casadi::Nlpsol::print_free "[INTERNAL]  Print free
variables.

";

%feature("docstring") casadi::Nlpsol::init_memory "[INTERNAL]  Initalize
memory block.

";

%feature("docstring") casadi::Nlpsol::replaceRes "[INTERNAL]  Replace
0-by-0 outputs.

";

%feature("docstring") casadi::Nlpsol::free_mx "[INTERNAL]  Get free
variables ( MX)

";

%feature("docstring") casadi::Nlpsol::getTangent "[INTERNAL]  Return
tangent function.

";

%feature("docstring") casadi::Nlpsol::codegen_incref "[INTERNAL]  Codegen
incref for dependencies.

";

%feature("docstring") casadi::Nlpsol::has_free "[INTERNAL]  Does the
function have free variables.

";

%feature("docstring") casadi::Nlpsol::getGradient "[INTERNAL]  Return
gradient function.

";

%feature("docstring") casadi::Nlpsol::has_function "[INTERNAL] ";

%feature("docstring") casadi::Nlpsol::n_out "[INTERNAL]  Number of function
inputs and outputs.

";

%feature("docstring") casadi::Nlpsol::generateMeta "[INTERNAL]  Generate
meta-information allowing a user to evaluate a generated function.

";

%feature("docstring") casadi::Nlpsol::alloc_res "[INTERNAL]  Ensure
required length of res field.

";

%feature("docstring") casadi::Nlpsol::set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::Nlpsol::set_jac_sparsity "[INTERNAL]
Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Nlpsol::print_option "[INTERNAL]  Print all
information there is to know about a certain option.

";

%feature("docstring") casadi::Nlpsol::plugin_name "[INTERNAL] ";

%feature("docstring") casadi::Nlpsol::get_n_out "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::Nlpsol::hessian "[INTERNAL]  Return Hessian
function.

";

%feature("docstring") casadi::Nlpsol::fwdViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::Nlpsol::n_in "[INTERNAL]  Number of function
inputs and outputs.

";

%feature("docstring") casadi::Nlpsol::self "[INTERNAL]  Get a public class
instance.

";

%feature("docstring") casadi::Nlpsol::generate_lifted "[INTERNAL]  Extract
the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::Nlpsol::call "[INTERNAL]   Call a function,
templated.

";

%feature("docstring") casadi::Nlpsol::solve "[INTERNAL] ";

%feature("docstring") casadi::Nlpsol::get_n_reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::Nlpsol::jacobian "[INTERNAL]  Return Jacobian
function.

";

%feature("docstring") casadi::Nlpsol::size_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Nlpsol::matchingRes "[INTERNAL]  Check if
output arguments that needs to be replaced.

";

%feature("docstring") casadi::Nlpsol::expand "[INTERNAL] ";

%feature("docstring") casadi::Nlpsol::addDependency "[INTERNAL]  Add a
dependent function.

";

%feature("docstring") casadi::Nlpsol::_setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";

%feature("docstring") casadi::Nlpsol::calc_function "[INTERNAL] ";

%feature("docstring") casadi::Nlpsol::eval "[INTERNAL]  Evaluate
numerically.

";

%feature("docstring") casadi::Nlpsol::_eval "

>  void casadi::FunctionInternal::_eval(const double **arg, double **res, int *iw, double *w, int mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate numerically.

>  void casadi::FunctionInternal::_eval(const SXElem **arg, SXElem **res, int *iw, SXElem *w, int mem) const

>  void casadi::FunctionInternal::_eval(const bvec_t **arg, bvec_t **res, int *iw, bvec_t *w, int mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

%feature("docstring") casadi::Nlpsol::symbolicOutput "[INTERNAL]  Get a
vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::Nlpsol::mx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Nlpsol::getFullJacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Nlpsol::generateDeclarations "[INTERNAL]
Generate code for the declarations of the C function.

";

%feature("docstring") casadi::Nlpsol::getWorkSize "[INTERNAL]  Get the
length of the work vector.

";

%feature("docstring") casadi::Nlpsol::print_options "[INTERNAL]  Print list
of options.

";

%feature("docstring") casadi::Nlpsol::checkArg "[INTERNAL]  Check if input
arguments have correct length and dimensions.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::Nlpsol "

NLP solver storage class.

Joel Andersson

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| common_options   | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | auto-generated   | nction           |
|                  |                 | functions        |                  |
+------------------+-----------------+------------------+------------------+
| discrete         | OT_BOOLVECTOR   | Indicates which  | casadi::Nlpsol   |
|                  |                 | of the variables |                  |
|                  |                 | are discrete,    |                  |
|                  |                 | i.e. integer-    |                  |
|                  |                 | valued           |                  |
+------------------+-----------------+------------------+------------------+
| eval_errors_fata | OT_BOOL         | When errors      | casadi::Nlpsol   |
| l                |                 | occur during     |                  |
|                  |                 | evaluation of    |                  |
|                  |                 | f,g,...,stop the |                  |
|                  |                 | iterations       |                  |
+------------------+-----------------+------------------+------------------+
| expand           | OT_BOOL         | Replace MX with  | casadi::Nlpsol   |
|                  |                 | SX expressions   |                  |
|                  |                 | in problem       |                  |
|                  |                 | formulation      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| ignore_check_vec | OT_BOOL         | If set to true,  | casadi::Nlpsol   |
|                  |                 | the input shape  |                  |
|                  |                 | of F will not be |                  |
|                  |                 | checked.         |                  |
+------------------+-----------------+------------------+------------------+
| iteration_callba | OT_FUNCTION     | A function that  | casadi::Nlpsol   |
| ck               |                 | will be called   |                  |
|                  |                 | at each          |                  |
|                  |                 | iteration with   |                  |
|                  |                 | the solver as    |                  |
|                  |                 | input. Check     |                  |
|                  |                 | documentation of |                  |
|                  |                 | Callback .       |                  |
+------------------+-----------------+------------------+------------------+
| iteration_callba | OT_BOOL         | If set to true,  | casadi::Nlpsol   |
| ck_ignore_errors |                 | errors thrown by |                  |
|                  |                 | iteration_callba |                  |
|                  |                 | ck will be       |                  |
|                  |                 | ignored.         |                  |
+------------------+-----------------+------------------+------------------+
| iteration_callba | OT_INT          | Only call the    | casadi::Nlpsol   |
| ck_step          |                 | callback         |                  |
|                  |                 | function every   |                  |
|                  |                 | few iterations.  |                  |
+------------------+-----------------+------------------+------------------+
| monitor          | OT_STRINGVECTOR | Set of user      | casadi::OracleFu |
|                  |                 | problem          | nction           |
|                  |                 | functions to be  |                  |
|                  |                 | monitored        |                  |
+------------------+-----------------+------------------+------------------+
| specific_options | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | specific auto-   | nction           |
|                  |                 | generated        |                  |
|                  |                 | functions,       |                  |
|                  |                 | overwriting the  |                  |
|                  |                 | defaults from    |                  |
|                  |                 | common_options.  |                  |
|                  |                 | Nested           |                  |
|                  |                 | dictionary.      |                  |
+------------------+-----------------+------------------+------------------+
| verbose_init     | OT_BOOL         | Print out timing | casadi::Nlpsol   |
|                  |                 | information      |                  |
|                  |                 | about the        |                  |
|                  |                 | different stages |                  |
|                  |                 | of               |                  |
|                  |                 | initialization   |                  |
+------------------+-----------------+------------------+------------------+
| warn_initial_bou | OT_BOOL         | Warn if the      | casadi::Nlpsol   |
| nds              |                 | initial guess    |                  |
|                  |                 | does not satisfy |                  |
|                  |                 | LBX and UBX      |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: nlpsol_impl.hpp ";

%feature("docstring") casadi::Nlpsol::grad_sx "[INTERNAL]  Gradient
expression.

";

%feature("docstring") casadi::Nlpsol::call_reverse "[INTERNAL]  Reverse
mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Nlpsol::slice "[INTERNAL]  returns a new
function with a selection of inputs/outputs of the original

";

%feature("docstring") casadi::Nlpsol::sx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Nlpsol::which_depends "[INTERNAL]  Which
variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::Nlpsol::eval_mx "[INTERNAL]  Evaluate with
symbolic matrices.

";

%feature("docstring") casadi::Nlpsol::mapsum_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::Nlpsol::checkRes "[INTERNAL]  Check if output
arguments have correct length and dimensions.

";

%feature("docstring") casadi::Nlpsol::sz_iw "[INTERNAL]  Get required
length of iw field.

";

%feature("docstring") casadi::Nlpsol::replaceArg "[INTERNAL]  Replace
0-by-0 inputs.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::Nlpsol::forward "[INTERNAL]  Return function
that calculates forward derivatives forward(nfwd) returns a cached instance
if available, and calls  Function get_forward(int nfwd) if no cached version
is available.

";

%feature("docstring") casadi::Nlpsol::size_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Nlpsol::getHessian "[INTERNAL]  Return
Hessian function.

";

%feature("docstring") casadi::Nlpsol::ad_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::Nlpsol::simple "[INTERNAL]  Evaluate
numerically, simplied syntax.

";

%feature("docstring") casadi::Nlpsol::getJacobian "[INTERNAL]  Return
Jacobian function.

";

%feature("docstring") casadi::Nlpsol::_call "[INTERNAL]   Call a function,
overloaded.

";

%feature("docstring") casadi::Nlpsol::sp_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode, sparsity propagation.

";

%feature("docstring") casadi::Nlpsol::has_sprev "[INTERNAL]  Is the class
able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Nlpsol::sz_work "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") casadi::Nlpsol::grad_mx "[INTERNAL]  Gradient
expression.

";

%feature("docstring") casadi::Nlpsol::checkInputs "

>  virtual void casadi::Nlpsol::checkInputs(void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Check if the inputs correspond to a well-posed problem.

>  virtual void casadi::FunctionInternal::checkInputs() const 
------------------------------------------------------------------------
[INTERNAL] 
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::Nlpsol::replaceFwdSeed "[INTERNAL]  Replace
0-by-0 forward seeds.

";

%feature("docstring") casadi::Nlpsol::name_in "[INTERNAL]  Get input scheme
name by index.

";

%feature("docstring") casadi::Nlpsol::tangent "[INTERNAL]  Return tangent
function.

";

%feature("docstring") casadi::Nlpsol::sp_rev "[INTERNAL]  Propagate
sparsity backwards.

";

%feature("docstring") casadi::Nlpsol::getJacSparsityGen "[INTERNAL]  Get
the sparsity pattern, forward mode.

";

%feature("docstring") casadi::Nlpsol::verbose "[INTERNAL]  Verbose mode?

";

%feature("docstring") casadi::Nlpsol::index_in "[INTERNAL]  Get input
scheme index by name.

";

%feature("docstring") casadi::Nlpsol::getAtomicInputReal "[INTERNAL]  Get
the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::Nlpsol::symbolicAdjSeed "[INTERNAL]  Symbolic
expressions for the adjoint seeds.

";

%feature("docstring") casadi::Nlpsol::index_out "[INTERNAL]  Get output
scheme index by name.

";

%feature("docstring") casadi::Nlpsol::free_memory "[INTERNAL]  Free memory
block.

";

%feature("docstring") casadi::Nlpsol::is_a "[INTERNAL]  Check if the
function is of a particular type.

";

%feature("docstring") casadi::Nlpsol::simplifiedCall "[INTERNAL]  Use
simplified signature.

";

%feature("docstring") casadi::Nlpsol::fullJacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Nlpsol::~Nlpsol "[INTERNAL]  Destructor.

";

%feature("docstring") casadi::Nlpsol::print "[INTERNAL]  Print.

";

%feature("docstring") casadi::Nlpsol::sparsity_in "[INTERNAL]  Get sparsity
of a given input.

";

%feature("docstring") casadi::Nlpsol::jac_mx "[INTERNAL]  Jacobian
expression.

";

%feature("docstring") casadi::Nlpsol::getAtomicInput "[INTERNAL]  Get the
(integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::Nlpsol::checkout "[INTERNAL]  Checkout a
memory object.

";

%feature("docstring") casadi::Nlpsol::get_stats "[INTERNAL]  Get all
statistics.

";

%feature("docstring") casadi::Nlpsol::jit_dependencies "[INTERNAL]  JIT for
dependencies.

";

%feature("docstring") casadi::Nlpsol::sz_arg "[INTERNAL]  Get required
length of arg field.

";

%feature("docstring") casadi::Nlpsol::size2_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Nlpsol::map_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::Nlpsol::print_dimensions "[INTERNAL]  Print
dimensions of inputs and outputs.

";

%feature("docstring") casadi::Nlpsol::alloc_iw "[INTERNAL]  Ensure required
length of iw field.

";

%feature("docstring") casadi::Nlpsol::integer_support "[INTERNAL]  Can
discrete variables be treated.

";

%feature("docstring") casadi::Nlpsol::eval_sx "[INTERNAL]  Evaluate with
symbolic scalars.

";

%feature("docstring") casadi::Nlpsol::name_out "[INTERNAL]  Get output
scheme name by index.

";

%feature("docstring") casadi::Nlpsol::free_sx "[INTERNAL]  Get free
variables (SX)

";

%feature("docstring") casadi::Nlpsol::numel_out "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::Nlpsol::n_mem "[INTERNAL]  Maximum number of
memory objects.

";

%feature("docstring") casadi::Nlpsol::generate_dependencies "[INTERNAL]
Export / Generate C code for the generated functions.

";

%feature("docstring") casadi::Nlpsol::numel_in "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::Nlpsol::setJacobian "[INTERNAL]  Return
Jacobian function.

";

%feature("docstring") casadi::Nlpsol::codegen_name "[INTERNAL]  Get name in
codegen.

";

%feature("docstring") casadi::Nlpsol::has_spfwd "[INTERNAL]  Is the class
able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Nlpsol::sz_w "[INTERNAL]  Get required length
of w field.

";

%feature("docstring") casadi::Nlpsol::get_name_out "[INTERNAL]  Names of
function input and outputs.

";

%feature("docstring") casadi::Nlpsol::setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";

%feature("docstring") casadi::Nlpsol::_set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::Nlpsol::eval_name "[INTERNAL]  Get name of
the evaluation function.

";

%feature("docstring") casadi::Nlpsol::getAdaptorSolverName "[INTERNAL]
Obtain solver name from Adaptor.

";

%feature("docstring") casadi::Nlpsol::tang_sx "[INTERNAL]  Tangent
expression.

";

%feature("docstring") casadi::Nlpsol::hess_sx "[INTERNAL]  Hessian
expression.

";

%feature("docstring") casadi::Nlpsol::construct "[INTERNAL]  Construct
Prepares the function for evaluation.

";

%feature("docstring") casadi::Nlpsol::alloc_memory "[INTERNAL]  Create
memory block.

";

%feature("docstring") casadi::Nlpsol::jac_sx "[INTERNAL]  Jacobian
expression.

";

%feature("docstring") casadi::Nlpsol::hasDerivative "[INTERNAL]  Can
derivatives be calculated in any way?

";

%feature("docstring") casadi::Nlpsol::init "[INTERNAL]  Initialize.

";

%feature("docstring") casadi::Nlpsol::size2_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Nlpsol::_set_temp "[INTERNAL]  Set the
(temporary) work vectors.

";

%feature("docstring") casadi::Nlpsol::codegen_decref "[INTERNAL]  Codegen
decref for dependencies.

";


// File: classcasadi_1_1NonZeros.xml
%feature("docstring") casadi::NonZeros::NonZeros "

Constructor.

";

%feature("docstring") casadi::NonZeros "

Access to a set of nonzeros.

NonZeros class for Matrix NonZeros is the return type for operator[] of the
Matrix class, it allows access to the value as well as changing the parent
object Joel Andersson

C++ includes: nonzeros.hpp ";


// File: classcasadi_1_1Norm.xml


// File: classcasadi_1_1Norm1.xml


// File: classcasadi_1_1Norm2.xml


// File: classcasadi_1_1NormF.xml


// File: classcasadi_1_1NormInf.xml


// File: classcasadi_1_1OneSX.xml


// File: classcasadi_1_1Opti.xml
%feature("docstring") casadi::Opti::subject_to "

Add constraints.

Examples:

::

  * \\\\begin{itemize}
  * opti.subject_to( sqrt(x+y) >= 1);
  * opti.subject_to( sqrt(x+y) > 1)}: same as above
  * opti.subject_to( 1<= sqrt(x+y) )}: same as above
  * opti.subject_to( 5*x+y==1 )}: equality
  *
  * Python
  * opti.subject_to([x*y>=1,x==3])
  * opti.subject_to(opti.bounded(0,x,1))
  *
  * MATLAB
  * opti.subject_to({x*y>=1,x==3})
  * opti.subject_to( 0<=x<=1 )
  * 



";

%feature("docstring") casadi::Opti::set_initial "

Set initial guess for decision variables

::

  * opti.set_initial(x, 2)
  * opti.set_initial(10*x(1), 2)
  * 



";

%feature("docstring") casadi::Opti "

A simplified interface for NLP modeling/solving.

This class offers a view with model description facilities The API is
guaranteed to be stable.

Joris Gillis, Erik Lambrechts

C++ includes: optistack.hpp ";

%feature("docstring") casadi::Opti::symvar "

Get symbols present in expression.

Returned vector is ordered according to the order of variable()/parameter()
calls used to create the variables

";

%feature("docstring") casadi::Opti::set_value "

Set value of parameter.

Each parameter must be given a value before 'solve' can be called

";

%feature("docstring") casadi::Opti::debug "";

%feature("docstring") casadi::Opti::copy "";

%feature("docstring") casadi::Opti::value "

Obtain value of expression at the current value

In regular mode, teh current value is the converged solution In debug mode,
the value can be non-converged

Parameters:
-----------

values:  Optional assignment expressions (e.g. x==3) to overrule the current
value

";


// File: classcasadi_1_1OptiCallback.xml
%feature("docstring") casadi::OptiCallback::~OptiCallback "";

%feature("docstring") casadi::OptiCallback "C++ includes: optistack.hpp ";

%feature("docstring") casadi::OptiCallback::call "";

%feature("docstring") casadi::OptiCallback::OptiCallback "";


// File: classcasadi_1_1OptiSol.xml
%feature("docstring") casadi::OptiSol::symvar "

Get symbols present in expression.

Returned vector is ordered according to the order of variable()/parameter()
calls used to create the variables

";

%feature("docstring") casadi::OptiSol::opti "";

%feature("docstring") casadi::OptiSol "

A simplified interface for NLP modeling/solving.

This class offers a view with solution retrieval facilities The API is
guaranteed to be stable.

Example NLP:

::

    opti = casadi.Opti();
  
    x = opti.variable();
    y = opti.variable();
  
    opti.minimize(  (y-x^2)^2   );
    opti.subject_to( x^2+y^2==1 );
    opti.subject_to(     x+y>=1 );
  
    opti.solver('ipopt');
    sol = opti.solve();
  
    sol.value(x)
    sol.value(y)



Example parametric NLP:

::

    opti = casadi.Opti();
  
    x = opti.variable(2,1);
    p = opti.parameter();
  
    opti.minimize(  (p*x(2)-x(1)^2)^2   );
    opti.subject_to( 1<=sum(x)<=2 );
  
    opti.solver('ipopt');
  
    opti.set_value(p, 3);
    sol = opti.solve();
    sol.value(x)
  
    opti.set_value(p, 5);
    sol = opti.solve();
    sol.value(x)



Joris Gillis, Erik Lambrechts

C++ includes: optistack.hpp ";

%feature("docstring") casadi::OptiSol::OptiSol "";

%feature("docstring") casadi::OptiSol::value "

Obtain value of expression at the current value

In regular mode, teh current value is the converged solution In debug mode,
the value can be non-converged

Parameters:
-----------

values:  Optional assignment expressions (e.g. x==3) to overrule the current
value

";

%feature("docstring") casadi::OptiSol::debug "";

%feature("docstring") casadi::OptiSol::set_value "

Set value of parameter.

Each parameter must be given a value before 'solve' can be called

";

%feature("docstring") casadi::OptiSol::set_initial "

Set initial guess for decision variables

::

  * opti.set_initial(x, 2)
  * opti.set_initial(10*x(1), 2)
  * 



";

%feature("docstring") casadi::OptiSol::subject_to "

Add constraints.

Examples:

::

  * \\\\begin{itemize}
  * opti.subject_to( sqrt(x+y) >= 1);
  * opti.subject_to( sqrt(x+y) > 1)}: same as above
  * opti.subject_to( 1<= sqrt(x+y) )}: same as above
  * opti.subject_to( 5*x+y==1 )}: equality
  *
  * Python
  * opti.subject_to([x*y>=1,x==3])
  * opti.subject_to(opti.bounded(0,x,1))
  *
  * MATLAB
  * opti.subject_to({x*y>=1,x==3})
  * opti.subject_to( 0<=x<=1 )
  * 



";


// File: classcasadi_1_1OptiStack.xml
%feature("docstring") casadi::OptiStack::casadi_solver "

Get the underlying CasADi solver of the Opti stack.

";

%feature("docstring") casadi::OptiStack::active_symvar "";

%feature("docstring") casadi::OptiStack::symvar "

Get symbols present in expression.

Returned vector is ordered according to the order of variable()/parameter()
calls used to create the variables

";

%feature("docstring") casadi::OptiStack::constraints "";

%feature("docstring") casadi::OptiStack::stats "

Get statistics.

nlpsol stats are passed as-is. No stability can be guaranteed about this
part of the API

";

%feature("docstring") casadi::OptiStack::subject_to "

>  void casadi::OptiStack::subject_to(const MX &g)

>  void casadi::OptiStack::subject_to(const std::vector< MX > &g)
------------------------------------------------------------------------

Add constraints.

Examples:

::

  * \\\\begin{itemize}
  * opti.subject_to( sqrt(x+y) >= 1);
  * opti.subject_to( sqrt(x+y) > 1)}: same as above
  * opti.subject_to( 1<= sqrt(x+y) )}: same as above
  * opti.subject_to( 5*x+y==1 )}: equality
  *
  * Python
  * opti.subject_to([x*y>=1,x==3])
  * opti.subject_to(opti.bounded(0,x,1))
  *
  * MATLAB
  * opti.subject_to({x*y>=1,x==3})
  * opti.subject_to( 0<=x<=1 )
  * 



>  void casadi::OptiStack::subject_to()
------------------------------------------------------------------------

Clear constraints.

";

%feature("docstring") casadi::OptiStack::return_status "

Get return status of solver passed as-is from nlpsol No stability can be
guaranteed about this part of the API.

";

%feature("docstring") casadi::OptiStack::active_values "";

%feature("docstring") casadi::OptiStack::parameter "

Create a parameter (symbol); fixed during optimization.

The order of creation does not matter. It is not required for parameter to
actualy appear in the optimization problem. Parameters that do appear, must
be given a value before the problem can be solved.

Parameters:
-----------

n:  number of rows (default 1)

m:  number of columnss (default 1)

attribute:  'full' (default) or 'symmetric'

";

%feature("docstring") casadi::OptiStack::solve "

Crunch the numbers; solve the problem.

";

%feature("docstring") casadi::OptiStack::set_initial "

Set initial guess for decision variables

::

  * opti.set_initial(x, 2)
  * opti.set_initial(10*x(1), 2)
  * 



";

%feature("docstring") casadi::OptiStack::get_meta_con "

Get meta-data of symbol (for internal use only)

";

%feature("docstring") casadi::OptiStack::value_variables "

get assignment expressions for latest values

";

%feature("docstring") casadi::OptiStack::is_parametric "

return true if expression is only dependant on Opti parameters, not
variables

";

%feature("docstring") casadi::OptiStack::callback_class "";

%feature("docstring") casadi::OptiStack::canon_expr "

Interpret an expression (for internal use only)

";

%feature("docstring") casadi::OptiStack::p "

Get all (scalarised) parameters as a symbolic column vector.

";

%feature("docstring") casadi::OptiStack::np "

Number of (scalarised) parameters.

";

%feature("docstring") casadi::OptiStack::repr "

Print representation.

";

%feature("docstring") casadi::OptiStack::solver_dirty "";

%feature("docstring") casadi::OptiStack::mark_solver_dirty "";

%feature("docstring") casadi::OptiStack::assert_empty "";

%feature("docstring") casadi::OptiStack::x "

Get all (scalarised) decision variables as a symbolic column vector.

";

%feature("docstring") casadi::OptiStack::copy "

Copy.

";

%feature("docstring") casadi::OptiStack::minimize "

Set objective.

Objective must be a scalar. Default objective: 0 When method is called
multiple times, the last call takes effect

";

%feature("docstring") casadi::OptiStack::assert_active_symbol "";

%feature("docstring") casadi::OptiStack::f "

Get objective expression.

";

%feature("docstring") casadi::OptiStack::solve_actual "";

%feature("docstring") casadi::OptiStack::lam_g "

Get all (scalarised) dual variables as a symbolic column vector.

Useful for obtaining the Lagrange Hessian:

::

  * sol.value(hessian(opti.f+opti.lam_g'*opti.g,opti.x)) % MATLAB
  * sol.value(hessian(opti.f+dot(opti.lam_g,opti.g),opti.x)[0]) # Python
  * 



";

%feature("docstring") casadi::OptiStack::nx "

Number of (scalarised) decision variables.

";

%feature("docstring") casadi::OptiStack::assert_baked "";

%feature("docstring") casadi::OptiStack::set_value "

Set value of parameter.

Each parameter must be given a value before 'solve' can be called

";

%feature("docstring") casadi::OptiStack::solve_prepare "";

%feature("docstring") casadi::OptiStack::value "

Obtain value of expression at the current value

In regular mode, teh current value is the converged solution In debug mode,
the value can be non-converged

Parameters:
-----------

values:  Optional assignment expressions (e.g. x==3) to overrule the current
value

";

%feature("docstring") casadi::OptiStack::set_meta "

Set meta-data of an expression.

";

%feature("docstring") casadi::OptiStack::arg "";

%feature("docstring") casadi::OptiStack::variable "

Create a decision variable (symbol)

The order of creation matters. The order will be reflected in the
optimization problem. It is not required for decision variables to actualy
appear in the optimization problem.

Parameters:
-----------

n:  number of rows (default 1)

m:  number of columnss (default 1)

attribute:  'full' (default) or 'symmetric'

";

%feature("docstring") casadi::OptiStack::solver "

Set a solver.

Parameters:
-----------

solver:  any of the nlpsol plugins can be used here In practice, not all
nlpsol plugins may be supported yet

options:  passed on to nlpsol No stability can be guaranteed about this part
of the API

";

%feature("docstring") casadi::OptiStack::res "";

%feature("docstring") casadi::OptiStack::mark_problem_dirty "";

%feature("docstring") casadi::OptiStack::solved "";

%feature("docstring") casadi::OptiStack "

A simplified interface for NLP modeling/solving.

This is the low-level base class. Direct usage of this class is not
recommended unless for debugging. There are no guaranties API stability

Joris Gillis, Erik Lambrechts

C++ includes: optistack.hpp ";

%feature("docstring") casadi::OptiStack::internal_bake "

Fix the structure of the optimization problem.

";

%feature("docstring") casadi::OptiStack::mark_solved "";

%feature("docstring") casadi::OptiStack::assert_solved "";

%feature("docstring") casadi::OptiStack::get_meta "

Get meta-data of symbol (for internal use only)

";

%feature("docstring") casadi::OptiStack::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::OptiStack::problem_dirty "";

%feature("docstring") casadi::OptiStack::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::OptiStack::value_parameters "";

%feature("docstring") casadi::OptiStack::g "

Get all (scalarised) constraint expressions as a column vector.

";

%feature("docstring") casadi::OptiStack::set_meta_con "

Set meta-data of an expression.

";

%feature("docstring") casadi::OptiStack::objective "";

%feature("docstring") casadi::OptiStack::dual "

get the dual variable

m must be a constraint expression. The returned value is still a symbolic
expression. Use value on it to obtain the numerical value.

";

%feature("docstring") casadi::OptiStack::OptiStack "

Create Opti Context.

";

%feature("docstring") casadi::OptiStack::ng "

Number of (scalarised) constraints.

";

%feature("docstring") casadi::OptiStack::print "

Print description.

";

%feature("docstring") casadi::OptiStack::initial "

get assignment expressions for initial values

";


// File: classcasadi_1_1OracleFunction.xml
%feature("docstring") casadi::OracleFunction::getAtomicInputReal "[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::OracleFunction::get_reverse "[INTERNAL]
Return function that calculates adjoint derivatives reverse(nadj) returns a
cached instance if available, and calls  Function get_reverse(int nadj) if
no cached version is available.

";

%feature("docstring") casadi::OracleFunction::getGradient "[INTERNAL]
Return gradient function.

";

%feature("docstring") casadi::OracleFunction::sz_w "[INTERNAL]  Get
required length of w field.

";

%feature("docstring") casadi::OracleFunction::construct "[INTERNAL]
Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::OracleFunction::tangent "[INTERNAL]  Return
tangent function.

";

%feature("docstring") casadi::OracleFunction::name_in "[INTERNAL]  Get
input scheme name by index.

";

%feature("docstring") casadi::OracleFunction::verbose "[INTERNAL]  Verbose
mode?

";

%feature("docstring") casadi::OracleFunction::set_temp "[INTERNAL]  Set the
work vectors.

";

%feature("docstring") casadi::OracleFunction::tang_sx "[INTERNAL]  Tangent
expression.

";

%feature("docstring") casadi::OracleFunction::~OracleFunction "[INTERNAL]
Destructor.

";

%feature("docstring") casadi::OracleFunction::has_function "[INTERNAL] ";

%feature("docstring") casadi::OracleFunction::symbolicAdjSeed "[INTERNAL]
Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::OracleFunction::oracle "[INTERNAL]  Get
oracle.

";

%feature("docstring") casadi::OracleFunction::codegen_name "[INTERNAL]  Get
name in codegen.

";

%feature("docstring") casadi::OracleFunction::mapsum_mx "[INTERNAL]
Parallel evaluation.

";

%feature("docstring") casadi::OracleFunction::sparsity_out "[INTERNAL]  Get
sparsity of a given output.

";

%feature("docstring") casadi::OracleFunction::n_nodes "[INTERNAL]  Number
of nodes in the algorithm.

";

%feature("docstring") casadi::OracleFunction::print_options "[INTERNAL]
Print list of options.

";

%feature("docstring") casadi::OracleFunction::checkInputs "[INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::OracleFunction::_set_temp "[INTERNAL]  Set
the (temporary) work vectors.

";

%feature("docstring") casadi::OracleFunction::alloc_arg "[INTERNAL]  Ensure
required length of arg field.

";

%feature("docstring") casadi::OracleFunction::print "[INTERNAL]  Print.

";

%feature("docstring") casadi::OracleFunction::simplifiedCall "[INTERNAL]
Use simplified signature.

";

%feature("docstring") casadi::OracleFunction::index_out "[INTERNAL]  Get
output scheme index by name.

";

%feature("docstring") casadi::OracleFunction::getWorkSize "[INTERNAL]  Get
the length of the work vector.

";

%feature("docstring") casadi::OracleFunction::factory "[INTERNAL] ";

%feature("docstring") casadi::OracleFunction::get_options "[INTERNAL]
Options.

";

%feature("docstring") casadi::OracleFunction::_eval "

>  void casadi::FunctionInternal::_eval(const double **arg, double **res, int *iw, double *w, int mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate numerically.

>  void casadi::FunctionInternal::_eval(const SXElem **arg, SXElem **res, int *iw, SXElem *w, int mem) const

>  void casadi::FunctionInternal::_eval(const bvec_t **arg, bvec_t **res, int *iw, bvec_t *w, int mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

%feature("docstring") casadi::OracleFunction::jac_mx "[INTERNAL]  Jacobian
expression.

";

%feature("docstring") casadi::OracleFunction::call_reverse "[INTERNAL]
Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::OracleFunction::hess_sx "[INTERNAL]  Hessian
expression.

";

%feature("docstring") casadi::OracleFunction::alloc_iw "[INTERNAL]  Ensure
required length of iw field.

";

%feature("docstring") casadi::OracleFunction::get_name_out "[INTERNAL]
Names of function input and outputs.

";

%feature("docstring") casadi::OracleFunction::release "[INTERNAL]  Release
a memory object.

";

%feature("docstring") casadi::OracleFunction::matchingRes "[INTERNAL]
Check if output arguments that needs to be replaced.

";

%feature("docstring") casadi::OracleFunction::free_mx "[INTERNAL]  Get free
variables ( MX)

";

%feature("docstring") casadi::OracleFunction::getJacobian "[INTERNAL]
Return Jacobian function.

";

%feature("docstring") casadi::OracleFunction::sz_iw "[INTERNAL]  Get
required length of iw field.

";

%feature("docstring") casadi::OracleFunction::eval_name "[INTERNAL]  Get
name of the evaluation function.

";

%feature("docstring") casadi::OracleFunction::size2_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::OracleFunction::eval_mx "[INTERNAL]  Evaluate
with symbolic matrices.

";

%feature("docstring") casadi::OracleFunction::call "[INTERNAL]   Call a
function, templated.

";

%feature("docstring") casadi::OracleFunction::get_stats "[INTERNAL]  Get
all statistics.

";

%feature("docstring") casadi::OracleFunction::call_forward "[INTERNAL]
Forward mode AD, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::OracleFunction::generate_dependencies "[INTERNAL]  Export / Generate C code for the generated functions.

";

%feature("docstring") casadi::OracleFunction::alloc_res "[INTERNAL]  Ensure
required length of res field.

";

%feature("docstring") casadi::OracleFunction::size_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::OracleFunction::grad_mx "[INTERNAL]  Gradient
expression.

";

%feature("docstring") casadi::OracleFunction::wrap "[INTERNAL]  Wrap in an
Function instance consisting of only one MX call.

";

%feature("docstring") casadi::OracleFunction::generateBody "[INTERNAL]
Generate code for the function body.

";

%feature("docstring") casadi::OracleFunction::getHessian "[INTERNAL]
Return Hessian function.

";

%feature("docstring") casadi::OracleFunction::set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::OracleFunction::codegen_incref "[INTERNAL]
Codegen incref for dependencies.

";

%feature("docstring") casadi::OracleFunction::size_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::OracleFunction::symbolicFwdSeed "[INTERNAL]
Symbolic expressions for the forward seeds.

";

%feature("docstring") casadi::OracleFunction::_set_work "[INTERNAL]  Set
the (persistent) work vectors.

";

%feature("docstring") casadi::OracleFunction::matchingArg "[INTERNAL]
Check if input arguments that needs to be replaced.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::OracleFunction::has_codegen "[INTERNAL]  Is
codegen supported?

";

%feature("docstring") casadi::OracleFunction::eval "[INTERNAL]  Evaluate
numerically.

";

%feature("docstring") casadi::OracleFunction::generateFunction "[INTERNAL]
Generate code the function.

";

%feature("docstring") casadi::OracleFunction::getFullJacobian "[INTERNAL]
Return Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::OracleFunction::gradient "[INTERNAL]  Return
gradient function.

";

%feature("docstring") casadi::OracleFunction::log "

>  void casadi::FunctionInternal::log(const std::string &msg) const 
------------------------------------------------------------------------
[INTERNAL] 
Log the status of the solver.

>  void casadi::FunctionInternal::log(const std::string &fcn, const std::string &msg) const 
------------------------------------------------------------------------
[INTERNAL] 
Log the status of the solver, function given.

";

%feature("docstring") casadi::OracleFunction::has_sprev "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::OracleFunction::getPartition "[INTERNAL]  Get
the unidirectional or bidirectional partition.

";

%feature("docstring") casadi::OracleFunction::sz_res "[INTERNAL]  Get
required length of res field.

";

%feature("docstring") casadi::OracleFunction::checkArg "[INTERNAL]  Check
if input arguments have correct length and dimensions.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::OracleFunction::getTangent "[INTERNAL]
Return tangent function.

";

%feature("docstring") casadi::OracleFunction::generateDeclarations "[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring") casadi::OracleFunction::get_sparsity_in "[INTERNAL]
Get sparsity of a given input.

";

%feature("docstring") casadi::OracleFunction::free_memory "[INTERNAL]  Free
memory block.

";

%feature("docstring") casadi::OracleFunction::size2_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::OracleFunction::getAtomicInput "[INTERNAL]
Get the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::OracleFunction::repr "[INTERNAL]  Print.

";

%feature("docstring") casadi::OracleFunction::generateMeta "[INTERNAL]
Generate meta-information allowing a user to evaluate a generated function.

";

%feature("docstring") casadi::OracleFunction::is_a "[INTERNAL]  Check if
the function is of a particular type.

";

%feature("docstring") casadi::OracleFunction::alloc_memory "[INTERNAL]
Create memory block.

";

%feature("docstring") casadi::OracleFunction::sparsity_in "[INTERNAL]  Get
sparsity of a given input.

";

%feature("docstring") casadi::OracleFunction::get_function "[INTERNAL] ";

%feature("docstring") casadi::OracleFunction::replaceAdjSeed "[INTERNAL]
Replace 0-by-0 reverse seeds.

";

%feature("docstring") casadi::OracleFunction::getAtomicOutput "[INTERNAL]
Get the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::OracleFunction::n_out "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::OracleFunction::fwdViaJac "[INTERNAL]
Calculate derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::OracleFunction::addDependency "[INTERNAL]
Add a dependent function.

";

%feature("docstring") casadi::OracleFunction::clear_memory "[INTERNAL]
Clear all memory (called from destructor)

";

%feature("docstring") casadi::OracleFunction::expand "[INTERNAL] ";

%feature("docstring") casadi::OracleFunction::create_function "[INTERNAL]
Create an oracle function

";

%feature("docstring") casadi::OracleFunction::get_n_in "[INTERNAL]  Number
of function inputs and outputs.

";

%feature("docstring") casadi::OracleFunction::type_name "[INTERNAL]  Get
type name.

";

%feature("docstring") casadi::OracleFunction::forward "[INTERNAL]  Return
function that calculates forward derivatives forward(nfwd) returns a cached
instance if available, and calls  Function get_forward(int nfwd) if no
cached version is available.

";

%feature("docstring") casadi::OracleFunction::default_in "[INTERNAL]  Get
default input value.

";

%feature("docstring") casadi::OracleFunction::_call "[INTERNAL]   Call a
function, overloaded.

";

%feature("docstring") casadi::OracleFunction::hasDerivative "[INTERNAL]
Can derivatives be calculated in any way?

";

%feature("docstring") casadi::OracleFunction::checkRes "[INTERNAL]  Check
if output arguments have correct length and dimensions.

";

%feature("docstring") casadi::OracleFunction::reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::OracleFunction::which_depends "[INTERNAL]
Which variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::OracleFunction::sx_out "[INTERNAL]  Get
function input(s) and output(s)

";

%feature("docstring") casadi::OracleFunction::n_mem "[INTERNAL]  Maximum
number of memory objects.

";

%feature("docstring") casadi::OracleFunction::ad_weight "[INTERNAL]
Weighting factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::OracleFunction::n_in "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::OracleFunction::_get_stats "[INTERNAL]  Get
all statistics

";

%feature("docstring") casadi::OracleFunction::numel_in "[INTERNAL]  Number
of input/output elements.

";

%feature("docstring") casadi::OracleFunction::slice "[INTERNAL]  returns a
new function with a selection of inputs/outputs of the original

";

%feature("docstring") casadi::OracleFunction::free_sx "[INTERNAL]  Get free
variables (SX)

";

%feature("docstring") casadi::OracleFunction::codegen_decref "[INTERNAL]
Codegen decref for dependencies.

";

%feature("docstring") casadi::OracleFunction::calc_function "[INTERNAL] ";

%feature("docstring") casadi::OracleFunction::mx_in "[INTERNAL]  Get
function input(s) and output(s)

";

%feature("docstring") casadi::OracleFunction::alloc_w "[INTERNAL]  Ensure
required length of w field.

";

%feature("docstring") casadi::OracleFunction::get_forward "[INTERNAL]
Return function that calculates forward derivatives forward(nfwd) returns a
cached instance if available, and calls  Function get_forward(int nfwd) if
no cached version is available.

";

%feature("docstring") casadi::OracleFunction::size1_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::OracleFunction::sparsity_jac "[INTERNAL]
Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::OracleFunction::getJacSparsity "[INTERNAL]
Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::OracleFunction::sp_fwd "[INTERNAL]  Propagate
sparsity forward.

";

%feature("docstring") casadi::OracleFunction::hessian "[INTERNAL]  Return
Hessian function.

";

%feature("docstring") casadi::OracleFunction::finalize "[INTERNAL]
Finalize initialization.

";

%feature("docstring") casadi::OracleFunction::getJacSparsityHierarchicalSymm
"[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::OracleFunction::print_option "[INTERNAL]
Print all information there is to know about a certain option.

";

%feature("docstring") casadi::OracleFunction::numel_out "[INTERNAL]  Number
of input/output elements.

";

%feature("docstring") casadi::OracleFunction::getJacSparsityHierarchical "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::OracleFunction::memory "[INTERNAL]  Memory
objects.

";

%feature("docstring") casadi::OracleFunction::init_memory "[INTERNAL]
Initalize memory block.

";

%feature("docstring") casadi::OracleFunction::jac_sx "[INTERNAL]  Jacobian
expression.

";

%feature("docstring") casadi::OracleFunction::hasFullJacobian "[INTERNAL]
Return Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::OracleFunction::setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";

%feature("docstring") casadi::OracleFunction "[INTERNAL]  Base class for
functions that perform calculation with an oracle.

Joel Andersson

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
+------------------+-----------------+------------------+------------------+
| common_options   | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | auto-generated   | nction           |
|                  |                 | functions        |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Custom input     | casadi::Function |
|                  |                 | scheme           | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| monitor          | OT_STRINGVECTOR | Set of user      | casadi::OracleFu |
|                  |                 | problem          | nction           |
|                  |                 | functions to be  |                  |
|                  |                 | monitored        |                  |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Custom output    | casadi::Function |
|                  |                 | scheme           | Internal         |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| specific_options | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | specific auto-   | nction           |
|                  |                 | generated        |                  |
|                  |                 | functions,       |                  |
|                  |                 | overwriting the  |                  |
|                  |                 | defaults from    |                  |
|                  |                 | common_options.  |                  |
|                  |                 | Nested           |                  |
|                  |                 | dictionary.      |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: oracle_function.hpp ";

%feature("docstring") casadi::OracleFunction::print_free "[INTERNAL]  Print
free variables.

";

%feature("docstring") casadi::OracleFunction::fullJacobian "[INTERNAL]
Return Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::OracleFunction::set_function "[INTERNAL]
Register the function for evaluation and statistics gathering

";

%feature("docstring") casadi::OracleFunction::sp_rev "[INTERNAL]  Propagate
sparsity backwards.

";

%feature("docstring") casadi::OracleFunction::replaceRes "[INTERNAL]
Replace 0-by-0 outputs.

";

%feature("docstring") casadi::OracleFunction::get_n_reverse "[INTERNAL]
Return function that calculates adjoint derivatives reverse(nadj) returns a
cached instance if available, and calls  Function get_reverse(int nadj) if
no cached version is available.

";

%feature("docstring") casadi::OracleFunction::name_out "[INTERNAL]  Get
output scheme name by index.

";

%feature("docstring") casadi::OracleFunction::get_sparsity_out "[INTERNAL]
Get sparsity of a given output.

";

%feature("docstring") casadi::OracleFunction::nnz_out "[INTERNAL]  Number
of input/output nonzeros.

";

%feature("docstring") casadi::OracleFunction::sx_in "[INTERNAL]  Get
function input(s) and output(s)

";

%feature("docstring") casadi::OracleFunction::generate_lifted "[INTERNAL]
Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::OracleFunction::_setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";

%feature("docstring") casadi::OracleFunction::print_fstats "[INTERNAL]
Print statistics.

";

%feature("docstring") casadi::OracleFunction::size1_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::OracleFunction::has_spfwd "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::OracleFunction::getJacSparsityGen "[INTERNAL]
Get the sparsity pattern, forward mode.

";

%feature("docstring") casadi::OracleFunction::sp_weight "[INTERNAL]
Weighting factor for chosing forward/reverse mode, sparsity propagation.

";

%feature("docstring") casadi::OracleFunction::adjViaJac "[INTERNAL]
Calculate derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::OracleFunction::name "[INTERNAL]  Name of the
function.

";

%feature("docstring") casadi::OracleFunction::getAlgorithmSize "[INTERNAL]
Get the number of atomic operations.

";

%feature("docstring") casadi::OracleFunction::map_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::OracleFunction::init "[INTERNAL]  Initialize

";

%feature("docstring") casadi::OracleFunction::jacobian "[INTERNAL]  Return
Jacobian function.

";

%feature("docstring") casadi::OracleFunction::replaceFwdSeed "[INTERNAL]
Replace 0-by-0 forward seeds.

";

%feature("docstring") casadi::OracleFunction::eval_sx "[INTERNAL]  Evaluate
with symbolic scalars.

";

%feature("docstring") casadi::OracleFunction::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::OracleFunction::mx_out "[INTERNAL]  Get
function input(s) and output(s)

";

%feature("docstring") casadi::OracleFunction::sz_work "[INTERNAL]  Get
number of temporary variables needed.

";

%feature("docstring") casadi::OracleFunction::get_n_forward "[INTERNAL]
Return function that calculates forward derivatives forward(nfwd) returns a
cached instance if available, and calls  Function get_forward(int nfwd) if
no cached version is available.

";

%feature("docstring") casadi::OracleFunction::sz_arg "[INTERNAL]  Get
required length of arg field.

";

%feature("docstring") casadi::OracleFunction::nnz_in "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::OracleFunction::get_n_out "[INTERNAL]  Number
of function inputs and outputs.

";

%feature("docstring") casadi::OracleFunction::jit_dependencies "[INTERNAL]
JIT for dependencies.

";

%feature("docstring") casadi::OracleFunction::setJacobian "[INTERNAL]
Return Jacobian function.

";

%feature("docstring") casadi::OracleFunction::set_jac_sparsity "[INTERNAL]
Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::OracleFunction::getAtomicOperation "[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring") casadi::OracleFunction::get_name_in "[INTERNAL]
Names of function input and outputs.

";

%feature("docstring") casadi::OracleFunction::alloc "[INTERNAL]  Ensure
work vectors long enough to evaluate function.

";

%feature("docstring") casadi::OracleFunction::simple "[INTERNAL]  Evaluate
numerically, simplied syntax.

";

%feature("docstring") casadi::OracleFunction::grad_sx "[INTERNAL]  Gradient
expression.

";

%feature("docstring") casadi::OracleFunction::signature "[INTERNAL]  Code
generate the function.

";

%feature("docstring") casadi::OracleFunction::print_dimensions "[INTERNAL]
Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::OracleFunction::self "[INTERNAL]  Get a
public class instance.

";

%feature("docstring") casadi::OracleFunction::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::OracleFunction::replaceArg "[INTERNAL]
Replace 0-by-0 inputs.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::OracleFunction::index_in "[INTERNAL]  Get
input scheme index by name.

";

%feature("docstring") casadi::OracleFunction::has_free "[INTERNAL]  Does
the function have free variables.

";

%feature("docstring") casadi::OracleFunction::monitored "[INTERNAL] ";

%feature("docstring") casadi::OracleFunction::getAdaptorSolverName "[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring") casadi::OracleFunction::OracleFunction "[INTERNAL]
Constructor.

";

%feature("docstring") casadi::OracleFunction::addShorthand "[INTERNAL]
Generate shorthand macro.

";

%feature("docstring") casadi::OracleFunction::tang_mx "[INTERNAL]  Tangent
expression.

";

%feature("docstring") casadi::OracleFunction::checkout "[INTERNAL]
Checkout a memory object.

";

%feature("docstring") casadi::OracleFunction::symbolicOutput "[INTERNAL]
Get a vector of symbolic variables corresponding to the outputs.

";


// File: classcasadi_1_1Output.xml


// File: classcasadi_1_1ParsedFile.xml
%feature("docstring") casadi::ParsedFile::ParsedFile "

>  casadi::ParsedFile::ParsedFile()
------------------------------------------------------------------------

Default constructor (no commands)

>  casadi::ParsedFile::ParsedFile(const std::string &fname)

>  casadi::ParsedFile::ParsedFile(const std::vector< std::string > &lines, int offset=0)
------------------------------------------------------------------------

Construct from a file.

";

%feature("docstring") casadi::ParsedFile::print "

Print parsed file.

";

%feature("docstring") casadi::ParsedFile::to "

Convert to a type.

";

%feature("docstring") casadi::ParsedFile::parse "

>  void casadi::ParsedFile::parse(const std::string &fname)
------------------------------------------------------------------------

Parse a file.

>  void casadi::ParsedFile::parse(const std::vector< std::string > &lines, int offset)
------------------------------------------------------------------------

Parse a list of strings.

";

%feature("docstring") casadi::ParsedFile::has "

Does an entry exist?

";

%feature("docstring") casadi::ParsedFile::to_int "

Get entry as an integer.

";

%feature("docstring") casadi::ParsedFile::to_vector "

Get entry as a vector.

";

%feature("docstring") casadi::ParsedFile::to_text "

Get entry as a text.

";

%feature("docstring") casadi::ParsedFile::to_string "

Get entry as a string.

";

%feature("docstring") casadi::ParsedFile::to_set "

Get entry as a set.

";

%feature("docstring") casadi::ParsedFile "

A parsed file.

Joel Andersson

C++ includes: casadi_file.hpp ";


// File: classcasadi_1_1Polynomial.xml
%feature("docstring") casadi::Polynomial "

Helper class for differentiating and integrating polynomials.

Joel Andersson

C++ includes: polynomial.hpp ";

%feature("docstring") casadi::Polynomial::derivative "

Create a new polynomial for the derivative.

";

%feature("docstring") casadi::Polynomial::Polynomial "

>  casadi::Polynomial::Polynomial(real_t scalar=1)
------------------------------------------------------------------------

Construct a constant polynomial.

>  casadi::Polynomial::Polynomial(real_t p0, real_t p1)
------------------------------------------------------------------------

Construct a linear polynomial.

>  casadi::Polynomial::Polynomial(real_t p0, real_t p1, real_t p2)
------------------------------------------------------------------------

Construct a quadratic polynomial.

>  casadi::Polynomial::Polynomial(real_t p0, real_t p1, real_t p2, real_t p3)
------------------------------------------------------------------------

Construct a cubic polynomial.

>  casadi::Polynomial::Polynomial(const std::vector< T > &coeff)
------------------------------------------------------------------------

Construct from a vector of polynomial coefficients.

";

%feature("docstring") casadi::Polynomial::print "

Print a description of the object.

";

%feature("docstring") casadi::Polynomial::anti_derivative "

Create a new polynomial for the anti-derivative (primitive function)

";

%feature("docstring") casadi::Polynomial::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::Polynomial::scalar "

Get scalar value (error if degree()!=0)

";

%feature("docstring") casadi::Polynomial::degree "

Degree of the polynomial.

";

%feature("docstring") casadi::Polynomial::trim "

Remove excess zeros.

";

%feature("docstring") casadi::Polynomial::repr "

Print a representation of the object.

";

%feature("docstring") casadi::Polynomial::getRepresentation "

Return a string with a representation (for SWIG)

";


// File: classcasadi_1_1PrintableObject.xml
%feature("docstring") casadi::PrintableObject::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") friendwrap_repr "

Return a string with a representation of the object, cf. repr(Object) in
Python.

";

%feature("docstring") friendwrap_str "

Return a string with a description of the object, cf. str(Object) in Python.

";

%feature("docstring") casadi::PrintableObject "

Base class for objects that have a natural string representation.

Joel Andersson

C++ includes: printable_object.hpp ";

%feature("docstring") casadi::PrintableObject::getDescription "

Return a string with a description (for SWIG)

";


// File: classcasadi_1_1Project.xml


// File: classcasadi_1_1QpToNlp.xml
%feature("docstring") casadi::QpToNlp::_eval "

>  void casadi::FunctionInternal::_eval(const double **arg, double **res, int *iw, double *w, int mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate numerically.

>  void casadi::FunctionInternal::_eval(const SXElem **arg, SXElem **res, int *iw, SXElem *w, int mem) const

>  void casadi::FunctionInternal::_eval(const bvec_t **arg, bvec_t **res, int *iw, bvec_t *w, int mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

%feature("docstring") casadi::QpToNlp::get_name_out "[INTERNAL]  Names of
function input and outputs.

";

%feature("docstring") casadi::QpToNlp::tang_sx "[INTERNAL]  Tangent
expression.

";

%feature("docstring") casadi::QpToNlp::size2_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::QpToNlp::call_forward "[INTERNAL]  Forward
mode AD, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::QpToNlp::free_mx "[INTERNAL]  Get free
variables ( MX)

";

%feature("docstring") casadi::QpToNlp::hasDerivative "[INTERNAL]  Can
derivatives be calculated in any way?

";

%feature("docstring") casadi::QpToNlp::hess_sx "[INTERNAL]  Hessian
expression.

";

%feature("docstring") casadi::QpToNlp::get_stats "[INTERNAL]  Get all
statistics

";

%feature("docstring") casadi::QpToNlp::getJacSparsityHierarchical "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::QpToNlp::grad_mx "[INTERNAL]  Gradient
expression.

";

%feature("docstring") casadi::QpToNlp::_set_temp "[INTERNAL]  Set the
(temporary) work vectors.

";

%feature("docstring") casadi::QpToNlp::get_reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::QpToNlp::nnz_in "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::QpToNlp::get_n_out "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::QpToNlp::getAtomicOutput "[INTERNAL]  Get the
(integer) output argument of an atomic operation.

";

%feature("docstring") casadi::QpToNlp::symbolicFwdSeed "[INTERNAL]
Symbolic expressions for the forward seeds.

";

%feature("docstring") casadi::QpToNlp::print "[INTERNAL]  Print.

";

%feature("docstring") casadi::QpToNlp::getTangent "[INTERNAL]  Return
tangent function.

";

%feature("docstring") casadi::QpToNlp::_get_stats "[INTERNAL]  Get all
statistics

";

%feature("docstring") casadi::QpToNlp::get_n_reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::QpToNlp::sx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::QpToNlp::name "[INTERNAL]  Name of the
function.

";

%feature("docstring") casadi::QpToNlp::sx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::QpToNlp::eval_sx "[INTERNAL]  Evaluate with
symbolic scalars.

";

%feature("docstring") casadi::QpToNlp::call "[INTERNAL]   Call a function,
templated.

";

%feature("docstring") casadi::QpToNlp::numel_out "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::QpToNlp::alloc_w "[INTERNAL]  Ensure required
length of w field.

";

%feature("docstring") casadi::QpToNlp::replaceRes "[INTERNAL]  Replace
0-by-0 outputs.

";

%feature("docstring") casadi::QpToNlp::jit_dependencies "[INTERNAL]   Jit
dependencies.

";

%feature("docstring") casadi::QpToNlp::getPartition "[INTERNAL]  Get the
unidirectional or bidirectional partition.

";

%feature("docstring") casadi::QpToNlp::getAlgorithmSize "[INTERNAL]  Get
the number of atomic operations.

";

%feature("docstring") casadi::QpToNlp::self "[INTERNAL]  Get a public class
instance.

";

%feature("docstring") casadi::QpToNlp::getFullJacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::QpToNlp::size_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::QpToNlp::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::QpToNlp::mx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::QpToNlp::eval_name "[INTERNAL]  Get name of
the evaluation function.

";

%feature("docstring") casadi::QpToNlp::name_in "[INTERNAL]  Get input
scheme name by index.

";

%feature("docstring") casadi::QpToNlp::matchingArg "[INTERNAL]  Check if
input arguments that needs to be replaced.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::QpToNlp::size_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::QpToNlp::call_reverse "[INTERNAL]  Reverse
mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::QpToNlp::sparsity_out "[INTERNAL]  Get
sparsity of a given output.

";

%feature("docstring") casadi::QpToNlp::eval "[INTERNAL]  Evaluate
numerically.

";

%feature("docstring") casadi::QpToNlp::set_jac_sparsity "[INTERNAL]
Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::QpToNlp::~QpToNlp "[INTERNAL]  Destructor.

";

%feature("docstring") casadi::QpToNlp::fullJacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::QpToNlp::generate_lifted "[INTERNAL]  Extract
the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::QpToNlp::getJacSparsityGen "[INTERNAL]  Get
the sparsity pattern, forward mode.

";

%feature("docstring") casadi::QpToNlp::print_free "[INTERNAL]  Print free
variables.

";

%feature("docstring") casadi::QpToNlp::_call "[INTERNAL]   Call a function,
overloaded.

";

%feature("docstring") casadi::QpToNlp::hasFullJacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::QpToNlp::matchingRes "[INTERNAL]  Check if
output arguments that needs to be replaced.

";

%feature("docstring") casadi::QpToNlp::simplifiedCall "[INTERNAL]  Use
simplified signature.

";

%feature("docstring") casadi::QpToNlp::codegen_incref "[INTERNAL]  Codegen
incref for dependencies.

";

%feature("docstring") casadi::QpToNlp::getAtomicOperation "[INTERNAL]  Get
an atomic operation operator index.

";

%feature("docstring") casadi::QpToNlp::wrap "[INTERNAL]  Wrap in an
Function instance consisting of only one MX call.

";

%feature("docstring") casadi::QpToNlp::index_in "[INTERNAL]  Get input
scheme index by name.

";

%feature("docstring") casadi::QpToNlp::get_sparsity_out "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::QpToNlp::checkRes "[INTERNAL]  Check if
output arguments have correct length and dimensions.

";

%feature("docstring") casadi::QpToNlp::checkout "[INTERNAL]  Checkout a
memory object.

";

%feature("docstring") casadi::QpToNlp::default_in "[INTERNAL]  Get default
input value.

";

%feature("docstring") casadi::QpToNlp::mapsum_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::QpToNlp::sparsity_in "[INTERNAL]  Get
sparsity of a given input.

";

%feature("docstring") casadi::QpToNlp::free_memory "[INTERNAL]  Free memory
block.

";

%feature("docstring") casadi::QpToNlp::reverse "[INTERNAL]  Return function
that calculates adjoint derivatives reverse(nadj) returns a cached instance
if available, and calls  Function get_reverse(int nadj) if no cached version
is available.

";

%feature("docstring") casadi::QpToNlp::mx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::QpToNlp::alloc_res "[INTERNAL]  Ensure
required length of res field.

";

%feature("docstring") casadi::QpToNlp::factory "[INTERNAL] ";

%feature("docstring") casadi::QpToNlp "

'nlpsol' plugin for Conic

Solve QPs using an Nlpsol Use the 'nlpsol' option to specify the NLP solver
to use.

>List of available options

+----------------+-----------+---------------------------------+
|       Id       |   Type    |           Description           |
+================+===========+=================================+
| nlpsol         | OT_STRING | Name of solver.                 |
+----------------+-----------+---------------------------------+
| nlpsol_options | OT_DICT   | Options to be passed to solver. |
+----------------+-----------+---------------------------------+

Joris Gillis

>List of available options

+----------------+---------------+-----------------------+-----------------+
|       Id       |     Type      |      Description      |     Used in     |
+================+===============+=======================+=================+
| discrete       | OT_BOOLVECTOR | Indicates which of    | casadi::Conic   |
|                |               | the variables are     |                 |
|                |               | discrete, i.e.        |                 |
|                |               | integer-valued        |                 |
+----------------+---------------+-----------------------+-----------------+
| nlpsol         | OT_STRING     | Name of solver.       | casadi::QpToNlp |
+----------------+---------------+-----------------------+-----------------+
| nlpsol_options | OT_DICT       | Options to be passed  | casadi::QpToNlp |
|                |               | to solver.            |                 |
+----------------+---------------+-----------------------+-----------------+

Diagrams
--------



C++ includes: qp_to_nlp.hpp ";

%feature("docstring") casadi::QpToNlp::replaceFwdSeed "[INTERNAL]  Replace
0-by-0 forward seeds.

";

%feature("docstring") casadi::QpToNlp::oracle "[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::QpToNlp::construct "[INTERNAL]  Construct
Prepares the function for evaluation.

";

%feature("docstring") casadi::QpToNlp::_set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::QpToNlp::get_sparsity_in "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::QpToNlp::sz_arg "[INTERNAL]  Get required
length of arg field.

";

%feature("docstring") casadi::QpToNlp::slice "[INTERNAL]  returns a new
function with a selection of inputs/outputs of the original

";

%feature("docstring") casadi::QpToNlp::has_free "[INTERNAL]  Does the
function have free variables.

";

%feature("docstring") casadi::QpToNlp::log "

>  void casadi::FunctionInternal::log(const std::string &msg) const 
------------------------------------------------------------------------
[INTERNAL] 
Log the status of the solver.

>  void casadi::FunctionInternal::log(const std::string &fcn, const std::string &msg) const 
------------------------------------------------------------------------
[INTERNAL] 
Log the status of the solver, function given.

";

%feature("docstring") casadi::QpToNlp::type_name "[INTERNAL]  Get type
name.

";

%feature("docstring") casadi::QpToNlp::getWorkSize "[INTERNAL]  Get the
length of the work vector.

";

%feature("docstring") casadi::QpToNlp::tang_mx "[INTERNAL]  Tangent
expression.

";

%feature("docstring") casadi::QpToNlp::name_out "[INTERNAL]  Get output
scheme name by index.

";

%feature("docstring") casadi::QpToNlp::jac_mx "[INTERNAL]  Jacobian
expression.

";

%feature("docstring") casadi::QpToNlp::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::QpToNlp::forward "[INTERNAL]  Return function
that calculates forward derivatives forward(nfwd) returns a cached instance
if available, and calls  Function get_forward(int nfwd) if no cached version
is available.

";

%feature("docstring") casadi::QpToNlp::get_function "[INTERNAL] ";

%feature("docstring") casadi::QpToNlp::get_forward "[INTERNAL]  Return
function that calculates forward derivatives forward(nfwd) returns a cached
instance if available, and calls  Function get_forward(int nfwd) if no
cached version is available.

";

%feature("docstring") casadi::QpToNlp::print_fstats "[INTERNAL]  Print
statistics.

";

%feature("docstring") casadi::QpToNlp::_setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";

%feature("docstring") casadi::QpToNlp::alloc_iw "[INTERNAL]  Ensure
required length of iw field.

";

%feature("docstring") casadi::QpToNlp::plugin_name "[INTERNAL] ";

%feature("docstring") casadi::QpToNlp::repr "[INTERNAL]  Print.

";

%feature("docstring") casadi::QpToNlp::getAtomicInputReal "[INTERNAL]  Get
the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::QpToNlp::clear_memory "[INTERNAL]  Clear all
memory (called from destructor)

";

%feature("docstring") casadi::QpToNlp::gradient "[INTERNAL]  Return
gradient function.

";

%feature("docstring") casadi::QpToNlp::alloc "[INTERNAL]  Ensure work
vectors long enough to evaluate function.

";

%feature("docstring") casadi::QpToNlp::n_nodes "[INTERNAL]  Number of nodes
in the algorithm.

";

%feature("docstring") casadi::QpToNlp::print_dimensions "[INTERNAL]  Print
dimensions of inputs and outputs.

";

%feature("docstring") casadi::QpToNlp::addShorthand "[INTERNAL]  Generate
shorthand macro.

";

%feature("docstring") casadi::QpToNlp::size1_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::QpToNlp::which_depends "[INTERNAL]  Which
variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::QpToNlp::codegen_decref "[INTERNAL]  Codegen
decref for dependencies.

";

%feature("docstring") casadi::QpToNlp::set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::QpToNlp::hessian "[INTERNAL]  Return Hessian
function.

";

%feature("docstring") casadi::QpToNlp::has_function "[INTERNAL] ";

%feature("docstring") casadi::QpToNlp::has_sprev "[INTERNAL]  Is the class
able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::QpToNlp::getAdaptorSolverName "[INTERNAL]
Obtain solver name from Adaptor.

";

%feature("docstring") casadi::QpToNlp::size2_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::QpToNlp::symbolicOutput "[INTERNAL]  Get a
vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::QpToNlp::print_options "[INTERNAL]  Print
list of options.

";

%feature("docstring") casadi::QpToNlp::has_spfwd "[INTERNAL]  Is the class
able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::QpToNlp::free_sx "[INTERNAL]  Get free
variables (SX)

";

%feature("docstring") casadi::QpToNlp::checkArg "[INTERNAL]  Check if input
arguments have correct length and dimensions.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::QpToNlp::map_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::QpToNlp::n_mem "[INTERNAL]  Maximum number of
memory objects.

";

%feature("docstring") casadi::QpToNlp::print_option "[INTERNAL]  Print all
information there is to know about a certain option.

";

%feature("docstring") casadi::QpToNlp::signature "[INTERNAL]  Code generate
the function.

";

%feature("docstring") casadi::QpToNlp::generate_dependencies "[INTERNAL]
Export / Generate C code for the dependency function.

";

%feature("docstring") casadi::QpToNlp::jac_sx "[INTERNAL]  Jacobian
expression.

";

%feature("docstring") casadi::QpToNlp::sp_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode, sparsity propagation.

";

%feature("docstring") casadi::QpToNlp::get_options "[INTERNAL]  Options.

";

%feature("docstring") casadi::QpToNlp::fwdViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::QpToNlp::integer_support "[INTERNAL]  Can
discrete variables be treated.

";

%feature("docstring") casadi::QpToNlp::init "[INTERNAL]  Initialize.

";

%feature("docstring") casadi::QpToNlp::sz_iw "[INTERNAL]  Get required
length of iw field.

";

%feature("docstring") casadi::QpToNlp::getHessian "[INTERNAL]  Return
Hessian function.

";

%feature("docstring") casadi::QpToNlp::sz_work "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") casadi::QpToNlp::sp_fwd "[INTERNAL]  Propagate
sparsity forward.

";

%feature("docstring") casadi::QpToNlp::release "[INTERNAL]  Release a
memory object.

";

%feature("docstring") casadi::QpToNlp::sp_rev "[INTERNAL]  Propagate
sparsity backwards.

";

%feature("docstring") casadi::QpToNlp::setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";

%feature("docstring") casadi::QpToNlp::alloc_arg "[INTERNAL]  Ensure
required length of arg field.

";

%feature("docstring") casadi::QpToNlp::is_a "[INTERNAL]  Check if the
function is of a particular type.

";

%feature("docstring") casadi::QpToNlp::QpToNlp "[INTERNAL]  Create a new
Solver.

";

%feature("docstring") casadi::QpToNlp::getJacSparsityHierarchicalSymm "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::QpToNlp::getJacobian "[INTERNAL]  Return
Jacobian function.

";

%feature("docstring") casadi::QpToNlp::sz_res "[INTERNAL]  Get required
length of res field.

";

%feature("docstring") casadi::QpToNlp::getAtomicInput "[INTERNAL]  Get the
(integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::QpToNlp::get_name_in "[INTERNAL]  Names of
function input and outputs.

";

%feature("docstring") casadi::QpToNlp::n_in "[INTERNAL]  Number of function
inputs and outputs.

";

%feature("docstring") casadi::QpToNlp::get_n_forward "[INTERNAL]  Return
function that calculates forward derivatives forward(nfwd) returns a cached
instance if available, and calls  Function get_forward(int nfwd) if no
cached version is available.

";

%feature("docstring") casadi::QpToNlp::verbose "[INTERNAL]  Verbose mode?

";

%feature("docstring") casadi::QpToNlp::generateDeclarations "[INTERNAL]
Generate code for the declarations of the C function.

";

%feature("docstring") casadi::QpToNlp::sparsity_jac "[INTERNAL]  Get, if
necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::QpToNlp::jacobian "[INTERNAL]  Return
Jacobian function.

";

%feature("docstring") casadi::QpToNlp::setJacobian "[INTERNAL]  Return
Jacobian function.

";

%feature("docstring") casadi::QpToNlp::generateFunction "[INTERNAL]
Generate code the function.

";

%feature("docstring") casadi::QpToNlp::symbolicAdjSeed "[INTERNAL]
Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::QpToNlp::get_n_in "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::QpToNlp::tangent "[INTERNAL]  Return tangent
function.

";

%feature("docstring") casadi::QpToNlp::numel_in "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::QpToNlp::codegen_name "[INTERNAL]  Get name
in codegen.

";

%feature("docstring") casadi::QpToNlp::sz_w "[INTERNAL]  Get required
length of w field.

";

%feature("docstring") casadi::QpToNlp::n_out "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::QpToNlp::getGradient "[INTERNAL]  Return
gradient function.

";

%feature("docstring") casadi::QpToNlp::set_temp "[INTERNAL]  Set the
(temporary) work vectors.

";

%feature("docstring") casadi::QpToNlp::simple "[INTERNAL]  Evaluate
numerically, simplied syntax.

";

%feature("docstring") casadi::QpToNlp::generateMeta "[INTERNAL]  Generate
meta-information allowing a user to evaluate a generated function.

";

%feature("docstring") casadi::QpToNlp::generateNativeCode "[INTERNAL]
Generate native code in the interfaced language for debugging

";

%feature("docstring") casadi::QpToNlp::memory "[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::QpToNlp::grad_sx "[INTERNAL]  Gradient
expression.

";

%feature("docstring") casadi::QpToNlp::has_codegen "[INTERNAL]  Is codegen
supported?

";

%feature("docstring") casadi::QpToNlp::nnz_out "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::QpToNlp::finalize "[INTERNAL]  Finalize the
object creation This function, which visits the class hierarchy in reverse
order is run after init() has been completed.

";

%feature("docstring") casadi::QpToNlp::eval_mx "[INTERNAL]  Evaluate with
symbolic matrices.

";

%feature("docstring") casadi::QpToNlp::size1_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::QpToNlp::init_memory "[INTERNAL]  Initalize
memory block.

";

%feature("docstring") casadi::QpToNlp::index_out "[INTERNAL]  Get output
scheme index by name.

";

%feature("docstring") casadi::QpToNlp::getJacSparsity "[INTERNAL]  Generate
the sparsity of a Jacobian block.

";

%feature("docstring") casadi::QpToNlp::replaceAdjSeed "[INTERNAL]  Replace
0-by-0 reverse seeds.

";

%feature("docstring") casadi::QpToNlp::checkInputs "[INTERNAL]  Check if
the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::QpToNlp::ad_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::QpToNlp::replaceArg "[INTERNAL]  Replace
0-by-0 inputs.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::QpToNlp::addDependency "[INTERNAL]  Add a
dependent function.

";

%feature("docstring") casadi::QpToNlp::generateBody "[INTERNAL]  Generate
code for the function body.

";

%feature("docstring") casadi::QpToNlp::alloc_memory "[INTERNAL]  Create
memory block.

";

%feature("docstring") casadi::QpToNlp::adjViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";


// File: classcasadi_1_1Rank1.xml


// File: classcasadi_1_1RealtypeSX.xml


// File: classcasadi_1_1Reshape.xml


// File: classcasadi_1_1Rootfinder.xml
%feature("docstring") casadi::Rootfinder::checkInputs "[INTERNAL]  Check if
the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::Rootfinder::slice "[INTERNAL]  returns a new
function with a selection of inputs/outputs of the original

";

%feature("docstring") casadi::Rootfinder::codegen_incref "[INTERNAL]
Codegen incref for dependencies.

";

%feature("docstring") casadi::Rootfinder::expand "[INTERNAL] ";

%feature("docstring") casadi::Rootfinder::has_free "[INTERNAL]  Does the
function have free variables.

";

%feature("docstring") casadi::Rootfinder::simplifiedCall "[INTERNAL]  Use
simplified signature.

";

%feature("docstring") casadi::Rootfinder::clear_memory "[INTERNAL]  Clear
all memory (called from destructor)

";

%feature("docstring") casadi::Rootfinder::matchingArg "[INTERNAL]  Check if
input arguments that needs to be replaced.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::Rootfinder::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::Rootfinder::reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::Rootfinder::generateBody "[INTERNAL]
Generate code for the function body.

";

%feature("docstring") casadi::Rootfinder::calc_function "[INTERNAL] ";

%feature("docstring") casadi::Rootfinder::memory "[INTERNAL]  Memory
objects.

";

%feature("docstring") casadi::Rootfinder::size_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Rootfinder::monitored "[INTERNAL] ";

%feature("docstring") casadi::Rootfinder::_call "[INTERNAL]   Call a
function, overloaded.

";

%feature("docstring") casadi::Rootfinder::size1_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::Rootfinder::alloc_arg "[INTERNAL]  Ensure
required length of arg field.

";

%feature("docstring") casadi::Rootfinder::getHessian "[INTERNAL]  Return
Hessian function.

";

%feature("docstring") casadi::Rootfinder::nnz_out "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::Rootfinder::self "[INTERNAL]  Get a public
class instance.

";

%feature("docstring") casadi::Rootfinder::replaceArg "[INTERNAL]  Replace
0-by-0 inputs.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::Rootfinder::construct "[INTERNAL]  Construct
Prepares the function for evaluation.

";

%feature("docstring") casadi::Rootfinder::finalize "[INTERNAL]  Finalize
initialization.

";

%feature("docstring") casadi::Rootfinder::generate_lifted "[INTERNAL]
Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::Rootfinder::name_out "[INTERNAL]  Get output
scheme name by index.

";

%feature("docstring") casadi::Rootfinder::forward "[INTERNAL]  Return
function that calculates forward derivatives forward(nfwd) returns a cached
instance if available, and calls  Function get_forward(int nfwd) if no
cached version is available.

";

%feature("docstring") casadi::Rootfinder::sx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Rootfinder::jacobian "[INTERNAL]  Return
Jacobian function.

";

%feature("docstring") casadi::Rootfinder::index_out "[INTERNAL]  Get output
scheme index by name.

";

%feature("docstring") casadi::Rootfinder::alloc_memory "[INTERNAL]  Create
memory block.

";

%feature("docstring") casadi::Rootfinder::get_n_reverse "[INTERNAL]
Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::Rootfinder::setJacobian "[INTERNAL]  Return
Jacobian function.

";

%feature("docstring") casadi::Rootfinder::eval_sx "[INTERNAL]  Evaluate
with symbolic scalars.

";

%feature("docstring") casadi::Rootfinder::get_sparsity_out "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Rootfinder::free_sx "[INTERNAL]  Get free
variables (SX)

";

%feature("docstring") casadi::Rootfinder::getWorkSize "[INTERNAL]  Get the
length of the work vector.

";

%feature("docstring") casadi::Rootfinder::numel_in "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::Rootfinder::_set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::Rootfinder::set_function "[INTERNAL]
Register the function for evaluation and statistics gathering

";

%feature("docstring") casadi::Rootfinder::replaceAdjSeed "[INTERNAL]
Replace 0-by-0 reverse seeds.

";

%feature("docstring") casadi::Rootfinder::sparsity_jac "[INTERNAL]  Get, if
necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Rootfinder::symbolicAdjSeed "[INTERNAL]
Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::Rootfinder::n_out "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::Rootfinder::get_name_out "[INTERNAL]  Names
of function input and outputs.

";

%feature("docstring") casadi::Rootfinder::sz_work "[INTERNAL]  Get number
of temporary variables needed.

";

%feature("docstring") casadi::Rootfinder::init "[INTERNAL]  Initialize.

";

%feature("docstring") casadi::Rootfinder::sz_iw "[INTERNAL]  Get required
length of iw field.

";

%feature("docstring") casadi::Rootfinder::is_a "[INTERNAL]  Check if the
function is of a particular type.

";

%feature("docstring") casadi::Rootfinder::init_memory "[INTERNAL]
Initalize memory block.

";

%feature("docstring") casadi::Rootfinder::replaceRes "[INTERNAL]  Replace
0-by-0 outputs.

";

%feature("docstring") casadi::Rootfinder::sp_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode, sparsity propagation.

";

%feature("docstring") casadi::Rootfinder::Rootfinder "[INTERNAL]
Constructor.

Parameters:
-----------

f:   Function mapping from (n+1) inputs to 1 output.

";

%feature("docstring") casadi::Rootfinder::_setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";

%feature("docstring") casadi::Rootfinder::get_n_in "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::Rootfinder::generateDeclarations "[INTERNAL]
Generate code for the declarations of the C function.

";

%feature("docstring") casadi::Rootfinder::get_function "[INTERNAL] ";

%feature("docstring") casadi::Rootfinder::default_in "[INTERNAL]  Get
default input value.

";

%feature("docstring") casadi::Rootfinder::n_nodes "[INTERNAL]  Number of
nodes in the algorithm.

";

%feature("docstring") casadi::Rootfinder::n_mem "[INTERNAL]  Maximum number
of memory objects.

";

%feature("docstring") casadi::Rootfinder::solve "[INTERNAL] ";

%feature("docstring") casadi::Rootfinder::sp_rev "[INTERNAL]  Propagate
sparsity backwards.

";

%feature("docstring") casadi::Rootfinder::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::Rootfinder::getGradient "[INTERNAL]  Return
gradient function.

";

%feature("docstring") casadi::Rootfinder::wrap "[INTERNAL]  Wrap in an
Function instance consisting of only one MX call.

";

%feature("docstring") casadi::Rootfinder::print_dimensions "[INTERNAL]
Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::Rootfinder::call "[INTERNAL]   Call a
function, templated.

";

%feature("docstring") casadi::Rootfinder::symbolicOutput "[INTERNAL]  Get a
vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::Rootfinder::get_name_in "[INTERNAL]  Names of
function input and outputs.

";

%feature("docstring") casadi::Rootfinder::alloc_iw "[INTERNAL]  Ensure
required length of iw field.

";

%feature("docstring") casadi::Rootfinder::oracle "[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::Rootfinder::alloc_res "[INTERNAL]  Ensure
required length of res field.

";

%feature("docstring") casadi::Rootfinder::tang_mx "[INTERNAL]  Tangent
expression.

";

%feature("docstring") casadi::Rootfinder::simple "[INTERNAL]  Evaluate
numerically, simplied syntax.

";

%feature("docstring") casadi::Rootfinder::grad_mx "[INTERNAL]  Gradient
expression.

";

%feature("docstring") casadi::Rootfinder::call_reverse "[INTERNAL]  Reverse
mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Rootfinder::addShorthand "[INTERNAL]
Generate shorthand macro.

";

%feature("docstring") casadi::Rootfinder::~Rootfinder "[INTERNAL]
Destructor.

";

%feature("docstring") casadi::Rootfinder::jac_mx "[INTERNAL]  Jacobian
expression.

";

%feature("docstring") casadi::Rootfinder::n_in "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::Rootfinder::has_sprev "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Rootfinder::adjViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::Rootfinder::print_option "[INTERNAL]  Print
all information there is to know about a certain option.

";

%feature("docstring") casadi::Rootfinder::release "[INTERNAL]  Release a
memory object.

";

%feature("docstring") casadi::Rootfinder::set_jac_sparsity "[INTERNAL]
Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Rootfinder::sp_fwd "[INTERNAL]  Propagate
sparsity forward.

";

%feature("docstring") casadi::Rootfinder::getAdaptorSolverName "[INTERNAL]
Obtain solver name from Adaptor.

";

%feature("docstring") casadi::Rootfinder::alloc_w "[INTERNAL]  Ensure
required length of w field.

";

%feature("docstring") casadi::Rootfinder::codegen_decref "[INTERNAL]
Codegen decref for dependencies.

";

%feature("docstring") casadi::Rootfinder::free_memory "[INTERNAL]  Free
memory block.

";

%feature("docstring") casadi::Rootfinder::alloc "[INTERNAL]  Ensure work
vectors long enough to evaluate function.

";

%feature("docstring") casadi::Rootfinder::codegen_name "[INTERNAL]  Get
name in codegen.

";

%feature("docstring") casadi::Rootfinder "

Internal class.

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| common_options   | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | auto-generated   | nction           |
|                  |                 | functions        |                  |
+------------------+-----------------+------------------+------------------+
| constraints      | OT_INTVECTOR    | Constrain the    | casadi::Rootfind |
|                  |                 | unknowns. 0      | er               |
|                  |                 | (default): no    |                  |
|                  |                 | constraint on    |                  |
|                  |                 | ui, 1: ui >=     |                  |
|                  |                 | 0.0, -1: ui <=   |                  |
|                  |                 | 0.0, 2: ui >     |                  |
|                  |                 | 0.0, -2: ui <    |                  |
|                  |                 | 0.0.             |                  |
+------------------+-----------------+------------------+------------------+
| implicit_input   | OT_INT          | Index of the     | casadi::Rootfind |
|                  |                 | input that       | er               |
|                  |                 | corresponds to   |                  |
|                  |                 | the actual root- |                  |
|                  |                 | finding          |                  |
+------------------+-----------------+------------------+------------------+
| implicit_output  | OT_INT          | Index of the     | casadi::Rootfind |
|                  |                 | output that      | er               |
|                  |                 | corresponds to   |                  |
|                  |                 | the actual root- |                  |
|                  |                 | finding          |                  |
+------------------+-----------------+------------------+------------------+
| jacobian_functio | OT_FUNCTION     | Function object  | casadi::Rootfind |
| n                |                 | for calculating  | er               |
|                  |                 | the Jacobian     |                  |
|                  |                 | (autogenerated   |                  |
|                  |                 | by default)      |                  |
+------------------+-----------------+------------------+------------------+
| linear_solver    | OT_STRING       | User-defined     | casadi::Rootfind |
|                  |                 | linear solver    | er               |
|                  |                 | class. Needed    |                  |
|                  |                 | for              |                  |
|                  |                 | sensitivities.   |                  |
+------------------+-----------------+------------------+------------------+
| linear_solver_op | OT_DICT         | Options to be    | casadi::Rootfind |
| tions            |                 | passed to the    | er               |
|                  |                 | linear solver.   |                  |
+------------------+-----------------+------------------+------------------+
| monitor          | OT_STRINGVECTOR | Set of user      | casadi::OracleFu |
|                  |                 | problem          | nction           |
|                  |                 | functions to be  |                  |
|                  |                 | monitored        |                  |
+------------------+-----------------+------------------+------------------+
| specific_options | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | specific auto-   | nction           |
|                  |                 | generated        |                  |
|                  |                 | functions,       |                  |
|                  |                 | overwriting the  |                  |
|                  |                 | defaults from    |                  |
|                  |                 | common_options.  |                  |
|                  |                 | Nested           |                  |
|                  |                 | dictionary.      |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: rootfinder_impl.hpp ";

%feature("docstring") casadi::Rootfinder::mapsum_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::Rootfinder::checkArg "[INTERNAL]  Check if
input arguments have correct length and dimensions.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::Rootfinder::sx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Rootfinder::fwdViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::Rootfinder::get_n_out "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::Rootfinder::hasFullJacobian "[INTERNAL]
Return Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Rootfinder::which_depends "[INTERNAL]  Which
variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::Rootfinder::tang_sx "[INTERNAL]  Tangent
expression.

";

%feature("docstring") casadi::Rootfinder::gradient "[INTERNAL]  Return
gradient function.

";

%feature("docstring") casadi::Rootfinder::log "

>  void casadi::FunctionInternal::log(const std::string &msg) const 
------------------------------------------------------------------------
[INTERNAL] 
Log the status of the solver.

>  void casadi::FunctionInternal::log(const std::string &fcn, const std::string &msg) const 
------------------------------------------------------------------------
[INTERNAL] 
Log the status of the solver, function given.

";

%feature("docstring") casadi::Rootfinder::getJacSparsityGen "[INTERNAL]
Get the sparsity pattern, forward mode.

";

%feature("docstring") casadi::Rootfinder::hess_sx "[INTERNAL]  Hessian
expression.

";

%feature("docstring") casadi::Rootfinder::hasDerivative "[INTERNAL]  Can
derivatives be calculated in any way?

";

%feature("docstring") casadi::Rootfinder::getAtomicInput "[INTERNAL]  Get
the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::Rootfinder::setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";

%feature("docstring") casadi::Rootfinder::print "[INTERNAL]  Print.

";

%feature("docstring") casadi::Rootfinder::numel_out "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::Rootfinder::replaceFwdSeed "[INTERNAL]
Replace 0-by-0 forward seeds.

";

%feature("docstring") casadi::Rootfinder::signature "[INTERNAL]  Code
generate the function.

";

%feature("docstring") casadi::Rootfinder::jit_dependencies "[INTERNAL]  JIT
for dependencies.

";

%feature("docstring") casadi::Rootfinder::type_name "[INTERNAL]  Get type
name.

";

%feature("docstring") casadi::Rootfinder::_eval "

>  void casadi::FunctionInternal::_eval(const double **arg, double **res, int *iw, double *w, int mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate numerically.

>  void casadi::FunctionInternal::_eval(const SXElem **arg, SXElem **res, int *iw, SXElem *w, int mem) const

>  void casadi::FunctionInternal::_eval(const bvec_t **arg, bvec_t **res, int *iw, bvec_t *w, int mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

%feature("docstring") casadi::Rootfinder::getJacSparsity "[INTERNAL]
Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Rootfinder::ad_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::Rootfinder::getJacSparsityHierarchical "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::Rootfinder::tangent "[INTERNAL]  Return
tangent function.

";

%feature("docstring") casadi::Rootfinder::getFullJacobian "[INTERNAL]
Return Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Rootfinder::print_fstats "[INTERNAL]  Print
statistics.

";

%feature("docstring") casadi::Rootfinder::call_forward "[INTERNAL]  Forward
mode AD, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Rootfinder::create_function "[INTERNAL]
Create an oracle function

";

%feature("docstring") casadi::Rootfinder::size2_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::Rootfinder::nnz_in "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::Rootfinder::fullJacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Rootfinder::get_sparsity_in "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Rootfinder::sparsity_in "[INTERNAL]  Get
sparsity of a given input.

";

%feature("docstring") casadi::Rootfinder::sz_res "[INTERNAL]  Get required
length of res field.

";

%feature("docstring") casadi::Rootfinder::addDependency "[INTERNAL]  Add a
dependent function.

";

%feature("docstring") casadi::Rootfinder::plugin_name "[INTERNAL] ";

%feature("docstring") casadi::Rootfinder::map_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::Rootfinder::print_free "[INTERNAL]  Print
free variables.

";

%feature("docstring") casadi::Rootfinder::checkRes "[INTERNAL]  Check if
output arguments have correct length and dimensions.

";

%feature("docstring") casadi::Rootfinder::generateMeta "[INTERNAL]
Generate meta-information allowing a user to evaluate a generated function.

";

%feature("docstring") casadi::Rootfinder::getAtomicInputReal "[INTERNAL]
Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::Rootfinder::checkout "[INTERNAL]  Checkout a
memory object.

";

%feature("docstring") casadi::Rootfinder::_get_stats "[INTERNAL]  Get all
statistics

";

%feature("docstring") casadi::Rootfinder::eval_mx "[INTERNAL]  Evaluate
with symbolic matrices.

";

%feature("docstring") casadi::Rootfinder::has_function "[INTERNAL] ";

%feature("docstring") casadi::Rootfinder::mx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Rootfinder::getTangent "[INTERNAL]  Return
tangent function.

";

%feature("docstring") casadi::Rootfinder::get_stats "[INTERNAL]  Get all
statistics.

";

%feature("docstring") casadi::Rootfinder::size1_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::Rootfinder::getAtomicOutput "[INTERNAL]  Get
the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::Rootfinder::grad_sx "[INTERNAL]  Gradient
expression.

";

%feature("docstring") casadi::Rootfinder::getAtomicOperation "[INTERNAL]
Get an atomic operation operator index.

";

%feature("docstring") casadi::Rootfinder::has_codegen "[INTERNAL]  Is
codegen supported?

";

%feature("docstring") casadi::Rootfinder::size_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::Rootfinder::sz_arg "[INTERNAL]  Get required
length of arg field.

";

%feature("docstring") casadi::Rootfinder::get_n_forward "[INTERNAL]
Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::Rootfinder::size2_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::Rootfinder::getJacSparsityHierarchicalSymm "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::Rootfinder::jac_sx "[INTERNAL]  Jacobian
expression.

";

%feature("docstring") casadi::Rootfinder::repr "[INTERNAL]  Print.

";

%feature("docstring") casadi::Rootfinder::generateFunction "[INTERNAL]
Generate code the function.

";

%feature("docstring") casadi::Rootfinder::index_in "[INTERNAL]  Get input
scheme index by name.

";

%feature("docstring") casadi::Rootfinder::_set_temp "[INTERNAL]  Set the
(temporary) work vectors.

";

%feature("docstring") casadi::Rootfinder::has_spfwd "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Rootfinder::name "[INTERNAL]  Name of the
function.

";

%feature("docstring") casadi::Rootfinder::get_forward "[INTERNAL]  Generate
a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::Rootfinder::set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::Rootfinder::sz_w "[INTERNAL]  Get required
length of w field.

";

%feature("docstring") casadi::Rootfinder::set_temp "[INTERNAL]  Set the
work vectors.

";

%feature("docstring") casadi::Rootfinder::get_options "[INTERNAL]  Options.

";

%feature("docstring") casadi::Rootfinder::symbolicFwdSeed "[INTERNAL]
Symbolic expressions for the forward seeds.

";

%feature("docstring") casadi::Rootfinder::factory "[INTERNAL] ";

%feature("docstring") casadi::Rootfinder::print_options "[INTERNAL]  Print
list of options.

";

%feature("docstring") casadi::Rootfinder::hessian "[INTERNAL]  Return
Hessian function.

";

%feature("docstring") casadi::Rootfinder::sparsity_out "[INTERNAL]  Get
sparsity of a given output.

";

%feature("docstring") casadi::Rootfinder::eval "[INTERNAL]  Evaluate
numerically.

";

%feature("docstring") casadi::Rootfinder::name_in "[INTERNAL]  Get input
scheme name by index.

";

%feature("docstring") casadi::Rootfinder::eval_forward "[INTERNAL]  Create
call to (cached) derivative function, forward mode.

";

%feature("docstring") casadi::Rootfinder::eval_name "[INTERNAL]  Get name
of the evaluation function.

";

%feature("docstring") casadi::Rootfinder::matchingRes "[INTERNAL]  Check if
output arguments that needs to be replaced.

";

%feature("docstring") casadi::Rootfinder::generate_dependencies "[INTERNAL]
Export / Generate C code for the generated functions.

";

%feature("docstring") casadi::Rootfinder::get_reverse "[INTERNAL]  Generate
a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::Rootfinder::verbose "[INTERNAL]  Verbose
mode?

";

%feature("docstring") casadi::Rootfinder::eval_reverse "[INTERNAL]  Create
call to (cached) derivative function, reverse mode.

";

%feature("docstring") casadi::Rootfinder::getAlgorithmSize "[INTERNAL]  Get
the number of atomic operations.

";

%feature("docstring") casadi::Rootfinder::free_mx "[INTERNAL]  Get free
variables ( MX)

";

%feature("docstring") casadi::Rootfinder::getJacobian "[INTERNAL]  Return
Jacobian function.

";

%feature("docstring") casadi::Rootfinder::mx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Rootfinder::getPartition "[INTERNAL]  Get the
unidirectional or bidirectional partition.

";


// File: classcasadi_1_1RungeKutta.xml
%feature("docstring") casadi::RungeKutta::_set_temp "[INTERNAL]  Set the
(temporary) work vectors.

";

%feature("docstring") casadi::RungeKutta::rx "[INTERNAL] ";

%feature("docstring") casadi::RungeKutta::rz "[INTERNAL] ";

%feature("docstring") casadi::RungeKutta::getFullJacobian "[INTERNAL]
Return Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::RungeKutta::~RungeKutta "[INTERNAL]
Destructor.

";

%feature("docstring") casadi::RungeKutta::generate_dependencies "[INTERNAL]
Export / Generate C code for the generated functions.

";

%feature("docstring") casadi::RungeKutta::rq "[INTERNAL] ";

%feature("docstring") casadi::RungeKutta::rp "[INTERNAL] ";

%feature("docstring") casadi::RungeKutta::jit_dependencies "[INTERNAL]  JIT
for dependencies.

";

%feature("docstring") casadi::RungeKutta::sz_arg "[INTERNAL]  Get required
length of arg field.

";

%feature("docstring") casadi::RungeKutta::aug_fwd "[INTERNAL]  Generate a
augmented DAE system with nfwd forward sensitivities.

";

%feature("docstring") casadi::RungeKutta::get_n_forward "[INTERNAL]
Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::RungeKutta::sparsity_out "[INTERNAL]  Get
sparsity of a given output.

";

%feature("docstring") casadi::RungeKutta::mapsum_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::RungeKutta::_setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";

%feature("docstring") casadi::RungeKutta::getAtomicOutput "[INTERNAL]  Get
the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::RungeKutta::has_spfwd "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::RungeKutta::grad_sx "[INTERNAL]  Gradient
expression.

";

%feature("docstring") casadi::RungeKutta::size2_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::RungeKutta::setJacobian "[INTERNAL]  Return
Jacobian function.

";

%feature("docstring") casadi::RungeKutta::alloc_res "[INTERNAL]  Ensure
required length of res field.

";

%feature("docstring") casadi::RungeKutta::memory "[INTERNAL]  Memory
objects.

";

%feature("docstring") casadi::RungeKutta::expand "[INTERNAL] ";

%feature("docstring") casadi::RungeKutta::replaceRes "[INTERNAL]  Replace
0-by-0 outputs.

";

%feature("docstring") casadi::RungeKutta::replaceAdjSeed "[INTERNAL]
Replace 0-by-0 reverse seeds.

";

%feature("docstring") casadi::RungeKutta::print_stats "[INTERNAL]  Print
solver statistics.

";

%feature("docstring") casadi::RungeKutta::symbolicAdjSeed "[INTERNAL]
Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::RungeKutta::setStopTime "[INTERNAL]  Set stop
time for the integration.

";

%feature("docstring") casadi::RungeKutta::nnz_in "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::RungeKutta::sz_w "[INTERNAL]  Get required
length of w field.

";

%feature("docstring") casadi::RungeKutta::get_n_in "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::RungeKutta::free_mx "[INTERNAL]  Get free
variables ( MX)

";

%feature("docstring") casadi::RungeKutta::n_mem "[INTERNAL]  Maximum number
of memory objects.

";

%feature("docstring") casadi::RungeKutta::numel_in "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::RungeKutta::self "[INTERNAL]  Get a public
class instance.

";

%feature("docstring") casadi::RungeKutta::log "

>  void casadi::FunctionInternal::log(const std::string &msg) const 
------------------------------------------------------------------------
[INTERNAL] 
Log the status of the solver.

>  void casadi::FunctionInternal::log(const std::string &fcn, const std::string &msg) const 
------------------------------------------------------------------------
[INTERNAL] 
Log the status of the solver, function given.

";

%feature("docstring") casadi::RungeKutta::index_in "[INTERNAL]  Get input
scheme index by name.

";

%feature("docstring") casadi::RungeKutta::getExplicit "[INTERNAL]  Get
explicit dynamics.

";

%feature("docstring") casadi::RungeKutta::generateDeclarations "[INTERNAL]
Generate code for the declarations of the C function.

";

%feature("docstring") casadi::RungeKutta::generateMeta "[INTERNAL]
Generate meta-information allowing a user to evaluate a generated function.

";

%feature("docstring") casadi::RungeKutta::get_name_in "[INTERNAL]  Names of
function input and outputs.

";

%feature("docstring") casadi::RungeKutta::getAlgorithmSize "[INTERNAL]  Get
the number of atomic operations.

";

%feature("docstring") casadi::RungeKutta::reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::RungeKutta::eval_sx "[INTERNAL]  Evaluate
with symbolic scalars.

";

%feature("docstring") casadi::RungeKutta::sp_jac_rdae "[INTERNAL]  Create
sparsity pattern of the extended Jacobian (backward problem)

";

%feature("docstring") casadi::RungeKutta::codegen_name "[INTERNAL]  Get
name in codegen.

";

%feature("docstring") casadi::RungeKutta::p "[INTERNAL] ";

%feature("docstring") casadi::RungeKutta::q "[INTERNAL] ";

%feature("docstring") casadi::RungeKutta::t "[INTERNAL] ";

%feature("docstring") casadi::RungeKutta::jac_sx "[INTERNAL]  Jacobian
expression.

";

%feature("docstring") casadi::RungeKutta::z "[INTERNAL] ";

%feature("docstring") casadi::RungeKutta::mx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::RungeKutta::x "[INTERNAL] ";

%feature("docstring") casadi::RungeKutta::get_function "[INTERNAL] ";

%feature("docstring") casadi::RungeKutta::set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::RungeKutta::release "[INTERNAL]  Release a
memory object.

";

%feature("docstring") casadi::RungeKutta::size_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::RungeKutta::getHessian "[INTERNAL]  Return
Hessian function.

";

%feature("docstring") casadi::RungeKutta::factory "[INTERNAL] ";

%feature("docstring") casadi::RungeKutta::free_memory "[INTERNAL]  Free
memory block.

";

%feature("docstring") casadi::RungeKutta::alloc "[INTERNAL]  Ensure work
vectors long enough to evaluate function.

";

%feature("docstring") casadi::RungeKutta::wrap "[INTERNAL]  Wrap in an
Function instance consisting of only one MX call.

";

%feature("docstring") casadi::RungeKutta::size1_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::RungeKutta::init_memory "[INTERNAL]
Initalize memory block.

";

%feature("docstring") casadi::RungeKutta::getGradient "[INTERNAL]  Return
gradient function.

";

%feature("docstring") casadi::RungeKutta::matchingRes "[INTERNAL]  Check if
output arguments that needs to be replaced.

";

%feature("docstring") casadi::RungeKutta::finalize "[INTERNAL]  Finalize
initialization.

";

%feature("docstring") casadi::RungeKutta::verbose "[INTERNAL]  Verbose
mode?

";

%feature("docstring") casadi::RungeKutta::jac_mx "[INTERNAL]  Jacobian
expression.

";

%feature("docstring") casadi::RungeKutta::create_function "[INTERNAL]
Create an oracle function

";

%feature("docstring") casadi::RungeKutta::get_forward "[INTERNAL]  Generate
a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::RungeKutta::symbolicFwdSeed "[INTERNAL]
Symbolic expressions for the forward seeds.

";

%feature("docstring") casadi::RungeKutta::generate_lifted "[INTERNAL]
Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::RungeKutta::free_sx "[INTERNAL]  Get free
variables (SX)

";

%feature("docstring") casadi::RungeKutta::generateFunction "[INTERNAL]
Generate code the function.

";

%feature("docstring") casadi::RungeKutta::map_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::RungeKutta::repr "[INTERNAL]  Print.

";

%feature("docstring") casadi::RungeKutta::alloc_arg "[INTERNAL]  Ensure
required length of arg field.

";

%feature("docstring") casadi::RungeKutta::getAtomicOperation "[INTERNAL]
Get an atomic operation operator index.

";

%feature("docstring") casadi::RungeKutta::replaceFwdSeed "[INTERNAL]
Replace 0-by-0 forward seeds.

";

%feature("docstring") casadi::RungeKutta::getJacSparsity "[INTERNAL]
Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::RungeKutta::adjViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::RungeKutta::type_name "[INTERNAL]  Get type
name.

";

%feature("docstring") casadi::RungeKutta::sp_rev "[INTERNAL]  Propagate
sparsity backwards.

";

%feature("docstring") casadi::RungeKutta::index_out "[INTERNAL]  Get output
scheme index by name.

";

%feature("docstring") casadi::RungeKutta::getDerivativeOptions "[INTERNAL]
Set solver specific options to generated augmented integrators.

";

%feature("docstring") casadi::RungeKutta::sp_fwd "[INTERNAL]  Propagate
sparsity forward.

";

%feature("docstring") casadi::RungeKutta::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::RungeKutta::getTangent "[INTERNAL]  Return
tangent function.

";

%feature("docstring") casadi::RungeKutta::tangent "[INTERNAL]  Return
tangent function.

";

%feature("docstring") casadi::RungeKutta::_call "[INTERNAL]   Call a
function, overloaded.

";

%feature("docstring") casadi::RungeKutta::sp_jac_dae "[INTERNAL]  Create
sparsity pattern of the extended Jacobian (forward problem)

";

%feature("docstring") casadi::RungeKutta::print_fstats "[INTERNAL]  Print
statistics.

";

%feature("docstring") casadi::RungeKutta::call_forward "[INTERNAL]  Forward
mode AD, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::RungeKutta::ad_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::RungeKutta::tang_sx "[INTERNAL]  Tangent
expression.

";

%feature("docstring") casadi::RungeKutta::sparsity_jac "[INTERNAL]  Get, if
necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::RungeKutta::hessian "[INTERNAL]  Return
Hessian function.

";

%feature("docstring") casadi::RungeKutta::size2_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::RungeKutta::setupFG "[INTERNAL]  Setup F and
G.

";

%feature("docstring") casadi::RungeKutta::forward "[INTERNAL]  Return
function that calculates forward derivatives forward(nfwd) returns a cached
instance if available, and calls  Function get_forward(int nfwd) if no
cached version is available.

";

%feature("docstring") casadi::RungeKutta::grad_mx "[INTERNAL]  Gradient
expression.

";

%feature("docstring") casadi::RungeKutta::sz_iw "[INTERNAL]  Get required
length of iw field.

";

%feature("docstring") casadi::RungeKutta::size1_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::RungeKutta::get_n_reverse "[INTERNAL]
Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::RungeKutta::checkArg "[INTERNAL]  Check if
input arguments have correct length and dimensions.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::RungeKutta::setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";

%feature("docstring") casadi::RungeKutta::alloc_w "[INTERNAL]  Ensure
required length of w field.

";

%feature("docstring") casadi::RungeKutta::retreat "[INTERNAL]  Retreat
solution in time.

";

%feature("docstring") casadi::RungeKutta::codegen_decref "[INTERNAL]
Codegen decref for dependencies.

";

%feature("docstring") casadi::RungeKutta::mx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::RungeKutta::addShorthand "[INTERNAL]
Generate shorthand macro.

";

%feature("docstring") casadi::RungeKutta::getWorkSize "[INTERNAL]  Get the
length of the work vector.

";

%feature("docstring") casadi::RungeKutta::advance "[INTERNAL]  Advance
solution in time.

";

%feature("docstring") casadi::RungeKutta::getAtomicInput "[INTERNAL]  Get
the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::RungeKutta::replaceArg "[INTERNAL]  Replace
0-by-0 inputs.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::RungeKutta::sx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::RungeKutta::which_depends "[INTERNAL]  Which
variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::RungeKutta::alloc_memory "[INTERNAL]  Create
memory block.

";

%feature("docstring") casadi::RungeKutta::getJacSparsityHierarchical "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::RungeKutta::n_in "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::RungeKutta::print_options "[INTERNAL]  Print
list of options.

";

%feature("docstring") casadi::RungeKutta::checkout "[INTERNAL]  Checkout a
memory object.

";

%feature("docstring") casadi::RungeKutta "[INTERNAL]  'rk' plugin for
Integrator

Fixed-step explicit Runge-Kutta integrator for ODEs Currently implements
RK4.

The method is still under development

Joel Andersson

C++ includes: runge_kutta.hpp ";

%feature("docstring") casadi::RungeKutta::n_nodes "[INTERNAL]  Number of
nodes in the algorithm.

";

%feature("docstring") casadi::RungeKutta::getJacSparsityGen "[INTERNAL]
Get the sparsity pattern, forward mode.

";

%feature("docstring") casadi::RungeKutta::get_sparsity_in "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::RungeKutta::sx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::RungeKutta::tang_mx "[INTERNAL]  Tangent
expression.

";

%feature("docstring") casadi::RungeKutta::sp_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode, sparsity propagation.

";

%feature("docstring") casadi::RungeKutta::getPartition "[INTERNAL]  Get the
unidirectional or bidirectional partition.

";

%feature("docstring") casadi::RungeKutta::hasFullJacobian "[INTERNAL]
Return Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::RungeKutta::hasDerivative "[INTERNAL]  Can
derivatives be calculated in any way?

";

%feature("docstring") casadi::RungeKutta::jacobian "[INTERNAL]  Return
Jacobian function.

";

%feature("docstring") casadi::RungeKutta::numel_out "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::RungeKutta::nnz_out "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::RungeKutta::sz_res "[INTERNAL]  Get required
length of res field.

";

%feature("docstring") casadi::RungeKutta::oracle "[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::RungeKutta::_get_stats "[INTERNAL]  Get all
statistics

";

%feature("docstring") casadi::RungeKutta::checkInputs "[INTERNAL]  Check if
the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::RungeKutta::generateBody "[INTERNAL]
Generate code for the function body.

";

%feature("docstring") casadi::RungeKutta::codegen_incref "[INTERNAL]
Codegen incref for dependencies.

";

%feature("docstring") casadi::RungeKutta::clear_memory "[INTERNAL]  Clear
all memory (called from destructor)

";

%feature("docstring") casadi::RungeKutta::set_function "[INTERNAL]
Register the function for evaluation and statistics gathering

";

%feature("docstring") casadi::RungeKutta::getExplicitB "[INTERNAL]  Get
explicit dynamics (backward problem)

";

%feature("docstring") casadi::RungeKutta::set_temp "[INTERNAL]  Set the
work vectors.

";

%feature("docstring") casadi::RungeKutta::checkRes "[INTERNAL]  Check if
output arguments have correct length and dimensions.

";

%feature("docstring") casadi::RungeKutta::set_jac_sparsity "[INTERNAL]
Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::RungeKutta::n_out "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::RungeKutta::get_name_out "[INTERNAL]  Names
of function input and outputs.

";

%feature("docstring") casadi::RungeKutta::RungeKutta "[INTERNAL]
Constructor.

";

%feature("docstring") casadi::RungeKutta::sz_work "[INTERNAL]  Get number
of temporary variables needed.

";

%feature("docstring") casadi::RungeKutta::getJacobian "[INTERNAL]  Return
Jacobian function.

";

%feature("docstring") casadi::RungeKutta::get_options "[INTERNAL]  Options.

";

%feature("docstring") casadi::RungeKutta::slice "[INTERNAL]  returns a new
function with a selection of inputs/outputs of the original

";

%feature("docstring") casadi::RungeKutta::get_n_out "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::RungeKutta::_set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::RungeKutta::monitored "[INTERNAL] ";

%feature("docstring") casadi::RungeKutta::signature "[INTERNAL]  Code
generate the function.

";

%feature("docstring") casadi::RungeKutta::print_option "[INTERNAL]  Print
all information there is to know about a certain option.

";

%feature("docstring") casadi::RungeKutta::hess_sx "[INTERNAL]  Hessian
expression.

";

%feature("docstring") casadi::RungeKutta::print_dimensions "[INTERNAL]
Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::RungeKutta::_eval "

>  void casadi::FunctionInternal::_eval(const double **arg, double **res, int *iw, double *w, int mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate numerically.

>  void casadi::FunctionInternal::_eval(const SXElem **arg, SXElem **res, int *iw, SXElem *w, int mem) const

>  void casadi::FunctionInternal::_eval(const bvec_t **arg, bvec_t **res, int *iw, bvec_t *w, int mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

%feature("docstring") casadi::RungeKutta::sparsity_in "[INTERNAL]  Get
sparsity of a given input.

";

%feature("docstring") casadi::RungeKutta::fwdViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::RungeKutta::getAdaptorSolverName "[INTERNAL]
Obtain solver name from Adaptor.

";

%feature("docstring") casadi::RungeKutta::name "[INTERNAL]  Name of the
function.

";

%feature("docstring") casadi::RungeKutta::has_sprev "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::RungeKutta::addDependency "[INTERNAL]  Add a
dependent function.

";

%feature("docstring") casadi::RungeKutta::resetB "[INTERNAL]  Reset the
backward problem and take time to tf.

";

%feature("docstring") casadi::RungeKutta::print_free "[INTERNAL]  Print
free variables.

";

%feature("docstring") casadi::RungeKutta::alloc_iw "[INTERNAL]  Ensure
required length of iw field.

";

%feature("docstring") casadi::RungeKutta::eval_mx "[INTERNAL]  Evaluate
with symbolic matrices.

";

%feature("docstring") casadi::RungeKutta::simple "[INTERNAL]  Evaluate
numerically, simplied syntax.

";

%feature("docstring") casadi::RungeKutta::eval "[INTERNAL]  evaluate

";

%feature("docstring") casadi::RungeKutta::calc_function "[INTERNAL] ";

%feature("docstring") casadi::RungeKutta::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::RungeKutta::eval_name "[INTERNAL]  Get name
of the evaluation function.

";

%feature("docstring") casadi::RungeKutta::is_a "[INTERNAL]  Check if the
function is of a particular type.

";

%feature("docstring") casadi::RungeKutta::get_reverse "[INTERNAL]  Generate
a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::RungeKutta::gradient "[INTERNAL]  Return
gradient function.

";

%feature("docstring") casadi::RungeKutta::name_out "[INTERNAL]  Get output
scheme name by index.

";

%feature("docstring") casadi::RungeKutta::getAtomicInputReal "[INTERNAL]
Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::RungeKutta::reset "[INTERNAL]  Reset the
forward problem.

";

%feature("docstring") casadi::RungeKutta::name_in "[INTERNAL]  Get input
scheme name by index.

";

%feature("docstring") casadi::RungeKutta::fullJacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::RungeKutta::init "[INTERNAL]  Initialize
stage.

";

%feature("docstring") casadi::RungeKutta::get_sparsity_out "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::RungeKutta::has_function "[INTERNAL] ";

%feature("docstring") casadi::RungeKutta::has_free "[INTERNAL]  Does the
function have free variables.

";

%feature("docstring") casadi::RungeKutta::simplifiedCall "[INTERNAL]  Use
simplified signature.

";

%feature("docstring") casadi::RungeKutta::size_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::RungeKutta::get_stats "[INTERNAL]  Get all
statistics.

";

%feature("docstring") casadi::RungeKutta::aug_adj "[INTERNAL]  Generate a
augmented DAE system with nadj adjoint sensitivities.

";

%feature("docstring") casadi::RungeKutta::matchingArg "[INTERNAL]  Check if
input arguments that needs to be replaced.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::RungeKutta::call "[INTERNAL]   Call a
function, templated.

";

%feature("docstring") casadi::RungeKutta::plugin_name "[INTERNAL] ";

%feature("docstring") casadi::RungeKutta::has_codegen "[INTERNAL]  Is
codegen supported?

";

%feature("docstring") casadi::RungeKutta::default_in "[INTERNAL]  Get
default input value.

";

%feature("docstring") casadi::RungeKutta::construct "[INTERNAL]  Construct
Prepares the function for evaluation.

";

%feature("docstring") casadi::RungeKutta::getJacSparsityHierarchicalSymm "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::RungeKutta::symbolicOutput "[INTERNAL]  Get a
vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::RungeKutta::call_reverse "[INTERNAL]  Reverse
mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::RungeKutta::print "[INTERNAL]  Print.

";


// File: classcasadi_1_1Scpgen.xml
%feature("docstring") casadi::Scpgen::getWorkSize "[INTERNAL]  Get the
length of the work vector.

";

%feature("docstring") casadi::Scpgen::setJacobian "[INTERNAL]  Return
Jacobian function.

";

%feature("docstring") casadi::Scpgen::get_name_in "[INTERNAL]  Names of
function input and outputs.

";

%feature("docstring") casadi::Scpgen::free_mx "[INTERNAL]  Get free
variables ( MX)

";

%feature("docstring") casadi::Scpgen::getFullJacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Scpgen::which_depends "[INTERNAL]  Which
variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::Scpgen::primalInfeasibility "[INTERNAL] ";

%feature("docstring") casadi::Scpgen::getAtomicOperation "[INTERNAL]  Get
an atomic operation operator index.

";

%feature("docstring") casadi::Scpgen::create_function "[INTERNAL]  Create
an oracle function

";

%feature("docstring") casadi::Scpgen::set_function "[INTERNAL]  Register
the function for evaluation and statistics gathering

";

%feature("docstring") casadi::Scpgen::symbolicOutput "[INTERNAL]  Get a
vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::Scpgen::size1_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Scpgen::eval_vec "[INTERNAL] ";

%feature("docstring") casadi::Scpgen::size1_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Scpgen::eval_res "[INTERNAL] ";

%feature("docstring") casadi::Scpgen::generateDeclarations "[INTERNAL]
Generate code for the declarations of the C function.

";

%feature("docstring") casadi::Scpgen::symbolicAdjSeed "[INTERNAL]  Symbolic
expressions for the adjoint seeds.

";

%feature("docstring") casadi::Scpgen::ad_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::Scpgen::sp_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode, sparsity propagation.

";

%feature("docstring") casadi::Scpgen::print "[INTERNAL]  Print.

";

%feature("docstring") casadi::Scpgen::signature "[INTERNAL]  Code generate
the function.

";

%feature("docstring") casadi::Scpgen::alloc_w "[INTERNAL]  Ensure required
length of w field.

";

%feature("docstring") casadi::Scpgen::alloc_res "[INTERNAL]  Ensure
required length of res field.

";

%feature("docstring") casadi::Scpgen::replaceArg "[INTERNAL]  Replace
0-by-0 inputs.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::Scpgen::eval_mat "[INTERNAL] ";

%feature("docstring") casadi::Scpgen::getAdaptorSolverName "[INTERNAL]
Obtain solver name from Adaptor.

";

%feature("docstring") casadi::Scpgen::generateBody "[INTERNAL]  Generate
code for the function body.

";

%feature("docstring") casadi::Scpgen::fwdViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::Scpgen::addDependency "[INTERNAL]  Add a
dependent function.

";

%feature("docstring") casadi::Scpgen::getReducedHessian "[INTERNAL] ";

%feature("docstring") casadi::Scpgen::repr "[INTERNAL]  Print.

";

%feature("docstring") casadi::Scpgen::mapsum_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::Scpgen::checkArg "[INTERNAL]  Check if input
arguments have correct length and dimensions.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::Scpgen::mx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Scpgen::expand "[INTERNAL] ";

%feature("docstring") casadi::Scpgen::get_reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::Scpgen::numel_out "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::Scpgen::oracle "[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::Scpgen::getAlgorithmSize "[INTERNAL]  Get the
number of atomic operations.

";

%feature("docstring") casadi::Scpgen::set_temp "[INTERNAL]  Set the work
vectors.

";

%feature("docstring") casadi::Scpgen::matchingArg "[INTERNAL]  Check if
input arguments that needs to be replaced.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::Scpgen::print_free "[INTERNAL]  Print free
variables.

";

%feature("docstring") casadi::Scpgen::memory "[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::Scpgen::jac_sx "[INTERNAL]  Jacobian
expression.

";

%feature("docstring") casadi::Scpgen::tang_mx "[INTERNAL]  Tangent
expression.

";

%feature("docstring") casadi::Scpgen::call "[INTERNAL]   Call a function,
templated.

";

%feature("docstring") casadi::Scpgen::Scpgen "[INTERNAL] ";

%feature("docstring") casadi::Scpgen::alloc "[INTERNAL]  Ensure work
vectors long enough to evaluate function.

";

%feature("docstring") casadi::Scpgen::generateMeta "[INTERNAL]  Generate
meta-information allowing a user to evaluate a generated function.

";

%feature("docstring") casadi::Scpgen::finalize "[INTERNAL]  Finalize
initialization.

";

%feature("docstring") casadi::Scpgen::hess_sx "[INTERNAL]  Hessian
expression.

";

%feature("docstring") casadi::Scpgen::get_n_out "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::Scpgen::nnz_out "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::Scpgen::sp_fwd "[INTERNAL]  Propagate
sparsity forward.

";

%feature("docstring") casadi::Scpgen::integer_support "[INTERNAL]  Can
discrete variables be treated.

";

%feature("docstring") casadi::Scpgen::size2_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Scpgen::simple "[INTERNAL]  Evaluate
numerically, simplied syntax.

";

%feature("docstring") casadi::Scpgen::release "[INTERNAL]  Release a memory
object.

";

%feature("docstring") casadi::Scpgen::reverse "[INTERNAL]  Return function
that calculates adjoint derivatives reverse(nadj) returns a cached instance
if available, and calls  Function get_reverse(int nadj) if no cached version
is available.

";

%feature("docstring") casadi::Scpgen::set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::Scpgen::checkInputs "

>  virtual void casadi::Nlpsol::checkInputs(void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Check if the inputs correspond to a well-posed problem.

>  virtual void casadi::FunctionInternal::checkInputs() const 
------------------------------------------------------------------------
[INTERNAL] 
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::Scpgen::map_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::Scpgen::_get_stats "[INTERNAL]  Get all
statistics

";

%feature("docstring") casadi::Scpgen::simplifiedCall "[INTERNAL]  Use
simplified signature.

";

%feature("docstring") casadi::Scpgen::call_reverse "[INTERNAL]  Reverse
mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Scpgen::self "[INTERNAL]  Get a public class
instance.

";

%feature("docstring") casadi::Scpgen::sz_iw "[INTERNAL]  Get required
length of iw field.

";

%feature("docstring") casadi::Scpgen::sx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Scpgen::get_forward "[INTERNAL]  Return
function that calculates forward derivatives forward(nfwd) returns a cached
instance if available, and calls  Function get_forward(int nfwd) if no
cached version is available.

";

%feature("docstring") casadi::Scpgen::free_memory "[INTERNAL]  Free memory
block.

";

%feature("docstring") casadi::Scpgen::tangent "[INTERNAL]  Return tangent
function.

";

%feature("docstring") casadi::Scpgen::getAtomicInput "[INTERNAL]  Get the
(integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::Scpgen::print_options "[INTERNAL]  Print list
of options.

";

%feature("docstring") casadi::Scpgen::getJacSparsity "[INTERNAL]  Generate
the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Scpgen::eval_sx "[INTERNAL]  Evaluate with
symbolic scalars.

";

%feature("docstring") casadi::Scpgen::alloc_arg "[INTERNAL]  Ensure
required length of arg field.

";

%feature("docstring") casadi::Scpgen::size_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Scpgen::default_in "[INTERNAL]  Get default
input value.

";

%feature("docstring") casadi::Scpgen::name_in "[INTERNAL]  Get input scheme
name by index.

";

%feature("docstring") casadi::Scpgen::hessian "[INTERNAL]  Return Hessian
function.

";

%feature("docstring") casadi::Scpgen::log "

>  void casadi::FunctionInternal::log(const std::string &msg) const 
------------------------------------------------------------------------
[INTERNAL] 
Log the status of the solver.

>  void casadi::FunctionInternal::log(const std::string &fcn, const std::string &msg) const 
------------------------------------------------------------------------
[INTERNAL] 
Log the status of the solver, function given.

";

%feature("docstring") casadi::Scpgen::symbolicFwdSeed "[INTERNAL]  Symbolic
expressions for the forward seeds.

";

%feature("docstring") casadi::Scpgen::numel_in "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::Scpgen::has_spfwd "[INTERNAL]  Is the class
able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Scpgen::solve "[INTERNAL] ";

%feature("docstring") casadi::Scpgen::mx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Scpgen::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::Scpgen::dualInfeasibility "[INTERNAL] ";

%feature("docstring") casadi::Scpgen::addShorthand "[INTERNAL]  Generate
shorthand macro.

";

%feature("docstring") casadi::Scpgen::get_n_reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::Scpgen::index_out "[INTERNAL]  Get output
scheme index by name.

";

%feature("docstring") casadi::Scpgen::slice "[INTERNAL]  returns a new
function with a selection of inputs/outputs of the original

";

%feature("docstring") casadi::Scpgen::solve_qp "[INTERNAL] ";

%feature("docstring") casadi::Scpgen::free_sx "[INTERNAL]  Get free
variables (SX)

";

%feature("docstring") casadi::Scpgen::print_option "[INTERNAL]  Print all
information there is to know about a certain option.

";

%feature("docstring") casadi::Scpgen::replaceAdjSeed "[INTERNAL]  Replace
0-by-0 reverse seeds.

";

%feature("docstring") casadi::Scpgen::sparsity_in "[INTERNAL]  Get sparsity
of a given input.

";

%feature("docstring") casadi::Scpgen::eval_exp "[INTERNAL] ";

%feature("docstring") casadi::Scpgen::sp_rev "[INTERNAL]  Propagate
sparsity backwards.

";

%feature("docstring") casadi::Scpgen::checkout "[INTERNAL]  Checkout a
memory object.

";

%feature("docstring") casadi::Scpgen::has_codegen "[INTERNAL]  Is codegen
supported?

";

%feature("docstring") casadi::Scpgen::type_name "[INTERNAL]  Get type name.

";

%feature("docstring") casadi::Scpgen::regularize "[INTERNAL] ";

%feature("docstring") casadi::Scpgen::index_in "[INTERNAL]  Get input
scheme index by name.

";

%feature("docstring") casadi::Scpgen::_set_temp "[INTERNAL]  Set the
(temporary) work vectors.

";

%feature("docstring") casadi::Scpgen::eval_mx "[INTERNAL]  Evaluate with
symbolic matrices.

";

%feature("docstring") casadi::Scpgen::_setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";

%feature("docstring") casadi::Scpgen::name "[INTERNAL]  Name of the
function.

";

%feature("docstring") casadi::Scpgen::has_sprev "[INTERNAL]  Is the class
able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Scpgen::wrap "[INTERNAL]  Wrap in an Function
instance consisting of only one MX call.

";

%feature("docstring") casadi::Scpgen::sz_work "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") casadi::Scpgen::forward "[INTERNAL]  Return function
that calculates forward derivatives forward(nfwd) returns a cached instance
if available, and calls  Function get_forward(int nfwd) if no cached version
is available.

";

%feature("docstring") casadi::Scpgen::print_dimensions "[INTERNAL]  Print
dimensions of inputs and outputs.

";

%feature("docstring") casadi::Scpgen::get_options "[INTERNAL]  Options.

";

%feature("docstring") casadi::Scpgen::size2_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Scpgen::get_name_out "[INTERNAL]  Names of
function input and outputs.

";

%feature("docstring") casadi::Scpgen::n_in "[INTERNAL]  Number of function
inputs and outputs.

";

%feature("docstring") casadi::Scpgen::jacobian "[INTERNAL]  Return Jacobian
function.

";

%feature("docstring") casadi::Scpgen::adjViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::Scpgen::init_memory "[INTERNAL]  Initalize
memory block.

";

%feature("docstring") casadi::Scpgen::sx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Scpgen::grad_sx "[INTERNAL]  Gradient
expression.

";

%feature("docstring") casadi::Scpgen::codegen_decref "[INTERNAL]  Codegen
decref for dependencies.

";

%feature("docstring") casadi::Scpgen::call_forward "[INTERNAL]  Forward
mode AD, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Scpgen::getJacSparsityHierarchicalSymm "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::Scpgen::get_sparsity_in "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Scpgen::get_sparsity_out "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Scpgen::has_free "[INTERNAL]  Does the
function have free variables.

";

%feature("docstring") casadi::Scpgen::generate_dependencies "[INTERNAL]
Export / Generate C code for the generated functions.

";

%feature("docstring") casadi::Scpgen::monitored "[INTERNAL] ";

%feature("docstring") casadi::Scpgen::get_function "[INTERNAL] ";

%feature("docstring") casadi::Scpgen::_eval "

>  void casadi::FunctionInternal::_eval(const double **arg, double **res, int *iw, double *w, int mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate numerically.

>  void casadi::FunctionInternal::_eval(const SXElem **arg, SXElem **res, int *iw, SXElem *w, int mem) const

>  void casadi::FunctionInternal::_eval(const bvec_t **arg, bvec_t **res, int *iw, bvec_t *w, int mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

%feature("docstring") casadi::Scpgen::print_fstats "[INTERNAL]  Print
statistics.

";

%feature("docstring") casadi::Scpgen::gradient "[INTERNAL]  Return gradient
function.

";

%feature("docstring") casadi::Scpgen::setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";

%feature("docstring") casadi::Scpgen::sparsity_out "[INTERNAL]  Get
sparsity of a given output.

";

%feature("docstring") casadi::Scpgen::getHessian "[INTERNAL]  Return
Hessian function.

";

%feature("docstring") casadi::Scpgen::eval "[INTERNAL]  Evaluate
numerically.

";

%feature("docstring") casadi::Scpgen::sparsity_jac "[INTERNAL]  Get, if
necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Scpgen::setOptionsFromFile "[INTERNAL]  Read
options from parameter xml.

";

%feature("docstring") casadi::Scpgen::n_mem "[INTERNAL]  Maximum number of
memory objects.

";

%feature("docstring") casadi::Scpgen::checkRes "[INTERNAL]  Check if output
arguments have correct length and dimensions.

";

%feature("docstring") casadi::Scpgen::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::Scpgen::codegen_incref "[INTERNAL]  Codegen
incref for dependencies.

";

%feature("docstring") casadi::Scpgen::sz_w "[INTERNAL]  Get required length
of w field.

";

%feature("docstring") casadi::Scpgen::jit_dependencies "[INTERNAL]  JIT for
dependencies.

";

%feature("docstring") casadi::Scpgen::size_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Scpgen::_set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::Scpgen::getAtomicOutput "[INTERNAL]  Get the
(integer) output argument of an atomic operation.

";

%feature("docstring") casadi::Scpgen::n_nodes "[INTERNAL]  Number of nodes
in the algorithm.

";

%feature("docstring") casadi::Scpgen::verbose "[INTERNAL]  Verbose mode?

";

%feature("docstring") casadi::Scpgen::getJacobian "[INTERNAL]  Return
Jacobian function.

";

%feature("docstring") casadi::Scpgen::eval_name "[INTERNAL]  Get name of
the evaluation function.

";

%feature("docstring") casadi::Scpgen::line_search "[INTERNAL] ";

%feature("docstring") casadi::Scpgen::alloc_memory "[INTERNAL]  Create
memory block.

";

%feature("docstring") casadi::Scpgen::_call "[INTERNAL]   Call a function,
overloaded.

";

%feature("docstring") casadi::Scpgen::alloc_iw "[INTERNAL]  Ensure required
length of iw field.

";

%feature("docstring") casadi::Scpgen::generate_lifted "[INTERNAL]  Extract
the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::Scpgen::codegen_name "[INTERNAL]  Get name in
codegen.

";

%feature("docstring") casadi::Scpgen::replaceRes "[INTERNAL]  Replace
0-by-0 outputs.

";

%feature("docstring") casadi::Scpgen::hasFullJacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Scpgen::n_out "[INTERNAL]  Number of function
inputs and outputs.

";

%feature("docstring") casadi::Scpgen::getJacSparsityHierarchical "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::Scpgen::clear_memory "[INTERNAL]  Clear all
memory (called from destructor)

";

%feature("docstring") casadi::Scpgen::set_jac_sparsity "[INTERNAL]
Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Scpgen::get_stats "[INTERNAL]  Get all
statistics.

";

%feature("docstring") casadi::Scpgen::calc_function "[INTERNAL] ";

%feature("docstring") casadi::Scpgen::fullJacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Scpgen::tang_sx "[INTERNAL]  Tangent
expression.

";

%feature("docstring") casadi::Scpgen::is_a "[INTERNAL]  Check if the
function is of a particular type.

";

%feature("docstring") casadi::Scpgen::replaceFwdSeed "[INTERNAL]  Replace
0-by-0 forward seeds.

";

%feature("docstring") casadi::Scpgen::jac_mx "[INTERNAL]  Jacobian
expression.

";

%feature("docstring") casadi::Scpgen::getGradient "[INTERNAL]  Return
gradient function.

";

%feature("docstring") casadi::Scpgen::sz_res "[INTERNAL]  Get required
length of res field.

";

%feature("docstring") casadi::Scpgen::plugin_name "[INTERNAL] ";

%feature("docstring") casadi::Scpgen::getAtomicInputReal "[INTERNAL]  Get
the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::Scpgen::nnz_in "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::Scpgen::getTangent "[INTERNAL]  Return
tangent function.

";

%feature("docstring") casadi::Scpgen::init "[INTERNAL]  Initialize.

";

%feature("docstring") casadi::Scpgen::generateFunction "[INTERNAL]
Generate code the function.

";

%feature("docstring") casadi::Scpgen::name_out "[INTERNAL]  Get output
scheme name by index.

";

%feature("docstring") casadi::Scpgen::factory "[INTERNAL] ";

%feature("docstring") casadi::Scpgen::getPartition "[INTERNAL]  Get the
unidirectional or bidirectional partition.

";

%feature("docstring") casadi::Scpgen::sz_arg "[INTERNAL]  Get required
length of arg field.

";

%feature("docstring") casadi::Scpgen::grad_mx "[INTERNAL]  Gradient
expression.

";

%feature("docstring") casadi::Scpgen::construct "[INTERNAL]  Construct
Prepares the function for evaluation.

";

%feature("docstring") casadi::Scpgen "

'scpgen' plugin for Nlpsol

A structure-exploiting sequential quadratic programming (to be come
sequential convex programming) method for nonlinear programming.

>List of available options

+-----------------------+-----------------+--------------------------------+
|          Id           |      Type       |          Description           |
+=======================+=================+================================+
| beta                  | OT_DOUBLE       | Line-search parameter,         |
|                       |                 | restoration factor of stepsize |
+-----------------------+-----------------+--------------------------------+
| c1                    | OT_DOUBLE       | Armijo condition, coefficient  |
|                       |                 | of decrease in merit           |
+-----------------------+-----------------+--------------------------------+
| codegen               | OT_BOOL         | C-code generation              |
+-----------------------+-----------------+--------------------------------+
| hessian_approximation | OT_STRING       | gauss-newton|exact             |
+-----------------------+-----------------+--------------------------------+
| lbfgs_memory          | OT_INT          | Size of L-BFGS memory.         |
+-----------------------+-----------------+--------------------------------+
| max_iter              | OT_INT          | Maximum number of SQP          |
|                       |                 | iterations                     |
+-----------------------+-----------------+--------------------------------+
| max_iter_ls           | OT_INT          | Maximum number of linesearch   |
|                       |                 | iterations                     |
+-----------------------+-----------------+--------------------------------+
| merit_memsize         | OT_INT          | Size of memory to store        |
|                       |                 | history of merit function      |
|                       |                 | values                         |
+-----------------------+-----------------+--------------------------------+
| merit_start           | OT_DOUBLE       | Lower bound for the merit      |
|                       |                 | function parameter             |
+-----------------------+-----------------+--------------------------------+
| name_x                | OT_STRINGVECTOR | Names of the variables.        |
+-----------------------+-----------------+--------------------------------+
| print_header          | OT_BOOL         | Print the header with problem  |
|                       |                 | statistics                     |
+-----------------------+-----------------+--------------------------------+
| print_x               | OT_INTVECTOR    | Which variables to print.      |
+-----------------------+-----------------+--------------------------------+
| qpsol                 | OT_STRING       | The QP solver to be used by    |
|                       |                 | the SQP method                 |
+-----------------------+-----------------+--------------------------------+
| qpsol_options         | OT_DICT         | Options to be passed to the QP |
|                       |                 | solver                         |
+-----------------------+-----------------+--------------------------------+
| reg_threshold         | OT_DOUBLE       | Threshold for the              |
|                       |                 | regularization.                |
+-----------------------+-----------------+--------------------------------+
| regularize            | OT_BOOL         | Automatic regularization of    |
|                       |                 | Lagrange Hessian.              |
+-----------------------+-----------------+--------------------------------+
| tol_du                | OT_DOUBLE       | Stopping criterion for dual    |
|                       |                 | infeasability                  |
+-----------------------+-----------------+--------------------------------+
| tol_pr                | OT_DOUBLE       | Stopping criterion for primal  |
|                       |                 | infeasibility                  |
+-----------------------+-----------------+--------------------------------+
| tol_pr_step           | OT_DOUBLE       | Stopping criterion for the     |
|                       |                 | step size                      |
+-----------------------+-----------------+--------------------------------+
| tol_reg               | OT_DOUBLE       | Stopping criterion for         |
|                       |                 | regularization                 |
+-----------------------+-----------------+--------------------------------+

Joel Andersson, Attila Kozma and Joris Gillis

>List of available options

+-------------------+-----------------+-------------------+----------------+
|        Id         |      Type       |    Description    |    Used in     |
+===================+=================+===================+================+
| beta              | OT_DOUBLE       | Line-search       | casadi::Scpgen |
|                   |                 | parameter,        |                |
|                   |                 | restoration       |                |
|                   |                 | factor of         |                |
|                   |                 | stepsize          |                |
+-------------------+-----------------+-------------------+----------------+
| c1                | OT_DOUBLE       | Armijo condition, | casadi::Scpgen |
|                   |                 | coefficient of    |                |
|                   |                 | decrease in merit |                |
+-------------------+-----------------+-------------------+----------------+
| codegen           | OT_BOOL         | C-code generation | casadi::Scpgen |
+-------------------+-----------------+-------------------+----------------+
| discrete          | OT_BOOLVECTOR   | Indicates which   | casadi::Nlpsol |
|                   |                 | of the variables  |                |
|                   |                 | are discrete,     |                |
|                   |                 | i.e. integer-     |                |
|                   |                 | valued            |                |
+-------------------+-----------------+-------------------+----------------+
| eval_errors_fatal | OT_BOOL         | When errors occur | casadi::Nlpsol |
|                   |                 | during evaluation |                |
|                   |                 | of f,g,...,stop   |                |
|                   |                 | the iterations    |                |
+-------------------+-----------------+-------------------+----------------+
| expand            | OT_BOOL         | Replace MX with   | casadi::Nlpsol |
|                   |                 | SX expressions in |                |
|                   |                 | problem           |                |
|                   |                 | formulation       |                |
|                   |                 | [false]           |                |
+-------------------+-----------------+-------------------+----------------+
| hessian_approxima | OT_STRING       | gauss-            | casadi::Scpgen |
| tion              |                 | newton|exact      |                |
+-------------------+-----------------+-------------------+----------------+
| ignore_check_vec  | OT_BOOL         | If set to true,   | casadi::Nlpsol |
|                   |                 | the input shape   |                |
|                   |                 | of F will not be  |                |
|                   |                 | checked.          |                |
+-------------------+-----------------+-------------------+----------------+
| iteration_callbac | OT_FUNCTION     | A function that   | casadi::Nlpsol |
| k                 |                 | will be called at |                |
|                   |                 | each iteration    |                |
|                   |                 | with the solver   |                |
|                   |                 | as input. Check   |                |
|                   |                 | documentation of  |                |
|                   |                 | Callback .        |                |
+-------------------+-----------------+-------------------+----------------+
| iteration_callbac | OT_BOOL         | If set to true,   | casadi::Nlpsol |
| k_ignore_errors   |                 | errors thrown by  |                |
|                   |                 | iteration_callbac |                |
|                   |                 | k will be         |                |
|                   |                 | ignored.          |                |
+-------------------+-----------------+-------------------+----------------+
| iteration_callbac | OT_INT          | Only call the     | casadi::Nlpsol |
| k_step            |                 | callback function |                |
|                   |                 | every few         |                |
|                   |                 | iterations.       |                |
+-------------------+-----------------+-------------------+----------------+
| lbfgs_memory      | OT_INT          | Size of L-BFGS    | casadi::Scpgen |
|                   |                 | memory.           |                |
+-------------------+-----------------+-------------------+----------------+
| max_iter          | OT_INT          | Maximum number of | casadi::Scpgen |
|                   |                 | SQP iterations    |                |
+-------------------+-----------------+-------------------+----------------+
| max_iter_ls       | OT_INT          | Maximum number of | casadi::Scpgen |
|                   |                 | linesearch        |                |
|                   |                 | iterations        |                |
+-------------------+-----------------+-------------------+----------------+
| merit_memsize     | OT_INT          | Size of memory to | casadi::Scpgen |
|                   |                 | store history of  |                |
|                   |                 | merit function    |                |
|                   |                 | values            |                |
+-------------------+-----------------+-------------------+----------------+
| merit_start       | OT_DOUBLE       | Lower bound for   | casadi::Scpgen |
|                   |                 | the merit         |                |
|                   |                 | function          |                |
|                   |                 | parameter         |                |
+-------------------+-----------------+-------------------+----------------+
| name_x            | OT_STRINGVECTOR | Names of the      | casadi::Scpgen |
|                   |                 | variables.        |                |
+-------------------+-----------------+-------------------+----------------+
| print_header      | OT_BOOL         | Print the header  | casadi::Scpgen |
|                   |                 | with problem      |                |
|                   |                 | statistics        |                |
+-------------------+-----------------+-------------------+----------------+
| print_x           | OT_INTVECTOR    | Which variables   | casadi::Scpgen |
|                   |                 | to print.         |                |
+-------------------+-----------------+-------------------+----------------+
| qpsol             | OT_STRING       | The QP solver to  | casadi::Scpgen |
|                   |                 | be used by the    |                |
|                   |                 | SQP method        |                |
+-------------------+-----------------+-------------------+----------------+
| qpsol_options     | OT_DICT         | Options to be     | casadi::Scpgen |
|                   |                 | passed to the QP  |                |
|                   |                 | solver            |                |
+-------------------+-----------------+-------------------+----------------+
| reg_threshold     | OT_DOUBLE       | Threshold for the | casadi::Scpgen |
|                   |                 | regularization.   |                |
+-------------------+-----------------+-------------------+----------------+
| regularize        | OT_BOOL         | Automatic         | casadi::Scpgen |
|                   |                 | regularization of |                |
|                   |                 | Lagrange Hessian. |                |
+-------------------+-----------------+-------------------+----------------+
| tol_du            | OT_DOUBLE       | Stopping          | casadi::Scpgen |
|                   |                 | criterion for     |                |
|                   |                 | dual              |                |
|                   |                 | infeasability     |                |
+-------------------+-----------------+-------------------+----------------+
| tol_pr            | OT_DOUBLE       | Stopping          | casadi::Scpgen |
|                   |                 | criterion for     |                |
|                   |                 | primal            |                |
|                   |                 | infeasibility     |                |
+-------------------+-----------------+-------------------+----------------+
| tol_pr_step       | OT_DOUBLE       | Stopping          | casadi::Scpgen |
|                   |                 | criterion for the |                |
|                   |                 | step size         |                |
+-------------------+-----------------+-------------------+----------------+
| tol_reg           | OT_DOUBLE       | Stopping          | casadi::Scpgen |
|                   |                 | criterion for     |                |
|                   |                 | regularization    |                |
+-------------------+-----------------+-------------------+----------------+
| verbose_init      | OT_BOOL         | Print out timing  | casadi::Nlpsol |
|                   |                 | information about |                |
|                   |                 | the different     |                |
|                   |                 | stages of         |                |
|                   |                 | initialization    |                |
+-------------------+-----------------+-------------------+----------------+
| warn_initial_boun | OT_BOOL         | Warn if the       | casadi::Nlpsol |
| ds                |                 | initial guess     |                |
|                   |                 | does not satisfy  |                |
|                   |                 | LBX and UBX       |                |
+-------------------+-----------------+-------------------+----------------+

Diagrams
--------



C++ includes: scpgen.hpp ";

%feature("docstring") casadi::Scpgen::hasDerivative "[INTERNAL]  Can
derivatives be calculated in any way?

";

%feature("docstring") casadi::Scpgen::get_n_in "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::Scpgen::~Scpgen "[INTERNAL] ";

%feature("docstring") casadi::Scpgen::getConic "[INTERNAL]  Access qpsol.

";

%feature("docstring") casadi::Scpgen::getJacSparsityGen "[INTERNAL]  Get
the sparsity pattern, forward mode.

";

%feature("docstring") casadi::Scpgen::matchingRes "[INTERNAL]  Check if
output arguments that needs to be replaced.

";

%feature("docstring") casadi::Scpgen::has_function "[INTERNAL] ";

%feature("docstring") casadi::Scpgen::get_n_forward "[INTERNAL]  Return
function that calculates forward derivatives forward(nfwd) returns a cached
instance if available, and calls  Function get_forward(int nfwd) if no
cached version is available.

";

%feature("docstring") casadi::Scpgen::printIteration "[INTERNAL] ";


// File: classcasadi_1_1SetNonzeros.xml


// File: classcasadi_1_1SetNonzerosSlice.xml


// File: classcasadi_1_1SetNonzerosSlice2.xml


// File: classcasadi_1_1SetNonzerosVector.xml


// File: classcasadi_1_1SharedObject.xml
%feature("docstring") casadi::SharedObject::print "

Print a description of the object.

";

%feature("docstring") casadi::SharedObject::is_null "

Is a null pointer?

";

%feature("docstring") casadi::SharedObject::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::SharedObject::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::SharedObject "

SharedObject implements a reference counting framework similar for efficient
and easily-maintained memory management.

To use the class, both the SharedObject class (the public class), and the
SharedObjectInternal class (the internal class) must be inherited from. It
can be done in two different files and together with memory management, this
approach provides a clear distinction of which methods of the class are to
be considered \"public\", i.e. methods for public use that can be considered
to remain over time with small changes, and the internal memory.

When interfacing a software, which typically includes including some header
file, this is best done only in the file where the internal class is
defined, to avoid polluting the global namespace and other side effects.

The default constructor always means creating a null pointer to an internal
class only. To allocate an internal class (this works only when the internal
class isn't abstract), use the constructor with arguments.

The copy constructor and the assignment operator perform shallow copies
only, to make a deep copy you must use the clone method explicitly. This
will give a shared pointer instance.

In an inheritance hierarchy, you can cast down automatically, e.g. (
SXFunction is a child class of Function): SXFunction derived(...); Function
base = derived;

To cast up, use the shared_cast template function, which works analogously
to dynamic_cast, static_cast, const_cast etc, e.g.: SXFunction derived(...);
Function base = derived; SXFunction derived_from_base =
shared_cast<SXFunction>(base);

A failed shared_cast will result in a null pointer (cf. dynamic_cast)

Joel Andersson

C++ includes: shared_object.hpp ";

%feature("docstring") casadi::SharedObject::__hash__ "

Returns a number that is unique for a given Node. If the Object does not
point to any node, \"0\" is returned.

";

%feature("docstring") casadi::SharedObject::repr "

Print a representation of the object.

";

%feature("docstring") casadi::SharedObject::getDescription "

Return a string with a description (for SWIG)

";


// File: classcasadi_1_1ShellCompiler.xml
%feature("docstring") casadi::ShellCompiler::read_external "[INTERNAL]  Get
an external function declaration.

";

%feature("docstring") casadi::ShellCompiler::construct "[INTERNAL]
Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::ShellCompiler::to_text "[INTERNAL]  Get entry
as a text.

";

%feature("docstring") casadi::ShellCompiler::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::ShellCompiler::get_options "[INTERNAL]
Options.

";

%feature("docstring") casadi::ShellCompiler::~ShellCompiler "[INTERNAL]
Destructor.

";

%feature("docstring") casadi::ShellCompiler::get_function "[INTERNAL]  Get
a function pointer for numerical evaluation.

";

%feature("docstring") casadi::ShellCompiler::init "[INTERNAL]  Initialize.

";

%feature("docstring") casadi::ShellCompiler::get_meta "[INTERNAL]  Get
entry as a text.

";

%feature("docstring") casadi::ShellCompiler::has_function "[INTERNAL]  Get
a function pointer for numerical evaluation.

";

%feature("docstring") casadi::ShellCompiler::inlined "[INTERNAL] ";

%feature("docstring") casadi::ShellCompiler::body "[INTERNAL]  Get the
function body, if inlined.

";

%feature("docstring") casadi::ShellCompiler "

'shell' plugin for Importer

Joel Andersson  Interface to the JIT compiler SHELL

>List of available options

+----------------+-----------------+---------------------------------------+
|       Id       |      Type       |              Description              |
+================+=================+=======================================+
| cleanup        | OT_BOOL         | Cleanup temporary files when          |
|                |                 | unloading. Default: true              |
+----------------+-----------------+---------------------------------------+
| compiler       | OT_STRING       | Compiler command                      |
+----------------+-----------------+---------------------------------------+
| compiler_flags | OT_STRINGVECTOR | Alias for 'compiler_flags'            |
+----------------+-----------------+---------------------------------------+
| compiler_setup | OT_STRING       | Compiler setup command. Intended to   |
|                |                 | be fixed. The 'flag' option is the    |
|                |                 | prefered way to set custom flags.     |
+----------------+-----------------+---------------------------------------+
| flags          | OT_STRINGVECTOR | Compile flags for the JIT compiler.   |
|                |                 | Default: None                         |
+----------------+-----------------+---------------------------------------+
| folder         | OT_STRING       | Folder to put temporary objects in.   |
+----------------+-----------------+---------------------------------------+
| linker         | OT_STRING       | Linker command                        |
+----------------+-----------------+---------------------------------------+
| linker_flags   | OT_STRINGVECTOR | Linker flags for the JIT compiler.    |
|                |                 | Default: None                         |
+----------------+-----------------+---------------------------------------+
| linker_setup   | OT_STRING       | Linker setup command. Intended to be  |
|                |                 | fixed. The 'flag' option is the       |
|                |                 | prefered way to set custom flags.     |
+----------------+-----------------+---------------------------------------+

>List of available options

+----------------+-----------------+-------------------+-------------------+
|       Id       |      Type       |    Description    |      Used in      |
+================+=================+===================+===================+
| cleanup        | OT_BOOL         | Cleanup temporary | casadi::ShellComp |
|                |                 | files when        | iler              |
|                |                 | unloading.        |                   |
|                |                 | Default: true     |                   |
+----------------+-----------------+-------------------+-------------------+
| compiler       | OT_STRING       | Compiler command  | casadi::ShellComp |
|                |                 |                   | iler              |
+----------------+-----------------+-------------------+-------------------+
| compiler_flags | OT_STRINGVECTOR | Alias for         | casadi::ShellComp |
|                |                 | 'compiler_flags'  | iler              |
+----------------+-----------------+-------------------+-------------------+
| compiler_setup | OT_STRING       | Compiler setup    | casadi::ShellComp |
|                |                 | command. Intended | iler              |
|                |                 | to be fixed. The  |                   |
|                |                 | 'flag' option is  |                   |
|                |                 | the prefered way  |                   |
|                |                 | to set custom     |                   |
|                |                 | flags.            |                   |
+----------------+-----------------+-------------------+-------------------+
| flags          | OT_STRINGVECTOR | Compile flags for | casadi::ShellComp |
|                |                 | the JIT compiler. | iler              |
|                |                 | Default: None     |                   |
+----------------+-----------------+-------------------+-------------------+
| folder         | OT_STRING       | Folder to put     | casadi::ShellComp |
|                |                 | temporary objects | iler              |
|                |                 | in.               |                   |
+----------------+-----------------+-------------------+-------------------+
| linker         | OT_STRING       | Linker command    | casadi::ShellComp |
|                |                 |                   | iler              |
+----------------+-----------------+-------------------+-------------------+
| linker_flags   | OT_STRINGVECTOR | Linker flags for  | casadi::ShellComp |
|                |                 | the JIT compiler. | iler              |
|                |                 | Default: None     |                   |
+----------------+-----------------+-------------------+-------------------+
| linker_setup   | OT_STRING       | Linker setup      | casadi::ShellComp |
|                |                 | command. Intended | iler              |
|                |                 | to be fixed. The  |                   |
|                |                 | 'flag' option is  |                   |
|                |                 | the prefered way  |                   |
|                |                 | to set custom     |                   |
|                |                 | flags.            |                   |
+----------------+-----------------+-------------------+-------------------+
| verbose        | OT_BOOL         | Verbose           | casadi::ImporterI |
|                |                 | evaluation  for   | nternal           |
|                |                 | debugging         |                   |
+----------------+-----------------+-------------------+-------------------+

Diagrams
--------



C++ includes: shell_compiler.hpp ";

%feature("docstring") casadi::ShellCompiler::read_meta "[INTERNAL]  Get
meta information.

";

%feature("docstring") casadi::ShellCompiler::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::ShellCompiler::can_have_meta "[INTERNAL]  Can
meta information be read?

";

%feature("docstring") casadi::ShellCompiler::has_meta "[INTERNAL]  Does an
entry exist?

";

%feature("docstring") casadi::ShellCompiler::repr "[INTERNAL]  Print
representation.

";

%feature("docstring") casadi::ShellCompiler::plugin_name "[INTERNAL]  Get
name of plugin.

";

%feature("docstring") casadi::ShellCompiler::print "[INTERNAL]  Print.

";

%feature("docstring") casadi::ShellCompiler::ShellCompiler "[INTERNAL]
Constructor.

";


// File: classcasadi_1_1SimplifiedExternal.xml
%feature("docstring") casadi::SimplifiedExternal::hessian "[INTERNAL]
Return Hessian function.

";

%feature("docstring") casadi::SimplifiedExternal::get_sparsity_out "[INTERNAL]  Retreive sparsities.

";

%feature("docstring") casadi::SimplifiedExternal::get_stats "[INTERNAL]
Get all statistics

";

%feature("docstring") casadi::SimplifiedExternal::jac_sx "[INTERNAL]
Jacobian expression.

";

%feature("docstring") casadi::SimplifiedExternal::fullJacobian "[INTERNAL]
Return Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::SimplifiedExternal::mx_in "[INTERNAL]  Get
function input(s) and output(s)

";

%feature("docstring") casadi::SimplifiedExternal::sx_in "[INTERNAL]  Get
function input(s) and output(s)

";

%feature("docstring") casadi::SimplifiedExternal::grad_sx "[INTERNAL]
Gradient expression.

";

%feature("docstring") casadi::SimplifiedExternal::_call "[INTERNAL]   Call
a function, overloaded.

";

%feature("docstring") casadi::SimplifiedExternal::memory "[INTERNAL]
Memory objects.

";

%feature("docstring") casadi::SimplifiedExternal::symbolicOutput "[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::SimplifiedExternal::sparsity_in "[INTERNAL]
Get sparsity of a given input.

";

%feature("docstring") casadi::SimplifiedExternal::nnz_out "[INTERNAL]
Number of input/output nonzeros.

";

%feature("docstring") casadi::SimplifiedExternal::has_free "[INTERNAL]
Does the function have free variables.

";

%feature("docstring") casadi::SimplifiedExternal::alloc_res "[INTERNAL]
Ensure required length of res field.

";

%feature("docstring") casadi::SimplifiedExternal::generate_dependencies "[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring") casadi::SimplifiedExternal::print "[INTERNAL]  Print.

";

%feature("docstring") casadi::SimplifiedExternal::log "

>  void casadi::FunctionInternal::log(const std::string &msg) const 
------------------------------------------------------------------------
[INTERNAL] 
Log the status of the solver.

>  void casadi::FunctionInternal::log(const std::string &fcn, const std::string &msg) const 
------------------------------------------------------------------------
[INTERNAL] 
Log the status of the solver, function given.

";

%feature("docstring") casadi::SimplifiedExternal::generateDeclarations "[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring") casadi::SimplifiedExternal::size_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::SimplifiedExternal::getPartition "[INTERNAL]
Get the unidirectional or bidirectional partition.

";

%feature("docstring") casadi::SimplifiedExternal::replaceArg "[INTERNAL]
Replace 0-by-0 inputs.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::SimplifiedExternal::print_dimensions "[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::SimplifiedExternal::alloc_memory "[INTERNAL]
Create memory block.

";

%feature("docstring") casadi::SimplifiedExternal::getTangent "[INTERNAL]
Return tangent function.

";

%feature("docstring") casadi::SimplifiedExternal::getJacSparsityGen "[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring") casadi::SimplifiedExternal::size2_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::SimplifiedExternal::replaceRes "[INTERNAL]
Replace 0-by-0 outputs.

";

%feature("docstring") casadi::SimplifiedExternal::reverse "[INTERNAL]
Return function that calculates adjoint derivatives reverse(nadj) returns a
cached instance if available, and calls  Function get_reverse(int nadj) if
no cached version is available.

";

%feature("docstring") casadi::SimplifiedExternal::getAtomicInputReal "[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::SimplifiedExternal::alloc_arg "[INTERNAL]
Ensure required length of arg field.

";

%feature("docstring") casadi::SimplifiedExternal::self "[INTERNAL]  Get a
public class instance.

";

%feature("docstring") casadi::SimplifiedExternal::get_name_out "[INTERNAL]
Names of function input and outputs.

";

%feature("docstring") casadi::SimplifiedExternal::mx_out "[INTERNAL]  Get
function input(s) and output(s)

";

%feature("docstring") casadi::SimplifiedExternal::get_n_in "[INTERNAL]
Number of function inputs and outputs.

";

%feature("docstring") casadi::SimplifiedExternal::adjViaJac "[INTERNAL]
Calculate derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::SimplifiedExternal::n_nodes "[INTERNAL]
Number of nodes in the algorithm.

";

%feature("docstring") casadi::SimplifiedExternal::hasDerivative "[INTERNAL]
Can derivatives be calculated in any way?

";

%feature("docstring") casadi::SimplifiedExternal::numel_out "[INTERNAL]
Number of input/output elements.

";

%feature("docstring") casadi::SimplifiedExternal::generateFunction "[INTERNAL]  Generate code the function.

";

%feature("docstring") casadi::SimplifiedExternal::call_forward "[INTERNAL]
Forward mode AD, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::SimplifiedExternal::fwdViaJac "[INTERNAL]
Calculate derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::SimplifiedExternal::has_sprev "[INTERNAL]  Is
the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::SimplifiedExternal::oracle "[INTERNAL]  Get
oracle.

";

%feature("docstring") casadi::SimplifiedExternal::weak "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring") casadi::SimplifiedExternal::tangent "[INTERNAL]
Return tangent function.

";

%feature("docstring") casadi::SimplifiedExternal::_set_work "[INTERNAL]
Set the (persistent) work vectors.

";

%feature("docstring") casadi::SimplifiedExternal::jit_dependencies "[INTERNAL]   Jit dependencies.

";

%feature("docstring") casadi::SimplifiedExternal::get_forward "[INTERNAL]
Forward mode derivatives.

";

%feature("docstring") casadi::SimplifiedExternal "[INTERNAL] C++ includes:
external_impl.hpp ";

%feature("docstring") casadi::SimplifiedExternal::getAlgorithmSize "[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring") casadi::SimplifiedExternal::size_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::SimplifiedExternal::which_depends "[INTERNAL]
Which variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::SimplifiedExternal::verbose "[INTERNAL]
Verbose mode?

";

%feature("docstring") casadi::SimplifiedExternal::get_n_out "[INTERNAL]
Number of function inputs and outputs.

";

%feature("docstring") casadi::SimplifiedExternal::wrap "[INTERNAL]  Wrap in
an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::SimplifiedExternal::signature "[INTERNAL]
Code generate the function.

";

%feature("docstring") casadi::SimplifiedExternal::has_function "[INTERNAL]
";

%feature("docstring") casadi::SimplifiedExternal::SimplifiedExternal "[INTERNAL]  Constructor.

";

%feature("docstring") casadi::SimplifiedExternal::set_jac_sparsity "[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::SimplifiedExternal::jac_mx "[INTERNAL]
Jacobian expression.

";

%feature("docstring") casadi::SimplifiedExternal::eval_sx "[INTERNAL]
Evaluate with symbolic scalars.

";

%feature("docstring") casadi::SimplifiedExternal::hasFullJacobian "[INTERNAL]  Full Jacobian.

";

%feature("docstring") casadi::SimplifiedExternal::sz_work "[INTERNAL]  Get
number of temporary variables needed.

";

%feature("docstring") casadi::SimplifiedExternal::codegen_incref "[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring") casadi::SimplifiedExternal::has_codegen "[INTERNAL]
Is codegen supported?

";

%feature("docstring") casadi::SimplifiedExternal::getGradient "[INTERNAL]
Return gradient function.

";

%feature("docstring") casadi::SimplifiedExternal::print_free "[INTERNAL]
Print free variables.

";

%feature("docstring") casadi::SimplifiedExternal::getWorkSize "[INTERNAL]
Get the length of the work vector.

";

%feature("docstring") casadi::SimplifiedExternal::getFullJacobian "[INTERNAL]  Full Jacobian.

";

%feature("docstring") casadi::SimplifiedExternal::name_in "[INTERNAL]  Get
input scheme name by index.

";

%feature("docstring") casadi::SimplifiedExternal::ad_weight "[INTERNAL]
Weighting factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::SimplifiedExternal::sz_iw "[INTERNAL]  Get
required length of iw field.

";

%feature("docstring") casadi::SimplifiedExternal::finalize "[INTERNAL]
Finalize the object creation This function, which visits the class hierarchy
in reverse order is run after init() has been completed.

";

%feature("docstring") casadi::SimplifiedExternal::gradient "[INTERNAL]
Return gradient function.

";

%feature("docstring") casadi::SimplifiedExternal::symbolicFwdSeed "[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring") casadi::SimplifiedExternal::print_option "[INTERNAL]
Print all information there is to know about a certain option.

";

%feature("docstring") casadi::SimplifiedExternal::alloc "[INTERNAL]  Ensure
work vectors long enough to evaluate function.

";

%feature("docstring") casadi::SimplifiedExternal::tang_mx "[INTERNAL]
Tangent expression.

";

%feature("docstring") casadi::SimplifiedExternal::n_in "[INTERNAL]  Number
of function inputs and outputs.

";

%feature("docstring") casadi::SimplifiedExternal::n_mem "[INTERNAL]
Maximum number of memory objects.

";

%feature("docstring") casadi::SimplifiedExternal::hess_sx "[INTERNAL]
Hessian expression.

";

%feature("docstring") casadi::SimplifiedExternal::sp_rev "[INTERNAL]
Propagate sparsity backwards.

";

%feature("docstring") casadi::SimplifiedExternal::call_reverse "[INTERNAL]
Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::SimplifiedExternal::get_n_forward "[INTERNAL]
Forward mode derivatives.

";

%feature("docstring") casadi::SimplifiedExternal::init "[INTERNAL]
Initialize.

";

%feature("docstring") casadi::SimplifiedExternal::codegen_decref "[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring") casadi::SimplifiedExternal::_setup "[INTERNAL]  Set
the (persistent and temporary) work vectors.

";

%feature("docstring") casadi::SimplifiedExternal::sz_w "[INTERNAL]  Get
required length of w field.

";

%feature("docstring") casadi::SimplifiedExternal::addShorthand "[INTERNAL]
Generate shorthand macro.

";

%feature("docstring") casadi::SimplifiedExternal::generateBody "[INTERNAL]
Generate code for the function body.

";

%feature("docstring") casadi::SimplifiedExternal::alloc_w "[INTERNAL]
Ensure required length of w field.

";

%feature("docstring") casadi::SimplifiedExternal::call "[INTERNAL]   Call a
function, templated.

";

%feature("docstring") casadi::SimplifiedExternal::free_mx "[INTERNAL]  Get
free variables ( MX)

";

%feature("docstring") casadi::SimplifiedExternal::getAtomicInput "[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::SimplifiedExternal::release "[INTERNAL]
Release a memory object.

";

%feature("docstring") casadi::SimplifiedExternal::get_n_reverse "[INTERNAL]
Reverse mode derivatives.

";

%feature("docstring") casadi::SimplifiedExternal::index_out "[INTERNAL]
Get output scheme index by name.

";

%feature("docstring") casadi::SimplifiedExternal::replaceAdjSeed "[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring") casadi::SimplifiedExternal::eval_mx "[INTERNAL]
Evaluate with symbolic matrices.

";

%feature("docstring") casadi::SimplifiedExternal::eval_name "[INTERNAL]
Get name of the evaluation function.

";

%feature("docstring") casadi::SimplifiedExternal::getAdaptorSolverName "[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring") casadi::SimplifiedExternal::_get_stats "[INTERNAL]
Get all statistics

";

%feature("docstring") casadi::SimplifiedExternal::set_temp "[INTERNAL]  Set
the (temporary) work vectors.

";

%feature("docstring") casadi::SimplifiedExternal::simple "[INTERNAL]
Evaluate numerically, simplied syntax.

";

%feature("docstring") casadi::SimplifiedExternal::free_memory "[INTERNAL]
Free memory block.

";

%feature("docstring") casadi::SimplifiedExternal::init_memory "[INTERNAL]
Initalize memory block.

";

%feature("docstring") casadi::SimplifiedExternal::type_name "[INTERNAL]
Get type name.

";

%feature("docstring") casadi::SimplifiedExternal::generate_lifted "[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::SimplifiedExternal::sz_res "[INTERNAL]  Get
required length of res field.

";

%feature("docstring") casadi::SimplifiedExternal::map_mx "[INTERNAL]
Parallel evaluation.

";

%feature("docstring") casadi::SimplifiedExternal::sparsity_jac "[INTERNAL]
Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::SimplifiedExternal::free_sx "[INTERNAL]  Get
free variables (SX)

";

%feature("docstring") casadi::SimplifiedExternal::getAtomicOperation "[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring") casadi::SimplifiedExternal::construct "[INTERNAL]
Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::SimplifiedExternal::sp_fwd "[INTERNAL]
Propagate sparsity forward.

";

%feature("docstring") casadi::SimplifiedExternal::generateMeta "[INTERNAL]
Generate meta-information allowing a user to evaluate a generated function.

";

%feature("docstring") casadi::SimplifiedExternal::get_reverse "[INTERNAL]
Reverse mode derivatives.

";

%feature("docstring") casadi::SimplifiedExternal::jacobian "[INTERNAL]
Return Jacobian function.

";

%feature("docstring") casadi::SimplifiedExternal::checkRes "[INTERNAL]
Check if output arguments have correct length and dimensions.

";

%feature("docstring") casadi::SimplifiedExternal::_set_temp "[INTERNAL]
Set the (temporary) work vectors.

";

%feature("docstring") casadi::SimplifiedExternal::mapsum_mx "[INTERNAL]
Parallel evaluation.

";

%feature("docstring") casadi::SimplifiedExternal::get_name_in "[INTERNAL]
Names of function input and outputs.

";

%feature("docstring") casadi::SimplifiedExternal::getJacobian "[INTERNAL]
Return Jacobian function.

";

%feature("docstring") casadi::SimplifiedExternal::index_in "[INTERNAL]  Get
input scheme index by name.

";

%feature("docstring") casadi::SimplifiedExternal::getJacSparsity "[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::SimplifiedExternal::size2_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::SimplifiedExternal::_eval "

>  void casadi::FunctionInternal::_eval(const double **arg, double **res, int *iw, double *w, int mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate numerically.

>  void casadi::FunctionInternal::_eval(const SXElem **arg, SXElem **res, int *iw, SXElem *w, int mem) const

>  void casadi::FunctionInternal::_eval(const bvec_t **arg, bvec_t **res, int *iw, bvec_t *w, int mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

%feature("docstring") casadi::SimplifiedExternal::tang_sx "[INTERNAL]
Tangent expression.

";

%feature("docstring") casadi::SimplifiedExternal::replaceFwdSeed "[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring") casadi::SimplifiedExternal::matchingArg "[INTERNAL]
Check if input arguments that needs to be replaced.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::SimplifiedExternal::setup "[INTERNAL]  Set
the (persistent and temporary) work vectors.

";

%feature("docstring") casadi::SimplifiedExternal::get_sparsity_in "[INTERNAL]  Retreive sparsities.

";

%feature("docstring") casadi::SimplifiedExternal::addDependency "[INTERNAL]
Add a dependent function.

";

%feature("docstring") casadi::SimplifiedExternal::size1_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::SimplifiedExternal::grad_mx "[INTERNAL]
Gradient expression.

";

%feature("docstring") casadi::SimplifiedExternal::~SimplifiedExternal "[INTERNAL]  Destructor.

";

%feature("docstring")
casadi::SimplifiedExternal::getJacSparsityHierarchicalSymm "[INTERNAL]  A
flavor of getJacSparsity that does hierarchical block structure recognition
for symmetric Jacobians

";

%feature("docstring") casadi::SimplifiedExternal::codegen_name "[INTERNAL]
Get name in codegen.

";

%feature("docstring") casadi::SimplifiedExternal::size1_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::SimplifiedExternal::nnz_in "[INTERNAL]
Number of input/output nonzeros.

";

%feature("docstring") casadi::SimplifiedExternal::factory "[INTERNAL] ";

%feature("docstring") casadi::SimplifiedExternal::slice "[INTERNAL]
returns a new function with a selection of inputs/outputs of the original

";

%feature("docstring") casadi::SimplifiedExternal::set_work "[INTERNAL]  Set
the (persistent) work vectors.

";

%feature("docstring") casadi::SimplifiedExternal::sp_weight "[INTERNAL]
Weighting factor for chosing forward/reverse mode, sparsity propagation.

";

%feature("docstring") casadi::SimplifiedExternal::name_out "[INTERNAL]  Get
output scheme name by index.

";

%feature("docstring") casadi::SimplifiedExternal::simplifiedCall "[INTERNAL]  Use simplified signature.

";

%feature("docstring") casadi::SimplifiedExternal::has_spfwd "[INTERNAL]  Is
the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::SimplifiedExternal::getCount "[INTERNAL]  Get
the reference count.

";

%feature("docstring") casadi::SimplifiedExternal::checkInputs "[INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::SimplifiedExternal::getAtomicOutput "[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::SimplifiedExternal::alloc_iw "[INTERNAL]
Ensure required length of iw field.

";

%feature("docstring") casadi::SimplifiedExternal::getHessian "[INTERNAL]
Return Hessian function.

";

%feature("docstring") casadi::SimplifiedExternal::checkArg "[INTERNAL]
Check if input arguments have correct length and dimensions.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::SimplifiedExternal::eval "[INTERNAL]
Evaluate numerically.

";

%feature("docstring") casadi::SimplifiedExternal::getJacSparsityHierarchical
"[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::SimplifiedExternal::sx_out "[INTERNAL]  Get
function input(s) and output(s)

";

%feature("docstring") casadi::SimplifiedExternal::get_function "[INTERNAL]
";

%feature("docstring") casadi::SimplifiedExternal::name "[INTERNAL]  Name of
the function.

";

%feature("docstring") casadi::SimplifiedExternal::matchingRes "[INTERNAL]
Check if output arguments that needs to be replaced.

";

%feature("docstring") casadi::SimplifiedExternal::numel_in "[INTERNAL]
Number of input/output elements.

";

%feature("docstring") casadi::SimplifiedExternal::repr "[INTERNAL]  Print.

";

%feature("docstring") casadi::SimplifiedExternal::n_out "[INTERNAL]  Number
of function inputs and outputs.

";

%feature("docstring") casadi::SimplifiedExternal::default_in "[INTERNAL]
Get default input value.

";

%feature("docstring") casadi::SimplifiedExternal::forward "[INTERNAL]
Return function that calculates forward derivatives forward(nfwd) returns a
cached instance if available, and calls  Function get_forward(int nfwd) if
no cached version is available.

";

%feature("docstring") casadi::SimplifiedExternal::is_a "[INTERNAL]  Check
if the function is of a particular type.

";

%feature("docstring") casadi::SimplifiedExternal::sparsity_out "[INTERNAL]
Get sparsity of a given output.

";

%feature("docstring") casadi::SimplifiedExternal::setJacobian "[INTERNAL]
Return Jacobian function.

";

%feature("docstring") casadi::SimplifiedExternal::get_options "[INTERNAL]
Options.

";

%feature("docstring") casadi::SimplifiedExternal::symbolicAdjSeed "[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::SimplifiedExternal::checkout "[INTERNAL]
Checkout a memory object.

";

%feature("docstring") casadi::SimplifiedExternal::sz_arg "[INTERNAL]  Get
required length of arg field.

";

%feature("docstring") casadi::SimplifiedExternal::clear_memory "[INTERNAL]
Clear all memory (called from destructor)

";

%feature("docstring") casadi::SimplifiedExternal::print_options "[INTERNAL]
Print list of options.

";


// File: classcasadi_1_1Slice.xml
%feature("docstring") casadi::Slice::is_scalar "

Is the slice a scalar.

";

%feature("docstring") casadi::Slice::scalar "

Get scalar (if is_scalar)

";

%feature("docstring") casadi::Slice::print "

Print a description of the object.

";

%feature("docstring") casadi::Slice "

Class representing a Slice.

Note that Python or Octave do not need to use this class. They can just use
slicing utility from the host language ( M[0:6] in Python, M(1:7) )

C++ includes: slice.hpp ";

%feature("docstring") casadi::Slice::all "

>  std::vector<int> casadi::Slice::all(int len, bool ind1=false) const 
------------------------------------------------------------------------

Get a vector of indices.

>  std::vector<int> casadi::Slice::all(const Slice &outer, int len) const 
------------------------------------------------------------------------

Get a vector of indices (nested slice)

";

%feature("docstring") casadi::Slice::Slice "

>  casadi::Slice::Slice()
------------------------------------------------------------------------

Default constructor - all elements.

>  casadi::Slice::Slice(int i, bool ind1=false)
------------------------------------------------------------------------

A single element (explicit to avoid ambiguity with IM overload.

>  casadi::Slice::Slice(int start, int stop, int step=1)
------------------------------------------------------------------------

A slice.

";

%feature("docstring") casadi::Slice::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::Slice::repr "

Print a representation of the object.

";

%feature("docstring") casadi::Slice::getRepresentation "

Return a string with a representation (for SWIG)

";


// File: classcasadi_1_1SlicotDple.xml
%feature("docstring") casadi::SlicotDple::get_name_out "[INTERNAL]  Names
of function input and outputs.

";

%feature("docstring") casadi::SlicotDple::tangent "[INTERNAL]  Return
tangent function.

";

%feature("docstring") casadi::SlicotDple::n_mem "[INTERNAL]  Maximum number
of memory objects.

";

%feature("docstring") casadi::SlicotDple::init "[INTERNAL]  Initialize.

";

%feature("docstring") casadi::SlicotDple::size2_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::SlicotDple::simple "[INTERNAL]  Evaluate
numerically, simplied syntax.

";

%feature("docstring") casadi::SlicotDple::tang_mx "[INTERNAL]  Tangent
expression.

";

%feature("docstring") casadi::SlicotDple::set_temp "[INTERNAL]  Set the
(temporary) work vectors.

";

%feature("docstring") casadi::SlicotDple::replaceRes "[INTERNAL]  Replace
0-by-0 outputs.

";

%feature("docstring") casadi::SlicotDple::nnz_in "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::SlicotDple::size2_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::SlicotDple::oracle "[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::SlicotDple::getAtomicInput "[INTERNAL]  Get
the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::SlicotDple::sz_res "[INTERNAL]  Get required
length of res field.

";

%feature("docstring") casadi::SlicotDple::hasFullJacobian "[INTERNAL]
Return Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::SlicotDple::sp_rev "[INTERNAL]  Propagate
sparsity backwards.

";

%feature("docstring") casadi::SlicotDple::sp_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode, sparsity propagation.

";

%feature("docstring") casadi::SlicotDple::plugin_name "[INTERNAL] ";

%feature("docstring") casadi::SlicotDple::get_sparsity_in "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::SlicotDple::get_forward "[INTERNAL]  Generate
a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::SlicotDple::checkInputs "[INTERNAL]  Check if
the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::SlicotDple::eval_mx "[INTERNAL]  Evaluate
with symbolic matrices.

";

%feature("docstring") casadi::SlicotDple::get_n_in "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::SlicotDple::mx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::SlicotDple::grad_mx "[INTERNAL]  Gradient
expression.

";

%feature("docstring") casadi::SlicotDple::print_free "[INTERNAL]  Print
free variables.

";

%feature("docstring") casadi::SlicotDple::codegen_incref "[INTERNAL]
Codegen incref for dependencies.

";

%feature("docstring") casadi::SlicotDple::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::SlicotDple::index_out "[INTERNAL]  Get output
scheme index by name.

";

%feature("docstring") casadi::SlicotDple::replaceArg "[INTERNAL]  Replace
0-by-0 inputs.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::SlicotDple::mx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::SlicotDple::print_option "[INTERNAL]  Print
all information there is to know about a certain option.

";

%feature("docstring") casadi::SlicotDple::getAlgorithmSize "[INTERNAL]  Get
the number of atomic operations.

";

%feature("docstring") casadi::SlicotDple::sparsity_in "[INTERNAL]  Get
sparsity of a given input.

";

%feature("docstring") casadi::SlicotDple::alloc_memory "[INTERNAL]  Create
memory block.

";

%feature("docstring") casadi::SlicotDple::_eval "

>  void casadi::FunctionInternal::_eval(const double **arg, double **res, int *iw, double *w, int mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate numerically.

>  void casadi::FunctionInternal::_eval(const SXElem **arg, SXElem **res, int *iw, SXElem *w, int mem) const

>  void casadi::FunctionInternal::_eval(const bvec_t **arg, bvec_t **res, int *iw, bvec_t *w, int mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

%feature("docstring") casadi::SlicotDple::replaceAdjSeed "[INTERNAL]
Replace 0-by-0 reverse seeds.

";

%feature("docstring") casadi::SlicotDple::mapsum_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::SlicotDple::eval "[INTERNAL]  Evaluate
numerically.

";

%feature("docstring") casadi::SlicotDple::get_n_out "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::SlicotDple::fullJacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::SlicotDple::which_depends "[INTERNAL]  Which
variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::SlicotDple::ad_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::SlicotDple::SlicotDple "

>  casadi::SlicotDple::SlicotDple()
------------------------------------------------------------------------
[INTERNAL] 
Constructor.

>  casadi::SlicotDple::SlicotDple(const std::string &name, const SpDict &st)
------------------------------------------------------------------------
[INTERNAL] 
Constructor.

Parameters:
-----------

st:

Problem structure.

>  casadi::SlicotDple::SlicotDple(const SpDict &st)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::SlicotDple::setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";

%feature("docstring") casadi::SlicotDple::construct "[INTERNAL]  Construct
Prepares the function for evaluation.

";

%feature("docstring") casadi::SlicotDple::memory "[INTERNAL]  Memory
objects.

";

%feature("docstring") casadi::SlicotDple::_set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::SlicotDple::sz_w "[INTERNAL]  Get required
length of w field.

";

%feature("docstring") casadi::SlicotDple "

'slicot' plugin for Dple

An efficient solver for Discrete Periodic Lyapunov Equations using SLICOT

An efficient solver for Discrete Periodic Lyapunov Equations using SLICOT

Uses Periodic Schur Decomposition ('psd') and does not assume positive
definiteness. Based on Periodic Lyapunov equations: some applications and
new algorithms. Int. J. Control, vol. 67, pp. 69-87, 1997.

Overview of the method: J. Gillis Practical Methods for Approximate Robust
Periodic Optimal Control ofNonlinear Mechanical Systems, PhD Thesis,
KULeuven, 2015

>List of available options

+-----------------------+-----------+--------------------------------------+
|          Id           |   Type    |             Description              |
+=======================+===========+======================================+
| linear_solver         | OT_STRING | User-defined linear solver class.    |
|                       |           | Needed for sensitivities.            |
+-----------------------+-----------+--------------------------------------+
| linear_solver_options | OT_DICT   | Options to be passed to the linear   |
|                       |           | solver.                              |
+-----------------------+-----------+--------------------------------------+
| psd_num_zero          | OT_DOUBLE | Numerical zero used in Periodic      |
|                       |           | Schur decomposition with slicot.This |
|                       |           | option is needed when your systems   |
|                       |           | has Floquet multiplierszero or close |
|                       |           | to zero                              |
+-----------------------+-----------+--------------------------------------+

Joris Gillis

>List of available options

+--------------------+-----------+--------------------+--------------------+
|         Id         |   Type    |    Description     |      Used in       |
+====================+===========+====================+====================+
| const_dim          | OT_BOOL   | Assume constant    | casadi::Dple       |
|                    |           | dimension of P     |                    |
+--------------------+-----------+--------------------+--------------------+
| eps_unstable       | OT_DOUBLE | A margin for       | casadi::Dple       |
|                    |           | unstability        |                    |
|                    |           | detection          |                    |
+--------------------+-----------+--------------------+--------------------+
| error_unstable     | OT_BOOL   | Throw an exception | casadi::Dple       |
|                    |           | when it is         |                    |
|                    |           | detected that      |                    |
|                    |           | Product(A_i,       |                    |
|                    |           | i=N..1)has         |                    |
|                    |           | eigenvalues        |                    |
|                    |           | greater than       |                    |
|                    |           | 1-eps_unstable     |                    |
+--------------------+-----------+--------------------+--------------------+
| linear_solver      | OT_STRING | User-defined       | casadi::SlicotDple |
|                    |           | linear solver      |                    |
|                    |           | class. Needed for  |                    |
|                    |           | sensitivities.     |                    |
+--------------------+-----------+--------------------+--------------------+
| linear_solver_opti | OT_DICT   | Options to be      | casadi::SlicotDple |
| ons                |           | passed to the      |                    |
|                    |           | linear solver.     |                    |
+--------------------+-----------+--------------------+--------------------+
| pos_def            | OT_BOOL   | Assume P positive  | casadi::Dple       |
|                    |           | definite           |                    |
+--------------------+-----------+--------------------+--------------------+
| psd_num_zero       | OT_DOUBLE | Numerical zero     | casadi::SlicotDple |
|                    |           | used in Periodic   |                    |
|                    |           | Schur              |                    |
|                    |           | decomposition with |                    |
|                    |           | slicot.This option |                    |
|                    |           | is needed when     |                    |
|                    |           | your systems has   |                    |
|                    |           | Floquet            |                    |
|                    |           | multiplierszero or |                    |
|                    |           | close to zero      |                    |
+--------------------+-----------+--------------------+--------------------+

Diagrams
--------



C++ includes: slicot_dple.hpp ";

%feature("docstring") casadi::SlicotDple::map_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::SlicotDple::getJacSparsityHierarchical "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::SlicotDple::getAtomicOperation "[INTERNAL]
Get an atomic operation operator index.

";

%feature("docstring") casadi::SlicotDple::size1_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::SlicotDple::generateFunction "[INTERNAL]
Generate code the function.

";

%feature("docstring") casadi::SlicotDple::wrap "[INTERNAL]  Wrap in an
Function instance consisting of only one MX call.

";

%feature("docstring") casadi::SlicotDple::getGradient "[INTERNAL]  Return
gradient function.

";

%feature("docstring") casadi::SlicotDple::type_name "[INTERNAL]  Get type
name.

";

%feature("docstring") casadi::SlicotDple::signature "[INTERNAL]  Code
generate the function.

";

%feature("docstring") casadi::SlicotDple::checkout "[INTERNAL]  Checkout a
memory object.

";

%feature("docstring") casadi::SlicotDple::alloc_res "[INTERNAL]  Ensure
required length of res field.

";

%feature("docstring") casadi::SlicotDple::log "

>  void casadi::FunctionInternal::log(const std::string &msg) const 
------------------------------------------------------------------------
[INTERNAL] 
Log the status of the solver.

>  void casadi::FunctionInternal::log(const std::string &fcn, const std::string &msg) const 
------------------------------------------------------------------------
[INTERNAL] 
Log the status of the solver, function given.

";

%feature("docstring") casadi::SlicotDple::size_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::SlicotDple::generate_lifted "[INTERNAL]
Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::SlicotDple::sz_work "[INTERNAL]  Get number
of temporary variables needed.

";

%feature("docstring") casadi::SlicotDple::call "[INTERNAL]   Call a
function, templated.

";

%feature("docstring") casadi::SlicotDple::setJacobian "[INTERNAL]  Return
Jacobian function.

";

%feature("docstring") casadi::SlicotDple::sp_fwd "[INTERNAL]  Propagate
sparsity forward.

";

%feature("docstring") casadi::SlicotDple::simplifiedCall "[INTERNAL]  Use
simplified signature.

";

%feature("docstring") casadi::SlicotDple::eval_sx "[INTERNAL]  Evaluate
with symbolic scalars.

";

%feature("docstring") casadi::SlicotDple::hess_sx "[INTERNAL]  Hessian
expression.

";

%feature("docstring") casadi::SlicotDple::generateBody "[INTERNAL]
Generate code for the function body.

";

%feature("docstring") casadi::SlicotDple::alloc "[INTERNAL]  Ensure work
vectors long enough to evaluate function.

";

%feature("docstring") casadi::SlicotDple::n_nodes "[INTERNAL]  Number of
nodes in the algorithm.

";

%feature("docstring") casadi::SlicotDple::replaceFwdSeed "[INTERNAL]
Replace 0-by-0 forward seeds.

";

%feature("docstring") casadi::SlicotDple::_set_temp "[INTERNAL]  Set the
(temporary) work vectors.

";

%feature("docstring") casadi::SlicotDple::getJacSparsity "[INTERNAL]
Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::SlicotDple::repr "[INTERNAL]  Print.

";

%feature("docstring") casadi::SlicotDple::addDependency "[INTERNAL]  Add a
dependent function.

";

%feature("docstring") casadi::SlicotDple::matchingRes "[INTERNAL]  Check if
output arguments that needs to be replaced.

";

%feature("docstring") casadi::SlicotDple::free_memory "[INTERNAL]  Free
memory block.

";

%feature("docstring") casadi::SlicotDple::getJacobian "[INTERNAL]  Return
Jacobian function.

";

%feature("docstring") casadi::SlicotDple::getTangent "[INTERNAL]  Return
tangent function.

";

%feature("docstring") casadi::SlicotDple::_setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";

%feature("docstring") casadi::SlicotDple::jac_sx "[INTERNAL]  Jacobian
expression.

";

%feature("docstring") casadi::SlicotDple::getAtomicOutput "[INTERNAL]  Get
the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::SlicotDple::~SlicotDple "[INTERNAL]
Destructor.

";

%feature("docstring") casadi::SlicotDple::symbolicFwdSeed "[INTERNAL]
Symbolic expressions for the forward seeds.

";

%feature("docstring") casadi::SlicotDple::print "[INTERNAL]  Print.

";

%feature("docstring") casadi::SlicotDple::generateDeclarations "[INTERNAL]
Generate code for the declarations of the C function.

";

%feature("docstring") casadi::SlicotDple::getFullJacobian "[INTERNAL]
Return Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::SlicotDple::call_reverse "[INTERNAL]  Reverse
mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::SlicotDple::sz_arg "[INTERNAL]  Get required
length of arg field.

";

%feature("docstring") casadi::SlicotDple::name_out "[INTERNAL]  Get output
scheme name by index.

";

%feature("docstring") casadi::SlicotDple::symbolicOutput "[INTERNAL]  Get a
vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::SlicotDple::get_name_in "[INTERNAL]  Names of
function input and outputs.

";

%feature("docstring") casadi::SlicotDple::addShorthand "[INTERNAL]
Generate shorthand macro.

";

%feature("docstring") casadi::SlicotDple::jit_dependencies "[INTERNAL]
Jit dependencies.

";

%feature("docstring") casadi::SlicotDple::size1_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::SlicotDple::get_n_reverse "[INTERNAL]
Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::SlicotDple::codegen_name "[INTERNAL]  Get
name in codegen.

";

%feature("docstring") casadi::SlicotDple::get_options "[INTERNAL]  Options.

";

%feature("docstring") casadi::SlicotDple::nnz_out "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::SlicotDple::sx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::SlicotDple::sparsity_jac "[INTERNAL]  Get, if
necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::SlicotDple::clear_memory "[INTERNAL]  Clear
all memory (called from destructor)

";

%feature("docstring") casadi::SlicotDple::symbolicAdjSeed "[INTERNAL]
Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::SlicotDple::call_forward "[INTERNAL]  Forward
mode AD, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::SlicotDple::get_n_forward "[INTERNAL]
Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::SlicotDple::_call "[INTERNAL]   Call a
function, overloaded.

";

%feature("docstring") casadi::SlicotDple::get_sparsity_out "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::SlicotDple::has_free "[INTERNAL]  Does the
function have free variables.

";

%feature("docstring") casadi::SlicotDple::size_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::SlicotDple::eval_name "[INTERNAL]  Get name
of the evaluation function.

";

%feature("docstring") casadi::SlicotDple::checkRes "[INTERNAL]  Check if
output arguments have correct length and dimensions.

";

%feature("docstring") casadi::SlicotDple::get_function "[INTERNAL] ";

%feature("docstring") casadi::SlicotDple::sx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::SlicotDple::has_codegen "[INTERNAL]  Is
codegen supported?

";

%feature("docstring") casadi::SlicotDple::generateMeta "[INTERNAL]
Generate meta-information allowing a user to evaluate a generated function.

";

%feature("docstring") casadi::SlicotDple::print_dimensions "[INTERNAL]
Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::SlicotDple::hessian "[INTERNAL]  Return
Hessian function.

";

%feature("docstring") casadi::SlicotDple::fwdViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::SlicotDple::init_memory "[INTERNAL]
Initalize memory block.

";

%feature("docstring") casadi::SlicotDple::jac_mx "[INTERNAL]  Jacobian
expression.

";

%feature("docstring") casadi::SlicotDple::getAdaptorSolverName "[INTERNAL]
Obtain solver name from Adaptor.

";

%feature("docstring") casadi::SlicotDple::get_stats "[INTERNAL]  Get all
statistics

";

%feature("docstring") casadi::SlicotDple::verbose "[INTERNAL]  Verbose
mode?

";

%feature("docstring") casadi::SlicotDple::checkArg "[INTERNAL]  Check if
input arguments have correct length and dimensions.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::SlicotDple::release "[INTERNAL]  Release a
memory object.

";

%feature("docstring") casadi::SlicotDple::reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::SlicotDple::alloc_iw "[INTERNAL]  Ensure
required length of iw field.

";

%feature("docstring") casadi::SlicotDple::numel_out "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::SlicotDple::n_in "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::SlicotDple::generate_dependencies "[INTERNAL]
Export / Generate C code for the dependency function.

";

%feature("docstring") casadi::SlicotDple::getWorkSize "[INTERNAL]  Get the
length of the work vector.

";

%feature("docstring") casadi::SlicotDple::sz_iw "[INTERNAL]  Get required
length of iw field.

";

%feature("docstring") casadi::SlicotDple::getHessian "[INTERNAL]  Return
Hessian function.

";

%feature("docstring") casadi::SlicotDple::gradient "[INTERNAL]  Return
gradient function.

";

%feature("docstring") casadi::SlicotDple::finalize "[INTERNAL]  Finalize
the object creation This function, which visits the class hierarchy in
reverse order is run after init() has been completed.

";

%feature("docstring") casadi::SlicotDple::free_sx "[INTERNAL]  Get free
variables (SX)

";

%feature("docstring") casadi::SlicotDple::forward "[INTERNAL]  Return
function that calculates forward derivatives forward(nfwd) returns a cached
instance if available, and calls  Function get_forward(int nfwd) if no
cached version is available.

";

%feature("docstring") casadi::SlicotDple::name_in "[INTERNAL]  Get input
scheme name by index.

";

%feature("docstring") casadi::SlicotDple::getAtomicInputReal "[INTERNAL]
Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::SlicotDple::is_a "[INTERNAL]  Check if the
function is of a particular type.

";

%feature("docstring") casadi::SlicotDple::default_in "[INTERNAL]  Get
default input value.

";

%feature("docstring") casadi::SlicotDple::set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::SlicotDple::hasDerivative "[INTERNAL]  Can
derivatives be calculated in any way?

";

%feature("docstring") casadi::SlicotDple::adjViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::SlicotDple::getJacSparsityGen "[INTERNAL]
Get the sparsity pattern, forward mode.

";

%feature("docstring") casadi::SlicotDple::has_spfwd "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::SlicotDple::_get_stats "[INTERNAL]  Get all
statistics

";

%feature("docstring") casadi::SlicotDple::slice "[INTERNAL]  returns a new
function with a selection of inputs/outputs of the original

";

%feature("docstring") casadi::SlicotDple::alloc_w "[INTERNAL]  Ensure
required length of w field.

";

%feature("docstring") casadi::SlicotDple::jacobian "[INTERNAL]  Return
Jacobian function.

";

%feature("docstring") casadi::SlicotDple::tang_sx "[INTERNAL]  Tangent
expression.

";

%feature("docstring") casadi::SlicotDple::free_mx "[INTERNAL]  Get free
variables ( MX)

";

%feature("docstring") casadi::SlicotDple::getJacSparsityHierarchicalSymm "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::SlicotDple::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::SlicotDple::matchingArg "[INTERNAL]  Check if
input arguments that needs to be replaced.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::SlicotDple::grad_sx "[INTERNAL]  Gradient
expression.

";

%feature("docstring") casadi::SlicotDple::codegen_decref "[INTERNAL]
Codegen decref for dependencies.

";

%feature("docstring") casadi::SlicotDple::sparsity_out "[INTERNAL]  Get
sparsity of a given output.

";

%feature("docstring") casadi::SlicotDple::set_jac_sparsity "[INTERNAL]
Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::SlicotDple::getPartition "[INTERNAL]  Get the
unidirectional or bidirectional partition.

";

%feature("docstring") casadi::SlicotDple::print_options "[INTERNAL]  Print
list of options.

";

%feature("docstring") casadi::SlicotDple::index_in "[INTERNAL]  Get input
scheme index by name.

";

%feature("docstring") casadi::SlicotDple::self "[INTERNAL]  Get a public
class instance.

";

%feature("docstring") casadi::SlicotDple::numel_in "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::SlicotDple::name "[INTERNAL]  Name of the
function.

";

%feature("docstring") casadi::SlicotDple::has_sprev "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::SlicotDple::factory "[INTERNAL] ";

%feature("docstring") casadi::SlicotDple::n_out "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::SlicotDple::has_function "[INTERNAL] ";

%feature("docstring") casadi::SlicotDple::get_reverse "[INTERNAL]  Generate
a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::SlicotDple::alloc_arg "[INTERNAL]  Ensure
required length of arg field.

";


// File: classcasadi_1_1SlicotExpm.xml
%feature("docstring") casadi::SlicotExpm::gradient "[INTERNAL]  Return
gradient function.

";

%feature("docstring") casadi::SlicotExpm::hasDerivative "[INTERNAL]  Can
derivatives be calculated in any way?

";

%feature("docstring") casadi::SlicotExpm::get_n_reverse "[INTERNAL]
Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::SlicotExpm::memory "[INTERNAL]  Memory
objects.

";

%feature("docstring") casadi::SlicotExpm::type_name "[INTERNAL]  Get type
name.

";

%feature("docstring") casadi::SlicotExpm::plugin_name "[INTERNAL] ";

%feature("docstring") casadi::SlicotExpm::alloc_memory "[INTERNAL]  Create
memory block.

";

%feature("docstring") casadi::SlicotExpm::n_in "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::SlicotExpm::grad_sx "[INTERNAL]  Gradient
expression.

";

%feature("docstring") casadi::SlicotExpm::getAtomicOperation "[INTERNAL]
Get an atomic operation operator index.

";

%feature("docstring") casadi::SlicotExpm::_get_stats "[INTERNAL]  Get all
statistics

";

%feature("docstring") casadi::SlicotExpm::adjViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::SlicotExpm::getAdaptorSolverName "[INTERNAL]
Obtain solver name from Adaptor.

";

%feature("docstring") casadi::SlicotExpm::checkout "[INTERNAL]  Checkout a
memory object.

";

%feature("docstring") casadi::SlicotExpm::clear_memory "[INTERNAL]  Clear
all memory (called from destructor)

";

%feature("docstring") casadi::SlicotExpm::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::SlicotExpm::numel_out "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::SlicotExpm::oracle "[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::SlicotExpm::getAtomicInput "[INTERNAL]  Get
the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::SlicotExpm::generateFunction "[INTERNAL]
Generate code the function.

";

%feature("docstring") casadi::SlicotExpm::get_n_out "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::SlicotExpm::print "[INTERNAL]  Print.

";

%feature("docstring") casadi::SlicotExpm::jac_sx "[INTERNAL]  Jacobian
expression.

";

%feature("docstring") casadi::SlicotExpm::codegen_incref "[INTERNAL]
Codegen incref for dependencies.

";

%feature("docstring") casadi::SlicotExpm::grad_mx "[INTERNAL]  Gradient
expression.

";

%feature("docstring") casadi::SlicotExpm::sp_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode, sparsity propagation.

";

%feature("docstring") casadi::SlicotExpm::factory "[INTERNAL] ";

%feature("docstring") casadi::SlicotExpm::codegen_name "[INTERNAL]  Get
name in codegen.

";

%feature("docstring") casadi::SlicotExpm::sparsity_in "[INTERNAL]  Get
sparsity of a given input.

";

%feature("docstring") casadi::SlicotExpm::n_out "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::SlicotExpm::free_memory "[INTERNAL]  Free
memory block.

";

%feature("docstring") casadi::SlicotExpm::SlicotExpm "

>  casadi::SlicotExpm::SlicotExpm()
------------------------------------------------------------------------
[INTERNAL] 
Constructor.

>  casadi::SlicotExpm::SlicotExpm(const std::string &name, const Sparsity &A)
------------------------------------------------------------------------
[INTERNAL] 
Constructor.

Parameters:
-----------

st:

Problem structure.

";

%feature("docstring") casadi::SlicotExpm::get_reverse "[INTERNAL]  Generate
a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::SlicotExpm::sz_arg "[INTERNAL]  Get required
length of arg field.

";

%feature("docstring") casadi::SlicotExpm::get_options "[INTERNAL]  Options.

";

%feature("docstring") casadi::SlicotExpm::log "

>  void casadi::FunctionInternal::log(const std::string &msg) const 
------------------------------------------------------------------------
[INTERNAL] 
Log the status of the solver.

>  void casadi::FunctionInternal::log(const std::string &fcn, const std::string &msg) const 
------------------------------------------------------------------------
[INTERNAL] 
Log the status of the solver, function given.

";

%feature("docstring") casadi::SlicotExpm::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::SlicotExpm::free_sx "[INTERNAL]  Get free
variables (SX)

";

%feature("docstring") casadi::SlicotExpm::eval_mx "[INTERNAL]  Evaluate
with symbolic matrices.

";

%feature("docstring") casadi::SlicotExpm::n_mem "[INTERNAL]  Maximum number
of memory objects.

";

%feature("docstring") casadi::SlicotExpm::call_forward "[INTERNAL]  Forward
mode AD, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::SlicotExpm::hessian "[INTERNAL]  Return
Hessian function.

";

%feature("docstring") casadi::SlicotExpm::generate_lifted "[INTERNAL]
Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::SlicotExpm::nnz_out "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::SlicotExpm::_call "[INTERNAL]   Call a
function, overloaded.

";

%feature("docstring") casadi::SlicotExpm::alloc_res "[INTERNAL]  Ensure
required length of res field.

";

%feature("docstring") casadi::SlicotExpm::getJacSparsity "[INTERNAL]
Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::SlicotExpm::finalize "[INTERNAL]  Finalize
the object creation This function, which visits the class hierarchy in
reverse order is run after init() has been completed.

";

%feature("docstring") casadi::SlicotExpm::getTangent "[INTERNAL]  Return
tangent function.

";

%feature("docstring") casadi::SlicotExpm::name_in "[INTERNAL]  Get input
scheme name by index.

";

%feature("docstring") casadi::SlicotExpm::tangent "[INTERNAL]  Return
tangent function.

";

%feature("docstring") casadi::SlicotExpm::simple "[INTERNAL]  Evaluate
numerically, simplied syntax.

";

%feature("docstring") casadi::SlicotExpm "[INTERNAL]  'slicot' plugin for
Expm

An efficient solver for Discrete Periodic Lyapunov Equations using SLICOT

Joris Gillis

C++ includes: slicot_expm.hpp ";

%feature("docstring") casadi::SlicotExpm::sparsity_jac "[INTERNAL]  Get, if
necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::SlicotExpm::getFullJacobian "[INTERNAL]
Return Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::SlicotExpm::codegen_decref "[INTERNAL]
Codegen decref for dependencies.

";

%feature("docstring") casadi::SlicotExpm::checkRes "[INTERNAL]  Check if
output arguments have correct length and dimensions.

";

%feature("docstring") casadi::SlicotExpm::getAtomicInputReal "[INTERNAL]
Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::SlicotExpm::hasFullJacobian "[INTERNAL]
Return Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::SlicotExpm::sz_res "[INTERNAL]  Get required
length of res field.

";

%feature("docstring") casadi::SlicotExpm::n_nodes "[INTERNAL]  Number of
nodes in the algorithm.

";

%feature("docstring") casadi::SlicotExpm::replaceRes "[INTERNAL]  Replace
0-by-0 outputs.

";

%feature("docstring") casadi::SlicotExpm::generateBody "[INTERNAL]
Generate code for the function body.

";

%feature("docstring") casadi::SlicotExpm::print_free "[INTERNAL]  Print
free variables.

";

%feature("docstring") casadi::SlicotExpm::init "[INTERNAL]  Initialize.

";

%feature("docstring") casadi::SlicotExpm::get_sparsity_out "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::SlicotExpm::sp_fwd "[INTERNAL]  Propagate
sparsity forward.

";

%feature("docstring") casadi::SlicotExpm::_set_temp "[INTERNAL]  Set the
(temporary) work vectors.

";

%feature("docstring") casadi::SlicotExpm::fullJacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::SlicotExpm::has_codegen "[INTERNAL]  Is
codegen supported?

";

%feature("docstring") casadi::SlicotExpm::forward "[INTERNAL]  Return
function that calculates forward derivatives forward(nfwd) returns a cached
instance if available, and calls  Function get_forward(int nfwd) if no
cached version is available.

";

%feature("docstring") casadi::SlicotExpm::symbolicOutput "[INTERNAL]  Get a
vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::SlicotExpm::getJacSparsityHierarchical "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::SlicotExpm::~SlicotExpm "[INTERNAL]
Destructor.

";

%feature("docstring") casadi::SlicotExpm::wrap "[INTERNAL]  Wrap in an
Function instance consisting of only one MX call.

";

%feature("docstring") casadi::SlicotExpm::init_memory "[INTERNAL]
Initalize memory block.

";

%feature("docstring") casadi::SlicotExpm::verbose "[INTERNAL]  Verbose
mode?

";

%feature("docstring") casadi::SlicotExpm::fwdViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::SlicotExpm::setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";

%feature("docstring") casadi::SlicotExpm::size_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::SlicotExpm::generate_dependencies "[INTERNAL]
Export / Generate C code for the dependency function.

";

%feature("docstring") casadi::SlicotExpm::get_name_out "[INTERNAL]  Names
of function input and outputs.

";

%feature("docstring") casadi::SlicotExpm::get_stats "[INTERNAL]  Get all
statistics

";

%feature("docstring") casadi::SlicotExpm::simplifiedCall "[INTERNAL]  Use
simplified signature.

";

%feature("docstring") casadi::SlicotExpm::_eval "

>  void casadi::FunctionInternal::_eval(const double **arg, double **res, int *iw, double *w, int mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate numerically.

>  void casadi::FunctionInternal::_eval(const SXElem **arg, SXElem **res, int *iw, SXElem *w, int mem) const

>  void casadi::FunctionInternal::_eval(const bvec_t **arg, bvec_t **res, int *iw, bvec_t *w, int mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

%feature("docstring") casadi::SlicotExpm::get_n_forward "[INTERNAL]
Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::SlicotExpm::numel_in "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::SlicotExpm::getPartition "[INTERNAL]  Get the
unidirectional or bidirectional partition.

";

%feature("docstring") casadi::SlicotExpm::getJacSparsityHierarchicalSymm "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::SlicotExpm::size_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::SlicotExpm::alloc_w "[INTERNAL]  Ensure
required length of w field.

";

%feature("docstring") casadi::SlicotExpm::get_n_in "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::SlicotExpm::name "[INTERNAL]  Name of the
function.

";

%feature("docstring") casadi::SlicotExpm::release "[INTERNAL]  Release a
memory object.

";

%feature("docstring") casadi::SlicotExpm::_setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";

%feature("docstring") casadi::SlicotExpm::getHessian "[INTERNAL]  Return
Hessian function.

";

%feature("docstring") casadi::SlicotExpm::self "[INTERNAL]  Get a public
class instance.

";

%feature("docstring") casadi::SlicotExpm::set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::SlicotExpm::get_forward "[INTERNAL]  Generate
a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::SlicotExpm::setJacobian "[INTERNAL]  Return
Jacobian function.

";

%feature("docstring") casadi::SlicotExpm::mx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::SlicotExpm::tang_sx "[INTERNAL]  Tangent
expression.

";

%feature("docstring") casadi::SlicotExpm::call_reverse "[INTERNAL]  Reverse
mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::SlicotExpm::getJacSparsityGen "[INTERNAL]
Get the sparsity pattern, forward mode.

";

%feature("docstring") casadi::SlicotExpm::generateDeclarations "[INTERNAL]
Generate code for the declarations of the C function.

";

%feature("docstring") casadi::SlicotExpm::alloc_arg "[INTERNAL]  Ensure
required length of arg field.

";

%feature("docstring") casadi::SlicotExpm::ad_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::SlicotExpm::sparsity_out "[INTERNAL]  Get
sparsity of a given output.

";

%feature("docstring") casadi::SlicotExpm::mx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::SlicotExpm::hess_sx "[INTERNAL]  Hessian
expression.

";

%feature("docstring") casadi::SlicotExpm::sx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::SlicotExpm::set_temp "[INTERNAL]  Set the
(temporary) work vectors.

";

%feature("docstring") casadi::SlicotExpm::matchingRes "[INTERNAL]  Check if
output arguments that needs to be replaced.

";

%feature("docstring") casadi::SlicotExpm::has_spfwd "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::SlicotExpm::free_mx "[INTERNAL]  Get free
variables ( MX)

";

%feature("docstring") casadi::SlicotExpm::slice "[INTERNAL]  returns a new
function with a selection of inputs/outputs of the original

";

%feature("docstring") casadi::SlicotExpm::getGradient "[INTERNAL]  Return
gradient function.

";

%feature("docstring") casadi::SlicotExpm::checkArg "[INTERNAL]  Check if
input arguments have correct length and dimensions.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::SlicotExpm::alloc_iw "[INTERNAL]  Ensure
required length of iw field.

";

%feature("docstring") casadi::SlicotExpm::getAtomicOutput "[INTERNAL]  Get
the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::SlicotExpm::print_dimensions "[INTERNAL]
Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::SlicotExpm::symbolicFwdSeed "[INTERNAL]
Symbolic expressions for the forward seeds.

";

%feature("docstring") casadi::SlicotExpm::mapsum_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::SlicotExpm::eval_sx "[INTERNAL]  Evaluate
with symbolic scalars.

";

%feature("docstring") casadi::SlicotExpm::sz_work "[INTERNAL]  Get number
of temporary variables needed.

";

%feature("docstring") casadi::SlicotExpm::has_sprev "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::SlicotExpm::is_a "[INTERNAL]  Check if the
function is of a particular type.

";

%feature("docstring") casadi::SlicotExpm::has_function "[INTERNAL] ";

%feature("docstring") casadi::SlicotExpm::tang_mx "[INTERNAL]  Tangent
expression.

";

%feature("docstring") casadi::SlicotExpm::index_in "[INTERNAL]  Get input
scheme index by name.

";

%feature("docstring") casadi::SlicotExpm::set_jac_sparsity "[INTERNAL]
Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::SlicotExpm::get_sparsity_in "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::SlicotExpm::alloc "[INTERNAL]  Ensure work
vectors long enough to evaluate function.

";

%feature("docstring") casadi::SlicotExpm::jacobian "[INTERNAL]  Return
Jacobian function.

";

%feature("docstring") casadi::SlicotExpm::matchingArg "[INTERNAL]  Check if
input arguments that needs to be replaced.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::SlicotExpm::replaceAdjSeed "[INTERNAL]
Replace 0-by-0 reverse seeds.

";

%feature("docstring") casadi::SlicotExpm::index_out "[INTERNAL]  Get output
scheme index by name.

";

%feature("docstring") casadi::SlicotExpm::get_function "[INTERNAL] ";

%feature("docstring") casadi::SlicotExpm::addShorthand "[INTERNAL]
Generate shorthand macro.

";

%feature("docstring") casadi::SlicotExpm::size2_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::SlicotExpm::checkInputs "[INTERNAL]  Check if
the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::SlicotExpm::construct "[INTERNAL]  Construct
Prepares the function for evaluation.

";

%feature("docstring") casadi::SlicotExpm::eval_name "[INTERNAL]  Get name
of the evaluation function.

";

%feature("docstring") casadi::SlicotExpm::sx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::SlicotExpm::size2_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::SlicotExpm::getAlgorithmSize "[INTERNAL]  Get
the number of atomic operations.

";

%feature("docstring") casadi::SlicotExpm::name_out "[INTERNAL]  Get output
scheme name by index.

";

%feature("docstring") casadi::SlicotExpm::sz_w "[INTERNAL]  Get required
length of w field.

";

%feature("docstring") casadi::SlicotExpm::sz_iw "[INTERNAL]  Get required
length of iw field.

";

%feature("docstring") casadi::SlicotExpm::print_option "[INTERNAL]  Print
all information there is to know about a certain option.

";

%feature("docstring") casadi::SlicotExpm::getJacobian "[INTERNAL]  Return
Jacobian function.

";

%feature("docstring") casadi::SlicotExpm::jit_dependencies "[INTERNAL]
Jit dependencies.

";

%feature("docstring") casadi::SlicotExpm::getWorkSize "[INTERNAL]  Get the
length of the work vector.

";

%feature("docstring") casadi::SlicotExpm::size1_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::SlicotExpm::repr "[INTERNAL]  Print.

";

%feature("docstring") casadi::SlicotExpm::reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::SlicotExpm::get_name_in "[INTERNAL]  Names of
function input and outputs.

";

%feature("docstring") casadi::SlicotExpm::replaceFwdSeed "[INTERNAL]
Replace 0-by-0 forward seeds.

";

%feature("docstring") casadi::SlicotExpm::size1_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::SlicotExpm::has_free "[INTERNAL]  Does the
function have free variables.

";

%feature("docstring") casadi::SlicotExpm::replaceArg "[INTERNAL]  Replace
0-by-0 inputs.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::SlicotExpm::sp_rev "[INTERNAL]  Propagate
sparsity backwards.

";

%feature("docstring") casadi::SlicotExpm::addDependency "[INTERNAL]  Add a
dependent function.

";

%feature("docstring") casadi::SlicotExpm::jac_mx "[INTERNAL]  Jacobian
expression.

";

%feature("docstring") casadi::SlicotExpm::symbolicAdjSeed "[INTERNAL]
Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::SlicotExpm::map_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::SlicotExpm::nnz_in "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::SlicotExpm::which_depends "[INTERNAL]  Which
variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::SlicotExpm::generateMeta "[INTERNAL]
Generate meta-information allowing a user to evaluate a generated function.

";

%feature("docstring") casadi::SlicotExpm::print_options "[INTERNAL]  Print
list of options.

";

%feature("docstring") casadi::SlicotExpm::call "[INTERNAL]   Call a
function, templated.

";

%feature("docstring") casadi::SlicotExpm::default_in "[INTERNAL]  Get
default input value.

";

%feature("docstring") casadi::SlicotExpm::_set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::SlicotExpm::signature "[INTERNAL]  Code
generate the function.

";

%feature("docstring") casadi::SlicotExpm::eval "[INTERNAL]  Evaluate
numerically.

";


// File: classcasadi_1_1Solve.xml


// File: classcasadi_1_1SparseStorage.xml
%feature("docstring") casadi::SparseStorage::has_nz "[INTERNAL]  Returns
true if the matrix has a non-zero at location rr, cc.

";

%feature("docstring") casadi::SparseStorage::elem "[INTERNAL]  get a
reference to an element

";

%feature("docstring") casadi::SparseStorage::clear "[INTERNAL] ";

%feature("docstring") casadi::SparseStorage::reserve "[INTERNAL] ";

%feature("docstring") casadi::SparseStorage::resize "[INTERNAL] ";

%feature("docstring") casadi::SparseStorage "[INTERNAL] C++ includes:
sparse_storage.hpp ";

%feature("docstring") casadi::SparseStorage::sparsity "[INTERNAL]  Const
access the sparsity - reference to data member.

";

%feature("docstring") casadi::SparseStorage::SparseStorage "

>  casadi::SparseStorage< DataType >::SparseStorage(const Sparsity &sparsity, const DataType &val=DataType(0))
------------------------------------------------------------------------
[INTERNAL] 
Sparse matrix with a given sparsity

>  casadi::SparseStorage< DataType >::SparseStorage()
------------------------------------------------------------------------
[INTERNAL] 
constructors

empty 0-by-0 matrix constructor

>  casadi::SparseStorage< DataType >::SparseStorage(const SparseStorage< DataType > &m)
------------------------------------------------------------------------
[INTERNAL] 
Copy constructor.

";

%feature("docstring") casadi::SparseStorage::nonzeros "

>  std::vector< DataType > & casadi::SparseStorage< DataType >::nonzeros()
------------------------------------------------------------------------
[INTERNAL] 
Access the non-zero elements.

>  const std::vector< DataType > & casadi::SparseStorage< DataType >::nonzeros() const 
------------------------------------------------------------------------
[INTERNAL] 
Const access the non-zero elements.

";


// File: classcasadi_1_1Sparsity.xml


/*  Check if two sparsity patterns are identical  */

/*  Size and element counting  */ %feature("docstring")
casadi::Sparsity::enlargeRows "

Enlarge the matrix along the first dimension (i.e. insert rows)

";

%feature("docstring") casadi::Sparsity "

General sparsity class.

The storage format is a compressed column storage (CCS) format.  In this
format, the structural non-zero elements are stored in column-major order,
starting from the upper left corner of the matrix and ending in the lower
right corner.

In addition to the dimension ( size1(), size2()), (i.e. the number of rows
and the number of columns respectively), there are also two vectors of
integers:

\"colind\" [length size2()+1], which contains the index to the first non-
zero element on or after the corresponding column. All the non-zero elements
of a particular i are thus the elements with index el that fulfills:
colind[i] <= el < colind[i+1].

\"row\" [same length as the number of non-zero elements, nnz()] The rows for
each of the structural non-zeros.

Note that with this format, it is cheap to loop over all the non-zero
elements of a particular column, at constant time per element, but expensive
to jump to access a location (i, j).

If the matrix is dense, i.e. length(row) == size1()*size2(), the format
reduces to standard dense column major format, which allows access to an
arbitrary element in constant time.

Since the object is reference counted (it inherits from SharedObject),
several matrices are allowed to share the same sparsity pattern.

The implementations of some methods of this class has been taken from the
CSparse package and modified to use C++ standard library and CasADi data
structures.

See:   Matrix

Joel Andersson

C++ includes: sparsity.hpp ";

%feature("docstring") casadi::Sparsity::largest_first "

Order the columns by decreasing degree.

";

%feature("docstring") casadi::Sparsity::dim "

Get the dimension as a string.

";

%feature("docstring") casadi::Sparsity::add_nz "

Get the index of a non-zero element Add the element if it does not exist and
copy object if it's not unique.

";

%feature("docstring") casadi::Sparsity::is_scalar "

Is scalar?

";

%feature("docstring") casadi::Sparsity::rowsSequential "

Do the rows appear sequentially on each column.

Parameters:
-----------

strictly:  if true, then do not allow multiple entries

";

%feature("docstring") casadi::Sparsity::get_diag "

Get the diagonal of the matrix/create a diagonal matrix (mapping will
contain the nonzero mapping) When the input is square, the diagonal elements
are returned. If the input is vector-like, a diagonal matrix is constructed
with it.

";

%feature("docstring") casadi::Sparsity::btf "

Calculate the block triangular form (BTF) See Direct Methods for Sparse
Linear Systems by Davis (2006).

The function computes the Dulmage-Mendelsohn decomposition, which allows you
to reorder the rows and columns of a matrix to bring it into block
triangular form (BTF).

It will not consider the distance of off-diagonal elements to the diagonal:
there is no guarantee you will get a block-diagonal matrix if you supply a
randomly permuted block-diagonal matrix.

If your matrix is symmetrical, this method is of limited use; permutation
can make it non-symmetric.

See:   scc

";

%feature("docstring") casadi::Sparsity::star_coloring2 "

Perform a star coloring of a symmetric matrix: A new greedy distance-2
coloring algorithm Algorithm 4.1 in NEW ACYCLIC AND STAR COLORING ALGORITHMS
WITH APPLICATION TO COMPUTING HESSIANS A. H. GEBREMEDHIN, A. TARAFDAR, F.
MANNE, A. POTHEN SIAM J. SCI. COMPUT. Vol. 29, No. 3, pp. 10421072 (2007)

Ordering options: None (0), largest first (1)

";

%feature("docstring") casadi::Sparsity::enlargeColumns "

Enlarge the matrix along the second dimension (i.e. insert columns)

";

%feature("docstring") casadi::Sparsity::is_vector "

Check if the pattern is a row or column vector.

";

%feature("docstring") casadi::Sparsity::hash "";

%feature("docstring") casadi::Sparsity::resize "

Resize.

";

%feature("docstring") casadi::Sparsity::find "

Get the location of all non-zero elements as they would appear in a Dense
matrix A : DenseMatrix 4 x 3 B : SparseMatrix 4 x 3 , 5 structural non-
zeros.

k = A.find() A[k] will contain the elements of A that are non-zero in B

";

%feature("docstring") casadi::Sparsity::spy_matlab "

Generate a script for Matlab or Octave which visualizes the sparsity using
the spy command.

";

%feature("docstring") casadi::Sparsity::repr "

Print a representation of the object.

";

%feature("docstring") casadi::Sparsity::bw_lower "

Lower half-bandwidth.

";

%feature("docstring") casadi::Sparsity::T "

Transpose the matrix.

";

%feature("docstring") casadi::Sparsity::repr_el "

Describe the nonzero location k as a string.

";

%feature("docstring") casadi::Sparsity::Sparsity "

>  casadi::Sparsity::Sparsity(int dummy=0)
------------------------------------------------------------------------

Default constructor.

>  casadi::Sparsity::Sparsity(int nrow, int ncol)
------------------------------------------------------------------------

Pattern with all structural zeros.

>  casadi::Sparsity::Sparsity(int nrow, int ncol, const std::vector< int > &colind, const std::vector< int > &row)
------------------------------------------------------------------------

Construct from sparsity pattern vectors given in compressed column storage
format.

>  casadi::Sparsity::Sparsity(const std::pair< int, int > &rc)
------------------------------------------------------------------------

Create a sparse matrix with all structural zeros.

";

%feature("docstring") casadi::Sparsity::pattern_inverse "

Take the inverse of a sparsity pattern; flip zeros and non-zeros.

";

%feature("docstring") casadi::Sparsity::colind "

Get a reference to the colindex of column cc (see class description)

";

%feature("docstring") casadi::Sparsity::is_row "

Check if the pattern is a row vector (i.e. size1()==1)

";

%feature("docstring") casadi::Sparsity::numel "

The total number of elements, including structural zeros, i.e.
size2()*size1()

See:   nnz()

";

%feature("docstring") casadi::Sparsity::unite "

Union of two sparsity patterns.

";

%feature("docstring") casadi::Sparsity::get_ccs "

Get the sparsity in compressed column storage (CCS) format.

";

%feature("docstring") casadi::Sparsity::is_transpose "

Check if the sparsity is the transpose of another.

";

%feature("docstring") casadi::Sparsity::get_triplet "

Get the sparsity in sparse triplet format.

";

%feature("docstring") casadi::Sparsity::is_square "

Is square?

";

%feature("docstring") casadi::Sparsity::appendColumns "

Append another sparsity patten horizontally.

";

%feature("docstring") casadi::Sparsity::isReshape "

Check if the sparsity is a reshape of another.

";

%feature("docstring") casadi::Sparsity::removeDuplicates "

Remove duplicate entries.

The same indices will be removed from the mapping vector, which must have
the same length as the number of nonzeros

";

%feature("docstring") casadi::Sparsity::is_empty "

Check if the sparsity is empty.

A sparsity is considered empty if one of the dimensions is zero (or
optionally both dimensions)

";

%feature("docstring") casadi::Sparsity::makeDense "

Make a patten dense.

";

%feature("docstring") casadi::Sparsity::nnz_diag "

Number of non-zeros on the diagonal, i.e. the number of elements (i, j) with
j==i.

";

%feature("docstring") casadi::Sparsity::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::Sparsity::dense "

Create a dense rectangular sparsity pattern.

";

%feature("docstring") casadi::Sparsity::diag "

Create diagonal sparsity pattern.

";

%feature("docstring") casadi::Sparsity::get_crs "

Get the sparsity in compressed row storage (CRS) format.

";

%feature("docstring") casadi::Sparsity::sub "

>  Sparsity casadi::Sparsity::sub(const std::vector< int > &rr, const std::vector< int > &cc, std::vector< int > &output_mapping, bool ind1=false) const 
------------------------------------------------------------------------

Get a submatrix.

Returns the sparsity of the submatrix, with a mapping such that submatrix[k]
= originalmatrix[mapping[k]]

>  Sparsity casadi::Sparsity::sub(const std::vector< int > &rr, const Sparsity &sp, std::vector< int > &output_mapping, bool ind1=false) const 
------------------------------------------------------------------------

Get a set of elements.

Returns the sparsity of the corresponding elements, with a mapping such that
submatrix[k] = originalmatrix[mapping[k]]

";

%feature("docstring") casadi::Sparsity::unit "

Create the sparsity pattern for a unit vector of length n and a nonzero on
position el.

";

%feature("docstring") casadi::Sparsity::is_null "

Is a null pointer?

";

%feature("docstring") casadi::Sparsity::append "

Append another sparsity patten vertically (NOTE: only efficient if vector)

";

%feature("docstring") casadi::Sparsity::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::Sparsity::combine "

Combine two sparsity patterns Returns the new sparsity pattern as well as a
mapping with the same length as the number of non-zero elements The mapping
matrix contains the arguments for each nonzero, the first bit indicates if
the first argument is nonzero, the second bit indicates if the second
argument is nonzero (note that none of, one of or both of the arguments can
be nonzero)

";

%feature("docstring") casadi::Sparsity::nnz "

Get the number of (structural) non-zeros.

See:   numel()

";

%feature("docstring") casadi::Sparsity::intersect "

Intersection of two sparsity patterns Returns the new sparsity pattern as
well as a mapping with the same length as the number of non-zero elements
The value is 1 if the non-zero comes from the first (i.e. this) object, 2 if
it is from the second and 3 (i.e. 1 | 2) if from both.

";

%feature("docstring") casadi::Sparsity::row "

Get the row of a non-zero element.

";

%feature("docstring") casadi::Sparsity::print "

Print a description of the object.

";

%feature("docstring") casadi::Sparsity::is_column "

Check if the pattern is a column vector (i.e. size2()==1)

";

%feature("docstring") casadi::Sparsity::get_colind "

Get the column index for each column Together with the row-vector, one
obtains the sparsity pattern in the column compressed format.

";

%feature("docstring") casadi::Sparsity::get_row "

Get the row for each non-zero entry Together with the column-vector, this
vector gives the sparsity of the matrix in sparse triplet format, and
together with the colind vector, one obtains the sparsity in column
compressed format.

";

%feature("docstring") casadi::Sparsity::is_symmetric "

Is symmetric?

";

%feature("docstring") casadi::Sparsity::has_nz "

Returns true if the pattern has a non-zero at location rr, cc.

";

%feature("docstring") casadi::Sparsity::transpose "

Transpose the matrix and get the reordering of the non-zero entries.

Parameters:
-----------

mapping:  the non-zeros of the original matrix for each non-zero of the new
matrix

";

%feature("docstring") casadi::Sparsity::pmult "

Permute rows and/or columns Multiply the sparsity with a permutation matrix
from the left and/or from the right P * A * trans(P), A * trans(P) or A *
trans(P) with P defined by an index vector containing the row for each col.
As an alternative, P can be transposed (inverted).

";

%feature("docstring") casadi::Sparsity::is_diag "

Is diagonal?

";

%feature("docstring") casadi::Sparsity::is_equal "";

%feature("docstring") casadi::Sparsity::nnz_lower "

Number of non-zeros in the lower triangular half, i.e. the number of
elements (i, j) with j<=i.

";

%feature("docstring") casadi::Sparsity::get_lower "

Get nonzeros in lower triangular part.

";

%feature("docstring") casadi::Sparsity::is_singular "

Check whether the sparsity-pattern indicates structural singularity.

";

%feature("docstring") casadi::Sparsity::print_compact "

Print a compact description of the sparsity pattern.

";

%feature("docstring") casadi::Sparsity::is_dense "

Is dense?

";

%feature("docstring") casadi::Sparsity::sanity_check "

Check if the dimensions and colind, row vectors are compatible.

Parameters:
-----------

complete:  set to true to also check elementwise throws an error as possible
result

";

%feature("docstring") casadi::Sparsity::compressed "

Create from a single vector containing the pattern in compressed column
storage format: The format: The first two entries are the number of rows
(nrow) and columns (ncol) The next ncol+1 entries are the column offsets
(colind). Note that the last element, colind[ncol], gives the number of
nonzeros The last colind[ncol] entries are the row indices

";

%feature("docstring") casadi::Sparsity::uni_coloring "

Perform a unidirectional coloring: A greedy distance-2 coloring algorithm
(Algorithm 3.1 in A. H. GEBREMEDHIN, F. MANNE, A. POTHEN)

";

%feature("docstring") casadi::Sparsity::star_coloring "

Perform a star coloring of a symmetric matrix: A greedy distance-2 coloring
algorithm Algorithm 4.1 in What Color Is Your Jacobian? Graph Coloring for
Computing Derivatives A. H. GEBREMEDHIN, F. MANNE, A. POTHEN SIAM Rev.,
47(4), 629705 (2006)

Ordering options: None (0), largest first (1)

";

%feature("docstring") casadi::Sparsity::enlarge "

Enlarge matrix Make the matrix larger by inserting empty rows and columns,
keeping the existing non-zeros.

For the matrices A to B A(m, n) length(jj)=m , length(ii)=n B(nrow, ncol)

A=enlarge(m, n, ii, jj) makes sure that

B[jj, ii] == A

";

%feature("docstring") casadi::Sparsity::compress "

Compress a sparsity pattern.

";

%feature("docstring") casadi::Sparsity::scc "

Find the strongly connected components of the bigraph defined by the
sparsity pattern of a square matrix.

See Direct Methods for Sparse Linear Systems by Davis (2006). Returns:
Number of components

Offset for each components (length: 1 + number of components)

Indices for each components, component i has indices index[offset[i]], ...,
index[offset[i+1]]

In the case that the matrix is symmetric, the result has a particular
interpretation: Given a symmetric matrix A and n = A.scc(p, r)

=> A[p, p] will appear block-diagonal with n blocks and with the indices of
the block boundaries to be found in r.

";

%feature("docstring") casadi::Sparsity::get_upper "

Get nonzeros in upper triangular part.

";

%feature("docstring") casadi::Sparsity::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::Sparsity::dfs "

Depth-first search on the adjacency graph of the sparsity See Direct Methods
for Sparse Linear Systems by Davis (2006).

";

%feature("docstring") casadi::Sparsity::is_tril "

Is lower triangular?

";

%feature("docstring") casadi::Sparsity::size2 "

Get the number of columns.

";

%feature("docstring") casadi::Sparsity::get_col "

Get the column for each non-zero entry Together with the row-vector, this
vector gives the sparsity of the matrix in sparse triplet format, i.e. the
column and row for each non-zero elements.

";

%feature("docstring") casadi::Sparsity::size1 "

Get the number of rows.

";

%feature("docstring") casadi::Sparsity::is_triu "

Is upper triangular?

";

%feature("docstring") casadi::Sparsity::spy "

Print a textual representation of sparsity.

";

%feature("docstring") casadi::Sparsity::__hash__ "

Returns a number that is unique for a given Node. If the Object does not
point to any node, \"0\" is returned.

";

%feature("docstring") casadi::Sparsity::size "

>  std::pair<int, int> casadi::Sparsity::size() const 
------------------------------------------------------------------------

Get the shape.

>  int casadi::Sparsity::size(int axis) const 
------------------------------------------------------------------------

Get the size along a particular dimensions.

";

%feature("docstring") casadi::Sparsity::etree "

Calculate the elimination tree See Direct Methods for Sparse Linear Systems
by Davis (2006). If the parameter ata is false, the algorithm is equivalent
to MATLAB's etree(A), except that the indices are zero- based. If ata is
true, the algorithm is equivalent to MATLAB's etree(A, 'col').

";

%feature("docstring") casadi::Sparsity::get_nz "

>  int casadi::Sparsity::get_nz(int rr, int cc) const 
------------------------------------------------------------------------

Get the index of an existing non-zero element return -1 if the element does
not exist.

>  std::vector<int> casadi::Sparsity::get_nz(const std::vector< int > &rr, const std::vector< int > &cc) const 
------------------------------------------------------------------------

Get a set of non-zero element return -1 if the element does not exist.

>  void casadi::Sparsity::get_nz(std::vector< int > &INOUT) const 
------------------------------------------------------------------------

Get the nonzero index for a set of elements The index vector is used both
for input and outputs and must be sorted by increasing nonzero index, i.e.
column-wise. Elements not found in the sparsity pattern are set to -1.

";

%feature("docstring") casadi::Sparsity::erase "

>  std::vector<int> casadi::Sparsity::erase(const std::vector< int > &rr, const std::vector< int > &cc, bool ind1=false)
------------------------------------------------------------------------

Erase rows and/or columns of a matrix.

>  std::vector<int> casadi::Sparsity::erase(const std::vector< int > &rr, bool ind1=false)
------------------------------------------------------------------------

Erase elements of a matrix.

";

%feature("docstring") casadi::Sparsity::bw_upper "

Upper half-bandwidth.

";

%feature("docstring") casadi::Sparsity::scalar "

Create a scalar sparsity pattern.

";

%feature("docstring") casadi::Sparsity::nnz_upper "

Number of non-zeros in the upper triangular half, i.e. the number of
elements (i, j) with j>=i.

";


// File: classcasadi_1_1SparsityInterface.xml
%feature("docstring") friendwrap_diagsplit "

>  std::vector< MatType > diagsplit(const MatType &x, const std::vector< int > &output_offset1, const std::vector< int > &output_offset2)
------------------------------------------------------------------------

split diagonally, retaining square matrices

Parameters:
-----------

output_offset1:  List of all start locations (row) for each group the last
matrix will run to the end.

output_offset2:  List of all start locations (row) for each group the last
matrix will run to the end.

diagcat(diagsplit(x, ...)) = x

>  std::vector< MatType > diagsplit(const MatType &x, const std::vector< int > &output_offset)
------------------------------------------------------------------------

split diagonally, retaining square matrices

Parameters:
-----------

output_offset:  List of all start locations for each group the last matrix
will run to the end.

diagcat(diagsplit(x, ...)) = x

>  std::vector< MatType > diagsplit(const MatType &x, int incr=1)
------------------------------------------------------------------------

split diagonally, retaining groups of square matrices

Parameters:
-----------

incr:  Size of each matrix

diagsplit(diagsplit(x, ...)) = x

>  std::vector< MatType > diagsplit(const MatType &x, int incr1, int incr2)
------------------------------------------------------------------------

split diagonally, retaining fixed-sized matrices

Parameters:
-----------

incr1:  Row dimension of each matrix

incr2:  Column dimension of each matrix

diagsplit(diagsplit(x, ...)) = x

";

%feature("docstring") friendwrap_triu "

Get the upper triangular part of a matrix.

";

%feature("docstring") friendwrap_mac "

Multiply-accumulate operation Matrix product of two matrices (x and y),
adding the result to a third matrix z. The result has the same sparsity
pattern as C meaning that other entries of (x*y) are ignored. The operation
is equivalent to: z+mtimes(x,y).project(z.sparsity()).

";

%feature("docstring") friendwrap_mtimes "

>  MatType mtimes(const MatType &x, const MatType &y)
------------------------------------------------------------------------

Matrix product of two matrices.

>  MatType mtimes(const std::vector< MatType > &args)
------------------------------------------------------------------------

Matrix product of n matrices.

";

%feature("docstring") friendwrap_transpose "

Transpose.

";

%feature("docstring") friendwrap_tril "

Get the lower triangular part of a matrix.

";

%feature("docstring") friendwrap_offset "

Helper function, get offsets corresponding to a vector of matrices.

";

%feature("docstring") friendwrap_vec "

make a vector Reshapes/vectorizes the matrix such that the shape becomes
(expr.numel(), 1). Columns are stacked on top of each other. Same as
reshape(expr, expr.numel(), 1)

a c b d  turns into

a b c d

";

%feature("docstring") friendwrap_horzcat "

>  MatType horzcat(const std::vector< MatType > &v)
------------------------------------------------------------------------

Concatenate a list of matrices horizontally Alternative terminology:
horizontal stack, hstack, horizontal append, [a b].

horzcat(horzsplit(x, ...)) = x

>  MatType horzcat(const MatType &x, const MatType &y)
------------------------------------------------------------------------

Concatenate horizontally, two matrices.

>  MatType horzcat(const MatType &x, const MatType &y, const MatType &z)
------------------------------------------------------------------------

Concatenate horizontally, three matrices.

>  MatType horzcat(const MatType &x, const MatType &y, const MatType &z, const MatType &w)
------------------------------------------------------------------------

Concatenate horizontally, four matrices.

";

%feature("docstring") casadi::SparsityInterface "

Sparsity interface class.

This is a common base class for GenericMatrix (i.e. MX and Matrix<>) and
Sparsity, introducing a uniform syntax and implementing common functionality
using the curiously recurring template pattern (CRTP) idiom. Joel Andersson

C++ includes: sparsity_interface.hpp ";

%feature("docstring") friendwrap_horzsplit "

>  std::vector<MatType > horzsplit(const MatType &x, const std::vector< int > &offset)
------------------------------------------------------------------------

split horizontally, retaining groups of columns

Parameters:
-----------

offset:  List of all start columns for each group the last column group will
run to the end.

horzcat(horzsplit(x, ...)) = x

>  std::vector<MatType > horzsplit(const MatType &x, int incr=1)
------------------------------------------------------------------------

split horizontally, retaining fixed-sized groups of columns

Parameters:
-----------

incr:  Size of each group of columns

horzcat(horzsplit(x, ...)) = x

";

%feature("docstring") friendwrap_veccat "

concatenate vertically while vectorizing all arguments with vec

";

%feature("docstring") friendwrap_blocksplit "

>  std::vector< std::vector< MatType > > blocksplit(const MatType &x, const std::vector< int > &vert_offset, const std::vector< int > &horz_offset)
------------------------------------------------------------------------

chop up into blocks

Parameters:
-----------

vert_offset:  Defines the boundaries of the block rows

horz_offset:  Defines the boundaries of the block columns

blockcat(blocksplit(x,..., ...)) = x

>  std::vector< std::vector< MatType > > blocksplit(const MatType &x, int vert_incr=1, int horz_incr=1)
------------------------------------------------------------------------

chop up into blocks

Parameters:
-----------

vert_incr:  Defines the increment for block boundaries in row dimension

horz_incr:  Defines the increment for block boundaries in column dimension

blockcat(blocksplit(x,..., ...)) = x

";

%feature("docstring") friendwrap_repmat "

Repeat matrix A n times vertically and m times horizontally.

";

%feature("docstring") friendwrap_vertcat "

>  MatType vertcat(const std::vector< MatType > &v)
------------------------------------------------------------------------

Concatenate a list of matrices vertically Alternative terminology: vertical
stack, vstack, vertical append, [a;b].

vertcat(vertsplit(x, ...)) = x

>  MatType vertcat(const MatType &x, const MatType &y)
------------------------------------------------------------------------

Concatenate vertically, two matrices.

>  MatType vertcat(const MatType &x, const MatType &y, const MatType &z)
------------------------------------------------------------------------

Concatenate vertically, three matrices.

>  MatType vertcat(const MatType &x, const MatType &y, const MatType &z, const MatType &w)
------------------------------------------------------------------------

Concatenate vertically, four matrices.

";

%feature("docstring") friendwrap_sprank "

Obtain the structural rank of a sparsity-pattern.

";

%feature("docstring") friendwrap_kron "

Kronecker tensor product.

Creates a block matrix in which each element (i, j) is a_ij*b

";

%feature("docstring") friendwrap_reshape "

>  MatType reshape(const MatType &x, int nrow, int ncol)
------------------------------------------------------------------------

Returns a reshaped version of the matrix.

>  MatType reshape(const MatType &x, std::pair< int, int > rc)
------------------------------------------------------------------------

Returns a reshaped version of the matrix, dimensions as a vector.

>  MatType reshape(const MatType &x, const Sparsity &sp)
------------------------------------------------------------------------

Reshape the matrix.

";

%feature("docstring") friendwrap_norm_0_mul "

0-norm (nonzero count) of a Matrix-matrix product

";

%feature("docstring") friendwrap_diagcat "

>  MatType diagcat(const std::vector< MatType > &A)
------------------------------------------------------------------------

Construct a matrix with given block on the diagonal.

>  MatType diagcat(const MatType &x, const MatType &y)
------------------------------------------------------------------------

Concatenate along diagonal, two matrices.

>  MatType diagcat(const MatType &x, const MatType &y, const MatType &z)
------------------------------------------------------------------------

Concatenate along diagonal, three matrices.

>  MatType diagcat(const MatType &x, const MatType &y, const MatType &z, const MatType &w)
------------------------------------------------------------------------

Concatenate along diagonal, four matrices.

";

%feature("docstring") friendwrap_vertsplit "

>  std::vector<MatType > vertsplit(const MatType &x, const std::vector< int > &offset)
------------------------------------------------------------------------

split vertically, retaining groups of rows

*

Parameters:
-----------

output_offset:  List of all start rows for each group the last row group
will run to the end.

vertcat(vertsplit(x, ...)) = x

>  std::vector<MatType > vertsplit(const MatType &x, int incr=1)
------------------------------------------------------------------------

split vertically, retaining fixed-sized groups of rows

Parameters:
-----------

incr:  Size of each group of rows

vertcat(vertsplit(x, ...)) = x



::

  >>> print vertsplit(SX.sym(\"a\",4))
  [SX(a_0), SX(a_1), SX(a_2), SX(a_3)]
  





::

  >>> print vertsplit(SX.sym(\"a\",4),2)
  [SX([a_0, a_1]), SX([a_2, a_3])]
  



If the number of rows is not a multiple of incr, the last entry returned
will have a size smaller than incr.



::

  >>> print vertsplit(DM([0,1,2,3,4]),2)
  [DM([0, 1]), DM([2, 3]), DM(4)]
  



";

%feature("docstring") friendwrap_blockcat "

>  MatType blockcat(const std::vector< std::vector< MatType > > &v)
------------------------------------------------------------------------

Construct a matrix from a list of list of blocks.

>  MatType blockcat(const MatType &A, const MatType &B, const MatType &C, const MatType &D)
------------------------------------------------------------------------

Construct a matrix from 4 blocks.

";


// File: classcasadi_1_1Split.xml


// File: classcasadi_1_1Sqpmethod.xml
%feature("docstring") casadi::Sqpmethod::print_free "[INTERNAL]  Print free
variables.

";

%feature("docstring") casadi::Sqpmethod::eval_h "[INTERNAL] ";

%feature("docstring") casadi::Sqpmethod::wrap "[INTERNAL]  Wrap in an
Function instance consisting of only one MX call.

";

%feature("docstring") casadi::Sqpmethod::get_sparsity_out "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Sqpmethod::eval_g "[INTERNAL] ";

%feature("docstring") casadi::Sqpmethod::has_free "[INTERNAL]  Does the
function have free variables.

";

%feature("docstring") casadi::Sqpmethod::tang_sx "[INTERNAL]  Tangent
expression.

";

%feature("docstring") casadi::Sqpmethod::numel_out "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::Sqpmethod::init "[INTERNAL]  Initialize.

";

%feature("docstring") casadi::Sqpmethod::_call "[INTERNAL]   Call a
function, overloaded.

";

%feature("docstring") casadi::Sqpmethod::print_options "[INTERNAL]  Print
list of options.

";

%feature("docstring") casadi::Sqpmethod::tangent "[INTERNAL]  Return
tangent function.

";

%feature("docstring") casadi::Sqpmethod::sz_work "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") casadi::Sqpmethod::name_out "[INTERNAL]  Get output
scheme name by index.

";

%feature("docstring") casadi::Sqpmethod::getAtomicInputReal "[INTERNAL]
Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::Sqpmethod::checkInputs "

>  virtual void casadi::Nlpsol::checkInputs(void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Check if the inputs correspond to a well-posed problem.

>  virtual void casadi::FunctionInternal::checkInputs() const 
------------------------------------------------------------------------
[INTERNAL] 
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::Sqpmethod::eval_jac_g "[INTERNAL] ";

%feature("docstring") casadi::Sqpmethod::setJacobian "[INTERNAL]  Return
Jacobian function.

";

%feature("docstring") casadi::Sqpmethod::eval_f "[INTERNAL] ";

%feature("docstring") casadi::Sqpmethod::jac_mx "[INTERNAL]  Jacobian
expression.

";

%feature("docstring") casadi::Sqpmethod::self "[INTERNAL]  Get a public
class instance.

";

%feature("docstring") casadi::Sqpmethod::nnz_in "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::Sqpmethod::set_jac_sparsity "[INTERNAL]
Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Sqpmethod::set_temp "[INTERNAL]  Set the work
vectors.

";

%feature("docstring") casadi::Sqpmethod::eval_grad_f "[INTERNAL] ";

%feature("docstring") casadi::Sqpmethod::getJacSparsityGen "[INTERNAL]  Get
the sparsity pattern, forward mode.

";

%feature("docstring") casadi::Sqpmethod::alloc_memory "[INTERNAL]  Create
memory block.

";

%feature("docstring") casadi::Sqpmethod::size2_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Sqpmethod::checkout "[INTERNAL]  Checkout a
memory object.

";

%feature("docstring") casadi::Sqpmethod::codegen_incref "[INTERNAL]
Codegen incref for dependencies.

";

%feature("docstring") casadi::Sqpmethod::getGradient "[INTERNAL]  Return
gradient function.

";

%feature("docstring") casadi::Sqpmethod::sp_rev "[INTERNAL]  Propagate
sparsity backwards.

";

%feature("docstring") casadi::Sqpmethod::n_nodes "[INTERNAL]  Number of
nodes in the algorithm.

";

%feature("docstring") casadi::Sqpmethod::addDependency "[INTERNAL]  Add a
dependent function.

";

%feature("docstring") casadi::Sqpmethod::sparsity_out "[INTERNAL]  Get
sparsity of a given output.

";

%feature("docstring") casadi::Sqpmethod::codegen_name "[INTERNAL]  Get name
in codegen.

";

%feature("docstring") casadi::Sqpmethod::matchingArg "[INTERNAL]  Check if
input arguments that needs to be replaced.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::Sqpmethod::_set_temp "[INTERNAL]  Set the
(temporary) work vectors.

";

%feature("docstring") casadi::Sqpmethod::numel_in "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::Sqpmethod::ad_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::Sqpmethod::getJacSparsityHierarchical "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::Sqpmethod::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::Sqpmethod::hess_sx "[INTERNAL]  Hessian
expression.

";

%feature("docstring") casadi::Sqpmethod::size2_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::Sqpmethod::release "[INTERNAL]  Release a
memory object.

";

%feature("docstring") casadi::Sqpmethod::jit_dependencies "[INTERNAL]  JIT
for dependencies.

";

%feature("docstring") casadi::Sqpmethod::adjViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::Sqpmethod::jac_sx "[INTERNAL]  Jacobian
expression.

";

%feature("docstring") casadi::Sqpmethod::has_spfwd "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Sqpmethod::alloc "[INTERNAL]  Ensure work
vectors long enough to evaluate function.

";

%feature("docstring") casadi::Sqpmethod::getTangent "[INTERNAL]  Return
tangent function.

";

%feature("docstring") casadi::Sqpmethod::get_reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::Sqpmethod::sparsity_in "[INTERNAL]  Get
sparsity of a given input.

";

%feature("docstring") casadi::Sqpmethod::expand "[INTERNAL] ";

%feature("docstring") casadi::Sqpmethod::getAdaptorSolverName "[INTERNAL]
Obtain solver name from Adaptor.

";

%feature("docstring") casadi::Sqpmethod "

'sqpmethod' plugin for Nlpsol

A textbook SQPMethod

>List of available options

+-----------------------+-----------+--------------------------------------+
|          Id           |   Type    |             Description              |
+=======================+===========+======================================+
| beta                  | OT_DOUBLE | Line-search parameter, restoration   |
|                       |           | factor of stepsize                   |
+-----------------------+-----------+--------------------------------------+
| c1                    | OT_DOUBLE | Armijo condition, coefficient of     |
|                       |           | decrease in merit                    |
+-----------------------+-----------+--------------------------------------+
| hessian_approximation | OT_STRING | limited-memory|exact                 |
+-----------------------+-----------+--------------------------------------+
| lbfgs_memory          | OT_INT    | Size of L-BFGS memory.               |
+-----------------------+-----------+--------------------------------------+
| max_iter              | OT_INT    | Maximum number of SQP iterations     |
+-----------------------+-----------+--------------------------------------+
| max_iter_ls           | OT_INT    | Maximum number of linesearch         |
|                       |           | iterations                           |
+-----------------------+-----------+--------------------------------------+
| merit_memory          | OT_INT    | Size of memory to store history of   |
|                       |           | merit function values                |
+-----------------------+-----------+--------------------------------------+
| min_step_size         | OT_DOUBLE | The size (inf-norm) of the step size |
|                       |           | should not become smaller than this. |
+-----------------------+-----------+--------------------------------------+
| print_header          | OT_BOOL   | Print the header with problem        |
|                       |           | statistics                           |
+-----------------------+-----------+--------------------------------------+
| print_iteration       | OT_BOOL   | Print the iterations                 |
+-----------------------+-----------+--------------------------------------+
| qpsol                 | OT_STRING | The QP solver to be used by the SQP  |
|                       |           | method                               |
+-----------------------+-----------+--------------------------------------+
| qpsol_options         | OT_DICT   | Options to be passed to the QP       |
|                       |           | solver                               |
+-----------------------+-----------+--------------------------------------+
| regularize            | OT_BOOL   | Automatic regularization of Lagrange |
|                       |           | Hessian.                             |
+-----------------------+-----------+--------------------------------------+
| tol_du                | OT_DOUBLE | Stopping criterion for dual          |
|                       |           | infeasability                        |
+-----------------------+-----------+--------------------------------------+
| tol_pr                | OT_DOUBLE | Stopping criterion for primal        |
|                       |           | infeasibility                        |
+-----------------------+-----------+--------------------------------------+

>List of available options

+-------------------+---------------+-------------------+------------------+
|        Id         |     Type      |    Description    |     Used in      |
+===================+===============+===================+==================+
| beta              | OT_DOUBLE     | Line-search       | casadi::Sqpmetho |
|                   |               | parameter,        | d                |
|                   |               | restoration       |                  |
|                   |               | factor of         |                  |
|                   |               | stepsize          |                  |
+-------------------+---------------+-------------------+------------------+
| c1                | OT_DOUBLE     | Armijo condition, | casadi::Sqpmetho |
|                   |               | coefficient of    | d                |
|                   |               | decrease in merit |                  |
+-------------------+---------------+-------------------+------------------+
| discrete          | OT_BOOLVECTOR | Indicates which   | casadi::Nlpsol   |
|                   |               | of the variables  |                  |
|                   |               | are discrete,     |                  |
|                   |               | i.e. integer-     |                  |
|                   |               | valued            |                  |
+-------------------+---------------+-------------------+------------------+
| eval_errors_fatal | OT_BOOL       | When errors occur | casadi::Nlpsol   |
|                   |               | during evaluation |                  |
|                   |               | of f,g,...,stop   |                  |
|                   |               | the iterations    |                  |
+-------------------+---------------+-------------------+------------------+
| expand            | OT_BOOL       | Replace MX with   | casadi::Nlpsol   |
|                   |               | SX expressions in |                  |
|                   |               | problem           |                  |
|                   |               | formulation       |                  |
|                   |               | [false]           |                  |
+-------------------+---------------+-------------------+------------------+
| hessian_approxima | OT_STRING     | limited-          | casadi::Sqpmetho |
| tion              |               | memory|exact      | d                |
+-------------------+---------------+-------------------+------------------+
| ignore_check_vec  | OT_BOOL       | If set to true,   | casadi::Nlpsol   |
|                   |               | the input shape   |                  |
|                   |               | of F will not be  |                  |
|                   |               | checked.          |                  |
+-------------------+---------------+-------------------+------------------+
| iteration_callbac | OT_FUNCTION   | A function that   | casadi::Nlpsol   |
| k                 |               | will be called at |                  |
|                   |               | each iteration    |                  |
|                   |               | with the solver   |                  |
|                   |               | as input. Check   |                  |
|                   |               | documentation of  |                  |
|                   |               | Callback .        |                  |
+-------------------+---------------+-------------------+------------------+
| iteration_callbac | OT_BOOL       | If set to true,   | casadi::Nlpsol   |
| k_ignore_errors   |               | errors thrown by  |                  |
|                   |               | iteration_callbac |                  |
|                   |               | k will be         |                  |
|                   |               | ignored.          |                  |
+-------------------+---------------+-------------------+------------------+
| iteration_callbac | OT_INT        | Only call the     | casadi::Nlpsol   |
| k_step            |               | callback function |                  |
|                   |               | every few         |                  |
|                   |               | iterations.       |                  |
+-------------------+---------------+-------------------+------------------+
| lbfgs_memory      | OT_INT        | Size of L-BFGS    | casadi::Sqpmetho |
|                   |               | memory.           | d                |
+-------------------+---------------+-------------------+------------------+
| max_iter          | OT_INT        | Maximum number of | casadi::Sqpmetho |
|                   |               | SQP iterations    | d                |
+-------------------+---------------+-------------------+------------------+
| max_iter_ls       | OT_INT        | Maximum number of | casadi::Sqpmetho |
|                   |               | linesearch        | d                |
|                   |               | iterations        |                  |
+-------------------+---------------+-------------------+------------------+
| merit_memory      | OT_INT        | Size of memory to | casadi::Sqpmetho |
|                   |               | store history of  | d                |
|                   |               | merit function    |                  |
|                   |               | values            |                  |
+-------------------+---------------+-------------------+------------------+
| min_step_size     | OT_DOUBLE     | The size (inf-    | casadi::Sqpmetho |
|                   |               | norm) of the step | d                |
|                   |               | size should not   |                  |
|                   |               | become smaller    |                  |
|                   |               | than this.        |                  |
+-------------------+---------------+-------------------+------------------+
| print_header      | OT_BOOL       | Print the header  | casadi::Sqpmetho |
|                   |               | with problem      | d                |
|                   |               | statistics        |                  |
+-------------------+---------------+-------------------+------------------+
| print_iteration   | OT_BOOL       | Print the         | casadi::Sqpmetho |
|                   |               | iterations        | d                |
+-------------------+---------------+-------------------+------------------+
| qpsol             | OT_STRING     | The QP solver to  | casadi::Sqpmetho |
|                   |               | be used by the    | d                |
|                   |               | SQP method        |                  |
+-------------------+---------------+-------------------+------------------+
| qpsol_options     | OT_DICT       | Options to be     | casadi::Sqpmetho |
|                   |               | passed to the QP  | d                |
|                   |               | solver            |                  |
+-------------------+---------------+-------------------+------------------+
| regularize        | OT_BOOL       | Automatic         | casadi::Sqpmetho |
|                   |               | regularization of | d                |
|                   |               | Lagrange Hessian. |                  |
+-------------------+---------------+-------------------+------------------+
| tol_du            | OT_DOUBLE     | Stopping          | casadi::Sqpmetho |
|                   |               | criterion for     | d                |
|                   |               | dual              |                  |
|                   |               | infeasability     |                  |
+-------------------+---------------+-------------------+------------------+
| tol_pr            | OT_DOUBLE     | Stopping          | casadi::Sqpmetho |
|                   |               | criterion for     | d                |
|                   |               | primal            |                  |
|                   |               | infeasibility     |                  |
+-------------------+---------------+-------------------+------------------+
| verbose_init      | OT_BOOL       | Print out timing  | casadi::Nlpsol   |
|                   |               | information about |                  |
|                   |               | the different     |                  |
|                   |               | stages of         |                  |
|                   |               | initialization    |                  |
+-------------------+---------------+-------------------+------------------+
| warn_initial_boun | OT_BOOL       | Warn if the       | casadi::Nlpsol   |
| ds                |               | initial guess     |                  |
|                   |               | does not satisfy  |                  |
|                   |               | LBX and UBX       |                  |
+-------------------+---------------+-------------------+------------------+

Diagrams
--------



C++ includes: sqpmethod.hpp ";

%feature("docstring") casadi::Sqpmethod::generateMeta "[INTERNAL]  Generate
meta-information allowing a user to evaluate a generated function.

";

%feature("docstring") casadi::Sqpmethod::grad_mx "[INTERNAL]  Gradient
expression.

";

%feature("docstring") casadi::Sqpmethod::index_out "[INTERNAL]  Get output
scheme index by name.

";

%feature("docstring") casadi::Sqpmethod::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::Sqpmethod::free_mx "[INTERNAL]  Get free
variables ( MX)

";

%feature("docstring") casadi::Sqpmethod::replaceArg "[INTERNAL]  Replace
0-by-0 inputs.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::Sqpmethod::index_in "[INTERNAL]  Get input
scheme index by name.

";

%feature("docstring") casadi::Sqpmethod::n_out "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::Sqpmethod::get_options "[INTERNAL]  Options.

";

%feature("docstring") casadi::Sqpmethod::has_sprev "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Sqpmethod::symbolicAdjSeed "[INTERNAL]
Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::Sqpmethod::fullJacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Sqpmethod::get_forward "[INTERNAL]  Return
function that calculates forward derivatives forward(nfwd) returns a cached
instance if available, and calls  Function get_forward(int nfwd) if no
cached version is available.

";

%feature("docstring") casadi::Sqpmethod::verbose "[INTERNAL]  Verbose mode?

";

%feature("docstring") casadi::Sqpmethod::eval_mx "[INTERNAL]  Evaluate with
symbolic matrices.

";

%feature("docstring") casadi::Sqpmethod::getAtomicOutput "[INTERNAL]  Get
the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::Sqpmethod::mapsum_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::Sqpmethod::get_function "[INTERNAL] ";

%feature("docstring") casadi::Sqpmethod::get_sparsity_in "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Sqpmethod::log "

>  void casadi::FunctionInternal::log(const std::string &msg) const 
------------------------------------------------------------------------
[INTERNAL] 
Log the status of the solver.

>  void casadi::FunctionInternal::log(const std::string &fcn, const std::string &msg) const 
------------------------------------------------------------------------
[INTERNAL] 
Log the status of the solver, function given.

";

%feature("docstring") casadi::Sqpmethod::mx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Sqpmethod::eval_name "[INTERNAL]  Get name of
the evaluation function.

";

%feature("docstring") casadi::Sqpmethod::set_function "[INTERNAL]  Register
the function for evaluation and statistics gathering

";

%feature("docstring") casadi::Sqpmethod::call "[INTERNAL]   Call a
function, templated.

";

%feature("docstring") casadi::Sqpmethod::grad_sx "[INTERNAL]  Gradient
expression.

";

%feature("docstring") casadi::Sqpmethod::sz_iw "[INTERNAL]  Get required
length of iw field.

";

%feature("docstring") casadi::Sqpmethod::alloc_w "[INTERNAL]  Ensure
required length of w field.

";

%feature("docstring") casadi::Sqpmethod::setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";

%feature("docstring") casadi::Sqpmethod::primalInfeasibility "[INTERNAL] ";

%feature("docstring") casadi::Sqpmethod::size_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Sqpmethod::getJacSparsityHierarchicalSymm "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::Sqpmethod::codegen_decref "[INTERNAL]
Codegen decref for dependencies.

";

%feature("docstring") casadi::Sqpmethod::fwdViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::Sqpmethod::_eval "

>  void casadi::FunctionInternal::_eval(const double **arg, double **res, int *iw, double *w, int mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate numerically.

>  void casadi::FunctionInternal::_eval(const SXElem **arg, SXElem **res, int *iw, SXElem *w, int mem) const

>  void casadi::FunctionInternal::_eval(const bvec_t **arg, bvec_t **res, int *iw, bvec_t *w, int mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

%feature("docstring") casadi::Sqpmethod::map_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::Sqpmethod::replaceFwdSeed "[INTERNAL]
Replace 0-by-0 forward seeds.

";

%feature("docstring") casadi::Sqpmethod::finalize "[INTERNAL]  Finalize
initialization.

";

%feature("docstring") casadi::Sqpmethod::regularize "[INTERNAL] ";

%feature("docstring") casadi::Sqpmethod::mx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Sqpmethod::_get_stats "[INTERNAL]  Get all
statistics

";

%feature("docstring") casadi::Sqpmethod::print "[INTERNAL]  Print.

";

%feature("docstring") casadi::Sqpmethod::simple "[INTERNAL]  Evaluate
numerically, simplied syntax.

";

%feature("docstring") casadi::Sqpmethod::size1_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Sqpmethod::tang_mx "[INTERNAL]  Tangent
expression.

";

%feature("docstring") casadi::Sqpmethod::get_n_reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::Sqpmethod::call_forward "[INTERNAL]  Forward
mode AD, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Sqpmethod::free_sx "[INTERNAL]  Get free
variables (SX)

";

%feature("docstring") casadi::Sqpmethod::forward "[INTERNAL]  Return
function that calculates forward derivatives forward(nfwd) returns a cached
instance if available, and calls  Function get_forward(int nfwd) if no
cached version is available.

";

%feature("docstring") casadi::Sqpmethod::symbolicFwdSeed "[INTERNAL]
Symbolic expressions for the forward seeds.

";

%feature("docstring") casadi::Sqpmethod::set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::Sqpmethod::name_in "[INTERNAL]  Get input
scheme name by index.

";

%feature("docstring") casadi::Sqpmethod::alloc_res "[INTERNAL]  Ensure
required length of res field.

";

%feature("docstring") casadi::Sqpmethod::default_in "[INTERNAL]  Get
default input value.

";

%feature("docstring") casadi::Sqpmethod::checkArg "[INTERNAL]  Check if
input arguments have correct length and dimensions.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::Sqpmethod::print_dimensions "[INTERNAL]
Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::Sqpmethod::has_codegen "[INTERNAL]  Is
codegen supported?

";

%feature("docstring") casadi::Sqpmethod::solve "[INTERNAL] ";

%feature("docstring") casadi::Sqpmethod::get_n_out "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::Sqpmethod::which_depends "[INTERNAL]  Which
variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::Sqpmethod::getAtomicInput "[INTERNAL]  Get
the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::Sqpmethod::sz_w "[INTERNAL]  Get required
length of w field.

";

%feature("docstring") casadi::Sqpmethod::n_in "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::Sqpmethod::solve_QP "[INTERNAL] ";

%feature("docstring") casadi::Sqpmethod::gradient "[INTERNAL]  Return
gradient function.

";

%feature("docstring") casadi::Sqpmethod::getJacobian "[INTERNAL]  Return
Jacobian function.

";

%feature("docstring") casadi::Sqpmethod::getHessian "[INTERNAL]  Return
Hessian function.

";

%feature("docstring") casadi::Sqpmethod::getFullJacobian "[INTERNAL]
Return Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Sqpmethod::getReducedHessian "[INTERNAL] ";

%feature("docstring") casadi::Sqpmethod::type_name "[INTERNAL]  Get type
name.

";

%feature("docstring") casadi::Sqpmethod::repr "[INTERNAL]  Print.

";

%feature("docstring") casadi::Sqpmethod::getAlgorithmSize "[INTERNAL]  Get
the number of atomic operations.

";

%feature("docstring") casadi::Sqpmethod::jacobian "[INTERNAL]  Return
Jacobian function.

";

%feature("docstring") casadi::Sqpmethod::sz_res "[INTERNAL]  Get required
length of res field.

";

%feature("docstring") casadi::Sqpmethod::replaceRes "[INTERNAL]  Replace
0-by-0 outputs.

";

%feature("docstring") casadi::Sqpmethod::free_memory "[INTERNAL]  Free
memory block.

";

%feature("docstring") casadi::Sqpmethod::create_function "[INTERNAL]
Create an oracle function

";

%feature("docstring") casadi::Sqpmethod::alloc_arg "[INTERNAL]  Ensure
required length of arg field.

";

%feature("docstring") casadi::Sqpmethod::getWorkSize "[INTERNAL]  Get the
length of the work vector.

";

%feature("docstring") casadi::Sqpmethod::get_stats "[INTERNAL]  Get all
statistics.

";

%feature("docstring") casadi::Sqpmethod::monitored "[INTERNAL] ";

%feature("docstring") casadi::Sqpmethod::reset_h "[INTERNAL] ";

%feature("docstring") casadi::Sqpmethod::integer_support "[INTERNAL]  Can
discrete variables be treated.

";

%feature("docstring") casadi::Sqpmethod::oracle "[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::Sqpmethod::sx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Sqpmethod::getConic "[INTERNAL]  Access
Conic.

";

%feature("docstring") casadi::Sqpmethod::eval "[INTERNAL]  Evaluate
numerically.

";

%feature("docstring") casadi::Sqpmethod::size1_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::Sqpmethod::get_name_out "[INTERNAL]  Names of
function input and outputs.

";

%feature("docstring") casadi::Sqpmethod::sp_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode, sparsity propagation.

";

%feature("docstring") casadi::Sqpmethod::getAtomicOperation "[INTERNAL]
Get an atomic operation operator index.

";

%feature("docstring") casadi::Sqpmethod::reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::Sqpmethod::getPartition "[INTERNAL]  Get the
unidirectional or bidirectional partition.

";

%feature("docstring") casadi::Sqpmethod::eval_sx "[INTERNAL]  Evaluate with
symbolic scalars.

";

%feature("docstring") casadi::Sqpmethod::matchingRes "[INTERNAL]  Check if
output arguments that needs to be replaced.

";

%feature("docstring") casadi::Sqpmethod::print_option "[INTERNAL]  Print
all information there is to know about a certain option.

";

%feature("docstring") casadi::Sqpmethod::hessian "[INTERNAL]  Return
Hessian function.

";

%feature("docstring") casadi::Sqpmethod::get_n_forward "[INTERNAL]  Return
function that calculates forward derivatives forward(nfwd) returns a cached
instance if available, and calls  Function get_forward(int nfwd) if no
cached version is available.

";

%feature("docstring") casadi::Sqpmethod::simplifiedCall "[INTERNAL]  Use
simplified signature.

";

%feature("docstring") casadi::Sqpmethod::init_memory "[INTERNAL]  Initalize
memory block.

";

%feature("docstring") casadi::Sqpmethod::sz_arg "[INTERNAL]  Get required
length of arg field.

";

%feature("docstring") casadi::Sqpmethod::hasFullJacobian "[INTERNAL]
Return Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Sqpmethod::n_mem "[INTERNAL]  Maximum number
of memory objects.

";

%feature("docstring") casadi::Sqpmethod::sp_fwd "[INTERNAL]  Propagate
sparsity forward.

";

%feature("docstring") casadi::Sqpmethod::addShorthand "[INTERNAL]  Generate
shorthand macro.

";

%feature("docstring") casadi::Sqpmethod::getRegularization "[INTERNAL] ";

%feature("docstring") casadi::Sqpmethod::generate_lifted "[INTERNAL]
Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::Sqpmethod::hasDerivative "[INTERNAL]  Can
derivatives be calculated in any way?

";

%feature("docstring") casadi::Sqpmethod::print_fstats "[INTERNAL]  Print
statistics.

";

%feature("docstring") casadi::Sqpmethod::name "[INTERNAL]  Name of the
function.

";

%feature("docstring") casadi::Sqpmethod::size_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Sqpmethod::signature "[INTERNAL]  Code
generate the function.

";

%feature("docstring") casadi::Sqpmethod::generateDeclarations "[INTERNAL]
Generate code for the declarations of the C function.

";

%feature("docstring") casadi::Sqpmethod::_setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";

%feature("docstring") casadi::Sqpmethod::calc_function "[INTERNAL] ";

%feature("docstring") casadi::Sqpmethod::symbolicOutput "[INTERNAL]  Get a
vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::Sqpmethod::plugin_name "[INTERNAL] ";

%feature("docstring") casadi::Sqpmethod::sparsity_jac "[INTERNAL]  Get, if
necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Sqpmethod::construct "[INTERNAL]  Construct
Prepares the function for evaluation.

";

%feature("docstring") casadi::Sqpmethod::call_reverse "[INTERNAL]  Reverse
mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Sqpmethod::generate_dependencies "[INTERNAL]
Export / Generate C code for the generated functions.

";

%feature("docstring") casadi::Sqpmethod::checkRes "[INTERNAL]  Check if
output arguments have correct length and dimensions.

";

%feature("docstring") casadi::Sqpmethod::generateBody "[INTERNAL]  Generate
code for the function body.

";

%feature("docstring") casadi::Sqpmethod::getJacSparsity "[INTERNAL]
Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Sqpmethod::alloc_iw "[INTERNAL]  Ensure
required length of iw field.

";

%feature("docstring") casadi::Sqpmethod::has_function "[INTERNAL] ";

%feature("docstring") casadi::Sqpmethod::get_n_in "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::Sqpmethod::printIteration "

>  void casadi::Sqpmethod::printIteration(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print iteration header.

>  void casadi::Sqpmethod::printIteration(std::ostream &stream, int iter, double obj, double pr_inf, double du_inf, double dx_norm, double reg, int ls_trials, bool ls_success) const 
------------------------------------------------------------------------
[INTERNAL] 
Print iteration.

";

%feature("docstring") casadi::Sqpmethod::setOptionsFromFile "[INTERNAL]
Read options from parameter xml.

";

%feature("docstring") casadi::Sqpmethod::get_name_in "[INTERNAL]  Names of
function input and outputs.

";

%feature("docstring") casadi::Sqpmethod::sx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Sqpmethod::clear_memory "[INTERNAL]  Clear
all memory (called from destructor)

";

%feature("docstring") casadi::Sqpmethod::slice "[INTERNAL]  returns a new
function with a selection of inputs/outputs of the original

";

%feature("docstring") casadi::Sqpmethod::Sqpmethod "[INTERNAL] ";

%feature("docstring") casadi::Sqpmethod::memory "[INTERNAL]  Memory
objects.

";

%feature("docstring") casadi::Sqpmethod::_set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::Sqpmethod::nnz_out "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::Sqpmethod::generateFunction "[INTERNAL]
Generate code the function.

";

%feature("docstring") casadi::Sqpmethod::~Sqpmethod "[INTERNAL] ";

%feature("docstring") casadi::Sqpmethod::replaceAdjSeed "[INTERNAL]
Replace 0-by-0 reverse seeds.

";

%feature("docstring") casadi::Sqpmethod::factory "[INTERNAL] ";

%feature("docstring") casadi::Sqpmethod::is_a "[INTERNAL]  Check if the
function is of a particular type.

";


// File: classcasadi_1_1Logger_1_1Stream.xml
%feature("docstring") casadi::Logger::Stream "C++ includes:
casadi_logger.hpp ";

%feature("docstring") casadi::Logger::Stream::Stream "";


// File: classcasadi_1_1Logger_1_1Streambuf.xml
%feature("docstring") casadi::Logger::Streambuf "C++ includes:
casadi_logger.hpp ";

%feature("docstring") casadi::Logger::Streambuf::Streambuf "";


// File: classcasadi_1_1SubAssign.xml


// File: classcasadi_1_1SubIndex.xml
%feature("docstring") casadi::SubIndex "

SubIndex class for Matrix Same as the above class but for single argument
return for operator() Joel Andersson

C++ includes: submatrix.hpp ";

%feature("docstring") casadi::SubIndex::SubIndex "

Constructor.

";


// File: classcasadi_1_1SubMatrix.xml
%feature("docstring") casadi::SubMatrix "

SubMatrix class for Matrix SubMatrix is the return type for operator() of
the Matrix class, it allows access to the value as well as changing the
parent object Joel Andersson

C++ includes: submatrix.hpp ";

%feature("docstring") casadi::SubMatrix::SubMatrix "

Constructor.

";


// File: classcasadi_1_1SubRef.xml


// File: classcasadi_1_1Switch.xml
%feature("docstring") casadi::Switch::slice "[INTERNAL]  returns a new
function with a selection of inputs/outputs of the original

";

%feature("docstring") casadi::Switch::call_forward "[INTERNAL]  Forward
mode AD, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Switch::eval_mx "[INTERNAL]  Evaluate with
symbolic matrices.

";

%feature("docstring") casadi::Switch::get_n_forward "[INTERNAL]  Generate a
function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::Switch::size2_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Switch::symbolicAdjSeed "[INTERNAL]  Symbolic
expressions for the adjoint seeds.

";

%feature("docstring") casadi::Switch::codegen_incref "[INTERNAL]  Codegen
incref for dependencies.

";

%feature("docstring") casadi::Switch::alloc_w "[INTERNAL]  Ensure required
length of w field.

";

%feature("docstring") casadi::Switch::eval "[INTERNAL]  Evaluate
numerically, work vectors given.

";

%feature("docstring") casadi::Switch::fwdViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::Switch::sparsity_in "[INTERNAL]  Get sparsity
of a given input.

";

%feature("docstring") casadi::Switch::getJacSparsity "[INTERNAL]  Generate
the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Switch::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::Switch::size1_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Switch::which_depends "[INTERNAL]  Which
variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::Switch::alloc_iw "[INTERNAL]  Ensure required
length of iw field.

";

%feature("docstring") casadi::Switch::get_forward "[INTERNAL]  Generate a
function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::Switch::matchingArg "[INTERNAL]  Check if
input arguments that needs to be replaced.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::Switch::is_a "[INTERNAL]  Check if the
function is of a particular type.

";

%feature("docstring") casadi::Switch::getAlgorithmSize "[INTERNAL]  Get the
number of atomic operations.

";

%feature("docstring") casadi::Switch::addDependency "[INTERNAL]  Add a
dependent function.

";

%feature("docstring") casadi::Switch::getAtomicOperation "[INTERNAL]  Get
an atomic operation operator index.

";

%feature("docstring") casadi::Switch::call "[INTERNAL]   Call a function,
templated.

";

%feature("docstring") casadi::Switch::nnz_out "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::Switch::get_name_in "[INTERNAL]  Names of
function input and outputs.

";

%feature("docstring") casadi::Switch::jit_dependencies "[INTERNAL]   Jit
dependencies.

";

%feature("docstring") casadi::Switch::_eval "

>  void casadi::FunctionInternal::_eval(const double **arg, double **res, int *iw, double *w, int mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate numerically.

>  void casadi::FunctionInternal::_eval(const SXElem **arg, SXElem **res, int *iw, SXElem *w, int mem) const

>  void casadi::FunctionInternal::_eval(const bvec_t **arg, bvec_t **res, int *iw, bvec_t *w, int mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

%feature("docstring") casadi::Switch::numel_out "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::Switch::map_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::Switch::set_temp "[INTERNAL]  Set the
(temporary) work vectors.

";

%feature("docstring") casadi::Switch::free_memory "[INTERNAL]  Free memory
block.

";

%feature("docstring") casadi::Switch::log "

>  void casadi::FunctionInternal::log(const std::string &msg) const 
------------------------------------------------------------------------
[INTERNAL] 
Log the status of the solver.

>  void casadi::FunctionInternal::log(const std::string &fcn, const std::string &msg) const 
------------------------------------------------------------------------
[INTERNAL] 
Log the status of the solver, function given.

";

%feature("docstring") casadi::Switch::adjViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::Switch::n_nodes "[INTERNAL]  Number of nodes
in the algorithm.

";

%feature("docstring") casadi::Switch::sp_fwd "[INTERNAL]  Propagate
sparsity forward.

";

%feature("docstring") casadi::Switch::free_sx "[INTERNAL]  Get free
variables (SX)

";

%feature("docstring") casadi::Switch::getJacobian "[INTERNAL]  Return
Jacobian function.

";

%feature("docstring") casadi::Switch::has_codegen "[INTERNAL]  Is codegen
supported?

";

%feature("docstring") casadi::Switch::setJacobian "[INTERNAL]  Return
Jacobian function.

";

%feature("docstring") casadi::Switch::print_option "[INTERNAL]  Print all
information there is to know about a certain option.

";

%feature("docstring") casadi::Switch::getWorkSize "[INTERNAL]  Get the
length of the work vector.

";

%feature("docstring") casadi::Switch::~Switch "[INTERNAL]  Destructor.

";

%feature("docstring") casadi::Switch::factory "[INTERNAL] ";

%feature("docstring") casadi::Switch::simplifiedCall "[INTERNAL]  Use
simplified signature.

";

%feature("docstring") casadi::Switch::has_spfwd "[INTERNAL]  Is the class
able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Switch::sx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Switch::init "[INTERNAL]  Initialize.

";

%feature("docstring") casadi::Switch::verbose "[INTERNAL]  Verbose mode?

";

%feature("docstring") casadi::Switch::checkRes "[INTERNAL]  Check if output
arguments have correct length and dimensions.

";

%feature("docstring") casadi::Switch::tang_mx "[INTERNAL]  Tangent
expression.

";

%feature("docstring") casadi::Switch::construct "[INTERNAL]  Construct
Prepares the function for evaluation.

";

%feature("docstring") casadi::Switch::_call "[INTERNAL]   Call a function,
overloaded.

";

%feature("docstring") casadi::Switch::sz_work "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") casadi::Switch::clear_memory "[INTERNAL]  Clear all
memory (called from destructor)

";

%feature("docstring") casadi::Switch::get_name_out "[INTERNAL]  Names of
function input and outputs.

";

%feature("docstring") casadi::Switch::index_out "[INTERNAL]  Get output
scheme index by name.

";

%feature("docstring") casadi::Switch::sz_iw "[INTERNAL]  Get required
length of iw field.

";

%feature("docstring") casadi::Switch::size_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Switch::name_in "[INTERNAL]  Get input scheme
name by index.

";

%feature("docstring") casadi::Switch::get_n_reverse "[INTERNAL]  Generate a
function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::Switch::name "[INTERNAL]  Name of the
function.

";

%feature("docstring") casadi::Switch::get_stats "[INTERNAL]  Get all
statistics

";

%feature("docstring") casadi::Switch::size2_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Switch::sz_w "[INTERNAL]  Get required length
of w field.

";

%feature("docstring") casadi::Switch::matchingRes "[INTERNAL]  Check if
output arguments that needs to be replaced.

";

%feature("docstring") casadi::Switch::_get_stats "[INTERNAL]  Get all
statistics

";

%feature("docstring") casadi::Switch::alloc "[INTERNAL]  Ensure work
vectors long enough to evaluate function.

";

%feature("docstring") casadi::Switch::set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::Switch::n_in "[INTERNAL]  Number of function
inputs and outputs.

";

%feature("docstring") casadi::Switch::sx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Switch::getFullJacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Switch::getAtomicInputReal "[INTERNAL]  Get
the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::Switch::name_out "[INTERNAL]  Get output
scheme name by index.

";

%feature("docstring") casadi::Switch::replaceAdjSeed "[INTERNAL]  Replace
0-by-0 reverse seeds.

";

%feature("docstring") casadi::Switch::n_mem "[INTERNAL]  Maximum number of
memory objects.

";

%feature("docstring") casadi::Switch::mx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Switch::getJacSparsityGen "[INTERNAL]  Get
the sparsity pattern, forward mode.

";

%feature("docstring") casadi::Switch::sz_res "[INTERNAL]  Get required
length of res field.

";

%feature("docstring") casadi::Switch::sparsity_jac "[INTERNAL]  Get, if
necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Switch::tang_sx "[INTERNAL]  Tangent
expression.

";

%feature("docstring") casadi::Switch::get_sparsity_in "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Switch::wrap "[INTERNAL]  Wrap in an Function
instance consisting of only one MX call.

";

%feature("docstring") casadi::Switch::addShorthand "[INTERNAL]  Generate
shorthand macro.

";

%feature("docstring") casadi::Switch::hasFullJacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Switch::numel_in "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::Switch::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::Switch::generate_dependencies "[INTERNAL]
Export / Generate C code for the dependency function.

";

%feature("docstring") casadi::Switch::size_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Switch::sparsity_out "[INTERNAL]  Get
sparsity of a given output.

";

%feature("docstring") casadi::Switch::size1_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Switch::hessian "[INTERNAL]  Return Hessian
function.

";

%feature("docstring") casadi::Switch::print "[INTERNAL]  Print description.

";

%feature("docstring") casadi::Switch::self "[INTERNAL]  Get a public class
instance.

";

%feature("docstring") casadi::Switch::generateFunction "[INTERNAL]
Generate code the function.

";

%feature("docstring") casadi::Switch::getJacSparsityHierarchicalSymm "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::Switch::sp_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode, sparsity propagation.

";

%feature("docstring") casadi::Switch::grad_mx "[INTERNAL]  Gradient
expression.

";

%feature("docstring") casadi::Switch::_set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::Switch::default_in "[INTERNAL]  Get default
input value.

";

%feature("docstring") casadi::Switch::eval_name "[INTERNAL]  Get name of
the evaluation function.

";

%feature("docstring") casadi::Switch::signature "[INTERNAL]  Code generate
the function.

";

%feature("docstring") casadi::Switch::mx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Switch::getAtomicInput "[INTERNAL]  Get the
(integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::Switch::get_options "[INTERNAL]  Options.

";

%feature("docstring") casadi::Switch::jac_sx "[INTERNAL]  Jacobian
expression.

";

%feature("docstring") casadi::Switch::has_sprev "[INTERNAL]  Is the class
able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Switch::init_memory "[INTERNAL]  Initalize
memory block.

";

%feature("docstring") casadi::Switch::set_jac_sparsity "[INTERNAL]
Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Switch::alloc_arg "[INTERNAL]  Ensure
required length of arg field.

";

%feature("docstring") casadi::Switch::get_sparsity_out "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Switch::getAtomicOutput "[INTERNAL]  Get the
(integer) output argument of an atomic operation.

";

%feature("docstring") casadi::Switch::get_function "[INTERNAL] ";

%feature("docstring") casadi::Switch::getAdaptorSolverName "[INTERNAL]
Obtain solver name from Adaptor.

";

%feature("docstring") casadi::Switch::eval_sx "[INTERNAL]  evaluate
symbolically while also propagating directional derivatives

";

%feature("docstring") casadi::Switch::checkArg "[INTERNAL]  Check if input
arguments have correct length and dimensions.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::Switch::getPartition "[INTERNAL]  Get the
unidirectional or bidirectional partition.

";

%feature("docstring") casadi::Switch::sp_rev "[INTERNAL]  Propagate
sparsity backwards.

";

%feature("docstring") casadi::Switch::simple "[INTERNAL]  Evaluate
numerically, simplied syntax.

";

%feature("docstring") casadi::Switch::has_free "[INTERNAL]  Does the
function have free variables.

";

%feature("docstring") casadi::Switch::codegen_name "[INTERNAL]  Get name in
codegen.

";

%feature("docstring") casadi::Switch::codegen_decref "[INTERNAL]  Codegen
decref for dependencies.

";

%feature("docstring") casadi::Switch::alloc_res "[INTERNAL]  Ensure
required length of res field.

";

%feature("docstring") casadi::Switch::get_n_out "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::Switch::grad_sx "[INTERNAL]  Gradient
expression.

";

%feature("docstring") casadi::Switch::Switch "[INTERNAL]  Constructor
(generic switch)

";

%feature("docstring") casadi::Switch::alloc_memory "[INTERNAL]  Create
memory block.

";

%feature("docstring") casadi::Switch::symbolicFwdSeed "[INTERNAL]  Symbolic
expressions for the forward seeds.

";

%feature("docstring") casadi::Switch::type_name "[INTERNAL]  Get type name.

";

%feature("docstring") casadi::Switch::print_dimensions "[INTERNAL]  Print
dimensions of inputs and outputs.

";

%feature("docstring") casadi::Switch::replaceArg "[INTERNAL]  Replace
0-by-0 inputs.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::Switch::mapsum_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::Switch::reverse "[INTERNAL]  Return function
that calculates adjoint derivatives reverse(nadj) returns a cached instance
if available, and calls  Function get_reverse(int nadj) if no cached version
is available.

";

%feature("docstring") casadi::Switch::checkInputs "[INTERNAL]  Check if the
numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::Switch::release "[INTERNAL]  Release a memory
object.

";

%feature("docstring") casadi::Switch::tangent "[INTERNAL]  Return tangent
function.

";

%feature("docstring") casadi::Switch::n_out "[INTERNAL]  Number of function
inputs and outputs.

";

%feature("docstring") casadi::Switch::getTangent "[INTERNAL]  Return
tangent function.

";

%feature("docstring") casadi::Switch::index_in "[INTERNAL]  Get input
scheme index by name.

";

%feature("docstring") casadi::Switch "[INTERNAL]   Switch statement Joel
Andersson

C++ includes: switch.hpp ";

%feature("docstring") casadi::Switch::repr "[INTERNAL]  Print.

";

%feature("docstring") casadi::Switch::hasDerivative "[INTERNAL]  Can
derivatives be calculated in any way?

";

%feature("docstring") casadi::Switch::gradient "[INTERNAL]  Return gradient
function.

";

%feature("docstring") casadi::Switch::getJacSparsityHierarchical "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::Switch::get_n_in "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::Switch::setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";

%feature("docstring") casadi::Switch::finalize "[INTERNAL]  Finalize the
object creation This function, which visits the class hierarchy in reverse
order is run after init() has been completed.

";

%feature("docstring") casadi::Switch::print_options "[INTERNAL]  Print list
of options.

";

%feature("docstring") casadi::Switch::sz_arg "[INTERNAL]  Get required
length of arg field.

";

%feature("docstring") casadi::Switch::getHessian "[INTERNAL]  Return
Hessian function.

";

%feature("docstring") casadi::Switch::memory "[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::Switch::free_mx "[INTERNAL]  Get free
variables ( MX)

";

%feature("docstring") casadi::Switch::replaceRes "[INTERNAL]  Replace
0-by-0 outputs.

";

%feature("docstring") casadi::Switch::ad_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::Switch::generateBody "[INTERNAL]  Generate
code for the body of the C function.

";

%feature("docstring") casadi::Switch::generateMeta "[INTERNAL]  Generate
meta-information allowing a user to evaluate a generated function.

";

%feature("docstring") casadi::Switch::checkout "[INTERNAL]  Checkout a
memory object.

";

%feature("docstring") casadi::Switch::symbolicOutput "[INTERNAL]  Get a
vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::Switch::_set_temp "[INTERNAL]  Set the
(temporary) work vectors.

";

%feature("docstring") casadi::Switch::jacobian "[INTERNAL]  Return Jacobian
function.

";

%feature("docstring") casadi::Switch::getGradient "[INTERNAL]  Return
gradient function.

";

%feature("docstring") casadi::Switch::print_free "[INTERNAL]  Print free
variables.

";

%feature("docstring") casadi::Switch::has_function "[INTERNAL] ";

%feature("docstring") casadi::Switch::forward "[INTERNAL]  Return function
that calculates forward derivatives forward(nfwd) returns a cached instance
if available, and calls  Function get_forward(int nfwd) if no cached version
is available.

";

%feature("docstring") casadi::Switch::oracle "[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::Switch::jac_mx "[INTERNAL]  Jacobian
expression.

";

%feature("docstring") casadi::Switch::call_reverse "[INTERNAL]  Reverse
mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Switch::hess_sx "[INTERNAL]  Hessian
expression.

";

%feature("docstring") casadi::Switch::generate_lifted "[INTERNAL]  Extract
the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::Switch::nnz_in "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::Switch::get_reverse "[INTERNAL]  Generate a
function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::Switch::replaceFwdSeed "[INTERNAL]  Replace
0-by-0 forward seeds.

";

%feature("docstring") casadi::Switch::fullJacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Switch::_setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";

%feature("docstring") casadi::Switch::generateDeclarations "[INTERNAL]
Generate code for the declarations of the C function.

";


// File: classcasadi_1_1SXFunction.xml


// File: classcasadi_1_1SymbolicMX.xml


// File: classcasadi_1_1SymbolicQr.xml
%feature("docstring") casadi::SymbolicQr::grad_mx "[INTERNAL]  Gradient
expression.

";

%feature("docstring") casadi::SymbolicQr::tang_mx "[INTERNAL]  Tangent
expression.

";

%feature("docstring") casadi::SymbolicQr::verbose "[INTERNAL]  Verbose
mode?

";

%feature("docstring") casadi::SymbolicQr::getJacSparsityGen "[INTERNAL]
Get the sparsity pattern, forward mode.

";

%feature("docstring") casadi::SymbolicQr::free_memory "[INTERNAL]  Free
memory block.

";

%feature("docstring") casadi::SymbolicQr::ad_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::SymbolicQr::sx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::SymbolicQr::hessian "[INTERNAL]  Return
Hessian function.

";

%feature("docstring") casadi::SymbolicQr::get_sparsity_out "[INTERNAL]  Get
sparsity of a given output.

";

%feature("docstring") casadi::SymbolicQr::getWorkSize "[INTERNAL]  Get the
length of the work vector.

";

%feature("docstring") casadi::SymbolicQr::eval "[INTERNAL]  Evaluate
numerically.

";

%feature("docstring") casadi::SymbolicQr::linsol_eval_sx "[INTERNAL]
Evaluate symbolically (SX)

";

%feature("docstring") casadi::SymbolicQr::get_function "[INTERNAL] ";

%feature("docstring") casadi::SymbolicQr::rank "[INTERNAL]   Matrix rank.

";

%feature("docstring") casadi::SymbolicQr::getGradient "[INTERNAL]  Return
gradient function.

";

%feature("docstring") casadi::SymbolicQr::fwdViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::SymbolicQr::sz_res "[INTERNAL]  Get required
length of res field.

";

%feature("docstring") casadi::SymbolicQr::hasFullJacobian "[INTERNAL]
Return Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::SymbolicQr::sparsity_jac "[INTERNAL]  Get, if
necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::SymbolicQr::sparsity_out "[INTERNAL]  Get
sparsity of a given output.

";

%feature("docstring") casadi::SymbolicQr::free_sx "[INTERNAL]  Get free
variables (SX)

";

%feature("docstring") casadi::SymbolicQr::simple "[INTERNAL]  Evaluate
numerically, simplied syntax.

";

%feature("docstring") casadi::SymbolicQr::eval_sx "[INTERNAL]  Evaluate
with symbolic scalars.

";

%feature("docstring") casadi::SymbolicQr::type_name "[INTERNAL]  Get type
name.

";

%feature("docstring") casadi::SymbolicQr::index_in "[INTERNAL]  Get input
scheme index by name.

";

%feature("docstring") casadi::SymbolicQr::jac_mx "[INTERNAL]  Jacobian
expression.

";

%feature("docstring") casadi::SymbolicQr::has_codegen "[INTERNAL]  Is
codegen supported?

";

%feature("docstring") casadi::SymbolicQr::call "[INTERNAL]   Call a
function, templated.

";

%feature("docstring") casadi::SymbolicQr::codegen_incref "[INTERNAL]
Codegen incref for dependencies.

";

%feature("docstring") casadi::SymbolicQr::clear_memory "[INTERNAL]  Clear
all memory (called from destructor)

";

%feature("docstring") casadi::SymbolicQr::get_n_reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::SymbolicQr::symbolicFwdSeed "[INTERNAL]
Symbolic expressions for the forward seeds.

";

%feature("docstring") casadi::SymbolicQr::name "[INTERNAL]  Name of the
function.

";

%feature("docstring") casadi::SymbolicQr::size_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::SymbolicQr::n_mem "[INTERNAL]  Maximum number
of memory objects.

";

%feature("docstring") casadi::SymbolicQr::nnz_in "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::SymbolicQr::neig "[INTERNAL]  Number of
negative eigenvalues.

";

%feature("docstring") casadi::SymbolicQr::setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";

%feature("docstring") casadi::SymbolicQr::SymbolicQr "[INTERNAL] ";

%feature("docstring") casadi::SymbolicQr::getAtomicOperation "[INTERNAL]
Get an atomic operation operator index.

";

%feature("docstring") casadi::SymbolicQr::setJacobian "[INTERNAL]  Return
Jacobian function.

";

%feature("docstring") casadi::SymbolicQr::solve_cholesky "[INTERNAL]
Solve Cholesky.

";

%feature("docstring") casadi::SymbolicQr::getAtomicInput "[INTERNAL]  Get
the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::SymbolicQr::get_options "[INTERNAL]  Options.

";

%feature("docstring") casadi::SymbolicQr::set_temp "[INTERNAL]  Set the
(temporary) work vectors.

";

%feature("docstring") casadi::SymbolicQr::symbolicAdjSeed "[INTERNAL]
Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::SymbolicQr::repr "[INTERNAL]  Print.

";

%feature("docstring") casadi::SymbolicQr::mx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::SymbolicQr::gradient "[INTERNAL]  Return
gradient function.

";

%feature("docstring") casadi::SymbolicQr::eval_name "[INTERNAL]  Get name
of the evaluation function.

";

%feature("docstring") casadi::SymbolicQr::size1_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::SymbolicQr::_call "[INTERNAL]   Call a
function, overloaded.

";

%feature("docstring") casadi::SymbolicQr::factorize "[INTERNAL]  Factorize
the linear system.

";

%feature("docstring") casadi::SymbolicQr::generate_lifted "[INTERNAL]
Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::SymbolicQr::memory "[INTERNAL]  Memory
objects.

";

%feature("docstring") casadi::SymbolicQr::sz_iw "[INTERNAL]  Get required
length of iw field.

";

%feature("docstring") casadi::SymbolicQr::fullJacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::SymbolicQr::which_depends "[INTERNAL]  Which
variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::SymbolicQr::_setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";

%feature("docstring") casadi::SymbolicQr::log "

>  void casadi::FunctionInternal::log(const std::string &msg) const 
------------------------------------------------------------------------
[INTERNAL] 
Log the status of the solver.

>  void casadi::FunctionInternal::log(const std::string &fcn, const std::string &msg) const 
------------------------------------------------------------------------
[INTERNAL] 
Log the status of the solver, function given.

";

%feature("docstring") casadi::SymbolicQr::has_function "[INTERNAL] ";

%feature("docstring") casadi::SymbolicQr::n_in "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::SymbolicQr::jac_sx "[INTERNAL]  Jacobian
expression.

";

%feature("docstring") casadi::SymbolicQr::adjViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::SymbolicQr::set_jac_sparsity "[INTERNAL]
Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::SymbolicQr::generateBody "[INTERNAL]
Generate code for the function body.

";

%feature("docstring") casadi::SymbolicQr::wrap "[INTERNAL]  Wrap in an
Function instance consisting of only one MX call.

";

%feature("docstring") casadi::SymbolicQr::get_n_out "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::SymbolicQr::alloc_res "[INTERNAL]  Ensure
required length of res field.

";

%feature("docstring") casadi::SymbolicQr::sparsity_in "[INTERNAL]  Get
sparsity of a given input.

";

%feature("docstring") casadi::SymbolicQr::map_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::SymbolicQr::factory "[INTERNAL] ";

%feature("docstring") casadi::SymbolicQr::print_dimensions "[INTERNAL]
Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::SymbolicQr::construct "[INTERNAL]  Construct
Prepares the function for evaluation.

";

%feature("docstring") casadi::SymbolicQr::_set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::SymbolicQr::matchingArg "[INTERNAL]  Check if
input arguments that needs to be replaced.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::SymbolicQr::addDependency "[INTERNAL]  Add a
dependent function.

";

%feature("docstring") casadi::SymbolicQr::name_out "[INTERNAL]  Get output
scheme name by index.

";

%feature("docstring") casadi::SymbolicQr::linsol_cholesky "[INTERNAL]  Get
Cholesky factor.

";

%feature("docstring") casadi::SymbolicQr::print_free "[INTERNAL]  Print
free variables.

";

%feature("docstring") casadi::SymbolicQr::default_in "[INTERNAL]  Get
default input value.

";

%feature("docstring") casadi::SymbolicQr::pivoting "[INTERNAL] ";

%feature("docstring") casadi::SymbolicQr::self "[INTERNAL]  Get a public
class instance.

";

%feature("docstring") casadi::SymbolicQr::alloc_arg "[INTERNAL]  Ensure
required length of arg field.

";

%feature("docstring") casadi::SymbolicQr::nnz_out "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::SymbolicQr::init_memory "[INTERNAL]
Initalize memory block.

";

%feature("docstring") casadi::SymbolicQr::checkArg "[INTERNAL]  Check if
input arguments have correct length and dimensions.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::SymbolicQr::eval_mx "[INTERNAL]  Evaluate
with symbolic matrices.

";

%feature("docstring") casadi::SymbolicQr::name_in "[INTERNAL]  Get input
scheme name by index.

";

%feature("docstring") casadi::SymbolicQr::_set_temp "[INTERNAL]  Set the
(temporary) work vectors.

";

%feature("docstring") casadi::SymbolicQr::_eval "

>  void casadi::FunctionInternal::_eval(const double **arg, double **res, int *iw, double *w, int mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate numerically.

>  void casadi::FunctionInternal::_eval(const SXElem **arg, SXElem **res, int *iw, SXElem *w, int mem) const

>  void casadi::FunctionInternal::_eval(const bvec_t **arg, bvec_t **res, int *iw, bvec_t *w, int mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

%feature("docstring") casadi::SymbolicQr::checkout "[INTERNAL]  Checkout a
memory object.

";

%feature("docstring") casadi::SymbolicQr::getPartition "[INTERNAL]  Get the
unidirectional or bidirectional partition.

";

%feature("docstring") casadi::SymbolicQr::codegen_name "[INTERNAL]  Get
name in codegen.

";

%feature("docstring") casadi::SymbolicQr::~SymbolicQr "[INTERNAL] ";

%feature("docstring") casadi::SymbolicQr::finalize "[INTERNAL]  Finalize
the object creation This function, which visits the class hierarchy in
reverse order is run after init() has been completed.

";

%feature("docstring") casadi::SymbolicQr::symbolicOutput "[INTERNAL]  Get a
vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::SymbolicQr::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::SymbolicQr::generateFunction "[INTERNAL]
Generate code the function.

";

%feature("docstring") casadi::SymbolicQr::generateDeclarations "[INTERNAL]
Generate code for the declarations of the C function.

";

%feature("docstring") casadi::SymbolicQr::get_reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::SymbolicQr::solve "[INTERNAL] ";

%feature("docstring") casadi::SymbolicQr::matchingRes "[INTERNAL]  Check if
output arguments that needs to be replaced.

";

%feature("docstring") casadi::SymbolicQr::alloc_w "[INTERNAL]  Ensure
required length of w field.

";

%feature("docstring") casadi::SymbolicQr::getJacobian "[INTERNAL]  Return
Jacobian function.

";

%feature("docstring") casadi::SymbolicQr::sz_w "[INTERNAL]  Get required
length of w field.

";

%feature("docstring") casadi::SymbolicQr::size1_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::SymbolicQr::size2_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::SymbolicQr::n_nodes "[INTERNAL]  Number of
nodes in the algorithm.

";

%feature("docstring") casadi::SymbolicQr::linsol_cholesky_sparsity "[INTERNAL]   Sparsity pattern of the cholesky factors.

";

%feature("docstring") casadi::SymbolicQr::getHessian "[INTERNAL]  Return
Hessian function.

";

%feature("docstring") casadi::SymbolicQr::get_forward "[INTERNAL]  Return
function that calculates forward derivatives forward(nfwd) returns a cached
instance if available, and calls  Function get_forward(int nfwd) if no
cached version is available.

";

%feature("docstring") casadi::SymbolicQr::alloc "[INTERNAL]  Ensure work
vectors long enough to evaluate function.

";

%feature("docstring") casadi::SymbolicQr::codegen_decref "[INTERNAL]
Codegen decref for dependencies.

";

%feature("docstring") casadi::SymbolicQr::n_out "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::SymbolicQr::numel_in "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::SymbolicQr::mx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::SymbolicQr::has_free "[INTERNAL]  Does the
function have free variables.

";

%feature("docstring") casadi::SymbolicQr::size_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::SymbolicQr::tangent "[INTERNAL]  Return
tangent function.

";

%feature("docstring") casadi::SymbolicQr::print_option "[INTERNAL]  Print
all information there is to know about a certain option.

";

%feature("docstring") casadi::SymbolicQr::is_a "[INTERNAL]  Check if the
function is of a particular type.

";

%feature("docstring") casadi::SymbolicQr::alloc_iw "[INTERNAL]  Ensure
required length of iw field.

";

%feature("docstring") casadi::SymbolicQr::getTangent "[INTERNAL]  Return
tangent function.

";

%feature("docstring") casadi::SymbolicQr::print_options "[INTERNAL]  Print
list of options.

";

%feature("docstring") casadi::SymbolicQr::sz_work "[INTERNAL]  Get number
of temporary variables needed.

";

%feature("docstring") casadi::SymbolicQr::sz_arg "[INTERNAL]  Get required
length of arg field.

";

%feature("docstring") casadi::SymbolicQr::reset "[INTERNAL] ";

%feature("docstring") casadi::SymbolicQr::slice "[INTERNAL]  returns a new
function with a selection of inputs/outputs of the original

";

%feature("docstring") casadi::SymbolicQr::grad_sx "[INTERNAL]  Gradient
expression.

";

%feature("docstring") casadi::SymbolicQr::alloc_memory "[INTERNAL]  Create
memory block.

";

%feature("docstring") casadi::SymbolicQr::init "[INTERNAL]  Initialize.

";

%feature("docstring") casadi::SymbolicQr::forward "[INTERNAL]  Return
function that calculates forward derivatives forward(nfwd) returns a cached
instance if available, and calls  Function get_forward(int nfwd) if no
cached version is available.

";

%feature("docstring") casadi::SymbolicQr::index_out "[INTERNAL]  Get output
scheme index by name.

";

%feature("docstring") casadi::SymbolicQr::getJacSparsity "[INTERNAL]
Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::SymbolicQr::set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::SymbolicQr::call_forward "[INTERNAL]  Forward
mode AD, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::SymbolicQr::simplifiedCall "[INTERNAL]  Use
simplified signature.

";

%feature("docstring") casadi::SymbolicQr::getFullJacobian "[INTERNAL]
Return Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::SymbolicQr::call_reverse "[INTERNAL]  Reverse
mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::SymbolicQr::jacobian "[INTERNAL]  Return
Jacobian function.

";

%feature("docstring") casadi::SymbolicQr::tang_sx "[INTERNAL]  Tangent
expression.

";

%feature("docstring") casadi::SymbolicQr::replaceAdjSeed "[INTERNAL]
Replace 0-by-0 reverse seeds.

";

%feature("docstring") casadi::SymbolicQr::getAtomicOutput "[INTERNAL]  Get
the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::SymbolicQr::free_mx "[INTERNAL]  Get free
variables ( MX)

";

%feature("docstring") casadi::SymbolicQr::hasDerivative "[INTERNAL]  Can
derivatives be calculated in any way?

";

%feature("docstring") casadi::SymbolicQr::sp_rev "[INTERNAL]  Propagate
sparsity backwards.

";

%feature("docstring") casadi::SymbolicQr::checkRes "[INTERNAL]  Check if
output arguments have correct length and dimensions.

";

%feature("docstring") casadi::SymbolicQr::numel_out "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::SymbolicQr::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::SymbolicQr::checkInputs "[INTERNAL]  Check if
the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::SymbolicQr::get_sparsity_in "[INTERNAL]  Get
sparsity of a given input.

";

%feature("docstring") casadi::SymbolicQr::get_stats "[INTERNAL]  Get all
statistics

";

%feature("docstring") casadi::SymbolicQr::get_name_in "[INTERNAL]  Names of
function input and outputs.

";

%feature("docstring") casadi::SymbolicQr "

'symbolicqr' plugin for Linsol

Linear solver for sparse least-squares problems Inspired
fromhttps://github.com/scipy/scipy/blob/v0.14.0/scipy/sparse/linalg/isolve/lsqr.py#L96

Linsol based on QR factorization with sparsity pattern based reordering
without partial pivoting

>List of available options

+----------+-----------+---------------------------------------------------+
|    Id    |   Type    |                    Description                    |
+==========+===========+===================================================+
| codegen  | OT_BOOL   | C-code generation                                 |
+----------+-----------+---------------------------------------------------+
| compiler | OT_STRING | Compiler command to be used for compiling         |
|          |           | generated code                                    |
+----------+-----------+---------------------------------------------------+

Joel Andersson

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
+------------------+-----------------+------------------+------------------+
| codegen          | OT_BOOL         | C-code           | casadi::Symbolic |
|                  |                 | generation       | Qr               |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Compiler command | casadi::Symbolic |
|                  |                 | to be used for   | Qr               |
|                  |                 | compiling        |                  |
|                  |                 | generated code   |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Custom input     | casadi::Function |
|                  |                 | scheme           | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Custom output    | casadi::Function |
|                  |                 | scheme           | Internal         |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: symbolic_qr.hpp ";

%feature("docstring") casadi::SymbolicQr::size2_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::SymbolicQr::signature "[INTERNAL]  Code
generate the function.

";

%feature("docstring") casadi::SymbolicQr::sp_fwd "[INTERNAL]  Propagate
sparsity forward.

";

%feature("docstring") casadi::SymbolicQr::release "[INTERNAL]  Release a
memory object.

";

%feature("docstring") casadi::SymbolicQr::plugin_name "[INTERNAL] ";

%feature("docstring") casadi::SymbolicQr::has_sprev "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::SymbolicQr::addShorthand "[INTERNAL]
Generate shorthand macro.

";

%feature("docstring") casadi::SymbolicQr::getAtomicInputReal "[INTERNAL]
Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::SymbolicQr::reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::SymbolicQr::getJacSparsityHierarchical "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::SymbolicQr::replaceRes "[INTERNAL]  Replace
0-by-0 outputs.

";

%feature("docstring") casadi::SymbolicQr::get_n_forward "[INTERNAL]  Return
function that calculates forward derivatives forward(nfwd) returns a cached
instance if available, and calls  Function get_forward(int nfwd) if no
cached version is available.

";

%feature("docstring") casadi::SymbolicQr::sx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::SymbolicQr::get_name_out "[INTERNAL]  Names
of function input and outputs.

";

%feature("docstring") casadi::SymbolicQr::print "[INTERNAL]  Print.

";

%feature("docstring") casadi::SymbolicQr::get_n_in "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::SymbolicQr::sp_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode, sparsity propagation.

";

%feature("docstring") casadi::SymbolicQr::replaceFwdSeed "[INTERNAL]
Replace 0-by-0 forward seeds.

";

%feature("docstring") casadi::SymbolicQr::jit_dependencies "[INTERNAL]
Jit dependencies.

";

%feature("docstring") casadi::SymbolicQr::getAlgorithmSize "[INTERNAL]  Get
the number of atomic operations.

";

%feature("docstring") casadi::SymbolicQr::replaceArg "[INTERNAL]  Replace
0-by-0 inputs.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::SymbolicQr::generate_dependencies "[INTERNAL]
Export / Generate C code for the dependency function.

";

%feature("docstring") casadi::SymbolicQr::mapsum_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::SymbolicQr::getJacSparsityHierarchicalSymm "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::SymbolicQr::hess_sx "[INTERNAL]  Hessian
expression.

";

%feature("docstring") casadi::SymbolicQr::_get_stats "[INTERNAL]  Get all
statistics

";

%feature("docstring") casadi::SymbolicQr::getAdaptorSolverName "[INTERNAL]
Obtain solver name from Adaptor.

";

%feature("docstring") casadi::SymbolicQr::oracle "[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::SymbolicQr::generateMeta "[INTERNAL]
Generate meta-information allowing a user to evaluate a generated function.

";

%feature("docstring") casadi::SymbolicQr::has_spfwd "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

";


// File: classcasadi_1_1SymbolicSX.xml


// File: classcasadi_1_1Transpose.xml


// File: classcasadi_1_1UnaryMX.xml


// File: classcasadi_1_1UnarySX.xml


// File: classcasadi_1_1Vertcat.xml


// File: classcasadi_1_1Vertsplit.xml


// File: classcasadi_1_1WeakRef.xml
%feature("docstring") casadi::WeakRef "

Weak reference type A weak reference to a SharedObject.

Joel Andersson

C++ includes: shared_object.hpp ";

%feature("docstring") casadi::WeakRef::shared "

Get a shared (owning) reference.

";

%feature("docstring") casadi::WeakRef::__hash__ "

Returns a number that is unique for a given Node. If the Object does not
point to any node, \"0\" is returned.

";

%feature("docstring") casadi::WeakRef::print "

Print a description of the object.

";

%feature("docstring") casadi::WeakRef::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::WeakRef::WeakRef "

>  casadi::WeakRef::WeakRef(int dummy=0)
------------------------------------------------------------------------

Default constructor.

>  casadi::WeakRef::WeakRef(SharedObject shared)
------------------------------------------------------------------------

Construct from a shared object (also implicit type conversion)

";

%feature("docstring") casadi::WeakRef::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::WeakRef::is_null "

Is a null pointer?

";

%feature("docstring") casadi::WeakRef::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::WeakRef::repr "

Print a representation of the object.

";

%feature("docstring") casadi::WeakRef::alive "

Check if alive.

";


// File: classcasadi_1_1XFunction.xml


// File: classcasadi_1_1XmlFile.xml
%feature("docstring") casadi::XmlFile "

XML parser Can be used for parsing XML files into CasADi data structures.

Joel Andersson

C++ includes: xml_file.hpp ";

%feature("docstring") casadi::XmlFile::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::XmlFile::print "

Print a description of the object.

";

%feature("docstring") casadi::XmlFile::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::XmlFile::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::XmlFile::__hash__ "

Returns a number that is unique for a given Node. If the Object does not
point to any node, \"0\" is returned.

";

%feature("docstring") casadi::XmlFile::is_null "

Is a null pointer?

";

%feature("docstring") casadi::XmlFile::XmlFile "";

%feature("docstring") casadi::XmlFile::~XmlFile "";

%feature("docstring") casadi::XmlFile::repr "

Print a representation of the object.

";


// File: classcasadi_1_1ZeroByZero.xml


// File: classcasadi_1_1ZeroSX.xml


// File: namespaceBonmin.xml


// File: namespacecasadi.xml
%feature("docstring") casadi::matrixName< double > "
Get typename.

";

%feature("docstring") casadi::complement "

Returns the list of all i in [0, size[ not found in supplied list.

The supplied vector may contain duplicates and may be non-monotonous The
supplied vector will be checked for bounds The result vector is guaranteed
to be monotonously increasing

";

%feature("docstring") casadi::conic_option_type "

Get type info for a particular option.

";

%feature("docstring") casadi::inBounds "

>  bool casadi::inBounds(const std::vector< T > &v, int upper)
------------------------------------------------------------------------

Check if for each element of v holds: v_i < upper.

>  bool casadi::inBounds(const std::vector< T > &v, int lower, int upper)
------------------------------------------------------------------------

Check if for each element of v holds: lower <= v_i < upper.

";

%feature("docstring") casadi::load_expm "

Explicitly load a plugin dynamically.

";

%feature("docstring") casadi::casadi_rank1 "

>  void casadi::casadi_rank1(T1 *A, const int *sp_A, T1 alpha, const T1 *x)
------------------------------------------------------------------------
[INTERNAL] 
Adds a multiple alpha/2 of the outer product mul(x, trans(x)) to A.

>  void casadi::casadi_rank1(T1 *A, const int *sp_A, T1 alpha, const T1 *x, const T1 *y)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::swapIndices "

swap inner and outer indices of list of lists



::

  * [[apple0,apple1,...],[pear0,pear1,...]] ->
  *   [[apple0,pear0],[apple1,pear1],...]
  * 



";

%feature("docstring") casadi::dense_mul_nt_stride "[INTERNAL] ";

%feature("docstring") casadi::isNon_increasing "

Check if the vector is non-increasing.

";

%feature("docstring") casadi::dense_mul_tn "[INTERNAL] ";

%feature("docstring") casadi::dense_mul_nn_stride "[INTERNAL] ";

%feature("docstring") casadi::is_zero "";

%feature("docstring") casadi::dple_out "

>  std::vector<std::string> casadi::dple_out()
------------------------------------------------------------------------

Get output scheme of DPLE solvers.

>  std::string casadi::dple_out(int ind)
------------------------------------------------------------------------

Get DPLE output scheme name by index.

";

%feature("docstring") casadi::expmsol "

Performs a matrix exponentiation expm(A)

General information
===================



>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| const_A          | OT_BOOL         | Assume A is      | casadi::Expm     |
|                  |                 | constant.        |                  |
|                  |                 | Default: false.  |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Custom input     | casadi::Function |
|                  |                 | scheme           | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Custom output    | casadi::Function |
|                  |                 | scheme           | Internal         |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

List of plugins
===============



- slicot

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
Expm.doc(\"myextraplugin\")



--------------------------------------------------------------------------------

slicot
------





--------------------------------------------------------------------------------



Joris Gillis

";

%feature("docstring") casadi::casadi_mtimes "[INTERNAL]  Sparse matrix-
matrix multiplication: z <- z + x*y.

";

%feature("docstring") casadi::integrator_n_out "

Get the number of integrator outputs.

";

%feature("docstring") casadi::slicot_periodic_schur "[INTERNAL] ";

%feature("docstring") casadi::external "

>  Function casadi::external(const std::string &name, const Dict &opts=Dict())
------------------------------------------------------------------------

Load an external function File name is assumed to be ./<f_name>.so.

>  Function casadi::external(const std::string &name, const std::string &bin_name, const Dict &opts=Dict())
------------------------------------------------------------------------

Load an external function File name given.

>  Function casadi::external(const std::string &name, const Importer &compiler, const Dict &opts=Dict())
------------------------------------------------------------------------

Load a just-in-time compiled external function File name given.

";

%feature("docstring") casadi::nlpsol_n_out "

Number of NLP solver outputs.

";

%feature("docstring") casadi::isDecreasing "

Check if the vector is strictly decreasing.

";

%feature("docstring") casadi::to_slice2 "

Construct nested slices from an index vector (requires is_slice2(v) to be
true)

";

%feature("docstring") casadi::load_integrator "

Explicitly load a plugin dynamically.

";

%feature("docstring") casadi::expm_n_out "

Get the number of expm solver outputs.

";

%feature("docstring") casadi::casadi_sum_viol "[INTERNAL]  Sum of bound
violations.

";

%feature("docstring") casadi::load_nlpsol "

Explicitly load a plugin dynamically.

";

%feature("docstring") casadi::casadi_scal "[INTERNAL]  SCAL: x <- alpha*x.

";

%feature("docstring") casadi::Contraction "";

%feature("docstring") casadi::conic_options "

Get all options for a plugin.

";

%feature("docstring") casadi::load_linsol "

Explicitly load a plugin dynamically.

";

%feature("docstring") casadi::casadi_interpn_grad "[INTERNAL] ";

%feature("docstring") casadi::has_interpolant "

Check if a particular plugin is available.

";

%feature("docstring") casadi::casadi_swap "[INTERNAL]  SWAP: x <-> y.

";

%feature("docstring") casadi::nlpsol_options "

Get all options for a plugin.

";

%feature("docstring") casadi::einstein_eval "";

%feature("docstring") casadi::hasNegative "

Check if the vector has negative entries.

";

%feature("docstring") casadi::conic_option_info "

Get documentation for a particular option.

";

%feature("docstring") casadi::check_exposed "[INTERNAL] ";

%feature("docstring") casadi::casadi_interpn "[INTERNAL] ";

%feature("docstring") casadi::casadi_norm_1 "[INTERNAL]  NORM_1: ||x||_1 ->
return.

";

%feature("docstring") casadi::casadi_iamax "[INTERNAL]  IAMAX: index
corresponding to the entry with the largest absolute value.

";

%feature("docstring") casadi::doc_interpolant "

Get the documentation string for a plugin.

";

%feature("docstring") casadi::write_matlab "

>  void casadi::write_matlab(std::ostream &stream, const std::vector< T > &v)
------------------------------------------------------------------------

Print vector, matlab style.

>  void casadi::write_matlab(std::ostream &stream, const std::vector< std::vector< T > > &v)
------------------------------------------------------------------------

Print matrix, matlab style.

";

%feature("docstring") casadi::casadi_sparsify "[INTERNAL]  Convert dense to
sparse.

";

%feature("docstring") casadi::hash_sparsity "

>  std::size_t casadi::hash_sparsity(int nrow, int ncol, const std::vector< int > &colind, const std::vector< int > &row)
------------------------------------------------------------------------

Hash a sparsity pattern.

";

%feature("docstring") casadi::is_slice2 "

Check if an index vector can be represented more efficiently as two nested
slices.

";

%feature("docstring") casadi::rootfinder "

Create a solver for rootfinding problems Takes a function where one of the
inputs is unknown and one of the outputs is a residual function that is
always zero, defines a new function where the the unknown input has been
replaced by a guess for the unknown and the residual output has been
replaced by the calculated value for the input.

For a function [y0, y1, ...,yi, .., yn] = F(x0, x1, ..., xj, ..., xm), where
xj is unknown and yi=0, defines a new function [y0, y1, ...,xj, .., yn] =
G(x0, x1, ..., xj_guess, ..., xm),

xj and yi must have the same dimension and d(yi)/d(xj) must be invertable.

By default, the first input is unknown and the first output is the residual.

General information
===================



>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| common_options   | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | auto-generated   | nction           |
|                  |                 | functions        |                  |
+------------------+-----------------+------------------+------------------+
| constraints      | OT_INTVECTOR    | Constrain the    | casadi::Rootfind |
|                  |                 | unknowns. 0      | er               |
|                  |                 | (default): no    |                  |
|                  |                 | constraint on    |                  |
|                  |                 | ui, 1: ui >=     |                  |
|                  |                 | 0.0, -1: ui <=   |                  |
|                  |                 | 0.0, 2: ui >     |                  |
|                  |                 | 0.0, -2: ui <    |                  |
|                  |                 | 0.0.             |                  |
+------------------+-----------------+------------------+------------------+
| implicit_input   | OT_INT          | Index of the     | casadi::Rootfind |
|                  |                 | input that       | er               |
|                  |                 | corresponds to   |                  |
|                  |                 | the actual root- |                  |
|                  |                 | finding          |                  |
+------------------+-----------------+------------------+------------------+
| implicit_output  | OT_INT          | Index of the     | casadi::Rootfind |
|                  |                 | output that      | er               |
|                  |                 | corresponds to   |                  |
|                  |                 | the actual root- |                  |
|                  |                 | finding          |                  |
+------------------+-----------------+------------------+------------------+
| jacobian_functio | OT_FUNCTION     | Function object  | casadi::Rootfind |
| n                |                 | for calculating  | er               |
|                  |                 | the Jacobian     |                  |
|                  |                 | (autogenerated   |                  |
|                  |                 | by default)      |                  |
+------------------+-----------------+------------------+------------------+
| linear_solver    | OT_STRING       | User-defined     | casadi::Rootfind |
|                  |                 | linear solver    | er               |
|                  |                 | class. Needed    |                  |
|                  |                 | for              |                  |
|                  |                 | sensitivities.   |                  |
+------------------+-----------------+------------------+------------------+
| linear_solver_op | OT_DICT         | Options to be    | casadi::Rootfind |
| tions            |                 | passed to the    | er               |
|                  |                 | linear solver.   |                  |
+------------------+-----------------+------------------+------------------+
| monitor          | OT_STRINGVECTOR | Set of user      | casadi::OracleFu |
|                  |                 | problem          | nction           |
|                  |                 | functions to be  |                  |
|                  |                 | monitored        |                  |
+------------------+-----------------+------------------+------------------+
| specific_options | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | specific auto-   | nction           |
|                  |                 | generated        |                  |
|                  |                 | functions,       |                  |
|                  |                 | overwriting the  |                  |
|                  |                 | defaults from    |                  |
|                  |                 | common_options.  |                  |
|                  |                 | Nested           |                  |
|                  |                 | dictionary.      |                  |
+------------------+-----------------+------------------+------------------+

List of plugins
===============



- kinsol

- nlpsol

- newton

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
Rootfinder.doc(\"myextraplugin\")



--------------------------------------------------------------------------------

kinsol
------



KINSOL interface from the Sundials suite

>List of available options

+---------------------------+-----------------+----------------------------+
|            Id             |      Type       |        Description         |
+===========================+=================+============================+
| abstol                    | OT_DOUBLE       | Stopping criterion         |
|                           |                 | tolerance                  |
+---------------------------+-----------------+----------------------------+
| disable_internal_warnings | OT_BOOL         | Disable KINSOL internal    |
|                           |                 | warning messages           |
+---------------------------+-----------------+----------------------------+
| exact_jacobian            | OT_BOOL         | Use exact Jacobian         |
|                           |                 | information                |
+---------------------------+-----------------+----------------------------+
| f_scale                   | OT_DOUBLEVECTOR | Equation scaling factors   |
+---------------------------+-----------------+----------------------------+
| iterative_solver          | OT_STRING       | gmres|bcgstab|tfqmr        |
+---------------------------+-----------------+----------------------------+
| linear_solver_type        | OT_STRING       | dense|banded|iterative|use |
|                           |                 | r_defined                  |
+---------------------------+-----------------+----------------------------+
| lower_bandwidth           | OT_INT          | Lower bandwidth for banded |
|                           |                 | linear solvers             |
+---------------------------+-----------------+----------------------------+
| max_iter                  | OT_INT          | Maximum number of Newton   |
|                           |                 | iterations. Putting 0 sets |
|                           |                 | the default value of       |
|                           |                 | KinSol.                    |
+---------------------------+-----------------+----------------------------+
| max_krylov                | OT_INT          | Maximum Krylov space       |
|                           |                 | dimension                  |
+---------------------------+-----------------+----------------------------+
| pretype                   | OT_STRING       | Type of preconditioner     |
+---------------------------+-----------------+----------------------------+
| strategy                  | OT_STRING       | Globalization strategy     |
+---------------------------+-----------------+----------------------------+
| u_scale                   | OT_DOUBLEVECTOR | Variable scaling factors   |
+---------------------------+-----------------+----------------------------+
| upper_bandwidth           | OT_INT          | Upper bandwidth for banded |
|                           |                 | linear solvers             |
+---------------------------+-----------------+----------------------------+
| use_preconditioner        | OT_BOOL         | Precondition an iterative  |
|                           |                 | solver                     |
+---------------------------+-----------------+----------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

nlpsol
------





--------------------------------------------------------------------------------





--------------------------------------------------------------------------------

newton
------



Implements simple newton iterations to solve an implicit function.

>List of available options

+-----------------+-----------+--------------------------------------------+
|       Id        |   Type    |                Description                 |
+=================+===========+============================================+
| abstol          | OT_DOUBLE | Stopping criterion tolerance on max(|F|)   |
+-----------------+-----------+--------------------------------------------+
| abstolStep      | OT_DOUBLE | Stopping criterion tolerance on step size  |
+-----------------+-----------+--------------------------------------------+
| max_iter        | OT_INT    | Maximum number of Newton iterations to     |
|                 |           | perform before returning.                  |
+-----------------+-----------+--------------------------------------------+
| print_iteration | OT_BOOL   | Print information about each iteration     |
+-----------------+-----------+--------------------------------------------+

--------------------------------------------------------------------------------



Joel Andersson

";

%feature("docstring") casadi::isStrictlyMonotone "

Check if the vector is strictly monotone.

";

%feature("docstring") casadi::dple_n_in "

Get the number of QP solver inputs.

";

%feature("docstring") casadi::casadi_eprintf "";

%feature("docstring") casadi::to_slice "

>  Slice casadi::to_slice(const IM &x, bool ind1=false)
------------------------------------------------------------------------

Convert IM to Slice.

>  Slice casadi::to_slice(const std::vector< int > &v, bool ind1=false)
------------------------------------------------------------------------

Construct from an index vector (requires is_slice(v) to be true)

";

%feature("docstring") casadi::dense_copy_stride "[INTERNAL] ";

%feature("docstring") casadi::doc_linsol "

Get the documentation string for a plugin.

";

%feature("docstring") casadi::expm_n_in "

Get the number of expm solver inputs.

";

%feature("docstring") casadi::conic_in "

>  std::vector<std::string> casadi::conic_in()
------------------------------------------------------------------------

Get input scheme of QP solvers.

>  std::string casadi::conic_in(int ind)
------------------------------------------------------------------------

Get QP solver input scheme name by index.

";

%feature("docstring") casadi::doc_expm "

Get the documentation string for a plugin.

";

%feature("docstring") casadi::lookupvector "

>  std::vector<int> casadi::lookupvector(const std::vector< int > &v, int size)
------------------------------------------------------------------------

Returns a vector for quickly looking up entries of supplied list.

lookupvector[i]!=-1 <=> v contains i v[lookupvector[i]] == i <=> v contains
i

Duplicates are treated by looking up last occurrence

";

%feature("docstring") casadi::slicot_mb03vy "";

%feature("docstring") casadi::doc_dple "

Get the documentation string for a plugin.

";

%feature("docstring") casadi::hash_combine "

>  void casadi::hash_combine(std::size_t &seed, T v)

>  void casadi::hash_combine(std::size_t &seed, const std::vector< int > &v)
------------------------------------------------------------------------

Generate a hash value incrementally (function taken from boost)

>  void casadi::hash_combine(std::size_t &seed, const int *v, int sz)
------------------------------------------------------------------------

Generate a hash value incrementally, array.

";

%feature("docstring") casadi::casadi_copy_int "[INTERNAL] ";

%feature("docstring") casadi::has_integrator "

Check if a particular plugin is available.

";

%feature("docstring") casadi::isNonDecreasing "

Check if the vector is non-decreasing.

";

%feature("docstring") casadi::integrator "

>  Function casadi::integrator(const std::string &name, const std::string &solver, const SXDict &dae, const Dict &opts=Dict())
------------------------------------------------------------------------

Create an ODE/DAE integrator Solves an initial value problem (IVP) coupled
to a terminal value problem with differential equation given as an implicit
ODE coupled to an algebraic equation and a set of quadratures:



::

  Initial conditions at t=t0
  x(t0)  = x0
  q(t0)  = 0
  
  Forward integration from t=t0 to t=tf
  der(x) = function(x, z, p, t)                  Forward ODE
  0 = fz(x, z, p, t)                  Forward algebraic equations
  der(q) = fq(x, z, p, t)                  Forward quadratures
  
  Terminal conditions at t=tf
  rx(tf)  = rx0
  rq(tf)  = 0
  
  Backward integration from t=tf to t=t0
  der(rx) = gx(rx, rz, rp, x, z, p, t)        Backward ODE
  0 = gz(rx, rz, rp, x, z, p, t)        Backward algebraic equations
  der(rq) = gq(rx, rz, rp, x, z, p, t)        Backward quadratures
  
  where we assume that both the forward and backwards integrations are index-1
  (i.e. dfz/dz, dgz/drz are invertible) and furthermore that
  gx, gz and gq have a linear dependency on rx, rz and rp.



General information
===================



>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| augmented_option | OT_DICT         | Options to be    | casadi::Integrat |
| s                |                 | passed down to   | or               |
|                  |                 | the augmented    |                  |
|                  |                 | integrator, if   |                  |
|                  |                 | one is           |                  |
|                  |                 | constructed.     |                  |
+------------------+-----------------+------------------+------------------+
| common_options   | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | auto-generated   | nction           |
|                  |                 | functions        |                  |
+------------------+-----------------+------------------+------------------+
| expand           | OT_BOOL         | Replace MX with  | casadi::Integrat |
|                  |                 | SX expressions   | or               |
|                  |                 | in problem       |                  |
|                  |                 | formulation      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| grid             | OT_DOUBLEVECTOR | Time grid        | casadi::Integrat |
|                  |                 |                  | or               |
+------------------+-----------------+------------------+------------------+
| monitor          | OT_STRINGVECTOR | Set of user      | casadi::OracleFu |
|                  |                 | problem          | nction           |
|                  |                 | functions to be  |                  |
|                  |                 | monitored        |                  |
+------------------+-----------------+------------------+------------------+
| number_of_finite | OT_INT          | Number of finite | casadi::Integrat |
| _elements        |                 | elements         | or               |
+------------------+-----------------+------------------+------------------+
| output_t0        | OT_BOOL         | Output the state | casadi::Integrat |
|                  |                 | at the initial   | or               |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| print_stats      | OT_BOOL         | Print out        | casadi::Integrat |
|                  |                 | statistics after | or               |
|                  |                 | integration      |                  |
+------------------+-----------------+------------------+------------------+
| rootfinder       | OT_STRING       | An implicit      | casadi::Integrat |
|                  |                 | function solver  | or               |
+------------------+-----------------+------------------+------------------+
| rootfinder_optio | OT_DICT         | Options to be    | casadi::Integrat |
| ns               |                 | passed to the    | or               |
|                  |                 | NLP Solver       |                  |
+------------------+-----------------+------------------+------------------+
| specific_options | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | specific auto-   | nction           |
|                  |                 | generated        |                  |
|                  |                 | functions,       |                  |
|                  |                 | overwriting the  |                  |
|                  |                 | defaults from    |                  |
|                  |                 | common_options.  |                  |
|                  |                 | Nested           |                  |
|                  |                 | dictionary.      |                  |
+------------------+-----------------+------------------+------------------+
| t0               | OT_DOUBLE       | Beginning of the | casadi::Integrat |
|                  |                 | time horizon     | or               |
+------------------+-----------------+------------------+------------------+
| tf               | OT_DOUBLE       | End of the time  | casadi::Integrat |
|                  |                 | horizon          | or               |
+------------------+-----------------+------------------+------------------+

>Input scheme: casadi::IntegratorInput (INTEGRATOR_NUM_IN = 6)

+----------------+-------+-------------------------------------------------+
|   Full name    | Short |                   Description                   |
+================+=======+=================================================+
| INTEGRATOR_X0  | x0    | Differential state at the initial time.         |
+----------------+-------+-------------------------------------------------+
| INTEGRATOR_P   | p     | Parameters.                                     |
+----------------+-------+-------------------------------------------------+
| INTEGRATOR_Z0  | z0    | Initial guess for the algebraic variable.       |
+----------------+-------+-------------------------------------------------+
| INTEGRATOR_RX0 | rx0   | Backward differential state at the final time.  |
+----------------+-------+-------------------------------------------------+
| INTEGRATOR_RP  | rp    | Backward parameter vector.                      |
+----------------+-------+-------------------------------------------------+
| INTEGRATOR_RZ0 | rz0   | Initial guess for the backwards algebraic       |
|                |       | variable.                                       |
+----------------+-------+-------------------------------------------------+

>Output scheme: casadi::IntegratorOutput (INTEGRATOR_NUM_OUT = 6)

+----------------+-------+-------------------------------------------------+
|   Full name    | Short |                   Description                   |
+================+=======+=================================================+
| INTEGRATOR_XF  | xf    | Differential state at the final time.           |
+----------------+-------+-------------------------------------------------+
| INTEGRATOR_QF  | qf    | Quadrature state at the final time.             |
+----------------+-------+-------------------------------------------------+
| INTEGRATOR_ZF  | zf    | Algebraic variable at the final time.           |
+----------------+-------+-------------------------------------------------+
| INTEGRATOR_RXF | rxf   | Backward differential state at the initial      |
|                |       | time.                                           |
+----------------+-------+-------------------------------------------------+
| INTEGRATOR_RQF | rqf   | Backward quadrature state at the initial time.  |
+----------------+-------+-------------------------------------------------+
| INTEGRATOR_RZF | rzf   | Backward algebraic variable at the initial      |
|                |       | time.                                           |
+----------------+-------+-------------------------------------------------+

List of plugins
===============



- cvodes

- idas

- collocation

- rk

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
Integrator.doc(\"myextraplugin\")



--------------------------------------------------------------------------------

cvodes
------



Interface to CVodes from the Sundials suite.

A call to evaluate will integrate to the end.

You can retrieve the entire state trajectory as follows, after the evaluate
call: Call reset. Then call integrate(t_i) and getOuput for a series of
times t_i.

>List of available options

+----------------------------+-----------+---------------------------------+
|             Id             |   Type    |           Description           |
+============================+===========+=================================+
| abstol                     | OT_DOUBLE | Absolute tolerence for the IVP  |
|                            |           | solution                        |
+----------------------------+-----------+---------------------------------+
| disable_internal_warnings  | OT_BOOL   | Disable SUNDIALS internal       |
|                            |           | warning messages                |
+----------------------------+-----------+---------------------------------+
| fsens_all_at_once          | OT_BOOL   | Calculate all right hand sides  |
|                            |           | of the sensitivity equations at |
|                            |           | once                            |
+----------------------------+-----------+---------------------------------+
| fsens_err_con              | OT_BOOL   | include the forward             |
|                            |           | sensitivities in all error      |
|                            |           | controls                        |
+----------------------------+-----------+---------------------------------+
| interpolation_type         | OT_STRING | Type of interpolation for the   |
|                            |           | adjoint sensitivities           |
+----------------------------+-----------+---------------------------------+
| linear_multistep_method    | OT_STRING | Integrator scheme: BDF|adams    |
+----------------------------+-----------+---------------------------------+
| linear_solver              | OT_STRING | A custom linear solver creator  |
|                            |           | function [default: csparse]     |
+----------------------------+-----------+---------------------------------+
| linear_solver_options      | OT_DICT   | Options to be passed to the     |
|                            |           | linear solver                   |
+----------------------------+-----------+---------------------------------+
| max_krylov                 | OT_INT    | Maximum Krylov subspace size    |
+----------------------------+-----------+---------------------------------+
| max_multistep_order        | OT_INT    | Maximum order for the           |
|                            |           | (variable-order) multistep      |
|                            |           | method                          |
+----------------------------+-----------+---------------------------------+
| max_num_steps              | OT_INT    | Maximum number of integrator    |
|                            |           | steps                           |
+----------------------------+-----------+---------------------------------+
| max_order                  | OT_DOUBLE | Maximum order                   |
+----------------------------+-----------+---------------------------------+
| newton_scheme              | OT_STRING | Linear solver scheme in the     |
|                            |           | Newton method:                  |
|                            |           | DIRECT|gmres|bcgstab|tfqmr      |
+----------------------------+-----------+---------------------------------+
| nonlin_conv_coeff          | OT_DOUBLE | Coefficient in the nonlinear    |
|                            |           | convergence test                |
+----------------------------+-----------+---------------------------------+
| nonlinear_solver_iteration | OT_STRING | Nonlinear solver type:          |
|                            |           | NEWTON|functional               |
+----------------------------+-----------+---------------------------------+
| quad_err_con               | OT_BOOL   | Should the quadratures affect   |
|                            |           | the step size control           |
+----------------------------+-----------+---------------------------------+
| reltol                     | OT_DOUBLE | Relative tolerence for the IVP  |
|                            |           | solution                        |
+----------------------------+-----------+---------------------------------+
| second_order_correction    | OT_BOOL   | Second order correction in the  |
|                            |           | augmented system Jacobian       |
|                            |           | [true]                          |
+----------------------------+-----------+---------------------------------+
| sensitivity_method         | OT_STRING | Sensitivity method:             |
|                            |           | SIMULTANEOUS|staggered          |
+----------------------------+-----------+---------------------------------+
| step0                      | OT_DOUBLE | initial step size [default:     |
|                            |           | 0/estimated]                    |
+----------------------------+-----------+---------------------------------+
| steps_per_checkpoint       | OT_INT    | Number of steps between two     |
|                            |           | consecutive checkpoints         |
+----------------------------+-----------+---------------------------------+
| stop_at_end                | OT_BOOL   | Stop the integrator at the end  |
|                            |           | of the interval                 |
+----------------------------+-----------+---------------------------------+
| use_preconditioner         | OT_BOOL   | Precondition the iterative      |
|                            |           | solver [default: true]          |
+----------------------------+-----------+---------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

idas
----



Interface to IDAS from the Sundials suite.

>List of available options

+---------------------------+-----------------+----------------------------+
|            Id             |      Type       |        Description         |
+===========================+=================+============================+
| abstol                    | OT_DOUBLE       | Absolute tolerence for the |
|                           |                 | IVP solution               |
+---------------------------+-----------------+----------------------------+
| abstolv                   | OT_DOUBLEVECTOR | Absolute tolerarance for   |
|                           |                 | each component             |
+---------------------------+-----------------+----------------------------+
| calc_ic                   | OT_BOOL         | Use IDACalcIC to get       |
|                           |                 | consistent initial         |
|                           |                 | conditions.                |
+---------------------------+-----------------+----------------------------+
| calc_icB                  | OT_BOOL         | Use IDACalcIC to get       |
|                           |                 | consistent initial         |
|                           |                 | conditions for backwards   |
|                           |                 | system [default: equal to  |
|                           |                 | calc_ic].                  |
+---------------------------+-----------------+----------------------------+
| cj_scaling                | OT_BOOL         | IDAS scaling on cj for the |
|                           |                 | user-defined linear solver |
|                           |                 | module                     |
+---------------------------+-----------------+----------------------------+
| disable_internal_warnings | OT_BOOL         | Disable SUNDIALS internal  |
|                           |                 | warning messages           |
+---------------------------+-----------------+----------------------------+
| first_time                | OT_DOUBLE       | First requested time as a  |
|                           |                 | fraction of the time       |
|                           |                 | interval                   |
+---------------------------+-----------------+----------------------------+
| fsens_err_con             | OT_BOOL         | include the forward        |
|                           |                 | sensitivities in all error |
|                           |                 | controls                   |
+---------------------------+-----------------+----------------------------+
| init_xdot                 | OT_DOUBLEVECTOR | Initial values for the     |
|                           |                 | state derivatives          |
+---------------------------+-----------------+----------------------------+
| interpolation_type        | OT_STRING       | Type of interpolation for  |
|                           |                 | the adjoint sensitivities  |
+---------------------------+-----------------+----------------------------+
| linear_solver             | OT_STRING       | A custom linear solver     |
|                           |                 | creator function [default: |
|                           |                 | csparse]                   |
+---------------------------+-----------------+----------------------------+
| linear_solver_options     | OT_DICT         | Options to be passed to    |
|                           |                 | the linear solver          |
+---------------------------+-----------------+----------------------------+
| max_krylov                | OT_INT          | Maximum Krylov subspace    |
|                           |                 | size                       |
+---------------------------+-----------------+----------------------------+
| max_multistep_order       | OT_INT          | Maximum order for the      |
|                           |                 | (variable-order) multistep |
|                           |                 | method                     |
+---------------------------+-----------------+----------------------------+
| max_num_steps             | OT_INT          | Maximum number of          |
|                           |                 | integrator steps           |
+---------------------------+-----------------+----------------------------+
| max_order                 | OT_DOUBLE       | Maximum order              |
+---------------------------+-----------------+----------------------------+
| max_step_size             | OT_DOUBLE       | Maximim step size          |
+---------------------------+-----------------+----------------------------+
| newton_scheme             | OT_STRING       | Linear solver scheme in    |
|                           |                 | the Newton method:         |
|                           |                 | DIRECT|gmres|bcgstab|tfqmr |
+---------------------------+-----------------+----------------------------+
| nonlin_conv_coeff         | OT_DOUBLE       | Coefficient in the         |
|                           |                 | nonlinear convergence test |
+---------------------------+-----------------+----------------------------+
| quad_err_con              | OT_BOOL         | Should the quadratures     |
|                           |                 | affect the step size       |
|                           |                 | control                    |
+---------------------------+-----------------+----------------------------+
| reltol                    | OT_DOUBLE       | Relative tolerence for the |
|                           |                 | IVP solution               |
+---------------------------+-----------------+----------------------------+
| second_order_correction   | OT_BOOL         | Second order correction in |
|                           |                 | the augmented system       |
|                           |                 | Jacobian [true]            |
+---------------------------+-----------------+----------------------------+
| sensitivity_method        | OT_STRING       | Sensitivity method:        |
|                           |                 | SIMULTANEOUS|staggered     |
+---------------------------+-----------------+----------------------------+
| step0                     | OT_DOUBLE       | initial step size          |
|                           |                 | [default: 0/estimated]     |
+---------------------------+-----------------+----------------------------+
| steps_per_checkpoint      | OT_INT          | Number of steps between    |
|                           |                 | two consecutive            |
|                           |                 | checkpoints                |
+---------------------------+-----------------+----------------------------+
| stop_at_end               | OT_BOOL         | Stop the integrator at the |
|                           |                 | end of the interval        |
+---------------------------+-----------------+----------------------------+
| suppress_algebraic        | OT_BOOL         | Suppress algebraic         |
|                           |                 | variables in the error     |
|                           |                 | testing                    |
+---------------------------+-----------------+----------------------------+
| use_preconditioner        | OT_BOOL         | Precondition the iterative |
|                           |                 | solver [default: true]     |
+---------------------------+-----------------+----------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

collocation
-----------



Fixed-step implicit Runge-Kutta integrator ODE/DAE integrator based on
collocation schemes

The method is still under development

>List of available options

+---------------------------+-----------------+----------------------------+
|            Id             |      Type       |        Description         |
+===========================+=================+============================+
| augmented_options         | OT_DICT         | Options to be passed down  |
|                           |                 | to the augmented           |
|                           |                 | integrator, if one is      |
|                           |                 | constructed.               |
+---------------------------+-----------------+----------------------------+
| collocation_scheme        | OT_STRING       | Collocation scheme:        |
|                           |                 | radau|legendre             |
+---------------------------+-----------------+----------------------------+
| expand                    | OT_BOOL         | Replace MX with SX         |
|                           |                 | expressions in problem     |
|                           |                 | formulation [false]        |
+---------------------------+-----------------+----------------------------+
| grid                      | OT_DOUBLEVECTOR | Time grid                  |
+---------------------------+-----------------+----------------------------+
| interpolation_order       | OT_INT          | Order of the interpolating |
|                           |                 | polynomials                |
+---------------------------+-----------------+----------------------------+
| number_of_finite_elements | OT_INT          | Number of finite elements  |
+---------------------------+-----------------+----------------------------+
| output_t0                 | OT_BOOL         | Output the state at the    |
|                           |                 | initial time               |
+---------------------------+-----------------+----------------------------+
| print_stats               | OT_BOOL         | Print out statistics after |
|                           |                 | integration                |
+---------------------------+-----------------+----------------------------+
| rootfinder                | OT_STRING       | An implicit function       |
|                           |                 | solver                     |
+---------------------------+-----------------+----------------------------+
| rootfinder_options        | OT_DICT         | Options to be passed to    |
|                           |                 | the NLP Solver             |
+---------------------------+-----------------+----------------------------+
| t0                        | OT_DOUBLE       | Beginning of the time      |
|                           |                 | horizon                    |
+---------------------------+-----------------+----------------------------+
| tf                        | OT_DOUBLE       | End of the time horizon    |
+---------------------------+-----------------+----------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

rk --



Fixed-step explicit Runge-Kutta integrator for ODEs Currently implements
RK4.

The method is still under development

--------------------------------------------------------------------------------



Joel Andersson

";

%feature("docstring") casadi::integrator_out "

>  std::vector<std::string> casadi::integrator_out()
------------------------------------------------------------------------

Get integrator output scheme of integrators.

>  std::string casadi::integrator_out(int ind)
------------------------------------------------------------------------

Get output scheme name by index.

";

%feature("docstring") casadi::has_dple "

Check if a particular plugin is available.

";

%feature("docstring") casadi::_jtimes "[INTERNAL] ";

%feature("docstring") casadi::dense_mul_nn "[INTERNAL] ";

%feature("docstring") casadi::load_interpolant "

Explicitly load a plugin dynamically.

";

%feature("docstring") casadi::casadi_printf "";

%feature("docstring") casadi::integrator_n_in "

Get the number of integrator inputs.

";

%feature("docstring") casadi::collocation_points "

Obtain collocation points of specific order and scheme.

Parameters:
-----------

scheme:  'radau' or 'legendre'

";

%feature("docstring") casadi::conic "

Create a QP solver Solves the following strictly convex problem:



::

  min          1/2 x' H x + g' x
  x
  
  subject to
  LBA <= A x <= UBA
  LBX <= x   <= UBX
  
  with :
  H sparse (n x n) positive definite
  g dense  (n x 1)
  
  n: number of decision variables (x)
  nc: number of constraints (A)



If H is not positive-definite, the solver should throw an error.

General information
===================



>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| discrete         | OT_BOOLVECTOR   | Indicates which  | casadi::Conic    |
|                  |                 | of the variables |                  |
|                  |                 | are discrete,    |                  |
|                  |                 | i.e. integer-    |                  |
|                  |                 | valued           |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Custom input     | casadi::Function |
|                  |                 | scheme           | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Custom output    | casadi::Function |
|                  |                 | scheme           | Internal         |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

>Input scheme: casadi::ConicInput (CONIC_NUM_IN = 10)

+--------------+--------+--------------------------------------------------+
|  Full name   | Short  |                   Description                    |
+==============+========+==================================================+
| CONIC_H      | h      | The square matrix H: sparse, (n x n). Only the   |
|              |        | lower triangular part is actually used. The      |
|              |        | matrix is assumed to be symmetrical.             |
+--------------+--------+--------------------------------------------------+
| CONIC_G      | g      | The vector g: dense, (n x 1)                     |
+--------------+--------+--------------------------------------------------+
| CONIC_A      | a      | The matrix A: sparse, (nc x n) - product with x  |
|              |        | must be dense.                                   |
+--------------+--------+--------------------------------------------------+
| CONIC_LBA    | lba    | dense, (nc x 1)                                  |
+--------------+--------+--------------------------------------------------+
| CONIC_UBA    | uba    | dense, (nc x 1)                                  |
+--------------+--------+--------------------------------------------------+
| CONIC_LBX    | lbx    | dense, (n x 1)                                   |
+--------------+--------+--------------------------------------------------+
| CONIC_UBX    | ubx    | dense, (n x 1)                                   |
+--------------+--------+--------------------------------------------------+
| CONIC_X0     | x0     | dense, (n x 1)                                   |
+--------------+--------+--------------------------------------------------+
| CONIC_LAM_X0 | lam_x0 | dense                                            |
+--------------+--------+--------------------------------------------------+
| CONIC_LAM_A0 | lam_a0 | dense                                            |
+--------------+--------+--------------------------------------------------+

>Output scheme: casadi::ConicOutput (CONIC_NUM_OUT = 4)

+-------------+-------+---------------------------------------------------+
|  Full name  | Short |                    Description                    |
+=============+=======+===================================================+
| CONIC_X     | x     | The primal solution.                              |
+-------------+-------+---------------------------------------------------+
| CONIC_COST  | cost  | The optimal cost.                                 |
+-------------+-------+---------------------------------------------------+
| CONIC_LAM_A | lam_a | The dual solution corresponding to linear bounds. |
+-------------+-------+---------------------------------------------------+
| CONIC_LAM_X | lam_x | The dual solution corresponding to simple bounds. |
+-------------+-------+---------------------------------------------------+

List of plugins
===============



- clp

- cplex

- gurobi

- hpmpc

- ooqp

- qpoases

- sqic

- nlpsol

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
Conic.doc(\"myextraplugin\")



--------------------------------------------------------------------------------

clp
---



Interface to Clp solver for sparse Quadratic Programs

--------------------------------------------------------------------------------





--------------------------------------------------------------------------------

cplex
-----



Interface to Cplex solver for sparse Quadratic Programs

>List of available options

+---------------+-----------+----------------------------------------------+
|      Id       |   Type    |                 Description                  |
+===============+===========+==============================================+
| cplex         | OT_DICT   | Options to be passed to CPLEX                |
+---------------+-----------+----------------------------------------------+
| dep_check     | OT_INT    | Detect redundant constraints.                |
+---------------+-----------+----------------------------------------------+
| dump_filename | OT_STRING | The filename to dump to.                     |
+---------------+-----------+----------------------------------------------+
| dump_to_file  | OT_BOOL   | Dumps QP to file in CPLEX format.            |
+---------------+-----------+----------------------------------------------+
| qp_method     | OT_INT    | Determines which CPLEX algorithm to use.     |
+---------------+-----------+----------------------------------------------+
| tol           | OT_DOUBLE | Tolerance of solver                          |
+---------------+-----------+----------------------------------------------+
| warm_start    | OT_BOOL   | Use warm start with simplex methods (affects |
|               |           | only the simplex methods).                   |
+---------------+-----------+----------------------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

gurobi
------



Interface to the GUROBI Solver for quadratic programming

>List of available options

+-------+-----------------+------------------------------------------------+
|  Id   |      Type       |                  Description                   |
+=======+=================+================================================+
| vtype | OT_STRINGVECTOR | Type of variables:                             |
|       |                 | [CONTINUOUS|binary|integer|semicont|semiint]   |
+-------+-----------------+------------------------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

hpmpc
-----



Interface to HMPC Solver

In order to use this interface, you must:

Decision variables must only by state and control, and the variable ordering
must be [x0 u0 x1 u1 ...]

The constraints must be in order: [ gap0 lincon0 gap1 lincon1 ]

gap: Ak+1 = Ak xk + Bk uk lincon: yk= Ck xk + Dk uk



::

         A0 B0 -I
         C0 D0
                A1 B1 -I
                C1 D1



where I must be a diagonal sparse matrix Either supply all of N, nx, ng, nu
options or rely on automatic detection

>List of available options

+----------------+--------------+------------------------------------------+
|       Id       |     Type     |               Description                |
+================+==============+==========================================+
| N              | OT_INT       | OCP horizon                              |
+----------------+--------------+------------------------------------------+
| blasfeo_target | OT_STRING    | hpmpc target                             |
+----------------+--------------+------------------------------------------+
| inf            | OT_DOUBLE    | HPMPC cannot handle infinities.          |
|                |              | Infinities will be replaced by this      |
|                |              | option's value.                          |
+----------------+--------------+------------------------------------------+
| max_iter       | OT_INT       | Max number of iterations                 |
+----------------+--------------+------------------------------------------+
| mu0            | OT_DOUBLE    | Max element in cost function as estimate |
|                |              | of max multiplier                        |
+----------------+--------------+------------------------------------------+
| ng             | OT_INTVECTOR | Number of non-dynamic constraints,       |
|                |              | length N+1                               |
+----------------+--------------+------------------------------------------+
| nu             | OT_INTVECTOR | Number of controls, length N             |
+----------------+--------------+------------------------------------------+
| nx             | OT_INTVECTOR | Number of states, length N+1             |
+----------------+--------------+------------------------------------------+
| target         | OT_STRING    | hpmpc target                             |
+----------------+--------------+------------------------------------------+
| tol            | OT_DOUBLE    | Tolerance in the duality measure         |
+----------------+--------------+------------------------------------------+
| warm_start     | OT_BOOL      | Use warm-starting                        |
+----------------+--------------+------------------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

ooqp
----



Interface to the OOQP Solver for quadratic programming The current
implementation assumes that OOQP is configured with the MA27 sparse linear
solver.

NOTE: when doing multiple calls to evaluate(), check if you need to
reInit();

>List of available options

+-------------+-----------+------------------------------------------------+
|     Id      |   Type    |                  Description                   |
+=============+===========+================================================+
| artol       | OT_DOUBLE | tolerance as provided with setArTol to OOQP    |
+-------------+-----------+------------------------------------------------+
| mutol       | OT_DOUBLE | tolerance as provided with setMuTol to OOQP    |
+-------------+-----------+------------------------------------------------+
| print_level | OT_INT    | Print level. OOQP listens to print_level 0, 10 |
|             |           | and 100                                        |
+-------------+-----------+------------------------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

qpoases
-------



Interface to QPOases Solver for quadratic programming

>List of available options

+-------------------------------+-----------+------------------------------+
|              Id               |   Type    |         Description          |
+===============================+===========+==============================+
| CPUtime                       | OT_DOUBLE | The maximum allowed CPU time |
|                               |           | in seconds for the whole     |
|                               |           | initialisation (and the      |
|                               |           | actually required one on     |
|                               |           | output). Disabled if unset.  |
+-------------------------------+-----------+------------------------------+
| boundRelaxation               | OT_DOUBLE | Initial relaxation of bounds |
|                               |           | to start homotopy and        |
|                               |           | initial value for far        |
|                               |           | bounds.                      |
+-------------------------------+-----------+------------------------------+
| boundTolerance                | OT_DOUBLE | If upper and lower bounds    |
|                               |           | differ less than this        |
|                               |           | tolerance, they are regarded |
|                               |           | equal, i.e. as equality      |
|                               |           | constraint.                  |
+-------------------------------+-----------+------------------------------+
| enableCholeskyRefactorisation | OT_INT    | Specifies the frequency of a |
|                               |           | full re-factorisation of     |
|                               |           | projected Hessian matrix: 0: |
|                               |           | turns them off, 1: uses them |
|                               |           | at each iteration etc.       |
+-------------------------------+-----------+------------------------------+
| enableDriftCorrection         | OT_INT    | Specifies the frequency of   |
|                               |           | drift corrections: 0: turns  |
|                               |           | them off.                    |
+-------------------------------+-----------+------------------------------+
| enableEqualities              | OT_BOOL   | Specifies whether equalities |
|                               |           | should be treated as always  |
|                               |           | active (True) or not (False) |
+-------------------------------+-----------+------------------------------+
| enableFarBounds               | OT_BOOL   | Enables the use of far       |
|                               |           | bounds.                      |
+-------------------------------+-----------+------------------------------+
| enableFlippingBounds          | OT_BOOL   | Enables the use of flipping  |
|                               |           | bounds.                      |
+-------------------------------+-----------+------------------------------+
| enableFullLITests             | OT_BOOL   | Enables condition-hardened   |
|                               |           | (but more expensive) LI      |
|                               |           | test.                        |
+-------------------------------+-----------+------------------------------+
| enableInertiaCorrection       | OT_BOOL   | Should working set be        |
|                               |           | repaired when negative       |
|                               |           | curvature is discovered      |
|                               |           | during hotstart.             |
+-------------------------------+-----------+------------------------------+
| enableNZCTests                | OT_BOOL   | Enables nonzero curvature    |
|                               |           | tests.                       |
+-------------------------------+-----------+------------------------------+
| enableRamping                 | OT_BOOL   | Enables ramping.             |
+-------------------------------+-----------+------------------------------+
| enableRegularisation          | OT_BOOL   | Enables automatic Hessian    |
|                               |           | regularisation.              |
+-------------------------------+-----------+------------------------------+
| epsDen                        | OT_DOUBLE | Denominator tolerance for    |
|                               |           | ratio tests.                 |
+-------------------------------+-----------+------------------------------+
| epsFlipping                   | OT_DOUBLE | Tolerance of squared         |
|                               |           | Cholesky diagonal factor     |
|                               |           | which triggers flipping      |
|                               |           | bound.                       |
+-------------------------------+-----------+------------------------------+
| epsIterRef                    | OT_DOUBLE | Early termination tolerance  |
|                               |           | for iterative refinement.    |
+-------------------------------+-----------+------------------------------+
| epsLITests                    | OT_DOUBLE | Tolerance for linear         |
|                               |           | independence tests.          |
+-------------------------------+-----------+------------------------------+
| epsNZCTests                   | OT_DOUBLE | Tolerance for nonzero        |
|                               |           | curvature tests.             |
+-------------------------------+-----------+------------------------------+
| epsNum                        | OT_DOUBLE | Numerator tolerance for      |
|                               |           | ratio tests.                 |
+-------------------------------+-----------+------------------------------+
| epsRegularisation             | OT_DOUBLE | Scaling factor of identity   |
|                               |           | matrix used for Hessian      |
|                               |           | regularisation.              |
+-------------------------------+-----------+------------------------------+
| finalRamping                  | OT_DOUBLE | Final value for ramping      |
|                               |           | strategy.                    |
+-------------------------------+-----------+------------------------------+
| growFarBounds                 | OT_DOUBLE | Factor to grow far bounds.   |
+-------------------------------+-----------+------------------------------+
| hessian_type                  | OT_STRING | Type of Hessian - see        |
|                               |           | qpOASES documentation [UNKNO |
|                               |           | WN|posdef|semidef|indef|zero |
|                               |           | |identity]]                  |
+-------------------------------+-----------+------------------------------+
| initialFarBounds              | OT_DOUBLE | Initial size for far bounds. |
+-------------------------------+-----------+------------------------------+
| initialRamping                | OT_DOUBLE | Start value for ramping      |
|                               |           | strategy.                    |
+-------------------------------+-----------+------------------------------+
| initialStatusBounds           | OT_STRING | Initial status of bounds at  |
|                               |           | first iteration.             |
+-------------------------------+-----------+------------------------------+
| linsol_plugin                 | OT_STRING | Linear solver plugin         |
+-------------------------------+-----------+------------------------------+
| maxDualJump                   | OT_DOUBLE | Maximum allowed jump in dual |
|                               |           | variables in linear          |
|                               |           | independence tests.          |
+-------------------------------+-----------+------------------------------+
| maxPrimalJump                 | OT_DOUBLE | Maximum allowed jump in      |
|                               |           | primal variables in nonzero  |
|                               |           | curvature tests.             |
+-------------------------------+-----------+------------------------------+
| max_schur                     | OT_INT    | Maximal number of Schur      |
|                               |           | updates [75]                 |
+-------------------------------+-----------+------------------------------+
| nWSR                          | OT_INT    | The maximum number of        |
|                               |           | working set recalculations   |
|                               |           | to be performed during the   |
|                               |           | initial homotopy. Default is |
|                               |           | 5(nx + nc)                   |
+-------------------------------+-----------+------------------------------+
| numRefinementSteps            | OT_INT    | Maximum number of iterative  |
|                               |           | refinement steps.            |
+-------------------------------+-----------+------------------------------+
| numRegularisationSteps        | OT_INT    | Maximum number of successive |
|                               |           | regularisation steps.        |
+-------------------------------+-----------+------------------------------+
| printLevel                    | OT_STRING | Defines the amount of text   |
|                               |           | output during QP solution,   |
|                               |           | see Section 5.7              |
+-------------------------------+-----------+------------------------------+
| schur                         | OT_BOOL   | Use Schur Complement         |
|                               |           | Approach [false]             |
+-------------------------------+-----------+------------------------------+
| sparse                        | OT_BOOL   | Formulate the QP using       |
|                               |           | sparse matrices. [false]     |
+-------------------------------+-----------+------------------------------+
| terminationTolerance          | OT_DOUBLE | Relative termination         |
|                               |           | tolerance to stop homotopy.  |
+-------------------------------+-----------+------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

sqic
----



Interface to the SQIC solver for quadratic programming

--------------------------------------------------------------------------------





--------------------------------------------------------------------------------

nlpsol
------



Solve QPs using an Nlpsol Use the 'nlpsol' option to specify the NLP solver
to use.

>List of available options

+----------------+-----------+---------------------------------+
|       Id       |   Type    |           Description           |
+================+===========+=================================+
| nlpsol         | OT_STRING | Name of solver.                 |
+----------------+-----------+---------------------------------+
| nlpsol_options | OT_DICT   | Options to be passed to solver. |
+----------------+-----------+---------------------------------+

--------------------------------------------------------------------------------



Joel Andersson

";

%feature("docstring") casadi::doc_integrator "

Get the documentation string for a plugin.

";

%feature("docstring") casadi::simpleIRK "

Construct an implicit Runge-Kutta integrator using a collocation scheme The
constructed function has three inputs, corresponding to initial state (x0),
parameter (p) and integration time (h) and one output, corresponding to
final state (xf).

Parameters:
-----------

f:  ODE function with two inputs (x and p) and one output (xdot)

N:  Number of integrator steps

order:  Order of interpolating polynomials

scheme:   Collocation scheme, as excepted by collocationPoints function.

";

%feature("docstring") casadi::ptrVec "[INTERNAL]  Convenience function,
convert vectors to vectors of pointers.

";

%feature("docstring") casadi::nlpsol_option_type "

Get type info for a particular option.

";

%feature("docstring") casadi::casadi_axpy "[INTERNAL]  AXPY: y <- a*x + y.

";

%feature("docstring") casadi::has_nlpsol "

Check if a particular plugin is available.

";

%feature("docstring") casadi::casadi_getu "[INTERNAL]  Get the nonzeros for
the upper triangular half.

";

%feature("docstring") casadi::doc_nlpsol "

Get the documentation string for a plugin.

";

%feature("docstring") casadi::qpsol "";

%feature("docstring") casadi::zip "[INTERNAL] ";

%feature("docstring") casadi::slicot_mb03wd "";

%feature("docstring") casadi::casadi_max_viol "[INTERNAL]  Largest bound
violation.

";

%feature("docstring") casadi::collocation_interpolators "

Obtain collocation interpolating matrices.

Parameters:
-----------

tau_root:  location of collocation points, as obtained from
collocation_points

C:  interpolating coefficients to obtain derivatives Length: order+1, order
+ 1



::

dX/dt @collPoint(j) ~ Sum_i C[j][i]*X@collPoint(i)



Parameters:
-----------

D:  interpolating coefficients to obtain end state Length: order+1

";

%feature("docstring") casadi::replaceMat "[INTERNAL] ";

%feature("docstring") casadi::isMonotone "

Check if the vector is monotone.

";

%feature("docstring") casadi::nlpsol_n_in "

Number of NLP solver inputs.

";

%feature("docstring") casadi::matrixName "

Get typename.

";

%feature("docstring") casadi::load_dple "

Explicitly load a plugin dynamically.

";

%feature("docstring") casadi::integrator_in "

>  std::vector<std::string> casadi::integrator_in()
------------------------------------------------------------------------

Get input scheme of integrators.

>  std::string casadi::integrator_in(int ind)
------------------------------------------------------------------------

Get integrator input scheme name by index.

";

%feature("docstring") casadi::is_regular "

>  bool casadi::is_regular(const std::vector< T > &v)
------------------------------------------------------------------------

Checks if array does not contain NaN or Inf.

>  bool casadi::is_regular(N_Vector v)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::getcopy "[INTERNAL] ";

%feature("docstring") casadi::nlpsol_option_info "

Get documentation for a particular option.

";

%feature("docstring") casadi::read_matlab "

>  void casadi::read_matlab(std::istream &stream, std::vector< T > &v)
------------------------------------------------------------------------

Read vector, matlab style.

>  void casadi::read_matlab(std::ifstream &file, std::vector< std::vector< T > > &v)
------------------------------------------------------------------------

Read matrix, matlab style.

";

%feature("docstring") casadi::hash_value "

Hash value of an integer.

";

%feature("docstring") casadi::casadi_polyval "[INTERNAL]  Evaluate a
polynomial.

";

%feature("docstring") casadi::casadi_fill_int "[INTERNAL] ";

%feature("docstring") casadi::dense_mul_nt "[INTERNAL] ";

%feature("docstring") casadi::casadi_flip "[INTERNAL] ";

%feature("docstring") casadi::simpleIntegrator "

Simplified wrapper for the Integrator class Constructs an integrator using
the same syntax as simpleRK and simpleIRK. The constructed function has
three inputs, corresponding to initial state (x0), parameter (p) and
integration time (h) and one output, corresponding to final state (xf).

Parameters:
-----------

f:  ODE function with two inputs (x and p) and one output (xdot)

N:  Number of integrator steps

order:  Order of interpolating polynomials

scheme:   Collocation scheme, as excepted by collocationPoints function.

";

%feature("docstring") casadi::casadi_interpn_interpolate "[INTERNAL] ";

%feature("docstring") casadi::casadi_copy "[INTERNAL]  COPY: y <-x.

";

%feature("docstring") casadi::slicot_mb03vd "";

%feature("docstring") casadi::nlpsol_default_in "

Default input for an NLP solver.

";

%feature("docstring") casadi::einstein_process "";

%feature("docstring") casadi::casadi_interpn_weights "[INTERNAL] ";

%feature("docstring") casadi::casadi_norm_inf "[INTERNAL]  Inf-norm of a
vector * Returns the largest element in absolute value

";

%feature("docstring") casadi::slicot_mb05nd "";

%feature("docstring") casadi::has_rootfinder "

Check if a particular plugin is available.

";

%feature("docstring") casadi::conic_n_out "

Get the number of QP solver outputs.

";

%feature("docstring") casadi::casadi_project "[INTERNAL]  Sparse copy: y <-
x, w work vector (length >= number of rows)

";

%feature("docstring") casadi::matrixName< int > "

Get typename.

";

%feature("docstring") casadi::interpolant "

An interpolant function for lookup table data

General information
===================



List of plugins
===============



- bspline

- linear

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
Interpolant.doc(\"myextraplugin\")



--------------------------------------------------------------------------------

bspline
-------



>List of available options

+---------------+--------------+-------------------------------------------+
|      Id       |     Type     |                Description                |
+===============+==============+===========================================+
| degree        | OT_INTVECTOR | Sets, for each grid dimenion, the degree  |
|               |              | of the spline.                            |
+---------------+--------------+-------------------------------------------+
| linear_solver | OT_STRING    | Solver used for constructing the          |
|               |              | coefficient tensor.                       |
+---------------+--------------+-------------------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

linear
------



>List of available options

+-------------+-----------------+------------------------------------------+
|     Id      |      Type       |               Description                |
+=============+=================+==========================================+
| lookup_mode | OT_STRINGVECTOR | Sets, for each grid dimenion, the lookup |
|             |                 | algorithm used to find the correct       |
|             |                 | index. 'linear' uses a for-loop + break; |
|             |                 | 'exact' uses floored division (only for  |
|             |                 | uniform grids).                          |
+-------------+-----------------+------------------------------------------+

--------------------------------------------------------------------------------



Joel Andersson

";

%feature("docstring") casadi::dplesol "

>  Function casadi::dplesol(const std::string &name, const std::string &solver, const SpDict &qp, const Dict &opts=Dict())
------------------------------------------------------------------------

Discrete periodic Lyapunov Equation solver Given matrices $A_k$ and
symmetric $V_k, k = 0..K-1$

::

  A_k in R^(n x n)
  V_k in R^n
  

provides all of $P_k$ that satisfy:

::

  P_0 = A_(K-1)*P_(K-1)*A_(K-1)' + V_k
  P_k+1 = A_k*P_k*A_k' + V_k  for k = 1..K-1
  



General information
===================



>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| const_dim        | OT_BOOL         | Assume constant  | casadi::Dple     |
|                  |                 | dimension of P   |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| eps_unstable     | OT_DOUBLE       | A margin for     | casadi::Dple     |
|                  |                 | unstability      |                  |
|                  |                 | detection        |                  |
+------------------+-----------------+------------------+------------------+
| error_unstable   | OT_BOOL         | Throw an         | casadi::Dple     |
|                  |                 | exception when   |                  |
|                  |                 | it is detected   |                  |
|                  |                 | that             |                  |
|                  |                 | Product(A_i,     |                  |
|                  |                 | i=N..1)has       |                  |
|                  |                 | eigenvalues      |                  |
|                  |                 | greater than     |                  |
|                  |                 | 1-eps_unstable   |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Custom input     | casadi::Function |
|                  |                 | scheme           | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Custom output    | casadi::Function |
|                  |                 | scheme           | Internal         |
+------------------+-----------------+------------------+------------------+
| pos_def          | OT_BOOL         | Assume P         | casadi::Dple     |
|                  |                 | positive         |                  |
|                  |                 | definite         |                  |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

>Input scheme: casadi::DpleInput (DPLE_NUM_IN = 2)

+-----------+-------+------------------------------------------------------+
| Full name | Short |                     Description                      |
+===========+=======+======================================================+
| DPLE_A    | a     | A matrices (horzcat when const_dim, diagcat          |
|           |       | otherwise) [a].                                      |
+-----------+-------+------------------------------------------------------+
| DPLE_V    | v     | V matrices (horzcat when const_dim, diagcat          |
|           |       | otherwise) [v].                                      |
+-----------+-------+------------------------------------------------------+

>Output scheme: casadi::DpleOutput (DPLE_NUM_OUT = 1)

+-----------+-------+------------------------------------------------------+
| Full name | Short |                     Description                      |
+===========+=======+======================================================+
| DPLE_P    | p     | Lyapunov matrix (horzcat when const_dim, diagcat     |
|           |       | otherwise) (Cholesky of P if pos_def) [p].           |
+-----------+-------+------------------------------------------------------+

List of plugins
===============



- slicot

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
Dple.doc(\"myextraplugin\")



--------------------------------------------------------------------------------

slicot
------



An efficient solver for Discrete Periodic Lyapunov Equations using SLICOT

Uses Periodic Schur Decomposition ('psd') and does not assume positive
definiteness. Based on Periodic Lyapunov equations: some applications and
new algorithms. Int. J. Control, vol. 67, pp. 69-87, 1997.

Overview of the method: J. Gillis Practical Methods for Approximate Robust
Periodic Optimal Control ofNonlinear Mechanical Systems, PhD Thesis,
KULeuven, 2015

>List of available options

+-----------------------+-----------+--------------------------------------+
|          Id           |   Type    |             Description              |
+=======================+===========+======================================+
| linear_solver         | OT_STRING | User-defined linear solver class.    |
|                       |           | Needed for sensitivities.            |
+-----------------------+-----------+--------------------------------------+
| linear_solver_options | OT_DICT   | Options to be passed to the linear   |
|                       |           | solver.                              |
+-----------------------+-----------+--------------------------------------+
| psd_num_zero          | OT_DOUBLE | Numerical zero used in Periodic      |
|                       |           | Schur decomposition with slicot.This |
|                       |           | option is needed when your systems   |
|                       |           | has Floquet multiplierszero or close |
|                       |           | to zero                              |
+-----------------------+-----------+--------------------------------------+

--------------------------------------------------------------------------------



Joris Gillis

";

%feature("docstring") casadi::is_slice "

>  bool casadi::is_slice(const IM &x, bool ind1=false)
------------------------------------------------------------------------

Is the IM a Slice.

>  bool casadi::is_slice(const std::vector< int > &v, bool ind1=false)
------------------------------------------------------------------------

Check if an index vector can be represented more efficiently as a slice.

";

%feature("docstring") casadi::isIncreasing "

Check if the vector is strictly increasing.

";

%feature("docstring") casadi::doc_conic "

Get the documentation string for a plugin.

";

%feature("docstring") casadi::casadi_dot "[INTERNAL]  Inner product.

";

%feature("docstring") casadi::casadi_de_boor "[INTERNAL] ";

%feature("docstring") casadi::has_conic "

Check if a particular plugin is available.

";

%feature("docstring") casadi::load_conic "

Explicitly load a plugin dynamically.

";

%feature("docstring") casadi::jit "

Create a just-in-time compiled function from a C/C++ language string The
function can an arbitrary number of inputs and outputs that must all be
scalar-valued. Only specify the function body, assuming that the inputs are
stored in an array named 'arg' and the outputs stored in an array named
'res'. The data type used must be 'real_t', which is typically equal to
'double` or another data type with the same API as 'double'.

The final generated function will have a structure similar to:

void fname(const real_t* arg, real_t* res) { <FUNCTION_BODY> }

";

%feature("docstring") casadi::combine "[INTERNAL]  Combine two
dictionaries, giving priority to first one.

";

%feature("docstring") casadi::dple_n_out "

Get the number of QP solver outputs.

";

%feature("docstring") casadi::casadi_low "[INTERNAL] ";

%feature("docstring") casadi::load_rootfinder "

Explicitly load a plugin dynamically.

";

%feature("docstring") casadi::casadi_mv "[INTERNAL]  Sparse matrix-vector
multiplication: z <- z + x*y.

";

%feature("docstring") casadi::casadi_norm_2 "[INTERNAL]  NORM_2: ||x||_2 ->
return.

";

%feature("docstring") casadi::dense_kron_stride "[INTERNAL] ";

%feature("docstring") casadi::_which_depends "[INTERNAL] ";

%feature("docstring") casadi::casadi_bilin "[INTERNAL]  Calculates dot(x,
mul(A, y))

";

%feature("docstring") casadi::casadi_trans "[INTERNAL]  TRANS: y <-
trans(x) , w work vector (length >= rows x)

";

%feature("docstring") casadi::casadi_nd_boor_eval "[INTERNAL] ";

%feature("docstring") casadi::nlpsol_out "

>  std::vector<std::string> casadi::nlpsol_out()
------------------------------------------------------------------------

Get NLP solver output scheme of NLP solvers.

>Output scheme: casadi::NlpsolOutput (NLPSOL_NUM_OUT = 6)

+--------------+-------+---------------------------------------------------+
|  Full name   | Short |                    Description                    |
+==============+=======+===================================================+
| NLPSOL_X     | x     | Decision variables at the optimal solution (nx x  |
|              |       | 1)                                                |
+--------------+-------+---------------------------------------------------+
| NLPSOL_F     | f     | Cost function value at the optimal solution (1 x  |
|              |       | 1)                                                |
+--------------+-------+---------------------------------------------------+
| NLPSOL_G     | g     | Constraints function at the optimal solution (ng  |
|              |       | x 1)                                              |
+--------------+-------+---------------------------------------------------+
| NLPSOL_LAM_X | lam_x | Lagrange multipliers for bounds on X at the       |
|              |       | solution (nx x 1)                                 |
+--------------+-------+---------------------------------------------------+
| NLPSOL_LAM_G | lam_g | Lagrange multipliers for bounds on G at the       |
|              |       | solution (ng x 1)                                 |
+--------------+-------+---------------------------------------------------+
| NLPSOL_LAM_P | lam_p | Lagrange multipliers for bounds on P at the       |
|              |       | solution (np x 1)                                 |
+--------------+-------+---------------------------------------------------+

>  std::string casadi::nlpsol_out(int ind)
------------------------------------------------------------------------

Get output scheme name by index.

>Output scheme: casadi::NlpsolOutput (NLPSOL_NUM_OUT = 6)

+--------------+-------+---------------------------------------------------+
|  Full name   | Short |                    Description                    |
+==============+=======+===================================================+
| NLPSOL_X     | x     | Decision variables at the optimal solution (nx x  |
|              |       | 1)                                                |
+--------------+-------+---------------------------------------------------+
| NLPSOL_F     | f     | Cost function value at the optimal solution (1 x  |
|              |       | 1)                                                |
+--------------+-------+---------------------------------------------------+
| NLPSOL_G     | g     | Constraints function at the optimal solution (ng  |
|              |       | x 1)                                              |
+--------------+-------+---------------------------------------------------+
| NLPSOL_LAM_X | lam_x | Lagrange multipliers for bounds on X at the       |
|              |       | solution (nx x 1)                                 |
+--------------+-------+---------------------------------------------------+
| NLPSOL_LAM_G | lam_g | Lagrange multipliers for bounds on G at the       |
|              |       | solution (ng x 1)                                 |
+--------------+-------+---------------------------------------------------+
| NLPSOL_LAM_P | lam_p | Lagrange multipliers for bounds on P at the       |
|              |       | solution (np x 1)                                 |
+--------------+-------+---------------------------------------------------+

";

%feature("docstring") casadi::has_expm "

Check if a particular plugin is available.

";

%feature("docstring") casadi::has_linsol "

Check if a particular plugin is available.

";

%feature("docstring") casadi::simpleRK "

Construct an explicit Runge-Kutta integrator The constructed function has
three inputs, corresponding to initial state (x0), parameter (p) and
integration time (h) and one output, corresponding to final state (xf).

Parameters:
-----------

f:  ODE function with two inputs (x and p) and one output (xdot)

N:  Number of integrator steps

order:  Order of interpolating polynomials

";

%feature("docstring") casadi::nlpsol_in "

>  std::vector<std::string> casadi::nlpsol_in()
------------------------------------------------------------------------

Get input scheme of NLP solvers.

>Input scheme: casadi::NlpsolInput (NLPSOL_NUM_IN = 8)

+---------------+--------+-------------------------------------------------+
|   Full name   | Short  |                   Description                   |
+===============+========+=================================================+
| NLPSOL_X0     | x0     | Decision variables, initial guess (nx x 1)      |
+---------------+--------+-------------------------------------------------+
| NLPSOL_P      | p      | Value of fixed parameters (np x 1)              |
+---------------+--------+-------------------------------------------------+
| NLPSOL_LBX    | lbx    | Decision variables lower bound (nx x 1),        |
|               |        | default -inf.                                   |
+---------------+--------+-------------------------------------------------+
| NLPSOL_UBX    | ubx    | Decision variables upper bound (nx x 1),        |
|               |        | default +inf.                                   |
+---------------+--------+-------------------------------------------------+
| NLPSOL_LBG    | lbg    | Constraints lower bound (ng x 1), default -inf. |
+---------------+--------+-------------------------------------------------+
| NLPSOL_UBG    | ubg    | Constraints upper bound (ng x 1), default +inf. |
+---------------+--------+-------------------------------------------------+
| NLPSOL_LAM_X0 | lam_x0 | Lagrange multipliers for bounds on X, initial   |
|               |        | guess (nx x 1)                                  |
+---------------+--------+-------------------------------------------------+
| NLPSOL_LAM_G0 | lam_g0 | Lagrange multipliers for bounds on G, initial   |
|               |        | guess (ng x 1)                                  |
+---------------+--------+-------------------------------------------------+

>  std::string casadi::nlpsol_in(int ind)
------------------------------------------------------------------------

Get NLP solver input scheme name by index.

>Input scheme: casadi::NlpsolInput (NLPSOL_NUM_IN = 8)

+---------------+--------+-------------------------------------------------+
|   Full name   | Short  |                   Description                   |
+===============+========+=================================================+
| NLPSOL_X0     | x0     | Decision variables, initial guess (nx x 1)      |
+---------------+--------+-------------------------------------------------+
| NLPSOL_P      | p      | Value of fixed parameters (np x 1)              |
+---------------+--------+-------------------------------------------------+
| NLPSOL_LBX    | lbx    | Decision variables lower bound (nx x 1),        |
|               |        | default -inf.                                   |
+---------------+--------+-------------------------------------------------+
| NLPSOL_UBX    | ubx    | Decision variables upper bound (nx x 1),        |
|               |        | default +inf.                                   |
+---------------+--------+-------------------------------------------------+
| NLPSOL_LBG    | lbg    | Constraints lower bound (ng x 1), default -inf. |
+---------------+--------+-------------------------------------------------+
| NLPSOL_UBG    | ubg    | Constraints upper bound (ng x 1), default +inf. |
+---------------+--------+-------------------------------------------------+
| NLPSOL_LAM_X0 | lam_x0 | Lagrange multipliers for bounds on X, initial   |
|               |        | guess (nx x 1)                                  |
+---------------+--------+-------------------------------------------------+
| NLPSOL_LAM_G0 | lam_g0 | Lagrange multipliers for bounds on G, initial   |
|               |        | guess (ng x 1)                                  |
+---------------+--------+-------------------------------------------------+

";

%feature("docstring") casadi::conic_n_in "

Get the number of QP solver inputs.

";

%feature("docstring") casadi::casadi_densify "[INTERNAL]  Convert sparse to
dense.

";

%feature("docstring") casadi::doc_rootfinder "

Get the documentation string for a plugin.

";

%feature("docstring") casadi::dple_in "

>  std::vector<std::string> casadi::dple_in()
------------------------------------------------------------------------

Get input scheme of DPLE solvers.

>  std::string casadi::dple_in(int ind)
------------------------------------------------------------------------

Get DPLE input scheme name by index.

";

%feature("docstring") casadi::dense_copy_t_stride "[INTERNAL] ";

%feature("docstring") casadi::dense_mul_nn2 "[INTERNAL] ";

%feature("docstring") casadi::nlpsol "

>  Function casadi::nlpsol(const std::string &name, const std::string &solver, const SXDict &nlp, const Dict &opts=Dict())
------------------------------------------------------------------------

Create an NLP solver Creates a solver for the following parametric nonlinear
program (NLP):

::

  min          F(x, p)
  x
  
  subject to
  LBX <=   x    <= UBX
  LBG <= G(x, p) <= UBG
  p  == P
  
  nx: number of decision variables
  ng: number of constraints
  np: number of parameters



General information
===================



>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| common_options   | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | auto-generated   | nction           |
|                  |                 | functions        |                  |
+------------------+-----------------+------------------+------------------+
| discrete         | OT_BOOLVECTOR   | Indicates which  | casadi::Nlpsol   |
|                  |                 | of the variables |                  |
|                  |                 | are discrete,    |                  |
|                  |                 | i.e. integer-    |                  |
|                  |                 | valued           |                  |
+------------------+-----------------+------------------+------------------+
| eval_errors_fata | OT_BOOL         | When errors      | casadi::Nlpsol   |
| l                |                 | occur during     |                  |
|                  |                 | evaluation of    |                  |
|                  |                 | f,g,...,stop the |                  |
|                  |                 | iterations       |                  |
+------------------+-----------------+------------------+------------------+
| expand           | OT_BOOL         | Replace MX with  | casadi::Nlpsol   |
|                  |                 | SX expressions   |                  |
|                  |                 | in problem       |                  |
|                  |                 | formulation      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| ignore_check_vec | OT_BOOL         | If set to true,  | casadi::Nlpsol   |
|                  |                 | the input shape  |                  |
|                  |                 | of F will not be |                  |
|                  |                 | checked.         |                  |
+------------------+-----------------+------------------+------------------+
| iteration_callba | OT_FUNCTION     | A function that  | casadi::Nlpsol   |
| ck               |                 | will be called   |                  |
|                  |                 | at each          |                  |
|                  |                 | iteration with   |                  |
|                  |                 | the solver as    |                  |
|                  |                 | input. Check     |                  |
|                  |                 | documentation of |                  |
|                  |                 | Callback .       |                  |
+------------------+-----------------+------------------+------------------+
| iteration_callba | OT_BOOL         | If set to true,  | casadi::Nlpsol   |
| ck_ignore_errors |                 | errors thrown by |                  |
|                  |                 | iteration_callba |                  |
|                  |                 | ck will be       |                  |
|                  |                 | ignored.         |                  |
+------------------+-----------------+------------------+------------------+
| iteration_callba | OT_INT          | Only call the    | casadi::Nlpsol   |
| ck_step          |                 | callback         |                  |
|                  |                 | function every   |                  |
|                  |                 | few iterations.  |                  |
+------------------+-----------------+------------------+------------------+
| monitor          | OT_STRINGVECTOR | Set of user      | casadi::OracleFu |
|                  |                 | problem          | nction           |
|                  |                 | functions to be  |                  |
|                  |                 | monitored        |                  |
+------------------+-----------------+------------------+------------------+
| specific_options | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | specific auto-   | nction           |
|                  |                 | generated        |                  |
|                  |                 | functions,       |                  |
|                  |                 | overwriting the  |                  |
|                  |                 | defaults from    |                  |
|                  |                 | common_options.  |                  |
|                  |                 | Nested           |                  |
|                  |                 | dictionary.      |                  |
+------------------+-----------------+------------------+------------------+
| verbose_init     | OT_BOOL         | Print out timing | casadi::Nlpsol   |
|                  |                 | information      |                  |
|                  |                 | about the        |                  |
|                  |                 | different stages |                  |
|                  |                 | of               |                  |
|                  |                 | initialization   |                  |
+------------------+-----------------+------------------+------------------+
| warn_initial_bou | OT_BOOL         | Warn if the      | casadi::Nlpsol   |
| nds              |                 | initial guess    |                  |
|                  |                 | does not satisfy |                  |
|                  |                 | LBX and UBX      |                  |
+------------------+-----------------+------------------+------------------+

>Input scheme: casadi::NlpsolInput (NLPSOL_NUM_IN = 8)

+---------------+--------+-------------------------------------------------+
|   Full name   | Short  |                   Description                   |
+===============+========+=================================================+
| NLPSOL_X0     | x0     | Decision variables, initial guess (nx x 1)      |
+---------------+--------+-------------------------------------------------+
| NLPSOL_P      | p      | Value of fixed parameters (np x 1)              |
+---------------+--------+-------------------------------------------------+
| NLPSOL_LBX    | lbx    | Decision variables lower bound (nx x 1),        |
|               |        | default -inf.                                   |
+---------------+--------+-------------------------------------------------+
| NLPSOL_UBX    | ubx    | Decision variables upper bound (nx x 1),        |
|               |        | default +inf.                                   |
+---------------+--------+-------------------------------------------------+
| NLPSOL_LBG    | lbg    | Constraints lower bound (ng x 1), default -inf. |
+---------------+--------+-------------------------------------------------+
| NLPSOL_UBG    | ubg    | Constraints upper bound (ng x 1), default +inf. |
+---------------+--------+-------------------------------------------------+
| NLPSOL_LAM_X0 | lam_x0 | Lagrange multipliers for bounds on X, initial   |
|               |        | guess (nx x 1)                                  |
+---------------+--------+-------------------------------------------------+
| NLPSOL_LAM_G0 | lam_g0 | Lagrange multipliers for bounds on G, initial   |
|               |        | guess (ng x 1)                                  |
+---------------+--------+-------------------------------------------------+

>Output scheme: casadi::NlpsolOutput (NLPSOL_NUM_OUT = 6)

+--------------+-------+---------------------------------------------------+
|  Full name   | Short |                    Description                    |
+==============+=======+===================================================+
| NLPSOL_X     | x     | Decision variables at the optimal solution (nx x  |
|              |       | 1)                                                |
+--------------+-------+---------------------------------------------------+
| NLPSOL_F     | f     | Cost function value at the optimal solution (1 x  |
|              |       | 1)                                                |
+--------------+-------+---------------------------------------------------+
| NLPSOL_G     | g     | Constraints function at the optimal solution (ng  |
|              |       | x 1)                                              |
+--------------+-------+---------------------------------------------------+
| NLPSOL_LAM_X | lam_x | Lagrange multipliers for bounds on X at the       |
|              |       | solution (nx x 1)                                 |
+--------------+-------+---------------------------------------------------+
| NLPSOL_LAM_G | lam_g | Lagrange multipliers for bounds on G at the       |
|              |       | solution (ng x 1)                                 |
+--------------+-------+---------------------------------------------------+
| NLPSOL_LAM_P | lam_p | Lagrange multipliers for bounds on P at the       |
|              |       | solution (np x 1)                                 |
+--------------+-------+---------------------------------------------------+

List of plugins
===============



- blocksqp

- bonmin

- ipopt

- knitro

- snopt

- worhp

- scpgen

- sqpmethod

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
Nlpsol.doc(\"myextraplugin\")



--------------------------------------------------------------------------------

blocksqp
--------



This is a modified version of blockSQP by Janka et al.

Dennis Janka, Joel Andersson

>List of available options

+----------------------------+-----------+---------------------------------+
|             Id             |   Type    |           Description           |
+============================+===========+=================================+
| block_hess                 | OT_INT    | Blockwise Hessian               |
|                            |           | approximation?                  |
+----------------------------+-----------+---------------------------------+
| col_eps                    | OT_DOUBLE | Epsilon for COL scaling         |
|                            |           | strategy                        |
+----------------------------+-----------+---------------------------------+
| col_tau1                   | OT_DOUBLE | tau1 for COL scaling strategy   |
+----------------------------+-----------+---------------------------------+
| col_tau2                   | OT_DOUBLE | tau2 for COL scaling strategy   |
+----------------------------+-----------+---------------------------------+
| conv_strategy              | OT_INT    | Convexification strategy        |
+----------------------------+-----------+---------------------------------+
| delta                      | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| delta_h0                   | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| eps                        | OT_DOUBLE | Values smaller than this are    |
|                            |           | regarded as numerically zero    |
+----------------------------+-----------+---------------------------------+
| eta                        | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| fallback_scaling           | OT_INT    | If indefinite update is used,   |
|                            |           | the type of fallback strategy   |
+----------------------------+-----------+---------------------------------+
| fallback_update            | OT_INT    | If indefinite update is used,   |
|                            |           | the type of fallback strategy   |
+----------------------------+-----------+---------------------------------+
| gamma_f                    | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| gamma_theta                | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| globalization              | OT_BOOL   | Enable globalization            |
+----------------------------+-----------+---------------------------------+
| hess_damp                  | OT_INT    | Activate Powell damping for     |
|                            |           | BFGS                            |
+----------------------------+-----------+---------------------------------+
| hess_damp_fac              | OT_DOUBLE | Damping factor for BFGS Powell  |
|                            |           | modification                    |
+----------------------------+-----------+---------------------------------+
| hess_lim_mem               | OT_INT    | Full or limited memory          |
+----------------------------+-----------+---------------------------------+
| hess_memsize               | OT_INT    | Memory size for L-BFGS updates  |
+----------------------------+-----------+---------------------------------+
| hess_scaling               | OT_INT    | Scaling strategy for Hessian    |
|                            |           | approximation                   |
+----------------------------+-----------+---------------------------------+
| hess_update                | OT_INT    | Type of Hessian approximation   |
+----------------------------+-----------+---------------------------------+
| ini_hess_diag              | OT_DOUBLE | Initial Hessian guess: diagonal |
|                            |           | matrix diag(iniHessDiag)        |
+----------------------------+-----------+---------------------------------+
| kappa_f                    | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| kappa_minus                | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| kappa_plus                 | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| kappa_plus_max             | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| kappa_soc                  | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| linsol                     | OT_STRING | The linear solver to be used by |
|                            |           | the QP method                   |
+----------------------------+-----------+---------------------------------+
| max_consec_reduced_steps   | OT_INT    | Maximum number of consecutive   |
|                            |           | reduced steps                   |
+----------------------------+-----------+---------------------------------+
| max_consec_skipped_updates | OT_INT    | Maximum number of consecutive   |
|                            |           | skipped updates                 |
+----------------------------+-----------+---------------------------------+
| max_conv_qp                | OT_INT    | How many additional QPs may be  |
|                            |           | solved for convexification per  |
|                            |           | iteration?                      |
+----------------------------+-----------+---------------------------------+
| max_it_qp                  | OT_INT    | Maximum number of QP iterations |
|                            |           | per SQP iteration               |
+----------------------------+-----------+---------------------------------+
| max_iter                   | OT_INT    | Maximum number of SQP           |
|                            |           | iterations                      |
+----------------------------+-----------+---------------------------------+
| max_line_search            | OT_INT    | Maximum number of steps in line |
|                            |           | search                          |
+----------------------------+-----------+---------------------------------+
| max_soc_iter               | OT_INT    | Maximum number of SOC line      |
|                            |           | search iterations               |
+----------------------------+-----------+---------------------------------+
| max_time_qp                | OT_DOUBLE | Maximum number of time in       |
|                            |           | seconds per QP solve per SQP    |
|                            |           | iteration                       |
+----------------------------+-----------+---------------------------------+
| nlinfeastol                | OT_DOUBLE | Nonlinear feasibility tolerance |
+----------------------------+-----------+---------------------------------+
| obj_lo                     | OT_DOUBLE | Lower bound on objective        |
|                            |           | function [-inf]                 |
+----------------------------+-----------+---------------------------------+
| obj_up                     | OT_DOUBLE | Upper bound on objective        |
|                            |           | function [inf]                  |
+----------------------------+-----------+---------------------------------+
| opttol                     | OT_DOUBLE | Optimality tolerance            |
+----------------------------+-----------+---------------------------------+
| print_header               | OT_BOOL   | Print solver header at startup  |
+----------------------------+-----------+---------------------------------+
| print_iteration            | OT_BOOL   | Print SQP iterations            |
+----------------------------+-----------+---------------------------------+
| qpsol                      | OT_STRING | The QP solver to be used by the |
|                            |           | SQP method                      |
+----------------------------+-----------+---------------------------------+
| qpsol_options              | OT_DICT   | Options to be passed to the QP  |
|                            |           | solver                          |
+----------------------------+-----------+---------------------------------+
| restore_feas               | OT_BOOL   | Use feasibility restoration     |
|                            |           | phase                           |
+----------------------------+-----------+---------------------------------+
| s_f                        | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| s_theta                    | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| schur                      | OT_BOOL   | Use qpOASES Schur compliment    |
|                            |           | approach                        |
+----------------------------+-----------+---------------------------------+
| skip_first_globalization   | OT_BOOL   | No globalization strategy in    |
|                            |           | first iteration                 |
+----------------------------+-----------+---------------------------------+
| theta_max                  | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| theta_min                  | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| warmstart                  | OT_BOOL   | Use warmstarting                |
+----------------------------+-----------+---------------------------------+
| which_second_derv          | OT_INT    | For which block should second   |
|                            |           | derivatives be provided by the  |
|                            |           | user                            |
+----------------------------+-----------+---------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

bonmin
------



When in warmstart mode, output NLPSOL_LAM_X may be used as input

NOTE: Even when max_iter == 0, it is not guaranteed that input(NLPSOL_X0) ==
output(NLPSOL_X). Indeed if bounds on X or constraints are unmet, they will
differ.

For a good tutorial on BONMIN,
seehttp://drops.dagstuhl.de/volltexte/2009/2089/pdf/09061.WaechterAndreas.Paper.2089.pdf

A good resource about the algorithms in BONMIN is: Wachter and L. T.
Biegler, On the Implementation of an Interior-Point Filter Line-Search
Algorithm for Large-Scale Nonlinear Programming, Mathematical Programming
106(1), pp. 25-57, 2006 (As Research Report RC 23149, IBM T. J. Watson
Research Center, Yorktown, USA

Caveats: with default options, multipliers for the decision variables are
wrong for equality constraints. Change the 'fixed_variable_treatment' to
'make_constraint' or 'relax_bounds' to obtain correct results.

>List of available options

+--------------------------+-------------+---------------------------------+
|            Id            |    Type     |           Description           |
+==========================+=============+=================================+
| bonmin                   | OT_DICT     | Options to be passed to BONMIN  |
+--------------------------+-------------+---------------------------------+
| con_integer_md           | OT_DICT     | Integer metadata (a dictionary  |
|                          |             | with lists of integers) about   |
|                          |             | constraints to be passed to     |
|                          |             | BONMIN                          |
+--------------------------+-------------+---------------------------------+
| con_numeric_md           | OT_DICT     | Numeric metadata (a dictionary  |
|                          |             | with lists of reals) about      |
|                          |             | constraints to be passed to     |
|                          |             | BONMIN                          |
+--------------------------+-------------+---------------------------------+
| con_string_md            | OT_DICT     | String metadata (a dictionary   |
|                          |             | with lists of strings) about    |
|                          |             | constraints to be passed to     |
|                          |             | BONMIN                          |
+--------------------------+-------------+---------------------------------+
| grad_f                   | OT_FUNCTION | Function for calculating the    |
|                          |             | gradient of the objective       |
|                          |             | (column, autogenerated by       |
|                          |             | default)                        |
+--------------------------+-------------+---------------------------------+
| grad_f_options           | OT_DICT     | Options for the autogenerated   |
|                          |             | gradient of the objective.      |
+--------------------------+-------------+---------------------------------+
| hess_lag                 | OT_FUNCTION | Function for calculating the    |
|                          |             | Hessian of the Lagrangian       |
|                          |             | (autogenerated by default)      |
+--------------------------+-------------+---------------------------------+
| hess_lag_options         | OT_DICT     | Options for the autogenerated   |
|                          |             | Hessian of the Lagrangian.      |
+--------------------------+-------------+---------------------------------+
| jac_g                    | OT_FUNCTION | Function for calculating the    |
|                          |             | Jacobian of the constraints     |
|                          |             | (autogenerated by default)      |
+--------------------------+-------------+---------------------------------+
| jac_g_options            | OT_DICT     | Options for the autogenerated   |
|                          |             | Jacobian of the constraints.    |
+--------------------------+-------------+---------------------------------+
| pass_nonlinear_variables | OT_BOOL     | Pass list of variables entering |
|                          |             | nonlinearly to BONMIN           |
+--------------------------+-------------+---------------------------------+
| var_integer_md           | OT_DICT     | Integer metadata (a dictionary  |
|                          |             | with lists of integers) about   |
|                          |             | variables to be passed to       |
|                          |             | BONMIN                          |
+--------------------------+-------------+---------------------------------+
| var_numeric_md           | OT_DICT     | Numeric metadata (a dictionary  |
|                          |             | with lists of reals) about      |
|                          |             | variables to be passed to       |
|                          |             | BONMIN                          |
+--------------------------+-------------+---------------------------------+
| var_string_md            | OT_DICT     | String metadata (a dictionary   |
|                          |             | with lists of strings) about    |
|                          |             | variables to be passed to       |
|                          |             | BONMIN                          |
+--------------------------+-------------+---------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

ipopt
-----



When in warmstart mode, output NLPSOL_LAM_X may be used as input

NOTE: Even when max_iter == 0, it is not guaranteed that input(NLPSOL_X0) ==
output(NLPSOL_X). Indeed if bounds on X or constraints are unmet, they will
differ.

For a good tutorial on IPOPT,
seehttp://drops.dagstuhl.de/volltexte/2009/2089/pdf/09061.WaechterAndreas.Paper.2089.pdf

A good resource about the algorithms in IPOPT is: Wachter and L. T. Biegler,
On the Implementation of an Interior-Point Filter Line-Search Algorithm for
Large-Scale Nonlinear Programming, Mathematical Programming 106(1), pp.
25-57, 2006 (As Research Report RC 23149, IBM T. J. Watson Research Center,
Yorktown, USA

Caveats: with default options, multipliers for the decision variables are
wrong for equality constraints. Change the 'fixed_variable_treatment' to
'make_constraint' or 'relax_bounds' to obtain correct results.

>List of available options

+--------------------------+-------------+---------------------------------+
|            Id            |    Type     |           Description           |
+==========================+=============+=================================+
| con_integer_md           | OT_DICT     | Integer metadata (a dictionary  |
|                          |             | with lists of integers) about   |
|                          |             | constraints to be passed to     |
|                          |             | IPOPT                           |
+--------------------------+-------------+---------------------------------+
| con_numeric_md           | OT_DICT     | Numeric metadata (a dictionary  |
|                          |             | with lists of reals) about      |
|                          |             | constraints to be passed to     |
|                          |             | IPOPT                           |
+--------------------------+-------------+---------------------------------+
| con_string_md            | OT_DICT     | String metadata (a dictionary   |
|                          |             | with lists of strings) about    |
|                          |             | constraints to be passed to     |
|                          |             | IPOPT                           |
+--------------------------+-------------+---------------------------------+
| grad_f                   | OT_FUNCTION | Function for calculating the    |
|                          |             | gradient of the objective       |
|                          |             | (column, autogenerated by       |
|                          |             | default)                        |
+--------------------------+-------------+---------------------------------+
| hess_lag                 | OT_FUNCTION | Function for calculating the    |
|                          |             | Hessian of the Lagrangian       |
|                          |             | (autogenerated by default)      |
+--------------------------+-------------+---------------------------------+
| ipopt                    | OT_DICT     | Options to be passed to IPOPT   |
+--------------------------+-------------+---------------------------------+
| jac_g                    | OT_FUNCTION | Function for calculating the    |
|                          |             | Jacobian of the constraints     |
|                          |             | (autogenerated by default)      |
+--------------------------+-------------+---------------------------------+
| pass_nonlinear_variables | OT_BOOL     | Pass list of variables entering |
|                          |             | nonlinearly to IPOPT            |
+--------------------------+-------------+---------------------------------+
| var_integer_md           | OT_DICT     | Integer metadata (a dictionary  |
|                          |             | with lists of integers) about   |
|                          |             | variables to be passed to IPOPT |
+--------------------------+-------------+---------------------------------+
| var_numeric_md           | OT_DICT     | Numeric metadata (a dictionary  |
|                          |             | with lists of reals) about      |
|                          |             | variables to be passed to IPOPT |
+--------------------------+-------------+---------------------------------+
| var_string_md            | OT_DICT     | String metadata (a dictionary   |
|                          |             | with lists of strings) about    |
|                          |             | variables to be passed to IPOPT |
+--------------------------+-------------+---------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

knitro
------



KNITRO interface

>List of available options

+---------+--------------+--------------------------------+
|   Id    |     Type     |          Description           |
+=========+==============+================================+
| contype | OT_INTVECTOR | Type of constraint             |
+---------+--------------+--------------------------------+
| knitro  | OT_DICT      | Options to be passed to KNITRO |
+---------+--------------+--------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

snopt
-----



SNOPT interface

>List of available options

+-------+-----------+---------------------------------------------+
|  Id   |   Type    |                 Description                 |
+=======+===========+=============================================+
| snopt | OT_DICT   | Options to be passed to SNOPT               |
+-------+-----------+---------------------------------------------+
| start | OT_STRING | Warm-start options for Worhp: cold|warm|hot |
+-------+-----------+---------------------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

worhp
-----



WORHP interface

Designed for Worhp 1.10

>List of available options

+-------+---------+-------------------------------+
|  Id   |  Type   |          Description          |
+=======+=========+===============================+
| worhp | OT_DICT | Options to be passed to WORHP |
+-------+---------+-------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

scpgen
------



A structure-exploiting sequential quadratic programming (to be come
sequential convex programming) method for nonlinear programming.

>List of available options

+-----------------------+-----------------+--------------------------------+
|          Id           |      Type       |          Description           |
+=======================+=================+================================+
| beta                  | OT_DOUBLE       | Line-search parameter,         |
|                       |                 | restoration factor of stepsize |
+-----------------------+-----------------+--------------------------------+
| c1                    | OT_DOUBLE       | Armijo condition, coefficient  |
|                       |                 | of decrease in merit           |
+-----------------------+-----------------+--------------------------------+
| codegen               | OT_BOOL         | C-code generation              |
+-----------------------+-----------------+--------------------------------+
| hessian_approximation | OT_STRING       | gauss-newton|exact             |
+-----------------------+-----------------+--------------------------------+
| lbfgs_memory          | OT_INT          | Size of L-BFGS memory.         |
+-----------------------+-----------------+--------------------------------+
| max_iter              | OT_INT          | Maximum number of SQP          |
|                       |                 | iterations                     |
+-----------------------+-----------------+--------------------------------+
| max_iter_ls           | OT_INT          | Maximum number of linesearch   |
|                       |                 | iterations                     |
+-----------------------+-----------------+--------------------------------+
| merit_memsize         | OT_INT          | Size of memory to store        |
|                       |                 | history of merit function      |
|                       |                 | values                         |
+-----------------------+-----------------+--------------------------------+
| merit_start           | OT_DOUBLE       | Lower bound for the merit      |
|                       |                 | function parameter             |
+-----------------------+-----------------+--------------------------------+
| name_x                | OT_STRINGVECTOR | Names of the variables.        |
+-----------------------+-----------------+--------------------------------+
| print_header          | OT_BOOL         | Print the header with problem  |
|                       |                 | statistics                     |
+-----------------------+-----------------+--------------------------------+
| print_x               | OT_INTVECTOR    | Which variables to print.      |
+-----------------------+-----------------+--------------------------------+
| qpsol                 | OT_STRING       | The QP solver to be used by    |
|                       |                 | the SQP method                 |
+-----------------------+-----------------+--------------------------------+
| qpsol_options         | OT_DICT         | Options to be passed to the QP |
|                       |                 | solver                         |
+-----------------------+-----------------+--------------------------------+
| reg_threshold         | OT_DOUBLE       | Threshold for the              |
|                       |                 | regularization.                |
+-----------------------+-----------------+--------------------------------+
| regularize            | OT_BOOL         | Automatic regularization of    |
|                       |                 | Lagrange Hessian.              |
+-----------------------+-----------------+--------------------------------+
| tol_du                | OT_DOUBLE       | Stopping criterion for dual    |
|                       |                 | infeasability                  |
+-----------------------+-----------------+--------------------------------+
| tol_pr                | OT_DOUBLE       | Stopping criterion for primal  |
|                       |                 | infeasibility                  |
+-----------------------+-----------------+--------------------------------+
| tol_pr_step           | OT_DOUBLE       | Stopping criterion for the     |
|                       |                 | step size                      |
+-----------------------+-----------------+--------------------------------+
| tol_reg               | OT_DOUBLE       | Stopping criterion for         |
|                       |                 | regularization                 |
+-----------------------+-----------------+--------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

sqpmethod
---------



A textbook SQPMethod

>List of available options

+-----------------------+-----------+--------------------------------------+
|          Id           |   Type    |             Description              |
+=======================+===========+======================================+
| beta                  | OT_DOUBLE | Line-search parameter, restoration   |
|                       |           | factor of stepsize                   |
+-----------------------+-----------+--------------------------------------+
| c1                    | OT_DOUBLE | Armijo condition, coefficient of     |
|                       |           | decrease in merit                    |
+-----------------------+-----------+--------------------------------------+
| hessian_approximation | OT_STRING | limited-memory|exact                 |
+-----------------------+-----------+--------------------------------------+
| lbfgs_memory          | OT_INT    | Size of L-BFGS memory.               |
+-----------------------+-----------+--------------------------------------+
| max_iter              | OT_INT    | Maximum number of SQP iterations     |
+-----------------------+-----------+--------------------------------------+
| max_iter_ls           | OT_INT    | Maximum number of linesearch         |
|                       |           | iterations                           |
+-----------------------+-----------+--------------------------------------+
| merit_memory          | OT_INT    | Size of memory to store history of   |
|                       |           | merit function values                |
+-----------------------+-----------+--------------------------------------+
| min_step_size         | OT_DOUBLE | The size (inf-norm) of the step size |
|                       |           | should not become smaller than this. |
+-----------------------+-----------+--------------------------------------+
| print_header          | OT_BOOL   | Print the header with problem        |
|                       |           | statistics                           |
+-----------------------+-----------+--------------------------------------+
| print_iteration       | OT_BOOL   | Print the iterations                 |
+-----------------------+-----------+--------------------------------------+
| qpsol                 | OT_STRING | The QP solver to be used by the SQP  |
|                       |           | method                               |
+-----------------------+-----------+--------------------------------------+
| qpsol_options         | OT_DICT   | Options to be passed to the QP       |
|                       |           | solver                               |
+-----------------------+-----------+--------------------------------------+
| regularize            | OT_BOOL   | Automatic regularization of Lagrange |
|                       |           | Hessian.                             |
+-----------------------+-----------+--------------------------------------+
| tol_du                | OT_DOUBLE | Stopping criterion for dual          |
|                       |           | infeasability                        |
+-----------------------+-----------+--------------------------------------+
| tol_pr                | OT_DOUBLE | Stopping criterion for primal        |
|                       |           | infeasibility                        |
+-----------------------+-----------+--------------------------------------+

--------------------------------------------------------------------------------



Joel Andersson

";

%feature("docstring") casadi::userOut "";

%feature("docstring") casadi::casadi_norm_inf_mul "[INTERNAL]  Inf-norm of
a Matrix-matrix product,*

Parameters:
-----------

dwork:  A real work vector that you must allocate Minimum size: y.size1()

iwork:  A integer work vector that you must allocate Minimum size:
y.size1()+x.size2()+1

";

%feature("docstring") casadi::matrixName< SXElem > " [INTERNAL] ";

%feature("docstring") casadi::casadi_fill "[INTERNAL]  FILL: x <- alpha.

";

%feature("docstring") casadi::conic_out "

>  std::vector<std::string> casadi::conic_out()
------------------------------------------------------------------------

Get QP solver output scheme of QP solvers.

>  std::string casadi::conic_out(int ind)
------------------------------------------------------------------------

Get output scheme name by index.

";


// File: namespaceIpopt.xml


// File: namespacestd.xml


// File: chapter1.xml


// File: chapter2.xml


// File: chapter3.xml


// File: chapter4.xml


// File: chapter5.xml


// File: chapter6.xml

