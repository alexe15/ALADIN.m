
// File: index.xml

// File: classcasadi_1_1Assertion.xml


// File: classcasadi_1_1Bilin.xml


// File: classcasadi_1_1BinaryMX.xml


// File: classcasadi_1_1BinarySX.xml


// File: classcasadi_1_1Blocksqp.xml
%feature("docstring")  casadi::FunctionInternal::reverse(int nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring") casadi::Blocksqp::_set_temp "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::Blocksqp::get_options() const override "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::Nlpsol::type_name() const override "

[INTERNAL]  Get type name.

";

%feature("docstring")  casadi::FunctionInternal::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::map_mx(const std::vector<
std::vector< MX > > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::map_mx(const std::vector<
MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::Nlpsol::get_name_out(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::get_forward(const
std::string &name, int nfwd, const std::vector< std::string > &i_names,
const std::vector< std::string > &o_names, const Dict &opts) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::Blocksqp::_setup "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::OracleFunction::finalize(const Dict &opts)
override "

[INTERNAL]  Finalize initialization.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsityGen(int iind,
int oind, bool symmetric, int gr_i=1, int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(int nadj) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")
casadi::FunctionInternal::generateFunction(CodeGenerator &g, const
std::string &fname, bool decl_static) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::Blocksqp::plugin_name() const override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::log(const std::string &msg)
const  "

[INTERNAL]  Log the status of the solver.

";

%feature("docstring")  casadi::FunctionInternal::log(const std::string &fcn,
const std::string &msg) const  "

[INTERNAL]  Log the status of the solver, function given.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::grad_sx(int iind=0, int
oind=0) "

[INTERNAL]  Gradient expression.

";

%feature("docstring")  casadi::Blocksqp::alloc_memory() const override "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::Blocksqp::printProgress(BlocksqpMemory *m)
const  "

[INTERNAL]  Print one line of output to stdout about the current iteration.

";

%feature("docstring")  casadi::FunctionInternal::checkRes(const std::vector<
M > &res) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::generateBody(CodeGenerator
&g) const  "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::Blocksqp::init(const Dict &opts) override "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::FunctionInternal::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::sp_rev(bvec_t **arg, bvec_t
**res, int *iw, bvec_t *w, int mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::construct(const Dict &opts)
"

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::FunctionInternal::size_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::addDependency(CodeGenerator
&g) const  "

[INTERNAL]  Add a dependent function.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::FunctionInternal::matchingArg(const
std::vector< M > &arg, bool hcat=false) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::Blocksqp::reduceSOCStepsize(BlocksqpMemory
*m, double *alphaSOC) const  "

[INTERNAL] ";

%feature("docstring")  casadi::Blocksqp::sizeHessianCOL(BlocksqpMemory *m,
const double *gamma, const double *delta, int b) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::FunctionInternal::gradient(int iind, int
oind) "

[INTERNAL]  Return gradient function.

";

%feature("docstring")  casadi::Blocksqp::calcBFGS(BlocksqpMemory *m, const
double *gamma, const double *delta, int b) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::Blocksqp::pairInFilter(BlocksqpMemory *m,
double cNorm, double obj) const  "

[INTERNAL] ";

%feature("docstring")  casadi::Blocksqp::reset_sqp(BlocksqpMemory *m) const
"

[INTERNAL]  Reset variables that any SQP code needs.

";

%feature("docstring")  casadi::Blocksqp::resetHessian(BlocksqpMemory *m)
const  "

[INTERNAL] ";

%feature("docstring")  casadi::Blocksqp::resetHessian(BlocksqpMemory *m, int
b) const  "

[INTERNAL] ";

%feature("docstring")  casadi::OracleFunction::has_function(const
std::string &fname) const override "

[INTERNAL] ";

%feature("docstring")  casadi::Blocksqp::fullstep(BlocksqpMemory *m) const
"

[INTERNAL]  No globalization strategy.

";

%feature("docstring")  casadi::FunctionInternal::getTangent(const
std::string &name, int iind, int oind, const Dict &opts) "

[INTERNAL]  Return tangent function.

";

%feature("docstring")  casadi::FunctionInternal::jacobian(int iind, int
oind, bool compact, bool symmetric) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::tang_sx(int iind=0, int
oind=0) "

[INTERNAL]  Tangent expression.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::name_out(int ind) const  "

[INTERNAL]  Get output scheme name by index.

";

%feature("docstring")  casadi::FunctionInternal::jac_mx(int iind=0, int
oind=0, const Dict &opts=Dict()) "

[INTERNAL]  Jacobian expression.

";

%feature("docstring")  casadi::FunctionInternal::checkArg(const std::vector<
M > &arg, bool hcat=false) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::sp_fwd(const bvec_t **arg,
bvec_t **res, int *iw, bvec_t *w, int mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::Nlpsol::get_n_in() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::Nlpsol::get_sparsity_in(int i) override "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::Blocksqp::initIterate(BlocksqpMemory *m)
const  "

[INTERNAL]  Set initial filter, objective function, tolerances etc.

";

%feature("docstring") casadi::Blocksqp::_call "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring") casadi::Blocksqp::_call "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::fullJacobian() "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::Blocksqp::calcHessianUpdate(BlocksqpMemory
*m, int updateType, int hessScaling) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< int > &order_in, const std::vector< int >
&order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::Blocksqp::initializeFilter(BlocksqpMemory *m)
const  "

[INTERNAL] ";

%feature("docstring")  casadi::Nlpsol::getReducedHessian() "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::getJacobian(const
std::string &name, int iind, int oind, bool compact, bool symmetric, const
Dict &opts) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::generateMeta(CodeGenerator
&g, const std::string &fname) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::OracleFunction::get_function() const override
"

[INTERNAL] ";

%feature("docstring")  casadi::OracleFunction::get_function(const
std::string &name) const override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::set_jac_sparsity(const
Sparsity &sp, int iind, int oind, bool compact) "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(int iind, int
oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Blocksqp::Blocksqp(const std::string &name,
const Function &nlp) "

[INTERNAL] ";

%feature("docstring")  casadi::Blocksqp::computeNextHessian(BlocksqpMemory
*m, int idx, int maxQP) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::getAlgorithmSize() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::simple(const double *arg,
double *res) const  "

[INTERNAL]  Evaluate numerically, simplied syntax.

";

%feature("docstring")  casadi::OracleFunction::expand() "

[INTERNAL] ";

%feature("docstring")  casadi::Blocksqp::acceptStep(BlocksqpMemory *m, const
double *deltaXi, const double *lambdaQP, double alpha, int nSOCS) const  "

[INTERNAL]  Set new primal dual iterate.

";

%feature("docstring")  casadi::Blocksqp::acceptStep(BlocksqpMemory *m,
double alpha) const  "

[INTERNAL] ";

%feature("docstring") casadi::Blocksqp "

'blocksqp' plugin for Nlpsol

This is a modified version of blockSQP by Janka et al.

Dennis Janka, Joel Andersson

>List of available options

+----------------------------+-----------+---------------------------------+
|             Id             |   Type    |           Description           |
+============================+===========+=================================+
| block_hess                 | OT_INT    | Blockwise Hessian               |
|                            |           | approximation?                  |
+----------------------------+-----------+---------------------------------+
| col_eps                    | OT_DOUBLE | Epsilon for COL scaling         |
|                            |           | strategy                        |
+----------------------------+-----------+---------------------------------+
| col_tau1                   | OT_DOUBLE | tau1 for COL scaling strategy   |
+----------------------------+-----------+---------------------------------+
| col_tau2                   | OT_DOUBLE | tau2 for COL scaling strategy   |
+----------------------------+-----------+---------------------------------+
| conv_strategy              | OT_INT    | Convexification strategy        |
+----------------------------+-----------+---------------------------------+
| delta                      | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| delta_h0                   | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| eps                        | OT_DOUBLE | Values smaller than this are    |
|                            |           | regarded as numerically zero    |
+----------------------------+-----------+---------------------------------+
| eta                        | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| fallback_scaling           | OT_INT    | If indefinite update is used,   |
|                            |           | the type of fallback strategy   |
+----------------------------+-----------+---------------------------------+
| fallback_update            | OT_INT    | If indefinite update is used,   |
|                            |           | the type of fallback strategy   |
+----------------------------+-----------+---------------------------------+
| gamma_f                    | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| gamma_theta                | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| globalization              | OT_BOOL   | Enable globalization            |
+----------------------------+-----------+---------------------------------+
| hess_damp                  | OT_INT    | Activate Powell damping for     |
|                            |           | BFGS                            |
+----------------------------+-----------+---------------------------------+
| hess_damp_fac              | OT_DOUBLE | Damping factor for BFGS Powell  |
|                            |           | modification                    |
+----------------------------+-----------+---------------------------------+
| hess_lim_mem               | OT_INT    | Full or limited memory          |
+----------------------------+-----------+---------------------------------+
| hess_memsize               | OT_INT    | Memory size for L-BFGS updates  |
+----------------------------+-----------+---------------------------------+
| hess_scaling               | OT_INT    | Scaling strategy for Hessian    |
|                            |           | approximation                   |
+----------------------------+-----------+---------------------------------+
| hess_update                | OT_INT    | Type of Hessian approximation   |
+----------------------------+-----------+---------------------------------+
| ini_hess_diag              | OT_DOUBLE | Initial Hessian guess: diagonal |
|                            |           | matrix diag(iniHessDiag)        |
+----------------------------+-----------+---------------------------------+
| kappa_f                    | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| kappa_minus                | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| kappa_plus                 | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| kappa_plus_max             | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| kappa_soc                  | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| linsol                     | OT_STRING | The linear solver to be used by |
|                            |           | the QP method                   |
+----------------------------+-----------+---------------------------------+
| max_consec_reduced_steps   | OT_INT    | Maximum number of consecutive   |
|                            |           | reduced steps                   |
+----------------------------+-----------+---------------------------------+
| max_consec_skipped_updates | OT_INT    | Maximum number of consecutive   |
|                            |           | skipped updates                 |
+----------------------------+-----------+---------------------------------+
| max_conv_qp                | OT_INT    | How many additional QPs may be  |
|                            |           | solved for convexification per  |
|                            |           | iteration?                      |
+----------------------------+-----------+---------------------------------+
| max_it_qp                  | OT_INT    | Maximum number of QP iterations |
|                            |           | per SQP iteration               |
+----------------------------+-----------+---------------------------------+
| max_iter                   | OT_INT    | Maximum number of SQP           |
|                            |           | iterations                      |
+----------------------------+-----------+---------------------------------+
| max_line_search            | OT_INT    | Maximum number of steps in line |
|                            |           | search                          |
+----------------------------+-----------+---------------------------------+
| max_soc_iter               | OT_INT    | Maximum number of SOC line      |
|                            |           | search iterations               |
+----------------------------+-----------+---------------------------------+
| max_time_qp                | OT_DOUBLE | Maximum number of time in       |
|                            |           | seconds per QP solve per SQP    |
|                            |           | iteration                       |
+----------------------------+-----------+---------------------------------+
| nlinfeastol                | OT_DOUBLE | Nonlinear feasibility tolerance |
+----------------------------+-----------+---------------------------------+
| obj_lo                     | OT_DOUBLE | Lower bound on objective        |
|                            |           | function [-inf]                 |
+----------------------------+-----------+---------------------------------+
| obj_up                     | OT_DOUBLE | Upper bound on objective        |
|                            |           | function [inf]                  |
+----------------------------+-----------+---------------------------------+
| opttol                     | OT_DOUBLE | Optimality tolerance            |
+----------------------------+-----------+---------------------------------+
| print_header               | OT_BOOL   | Print solver header at startup  |
+----------------------------+-----------+---------------------------------+
| print_iteration            | OT_BOOL   | Print SQP iterations            |
+----------------------------+-----------+---------------------------------+
| qpsol                      | OT_STRING | The QP solver to be used by the |
|                            |           | SQP method                      |
+----------------------------+-----------+---------------------------------+
| qpsol_options              | OT_DICT   | Options to be passed to the QP  |
|                            |           | solver                          |
+----------------------------+-----------+---------------------------------+
| restore_feas               | OT_BOOL   | Use feasibility restoration     |
|                            |           | phase                           |
+----------------------------+-----------+---------------------------------+
| s_f                        | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| s_theta                    | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| schur                      | OT_BOOL   | Use qpOASES Schur compliment    |
|                            |           | approach                        |
+----------------------------+-----------+---------------------------------+
| skip_first_globalization   | OT_BOOL   | No globalization strategy in    |
|                            |           | first iteration                 |
+----------------------------+-----------+---------------------------------+
| theta_max                  | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| theta_min                  | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| warmstart                  | OT_BOOL   | Use warmstarting                |
+----------------------------+-----------+---------------------------------+
| which_second_derv          | OT_INT    | For which block should second   |
|                            |           | derivatives be provided by the  |
|                            |           | user                            |
+----------------------------+-----------+---------------------------------+

>List of available options

+-------------------+---------------+-------------------+------------------+
|        Id         |     Type      |    Description    |     Used in      |
+===================+===============+===================+==================+
| block_hess        | OT_INT        | Blockwise Hessian | casadi::Blocksqp |
|                   |               | approximation?    |                  |
+-------------------+---------------+-------------------+------------------+
| col_eps           | OT_DOUBLE     | Epsilon for COL   | casadi::Blocksqp |
|                   |               | scaling strategy  |                  |
+-------------------+---------------+-------------------+------------------+
| col_tau1          | OT_DOUBLE     | tau1 for COL      | casadi::Blocksqp |
|                   |               | scaling strategy  |                  |
+-------------------+---------------+-------------------+------------------+
| col_tau2          | OT_DOUBLE     | tau2 for COL      | casadi::Blocksqp |
|                   |               | scaling strategy  |                  |
+-------------------+---------------+-------------------+------------------+
| conv_strategy     | OT_INT        | Convexification   | casadi::Blocksqp |
|                   |               | strategy          |                  |
+-------------------+---------------+-------------------+------------------+
| delta             | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| delta_h0          | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| discrete          | OT_BOOLVECTOR | Indicates which   | casadi::Nlpsol   |
|                   |               | of the variables  |                  |
|                   |               | are discrete,     |                  |
|                   |               | i.e. integer-     |                  |
|                   |               | valued            |                  |
+-------------------+---------------+-------------------+------------------+
| eps               | OT_DOUBLE     | Values smaller    | casadi::Blocksqp |
|                   |               | than this are     |                  |
|                   |               | regarded as       |                  |
|                   |               | numerically zero  |                  |
+-------------------+---------------+-------------------+------------------+
| eta               | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| eval_errors_fatal | OT_BOOL       | When errors occur | casadi::Nlpsol   |
|                   |               | during evaluation |                  |
|                   |               | of f,g,...,stop   |                  |
|                   |               | the iterations    |                  |
+-------------------+---------------+-------------------+------------------+
| expand            | OT_BOOL       | Replace MX with   | casadi::Nlpsol   |
|                   |               | SX expressions in |                  |
|                   |               | problem           |                  |
|                   |               | formulation       |                  |
|                   |               | [false]           |                  |
+-------------------+---------------+-------------------+------------------+
| fallback_scaling  | OT_INT        | If indefinite     | casadi::Blocksqp |
|                   |               | update is used,   |                  |
|                   |               | the type of       |                  |
|                   |               | fallback strategy |                  |
+-------------------+---------------+-------------------+------------------+
| fallback_update   | OT_INT        | If indefinite     | casadi::Blocksqp |
|                   |               | update is used,   |                  |
|                   |               | the type of       |                  |
|                   |               | fallback strategy |                  |
+-------------------+---------------+-------------------+------------------+
| gamma_f           | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| gamma_theta       | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| globalization     | OT_BOOL       | Enable            | casadi::Blocksqp |
|                   |               | globalization     |                  |
+-------------------+---------------+-------------------+------------------+
| hess_damp         | OT_INT        | Activate Powell   | casadi::Blocksqp |
|                   |               | damping for BFGS  |                  |
+-------------------+---------------+-------------------+------------------+
| hess_damp_fac     | OT_DOUBLE     | Damping factor    | casadi::Blocksqp |
|                   |               | for BFGS Powell   |                  |
|                   |               | modification      |                  |
+-------------------+---------------+-------------------+------------------+
| hess_lim_mem      | OT_INT        | Full or limited   | casadi::Blocksqp |
|                   |               | memory            |                  |
+-------------------+---------------+-------------------+------------------+
| hess_memsize      | OT_INT        | Memory size for   | casadi::Blocksqp |
|                   |               | L-BFGS updates    |                  |
+-------------------+---------------+-------------------+------------------+
| hess_scaling      | OT_INT        | Scaling strategy  | casadi::Blocksqp |
|                   |               | for Hessian       |                  |
|                   |               | approximation     |                  |
+-------------------+---------------+-------------------+------------------+
| hess_update       | OT_INT        | Type of Hessian   | casadi::Blocksqp |
|                   |               | approximation     |                  |
+-------------------+---------------+-------------------+------------------+
| ignore_check_vec  | OT_BOOL       | If set to true,   | casadi::Nlpsol   |
|                   |               | the input shape   |                  |
|                   |               | of F will not be  |                  |
|                   |               | checked.          |                  |
+-------------------+---------------+-------------------+------------------+
| ini_hess_diag     | OT_DOUBLE     | Initial Hessian   | casadi::Blocksqp |
|                   |               | guess: diagonal   |                  |
|                   |               | matrix            |                  |
|                   |               | diag(iniHessDiag) |                  |
+-------------------+---------------+-------------------+------------------+
| iteration_callbac | OT_FUNCTION   | A function that   | casadi::Nlpsol   |
| k                 |               | will be called at |                  |
|                   |               | each iteration    |                  |
|                   |               | with the solver   |                  |
|                   |               | as input. Check   |                  |
|                   |               | documentation of  |                  |
|                   |               | Callback .        |                  |
+-------------------+---------------+-------------------+------------------+
| iteration_callbac | OT_BOOL       | If set to true,   | casadi::Nlpsol   |
| k_ignore_errors   |               | errors thrown by  |                  |
|                   |               | iteration_callbac |                  |
|                   |               | k will be         |                  |
|                   |               | ignored.          |                  |
+-------------------+---------------+-------------------+------------------+
| iteration_callbac | OT_INT        | Only call the     | casadi::Nlpsol   |
| k_step            |               | callback function |                  |
|                   |               | every few         |                  |
|                   |               | iterations.       |                  |
+-------------------+---------------+-------------------+------------------+
| kappa_f           | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| kappa_minus       | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| kappa_plus        | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| kappa_plus_max    | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| kappa_soc         | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| linsol            | OT_STRING     | The linear solver | casadi::Blocksqp |
|                   |               | to be used by the |                  |
|                   |               | QP method         |                  |
+-------------------+---------------+-------------------+------------------+
| max_consec_reduce | OT_INT        | Maximum number of | casadi::Blocksqp |
| d_steps           |               | consecutive       |                  |
|                   |               | reduced steps     |                  |
+-------------------+---------------+-------------------+------------------+
| max_consec_skippe | OT_INT        | Maximum number of | casadi::Blocksqp |
| d_updates         |               | consecutive       |                  |
|                   |               | skipped updates   |                  |
+-------------------+---------------+-------------------+------------------+
| max_conv_qp       | OT_INT        | How many          | casadi::Blocksqp |
|                   |               | additional QPs    |                  |
|                   |               | may be solved for |                  |
|                   |               | convexification   |                  |
|                   |               | per iteration?    |                  |
+-------------------+---------------+-------------------+------------------+
| max_it_qp         | OT_INT        | Maximum number of | casadi::Blocksqp |
|                   |               | QP iterations per |                  |
|                   |               | SQP iteration     |                  |
+-------------------+---------------+-------------------+------------------+
| max_iter          | OT_INT        | Maximum number of | casadi::Blocksqp |
|                   |               | SQP iterations    |                  |
+-------------------+---------------+-------------------+------------------+
| max_line_search   | OT_INT        | Maximum number of | casadi::Blocksqp |
|                   |               | steps in line     |                  |
|                   |               | search            |                  |
+-------------------+---------------+-------------------+------------------+
| max_soc_iter      | OT_INT        | Maximum number of | casadi::Blocksqp |
|                   |               | SOC line search   |                  |
|                   |               | iterations        |                  |
+-------------------+---------------+-------------------+------------------+
| max_time_qp       | OT_DOUBLE     | Maximum number of | casadi::Blocksqp |
|                   |               | time in seconds   |                  |
|                   |               | per QP solve per  |                  |
|                   |               | SQP iteration     |                  |
+-------------------+---------------+-------------------+------------------+
| nlinfeastol       | OT_DOUBLE     | Nonlinear         | casadi::Blocksqp |
|                   |               | feasibility       |                  |
|                   |               | tolerance         |                  |
+-------------------+---------------+-------------------+------------------+
| obj_lo            | OT_DOUBLE     | Lower bound on    | casadi::Blocksqp |
|                   |               | objective         |                  |
|                   |               | function [-inf]   |                  |
+-------------------+---------------+-------------------+------------------+
| obj_up            | OT_DOUBLE     | Upper bound on    | casadi::Blocksqp |
|                   |               | objective         |                  |
|                   |               | function [inf]    |                  |
+-------------------+---------------+-------------------+------------------+
| opttol            | OT_DOUBLE     | Optimality        | casadi::Blocksqp |
|                   |               | tolerance         |                  |
+-------------------+---------------+-------------------+------------------+
| print_header      | OT_BOOL       | Print solver      | casadi::Blocksqp |
|                   |               | header at startup |                  |
+-------------------+---------------+-------------------+------------------+
| print_iteration   | OT_BOOL       | Print SQP         | casadi::Blocksqp |
|                   |               | iterations        |                  |
+-------------------+---------------+-------------------+------------------+
| qpsol             | OT_STRING     | The QP solver to  | casadi::Blocksqp |
|                   |               | be used by the    |                  |
|                   |               | SQP method        |                  |
+-------------------+---------------+-------------------+------------------+
| qpsol_options     | OT_DICT       | Options to be     | casadi::Blocksqp |
|                   |               | passed to the QP  |                  |
|                   |               | solver            |                  |
+-------------------+---------------+-------------------+------------------+
| restore_feas      | OT_BOOL       | Use feasibility   | casadi::Blocksqp |
|                   |               | restoration phase |                  |
+-------------------+---------------+-------------------+------------------+
| s_f               | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| s_theta           | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| schur             | OT_BOOL       | Use qpOASES Schur | casadi::Blocksqp |
|                   |               | compliment        |                  |
|                   |               | approach          |                  |
+-------------------+---------------+-------------------+------------------+
| skip_first_global | OT_BOOL       | No globalization  | casadi::Blocksqp |
| ization           |               | strategy in first |                  |
|                   |               | iteration         |                  |
+-------------------+---------------+-------------------+------------------+
| theta_max         | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| theta_min         | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| verbose_init      | OT_BOOL       | Print out timing  | casadi::Nlpsol   |
|                   |               | information about |                  |
|                   |               | the different     |                  |
|                   |               | stages of         |                  |
|                   |               | initialization    |                  |
+-------------------+---------------+-------------------+------------------+
| warmstart         | OT_BOOL       | Use warmstarting  | casadi::Blocksqp |
+-------------------+---------------+-------------------+------------------+
| warn_initial_boun | OT_BOOL       | Warn if the       | casadi::Nlpsol   |
| ds                |               | initial guess     |                  |
|                   |               | does not satisfy  |                  |
|                   |               | LBX and UBX       |                  |
+-------------------+---------------+-------------------+------------------+
| which_second_derv | OT_INT        | For which block   | casadi::Blocksqp |
|                   |               | should second     |                  |
|                   |               | derivatives be    |                  |
|                   |               | provided by the   |                  |
|                   |               | user              |                  |
+-------------------+---------------+-------------------+------------------+

Diagrams
--------



C++ includes: blocksqp.hpp ";

%feature("docstring")  casadi::FunctionInternal::repr(std::ostream &stream)
const override "

[INTERNAL]  Print.

";

%feature("docstring")  casadi::FunctionInternal::addShorthand(CodeGenerator
&g, const std::string &name) const  "

[INTERNAL]  Generate shorthand macro.

";

%feature("docstring")
casadi::Blocksqp::secondOrderCorrection(BlocksqpMemory *m, double cNorm,
double cNormTrial, double dfTdeltaXi, bool swCond, int it) const  "

[INTERNAL] ";

%feature("docstring")  casadi::Blocksqp::solve(void *mem) const override "

[INTERNAL] ";

%feature("docstring")
casadi::FunctionInternal::generateDeclarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::Blocksqp::kktErrorReduction(BlocksqpMemory
*m) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::getAtomicOperation(int k)
const  "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::tangent(int iind, int oind)
"

[INTERNAL]  Return tangent function.

";

%feature("docstring")  casadi::FunctionInternal::verbose() const  "

[INTERNAL]  Verbose mode?

";

%feature("docstring")  casadi::FunctionInternal::name() const  "

[INTERNAL]  Name of the function.

";

%feature("docstring")  casadi::Nlpsol::setOptionsFromFile(const std::string
&file) "

[INTERNAL]  Read options from parameter xml.

";

%feature("docstring") casadi::Blocksqp::_eval "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring") casadi::Blocksqp::_eval "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring") casadi::Blocksqp::_eval "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn, const std::string &fname, bool jit=false) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::FunctionInternal::replaceFwdSeed(const
std::vector< std::vector< M > > &fseed) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")
casadi::Blocksqp::feasibilityRestorationPhase(BlocksqpMemory *m) const  "

[INTERNAL] ";

%feature("docstring")  casadi::Blocksqp::updateStepBounds(BlocksqpMemory *m,
bool soc) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInputReal(int k)
const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::Blocksqp::filterLineSearch(BlocksqpMemory *m)
const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::size2_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::symbolicOutput(const
std::vector< MX > &arg) "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::Blocksqp::calcOptTol(BlocksqpMemory *m) const
"

[INTERNAL]  Update optimization tolerance (similar to SNOPT) in current
iterate.

";

%feature("docstring")  casadi::OracleFunction::oracle() const override "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::Blocksqp::calcInitialHessian(BlocksqpMemory
*m) const  "

[INTERNAL] ";

%feature("docstring")  casadi::Blocksqp::calcInitialHessian(BlocksqpMemory
*m, int b) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::tang_mx(int iind=0, int
oind=0) "

[INTERNAL]  Tangent expression.

";

%feature("docstring")  casadi::FunctionInternal::hasFullJacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::Blocksqp::augmentFilter(BlocksqpMemory *m,
double cNorm, double obj) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::Nlpsol::integer_support() const  "

[INTERNAL]  Can discrete variables be treated.

";

%feature("docstring")  casadi::Nlpsol::get_name_in(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")
casadi::Blocksqp::calcHessianUpdateLimitedMemory(BlocksqpMemory *m, int
updateType, int hessScaling) const  "

[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::~Blocksqp "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(int nadj,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FunctionInternal::n_in() const  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::getWorkSize() const  "

[INTERNAL]  Get the length of the work vector.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::Nlpsol::checkInputs(void *mem) const  "

[INTERNAL]  Check if the inputs correspond to a well-posed problem.

";

%feature("docstring")  casadi::FunctionInternal::checkInputs() const  "

[INTERNAL]  Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::hessian(int iind, int oind)
"

[INTERNAL]  Return Hessian function.

";

%feature("docstring")  casadi::FunctionInternal::getHessian(int iind, int
oind) "

[INTERNAL]  Return Hessian function.

";

%feature("docstring")  casadi::Blocksqp::evaluate(BlocksqpMemory *m, double
*f, double *g, double *grad_f, double *jac_g) const  "

[INTERNAL]  Evaluate objective and constraints, including derivatives.

";

%feature("docstring")  casadi::Blocksqp::evaluate(BlocksqpMemory *m, const
double *xk, double *f, double *g) const  "

[INTERNAL]  Evaluate objective and constraints, no derivatives.

";

%feature("docstring") casadi::Blocksqp::_get_stats "

[INTERNAL]  Get all statistics

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::Blocksqp::free_memory(void *mem) const
override "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::eval_name() const  "

[INTERNAL]  Get name of the evaluation function.

";

%feature("docstring")  casadi::FunctionInternal::symbolicFwdSeed(int nfwd,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::Blocksqp::set_work(void *mem, const double
**&arg, double **&res, int *&iw, double *&w) const override "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::Nlpsol::get_n_out() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::setJacobian(const Function
&jac, int iind, int oind, bool compact) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::jac_sx(int iind=0, int
oind=0, const Dict &opts=Dict()) "

[INTERNAL]  Jacobian expression.

";

%feature("docstring")  casadi::Blocksqp::calcSR1(BlocksqpMemory *m, const
double *gamma, const double *delta, int b) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::matchingRes(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

";

%feature("docstring")  casadi::FunctionInternal::print_free(std::ostream
&stream) const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOutput(int k)
const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::hess_sx(int iind=0, int
oind=0) "

[INTERNAL]  Hessian expression.

";

%feature("docstring")  casadi::Blocksqp::initStats(BlocksqpMemory *m) const
"

[INTERNAL] ";

%feature("docstring")  casadi::Blocksqp::printInfo(BlocksqpMemory *m) const
"

[INTERNAL]  Print information about the SQP method.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::replaceAdjSeed(const
std::vector< std::vector< M > > &aseed) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::get_n_reverse() const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::Blocksqp::run(BlocksqpMemory *m, int maxIt,
int warmStart=0) const  "

[INTERNAL]  Main Loop of SQP method.

";

%feature("docstring")  casadi::Blocksqp::init_memory(void *mem) const
override "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::grad_mx(int iind=0, int
oind=0) "

[INTERNAL]  Gradient expression.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::Blocksqp::updateDeltaGamma(BlocksqpMemory *m)
const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::getPartition(int iind, int
oind, Sparsity &D1, Sparsity &D2, bool compact, bool symmetric, bool
allow_forward, bool allow_reverse) "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::OracleFunction::jit_dependencies(const
std::string &fname) override "

[INTERNAL]  JIT for dependencies.

";

%feature("docstring")  casadi::OracleFunction::print_fstats(const
OracleMemory *m) const  "

[INTERNAL]  Print statistics.

";

%feature("docstring")  casadi::FunctionInternal::size_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInput(int k) const
"

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(int nfwd) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::OracleFunction::generate_dependencies(const
std::string &fname, const Dict &opts) const override "

[INTERNAL]  Export / Generate C code for the generated functions.

";

%feature("docstring")  casadi::FunctionInternal::sx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Blocksqp::_set_work "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(int iind,
int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::print(std::ostream &stream)
const override "

[INTERNAL]  Print.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(int ind) const
"

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(const
std::string &iname) const  "

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::replaceRes(const
std::vector< M > &res) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::OracleFunction::set_temp(void *mem, const
double **arg, double **res, int *iw, double *w) const override "

[INTERNAL]  Set the work vectors.

";

%feature("docstring")  casadi::FunctionInternal::forward(int nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::getGradient(const
std::string &name, int iind, int oind, const Dict &opts) "

[INTERNAL]  Return gradient function.

";

%feature("docstring")  casadi::FunctionInternal::hasDerivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::Blocksqp::solveQP(BlocksqpMemory *m, double
*deltaXi, double *lambdaQP, bool matricesChanged=true) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::simplifiedCall() const  "

[INTERNAL]  Use simplified signature.

";

%feature("docstring")  casadi::OracleFunction::get_stats(void *mem) const
override "

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::get_n_forward() const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::Blocksqp::reduceStepsize(BlocksqpMemory *m,
double *alpha) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::sx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::getFullJacobian(const
std::string &name, const std::vector< std::string > &i_names, const
std::vector< std::string > &o_names, const Dict &opts) "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::Blocksqp::lInfConstraintNorm(BlocksqpMemory
*m, const double *xk, const double *g) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::Blocksqp::calcLagrangeGradient(BlocksqpMemory
*m, const double *lam_x, const double *lam_g, const double *grad_f, double
*jacNz, double *grad_lag, int flag) const  "

[INTERNAL]  Compute gradient of Lagrangian function (sparse version)

";

%feature("docstring")  casadi::Blocksqp::calcLagrangeGradient(BlocksqpMemory
*m, double *grad_lag, int flag) const  "

[INTERNAL]  Overloaded function for convenience, uses current variables of
SQPiterate vars.

";

%feature("docstring")  casadi::FunctionInternal::n_mem() const  "

[INTERNAL]  Maximum number of memory objects.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, int *iw, SXElem *w, int mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::FunctionInternal::clear_memory() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::Blocksqp::sizeInitialHessian(BlocksqpMemory
*m, const double *gamma, const double *delta, int b, int option) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::size1_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(int ind) const
"

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(const
std::string &iname) const  "

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::FunctionInternal::get_reverse(const
std::string &name, int nadj, const std::vector< std::string > &i_names,
const std::vector< std::string > &o_names, const Dict &opts) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, int order, bool
tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")
casadi::Blocksqp::feasibilityRestorationHeuristic(BlocksqpMemory *m) const
"

[INTERNAL] ";

%feature("docstring")  casadi::Nlpsol::eval(void *mem, const double **arg,
double **res, int *iw, double *w) const override "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::Nlpsol::get_sparsity_out(int i) override "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::OracleFunction::create_function(const
std::string &fname, const std::vector< std::string > &s_in, const
std::vector< std::string > &s_out, const Function::AuxOut
&aux=Function::AuxOut()) "

[INTERNAL]  Create an oracle function

";

%feature("docstring")  casadi::FunctionInternal::name_in(int ind) const  "

[INTERNAL]  Get input scheme name by index.

";

%feature("docstring")  casadi::OracleFunction::calc_function(OracleMemory
*m, const std::string &fcn, const double *const *arg=0) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::n_out() const  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::OracleFunction::monitored(const std::string
&name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::Nlpsol::default_in(int ind) const override "

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::replaceArg(const
std::vector< M > &arg, bool hcat=false) const  "

[INTERNAL]  Replace 0-by-0 inputs.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::Blocksqp::convertHessian(BlocksqpMemory *m)
const  "

[INTERNAL]  Convert *hess to column compressed sparse format.

";

%feature("docstring")  casadi::Blocksqp::updateStats(BlocksqpMemory *m)
const  "

[INTERNAL] ";


// File: classcasadi_1_1BonMinMessageHandler.xml
%feature("docstring") casadi::BonMinMessageHandler "

[INTERNAL]

>List of available options

+-------------------+---------------+-------------------+------------------+
|        Id         |     Type      |    Description    |     Used in      |
+===================+===============+===================+==================+
| bonmin            | OT_DICT       | Options to be     | casadi::BonMinMe |
|                   |               | passed to BONMIN  | ssageHandler     |
+-------------------+---------------+-------------------+------------------+
| con_integer_md    | OT_DICT       | Integer metadata  | casadi::BonMinMe |
|                   |               | (a dictionary     | ssageHandler     |
|                   |               | with lists of     |                  |
|                   |               | integers) about   |                  |
|                   |               | constraints to be |                  |
|                   |               | passed to BONMIN  |                  |
+-------------------+---------------+-------------------+------------------+
| con_numeric_md    | OT_DICT       | Numeric metadata  | casadi::BonMinMe |
|                   |               | (a dictionary     | ssageHandler     |
|                   |               | with lists of     |                  |
|                   |               | reals) about      |                  |
|                   |               | constraints to be |                  |
|                   |               | passed to BONMIN  |                  |
+-------------------+---------------+-------------------+------------------+
| con_string_md     | OT_DICT       | String metadata   | casadi::BonMinMe |
|                   |               | (a dictionary     | ssageHandler     |
|                   |               | with lists of     |                  |
|                   |               | strings) about    |                  |
|                   |               | constraints to be |                  |
|                   |               | passed to BONMIN  |                  |
+-------------------+---------------+-------------------+------------------+
| discrete          | OT_BOOLVECTOR | Indicates which   | casadi::Nlpsol   |
|                   |               | of the variables  |                  |
|                   |               | are discrete,     |                  |
|                   |               | i.e. integer-     |                  |
|                   |               | valued            |                  |
+-------------------+---------------+-------------------+------------------+
| eval_errors_fatal | OT_BOOL       | When errors occur | casadi::Nlpsol   |
|                   |               | during evaluation |                  |
|                   |               | of f,g,...,stop   |                  |
|                   |               | the iterations    |                  |
+-------------------+---------------+-------------------+------------------+
| expand            | OT_BOOL       | Replace MX with   | casadi::Nlpsol   |
|                   |               | SX expressions in |                  |
|                   |               | problem           |                  |
|                   |               | formulation       |                  |
|                   |               | [false]           |                  |
+-------------------+---------------+-------------------+------------------+
| grad_f            | OT_FUNCTION   | Function for      | casadi::BonMinMe |
|                   |               | calculating the   | ssageHandler     |
|                   |               | gradient of the   |                  |
|                   |               | objective         |                  |
|                   |               | (column,          |                  |
|                   |               | autogenerated by  |                  |
|                   |               | default)          |                  |
+-------------------+---------------+-------------------+------------------+
| grad_f_options    | OT_DICT       | Options for the   | casadi::BonMinMe |
|                   |               | autogenerated     | ssageHandler     |
|                   |               | gradient of the   |                  |
|                   |               | objective.        |                  |
+-------------------+---------------+-------------------+------------------+
| hess_lag          | OT_FUNCTION   | Function for      | casadi::BonMinMe |
|                   |               | calculating the   | ssageHandler     |
|                   |               | Hessian of the    |                  |
|                   |               | Lagrangian        |                  |
|                   |               | (autogenerated by |                  |
|                   |               | default)          |                  |
+-------------------+---------------+-------------------+------------------+
| hess_lag_options  | OT_DICT       | Options for the   | casadi::BonMinMe |
|                   |               | autogenerated     | ssageHandler     |
|                   |               | Hessian of the    |                  |
|                   |               | Lagrangian.       |                  |
+-------------------+---------------+-------------------+------------------+
| ignore_check_vec  | OT_BOOL       | If set to true,   | casadi::Nlpsol   |
|                   |               | the input shape   |                  |
|                   |               | of F will not be  |                  |
|                   |               | checked.          |                  |
+-------------------+---------------+-------------------+------------------+
| iteration_callbac | OT_FUNCTION   | A function that   | casadi::Nlpsol   |
| k                 |               | will be called at |                  |
|                   |               | each iteration    |                  |
|                   |               | with the solver   |                  |
|                   |               | as input. Check   |                  |
|                   |               | documentation of  |                  |
|                   |               | Callback .        |                  |
+-------------------+---------------+-------------------+------------------+
| iteration_callbac | OT_BOOL       | If set to true,   | casadi::Nlpsol   |
| k_ignore_errors   |               | errors thrown by  |                  |
|                   |               | iteration_callbac |                  |
|                   |               | k will be         |                  |
|                   |               | ignored.          |                  |
+-------------------+---------------+-------------------+------------------+
| iteration_callbac | OT_INT        | Only call the     | casadi::Nlpsol   |
| k_step            |               | callback function |                  |
|                   |               | every few         |                  |
|                   |               | iterations.       |                  |
+-------------------+---------------+-------------------+------------------+
| jac_g             | OT_FUNCTION   | Function for      | casadi::BonMinMe |
|                   |               | calculating the   | ssageHandler     |
|                   |               | Jacobian of the   |                  |
|                   |               | constraints       |                  |
|                   |               | (autogenerated by |                  |
|                   |               | default)          |                  |
+-------------------+---------------+-------------------+------------------+
| jac_g_options     | OT_DICT       | Options for the   | casadi::BonMinMe |
|                   |               | autogenerated     | ssageHandler     |
|                   |               | Jacobian of the   |                  |
|                   |               | constraints.      |                  |
+-------------------+---------------+-------------------+------------------+
| pass_nonlinear_va | OT_BOOL       | Pass list of      | casadi::BonMinMe |
| riables           |               | variables         | ssageHandler     |
|                   |               | entering          |                  |
|                   |               | nonlinearly to    |                  |
|                   |               | BONMIN            |                  |
+-------------------+---------------+-------------------+------------------+
| var_integer_md    | OT_DICT       | Integer metadata  | casadi::BonMinMe |
|                   |               | (a dictionary     | ssageHandler     |
|                   |               | with lists of     |                  |
|                   |               | integers) about   |                  |
|                   |               | variables to be   |                  |
|                   |               | passed to BONMIN  |                  |
+-------------------+---------------+-------------------+------------------+
| var_numeric_md    | OT_DICT       | Numeric metadata  | casadi::BonMinMe |
|                   |               | (a dictionary     | ssageHandler     |
|                   |               | with lists of     |                  |
|                   |               | reals) about      |                  |
|                   |               | variables to be   |                  |
|                   |               | passed to BONMIN  |                  |
+-------------------+---------------+-------------------+------------------+
| var_string_md     | OT_DICT       | String metadata   | casadi::BonMinMe |
|                   |               | (a dictionary     | ssageHandler     |
|                   |               | with lists of     |                  |
|                   |               | strings) about    |                  |
|                   |               | variables to be   |                  |
|                   |               | passed to BONMIN  |                  |
+-------------------+---------------+-------------------+------------------+
| verbose_init      | OT_BOOL       | Print out timing  | casadi::Nlpsol   |
|                   |               | information about |                  |
|                   |               | the different     |                  |
|                   |               | stages of         |                  |
|                   |               | initialization    |                  |
+-------------------+---------------+-------------------+------------------+
| warn_initial_boun | OT_BOOL       | Warn if the       | casadi::Nlpsol   |
| ds                |               | initial guess     |                  |
|                   |               | does not satisfy  |                  |
|                   |               | LBX and UBX       |                  |
+-------------------+---------------+-------------------+------------------+

Diagrams
--------



C++ includes: b0_options.hpp ";


// File: classcasadi_1_1BonminUserClass.xml
%feature("docstring") casadi::BonminUserClass "

[INTERNAL] C++ includes: bonmin_nlp.hpp ";

%feature("docstring")
casadi::BonminUserClass::finalize_solution(TMINLP::SolverReturn status,
Index n, const Number *x, Number obj_value) override "

[INTERNAL]  This method is called when the algorithm is complete so the TNLP
can store/write the solution

";

%feature("docstring")  casadi::BonminUserClass::eval_g(Index n, const Number
*x, bool new_x, Index m, Number *g) override "

[INTERNAL]  Method to return the constraint residuals

";

%feature("docstring")  casadi::BonminUserClass::eval_f(Index n, const Number
*x, bool new_x, Number &obj_value) override "

[INTERNAL]  Method to return the objective value

";

%feature("docstring")
casadi::BonminUserClass::get_constraints_linearity(Index m,
Ipopt::TNLP::LinearityType *const_types) override "

[INTERNAL] ";

%feature("docstring") casadi::BonminUserClass::BonminUserClass(const
BonminInterface &bonminInterface, BonminMemory *mem) "

[INTERNAL] ";

%feature("docstring")  casadi::BonminUserClass::get_starting_point(Index n,
bool init_x, Number *x, bool init_z, Number *z_L, Number *z_U, Index m, bool
init_lambda, Number *lambda) override "

[INTERNAL]  Method to return the starting point for the algorithm

";

%feature("docstring")
casadi::BonminUserClass::get_number_of_nonlinear_variables() "

[INTERNAL]  Specify the number of variables that appear in the Hessian

";

%feature("docstring")  casadi::BonminUserClass::eval_jac_g(Index n, const
Number *x, bool new_x, Index m, Index nele_jac, Index *iRow, Index *jCol,
Number *values) override "

[INTERNAL]  Method to return: 1) The structure of the Jacobian (if
\"values\" is NULL) 2) The values of the Jacobian (if \"values\" is not
NULL)

";

%feature("docstring")
casadi::BonminUserClass::intermediate_callback(AlgorithmMode mode, Index
iter, Number obj_value, Number inf_pr, Number inf_du, Number mu, Number
d_norm, Number regularization_size, Number alpha_du, Number alpha_pr, Index
ls_trials, const IpoptData *ip_data, IpoptCalculatedQuantities *ip_cq) "

[INTERNAL]  This method is called at every iteration

";

%feature("docstring")  casadi::BonminUserClass::eval_h(Index n, const Number
*x, bool new_x, Number obj_factor, Index m, const Number *lambda, bool
new_lambda, Index nele_hess, Index *iRow, Index *jCol, Number *values)
override "

[INTERNAL]  Method to return: 1) The structure of the hessian of the
Lagrangian (if \"values\" is NULL) 2) The values of the hessian of the
Lagrangian (if \"values\" is not NULL)

";

%feature("docstring")  casadi::BonminUserClass::get_variables_types(Index n,
VariableType *var_types) override "

[INTERNAL] ";

%feature("docstring") casadi::BonminUserClass::~BonminUserClass "

[INTERNAL] ";

%feature("docstring")
casadi::BonminUserClass::get_list_of_nonlinear_variables(Index
num_nonlin_vars, Index *pos_nonlin_vars) "

[INTERNAL]  Specify which variables that appear in the Hessian

";

%feature("docstring")  casadi::BonminUserClass::get_bounds_info(Index n,
Number *x_l, Number *x_u, Index m, Number *g_l, Number *g_u) override "

[INTERNAL]  Method to return the bounds for my problem

";

%feature("docstring")  casadi::BonminUserClass::sosConstraints() const
override "

[INTERNAL] ";

%feature("docstring")  casadi::BonminUserClass::get_nlp_info(Index &n, Index
&m, Index &nnz_jac_g, Index &nnz_h_lag, TNLP::IndexStyleEnum &index_style)
override "

[INTERNAL]  Method to return some info about the nlp

";

%feature("docstring")  casadi::BonminUserClass::branchingInfo() const
override "

[INTERNAL] ";

%feature("docstring")  casadi::BonminUserClass::eval_grad_f(Index n, const
Number *x, bool new_x, Number *grad_f) override "

[INTERNAL]  Method to return the gradient of the objective

";

%feature("docstring")
casadi::BonminUserClass::get_variables_linearity(Index n,
Ipopt::TNLP::LinearityType *var_types) override "

[INTERNAL] ";


// File: classcasadi_1_1BSpline.xml
%feature("docstring")  casadi::BSpline::get_sparsity_in(int i) override "

Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring")  casadi::FunctionInternal::get_name_out(int i) "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::jac_sx(int iind=0, int
oind=0, const Dict &opts=Dict()) "

[INTERNAL]  Jacobian expression.

";

%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< int > &order_in, const std::vector< int >
&order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring") casadi::BSpline::_setup "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::generateMeta(CodeGenerator
&g, const std::string &fname) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring") casadi::BSpline::_get_stats "

[INTERNAL]  Get all statistics

";

%feature("docstring")  casadi::FunctionInternal::tangent(int iind, int oind)
"

[INTERNAL]  Return tangent function.

";

%feature("docstring")  casadi::FunctionInternal::symbolicFwdSeed(int nfwd,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::size1_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::BSpline::getFullJacobian(const std::string
&name, const std::vector< std::string > &i_names, const std::vector<
std::string > &o_names, const Dict &opts) override "

Return Jacobian of all input elements with respect to all output elements.

";

%feature("docstring")  casadi::FunctionInternal::hessian(int iind, int oind)
"

[INTERNAL]  Return Hessian function.

";

%feature("docstring")  casadi::FunctionInternal::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::FunctionInternal::sp_fwd(const bvec_t **arg,
bvec_t **res, int *iw, bvec_t *w, int mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring") casadi::BSpline::_set_temp "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::finalize(const Dict &opts)
"

[INTERNAL]  Finalize the object creation This function, which visits the
class hierarchy in reverse order is run after init() has been completed.

";

%feature("docstring")  casadi::BSpline::hasFullJacobian() const override "

Return Jacobian of all input elements with respect to all output elements.

";

%feature("docstring")  casadi::FunctionInternal::simplifiedCall() const  "

[INTERNAL]  Use simplified signature.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::free_memory(void *mem)
const  "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsityGen(int iind,
int oind, bool symmetric, int gr_i=1, int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOutput(int k)
const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::sx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::construct(const Dict &opts)
"

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::FunctionInternal::print_free(std::ostream
&stream) const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::BSpline::get_forward(const std::string &name,
int nfwd, const std::vector< std::string > &i_names, const std::vector<
std::string > &o_names, const Dict &opts) const override "

Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(int nadj) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::hasDerivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::log(const std::string &msg)
const  "

[INTERNAL]  Log the status of the solver.

";

%feature("docstring")  casadi::FunctionInternal::log(const std::string &fcn,
const std::string &msg) const  "

[INTERNAL]  Log the status of the solver, function given.

";

%feature("docstring")  casadi::FunctionInternal::getPartition(int iind, int
oind, Sparsity &D1, Sparsity &D2, bool compact, bool symmetric, bool
allow_forward, bool allow_reverse) "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(int nadj,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, int order, bool
tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::FunctionInternal::replaceFwdSeed(const
std::vector< std::vector< M > > &fseed) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::BSpline::get_n_reverse() const override "

Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::BSpline::has_codegen() const override "

Is codegen supported?

";

%feature("docstring")  casadi::FunctionInternal::checkInputs() const  "

[INTERNAL]  Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::FunctionInternal::getWorkSize() const  "

[INTERNAL]  Get the length of the work vector.

";

%feature("docstring") casadi::BSpline::_call "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring") casadi::BSpline::_call "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::BSplineCommon::get_options() const override "

Options.

";

%feature("docstring")  casadi::BSpline::get_sparsity_out(int i) override "

Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::BSpline::type_name() const override "

Get type name.

";

%feature("docstring")  casadi::FunctionInternal::size_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::grad_sx(int iind=0, int
oind=0) "

[INTERNAL]  Gradient expression.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, int *iw, SXElem *w, int mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::BSpline::_eval "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring") casadi::BSpline::_eval "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring") casadi::BSpline::_eval "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::repr(std::ostream &stream)
const override "

[INTERNAL]  Print.

";

%feature("docstring")  casadi::FunctionInternal::sp_rev(bvec_t **arg, bvec_t
**res, int *iw, bvec_t *w, int mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::getAlgorithmSize() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::init_memory(void *mem)
const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::simple(const double *arg,
double *res) const  "

[INTERNAL]  Evaluate numerically, simplied syntax.

";

%feature("docstring")  casadi::FunctionInternal::n_mem() const  "

[INTERNAL]  Maximum number of memory objects.

";

%feature("docstring")  casadi::FunctionInternal::addShorthand(CodeGenerator
&g, const std::string &name) const  "

[INTERNAL]  Generate shorthand macro.

";

%feature("docstring")  casadi::FunctionInternal::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::getTangent(const
std::string &name, int iind, int oind, const Dict &opts) "

[INTERNAL]  Return tangent function.

";

%feature("docstring")  casadi::FunctionInternal::jac_mx(int iind=0, int
oind=0, const Dict &opts=Dict()) "

[INTERNAL]  Jacobian expression.

";

%feature("docstring")  casadi::FunctionInternal::hess_sx(int iind=0, int
oind=0) "

[INTERNAL]  Hessian expression.

";

%feature("docstring")  casadi::FunctionInternal::get_function() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::BSplineCommon::get_n_out() override "

Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::alloc_memory() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::FunctionInternal::name_in(int ind) const  "

[INTERNAL]  Get input scheme name by index.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring") casadi::BSpline::_set_work "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::reverse(int nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::BSpline::init(const Dict &opts) override "

Initialize.

";

%feature("docstring")  casadi::BSpline::get_reverse(const std::string &name,
int nadj, const std::vector< std::string > &i_names, const std::vector<
std::string > &o_names, const Dict &opts) const override "

Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::FunctionInternal::set_temp(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::replaceAdjSeed(const
std::vector< std::vector< M > > &aseed) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::getGradient(const
std::string &name, int iind, int oind, const Dict &opts) "

[INTERNAL]  Return gradient function.

";

%feature("docstring")
casadi::FunctionInternal::generateFunction(CodeGenerator &g, const
std::string &fname, bool decl_static) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::size_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::addDependency(CodeGenerator
&g) const  "

[INTERNAL]  Add a dependent function.

";

%feature("docstring")  casadi::FunctionInternal::matchingRes(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(int iind, int
oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::gradient(int iind, int
oind) "

[INTERNAL]  Return gradient function.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInputReal(int k)
const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::BSpline::print(std::ostream &stream) const
override "

Print description.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::grad_mx(int iind=0, int
oind=0) "

[INTERNAL]  Gradient expression.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::get_name_in(int i) "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::jacobian(int iind, int
oind, bool compact, bool symmetric) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::set_jac_sparsity(const
Sparsity &sp, int iind, int oind, bool compact) "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::default_in(int ind) const
"

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::FunctionInternal::tang_mx(int iind=0, int
oind=0) "

[INTERNAL]  Tangent expression.

";

%feature("docstring")  casadi::FunctionInternal::clear_memory() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::replaceRes(const
std::vector< M > &res) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::setJacobian(const Function
&jac, int iind, int oind, bool compact) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::n_in() const  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::checkRes(const std::vector<
M > &res) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(int nfwd) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::map_mx(const std::vector<
std::vector< MX > > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::map_mx(const std::vector<
MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::FunctionInternal::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::BSpline::get_n_forward() const override "

Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::BSpline::generateDeclarations(CodeGenerator
&g) const override "

Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(int ind) const
"

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(const
std::string &iname) const  "

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::FunctionInternal::replaceArg(const
std::vector< M > &arg, bool hcat=false) const  "

[INTERNAL]  Replace 0-by-0 inputs.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::BSplineCommon::get_n_in() override "

Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::forward(int nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::BSpline::generateBody(CodeGenerator &g) const
override "

Generate code for the body of the C function.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInput(int k) const
"

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::get_stats(void *mem) const
"

[INTERNAL]  Get all statistics

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FunctionInternal::getHessian(int iind, int
oind) "

[INTERNAL]  Return Hessian function.

";

%feature("docstring")  casadi::FunctionInternal::name_out(int ind) const  "

[INTERNAL]  Get output scheme name by index.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::BSpline::eval(void *mem, const double **arg,
double **res, int *iw, double *w) const override "

Evaluate numerically, work vectors given.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::name() const  "

[INTERNAL]  Name of the function.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(int iind,
int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOperation(int k)
const  "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::fullJacobian() "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::tang_sx(int iind=0, int
oind=0) "

[INTERNAL]  Tangent expression.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::eval_name() const  "

[INTERNAL]  Get name of the evaluation function.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::BSpline "



>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Custom input     | casadi::Function |
|                  |                 | scheme           | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| lookup_mode      | OT_STRINGVECTOR | Sets, for each   | casadi::BSpline  |
|                  |                 | grid dimenion,   |                  |
|                  |                 | the lookup       |                  |
|                  |                 | algorithm used   |                  |
|                  |                 | to find the      |                  |
|                  |                 | correct index.   |                  |
|                  |                 | 'linear' uses a  |                  |
|                  |                 | for-loop +       |                  |
|                  |                 | break; 'exact'   |                  |
|                  |                 | uses floored     |                  |
|                  |                 | division (only   |                  |
|                  |                 | for uniform      |                  |
|                  |                 | grids).          |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Custom output    | casadi::Function |
|                  |                 | scheme           | Internal         |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: bspline.hpp ";

%feature("docstring")  casadi::FunctionInternal::getJacobian(const
std::string &name, int iind, int oind, bool compact, bool symmetric, const
Dict &opts) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::jit_dependencies(const
std::string &fname) "

[INTERNAL]   Jit dependencies.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::n_out() const  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring") casadi::BSpline::~BSpline "

Destructor.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::FunctionInternal::symbolicOutput(const
std::vector< MX > &arg) "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::FunctionInternal::verbose() const  "

[INTERNAL]  Verbose mode?

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(int ind) const
"

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(const
std::string &iname) const  "

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::FunctionInternal::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::checkArg(const std::vector<
M > &arg, bool hcat=false) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::matchingArg(const
std::vector< M > &arg, bool hcat=false) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::BSpline::BSpline(const std::string &name,
const std::vector< double > &knots, const std::vector< int > &offset, const
std::vector< double > &coeffs, const std::vector< int > &degree, int m) "

";

%feature("docstring")  casadi::FunctionInternal::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";


// File: classcasadi_1_1BSplineCommon.xml
%feature("docstring")  casadi::FunctionInternal::tang_mx(int iind=0, int
oind=0) "

[INTERNAL]  Tangent expression.

";

%feature("docstring")  casadi::FunctionInternal::gradient(int iind, int
oind) "

[INTERNAL]  Return gradient function.

";

%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::simple(const double *arg,
double *res) const  "

[INTERNAL]  Evaluate numerically, simplied syntax.

";

%feature("docstring")  casadi::FunctionInternal::get_reverse(const
std::string &name, int nadj, const std::vector< std::string > &i_names,
const std::vector< std::string > &o_names, const Dict &opts) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::set_temp(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::eval_name() const  "

[INTERNAL]  Get name of the evaluation function.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FunctionInternal::symbolicFwdSeed(int nfwd,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::hess_sx(int iind=0, int
oind=0) "

[INTERNAL]  Hessian expression.

";

%feature("docstring")  casadi::FunctionInternal::eval(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::sp_fwd(const bvec_t **arg,
bvec_t **res, int *iw, bvec_t *w, int mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::FunctionInternal::verbose() const  "

[INTERNAL]  Verbose mode?

";

%feature("docstring")  casadi::FunctionInternal::mx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::addShorthand(CodeGenerator
&g, const std::string &name) const  "

[INTERNAL]  Generate shorthand macro.

";

%feature("docstring")  casadi::FunctionInternal::getAlgorithmSize() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::FunctionInternal::get_forward(const
std::string &name, int nfwd, const std::vector< std::string > &i_names,
const std::vector< std::string > &o_names, const Dict &opts) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::construct(const Dict &opts)
"

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< int > &order_in, const std::vector< int >
&order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::FunctionInternal::sx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::repr(std::ostream &stream)
const override "

[INTERNAL]  Print.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::simplifiedCall() const  "

[INTERNAL]  Use simplified signature.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, int order, bool
tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::hasFullJacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::free_memory(void *mem)
const  "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::generateBody(CodeGenerator
&g) const  "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::FunctionInternal::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::size_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::replaceFwdSeed(const
std::vector< std::vector< M > > &fseed) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::replaceRes(const
std::vector< M > &res) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::FunctionInternal::print(std::ostream &stream)
const override "

[INTERNAL]  Print.

";

%feature("docstring")  casadi::FunctionInternal::addDependency(CodeGenerator
&g) const  "

[INTERNAL]  Add a dependent function.

";

%feature("docstring") casadi::BSplineCommon::_get_stats "

[INTERNAL]  Get all statistics

";

%feature("docstring")  casadi::FunctionInternal::forward(int nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::name_out(int ind) const  "

[INTERNAL]  Get output scheme name by index.

";

%feature("docstring")  casadi::FunctionInternal::tangent(int iind, int oind)
"

[INTERNAL]  Return tangent function.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(int iind,
int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::getWorkSize() const  "

[INTERNAL]  Get the length of the work vector.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(int ind) const
"

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(const
std::string &iname) const  "

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, int *iw, SXElem *w, int mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::FunctionInternal::get_sparsity_out(int i) "

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::FunctionInternal::reverse(int nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::replaceArg(const
std::vector< M > &arg, bool hcat=false) const  "

[INTERNAL]  Replace 0-by-0 inputs.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::setJacobian(const Function
&jac, int iind, int oind, bool compact) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::BSplineCommon::get_n_out() override "

Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::checkRes(const std::vector<
M > &res) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

";

%feature("docstring")  casadi::FunctionInternal::generateMeta(CodeGenerator
&g, const std::string &fname) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FunctionInternal::get_name_out(int i) "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::n_out() const  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(int nadj,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::get_name_in(int i) "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::BSplineCommon::_set_temp "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::grad_sx(int iind=0, int
oind=0) "

[INTERNAL]  Gradient expression.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOutput(int k)
const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::jit_dependencies(const
std::string &fname) "

[INTERNAL]   Jit dependencies.

";

%feature("docstring")  casadi::FunctionInternal::size_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::FunctionInternal::default_in(int ind) const
"

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::get_n_forward() const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")
casadi::FunctionInternal::generateFunction(CodeGenerator &g, const
std::string &fname, bool decl_static) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::FunctionInternal::print_free(std::ostream
&stream) const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::FunctionInternal::get_stats(void *mem) const
"

[INTERNAL]  Get all statistics

";

%feature("docstring")  casadi::FunctionInternal::checkInputs() const  "

[INTERNAL]  Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::FunctionInternal::name() const  "

[INTERNAL]  Name of the function.

";

%feature("docstring")  casadi::BSplineCommon::get_n_in() override "

Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::getJacobian(const
std::string &name, int iind, int oind, bool compact, bool symmetric, const
Dict &opts) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::grad_mx(int iind=0, int
oind=0) "

[INTERNAL]  Gradient expression.

";

%feature("docstring")  casadi::FunctionInternal::matchingRes(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

";

%feature("docstring")  casadi::FunctionInternal::set_jac_sparsity(const
Sparsity &sp, int iind, int oind, bool compact) "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::n_in() const  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::hessian(int iind, int oind)
"

[INTERNAL]  Return Hessian function.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(int ind) const
"

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(const
std::string &iname) const  "

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring") casadi::BSplineCommon::_call "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring") casadi::BSplineCommon::_call "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(int iind, int
oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::FunctionInternal::getPartition(int iind, int
oind, Sparsity &D1, Sparsity &D2, bool compact, bool symmetric, bool
allow_forward, bool allow_reverse) "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::checkArg(const std::vector<
M > &arg, bool hcat=false) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::numel_out(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::symbolicOutput(const
std::vector< MX > &arg) "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::BSplineCommon "

Base class for BSpline evaluators

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Custom input     | casadi::Function |
|                  |                 | scheme           | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| lookup_mode      | OT_STRINGVECTOR | Sets, for each   | casadi::BSplineC |
|                  |                 | grid dimenion,   | ommon            |
|                  |                 | the lookup       |                  |
|                  |                 | algorithm used   |                  |
|                  |                 | to find the      |                  |
|                  |                 | correct index.   |                  |
|                  |                 | 'linear' uses a  |                  |
|                  |                 | for-loop +       |                  |
|                  |                 | break; 'exact'   |                  |
|                  |                 | uses floored     |                  |
|                  |                 | division (only   |                  |
|                  |                 | for uniform      |                  |
|                  |                 | grids).          |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Custom output    | casadi::Function |
|                  |                 | scheme           | Internal         |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: bspline.hpp ";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::log(const std::string &msg)
const  "

[INTERNAL]  Log the status of the solver.

";

%feature("docstring")  casadi::FunctionInternal::log(const std::string &fcn,
const std::string &msg) const  "

[INTERNAL]  Log the status of the solver, function given.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(int nadj) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::getFullJacobian(const
std::string &name, const std::vector< std::string > &i_names, const
std::vector< std::string > &o_names, const Dict &opts) "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::clear_memory() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsityGen(int iind,
int oind, bool symmetric, int gr_i=1, int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInput(int k) const
"

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::hasDerivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(int nfwd) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::matchingArg(const
std::vector< M > &arg, bool hcat=false) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::alloc_memory() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring") casadi::BSplineCommon::BSplineCommon(const std::string
&name, const std::vector< double > &knots, const std::vector< int > &offset,
const std::vector< int > &degree, int m) "

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring") casadi::BSplineCommon::_eval "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring") casadi::BSplineCommon::_eval "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring") casadi::BSplineCommon::_eval "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::type_name() const  "

[INTERNAL]  Get type name.

";

%feature("docstring") casadi::BSplineCommon::_set_work "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::jacobian(int iind, int
oind, bool compact, bool symmetric) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::get_n_reverse() const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::get_sparsity_in(int i) "

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::FunctionInternal::fullJacobian() "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::map_mx(const std::vector<
std::vector< MX > > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::map_mx(const std::vector<
MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::finalize(const Dict &opts)
"

[INTERNAL]  Finalize the object creation This function, which visits the
class hierarchy in reverse order is run after init() has been completed.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInputReal(int k)
const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::getHessian(int iind, int
oind) "

[INTERNAL]  Return Hessian function.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::FunctionInternal::tang_sx(int iind=0, int
oind=0) "

[INTERNAL]  Tangent expression.

";

%feature("docstring")  casadi::FunctionInternal::jac_mx(int iind=0, int
oind=0, const Dict &opts=Dict()) "

[INTERNAL]  Jacobian expression.

";

%feature("docstring")  casadi::FunctionInternal::init_memory(void *mem)
const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::BSplineCommon::init(const Dict &opts)
override "

Initialize.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::name_in(int ind) const  "

[INTERNAL]  Get input scheme name by index.

";

%feature("docstring")  casadi::FunctionInternal::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring") casadi::BSplineCommon::_setup "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")
casadi::FunctionInternal::generateDeclarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::getGradient(const
std::string &name, int iind, int oind, const Dict &opts) "

[INTERNAL]  Return gradient function.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOperation(int k)
const  "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::get_function() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::BSplineCommon::get_options() const override "

Options.

";

%feature("docstring")  casadi::FunctionInternal::jac_sx(int iind=0, int
oind=0, const Dict &opts=Dict()) "

[INTERNAL]  Jacobian expression.

";

%feature("docstring")  casadi::FunctionInternal::n_mem() const  "

[INTERNAL]  Maximum number of memory objects.

";

%feature("docstring")  casadi::FunctionInternal::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::FunctionInternal::sp_rev(bvec_t **arg, bvec_t
**res, int *iw, bvec_t *w, int mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::getTangent(const
std::string &name, int iind, int oind, const Dict &opts) "

[INTERNAL]  Return tangent function.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::replaceAdjSeed(const
std::vector< std::vector< M > > &aseed) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::oracle() const  "

[INTERNAL]  Get oracle.

";


// File: classcasadi_1_1BSplineDual.xml
%feature("docstring")  casadi::FunctionInternal::construct(const Dict &opts)
"

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::FunctionInternal::sx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::n_in() const  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::gradient(int iind, int
oind) "

[INTERNAL]  Return gradient function.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInputReal(int k)
const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::finalize(const Dict &opts)
"

[INTERNAL]  Finalize the object creation This function, which visits the
class hierarchy in reverse order is run after init() has been completed.

";

%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::BSplineDual::type_name() const override "

Get type name.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::addShorthand(CodeGenerator
&g, const std::string &name) const  "

[INTERNAL]  Generate shorthand macro.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(int iind, int
oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::BSplineDual::_get_stats "

[INTERNAL]  Get all statistics

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::FunctionInternal::jacobian(int iind, int
oind, bool compact, bool symmetric) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::FunctionInternal::getJacobian(const
std::string &name, int iind, int oind, bool compact, bool symmetric, const
Dict &opts) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::matchingRes(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

";

%feature("docstring")  casadi::FunctionInternal::hess_sx(int iind=0, int
oind=0) "

[INTERNAL]  Hessian expression.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, int *iw, SXElem *w, int mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::FunctionInternal::getPartition(int iind, int
oind, Sparsity &D1, Sparsity &D2, bool compact, bool symmetric, bool
allow_forward, bool allow_reverse) "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::addDependency(CodeGenerator
&g) const  "

[INTERNAL]  Add a dependent function.

";

%feature("docstring")  casadi::FunctionInternal::free_memory(void *mem)
const  "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::hasDerivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::setJacobian(const Function
&jac, int iind, int oind, bool compact) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOutput(int k)
const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::symbolicFwdSeed(int nfwd,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::get_name_out(int i) "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::BSplineDual::get_sparsity_in(int i) override
"

Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::BSplineCommon::get_options() const override "

Options.

";

%feature("docstring")  casadi::BSplineDual::init(const Dict &opts) override
"

Initialize.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::get_name_in(int i) "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::simple(const double *arg,
double *res) const  "

[INTERNAL]  Evaluate numerically, simplied syntax.

";

%feature("docstring")  casadi::FunctionInternal::set_temp(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::replaceRes(const
std::vector< M > &res) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::BSplineDual::get_n_reverse() const override "

Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::BSplineDual::print(std::ostream &stream)
const override "

Print description.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::BSplineDual::sp_rev(bvec_t **arg, bvec_t
**res, int *iw, bvec_t *w, int mem) const override "

Propagate sparsity backwards.

";

%feature("docstring") casadi::BSplineDual::_call "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring") casadi::BSplineDual::_call "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::BSplineDual::get_n_forward() const override "

Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::BSplineDual::~BSplineDual "

Destructor.

";

%feature("docstring")  casadi::FunctionInternal::getHessian(int iind, int
oind) "

[INTERNAL]  Return Hessian function.

";

%feature("docstring") casadi::BSplineDual::_set_work "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::eval_name() const  "

[INTERNAL]  Get name of the evaluation function.

";

%feature("docstring")  casadi::BSplineDual::get_n_in() override "

Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::print_free(std::ostream
&stream) const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring") casadi::BSplineDual::_setup "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::init_memory(void *mem)
const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::default_in(int ind) const
"

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::replaceArg(const
std::vector< M > &arg, bool hcat=false) const  "

[INTERNAL]  Replace 0-by-0 inputs.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::mx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(int nfwd) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< int > &order_in, const std::vector< int >
&order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::FunctionInternal::getAlgorithmSize() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::alloc_memory() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::FunctionInternal::get_stats(void *mem) const
"

[INTERNAL]  Get all statistics

";

%feature("docstring")  casadi::FunctionInternal::replaceAdjSeed(const
std::vector< std::vector< M > > &aseed) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::BSplineDual::has_codegen() const override "

Is codegen supported?

";

%feature("docstring")  casadi::BSplineDual::eval(void *mem, const double
**arg, double **res, int *iw, double *w) const override "

Evaluate numerically, work vectors given.

";

%feature("docstring")  casadi::FunctionInternal::fullJacobian() "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::verbose() const  "

[INTERNAL]  Verbose mode?

";

%feature("docstring")  casadi::FunctionInternal::set_jac_sparsity(const
Sparsity &sp, int iind, int oind, bool compact) "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FunctionInternal::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::reverse(int nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring") casadi::BSplineDual "



>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Custom input     | casadi::Function |
|                  |                 | scheme           | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| lookup_mode      | OT_STRINGVECTOR | Sets, for each   | casadi::BSplineD |
|                  |                 | grid dimenion,   | ual              |
|                  |                 | the lookup       |                  |
|                  |                 | algorithm used   |                  |
|                  |                 | to find the      |                  |
|                  |                 | correct index.   |                  |
|                  |                 | 'linear' uses a  |                  |
|                  |                 | for-loop +       |                  |
|                  |                 | break; 'exact'   |                  |
|                  |                 | uses floored     |                  |
|                  |                 | division (only   |                  |
|                  |                 | for uniform      |                  |
|                  |                 | grids).          |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Custom output    | casadi::Function |
|                  |                 | scheme           | Internal         |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: bspline.hpp ";

%feature("docstring")  casadi::FunctionInternal::map_mx(const std::vector<
std::vector< MX > > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::map_mx(const std::vector<
MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOperation(int k)
const  "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")
casadi::FunctionInternal::generateFunction(CodeGenerator &g, const
std::string &fname, bool decl_static) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::FunctionInternal::forward(int nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(int nadj,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FunctionInternal::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::FunctionInternal::hessian(int iind, int oind)
"

[INTERNAL]  Return Hessian function.

";

%feature("docstring")  casadi::FunctionInternal::getWorkSize() const  "

[INTERNAL]  Get the length of the work vector.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsityGen(int iind,
int oind, bool symmetric, int gr_i=1, int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(int nadj) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::BSplineDual::has_spfwd() const override "

Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::tang_sx(int iind=0, int
oind=0) "

[INTERNAL]  Tangent expression.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::FunctionInternal::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::BSplineDual::get_reverse(const std::string
&name, int nadj, const std::vector< std::string > &i_names, const
std::vector< std::string > &o_names, const Dict &opts) const override "

Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::getFullJacobian(const
std::string &name, const std::vector< std::string > &i_names, const
std::vector< std::string > &o_names, const Dict &opts) "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::BSplineDual::sp_fwd(const bvec_t **arg,
bvec_t **res, int *iw, bvec_t *w, int mem) const override "

Propagate sparsity forward.

";

%feature("docstring")  casadi::FunctionInternal::grad_sx(int iind=0, int
oind=0) "

[INTERNAL]  Gradient expression.

";

%feature("docstring")  casadi::FunctionInternal::simplifiedCall() const  "

[INTERNAL]  Use simplified signature.

";

%feature("docstring")  casadi::BSplineDual::generateBody(CodeGenerator &g)
const override "

Generate code for the body of the C function.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::replaceFwdSeed(const
std::vector< std::vector< M > > &fseed) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(int iind,
int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::repr(std::ostream &stream)
const override "

[INTERNAL]  Print.

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::matchingArg(const
std::vector< M > &arg, bool hcat=false) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(int ind) const
"

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(const
std::string &iname) const  "

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::BSplineDual::has_sprev() const override "

Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::name_in(int ind) const  "

[INTERNAL]  Get input scheme name by index.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::jac_sx(int iind=0, int
oind=0, const Dict &opts=Dict()) "

[INTERNAL]  Jacobian expression.

";

%feature("docstring") casadi::BSplineDual::BSplineDual(const std::string
&name, const std::vector< double > &knots, const std::vector< int > &offset,
const std::vector< double > &x, const std::vector< int > &degree, int m,
bool reverse) "

";

%feature("docstring")  casadi::FunctionInternal::n_mem() const  "

[INTERNAL]  Maximum number of memory objects.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")
casadi::BSplineDual::generateDeclarations(CodeGenerator &g) const override "

Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::jac_mx(int iind=0, int
oind=0, const Dict &opts=Dict()) "

[INTERNAL]  Jacobian expression.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::tangent(int iind, int oind)
"

[INTERNAL]  Return tangent function.

";

%feature("docstring")  casadi::FunctionInternal::tang_mx(int iind=0, int
oind=0) "

[INTERNAL]  Tangent expression.

";

%feature("docstring")  casadi::FunctionInternal::name_out(int ind) const  "

[INTERNAL]  Get output scheme name by index.

";

%feature("docstring")  casadi::FunctionInternal::n_out() const  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::symbolicOutput(const
std::vector< MX > &arg) "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::FunctionInternal::getGradient(const
std::string &name, int iind, int oind, const Dict &opts) "

[INTERNAL]  Return gradient function.

";

%feature("docstring")  casadi::FunctionInternal::log(const std::string &msg)
const  "

[INTERNAL]  Log the status of the solver.

";

%feature("docstring")  casadi::FunctionInternal::log(const std::string &fcn,
const std::string &msg) const  "

[INTERNAL]  Log the status of the solver, function given.

";

%feature("docstring")  casadi::FunctionInternal::jit_dependencies(const
std::string &fname) "

[INTERNAL]   Jit dependencies.

";

%feature("docstring")  casadi::FunctionInternal::getTangent(const
std::string &name, int iind, int oind, const Dict &opts) "

[INTERNAL]  Return tangent function.

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::name() const  "

[INTERNAL]  Name of the function.

";

%feature("docstring")  casadi::FunctionInternal::clear_memory() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::BSplineDual::get_sparsity_out(int i) override
"

Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::size_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::FunctionInternal::get_function() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::checkRes(const std::vector<
M > &res) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::generateMeta(CodeGenerator
&g, const std::string &fname) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::grad_mx(int iind=0, int
oind=0) "

[INTERNAL]  Gradient expression.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInput(int k) const
"

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(int ind) const
"

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(const
std::string &iname) const  "

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::BSplineDual::_eval "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring") casadi::BSplineDual::_eval "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring") casadi::BSplineDual::_eval "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::BSplineDual::get_n_out() override "

Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::hasFullJacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::size_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, int order, bool
tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::checkInputs() const  "

[INTERNAL]  Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::BSplineDual::_set_temp "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::checkArg(const std::vector<
M > &arg, bool hcat=false) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::BSplineDual::get_forward(const std::string
&name, int nfwd, const std::vector< std::string > &i_names, const
std::vector< std::string > &o_names, const Dict &opts) const override "

Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";


// File: classcasadi_1_1BSplineInterpolant.xml
%feature("docstring")  casadi::FunctionInternal::sparsity_jac(int iind, int
oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::jac_sx(int iind=0, int
oind=0, const Dict &opts=Dict()) "

[INTERNAL]  Jacobian expression.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::set_temp(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::getPartition(int iind, int
oind, Sparsity &D1, Sparsity &D2, bool compact, bool symmetric, bool
allow_forward, bool allow_reverse) "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::addShorthand(CodeGenerator
&g, const std::string &name) const  "

[INTERNAL]  Generate shorthand macro.

";

%feature("docstring")  casadi::Interpolant::get_sparsity_in(int i) override
"

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::getJacobian(const
std::string &name, int iind, int oind, bool compact, bool symmetric, const
Dict &opts) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::jacobian(int iind, int
oind, bool compact, bool symmetric) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::size_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::get_function() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::gradient(int iind, int
oind) "

[INTERNAL]  Return gradient function.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, int *iw, SXElem *w, int mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(int ind) const
"

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(const
std::string &iname) const  "

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring") casadi::BSplineInterpolant::_set_temp "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sp_rev(bvec_t **arg, bvec_t
**res, int *iw, bvec_t *w, int mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::forward(int nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(int iind,
int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::construct(const Dict &opts)
"

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::FunctionInternal::set_jac_sparsity(const
Sparsity &sp, int iind, int oind, bool compact) "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::free_memory(void *mem)
const  "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring") casadi::BSplineInterpolant::~BSplineInterpolant "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::replaceFwdSeed(const
std::vector< std::vector< M > > &fseed) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::getWorkSize() const  "

[INTERNAL]  Get the length of the work vector.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::simplifiedCall() const  "

[INTERNAL]  Use simplified signature.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::Interpolant::get_n_out() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::BSplineInterpolant::get_options() const
override "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::Interpolant::get_n_in() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::finalize(const Dict &opts)
"

[INTERNAL]  Finalize the object creation This function, which visits the
class hierarchy in reverse order is run after init() has been completed.

";

%feature("docstring")  casadi::FunctionInternal::tang_sx(int iind=0, int
oind=0) "

[INTERNAL]  Tangent expression.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< int > &order_in, const std::vector< int >
&order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(int nadj) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::print(std::ostream &stream)
const override "

[INTERNAL]  Print.

";

%feature("docstring")  casadi::FunctionInternal::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::BSplineInterpolant "

'bspline' plugin for Interpolant

N-dimensional BSpline interpolator

Uses not-a-knot conditions. For 1D and 2D cases, this code is equivalent to
fitpack

>List of available options

+---------------+--------------+-------------------------------------------+
|      Id       |     Type     |                Description                |
+===============+==============+===========================================+
| degree        | OT_INTVECTOR | Sets, for each grid dimenion, the degree  |
|               |              | of the spline.                            |
+---------------+--------------+-------------------------------------------+
| linear_solver | OT_STRING    | Solver used for constructing the          |
|               |              | coefficient tensor.                       |
+---------------+--------------+-------------------------------------------+

Joris Gillis

>List of available options

+---------------+--------------+---------------------+---------------------+
|      Id       |     Type     |     Description     |       Used in       |
+===============+==============+=====================+=====================+
| degree        | OT_INTVECTOR | Sets, for each grid | casadi::BSplineInte |
|               |              | dimenion, the       | rpolant             |
|               |              | degree of the       |                     |
|               |              | spline.             |                     |
+---------------+--------------+---------------------+---------------------+
| linear_solver | OT_STRING    | Solver used for     | casadi::BSplineInte |
|               |              | constructing the    | rpolant             |
|               |              | coefficient tensor. |                     |
+---------------+--------------+---------------------+---------------------+

Diagrams
--------



C++ includes: bspline_interpolant.hpp ";

%feature("docstring")  casadi::FunctionInternal::hasDerivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")
casadi::FunctionInternal::generateFunction(CodeGenerator &g, const
std::string &fname, bool decl_static) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::FunctionInternal::fullJacobian() "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::FunctionInternal::grad_mx(int iind=0, int
oind=0) "

[INTERNAL]  Gradient expression.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInputReal(int k)
const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::name_out(int ind) const  "

[INTERNAL]  Get output scheme name by index.

";

%feature("docstring")  casadi::FunctionInternal::checkRes(const std::vector<
M > &res) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::FunctionInternal::repr(std::ostream &stream)
const override "

[INTERNAL]  Print.

";

%feature("docstring") casadi::BSplineInterpolant::_set_work "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::matchingRes(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

";

%feature("docstring")  casadi::FunctionInternal::init_memory(void *mem)
const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::default_in(int ind) const
"

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::symbolicOutput(const
std::vector< MX > &arg) "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::FunctionInternal::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::setJacobian(const Function
&jac, int iind, int oind, bool compact) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::eval_name() const  "

[INTERNAL]  Get name of the evaluation function.

";

%feature("docstring")  casadi::FunctionInternal::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::FunctionInternal::get_stats(void *mem) const
"

[INTERNAL]  Get all statistics

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(int nadj,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FunctionInternal::simple(const double *arg,
double *res) const  "

[INTERNAL]  Evaluate numerically, simplied syntax.

";

%feature("docstring")  casadi::FunctionInternal::tangent(int iind, int oind)
"

[INTERNAL]  Return tangent function.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring") casadi::BSplineInterpolant::_call "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring") casadi::BSplineInterpolant::_call "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::map_mx(const std::vector<
std::vector< MX > > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::map_mx(const std::vector<
MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::get_n_reverse() const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::getHessian(int iind, int
oind) "

[INTERNAL]  Return Hessian function.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInput(int k) const
"

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::getAlgorithmSize() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::symbolicFwdSeed(int nfwd,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::clear_memory() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::size_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::get_forward(const
std::string &name, int nfwd, const std::vector< std::string > &i_names,
const std::vector< std::string > &o_names, const Dict &opts) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::Interpolant::get_sparsity_out(int i) override
"

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::get_n_forward() const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::n_mem() const  "

[INTERNAL]  Maximum number of memory objects.

";

%feature("docstring")  casadi::Interpolant::get_name_out(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOperation(int k)
const  "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, int order, bool
tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::checkInputs() const  "

[INTERNAL]  Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::FunctionInternal::hess_sx(int iind=0, int
oind=0) "

[INTERNAL]  Hessian expression.

";

%feature("docstring")  casadi::FunctionInternal::n_in() const  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::sx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::BSplineInterpolant::eval(void *mem, const
double **arg, double **res, int *iw, double *w) const override "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::BSplineInterpolant::init(const Dict &opts)
override "

[INTERNAL]  Initialize Initialize and make the object ready for setting
arguments and evaluation. This method is typically called after setting
options but before evaluating. If passed to another class (in the
constructor), this class should invoke this function when initialized.

";

%feature("docstring")  casadi::FunctionInternal::addDependency(CodeGenerator
&g) const  "

[INTERNAL]  Add a dependent function.

";

%feature("docstring")  casadi::FunctionInternal::name_in(int ind) const  "

[INTERNAL]  Get input scheme name by index.

";

%feature("docstring")  casadi::BSplineInterpolant::getFullJacobian(const
std::string &name, const std::vector< std::string > &i_names, const
std::vector< std::string > &o_names, const Dict &opts) override "

[INTERNAL]  Full Jacobian.

";

%feature("docstring")  casadi::FunctionInternal::print_free(std::ostream
&stream) const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOutput(int k)
const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::log(const std::string &msg)
const  "

[INTERNAL]  Log the status of the solver.

";

%feature("docstring")  casadi::FunctionInternal::log(const std::string &fcn,
const std::string &msg) const  "

[INTERNAL]  Log the status of the solver, function given.

";

%feature("docstring")  casadi::FunctionInternal::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::replaceRes(const
std::vector< M > &res) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::checkArg(const std::vector<
M > &arg, bool hcat=false) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::get_reverse(const
std::string &name, int nadj, const std::vector< std::string > &i_names,
const std::vector< std::string > &o_names, const Dict &opts) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::BSplineInterpolant::plugin_name() const
override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::replaceAdjSeed(const
std::vector< std::vector< M > > &aseed) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::FunctionInternal::grad_sx(int iind=0, int
oind=0) "

[INTERNAL]  Gradient expression.

";

%feature("docstring")  casadi::FunctionInternal::n_out() const  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::FunctionInternal::jac_mx(int iind=0, int
oind=0, const Dict &opts=Dict()) "

[INTERNAL]  Jacobian expression.

";

%feature("docstring")  casadi::FunctionInternal::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::hessian(int iind, int oind)
"

[INTERNAL]  Return Hessian function.

";

%feature("docstring") casadi::BSplineInterpolant::BSplineInterpolant(const
std::string &name, const std::vector< double > &grid, const std::vector< int
> &offset, const std::vector< double > &values) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::Interpolant::type_name() const override "

[INTERNAL]  Get type name.

";

%feature("docstring")  casadi::FunctionInternal::sp_fwd(const bvec_t **arg,
bvec_t **res, int *iw, bvec_t *w, int mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::replaceArg(const
std::vector< M > &arg, bool hcat=false) const  "

[INTERNAL]  Replace 0-by-0 inputs.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::BSplineInterpolant::_setup "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring") casadi::BSplineInterpolant::_eval "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring") casadi::BSplineInterpolant::_eval "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring") casadi::BSplineInterpolant::_eval "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::jit_dependencies(const
std::string &fname) "

[INTERNAL]   Jit dependencies.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")
casadi::BSplineInterpolant::generateBody(CodeGenerator &g) const override "

[INTERNAL]  Generate code for the body of the C function.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")
casadi::FunctionInternal::generateDeclarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::alloc_memory() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring") casadi::BSplineInterpolant::_get_stats "

[INTERNAL]  Get all statistics

";

%feature("docstring")  casadi::FunctionInternal::getTangent(const
std::string &name, int iind, int oind, const Dict &opts) "

[INTERNAL]  Return tangent function.

";

%feature("docstring")  casadi::FunctionInternal::getGradient(const
std::string &name, int iind, int oind, const Dict &opts) "

[INTERNAL]  Return gradient function.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(int nfwd) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::tang_mx(int iind=0, int
oind=0) "

[INTERNAL]  Tangent expression.

";

%feature("docstring")  casadi::FunctionInternal::matchingArg(const
std::vector< M > &arg, bool hcat=false) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::verbose() const  "

[INTERNAL]  Verbose mode?

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(int ind) const
"

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(const
std::string &iname) const  "

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::BSplineInterpolant::has_codegen() const
override "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::FunctionInternal::reverse(int nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::name() const  "

[INTERNAL]  Name of the function.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsityGen(int iind,
int oind, bool symmetric, int gr_i=1, int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::FunctionInternal::generateMeta(CodeGenerator
&g, const std::string &fname) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::BSplineInterpolant::hasFullJacobian() const
override "

[INTERNAL]  Full Jacobian.

";

%feature("docstring")  casadi::Interpolant::get_name_in(int i) override "

[INTERNAL]  Names of function input and outputs.

";


// File: classcasadi_1_1Call.xml


// File: classcasadi_1_1Callback.xml
%feature("docstring")  casadi::Function::size2_in(int ind) const  "

Get input dimension.

";

%feature("docstring")  casadi::Function::size2_in(const std::string &iname)
const  "

Get input dimension.

";

%feature("docstring")  casadi::Function::call(const std::vector< DM > &arg,
std::vector< DM > &output_res, bool always_inline=false, bool
never_inline=false) const  "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< SX > &arg,
std::vector< SX > &output_res, bool always_inline=false, bool
never_inline=false) const  "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< MX > &arg,
std::vector< MX > &output_res, bool always_inline=false, bool
never_inline=false) const  "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const DMDict &arg, DMDict
&output_res, bool always_inline=false, bool never_inline=false) const  "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const SXDict &arg, SXDict
&output_res, bool always_inline=false, bool never_inline=false) const  "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const MXDict &arg, MXDict
&output_res, bool always_inline=false, bool never_inline=false) const  "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::generate_dependencies(const
std::string &fname, const Dict &opts=Dict()) const  "

Export / Generate C code for the dependency function.

";

%feature("docstring")  casadi::Callback::get_n_in() "

Get the number of inputs This function is called during construction.

";

%feature("docstring")  casadi::Callback::get_n_out() "

Get the number of outputs This function is called during construction.

";

%feature("docstring")  casadi::Function::size_in(int ind) const  "

Get input dimension.

";

%feature("docstring")  casadi::Function::size_in(const std::string &iname)
const  "

Get input dimension.

";

%feature("docstring") casadi::Callback::Callback() "

Default constructor.

";

%feature("docstring") casadi::Callback::Callback(const Callback &obj) "

Copy constructor (throws an error)

";

%feature("docstring")  casadi::Callback::get_name_in(int i) "

Get the sparsity of an input This function is called during construction.

";

%feature("docstring")  casadi::Function::getWorkSize() const  "

Get the length of the work vector.

";

%feature("docstring")  casadi::Function::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::Function::slice(const std::string &name,
const std::vector< int > &order_in, const std::vector< int > &order_out,
const Dict &opts=Dict()) const  "

returns a new function with a selection of inputs/outputs of the original

";

%feature("docstring")  casadi::Function::hessian_old(int iind, int oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output Legacy function: To be deprecated in a future
version of CasADi. Exists only for compatibility with Function::hessian pre-
CasADi 3.2

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=casadi::userOut(), bool trailing_newline=true) const  "

Print a description of the object.

";

%feature("docstring")  casadi::Function::has_function(const std::string
&fname) const  "

";

%feature("docstring")  casadi::Function::nnz_out() const  "

Get number of output nonzeros.

For a particular output or for all of the outputs

";

%feature("docstring")  casadi::Function::nnz_out(int ind) const  "

Get number of output nonzeros.

For a particular output or for all of the outputs

";

%feature("docstring")  casadi::Function::nnz_out(const std::string &oname)
const  "

Get number of output nonzeros.

For a particular output or for all of the outputs

";

%feature("docstring")  casadi::Function::factory(const std::string &name,
const std::vector< std::string > &s_in, const std::vector< std::string >
&s_out, const AuxOut &aux=AuxOut(), const Dict &opts=Dict()) const  "

";

%feature("docstring")  casadi::Function::print_free(std::ostream
&stream=casadi::userOut()) const  "

Print free variables.

";

%feature("docstring")  casadi::Function::free_sx() const  "

Get all the free variables of the function.

";

%feature("docstring")  casadi::Function::name_out() const  "

Get output scheme.

";

%feature("docstring")  casadi::Function::name_out(int ind) const  "

Get output scheme name by index.

";

%feature("docstring")  casadi::Function::nnz_in() const  "

Get number of input nonzeros.

For a particular input or for all of the inputs

";

%feature("docstring")  casadi::Function::nnz_in(int ind) const  "

Get number of input nonzeros.

For a particular input or for all of the inputs

";

%feature("docstring")  casadi::Function::nnz_in(const std::string &iname)
const  "

Get number of input nonzeros.

For a particular input or for all of the inputs

";

%feature("docstring")  casadi::Function::forward(int nfwd) const  "

Get a function that calculates nfwd forward derivatives.

Returns a function with n_in + n_out + n_in inputs and nfwd outputs. The
first n_in inputs correspond to nondifferentiated inputs. The next n_out
inputs correspond to nondifferentiated outputs. and the last n_in inputs
correspond to forward seeds, stacked horizontally The n_out outputs
correspond to forward sensitivities, stacked horizontally. * (n_in = n_in(),
n_out = n_out())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring")  casadi::Function::default_in(int ind) const  "

Get default input value (NOTE: constant reference)

";

%feature("docstring")  casadi::Callback::init() "

Initialize the object This function is called after the object construction
(for the whole class hierarchy) is complete, but before the finalization
step. It is called recursively for the whole class hierarchy, starting with
the lowest level.

";

%feature("docstring")  casadi::Function::numel_out() const  "

Get number of output elements.

For a particular output or for all of the outputs

";

%feature("docstring")  casadi::Function::numel_out(int ind) const  "

Get number of output elements.

For a particular output or for all of the outputs

";

%feature("docstring")  casadi::Function::numel_out(const std::string &oname)
const  "

Get number of output elements.

For a particular output or for all of the outputs

";

%feature("docstring")  casadi::Function::print_dimensions(std::ostream
&stream=casadi::userOut()) const  "

Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::Function::generate(const std::string &fname,
const Dict &opts=Dict()) const  "

Export / Generate C code for the function.

";

%feature("docstring")  casadi::Function::generate(const Dict &opts=Dict())
const  "

Export / Generate C code for the function.

";

%feature("docstring")  casadi::Function::getAtomicInput(int k) const  "

Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::Function::getAtomicInputReal(int k) const  "

Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::Function::checkInputs() const  "

[INTERNAL]  Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::SharedObject::is_null() const  "

Is a null pointer?

";

%feature("docstring")  casadi::Callback::get_n_reverse() const  "

Return function that calculates adjoint derivatives reverse(nadj) returns a
cached instance if available, and calls  Function get_reverse(int nadj) if
no cached version is available.

";

%feature("docstring")  casadi::Function::type_name() const  "

Get type name.

";

%feature("docstring")  casadi::Function::jacobian(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

[DEPRECATED] Alias of Function::jacobian_old This function is of internal
character and should be avoided, if possible. The preferred way is to use
unction::factory instead. This function will change behavior in the next
version of CasADi.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
int oind=0, bool compact=false, bool symmetric=false) "

[INTERNAL]  Generate a Jacobian function of output oind with respect to
input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output Legacy function: To be deprecated in a future
version of CasADi. Exists only for compatibility with Function::jacobian
pre-CasADi 3.2

";

%feature("docstring")  casadi::Function::jacobian(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

[INTERNAL]  Generate a Jacobian function of output oind with respect to
input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output Legacy function: To be deprecated in a future
version of CasADi. Exists only for compatibility with Function::jacobian
pre-CasADi 3.2

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
const std::string &oind, bool compact=false, bool symmetric=false) "

[INTERNAL]  Generate a Jacobian function of output oind with respect to
input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output Legacy function: To be deprecated in a future
version of CasADi. Exists only for compatibility with Function::jacobian
pre-CasADi 3.2

";

%feature("docstring")  casadi::Function::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::Function::n_nodes() const  "

Number of nodes in the algorithm.

";

%feature("docstring")  casadi::Function::sx_out(int oind) const  "

Get symbolic primitives equivalent to the output expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring")  casadi::Function::sx_out(const std::string &oname)
const  "

Get symbolic primitives equivalent to the output expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring")  casadi::Function::sx_out() const  "

Get symbolic primitives equivalent to the output expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring")  casadi::Function::print_options(std::ostream
&stream=casadi::userOut()) const  "

Print options to a stream.

";

%feature("docstring")  casadi::Function::checkout() const  "

Checkout a memory object.

";

%feature("docstring")  casadi::Function::reverse(int nadj) const  "

Get a function that calculates nadj adjoint derivatives.

Returns a function with n_in + n_out + n_out inputs and n_in outputs. The
first n_in inputs correspond to nondifferentiated inputs. The next n_out
inputs correspond to nondifferentiated outputs. and the last n_out inputs
correspond to adjoint seeds, stacked horizontally The n_in outputs
correspond to adjoint sensitivities, stacked horizontally. * (n_in = n_in(),
n_out = n_out())

(n_in = n_in(), n_out = n_out())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::Callback::~Callback "

Destructor.

";

%feature("docstring")  casadi::Function::getAtomicOutput(int k) const  "

Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::Function::hessian(int iind=0, int oind=0) "

[DEPRECATED] Alias of Function::jacobian_old This function is of internal
character and should be avoided, if possible. The preferred way is to use
unction::factory instead. This function will change behavior in the next
version of CasADi.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
int oind=0) "

[DEPRECATED] Alias of Function::jacobian_old This function is of internal
character and should be avoided, if possible. The preferred way is to use
unction::factory instead. This function will change behavior in the next
version of CasADi.

";

%feature("docstring")  casadi::Function::hessian(int iind, const std::string
&oind) "

[DEPRECATED] Alias of Function::jacobian_old This function is of internal
character and should be avoided, if possible. The preferred way is to use
unction::factory instead. This function will change behavior in the next
version of CasADi.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
const std::string &oind) "

[DEPRECATED] Alias of Function::jacobian_old This function is of internal
character and should be avoided, if possible. The preferred way is to use
unction::factory instead. This function will change behavior in the next
version of CasADi.

";

%feature("docstring")  casadi::Function::conic_debug(const std::string
&filename) const  "

Generate native code in the interfaced language for debugging

";

%feature("docstring")  casadi::Function::conic_debug(std::ostream &file)
const  "

Generate native code in the interfaced language for debugging

";

%feature("docstring")  casadi::PrintableObject< SharedObject
>::getDescription() const "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::Function::which_depends(const std::string
&s_in, const std::vector< std::string > &s_out, int order=1, bool tr=false)
const  "

Which variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::Function::setFullJacobian(const Function
&jac) "

[DEPRECATED] Set the Jacobian of all the input nonzeros with respect to all
output nonzeros NOTE: Does not take ownership, only weak references to the
Jacobian are kept internally

";

%feature("docstring")  casadi::SharedObject::repr(std::ostream
&stream=casadi::userOut(), bool trailing_newline=true) const  "

Print a representation of the object.

";

%feature("docstring")  casadi::Function::index_out(const std::string &name)
const  "

Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLPSOL_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Callback::construct(const std::string &name,
const Dict &opts=Dict()) "

Construct internal object This is the step that actually construct the
internal object, as the class constructor only creates a null pointer. It
should be called from the user constructor.

";

%feature("docstring")  casadi::Callback::get_n_forward() const  "

Return function that calculates forward derivatives forward(nfwd) returns a
cached instance if available, and calls  Function get_forward(int nfwd) if
no cached version is available.

";

%feature("docstring")  casadi::Function::sx_in(int iind) const  "

Get symbolic primitives equivalent to the input expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring")  casadi::Function::sx_in(const std::string &iname)
const  "

Get symbolic primitives equivalent to the input expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring")  casadi::Function::sx_in() const  "

Get symbolic primitives equivalent to the input expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring")  casadi::Callback::get_forward(const std::string
&name, int nfwd, const std::vector< std::string > &i_names, const
std::vector< std::string > &o_names, const Dict &opts) const  "

Return function that calculates forward derivatives forward(nfwd) returns a
cached instance if available, and calls  Function get_forward(int nfwd) if
no cached version is available.

";

%feature("docstring")  casadi::Function::sparsity_jac(int iind, int oind,
bool compact=false, bool symmetric=false) const  "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::sparsity_jac(const std::string
&iind, int oind=0, bool compact=false, bool symmetric=false) const  "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::sparsity_jac(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) const  "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::sparsity_jac(const std::string
&iind, const std::string &oind, bool compact=false, bool symmetric=false)
const  "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::sparsity_jac(int iind=0) const  "

[INTERNAL] ";

%feature("docstring")  casadi::Function::rootfinder_fun() const  "

[DEPRECATED] Use oracle() instead

";

%feature("docstring")  casadi::Callback::alloc_w(size_t sz_w, bool
persist=false) "

Allocate work vectors.

";

%feature("docstring")  casadi::Function::size1_out(int ind) const  "

Get output dimension.

";

%feature("docstring")  casadi::Function::size1_out(const std::string &oname)
const  "

Get output dimension.

";

%feature("docstring")  casadi::Function::spCanEvaluate(bool fwd) "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::Callback::has_jacobian() const  "

Return Jacobian of all input elements with respect to all output elements.

";

%feature("docstring")  casadi::Callback::finalize() "

Finalize the object This function is called after the construction and init
steps are completed, but before user functions are called. It is called
recursively for the whole class hierarchy, starting with the highest level.

";

%feature("docstring")  casadi::Function::size2_out(int ind) const  "

Get output dimension.

";

%feature("docstring")  casadi::Function::size2_out(const std::string &oname)
const  "

Get output dimension.

";

%feature("docstring")  casadi::Function::mx_in(int ind) const  "

Get symbolic primitives equivalent to the input expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring")  casadi::Function::mx_in(const std::string &iname)
const  "

Get symbolic primitives equivalent to the input expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring")  casadi::Function::mx_in() const  "

Get symbolic primitives equivalent to the input expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring")  casadi::Function::release(int mem) const  "

Release a memory object.

";

%feature("docstring")  casadi::Function::is_a(const std::string &type, bool
recursive=true) const  "

Check if the function is of a particular type Optionally check if name
matches one of the base classes (default true)

";

%feature("docstring")  casadi::PrintableObject< SharedObject
>::getRepresentation() const "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::Function::wrap() const  "

Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::Callback::get_sparsity_out(int i) "

Get the sparsity of an output This function is called during construction.

";

%feature("docstring")  casadi::Function::assert_size_out(int i, int nrow,
int ncol) const  "

Assert that an output dimension is equal so some given value.

";

%feature("docstring")  casadi::Function::name_in() const  "

Get input scheme.

";

%feature("docstring")  casadi::Function::name_in(int ind) const  "

Get input scheme name by index.

";

%feature("docstring")  casadi::Function::has_free() const  "

Does the function have free variables.

";

%feature("docstring")  casadi::Callback::alloc_res(size_t sz_res, bool
persist=false) "

Allocate work vectors.

";

%feature("docstring")  casadi::Function::assert_size_in(int i, int nrow, int
ncol) const  "

Assert that an input dimension is equal so some given value.

";

%feature("docstring")  casadi::Callback::get_sparsity_in(int i) "

Get the sparsity of an input This function is called during construction.

";

%feature("docstring")  casadi::Function::tangent(int iind=0, int oind=0) "

[DEPRECATED] Use Function::factory instead

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
int oind=0) "

[DEPRECATED] Use Function::factory instead

";

%feature("docstring")  casadi::Function::tangent(int iind, const std::string
&oind) "

[DEPRECATED] Use Function::factory instead

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
const std::string &oind) "

[DEPRECATED] Use Function::factory instead

";

%feature("docstring")  casadi::Function::n_in() const  "

Get the number of function inputs.

";

%feature("docstring")  casadi::Function::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::Function::gradient(int iind=0, int oind=0) "

[DEPRECATED] Use Function::factory instead

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
int oind=0) "

[DEPRECATED] Use Function::factory instead

";

%feature("docstring")  casadi::Function::gradient(int iind, const
std::string &oind) "

[DEPRECATED] Use Function::factory instead

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
const std::string &oind) "

[DEPRECATED] Use Function::factory instead

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=casadi::userOut()) const  "

[INTERNAL]  Print the pointer to the internal class

";

%feature("docstring")  casadi::Function::set_jac_sparsity(const Sparsity
&sp, int iind, int oind, bool compact=false) "

[DEPRECATED] Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::set_jac_sparsity(const Sparsity
&sp, const std::string &iind, int oind, bool compact=false) "

[DEPRECATED] Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::set_jac_sparsity(const Sparsity
&sp, int iind, const std::string &oind, bool compact=false) "

[DEPRECATED] Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::set_jac_sparsity(const Sparsity
&sp, const std::string &iind, const std::string &oind, bool compact=false) "

[DEPRECATED] Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::mapsum(const std::vector< MX >
&arg, const std::string &parallelization="serial") const  "

Evaluate symbolically in parallel and sum (matrix graph)

Parameters:
-----------

parallelization:  Type of parallelization used: unroll|serial|openmp

";

%feature("docstring")  casadi::Function::getAlgorithmSize() const  "

Get the number of atomic operations.

";

%feature("docstring")  casadi::Function::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::Callback::get_jacobian(const std::string
&name, const Dict &opts) "

Return Jacobian of all input elements with respect to all output elements.

";

%feature("docstring")  casadi::Callback::alloc_iw(size_t sz_iw, bool
persist=false) "

Allocate work vectors.

";

%feature("docstring")  casadi::Callback::alloc_arg(size_t sz_arg, bool
persist=false) "

Allocate work vectors.

";

%feature("docstring")  casadi::Function::oracle() const  "

Get oracle.

";

%feature("docstring")  casadi::Function::setJacobian(const Function &jac,
int iind=0, int oind=0, bool compact=false) "

[DEPRECATED] Set the Jacobian function of output oind with respect to input
iind NOTE: Does not take ownership, only weak references to the Jacobians
are kept internally

";

%feature("docstring")  casadi::Callback::eval(const std::vector< DM > &arg)
"

Evaluate numerically, temporary matrices and work vectors.

";

%feature("docstring")  casadi::Function::numel_in() const  "

Get number of input elements.

For a particular input or for all of the inputs

";

%feature("docstring")  casadi::Function::numel_in(int ind) const  "

Get number of input elements.

For a particular input or for all of the inputs

";

%feature("docstring")  casadi::Function::numel_in(const std::string &iname)
const  "

Get number of input elements.

For a particular input or for all of the inputs

";

%feature("docstring")  casadi::Function::getAtomicOperation(int k) const  "

Get an atomic operation operator index.

";

%feature("docstring")  casadi::Function::map(const std::string &name, const
std::string &parallelization, int n, const std::vector< int > &reduce_in,
const std::vector< int > &reduce_out, const Dict &opts=Dict()) const  "

Map with reduction A subset of the inputs are non-repeated and a subset of
the outputs summed up.

";

%feature("docstring")  casadi::Function::map(const std::string &name, const
std::string &parallelization, int n, const std::vector< std::string >
&reduce_in, const std::vector< std::string > &reduce_out, const Dict
&opts=Dict()) const  "

Map with reduction A subset of the inputs are non-repeated and a subset of
the outputs summed up.

";

%feature("docstring")  casadi::Function::map(int n, const std::string
&parallelization="serial") const  "

Create a mapped version of this function.

Suppose the function has a signature of:

::

     f: (a, p) -> ( s )
  



The the mapped version has the signature:

::

     F: (A, P) -> (S )
  
      with
          A: horzcat([a0, a1, ..., a_(N-1)])
          P: horzcat([p0, p1, ..., p_(N-1)])
          S: horzcat([s0, s1, ..., s_(N-1)])
      and
          s0 <- f(a0, p0)
          s1 <- f(a1, p1)
          ...
          s_(N-1) <- f(a_(N-1), p_(N-1))
  



Parameters:
-----------

parallelization:  Type of parallelization used: unroll|serial|openmp

";

%feature("docstring")  casadi::Function::print_option(const std::string
&name, std::ostream &stream=casadi::userOut()) const  "

Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::Function::mapaccum(const std::string &name,
int n, int n_accum=1, const Dict &opts=Dict()) const  "

Create a mapaccumulated version of this function.

Suppose the function has a signature of:

::

     f: (x, u) -> (x_next , y )
  



The the mapaccumulated version has the signature:

::

     F: (x0, U) -> (X , Y )
  
      with
          U: horzcat([u0, u1, ..., u_(N-1)])
          X: horzcat([x1, x2, ..., x_N])
          Y: horzcat([y0, y1, ..., y_(N-1)])
  
      and
          x1, y0 <- f(x0, u0)
          x2, y1 <- f(x1, u1)
          ...
          x_N, y_(N-1) <- f(x_(N-1), u_(N-1))
  



";

%feature("docstring")  casadi::Function::mapaccum(const std::string &name,
int n, const std::vector< int > &accum_in, const std::vector< int >
&accum_out, const Dict &opts=Dict()) const  "

Create a mapaccumulated version of this function.

Suppose the function has a signature of:

::

     f: (x, u) -> (x_next , y )
  



The the mapaccumulated version has the signature:

::

     F: (x0, U) -> (X , Y )
  
      with
          U: horzcat([u0, u1, ..., u_(N-1)])
          X: horzcat([x1, x2, ..., x_N])
          Y: horzcat([y0, y1, ..., y_(N-1)])
  
      and
          x1, y0 <- f(x0, u0)
          x2, y1 <- f(x1, u1)
          ...
          x_N, y_(N-1) <- f(x_(N-1), u_(N-1))
  



";

%feature("docstring")  casadi::Function::mapaccum(const std::string &name,
int n, const std::vector< std::string > &accum_in, const std::vector<
std::string > &accum_out, const Dict &opts=Dict()) const  "

Create a mapaccumulated version of this function.

Suppose the function has a signature of:

::

     f: (x, u) -> (x_next , y )
  



The the mapaccumulated version has the signature:

::

     F: (x0, U) -> (X , Y )
  
      with
          U: horzcat([u0, u1, ..., u_(N-1)])
          X: horzcat([x1, x2, ..., x_N])
          Y: horzcat([y0, y1, ..., y_(N-1)])
  
      and
          x1, y0 <- f(x0, u0)
          x2, y1 <- f(x1, u1)
          ...
          x_N, y_(N-1) <- f(x_(N-1), u_(N-1))
  



";

%feature("docstring")  casadi::Function::size1_in(int ind) const  "

Get input dimension.

";

%feature("docstring")  casadi::Function::size1_in(const std::string &iname)
const  "

Get input dimension.

";

%feature("docstring")  casadi::Function::sparsity_in(int ind) const  "

Get sparsity of a given input.

";

%feature("docstring")  casadi::Function::sparsity_in(const std::string
&iname) const  "

Get sparsity of a given input.

";

%feature("docstring")  casadi::Callback::get_reverse(const std::string
&name, int nadj, const std::vector< std::string > &i_names, const
std::vector< std::string > &o_names, const Dict &opts) const  "

Return function that calculates adjoint derivatives reverse(nadj) returns a
cached instance if available, and calls  Function get_reverse(int nadj) if
no cached version is available.

";

%feature("docstring")  casadi::Function::expand() const  "

Expand a function to SX.

";

%feature("docstring")  casadi::Function::expand(const std::string &name,
const Dict &opts=Dict()) const  "

Expand a function to SX.

";

%feature("docstring") casadi::Callback "

Callback function functionality.

This class provides a public API to the FunctionInternal class that can be
subclassed by the user, who is then able to implement the different virtual
method. Note that the Function class also provides a public API to
FunctionInternal, but only allows calling, not being called.

The user is responsible for not deleting this class for the lifetime of the
internal function object.

Joris Gillis, Joel Andersson

C++ includes: callback.hpp ";

%feature("docstring")  casadi::Function::n_out() const  "

Get the number of function outputs.

";

%feature("docstring")  casadi::Function::jacobian_old(int iind, int oind,
bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output Legacy function: To be deprecated in a future
version of CasADi. Exists only for compatibility with Function::jacobian
pre-CasADi 3.2

";

%feature("docstring") casadi::Callback::__hash__ "

Returns a number that is unique for a given Node. If the Object does not
point to any node, \"0\" is returned.

";

%feature("docstring")  casadi::Function::free_mx() const  "

Get all the free variables of the function.

";

%feature("docstring")  casadi::Function::index_in(const std::string &name)
const  "

Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLPSOL_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::generate_lifted(Function
&output_vdef_fcn, Function &output_vinit_fcn) const  "

Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::Function::sparsity_out(int ind) const  "

Get sparsity of a given output.

";

%feature("docstring")  casadi::Function::sparsity_out(const std::string
&iname) const  "

Get sparsity of a given output.

";

%feature("docstring")  casadi::Function::stats(int mem=0) const  "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::Function::name() const  "

Name of the function.

";

%feature("docstring")  casadi::Function::size_out(int ind) const  "

Get output dimension.

";

%feature("docstring")  casadi::Function::size_out(const std::string &oname)
const  "

Get output dimension.

";

%feature("docstring")  casadi::Function::fullJacobian() "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements). Legacy function: To be deprecated.

";

%feature("docstring")  casadi::Function::get_function() const  "

";

%feature("docstring")  casadi::Function::get_function(const std::string
&name) const  "

";

%feature("docstring")  casadi::Callback::get_name_out(int i) "

Get the sparsity of an output This function is called during construction.

";

%feature("docstring")  casadi::Function::mx_out(int ind) const  "

Get symbolic primitives equivalent to the output expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring")  casadi::Function::mx_out(const std::string &oname)
const  "

Get symbolic primitives equivalent to the output expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring")  casadi::Function::mx_out() const  "

Get symbolic primitives equivalent to the output expressions There is no
guarantee that subsequent calls return unique answers.

";


// File: classcasadi_1_1casadi__limits.xml
%feature("docstring") casadi::casadi_limits "

casadi_limits class

The following class, which acts as a complements to the standard
numeric_limits class, allows specifying certain properties of scalar
objects. The template can be specialized for e.g. symbolic scalars Joel
Andersson

C++ includes: casadi_limits.hpp ";


// File: classcasadi_1_1CasadiException.xml
%feature("docstring")  casadi::CasadiException::what() const override "

throw () Display error.

";

%feature("docstring") casadi::CasadiException::CasadiException() "

Default constructor.

";

%feature("docstring") casadi::CasadiException::CasadiException(const
std::string &msg) "

Form message string.

";

%feature("docstring") casadi::CasadiException "

Casadi exception class.

Joel Andersson

C++ includes: exception.hpp ";

%feature("docstring") casadi::CasadiException::~CasadiException "

throw () Destructor.

";


// File: classcasadi_1_1CasadiMeta.xml
%feature("docstring") casadi::CasadiMeta "

Collects global CasADi meta information.

Joris Gillis

C++ includes: casadi_meta.hpp ";


// File: classcasadi_1_1ClangCompiler.xml
%feature("docstring") casadi::ClangCompiler::ClangCompiler(const std::string
&name) "

[INTERNAL]  Constructor.

";

%feature("docstring")  casadi::ClangCompiler::init(const Dict &opts)
override "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::ImporterInternal::read_external(const
std::string &sym, bool inlined, std::istream &file, int &offset) "

[INTERNAL]  Get an external function declaration.

";

%feature("docstring")  casadi::ImporterInternal::body(const std::string
&symname) const  "

[INTERNAL]  Get the function body, if inlined.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::ImporterInternal::repr(std::ostream &stream)
const override "

[INTERNAL]  Print representation.

";

%feature("docstring")  casadi::ClangCompiler::get_options() const override "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::ImporterInternal::print(std::ostream &stream)
const override "

[INTERNAL]  Print.

";

%feature("docstring") casadi::ClangCompiler "

'clang' plugin for Importer

Joris Gillis  Interface to the JIT compiler CLANG

>List of available options

+--------------+-----------------+-----------------------------------------+
|      Id      |      Type       |               Description               |
+==============+=================+=========================================+
| flags        | OT_STRINGVECTOR | Compile flags for the JIT compiler.     |
|              |                 | Default: None                           |
+--------------+-----------------+-----------------------------------------+
| include_path | OT_STRING       | Include paths for the JIT compiler. The |
|              |                 | include directory shipped with CasADi   |
|              |                 | will be automatically appended.         |
+--------------+-----------------+-----------------------------------------+

>List of available options

+--------------+-----------------+--------------------+--------------------+
|      Id      |      Type       |    Description     |      Used in       |
+==============+=================+====================+====================+
| flags        | OT_STRINGVECTOR | Compile flags for  | casadi::ClangCompi |
|              |                 | the JIT compiler.  | ler                |
|              |                 | Default: None      |                    |
+--------------+-----------------+--------------------+--------------------+
| include_path | OT_STRING       | Include paths for  | casadi::ClangCompi |
|              |                 | the JIT compiler.  | ler                |
|              |                 | The include        |                    |
|              |                 | directory shipped  |                    |
|              |                 | with CasADi will   |                    |
|              |                 | be automatically   |                    |
|              |                 | appended.          |                    |
+--------------+-----------------+--------------------+--------------------+
| verbose      | OT_BOOL         | Verbose evaluation | casadi::ImporterIn |
|              |                 | for debugging      | ternal             |
+--------------+-----------------+--------------------+--------------------+

Diagrams
--------



C++ includes: clang_compiler.hpp ";

%feature("docstring")  casadi::ImporterInternal::read_meta(std::istream
&file, int &offset) "

[INTERNAL]  Get meta information.

";

%feature("docstring")  casadi::ImporterInternal::to_text(const std::string
&cmd, int ind=-1) const  "

[INTERNAL]  Get entry as a text.

";

%feature("docstring")  casadi::ImporterInternal::can_have_meta() const  "

[INTERNAL]  Can meta information be read?

";

%feature("docstring")  casadi::ImporterInternal::construct(const Dict &opts)
"

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::ImporterInternal::inlined(const std::string
&symname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::ImporterInternal::has_meta(const std::string
&cmd, int ind=-1) const  "

[INTERNAL]  Does an entry exist?

";

%feature("docstring")  casadi::ImporterInternal::get_meta(const std::string
&cmd, int ind=-1) const  "

[INTERNAL]  Get entry as a text.

";

%feature("docstring")  casadi::ClangCompiler::get_function(const std::string
&symname) "

[INTERNAL]  Get a function pointer for numerical evaluation.

";

%feature("docstring") casadi::ClangCompiler::~ClangCompiler "

[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::ClangCompiler::plugin_name() const override "

[INTERNAL]  Get name of plugin.

";

%feature("docstring")  casadi::ImporterInternal::has_function(const
std::string &symname) const  "

[INTERNAL]  Get a function pointer for numerical evaluation.

";


// File: classcasadi_1_1CodeGenerator.xml
%feature("docstring")  casadi::CodeGenerator::addInclude(const std::string
&new_include, bool relative_path=false, const std::string
&use_ifdef=std::string()) "

Add an include file optionally using a relative path \"...\" instead of an
absolute path <...>

";

%feature("docstring") casadi::CodeGenerator "

Helper class for C code generation.

Joel Andersson

C++ includes: code_generator.hpp ";

%feature("docstring")  casadi::CodeGenerator::dump() const  "

Generate a file, return code as string.

";

%feature("docstring")  casadi::CodeGenerator::add(const Function &f) "

Add a function (name generated)

";

%feature("docstring") casadi::CodeGenerator::CodeGenerator(const std::string
&name, const Dict &opts=Dict()) "

Constructor.

";

%feature("docstring")  casadi::CodeGenerator::generate(const std::string
&prefix="") const  "

Generate file(s) The \"prefix\" argument will be prepended to the generated
files and may be a directory or a file prefix. returns the filename.

";


// File: classcasadi_1_1Collocation.xml
%feature("docstring")  casadi::FunctionInternal::name_in(int ind) const  "

[INTERNAL]  Get input scheme name by index.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< int > &order_in, const std::vector< int >
&order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::FunctionInternal::hessian(int iind, int oind)
"

[INTERNAL]  Return Hessian function.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::tang_mx(int iind=0, int
oind=0) "

[INTERNAL]  Tangent expression.

";

%feature("docstring")  casadi::FixedStepIntegrator::advance(IntegratorMemory
*mem, double t, double *x, double *z, double *q) const override "

[INTERNAL]  Advance solution in time.

";

%feature("docstring")  casadi::FunctionInternal::hess_sx(int iind=0, int
oind=0) "

[INTERNAL]  Hessian expression.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::tangent(int iind, int oind)
"

[INTERNAL]  Return tangent function.

";

%feature("docstring")  casadi::OracleFunction::oracle() const override "

[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::Collocation::Collocation(const std::string
&name, const Function &dae) "

[INTERNAL]  Constructor.

";

%feature("docstring")  casadi::FunctionInternal::matchingRes(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::replaceFwdSeed(const
std::vector< std::vector< M > > &fseed) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::Integrator::get_sparsity_in(int i) override "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::default_in(int ind) const
"

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn, const std::string &fname, bool jit=false) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::FunctionInternal::size_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Collocation::~Collocation "

[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::FunctionInternal::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FunctionInternal::print_free(std::ostream
&stream) const  "

[INTERNAL]  Print free variables.

";

%feature("docstring") casadi::Collocation::_set_work "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::FunctionInternal::jac_sx(int iind=0, int
oind=0, const Dict &opts=Dict()) "

[INTERNAL]  Jacobian expression.

";

%feature("docstring")  casadi::OracleFunction::set_temp(void *mem, const
double **arg, double **res, int *iw, double *w) const override "

[INTERNAL]  Set the work vectors.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsityGen(int iind,
int oind, bool symmetric, int gr_i=1, int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::map_mx(const std::vector<
std::vector< MX > > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::map_mx(const std::vector<
MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::Collocation::plugin_name() const override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::ImplicitFixedStepIntegrator::getExplicitB()
const override "

[INTERNAL]  Get explicit dynamics (backward problem)

";

%feature("docstring")  casadi::FunctionInternal::replaceRes(const
std::vector< M > &res) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring") casadi::Collocation "

'collocation' plugin for Integrator

Fixed-step implicit Runge-Kutta integrator ODE/DAE integrator based on
collocation schemes

The method is still under development

>List of available options

+---------------------------+-----------------+----------------------------+
|            Id             |      Type       |        Description         |
+===========================+=================+============================+
| augmented_options         | OT_DICT         | Options to be passed down  |
|                           |                 | to the augmented           |
|                           |                 | integrator, if one is      |
|                           |                 | constructed.               |
+---------------------------+-----------------+----------------------------+
| collocation_scheme        | OT_STRING       | Collocation scheme:        |
|                           |                 | radau|legendre             |
+---------------------------+-----------------+----------------------------+
| expand                    | OT_BOOL         | Replace MX with SX         |
|                           |                 | expressions in problem     |
|                           |                 | formulation [false]        |
+---------------------------+-----------------+----------------------------+
| grid                      | OT_DOUBLEVECTOR | Time grid                  |
+---------------------------+-----------------+----------------------------+
| interpolation_order       | OT_INT          | Order of the interpolating |
|                           |                 | polynomials                |
+---------------------------+-----------------+----------------------------+
| number_of_finite_elements | OT_INT          | Number of finite elements  |
+---------------------------+-----------------+----------------------------+
| output_t0                 | OT_BOOL         | Output the state at the    |
|                           |                 | initial time               |
+---------------------------+-----------------+----------------------------+
| print_stats               | OT_BOOL         | Print out statistics after |
|                           |                 | integration                |
+---------------------------+-----------------+----------------------------+
| rootfinder                | OT_STRING       | An implicit function       |
|                           |                 | solver                     |
+---------------------------+-----------------+----------------------------+
| rootfinder_options        | OT_DICT         | Options to be passed to    |
|                           |                 | the NLP Solver             |
+---------------------------+-----------------+----------------------------+
| t0                        | OT_DOUBLE       | Beginning of the time      |
|                           |                 | horizon                    |
+---------------------------+-----------------+----------------------------+
| tf                        | OT_DOUBLE       | End of the time horizon    |
+---------------------------+-----------------+----------------------------+

Joel Andersson

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| augmented_option | OT_DICT         | Options to be    | casadi::Implicit |
| s                |                 | passed down to   | FixedStepIntegra |
|                  |                 | the augmented    | tor              |
|                  |                 | integrator, if   |                  |
|                  |                 | one is           |                  |
|                  |                 | constructed.     |                  |
+------------------+-----------------+------------------+------------------+
| collocation_sche | OT_STRING       | Collocation      | casadi::Collocat |
| me               |                 | scheme:          | ion              |
|                  |                 | radau|legendre   |                  |
+------------------+-----------------+------------------+------------------+
| expand           | OT_BOOL         | Replace MX with  | casadi::Implicit |
|                  |                 | SX expressions   | FixedStepIntegra |
|                  |                 | in problem       | tor              |
|                  |                 | formulation      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| grid             | OT_DOUBLEVECTOR | Time grid        | casadi::Implicit |
|                  |                 |                  | FixedStepIntegra |
|                  |                 |                  | tor              |
+------------------+-----------------+------------------+------------------+
| interpolation_or | OT_INT          | Order of the     | casadi::Collocat |
| der              |                 | interpolating    | ion              |
|                  |                 | polynomials      |                  |
+------------------+-----------------+------------------+------------------+
| number_of_finite | OT_INT          | Number of finite | casadi::Implicit |
| _elements        |                 | elements         | FixedStepIntegra |
|                  |                 |                  | tor              |
+------------------+-----------------+------------------+------------------+
| output_t0        | OT_BOOL         | Output the state | casadi::Implicit |
|                  |                 | at the initial   | FixedStepIntegra |
|                  |                 | time             | tor              |
+------------------+-----------------+------------------+------------------+
| print_stats      | OT_BOOL         | Print out        | casadi::Implicit |
|                  |                 | statistics after | FixedStepIntegra |
|                  |                 | integration      | tor              |
+------------------+-----------------+------------------+------------------+
| rootfinder       | OT_STRING       | An implicit      | casadi::Implicit |
|                  |                 | function solver  | FixedStepIntegra |
|                  |                 |                  | tor              |
+------------------+-----------------+------------------+------------------+
| rootfinder_optio | OT_DICT         | Options to be    | casadi::Implicit |
| ns               |                 | passed to the    | FixedStepIntegra |
|                  |                 | NLP Solver       | tor              |
+------------------+-----------------+------------------+------------------+
| t0               | OT_DOUBLE       | Beginning of the | casadi::Implicit |
|                  |                 | time horizon     | FixedStepIntegra |
|                  |                 |                  | tor              |
+------------------+-----------------+------------------+------------------+
| tf               | OT_DOUBLE       | End of the time  | casadi::Implicit |
|                  |                 | horizon          | FixedStepIntegra |
|                  |                 |                  | tor              |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: collocation.hpp ";

%feature("docstring")  casadi::Collocation::setupFG() override "

[INTERNAL]  Setup F and G.

";

%feature("docstring")
casadi::FunctionInternal::generateDeclarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOutput(int k)
const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::Integrator::print_stats(IntegratorMemory
*mem, std::ostream &stream) const  "

[INTERNAL]  Print solver statistics.

";

%feature("docstring")  casadi::OracleFunction::has_function(const
std::string &fname) const override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::generateBody(CodeGenerator
&g) const  "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring") casadi::Collocation::_eval "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring") casadi::Collocation::_eval "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring") casadi::Collocation::_eval "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::getTangent(const
std::string &name, int iind, int oind, const Dict &opts) "

[INTERNAL]  Return tangent function.

";

%feature("docstring")  casadi::Integrator::eval(void *mem, const double
**arg, double **res, int *iw, double *w) const override "

[INTERNAL]  evaluate

";

%feature("docstring")  casadi::Integrator::get_name_in(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::Integrator::get_n_in() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::checkRes(const std::vector<
M > &res) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, int *iw, SXElem *w, int mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::FunctionInternal::n_in() const  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::checkInputs() const  "

[INTERNAL]  Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::OracleFunction::generate_dependencies(const
std::string &fname, const Dict &opts) const override "

[INTERNAL]  Export / Generate C code for the generated functions.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::setJacobian(const Function
&jac, int iind, int oind, bool compact) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::OracleFunction::expand() "

[INTERNAL] ";

%feature("docstring")  casadi::FixedStepIntegrator::free_memory(void *mem)
const override "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::set_jac_sparsity(const
Sparsity &sp, int iind, int oind, bool compact) "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::Integrator::x() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::name() const  "

[INTERNAL]  Name of the function.

";

%feature("docstring")  casadi::FunctionInternal::n_mem() const  "

[INTERNAL]  Maximum number of memory objects.

";

%feature("docstring")  casadi::Integrator::has_sprev() const override "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Collocation::_get_stats "

[INTERNAL]  Get all statistics

";

%feature("docstring")  casadi::FunctionInternal::generateMeta(CodeGenerator
&g, const std::string &fname) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FixedStepIntegrator::init_memory(void *mem)
const override "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::addShorthand(CodeGenerator
&g, const std::string &name) const  "

[INTERNAL]  Generate shorthand macro.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Collocation::_set_temp "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::FunctionInternal::gradient(int iind, int
oind) "

[INTERNAL]  Return gradient function.

";

%feature("docstring")  casadi::FunctionInternal::addDependency(CodeGenerator
&g) const  "

[INTERNAL]  Add a dependent function.

";

%feature("docstring") casadi::Collocation::_call "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring") casadi::Collocation::_call "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::Integrator::getDerivativeOptions(bool fwd)
const  "

[INTERNAL]  Set solver specific options to generated augmented integrators.

";

%feature("docstring")  casadi::Integrator::aug_adj(int nadj) const  "

[INTERNAL]  Generate a augmented DAE system with nadj adjoint sensitivities.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::hasDerivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::OracleFunction::print_fstats(const
OracleMemory *m) const  "

[INTERNAL]  Print statistics.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::getPartition(int iind, int
oind, Sparsity &D1, Sparsity &D2, bool compact, bool symmetric, bool
allow_forward, bool allow_reverse) "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::jacobian(int iind, int
oind, bool compact, bool symmetric) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::fullJacobian() "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::print(std::ostream &stream)
const override "

[INTERNAL]  Print.

";

%feature("docstring")  casadi::FunctionInternal::tang_sx(int iind=0, int
oind=0) "

[INTERNAL]  Tangent expression.

";

%feature("docstring")  casadi::FunctionInternal::getJacobian(const
std::string &name, int iind, int oind, bool compact, bool symmetric, const
Dict &opts) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::OracleFunction::calc_function(OracleMemory
*m, const std::string &fcn, const double *const *arg=0) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::Integrator::get_forward(const std::string
&name, int nfwd, const std::vector< std::string > &i_names, const
std::vector< std::string > &o_names, const Dict &opts) const override "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInputReal(int k)
const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::Integrator::sp_jac_dae() "

[INTERNAL]  Create sparsity pattern of the extended Jacobian (forward
problem)

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(int ind) const
"

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(const
std::string &iname) const  "

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::FunctionInternal::getGradient(const
std::string &name, int iind, int oind, const Dict &opts) "

[INTERNAL]  Return gradient function.

";

%feature("docstring")  casadi::FunctionInternal::repr(std::ostream &stream)
const override "

[INTERNAL]  Print.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::Integrator::z() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::reverse(int nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::matchingArg(const
std::vector< M > &arg, bool hcat=false) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::Collocation::_setup "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::name_out(int ind) const  "

[INTERNAL]  Get output scheme name by index.

";

%feature("docstring")  casadi::Integrator::p() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::q() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::t() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::type_name() const override "

[INTERNAL]  Get type name.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::simple(const double *arg,
double *res) const  "

[INTERNAL]  Evaluate numerically, simplied syntax.

";

%feature("docstring")  casadi::FixedStepIntegrator::alloc_memory() const
override "

[INTERNAL]  Create memory block.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")
casadi::FunctionInternal::generateFunction(CodeGenerator &g, const
std::string &fname, bool decl_static) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::FunctionInternal::checkArg(const std::vector<
M > &arg, bool hcat=false) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::Integrator::setStopTime(IntegratorMemory
*mem, double tf) const  "

[INTERNAL]  Set stop time for the integration.

";

%feature("docstring")  casadi::FunctionInternal::simplifiedCall() const  "

[INTERNAL]  Use simplified signature.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(int nadj) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::Integrator::sp_rev(bvec_t **arg, bvec_t
**res, int *iw, bvec_t *w, int mem) const override "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::Integrator::get_n_forward() const override "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOperation(int k)
const  "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::Integrator::rx() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::rz() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Collocation::get_options() const override "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::Integrator::rq() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::rp() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(int iind, int
oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(int iind,
int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::Integrator::sp_jac_rdae() "

[INTERNAL]  Create sparsity pattern of the extended Jacobian (backward
problem)

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::OracleFunction::create_function(const
std::string &fname, const std::vector< std::string > &s_in, const
std::vector< std::string > &s_out, const Function::AuxOut
&aux=Function::AuxOut()) "

[INTERNAL]  Create an oracle function

";

%feature("docstring")  casadi::FunctionInternal::getWorkSize() const  "

[INTERNAL]  Get the length of the work vector.

";

%feature("docstring")  casadi::OracleFunction::get_stats(void *mem) const
override "

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::grad_mx(int iind=0, int
oind=0) "

[INTERNAL]  Gradient expression.

";

%feature("docstring")  casadi::OracleFunction::get_function() const override
"

[INTERNAL] ";

%feature("docstring")  casadi::OracleFunction::get_function(const
std::string &name) const override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::size1_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::eval_name() const  "

[INTERNAL]  Get name of the evaluation function.

";

%feature("docstring")  casadi::ImplicitFixedStepIntegrator::getExplicit()
const override "

[INTERNAL]  Get explicit dynamics.

";

%feature("docstring")  casadi::FunctionInternal::sx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::Collocation::init(const Dict &opts) override
"

[INTERNAL]  Initialize stage.

";

%feature("docstring")  casadi::FunctionInternal::hasFullJacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(int nadj,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::OracleFunction::jit_dependencies(const
std::string &fname) override "

[INTERNAL]  JIT for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::verbose() const  "

[INTERNAL]  Verbose mode?

";

%feature("docstring")  casadi::OracleFunction::finalize(const Dict &opts)
override "

[INTERNAL]  Finalize initialization.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::Collocation::resetB(IntegratorMemory *mem,
double t, const double *rx, const double *rz, const double *rp) const
override "

[INTERNAL]  Reset the backward problem and take time to tf.

";

%feature("docstring")  casadi::FunctionInternal::replaceAdjSeed(const
std::vector< std::vector< M > > &aseed) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::Integrator::get_n_out() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::Integrator::get_sparsity_out(int i) override
"

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::Integrator::get_n_reverse() const override "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::OracleFunction::monitored(const std::string
&name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::getAlgorithmSize() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::symbolicFwdSeed(int nfwd,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::size_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::Integrator::sp_fwd(const bvec_t **arg, bvec_t
**res, int *iw, bvec_t *w, int mem) const override "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::Integrator::aug_fwd(int nfwd) const  "

[INTERNAL]  Generate a augmented DAE system with nfwd forward sensitivities.

";

%feature("docstring")  casadi::FunctionInternal::symbolicOutput(const
std::vector< MX > &arg) "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInput(int k) const
"

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::replaceArg(const
std::vector< M > &arg, bool hcat=false) const  "

[INTERNAL]  Replace 0-by-0 inputs.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::log(const std::string &msg)
const  "

[INTERNAL]  Log the status of the solver.

";

%feature("docstring")  casadi::FunctionInternal::log(const std::string &fcn,
const std::string &msg) const  "

[INTERNAL]  Log the status of the solver, function given.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::construct(const Dict &opts)
"

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::FunctionInternal::forward(int nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::jac_mx(int iind=0, int
oind=0, const Dict &opts=Dict()) "

[INTERNAL]  Jacobian expression.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(int nfwd) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(int ind) const
"

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(const
std::string &iname) const  "

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::FunctionInternal::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::FunctionInternal::size1_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::grad_sx(int iind=0, int
oind=0) "

[INTERNAL]  Gradient expression.

";

%feature("docstring")  casadi::FunctionInternal::n_out() const  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, int order, bool
tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::getHessian(int iind, int
oind) "

[INTERNAL]  Return Hessian function.

";

%feature("docstring")  casadi::Integrator::has_spfwd() const override "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::Integrator::get_reverse(const std::string
&name, int nadj, const std::vector< std::string > &i_names, const
std::vector< std::string > &o_names, const Dict &opts) const override "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::FixedStepIntegrator::retreat(IntegratorMemory
*mem, double t, double *rx, double *rz, double *rq) const override "

[INTERNAL]  Retreat solution in time.

";

%feature("docstring")  casadi::Integrator::get_name_out(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::getFullJacobian(const
std::string &name, const std::vector< std::string > &i_names, const
std::vector< std::string > &o_names, const Dict &opts) "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::Collocation::reset(IntegratorMemory *mem,
double t, const double *x, const double *z, const double *p) const override
"

[INTERNAL]  Reset the forward problem.

";

%feature("docstring")  casadi::FunctionInternal::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::clear_memory() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";


// File: classcasadi_1_1Concat.xml


// File: classcasadi_1_1Conic.xml
%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::FunctionInternal::hess_sx(int iind=0, int
oind=0) "

[INTERNAL]  Hessian expression.

";

%feature("docstring")  casadi::FunctionInternal::getPartition(int iind, int
oind, Sparsity &D1, Sparsity &D2, bool compact, bool symmetric, bool
allow_forward, bool allow_reverse) "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::Conic::_setup "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::FunctionInternal::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::sx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(int ind) const
"

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(const
std::string &iname) const  "

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::FunctionInternal::jac_sx(int iind=0, int
oind=0, const Dict &opts=Dict()) "

[INTERNAL]  Jacobian expression.

";

%feature("docstring")  casadi::Conic::get_n_in() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, int order, bool
tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring") casadi::Conic::_call "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring") casadi::Conic::_call "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::Conic::generateNativeCode(std::ostream &file)
const  "

[INTERNAL]  Generate native code in the interfaced language for debugging

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")
casadi::FunctionInternal::generateFunction(CodeGenerator &g, const
std::string &fname, bool decl_static) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::eval(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::name_out(int ind) const  "

[INTERNAL]  Get output scheme name by index.

";

%feature("docstring")  casadi::FunctionInternal::addDependency(CodeGenerator
&g) const  "

[INTERNAL]  Add a dependent function.

";

%feature("docstring")  casadi::FunctionInternal::getTangent(const
std::string &name, int iind, int oind, const Dict &opts) "

[INTERNAL]  Return tangent function.

";

%feature("docstring")  casadi::FunctionInternal::free_memory(void *mem)
const  "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::get_reverse(const
std::string &name, int nadj, const std::vector< std::string > &i_names,
const std::vector< std::string > &o_names, const Dict &opts) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::finalize(const Dict &opts)
"

[INTERNAL]  Finalize the object creation This function, which visits the
class hierarchy in reverse order is run after init() has been completed.

";

%feature("docstring")  casadi::FunctionInternal::grad_mx(int iind=0, int
oind=0) "

[INTERNAL]  Gradient expression.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(int iind, int
oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< int > &order_in, const std::vector< int >
&order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, int *iw, SXElem *w, int mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(int nadj) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::repr(std::ostream &stream)
const override "

[INTERNAL]  Print.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::matchingArg(const
std::vector< M > &arg, bool hcat=false) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::Conic::get_n_out() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::get_forward(const
std::string &name, int nfwd, const std::vector< std::string > &i_names,
const std::vector< std::string > &o_names, const Dict &opts) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::set_temp(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::getJacobian(const
std::string &name, int iind, int oind, bool compact, bool symmetric, const
Dict &opts) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::Conic::get_sparsity_out(int i) override "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::setJacobian(const Function
&jac, int iind, int oind, bool compact) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::jacobian(int iind, int
oind, bool compact, bool symmetric) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(int nadj,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::Conic::init(const Dict &opts) override "

[INTERNAL]  Initialize Initialize and make the object ready for setting
arguments and evaluation. This method is typically called after setting
options but before evaluating. If passed to another class (in the
constructor), this class should invoke this function when initialized.

";

%feature("docstring")  casadi::FunctionInternal::clear_memory() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOutput(int k)
const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::sp_rev(bvec_t **arg, bvec_t
**res, int *iw, bvec_t *w, int mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::tang_mx(int iind=0, int
oind=0) "

[INTERNAL]  Tangent expression.

";

%feature("docstring")  casadi::Conic::integer_support() const  "

[INTERNAL]  Can discrete variables be treated.

";

%feature("docstring")  casadi::FunctionInternal::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring")  casadi::FunctionInternal::alloc_memory() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::FunctionInternal::fullJacobian() "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::Conic::get_name_in(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring") casadi::Conic::~Conic "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::FunctionInternal::generateBody(CodeGenerator
&g) const  "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring")  casadi::FunctionInternal::addShorthand(CodeGenerator
&g, const std::string &name) const  "

[INTERNAL]  Generate shorthand macro.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::PluginInterface< Conic  >::plugin_name()
const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::checkArg(const std::vector<
M > &arg, bool hcat=false) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::Conic::Conic(const std::string &name, const
std::map< std::string, Sparsity > &st) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::getHessian(int iind, int
oind) "

[INTERNAL]  Return Hessian function.

";

%feature("docstring")  casadi::FunctionInternal::eval_name() const  "

[INTERNAL]  Get name of the evaluation function.

";

%feature("docstring") casadi::Conic::_set_temp "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::getWorkSize() const  "

[INTERNAL]  Get the length of the work vector.

";

%feature("docstring")  casadi::FunctionInternal::name_in(int ind) const  "

[INTERNAL]  Get input scheme name by index.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(int iind,
int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(int nfwd) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::jac_mx(int iind=0, int
oind=0, const Dict &opts=Dict()) "

[INTERNAL]  Jacobian expression.

";

%feature("docstring")  casadi::FunctionInternal::sx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::replaceFwdSeed(const
std::vector< std::vector< M > > &fseed) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")
casadi::FunctionInternal::generateDeclarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::reverse(int nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::verbose() const  "

[INTERNAL]  Verbose mode?

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring") casadi::Conic::_eval "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring") casadi::Conic::_eval "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring") casadi::Conic::_eval "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::tangent(int iind, int oind)
"

[INTERNAL]  Return tangent function.

";

%feature("docstring")  casadi::FunctionInternal::checkRes(const std::vector<
M > &res) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

";

%feature("docstring")  casadi::Conic::checkInputs(const double *lbx, const
double *ubx, const double *lba, const double *uba) const  "

[INTERNAL]  Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::FunctionInternal::checkInputs() const  "

[INTERNAL]  Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::FunctionInternal::gradient(int iind, int
oind) "

[INTERNAL]  Return gradient function.

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::name() const  "

[INTERNAL]  Name of the function.

";

%feature("docstring")  casadi::FunctionInternal::grad_sx(int iind=0, int
oind=0) "

[INTERNAL]  Gradient expression.

";

%feature("docstring")  casadi::Conic::default_in(int ind) const override "

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::n_out() const  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::tang_sx(int iind=0, int
oind=0) "

[INTERNAL]  Tangent expression.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::print_free(std::ostream
&stream) const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::FunctionInternal::get_function() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::replaceArg(const
std::vector< M > &arg, bool hcat=false) const  "

[INTERNAL]  Replace 0-by-0 inputs.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::FunctionInternal::map_mx(const std::vector<
std::vector< MX > > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::map_mx(const std::vector<
MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::symbolicFwdSeed(int nfwd,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::construct(const Dict &opts)
"

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::FunctionInternal::hasDerivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::size2_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Conic "

Internal class.

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| discrete         | OT_BOOLVECTOR   | Indicates which  | casadi::Conic    |
|                  |                 | of the variables |                  |
|                  |                 | are discrete,    |                  |
|                  |                 | i.e. integer-    |                  |
|                  |                 | valued           |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Custom input     | casadi::Function |
|                  |                 | scheme           | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Custom output    | casadi::Function |
|                  |                 | scheme           | Internal         |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: conic_impl.hpp ";

%feature("docstring")  casadi::FunctionInternal::size1_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::matchingRes(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::getGradient(const
std::string &name, int iind, int oind, const Dict &opts) "

[INTERNAL]  Return gradient function.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(int ind) const
"

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(const
std::string &iname) const  "

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::FunctionInternal::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInputReal(int k)
const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::FunctionInternal::print(std::ostream &stream)
const override "

[INTERNAL]  Print.

";

%feature("docstring")  casadi::FunctionInternal::get_n_reverse() const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::Conic::type_name() const override "

[INTERNAL]  Get type name.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::sp_fwd(const bvec_t **arg,
bvec_t **res, int *iw, bvec_t *w, int mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::getAlgorithmSize() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::get_stats(void *mem) const
"

[INTERNAL]  Get all statistics

";

%feature("docstring")  casadi::FunctionInternal::jit_dependencies(const
std::string &fname) "

[INTERNAL]   Jit dependencies.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::FunctionInternal::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::Conic::get_name_out(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInput(int k) const
"

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsityGen(int iind,
int oind, bool symmetric, int gr_i=1, int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FunctionInternal::n_mem() const  "

[INTERNAL]  Maximum number of memory objects.

";

%feature("docstring")  casadi::FunctionInternal::getFullJacobian(const
std::string &name, const std::vector< std::string > &i_names, const
std::vector< std::string > &o_names, const Dict &opts) "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::simple(const double *arg,
double *res) const  "

[INTERNAL]  Evaluate numerically, simplied syntax.

";

%feature("docstring")  casadi::FunctionInternal::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::FunctionInternal::size_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::Conic::get_options() const override "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::FunctionInternal::replaceRes(const
std::vector< M > &res) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::FunctionInternal::set_jac_sparsity(const
Sparsity &sp, int iind, int oind, bool compact) "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::Conic::print_fstats(const ConicMemory *m)
const  "

[INTERNAL]  Print statistics.

";

%feature("docstring")  casadi::FunctionInternal::n_in() const  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::Conic::get_sparsity_in(int i) override "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring") casadi::Conic::_get_stats "

[INTERNAL]  Get all statistics

";

%feature("docstring")  casadi::FunctionInternal::get_n_forward() const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::FunctionInternal::generateMeta(CodeGenerator
&g, const std::string &fname) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::FunctionInternal::replaceAdjSeed(const
std::vector< std::vector< M > > &aseed) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::size_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Conic::_set_work "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::hasFullJacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::log(const std::string &msg)
const  "

[INTERNAL]  Log the status of the solver.

";

%feature("docstring")  casadi::FunctionInternal::log(const std::string &fcn,
const std::string &msg) const  "

[INTERNAL]  Log the status of the solver, function given.

";

%feature("docstring")  casadi::FunctionInternal::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::init_memory(void *mem)
const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::forward(int nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::hessian(int iind, int oind)
"

[INTERNAL]  Return Hessian function.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOperation(int k)
const  "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::simplifiedCall() const  "

[INTERNAL]  Use simplified signature.

";

%feature("docstring")  casadi::FunctionInternal::symbolicOutput(const
std::vector< MX > &arg) "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";


// File: classcasadi_1_1Constant.xml


// File: classcasadi_1_1ConstantDM.xml


// File: classcasadi_1_1ConstantMX.xml


// File: classcasadi_1_1ConstantSX.xml


// File: classcasadi_1_1DaeBuilder.xml


/*  Variables and equations  */

/* Public data members

*/

/*  Symbolic modeling  */

/* Formulate an optimal control problem

*/

/*  Manipulation  */

/* Reformulate the dynamic optimization problem.

*/

/*  Import and export  */ %feature("docstring")
casadi::DaeBuilder::add_s(const std::string &name=std::string(), int n=1) "

Add a implicit state.

";

%feature("docstring")  casadi::DaeBuilder::sanity_check() const  "

Check if dimensions match.

";

%feature("docstring")  casadi::DaeBuilder::set_unit(const std::string &name,
const std::string &val) "

Set the unit for a component.

";

%feature("docstring") casadi::DaeBuilder::DaeBuilder() "

Default constructor.

";

%feature("docstring")  casadi::DaeBuilder::sort_dae() "

Sort the DAE and implicitly defined states.

";

%feature("docstring")  casadi::DaeBuilder::start(const std::string &name,
bool normalized=false) const  "

Get the (optionally normalized) value at time 0 by name.

";

%feature("docstring")  casadi::DaeBuilder::start(const MX &var, bool
normalized=false) const  "

Get the (optionally normalized) value(s) at time 0 by expression.

";

%feature("docstring")  casadi::DaeBuilder::add_variable(const std::string
&name, const Variable &var) "

Add a variable.

";

%feature("docstring")  casadi::DaeBuilder::add_variable(const std::string
&name, int n=1) "

Add a new variable: returns corresponding symbolic expression.

";

%feature("docstring")  casadi::DaeBuilder::add_variable(const std::string
&name, const Sparsity &sp) "

Add a new variable: returns corresponding symbolic expression.

";

%feature("docstring")  casadi::DaeBuilder::min(const std::string &name, bool
normalized=false) const  "

Get the lower bound by name.

";

%feature("docstring")  casadi::DaeBuilder::min(const MX &var, bool
normalized=false) const  "

Get the lower bound(s) by expression.

";

%feature("docstring")  casadi::DaeBuilder::add_quad(const MX &new_quad,
const std::string &name=std::string()) "

Add a quadrature equation.

";

%feature("docstring")  casadi::DaeBuilder::nominal(const std::string &name)
const  "

Get the nominal value by name.

";

%feature("docstring")  casadi::DaeBuilder::nominal(const MX &var) const  "

Get the nominal value(s) by expression.

";

%feature("docstring")  casadi::DaeBuilder::max(const std::string &name, bool
normalized=false) const  "

Get the upper bound by name.

";

%feature("docstring")  casadi::DaeBuilder::max(const MX &var, bool
normalized=false) const  "

Get the upper bound(s) by expression.

";

%feature("docstring")  casadi::DaeBuilder::make_semi_explicit() "

Transform the implicit DAE to a semi-explicit DAE.

";

%feature("docstring")  casadi::DaeBuilder::set_derivative_start(const
std::string &name, double val, bool normalized=false) "

Set the (optionally normalized) derivative value at time 0 by name.

";

%feature("docstring")  casadi::DaeBuilder::set_derivative_start(const MX
&var, const std::vector< double > &val, bool normalized=false) "

Set the (optionally normalized) derivative value(s) at time 0 by expression.

";

%feature("docstring")  casadi::PrintableObject< DaeBuilder
>::getDescription() const "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::DaeBuilder::add_lc(const std::string &name,
const std::vector< std::string > &f_out) "

Add a named linear combination of output expressions.

";

%feature("docstring")  casadi::DaeBuilder::sort_d() "

Sort dependent parameters.

";

%feature("docstring")  casadi::DaeBuilder::print(std::ostream
&stream=casadi::userOut(), bool trailing_newline=true) const  "

Print description.

";

%feature("docstring")  casadi::DaeBuilder::sort_alg() "

Sort the algebraic equations and algebraic states.

";

%feature("docstring")  casadi::DaeBuilder::add_dae(const MX &new_dae, const
std::string &name=std::string()) "

Add a differential-algebraic equation.

";

%feature("docstring")  casadi::PrintableObject< DaeBuilder
>::getRepresentation() const "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::DaeBuilder::make_explicit() "

Transform the implicit DAE or semi-explicit DAE into an explicit ODE.

";

%feature("docstring") casadi::DaeBuilder "

An initial-value problem in differential-algebraic equations.

Independent variables:
======================





::

  t:      time
  



Time-continuous variables:
==========================





::

  x:      states defined by ODE
  s:      implicitly defined states
  z:      algebraic variables
  u:      control signals
  q:      quadrature states
  y:      outputs
  



Time-constant variables:
========================





::

  p:      free parameters
  d:      dependent parameters
  



Dynamic constraints (imposed everywhere):
=========================================





::

  ODE                    \\\\dot{x} ==  ode(t, x, s, z, u, p, d)
  DAE or implicit ODE:         0 ==  dae(t, x, s, z, u, p, d, sdot)
  algebraic equations:         0 ==  alg(t, x, s, z, u, p, d)
  quadrature equations:  \\\\dot{q} == quad(t, x, s, z, u, p, d)
  dependent parameters:        d == ddef(t, x, s, z, u, p, d)
  output equations:            y == ydef(t, x, s, z, u, p, d)
  



Point constraints (imposed pointwise):
======================================





::

  Initial equations:           0 == init(t, x, s, z, u, p, d, sdot)
  



Joel Andersson

C++ includes: dae_builder.hpp ";

%feature("docstring")  casadi::DaeBuilder::add_q(const std::string
&name=std::string(), int n=1) "

Add a new quadrature state.

";

%feature("docstring")  casadi::DaeBuilder::add_p(const std::string
&name=std::string(), int n=1) "

Add a new parameter

";

%feature("docstring")  casadi::DaeBuilder::add_u(const std::string
&name=std::string(), int n=1) "

Add a new control.

";

%feature("docstring")  casadi::DaeBuilder::set_guess(const std::string
&name, double val, bool normalized=false) "

Set the initial guess by name.

";

%feature("docstring")  casadi::DaeBuilder::set_guess(const MX &var, const
std::vector< double > &val, bool normalized=false) "

Set the initial guess(es) by expression.

";

%feature("docstring")  casadi::DaeBuilder::add_z(const std::string
&name=std::string(), int n=1) "

Add a new algebraic variable.

";

%feature("docstring")  casadi::DaeBuilder::add_y(const MX &new_ydef, const
std::string &name=std::string()) "

Add a new output.

";

%feature("docstring")  casadi::DaeBuilder::add_x(const std::string
&name=std::string(), int n=1) "

Add a new differential state.

";

%feature("docstring")  casadi::DaeBuilder::eliminate_quad() "

Eliminate quadrature states and turn them into ODE states.

";

%feature("docstring")  casadi::DaeBuilder::derivative_start(const
std::string &name, bool normalized=false) const  "

Get the (optionally normalized) derivative value at time 0 by name.

";

%feature("docstring")  casadi::DaeBuilder::derivative_start(const MX &var,
bool normalized=false) const  "

Get the (optionally normalized) derivative value(s) at time 0 by expression.

";

%feature("docstring")  casadi::DaeBuilder::set_nominal(const std::string
&name, double val) "

Set the nominal value by name.

";

%feature("docstring")  casadi::DaeBuilder::set_nominal(const MX &var, const
std::vector< double > &val) "

Set the nominal value(s) by expression.

";

%feature("docstring")  casadi::DaeBuilder::parse_fmi(const std::string
&filename) "

Import existing problem from FMI/XML

";

%feature("docstring")  casadi::DaeBuilder::add_d(const MX &new_ddef, const
std::string &name=std::string()) "

Add a new dependent parameter.

";

%feature("docstring")  casadi::DaeBuilder::split_dae() "

Identify and separate the algebraic variables and equations in the DAE.

";

%feature("docstring")  casadi::DaeBuilder::add_alg(const MX &new_alg, const
std::string &name=std::string()) "

Add an algebraic equation.

";

%feature("docstring")  casadi::DaeBuilder::repr(std::ostream
&stream=casadi::userOut(), bool trailing_newline=true) const  "

Print representation.

";

%feature("docstring")  casadi::DaeBuilder::create(const std::string &fname,
const std::vector< std::string > &s_in, const std::vector< std::string >
&s_out) const  "

Construct a function object.

";

%feature("docstring")  casadi::DaeBuilder::guess(const std::string &name,
bool normalized=false) const  "

Get the initial guess by name.

";

%feature("docstring")  casadi::DaeBuilder::guess(const MX &var, bool
normalized=false) const  "

Get the initial guess(es) by expression.

";

%feature("docstring")  casadi::DaeBuilder::variable(const std::string &name)
"

Access a variable by name

";

%feature("docstring")  casadi::DaeBuilder::variable(const std::string &name)
const  "

Access a variable by name

";

%feature("docstring")  casadi::DaeBuilder::set_max(const std::string &name,
double val, bool normalized=false) "

Set the upper bound by name.

";

%feature("docstring")  casadi::DaeBuilder::set_max(const MX &var, const
std::vector< double > &val, bool normalized=false) "

Set the upper bound(s) by expression.

";

%feature("docstring")  casadi::DaeBuilder::eliminate_alg() "

Eliminate algebraic variables and equations transforming them into outputs.

";

%feature("docstring")  casadi::DaeBuilder::set_min(const std::string &name,
double val, bool normalized=false) "

Set the lower bound by name.

";

%feature("docstring")  casadi::DaeBuilder::set_min(const MX &var, const
std::vector< double > &val, bool normalized=false) "

Set the lower bound(s) by expression.

";

%feature("docstring")  casadi::DaeBuilder::set_start(const std::string
&name, double val, bool normalized=false) "

Set the (optionally normalized) value at time 0 by name.

";

%feature("docstring")  casadi::DaeBuilder::set_start(const MX &var, const
std::vector< double > &val, bool normalized=false) "

Set the (optionally normalized) value(s) at time 0 by expression.

";

%feature("docstring")  casadi::DaeBuilder::unit(const std::string &name)
const  "

Get the unit for a component.

";

%feature("docstring")  casadi::DaeBuilder::unit(const MX &var) const  "

Get the unit given a vector of symbolic variables (all units must be
identical)

";

%feature("docstring")  casadi::DaeBuilder::scale_variables() "

Scale the variables.

";

%feature("docstring")  casadi::DaeBuilder::split_d() "

Eliminate interdependencies amongst dependent parameters.

";

%feature("docstring")  casadi::DaeBuilder::eliminate_d() "

Eliminate dependent parameters.

";

%feature("docstring")  casadi::DaeBuilder::der(const std::string &name)
const  "

Get a derivative expression by name.

";

%feature("docstring")  casadi::DaeBuilder::der(const MX &var) const  "

Get a derivative expression by non-differentiated expression.

";

%feature("docstring")  casadi::DaeBuilder::scale_equations() "

Scale the implicit equations.

";

%feature("docstring")  casadi::DaeBuilder::add_ode(const MX &new_ode, const
std::string &name=std::string()) "

Add an ordinary differential equation.

";


// File: classcasadi_1_1DenseMultiplication.xml


// File: classcasadi_1_1DenseTranspose.xml


// File: classcasadi_1_1Determinant.xml


// File: classcasadi_1_1Diagcat.xml


// File: classcasadi_1_1Diagsplit.xml


// File: classcasadi_1_1DllLibrary.xml
%feature("docstring")  casadi::ImporterInternal::construct(const Dict &opts)
"

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::DllLibrary::DllLibrary(const std::string
&bin_name) "

[INTERNAL] ";

%feature("docstring")  casadi::ImporterInternal::print(std::ostream &stream)
const override "

[INTERNAL]  Print.

";

%feature("docstring") casadi::DllLibrary "

Dynamically linked library.

Joel Andersson

>List of available options

+---------+---------+---------------------------------+--------------------+
|   Id    |  Type   |           Description           |      Used in       |
+=========+=========+=================================+====================+
| verbose | OT_BOOL | Verbose evaluation  for         | casadi::DllLibrary |
|         |         | debugging                       |                    |
+---------+---------+---------------------------------+--------------------+

Diagrams
--------



C++ includes: importer_internal.hpp ";

%feature("docstring")  casadi::DllLibrary::get_function(const std::string
&symname) override "

[INTERNAL]  Get a function pointer for numerical evaluation.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::ImporterInternal::get_options() const  "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::ImporterInternal::read_meta(std::istream
&file, int &offset) "

[INTERNAL]  Get meta information.

";

%feature("docstring")  casadi::DllLibrary::can_have_meta() const override "

[INTERNAL]  Can meta information be read?

";

%feature("docstring")  casadi::ImporterInternal::plugin_name() const
override "

[INTERNAL]  Queery plugin name.

";

%feature("docstring")  casadi::ImporterInternal::to_text(const std::string
&cmd, int ind=-1) const  "

[INTERNAL]  Get entry as a text.

";

%feature("docstring")  casadi::ImporterInternal::get_meta(const std::string
&cmd, int ind=-1) const  "

[INTERNAL]  Get entry as a text.

";

%feature("docstring")  casadi::ImporterInternal::read_external(const
std::string &sym, bool inlined, std::istream &file, int &offset) "

[INTERNAL]  Get an external function declaration.

";

%feature("docstring")  casadi::ImporterInternal::body(const std::string
&symname) const  "

[INTERNAL]  Get the function body, if inlined.

";

%feature("docstring")  casadi::ImporterInternal::init(const Dict &opts) "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::ImporterInternal::repr(std::ostream &stream)
const override "

[INTERNAL]  Print representation.

";

%feature("docstring") casadi::DllLibrary::~DllLibrary "

[INTERNAL] ";

%feature("docstring")  casadi::ImporterInternal::inlined(const std::string
&symname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::ImporterInternal::has_function(const
std::string &symname) const  "

[INTERNAL]  Get a function pointer for numerical evaluation.

";

%feature("docstring")  casadi::ImporterInternal::has_meta(const std::string
&cmd, int ind=-1) const  "

[INTERNAL]  Does an entry exist?

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";


// File: classcasadi_1_1Dot.xml


// File: classcasadi_1_1Dple.xml
%feature("docstring") casadi::Dple::_set_work "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::getFullJacobian(const
std::string &name, const std::vector< std::string > &i_names, const
std::vector< std::string > &o_names, const Dict &opts) "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::fullJacobian() "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::eval(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(int nfwd) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::sx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::generateMeta(CodeGenerator
&g, const std::string &fname) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FunctionInternal::get_function() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::print(std::ostream &stream)
const override "

[INTERNAL]  Print.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::set_temp(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(int iind, int
oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::getWorkSize() const  "

[INTERNAL]  Get the length of the work vector.

";

%feature("docstring")  casadi::FunctionInternal::getAlgorithmSize() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::forward(int nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(int iind,
int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::getGradient(const
std::string &name, int iind, int oind, const Dict &opts) "

[INTERNAL]  Return gradient function.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::repr(std::ostream &stream)
const override "

[INTERNAL]  Print.

";

%feature("docstring") casadi::Dple "

Internal class.

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| const_dim        | OT_BOOL         | Assume constant  | casadi::Dple     |
|                  |                 | dimension of P   |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| eps_unstable     | OT_DOUBLE       | A margin for     | casadi::Dple     |
|                  |                 | unstability      |                  |
|                  |                 | detection        |                  |
+------------------+-----------------+------------------+------------------+
| error_unstable   | OT_BOOL         | Throw an         | casadi::Dple     |
|                  |                 | exception when   |                  |
|                  |                 | it is detected   |                  |
|                  |                 | that             |                  |
|                  |                 | Product(A_i,     |                  |
|                  |                 | i=N..1)has       |                  |
|                  |                 | eigenvalues      |                  |
|                  |                 | greater than     |                  |
|                  |                 | 1-eps_unstable   |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Custom input     | casadi::Function |
|                  |                 | scheme           | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Custom output    | casadi::Function |
|                  |                 | scheme           | Internal         |
+------------------+-----------------+------------------+------------------+
| pos_def          | OT_BOOL         | Assume P         | casadi::Dple     |
|                  |                 | positive         |                  |
|                  |                 | definite         |                  |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: dple_impl.hpp ";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::tang_sx(int iind=0, int
oind=0) "

[INTERNAL]  Tangent expression.

";

%feature("docstring")  casadi::FunctionInternal::name_in(int ind) const  "

[INTERNAL]  Get input scheme name by index.

";

%feature("docstring")  casadi::FunctionInternal::get_stats(void *mem) const
"

[INTERNAL]  Get all statistics

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::Dple::get_n_forward() const override "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, int *iw, SXElem *w, int mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::symbolicFwdSeed(int nfwd,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::name() const  "

[INTERNAL]  Name of the function.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, int order, bool
tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(int ind) const
"

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(const
std::string &iname) const  "

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::FunctionInternal::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::Dple::get_reverse(const std::string &name,
int nadj, const std::vector< std::string > &i_names, const std::vector<
std::string > &o_names, const Dict &opts) const override "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::symbolicOutput(const
std::vector< MX > &arg) "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::FunctionInternal::replaceFwdSeed(const
std::vector< std::vector< M > > &fseed) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::n_out() const  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::n_in() const  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::Dple::get_options() const override "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring") casadi::Dple::_set_temp "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::Dple::get_forward(const std::string &name,
int nfwd, const std::vector< std::string > &i_names, const std::vector<
std::string > &o_names, const Dict &opts) const override "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::PluginInterface< Dple  >::plugin_name() const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::getHessian(int iind, int
oind) "

[INTERNAL]  Return Hessian function.

";

%feature("docstring")  casadi::FunctionInternal::log(const std::string &msg)
const  "

[INTERNAL]  Log the status of the solver.

";

%feature("docstring")  casadi::FunctionInternal::log(const std::string &fcn,
const std::string &msg) const  "

[INTERNAL]  Log the status of the solver, function given.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Dple::_get_stats "

[INTERNAL]  Get all statistics

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(int nadj) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::addShorthand(CodeGenerator
&g, const std::string &name) const  "

[INTERNAL]  Generate shorthand macro.

";

%feature("docstring") casadi::Dple::Dple(const std::string &name, const
SpDict &st) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::size2_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::FunctionInternal::construct(const Dict &opts)
"

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::FunctionInternal::size_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::Dple::get_sparsity_in(int i) override "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::matchingArg(const
std::vector< M > &arg, bool hcat=false) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::FunctionInternal::jac_sx(int iind=0, int
oind=0, const Dict &opts=Dict()) "

[INTERNAL]  Jacobian expression.

";

%feature("docstring")  casadi::FunctionInternal::addDependency(CodeGenerator
&g) const  "

[INTERNAL]  Add a dependent function.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::getPartition(int iind, int
oind, Sparsity &D1, Sparsity &D2, bool compact, bool symmetric, bool
allow_forward, bool allow_reverse) "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::simplifiedCall() const  "

[INTERNAL]  Use simplified signature.

";

%feature("docstring")  casadi::FunctionInternal::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::FunctionInternal::replaceAdjSeed(const
std::vector< std::vector< M > > &aseed) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::Dple::get_name_in(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::tang_mx(int iind=0, int
oind=0) "

[INTERNAL]  Tangent expression.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FunctionInternal::jit_dependencies(const
std::string &fname) "

[INTERNAL]   Jit dependencies.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring") casadi::Dple::_call "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring") casadi::Dple::_call "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::size_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< int > &order_in, const std::vector< int >
&order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::FunctionInternal::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::reverse(int nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::getJacobian(const
std::string &name, int iind, int oind, bool compact, bool symmetric, const
Dict &opts) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(int ind) const
"

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(const
std::string &iname) const  "

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::grad_sx(int iind=0, int
oind=0) "

[INTERNAL]  Gradient expression.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::replaceRes(const
std::vector< M > &res) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::clear_memory() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::sx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::tangent(int iind, int oind)
"

[INTERNAL]  Return tangent function.

";

%feature("docstring")  casadi::FunctionInternal::verbose() const  "

[INTERNAL]  Verbose mode?

";

%feature("docstring")  casadi::FunctionInternal::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::hasDerivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::checkInputs() const  "

[INTERNAL]  Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::FunctionInternal::set_jac_sparsity(const
Sparsity &sp, int iind, int oind, bool compact) "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::Dple::_eval "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring") casadi::Dple::_eval "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring") casadi::Dple::_eval "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring") casadi::Dple::~Dple "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInputReal(int k)
const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOperation(int k)
const  "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::Dple::get_sparsity_out(int i) override "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInput(int k) const
"

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::print_free(std::ostream
&stream) const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::FunctionInternal::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring")  casadi::FunctionInternal::replaceArg(const
std::vector< M > &arg, bool hcat=false) const  "

[INTERNAL]  Replace 0-by-0 inputs.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::n_mem() const  "

[INTERNAL]  Maximum number of memory objects.

";

%feature("docstring")  casadi::Dple::default_in(int ind) const override "

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::Dple::_setup "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::simple(const double *arg,
double *res) const  "

[INTERNAL]  Evaluate numerically, simplied syntax.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::map_mx(const std::vector<
std::vector< MX > > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::map_mx(const std::vector<
MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::Dple::get_name_out(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOutput(int k)
const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::Dple::type_name() const override "

[INTERNAL]  Get type name.

";

%feature("docstring")
casadi::FunctionInternal::generateDeclarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::hessian(int iind, int oind)
"

[INTERNAL]  Return Hessian function.

";

%feature("docstring")  casadi::FunctionInternal::finalize(const Dict &opts)
"

[INTERNAL]  Finalize the object creation This function, which visits the
class hierarchy in reverse order is run after init() has been completed.

";

%feature("docstring")  casadi::FunctionInternal::jac_mx(int iind=0, int
oind=0, const Dict &opts=Dict()) "

[INTERNAL]  Jacobian expression.

";

%feature("docstring")  casadi::FunctionInternal::free_memory(void *mem)
const  "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::generateBody(CodeGenerator
&g) const  "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring")  casadi::FunctionInternal::alloc_memory() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::FunctionInternal::checkRes(const std::vector<
M > &res) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

";

%feature("docstring")  casadi::FunctionInternal::eval_name() const  "

[INTERNAL]  Get name of the evaluation function.

";

%feature("docstring")
casadi::FunctionInternal::generateFunction(CodeGenerator &g, const
std::string &fname, bool decl_static) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::Dple::init(const Dict &opts) override "

[INTERNAL]  Initialize Initialize and make the object ready for setting
arguments and evaluation. This method is typically called after setting
options but before evaluating. If passed to another class (in the
constructor), this class should invoke this function when initialized.

";

%feature("docstring")  casadi::Dple::get_n_out() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(int nadj,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FunctionInternal::setJacobian(const Function
&jac, int iind, int oind, bool compact) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::sp_rev(bvec_t **arg, bvec_t
**res, int *iw, bvec_t *w, int mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::FunctionInternal::gradient(int iind, int
oind) "

[INTERNAL]  Return gradient function.

";

%feature("docstring")  casadi::FunctionInternal::matchingRes(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::getTangent(const
std::string &name, int iind, int oind, const Dict &opts) "

[INTERNAL]  Return tangent function.

";

%feature("docstring")  casadi::FunctionInternal::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::hess_sx(int iind=0, int
oind=0) "

[INTERNAL]  Hessian expression.

";

%feature("docstring")  casadi::Dple::get_n_reverse() const override "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::grad_mx(int iind=0, int
oind=0) "

[INTERNAL]  Gradient expression.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsityGen(int iind,
int oind, bool symmetric, int gr_i=1, int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FunctionInternal::init_memory(void *mem)
const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::sp_fwd(const bvec_t **arg,
bvec_t **res, int *iw, bvec_t *w, int mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::FunctionInternal::name_out(int ind) const  "

[INTERNAL]  Get output scheme name by index.

";

%feature("docstring")  casadi::FunctionInternal::jacobian(int iind, int
oind, bool compact, bool symmetric) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::Dple::get_n_in() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::checkArg(const std::vector<
M > &arg, bool hcat=false) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::hasFullJacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";


// File: classcasadi_1_1Einstein.xml


// File: classcasadi_1_1Expm.xml
%feature("docstring")  casadi::Expm::get_n_forward() const override "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::addDependency(CodeGenerator
&g) const  "

[INTERNAL]  Add a dependent function.

";

%feature("docstring")  casadi::FunctionInternal::alloc_memory() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::FunctionInternal::hasDerivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::PluginInterface< Expm  >::plugin_name() const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::getAlgorithmSize() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, int *iw, SXElem *w, int mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::sx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::matchingRes(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::getTangent(const
std::string &name, int iind, int oind, const Dict &opts) "

[INTERNAL]  Return tangent function.

";

%feature("docstring")  casadi::FunctionInternal::log(const std::string &msg)
const  "

[INTERNAL]  Log the status of the solver.

";

%feature("docstring")  casadi::FunctionInternal::log(const std::string &fcn,
const std::string &msg) const  "

[INTERNAL]  Log the status of the solver, function given.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::FunctionInternal::setJacobian(const Function
&jac, int iind, int oind, bool compact) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInputReal(int k)
const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::addShorthand(CodeGenerator
&g, const std::string &name) const  "

[INTERNAL]  Generate shorthand macro.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(int nfwd) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(int ind) const
"

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(const
std::string &iname) const  "

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring") casadi::Expm::_get_stats "

[INTERNAL]  Get all statistics

";

%feature("docstring")  casadi::FunctionInternal::get_name_in(int i) "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::jit_dependencies(const
std::string &fname) "

[INTERNAL]   Jit dependencies.

";

%feature("docstring") casadi::Expm::Expm(const std::string &name, const
Sparsity &A) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::Expm::_eval "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring") casadi::Expm::_eval "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring") casadi::Expm::_eval "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::set_jac_sparsity(const
Sparsity &sp, int iind, int oind, bool compact) "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::Expm::get_n_in() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::name_in(int ind) const  "

[INTERNAL]  Get input scheme name by index.

";

%feature("docstring")  casadi::FunctionInternal::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::checkInputs() const  "

[INTERNAL]  Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::FunctionInternal::get_function() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::Expm::type_name() const override "

[INTERNAL]  Get type name.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::Expm::get_options() const override "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::FunctionInternal::fullJacobian() "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::getGradient(const
std::string &name, int iind, int oind, const Dict &opts) "

[INTERNAL]  Return gradient function.

";

%feature("docstring")  casadi::FunctionInternal::checkArg(const std::vector<
M > &arg, bool hcat=false) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::forward(int nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::print(std::ostream &stream)
const override "

[INTERNAL]  Print.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::set_temp(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::jacobian(int iind, int
oind, bool compact, bool symmetric) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::replaceFwdSeed(const
std::vector< std::vector< M > > &fseed) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(int nadj) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::finalize(const Dict &opts)
"

[INTERNAL]  Finalize the object creation This function, which visits the
class hierarchy in reverse order is run after init() has been completed.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::Expm::get_sparsity_in(int i) override "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::free_memory(void *mem)
const  "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::tang_sx(int iind=0, int
oind=0) "

[INTERNAL]  Tangent expression.

";

%feature("docstring")  casadi::Expm::init(const Dict &opts) override "

[INTERNAL]  Initialize Initialize and make the object ready for setting
arguments and evaluation. This method is typically called after setting
options but before evaluating. If passed to another class (in the
constructor), this class should invoke this function when initialized.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::matchingArg(const
std::vector< M > &arg, bool hcat=false) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::hessian(int iind, int oind)
"

[INTERNAL]  Return Hessian function.

";

%feature("docstring")  casadi::Expm::get_n_out() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::getPartition(int iind, int
oind, Sparsity &D1, Sparsity &D2, bool compact, bool symmetric, bool
allow_forward, bool allow_reverse) "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::FunctionInternal::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring") casadi::Expm::_set_work "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::get_stats(void *mem) const
"

[INTERNAL]  Get all statistics

";

%feature("docstring")  casadi::FunctionInternal::mx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(int iind, int
oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, int order, bool
tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::name_out(int ind) const  "

[INTERNAL]  Get output scheme name by index.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOutput(int k)
const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInput(int k) const
"

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::grad_sx(int iind=0, int
oind=0) "

[INTERNAL]  Gradient expression.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::jac_sx(int iind=0, int
oind=0, const Dict &opts=Dict()) "

[INTERNAL]  Jacobian expression.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::Expm::get_sparsity_out(int i) override "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::Expm::default_in(int ind) const override "

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::gradient(int iind, int
oind) "

[INTERNAL]  Return gradient function.

";

%feature("docstring")  casadi::FunctionInternal::size_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::jac_mx(int iind=0, int
oind=0, const Dict &opts=Dict()) "

[INTERNAL]  Jacobian expression.

";

%feature("docstring") casadi::Expm::_call "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring") casadi::Expm::_call "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::map_mx(const std::vector<
std::vector< MX > > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::map_mx(const std::vector<
MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::FunctionInternal::tangent(int iind, int oind)
"

[INTERNAL]  Return tangent function.

";

%feature("docstring")  casadi::FunctionInternal::getJacobian(const
std::string &name, int iind, int oind, bool compact, bool symmetric, const
Dict &opts) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::sp_fwd(const bvec_t **arg,
bvec_t **res, int *iw, bvec_t *w, int mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::FunctionInternal::reverse(int nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::hess_sx(int iind=0, int
oind=0) "

[INTERNAL]  Hessian expression.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsityGen(int iind,
int oind, bool symmetric, int gr_i=1, int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::Expm::get_forward(const std::string &name,
int nfwd, const std::vector< std::string > &i_names, const std::vector<
std::string > &o_names, const Dict &opts) const override "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::replaceArg(const
std::vector< M > &arg, bool hcat=false) const  "

[INTERNAL]  Replace 0-by-0 inputs.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::size_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::generateBody(CodeGenerator
&g) const  "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring")  casadi::FunctionInternal::verbose() const  "

[INTERNAL]  Verbose mode?

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::Expm "

Internal class.

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| const_A          | OT_BOOL         | Assume A is      | casadi::Expm     |
|                  |                 | constant.        |                  |
|                  |                 | Default: false.  |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Custom input     | casadi::Function |
|                  |                 | scheme           | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Custom output    | casadi::Function |
|                  |                 | scheme           | Internal         |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: expm_impl.hpp ";

%feature("docstring")  casadi::FunctionInternal::size1_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::symbolicOutput(const
std::vector< MX > &arg) "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(int ind) const
"

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(const
std::string &iname) const  "

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")
casadi::FunctionInternal::generateFunction(CodeGenerator &g, const
std::string &fname, bool decl_static) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring") casadi::Expm::_setup "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::n_in() const  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::print_free(std::ostream
&stream) const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::FunctionInternal::checkRes(const std::vector<
M > &res) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

";

%feature("docstring")  casadi::FunctionInternal::init_memory(void *mem)
const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::replaceAdjSeed(const
std::vector< std::vector< M > > &aseed) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::hasFullJacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(int nadj,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FunctionInternal::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")
casadi::FunctionInternal::generateDeclarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::tang_mx(int iind=0, int
oind=0) "

[INTERNAL]  Tangent expression.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOperation(int k)
const  "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::replaceRes(const
std::vector< M > &res) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::getHessian(int iind, int
oind) "

[INTERNAL]  Return Hessian function.

";

%feature("docstring")  casadi::Expm::getJacSparsity(int iind, int oind, bool
symmetric) const override "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::get_name_out(int i) "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::n_mem() const  "

[INTERNAL]  Maximum number of memory objects.

";

%feature("docstring")  casadi::FunctionInternal::simplifiedCall() const  "

[INTERNAL]  Use simplified signature.

";

%feature("docstring")  casadi::FunctionInternal::name() const  "

[INTERNAL]  Name of the function.

";

%feature("docstring")  casadi::FunctionInternal::eval_name() const  "

[INTERNAL]  Get name of the evaluation function.

";

%feature("docstring")  casadi::Expm::get_reverse(const std::string &name,
int nadj, const std::vector< std::string > &i_names, const std::vector<
std::string > &o_names, const Dict &opts) const override "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::FunctionInternal::n_out() const  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::repr(std::ostream &stream)
const override "

[INTERNAL]  Print.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::construct(const Dict &opts)
"

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::eval(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::grad_mx(int iind=0, int
oind=0) "

[INTERNAL]  Gradient expression.

";

%feature("docstring")  casadi::FunctionInternal::simple(const double *arg,
double *res) const  "

[INTERNAL]  Evaluate numerically, simplied syntax.

";

%feature("docstring")  casadi::Expm::get_n_reverse() const override "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::Expm::_set_temp "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::generateMeta(CodeGenerator
&g, const std::string &fname) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring") casadi::Expm::~Expm "

[INTERNAL] ";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::sp_rev(bvec_t **arg, bvec_t
**res, int *iw, bvec_t *w, int mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< int > &order_in, const std::vector< int >
&order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::getFullJacobian(const
std::string &name, const std::vector< std::string > &i_names, const
std::vector< std::string > &o_names, const Dict &opts) "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::symbolicFwdSeed(int nfwd,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::getWorkSize() const  "

[INTERNAL]  Get the length of the work vector.

";

%feature("docstring")  casadi::FunctionInternal::clear_memory() "

[INTERNAL]  Clear all memory (called from destructor)

";


// File: classcasadi_1_1External.xml
%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::jacobian(int iind, int
oind, bool compact, bool symmetric) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring") casadi::External::_call "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring") casadi::External::_call "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(int ind) const
"

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(const
std::string &iname) const  "

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::FunctionInternal::default_in(int ind) const
"

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::External::get_name_in(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::setJacobian(const Function
&jac, int iind, int oind, bool compact) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::External::hasFullJacobian() const override "

[INTERNAL]  Full Jacobian.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::sp_rev(bvec_t **arg, bvec_t
**res, int *iw, bvec_t *w, int mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::tang_mx(int iind=0, int
oind=0) "

[INTERNAL]  Tangent expression.

";

%feature("docstring")  casadi::FunctionInternal::addShorthand(CodeGenerator
&g, const std::string &name) const  "

[INTERNAL]  Generate shorthand macro.

";

%feature("docstring")  casadi::FunctionInternal::matchingArg(const
std::vector< M > &arg, bool hcat=false) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::replaceAdjSeed(const
std::vector< std::vector< M > > &aseed) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::getWorkSize() const  "

[INTERNAL]  Get the length of the work vector.

";

%feature("docstring")  casadi::FunctionInternal::checkRes(const std::vector<
M > &res) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(int ind) const
"

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(const
std::string &iname) const  "

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::FunctionInternal::sx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::FunctionInternal::getGradient(const
std::string &name, int iind, int oind, const Dict &opts) "

[INTERNAL]  Return gradient function.

";

%feature("docstring")  casadi::FunctionInternal::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::FunctionInternal::generateMeta(CodeGenerator
&g, const std::string &fname) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FunctionInternal::size_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::set_jac_sparsity(const
Sparsity &sp, int iind, int oind, bool compact) "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::checkArg(const std::vector<
M > &arg, bool hcat=false) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::set_temp(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::External::codegen_name(const CodeGenerator
&g) const override "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::FunctionInternal::replaceRes(const
std::vector< M > &res) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring") casadi::External::_get_stats "

[INTERNAL]  Get all statistics

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::get_sparsity_out(int i) "

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::External::get_reverse(const std::string
&name, int nadj, const std::vector< std::string > &i_names, const
std::vector< std::string > &o_names, const Dict &opts) const override "

[INTERNAL]  Reverse mode derivatives.

";

%feature("docstring")  casadi::FunctionInternal::print(std::ostream &stream)
const override "

[INTERNAL]  Print.

";

%feature("docstring") casadi::External::_setup "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::External::factory(const std::string &name,
const std::vector< std::string > &s_in, const std::vector< std::string >
&s_out, const Function::AuxOut &aux, const Dict &opts) const override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::FunctionInternal::jac_mx(int iind=0, int
oind=0, const Dict &opts=Dict()) "

[INTERNAL]  Jacobian expression.

";

%feature("docstring") casadi::External "

[INTERNAL] C++ includes: external_impl.hpp ";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInput(int k) const
"

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::matchingRes(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(int nadj,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FunctionInternal::getJacobian(const
std::string &name, int iind, int oind, bool compact, bool symmetric, const
Dict &opts) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::getTangent(const
std::string &name, int iind, int oind, const Dict &opts) "

[INTERNAL]  Return tangent function.

";

%feature("docstring")  casadi::FunctionInternal::alloc_memory() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOperation(int k)
const  "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::repr(std::ostream &stream)
const override "

[INTERNAL]  Print.

";

%feature("docstring")  casadi::FunctionInternal::construct(const Dict &opts)
"

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::FunctionInternal::generateBody(CodeGenerator
&g) const  "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::External::External(const std::string &name,
const Importer &li) "

[INTERNAL]  Constructor.

";

%feature("docstring")  casadi::FunctionInternal::getAlgorithmSize() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::get_function() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::name() const  "

[INTERNAL]  Name of the function.

";

%feature("docstring")  casadi::External::type_name() const override "

[INTERNAL]  Get type name.

";

%feature("docstring")  casadi::FunctionInternal::n_in() const  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::reverse(int nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInputReal(int k)
const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::External::_eval "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring") casadi::External::_eval "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring") casadi::External::_eval "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")
casadi::FunctionInternal::generateDeclarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::replaceFwdSeed(const
std::vector< std::vector< M > > &fseed) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::free_memory(void *mem)
const  "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::get_stats(void *mem) const
"

[INTERNAL]  Get all statistics

";

%feature("docstring")  casadi::FunctionInternal::simple(const double *arg,
double *res) const  "

[INTERNAL]  Evaluate numerically, simplied syntax.

";

%feature("docstring") casadi::External::_set_work "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::eval_name() const  "

[INTERNAL]  Get name of the evaluation function.

";

%feature("docstring")  casadi::External::get_n_forward() const override "

[INTERNAL]  Forward mode derivatives.

";

%feature("docstring")  casadi::External::init(const Dict &opts) override "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::forward(int nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::n_out() const  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::External::get_n_out() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::External::~External "

[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< int > &order_in, const std::vector< int >
&order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::FunctionInternal::log(const std::string &msg)
const  "

[INTERNAL]  Log the status of the solver.

";

%feature("docstring")  casadi::FunctionInternal::log(const std::string &fcn,
const std::string &msg) const  "

[INTERNAL]  Log the status of the solver, function given.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(int iind, int
oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::simplifiedCall() const  "

[INTERNAL]  Use simplified signature.

";

%feature("docstring")  casadi::FunctionInternal::getHessian(int iind, int
oind) "

[INTERNAL]  Return Hessian function.

";

%feature("docstring")  casadi::FunctionInternal::name_out(int ind) const  "

[INTERNAL]  Get output scheme name by index.

";

%feature("docstring")  casadi::FunctionInternal::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::External::get_name_out(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(int iind,
int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::replaceArg(const
std::vector< M > &arg, bool hcat=false) const  "

[INTERNAL]  Replace 0-by-0 inputs.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::get_options() const  "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::FunctionInternal::name_in(int ind) const  "

[INTERNAL]  Get input scheme name by index.

";

%feature("docstring")  casadi::FunctionInternal::checkInputs() const  "

[INTERNAL]  Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FunctionInternal::n_mem() const  "

[INTERNAL]  Maximum number of memory objects.

";

%feature("docstring")  casadi::FunctionInternal::jac_sx(int iind=0, int
oind=0, const Dict &opts=Dict()) "

[INTERNAL]  Jacobian expression.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::FunctionInternal::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::symbolicOutput(const
std::vector< MX > &arg) "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsityGen(int iind,
int oind, bool symmetric, int gr_i=1, int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FunctionInternal::init_memory(void *mem)
const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::size_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::hessian(int iind, int oind)
"

[INTERNAL]  Return Hessian function.

";

%feature("docstring")  casadi::External::get_n_in() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::FunctionInternal::getPartition(int iind, int
oind, Sparsity &D1, Sparsity &D2, bool compact, bool symmetric, bool
allow_forward, bool allow_reverse) "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::print_free(std::ostream
&stream) const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::FunctionInternal::jit_dependencies(const
std::string &fname) "

[INTERNAL]   Jit dependencies.

";

%feature("docstring")  casadi::FunctionInternal::grad_mx(int iind=0, int
oind=0) "

[INTERNAL]  Gradient expression.

";

%feature("docstring")  casadi::FunctionInternal::gradient(int iind, int
oind) "

[INTERNAL]  Return gradient function.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::External::get_n_reverse() const override "

[INTERNAL]  Reverse mode derivatives.

";

%feature("docstring")  casadi::FunctionInternal::eval(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::sp_fwd(const bvec_t **arg,
bvec_t **res, int *iw, bvec_t *w, int mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::tangent(int iind, int oind)
"

[INTERNAL]  Return tangent function.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::map_mx(const std::vector<
std::vector< MX > > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::map_mx(const std::vector<
MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::External::getFullJacobian(const std::string
&name, const std::vector< std::string > &i_names, const std::vector<
std::string > &o_names, const Dict &opts) override "

[INTERNAL]  Full Jacobian.

";

%feature("docstring")  casadi::FunctionInternal::finalize(const Dict &opts)
"

[INTERNAL]  Finalize the object creation This function, which visits the
class hierarchy in reverse order is run after init() has been completed.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(int nadj) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::External::get_forward(const std::string
&name, int nfwd, const std::vector< std::string > &i_names, const
std::vector< std::string > &o_names, const Dict &opts) const override "

[INTERNAL]  Forward mode derivatives.

";

%feature("docstring")  casadi::FunctionInternal::grad_sx(int iind=0, int
oind=0) "

[INTERNAL]  Gradient expression.

";

%feature("docstring")  casadi::FunctionInternal::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::External::generateFunction(CodeGenerator &g,
const std::string &fname, bool decl_static) const override "

[INTERNAL]  Generate code the function.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, int order, bool
tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::symbolicFwdSeed(int nfwd,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::fullJacobian() "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::hasDerivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::clear_memory() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, int *iw, SXElem *w, int mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::External::addDependency(CodeGenerator &g)
const override "

[INTERNAL]  Add a dependent function.

";

%feature("docstring")  casadi::FunctionInternal::hess_sx(int iind=0, int
oind=0) "

[INTERNAL]  Hessian expression.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOutput(int k)
const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::verbose() const  "

[INTERNAL]  Verbose mode?

";

%feature("docstring") casadi::External::_set_temp "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::tang_sx(int iind=0, int
oind=0) "

[INTERNAL]  Tangent expression.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::get_sparsity_in(int i) "

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(int nfwd) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the dependency function.

";


// File: classcasadi_1_1Factory.xml
%feature("docstring")  casadi::Factory< MatType >::has_in(const std::string
&s) const  "

[INTERNAL] ";

%feature("docstring")  casadi::Factory< MatType >::add_output(const
std::string &s, const MatType &e) "

[INTERNAL] ";

%feature("docstring")  casadi::Factory< MatType >::calculate() "

[INTERNAL] ";

%feature("docstring")  casadi::Factory< MatType >::get_output(const
std::string &s) "

[INTERNAL] ";

%feature("docstring") casadi::Factory "

[INTERNAL] C++ includes: factory.hpp ";

%feature("docstring")  casadi::Factory< MatType >::request_output(const
std::string &s) "

[INTERNAL] ";

%feature("docstring")  casadi::Factory< MatType >::get_input(const
std::string &s) "

[INTERNAL] ";

%feature("docstring")  casadi::Factory< MatType >::add_input(const
std::string &s, const MatType &e) "

[INTERNAL] ";

%feature("docstring")  casadi::Factory< MatType >::has_out(const std::string
&s) const  "

[INTERNAL] ";

%feature("docstring")  casadi::Factory< MatType >::request_input(const
std::string &s) "

[INTERNAL] ";

%feature("docstring")  casadi::Factory< MatType >::name_out() const  "

[INTERNAL] ";

%feature("docstring") casadi::Factory< MatType >::Factory(const
Function::AuxOut &aux) "

[INTERNAL] ";

%feature("docstring")  casadi::Factory< MatType >::name_in() const  "

[INTERNAL] ";


// File: classcasadi_1_1Find.xml


// File: classcasadi_1_1FixedStepIntegrator.xml
%feature("docstring")  casadi::FunctionInternal::grad_mx(int iind=0, int
oind=0) "

[INTERNAL]  Gradient expression.

";

%feature("docstring")  casadi::FunctionInternal::fullJacobian() "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::OracleFunction::calc_function(OracleMemory
*m, const std::string &fcn, const double *const *arg=0) const  "

[INTERNAL] ";

%feature("docstring")  casadi::OracleFunction::jit_dependencies(const
std::string &fname) override "

[INTERNAL]  JIT for dependencies.

";

%feature("docstring")  casadi::Integrator::aug_fwd(int nfwd) const  "

[INTERNAL]  Generate a augmented DAE system with nfwd forward sensitivities.

";

%feature("docstring")
casadi::FunctionInternal::generateFunction(CodeGenerator &g, const
std::string &fname, bool decl_static) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::Integrator::z() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::default_in(int ind) const
"

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::Integrator::x() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::tangent(int iind, int oind)
"

[INTERNAL]  Return tangent function.

";

%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::Integrator::p() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::q() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::t() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::generateBody(CodeGenerator
&g) const  "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring")  casadi::FunctionInternal::print_free(std::ostream
&stream) const  "

[INTERNAL]  Print free variables.

";

%feature("docstring") casadi::FixedStepIntegrator::_get_stats "

[INTERNAL]  Get all statistics

";

%feature("docstring")  casadi::FunctionInternal::hasFullJacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::Integrator::get_name_in(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(int ind) const
"

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(const
std::string &iname) const  "

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::FunctionInternal::getFullJacobian(const
std::string &name, const std::vector< std::string > &i_names, const
std::vector< std::string > &o_names, const Dict &opts) "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::FunctionInternal::matchingArg(const
std::vector< M > &arg, bool hcat=false) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::simplifiedCall() const  "

[INTERNAL]  Use simplified signature.

";

%feature("docstring")  casadi::FunctionInternal::getGradient(const
std::string &name, int iind, int oind, const Dict &opts) "

[INTERNAL]  Return gradient function.

";

%feature("docstring")  casadi::FunctionInternal::tang_mx(int iind=0, int
oind=0) "

[INTERNAL]  Tangent expression.

";

%feature("docstring")  casadi::OracleFunction::expand() "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::getPartition(int iind, int
oind, Sparsity &D1, Sparsity &D2, bool compact, bool symmetric, bool
allow_forward, bool allow_reverse) "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::setJacobian(const Function
&jac, int iind, int oind, bool compact) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::replaceArg(const
std::vector< M > &arg, bool hcat=false) const  "

[INTERNAL]  Replace 0-by-0 inputs.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(int iind,
int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::getAlgorithmSize() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::Integrator::get_reverse(const std::string
&name, int nadj, const std::vector< std::string > &i_names, const
std::vector< std::string > &o_names, const Dict &opts) const override "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::FixedStepIntegrator::get_options() const
override "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::FunctionInternal::log(const std::string &msg)
const  "

[INTERNAL]  Log the status of the solver.

";

%feature("docstring")  casadi::FunctionInternal::log(const std::string &fcn,
const std::string &msg) const  "

[INTERNAL]  Log the status of the solver, function given.

";

%feature("docstring")  casadi::FunctionInternal::construct(const Dict &opts)
"

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::Integrator::get_sparsity_out(int i) override
"

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(int iind, int
oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::Integrator::setStopTime(IntegratorMemory
*mem, double tf) const  "

[INTERNAL]  Set stop time for the integration.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(int ind) const
"

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(const
std::string &iname) const  "

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(int nfwd) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOutput(int k)
const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOperation(int k)
const  "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::clear_memory() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::sx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::Integrator::get_n_reverse() const override "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::FunctionInternal::hess_sx(int iind=0, int
oind=0) "

[INTERNAL]  Hessian expression.

";

%feature("docstring")  casadi::FixedStepIntegrator::resetB(IntegratorMemory
*mem, double t, const double *rx, const double *rz, const double *rp) const
override "

[INTERNAL]  Reset the backward problem and take time to tf.

";

%feature("docstring")  casadi::FixedStepIntegrator::init_memory(void *mem)
const override "

[INTERNAL]  Initalize memory block.

";

%feature("docstring") casadi::FixedStepIntegrator::_call "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring") casadi::FixedStepIntegrator::_call "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FixedStepIntegrator::alloc_memory() const
override "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< int > &order_in, const std::vector< int >
&order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::FunctionInternal::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring") casadi::FixedStepIntegrator::~FixedStepIntegrator "

[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInput(int k) const
"

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::jac_sx(int iind=0, int
oind=0, const Dict &opts=Dict()) "

[INTERNAL]  Jacobian expression.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FixedStepIntegrator::advance(IntegratorMemory
*mem, double t, double *x, double *z, double *q) const override "

[INTERNAL]  Advance solution in time.

";

%feature("docstring") casadi::FixedStepIntegrator::_set_work "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::reverse(int nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::checkRes(const std::vector<
M > &res) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

";

%feature("docstring")  casadi::FunctionInternal::addDependency(CodeGenerator
&g) const  "

[INTERNAL]  Add a dependent function.

";

%feature("docstring")  casadi::FunctionInternal::set_jac_sparsity(const
Sparsity &sp, int iind, int oind, bool compact) "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, int order, bool
tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::size_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::map_mx(const std::vector<
std::vector< MX > > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::map_mx(const std::vector<
MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::Integrator::get_name_out(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::FunctionInternal::getJacobian(const
std::string &name, int iind, int oind, bool compact, bool symmetric, const
Dict &opts) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::Integrator::get_n_forward() const override "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::simple(const double *arg,
double *res) const  "

[INTERNAL]  Evaluate numerically, simplied syntax.

";

%feature("docstring")  casadi::FixedStepIntegrator::retreat(IntegratorMemory
*mem, double t, double *rx, double *rz, double *rq) const override "

[INTERNAL]  Retreat solution in time.

";

%feature("docstring")  casadi::FunctionInternal::eval_name() const  "

[INTERNAL]  Get name of the evaluation function.

";

%feature("docstring")  casadi::FunctionInternal::repr(std::ostream &stream)
const override "

[INTERNAL]  Print.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::sx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::Integrator::type_name() const override "

[INTERNAL]  Get type name.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::getHessian(int iind, int
oind) "

[INTERNAL]  Return Hessian function.

";

%feature("docstring")  casadi::OracleFunction::finalize(const Dict &opts)
override "

[INTERNAL]  Finalize initialization.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, int *iw, SXElem *w, int mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::FunctionInternal::n_in() const  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::FixedStepIntegrator::_setup "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FixedStepIntegrator::setupFG() "

[INTERNAL]  Setup F and G.

";

%feature("docstring")  casadi::FunctionInternal::forward(int nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::OracleFunction::generate_dependencies(const
std::string &fname, const Dict &opts) const override "

[INTERNAL]  Export / Generate C code for the generated functions.

";

%feature("docstring")  casadi::OracleFunction::create_function(const
std::string &fname, const std::vector< std::string > &s_in, const
std::vector< std::string > &s_out, const Function::AuxOut
&aux=Function::AuxOut()) "

[INTERNAL]  Create an oracle function

";

%feature("docstring") casadi::FixedStepIntegrator::_set_temp "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::FunctionInternal::replaceFwdSeed(const
std::vector< std::vector< M > > &fseed) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FixedStepIntegrator::init(const Dict &opts)
override "

[INTERNAL]  Initialize stage.

";

%feature("docstring")  casadi::Integrator::sp_jac_rdae() "

[INTERNAL]  Create sparsity pattern of the extended Jacobian (backward
problem)

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring") casadi::FixedStepIntegrator::FixedStepIntegrator(const
std::string &name, const Function &dae) "

[INTERNAL]  Constructor.

";

%feature("docstring")  casadi::Integrator::sp_rev(bvec_t **arg, bvec_t
**res, int *iw, bvec_t *w, int mem) const override "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::OracleFunction::get_stats(void *mem) const
override "

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::Integrator::get_sparsity_in(int i) override "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::gradient(int iind, int
oind) "

[INTERNAL]  Return gradient function.

";

%feature("docstring")  casadi::FunctionInternal::replaceAdjSeed(const
std::vector< std::vector< M > > &aseed) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::name_out(int ind) const  "

[INTERNAL]  Get output scheme name by index.

";

%feature("docstring")  casadi::FunctionInternal::n_mem() const  "

[INTERNAL]  Maximum number of memory objects.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring") casadi::FixedStepIntegrator "



>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| augmented_option | OT_DICT         | Options to be    | casadi::FixedSte |
| s                |                 | passed down to   | pIntegrator      |
|                  |                 | the augmented    |                  |
|                  |                 | integrator, if   |                  |
|                  |                 | one is           |                  |
|                  |                 | constructed.     |                  |
+------------------+-----------------+------------------+------------------+
| common_options   | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | auto-generated   | nction           |
|                  |                 | functions        |                  |
+------------------+-----------------+------------------+------------------+
| expand           | OT_BOOL         | Replace MX with  | casadi::FixedSte |
|                  |                 | SX expressions   | pIntegrator      |
|                  |                 | in problem       |                  |
|                  |                 | formulation      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| grid             | OT_DOUBLEVECTOR | Time grid        | casadi::FixedSte |
|                  |                 |                  | pIntegrator      |
+------------------+-----------------+------------------+------------------+
| monitor          | OT_STRINGVECTOR | Set of user      | casadi::OracleFu |
|                  |                 | problem          | nction           |
|                  |                 | functions to be  |                  |
|                  |                 | monitored        |                  |
+------------------+-----------------+------------------+------------------+
| number_of_finite | OT_INT          | Number of finite | casadi::FixedSte |
| _elements        |                 | elements         | pIntegrator      |
+------------------+-----------------+------------------+------------------+
| output_t0        | OT_BOOL         | Output the state | casadi::FixedSte |
|                  |                 | at the initial   | pIntegrator      |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| print_stats      | OT_BOOL         | Print out        | casadi::FixedSte |
|                  |                 | statistics after | pIntegrator      |
|                  |                 | integration      |                  |
+------------------+-----------------+------------------+------------------+
| rootfinder       | OT_STRING       | An implicit      | casadi::FixedSte |
|                  |                 | function solver  | pIntegrator      |
+------------------+-----------------+------------------+------------------+
| rootfinder_optio | OT_DICT         | Options to be    | casadi::FixedSte |
| ns               |                 | passed to the    | pIntegrator      |
|                  |                 | NLP Solver       |                  |
+------------------+-----------------+------------------+------------------+
| specific_options | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | specific auto-   | nction           |
|                  |                 | generated        |                  |
|                  |                 | functions,       |                  |
|                  |                 | overwriting the  |                  |
|                  |                 | defaults from    |                  |
|                  |                 | common_options.  |                  |
|                  |                 | Nested           |                  |
|                  |                 | dictionary.      |                  |
+------------------+-----------------+------------------+------------------+
| t0               | OT_DOUBLE       | Beginning of the | casadi::FixedSte |
|                  |                 | time horizon     | pIntegrator      |
+------------------+-----------------+------------------+------------------+
| tf               | OT_DOUBLE       | End of the time  | casadi::FixedSte |
|                  |                 | horizon          | pIntegrator      |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: integrator_impl.hpp ";

%feature("docstring")  casadi::FunctionInternal::getTangent(const
std::string &name, int iind, int oind, const Dict &opts) "

[INTERNAL]  Return tangent function.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::OracleFunction::monitored(const std::string
&name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::Integrator::eval(void *mem, const double
**arg, double **res, int *iw, double *w) const override "

[INTERNAL]  evaluate

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::Integrator::aug_adj(int nadj) const  "

[INTERNAL]  Generate a augmented DAE system with nadj adjoint sensitivities.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(int nadj,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FunctionInternal::print(std::ostream &stream)
const override "

[INTERNAL]  Print.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::checkArg(const std::vector<
M > &arg, bool hcat=false) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::addShorthand(CodeGenerator
&g, const std::string &name) const  "

[INTERNAL]  Generate shorthand macro.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::Integrator::get_forward(const std::string
&name, int nfwd, const std::vector< std::string > &i_names, const
std::vector< std::string > &o_names, const Dict &opts) const override "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::Integrator::sp_jac_dae() "

[INTERNAL]  Create sparsity pattern of the extended Jacobian (forward
problem)

";

%feature("docstring")  casadi::FunctionInternal::symbolicFwdSeed(int nfwd,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::n_out() const  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::Integrator::sp_fwd(const bvec_t **arg, bvec_t
**res, int *iw, bvec_t *w, int mem) const override "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::FunctionInternal::hessian(int iind, int oind)
"

[INTERNAL]  Return Hessian function.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::name_in(int ind) const  "

[INTERNAL]  Get input scheme name by index.

";

%feature("docstring") casadi::FixedStepIntegrator::_eval "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring") casadi::FixedStepIntegrator::_eval "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring") casadi::FixedStepIntegrator::_eval "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsityGen(int iind,
int oind, bool symmetric, int gr_i=1, int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FixedStepIntegrator::getExplicitB() const  "

[INTERNAL]  Get explicit dynamics (backward problem)

";

%feature("docstring")  casadi::FunctionInternal::symbolicOutput(const
std::vector< MX > &arg) "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::FunctionInternal::checkInputs() const  "

[INTERNAL]  Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::FixedStepIntegrator::getExplicit() const  "

[INTERNAL]  Get explicit dynamics.

";

%feature("docstring")  casadi::OracleFunction::oracle() const override "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::jac_mx(int iind=0, int
oind=0, const Dict &opts=Dict()) "

[INTERNAL]  Jacobian expression.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(int nadj) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FixedStepIntegrator::reset(IntegratorMemory
*mem, double t, const double *x, const double *z, const double *p) const
override "

[INTERNAL]  Reset the forward problem.

";

%feature("docstring")  casadi::FunctionInternal::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::OracleFunction::print_fstats(const
OracleMemory *m) const  "

[INTERNAL]  Print statistics.

";

%feature("docstring")  casadi::FunctionInternal::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FunctionInternal::verbose() const  "

[INTERNAL]  Verbose mode?

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInputReal(int k)
const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::OracleFunction::set_temp(void *mem, const
double **arg, double **res, int *iw, double *w) const override "

[INTERNAL]  Set the work vectors.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::Integrator::print_stats(IntegratorMemory
*mem, std::ostream &stream) const  "

[INTERNAL]  Print solver statistics.

";

%feature("docstring")  casadi::FunctionInternal::hasDerivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::size2_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::FunctionInternal::replaceRes(const
std::vector< M > &res) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::size_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::jacobian(int iind, int
oind, bool compact, bool symmetric) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::Integrator::has_sprev() const override "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::mx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::OracleFunction::get_function() const override
"

[INTERNAL] ";

%feature("docstring")  casadi::OracleFunction::get_function(const
std::string &name) const override "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::has_spfwd() const override "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::tang_sx(int iind=0, int
oind=0) "

[INTERNAL]  Tangent expression.

";

%feature("docstring")  casadi::FunctionInternal::name() const  "

[INTERNAL]  Name of the function.

";

%feature("docstring")  casadi::Integrator::get_n_in() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::OracleFunction::has_function(const
std::string &fname) const override "

[INTERNAL] ";

%feature("docstring")  casadi::FixedStepIntegrator::free_memory(void *mem)
const override "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::grad_sx(int iind=0, int
oind=0) "

[INTERNAL]  Gradient expression.

";

%feature("docstring")  casadi::FunctionInternal::getWorkSize() const  "

[INTERNAL]  Get the length of the work vector.

";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn, const std::string &fname, bool jit=false) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")
casadi::FunctionInternal::generateDeclarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::matchingRes(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

";

%feature("docstring")  casadi::PluginInterface< Integrator  >::plugin_name()
const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::generateMeta(CodeGenerator
&g, const std::string &fname) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::Integrator::get_n_out() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::Integrator::rx() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::rz() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::getDerivativeOptions(bool fwd)
const  "

[INTERNAL]  Set solver specific options to generated augmented integrators.

";

%feature("docstring")  casadi::Integrator::rq() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::rp() const  "

[INTERNAL] ";


// File: classcasadi_1_1FStats.xml
%feature("docstring")  casadi::FStats::tic() "

[INTERNAL]  Start timing.

";

%feature("docstring")  casadi::FStats::reset() "

[INTERNAL]  Reset the statistics.

";

%feature("docstring") casadi::FStats::FStats() "

[INTERNAL]  Constructor.

";

%feature("docstring") casadi::FStats "

[INTERNAL]  Timer class

FStats hack; hack.tic(); .... hack.toc();

C++ includes: timing.hpp ";

%feature("docstring")  casadi::FStats::toc() "

[INTERNAL]  Stop timing.

";


// File: classcasadi_1_1Function.xml
%feature("docstring")  casadi::SharedObject::repr(std::ostream
&stream=casadi::userOut(), bool trailing_newline=true) const  "

Print a representation of the object.

";

%feature("docstring")  casadi::Function::gradient(int iind=0, int oind=0) "

[DEPRECATED] Use Function::factory instead

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
int oind=0) "

[DEPRECATED] Use Function::factory instead

";

%feature("docstring")  casadi::Function::gradient(int iind, const
std::string &oind) "

[DEPRECATED] Use Function::factory instead

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
const std::string &oind) "

[DEPRECATED] Use Function::factory instead

";

%feature("docstring")  casadi::Function::nnz_in() const  "

Get number of input nonzeros.

For a particular input or for all of the inputs

";

%feature("docstring")  casadi::Function::nnz_in(int ind) const  "

Get number of input nonzeros.

For a particular input or for all of the inputs

";

%feature("docstring")  casadi::Function::nnz_in(const std::string &iname)
const  "

Get number of input nonzeros.

For a particular input or for all of the inputs

";

%feature("docstring")  casadi::Function::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::Function::name() const  "

Name of the function.

";

%feature("docstring")  casadi::Function::checkInputs() const  "

[INTERNAL]  Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=casadi::userOut()) const  "

[INTERNAL]  Print the pointer to the internal class

";

%feature("docstring")  casadi::Function::jacobian(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

[DEPRECATED] Alias of Function::jacobian_old This function is of internal
character and should be avoided, if possible. The preferred way is to use
unction::factory instead. This function will change behavior in the next
version of CasADi.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
int oind=0, bool compact=false, bool symmetric=false) "

[INTERNAL]  Generate a Jacobian function of output oind with respect to
input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output Legacy function: To be deprecated in a future
version of CasADi. Exists only for compatibility with Function::jacobian
pre-CasADi 3.2

";

%feature("docstring")  casadi::Function::jacobian(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

[INTERNAL]  Generate a Jacobian function of output oind with respect to
input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output Legacy function: To be deprecated in a future
version of CasADi. Exists only for compatibility with Function::jacobian
pre-CasADi 3.2

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
const std::string &oind, bool compact=false, bool symmetric=false) "

[INTERNAL]  Generate a Jacobian function of output oind with respect to
input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output Legacy function: To be deprecated in a future
version of CasADi. Exists only for compatibility with Function::jacobian
pre-CasADi 3.2

";

%feature("docstring")  casadi::Function::stats(int mem=0) const  "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::Function::setFullJacobian(const Function
&jac) "

[DEPRECATED] Set the Jacobian of all the input nonzeros with respect to all
output nonzeros NOTE: Does not take ownership, only weak references to the
Jacobian are kept internally

";

%feature("docstring")  casadi::Function::sparsity_out(int ind) const  "

Get sparsity of a given output.

";

%feature("docstring")  casadi::Function::sparsity_out(const std::string
&iname) const  "

Get sparsity of a given output.

";

%feature("docstring")  casadi::Function::oracle() const  "

Get oracle.

";

%feature("docstring")  casadi::Function::wrap() const  "

Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::Function::getAtomicOperation(int k) const  "

Get an atomic operation operator index.

";

%feature("docstring")  casadi::Function::spCanEvaluate(bool fwd) "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::Function::getAlgorithmSize() const  "

Get the number of atomic operations.

";

%feature("docstring")  casadi::Function::numel_out() const  "

Get number of output elements.

For a particular output or for all of the outputs

";

%feature("docstring")  casadi::Function::numel_out(int ind) const  "

Get number of output elements.

For a particular output or for all of the outputs

";

%feature("docstring")  casadi::Function::numel_out(const std::string &oname)
const  "

Get number of output elements.

For a particular output or for all of the outputs

";

%feature("docstring")  casadi::Function::print_dimensions(std::ostream
&stream=casadi::userOut()) const  "

Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::Function::__hash__ "

Returns a number that is unique for a given Node. If the Object does not
point to any node, \"0\" is returned.

";

%feature("docstring")  casadi::Function::name_out() const  "

Get output scheme.

";

%feature("docstring")  casadi::Function::name_out(int ind) const  "

Get output scheme name by index.

";

%feature("docstring")  casadi::Function::n_in() const  "

Get the number of function inputs.

";

%feature("docstring")  casadi::Function::mx_out(int ind) const  "

Get symbolic primitives equivalent to the output expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring")  casadi::Function::mx_out(const std::string &oname)
const  "

Get symbolic primitives equivalent to the output expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring")  casadi::Function::mx_out() const  "

Get symbolic primitives equivalent to the output expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring")  casadi::Function::generate_dependencies(const
std::string &fname, const Dict &opts=Dict()) const  "

Export / Generate C code for the dependency function.

";

%feature("docstring")  casadi::Function::free_sx() const  "

Get all the free variables of the function.

";

%feature("docstring")  casadi::Function::mapaccum(const std::string &name,
int n, int n_accum=1, const Dict &opts=Dict()) const  "

Create a mapaccumulated version of this function.

Suppose the function has a signature of:

::

     f: (x, u) -> (x_next , y )
  



The the mapaccumulated version has the signature:

::

     F: (x0, U) -> (X , Y )
  
      with
          U: horzcat([u0, u1, ..., u_(N-1)])
          X: horzcat([x1, x2, ..., x_N])
          Y: horzcat([y0, y1, ..., y_(N-1)])
  
      and
          x1, y0 <- f(x0, u0)
          x2, y1 <- f(x1, u1)
          ...
          x_N, y_(N-1) <- f(x_(N-1), u_(N-1))
  



";

%feature("docstring")  casadi::Function::mapaccum(const std::string &name,
int n, const std::vector< int > &accum_in, const std::vector< int >
&accum_out, const Dict &opts=Dict()) const  "

Create a mapaccumulated version of this function.

Suppose the function has a signature of:

::

     f: (x, u) -> (x_next , y )
  



The the mapaccumulated version has the signature:

::

     F: (x0, U) -> (X , Y )
  
      with
          U: horzcat([u0, u1, ..., u_(N-1)])
          X: horzcat([x1, x2, ..., x_N])
          Y: horzcat([y0, y1, ..., y_(N-1)])
  
      and
          x1, y0 <- f(x0, u0)
          x2, y1 <- f(x1, u1)
          ...
          x_N, y_(N-1) <- f(x_(N-1), u_(N-1))
  



";

%feature("docstring")  casadi::Function::mapaccum(const std::string &name,
int n, const std::vector< std::string > &accum_in, const std::vector<
std::string > &accum_out, const Dict &opts=Dict()) const  "

Create a mapaccumulated version of this function.

Suppose the function has a signature of:

::

     f: (x, u) -> (x_next , y )
  



The the mapaccumulated version has the signature:

::

     F: (x0, U) -> (X , Y )
  
      with
          U: horzcat([u0, u1, ..., u_(N-1)])
          X: horzcat([x1, x2, ..., x_N])
          Y: horzcat([y0, y1, ..., y_(N-1)])
  
      and
          x1, y0 <- f(x0, u0)
          x2, y1 <- f(x1, u1)
          ...
          x_N, y_(N-1) <- f(x_(N-1), u_(N-1))
  



";

%feature("docstring") casadi::Function::Function(const std::string &name,
const std::vector< SX > &arg, const std::vector< SX > &res, const Dict
&opts=Dict()) "

Construct an SX function.

";

%feature("docstring") casadi::Function::Function(const std::string &name,
const std::vector< SX > &arg, const std::vector< SX > &res, const
std::vector< std::string > &argn, const std::vector< std::string > &resn,
const Dict &opts=Dict()) "

Construct an SX function.

";

%feature("docstring") casadi::Function::Function(const std::string &name,
const std::map< std::string, SX > &dict, const std::vector< std::string >
&argn, const std::vector< std::string > &resn, const Dict &opts=Dict()) "

Construct an SX function.

";

%feature("docstring") casadi::Function::Function(const std::string &name,
const std::vector< MX > &arg, const std::vector< MX > &res, const Dict
&opts=Dict()) "

Construct an MX function.

";

%feature("docstring") casadi::Function::Function(const std::string &name,
const std::vector< MX > &arg, const std::vector< MX > &res, const
std::vector< std::string > &argn, const std::vector< std::string > &resn,
const Dict &opts=Dict()) "

Construct an MX function.

";

%feature("docstring") casadi::Function::Function(const std::string &name,
const std::map< std::string, MX > &dict, const std::vector< std::string >
&argn, const std::vector< std::string > &resn, const Dict &opts=Dict()) "

Construct an MX function.

";

%feature("docstring") casadi::Function::Function() "

Default constructor, null pointer.

";

%feature("docstring") casadi::Function::Function(const std::string &fname) "

Construct from a file.

";

%feature("docstring")  casadi::Function::type_name() const  "

Get type name.

";

%feature("docstring")  casadi::Function::numel_in() const  "

Get number of input elements.

For a particular input or for all of the inputs

";

%feature("docstring")  casadi::Function::numel_in(int ind) const  "

Get number of input elements.

For a particular input or for all of the inputs

";

%feature("docstring")  casadi::Function::numel_in(const std::string &iname)
const  "

Get number of input elements.

For a particular input or for all of the inputs

";

%feature("docstring")  casadi::Function::get_function() const  "

";

%feature("docstring")  casadi::Function::get_function(const std::string
&name) const  "

";

%feature("docstring")  casadi::SharedObject::is_null() const  "

Is a null pointer?

";

%feature("docstring")  casadi::Function::forward(int nfwd) const  "

Get a function that calculates nfwd forward derivatives.

Returns a function with n_in + n_out + n_in inputs and nfwd outputs. The
first n_in inputs correspond to nondifferentiated inputs. The next n_out
inputs correspond to nondifferentiated outputs. and the last n_in inputs
correspond to forward seeds, stacked horizontally The n_out outputs
correspond to forward sensitivities, stacked horizontally. * (n_in = n_in(),
n_out = n_out())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring")  casadi::Function::n_out() const  "

Get the number of function outputs.

";

%feature("docstring")  casadi::Function::getAtomicInput(int k) const  "

Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::Function::index_in(const std::string &name)
const  "

Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLPSOL_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::assert_size_out(int i, int nrow,
int ncol) const  "

Assert that an output dimension is equal so some given value.

";

%feature("docstring") casadi::Function::~Function "

To resolve ambiguity on some compilers.

Destructor

";

%feature("docstring")  casadi::Function::index_out(const std::string &name)
const  "

Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLPSOL_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::free_mx() const  "

Get all the free variables of the function.

";

%feature("docstring")  casadi::Function::size_out(int ind) const  "

Get output dimension.

";

%feature("docstring")  casadi::Function::size_out(const std::string &oname)
const  "

Get output dimension.

";

%feature("docstring")  casadi::Function::slice(const std::string &name,
const std::vector< int > &order_in, const std::vector< int > &order_out,
const Dict &opts=Dict()) const  "

returns a new function with a selection of inputs/outputs of the original

";

%feature("docstring")  casadi::Function::mapsum(const std::vector< MX >
&arg, const std::string &parallelization="serial") const  "

Evaluate symbolically in parallel and sum (matrix graph)

Parameters:
-----------

parallelization:  Type of parallelization used: unroll|serial|openmp

";

%feature("docstring")  casadi::Function::nnz_out() const  "

Get number of output nonzeros.

For a particular output or for all of the outputs

";

%feature("docstring")  casadi::Function::nnz_out(int ind) const  "

Get number of output nonzeros.

For a particular output or for all of the outputs

";

%feature("docstring")  casadi::Function::nnz_out(const std::string &oname)
const  "

Get number of output nonzeros.

For a particular output or for all of the outputs

";

%feature("docstring")  casadi::Function::sparsity_jac(int iind, int oind,
bool compact=false, bool symmetric=false) const  "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::sparsity_jac(const std::string
&iind, int oind=0, bool compact=false, bool symmetric=false) const  "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::sparsity_jac(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) const  "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::sparsity_jac(const std::string
&iind, const std::string &oind, bool compact=false, bool symmetric=false)
const  "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::sparsity_jac(int iind=0) const  "

[INTERNAL] ";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=casadi::userOut(), bool trailing_newline=true) const  "

Print a description of the object.

";

%feature("docstring")  casadi::Function::hessian(int iind=0, int oind=0) "

[DEPRECATED] Alias of Function::jacobian_old This function is of internal
character and should be avoided, if possible. The preferred way is to use
unction::factory instead. This function will change behavior in the next
version of CasADi.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
int oind=0) "

[DEPRECATED] Alias of Function::jacobian_old This function is of internal
character and should be avoided, if possible. The preferred way is to use
unction::factory instead. This function will change behavior in the next
version of CasADi.

";

%feature("docstring")  casadi::Function::hessian(int iind, const std::string
&oind) "

[DEPRECATED] Alias of Function::jacobian_old This function is of internal
character and should be avoided, if possible. The preferred way is to use
unction::factory instead. This function will change behavior in the next
version of CasADi.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
const std::string &oind) "

[DEPRECATED] Alias of Function::jacobian_old This function is of internal
character and should be avoided, if possible. The preferred way is to use
unction::factory instead. This function will change behavior in the next
version of CasADi.

";

%feature("docstring")  casadi::Function::expand() const  "

Expand a function to SX.

";

%feature("docstring")  casadi::Function::expand(const std::string &name,
const Dict &opts=Dict()) const  "

Expand a function to SX.

";

%feature("docstring")  casadi::Function::factory(const std::string &name,
const std::vector< std::string > &s_in, const std::vector< std::string >
&s_out, const AuxOut &aux=AuxOut(), const Dict &opts=Dict()) const  "

";

%feature("docstring")  casadi::Function::checkout() const  "

Checkout a memory object.

";

%feature("docstring")  casadi::Function::print_option(const std::string
&name, std::ostream &stream=casadi::userOut()) const  "

Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::Function::fullJacobian() "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements). Legacy function: To be deprecated.

";

%feature("docstring")  casadi::Function::hessian_old(int iind, int oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output Legacy function: To be deprecated in a future
version of CasADi. Exists only for compatibility with Function::hessian pre-
CasADi 3.2

";

%feature("docstring")  casadi::Function::map(const std::string &name, const
std::string &parallelization, int n, const std::vector< int > &reduce_in,
const std::vector< int > &reduce_out, const Dict &opts=Dict()) const  "

Map with reduction A subset of the inputs are non-repeated and a subset of
the outputs summed up.

";

%feature("docstring")  casadi::Function::map(const std::string &name, const
std::string &parallelization, int n, const std::vector< std::string >
&reduce_in, const std::vector< std::string > &reduce_out, const Dict
&opts=Dict()) const  "

Map with reduction A subset of the inputs are non-repeated and a subset of
the outputs summed up.

";

%feature("docstring")  casadi::Function::map(int n, const std::string
&parallelization="serial") const  "

Create a mapped version of this function.

Suppose the function has a signature of:

::

     f: (a, p) -> ( s )
  



The the mapped version has the signature:

::

     F: (A, P) -> (S )
  
      with
          A: horzcat([a0, a1, ..., a_(N-1)])
          P: horzcat([p0, p1, ..., p_(N-1)])
          S: horzcat([s0, s1, ..., s_(N-1)])
      and
          s0 <- f(a0, p0)
          s1 <- f(a1, p1)
          ...
          s_(N-1) <- f(a_(N-1), p_(N-1))
  



Parameters:
-----------

parallelization:  Type of parallelization used: unroll|serial|openmp

";

%feature("docstring")  casadi::Function::sx_in(int iind) const  "

Get symbolic primitives equivalent to the input expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring")  casadi::Function::sx_in(const std::string &iname)
const  "

Get symbolic primitives equivalent to the input expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring")  casadi::Function::sx_in() const  "

Get symbolic primitives equivalent to the input expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring")  casadi::Function::size1_in(int ind) const  "

Get input dimension.

";

%feature("docstring")  casadi::Function::size1_in(const std::string &iname)
const  "

Get input dimension.

";

%feature("docstring")  casadi::PrintableObject< SharedObject
>::getRepresentation() const "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::Function::n_nodes() const  "

Number of nodes in the algorithm.

";

%feature("docstring")  casadi::Function::conic_debug(const std::string
&filename) const  "

Generate native code in the interfaced language for debugging

";

%feature("docstring")  casadi::Function::conic_debug(std::ostream &file)
const  "

Generate native code in the interfaced language for debugging

";

%feature("docstring")  casadi::Function::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::Function::is_a(const std::string &type, bool
recursive=true) const  "

Check if the function is of a particular type Optionally check if name
matches one of the base classes (default true)

";

%feature("docstring")  casadi::Function::name_in() const  "

Get input scheme.

";

%feature("docstring")  casadi::Function::name_in(int ind) const  "

Get input scheme name by index.

";

%feature("docstring")  casadi::Function::mx_in(int ind) const  "

Get symbolic primitives equivalent to the input expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring")  casadi::Function::mx_in(const std::string &iname)
const  "

Get symbolic primitives equivalent to the input expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring")  casadi::Function::mx_in() const  "

Get symbolic primitives equivalent to the input expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring")  casadi::Function::reverse(int nadj) const  "

Get a function that calculates nadj adjoint derivatives.

Returns a function with n_in + n_out + n_out inputs and n_in outputs. The
first n_in inputs correspond to nondifferentiated inputs. The next n_out
inputs correspond to nondifferentiated outputs. and the last n_out inputs
correspond to adjoint seeds, stacked horizontally The n_in outputs
correspond to adjoint sensitivities, stacked horizontally. * (n_in = n_in(),
n_out = n_out())

(n_in = n_in(), n_out = n_out())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::Function "

General function.

A general function $f$ in casadi can be multi-input, multi-output. Number of
inputs: nin n_in() Number of outputs: nout n_out()  We can view this
function as a being composed of a ( nin, nout) grid of single-input, single-
output primitive functions. Each such primitive function $f_ {i, j}
\\\\forall i \\\\in [0, nin-1], j \\\\in [0, nout-1]$ can map as $\\\\mathbf
{R}^{n, m}\\\\to\\\\mathbf{R}^{p, q}$, in which n, m, p, q can take
different values for every (i, j) pair.  When passing input, you specify
which partition $i$ is active. You pass the numbers vectorized, as a vector
of size $(n*m)$. When requesting output, you specify which partition $j$ is
active. You get the numbers vectorized, as a vector of size $(p*q)$.  To
calculate Jacobians, you need to have $(m=1, q=1)$.

Write the Jacobian as $J_ {i, j} = \\\\nabla f_{i, j} = \\\\frac
{\\\\partial f_{i, j}(\\\\vec{x})}{\\\\partial \\\\vec{x}}$.

We have the following relationships for function mapping from a row vector
to a row vector:

$ \\\\vec {s}_f = \\\\nabla f_{i, j} . \\\\vec{v}$ $ \\\\vec {s}_a =
(\\\\nabla f_{i, j})^T . \\\\vec{w}$

Some quantities in these formulas must be transposed: input col: transpose $
\\\\vec {v} $ and $\\\\vec{s}_a$ output col: transpose $ \\\\vec {w} $ and
$\\\\vec{s}_f$  NOTE: Functions are allowed to modify their input arguments
when evaluating: implicitFunction, IDAS solver Further releases may disallow
this.

Joel Andersson >List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Custom input     | casadi::Function |
|                  |                 | scheme           | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Custom output    | casadi::Function |
|                  |                 | scheme           | Internal         |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

C++ includes: function.hpp ";

%feature("docstring")  casadi::Function::set_jac_sparsity(const Sparsity
&sp, int iind, int oind, bool compact=false) "

[DEPRECATED] Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::set_jac_sparsity(const Sparsity
&sp, const std::string &iind, int oind, bool compact=false) "

[DEPRECATED] Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::set_jac_sparsity(const Sparsity
&sp, int iind, const std::string &oind, bool compact=false) "

[DEPRECATED] Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::set_jac_sparsity(const Sparsity
&sp, const std::string &iind, const std::string &oind, bool compact=false) "

[DEPRECATED] Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::tangent(int iind=0, int oind=0) "

[DEPRECATED] Use Function::factory instead

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
int oind=0) "

[DEPRECATED] Use Function::factory instead

";

%feature("docstring")  casadi::Function::tangent(int iind, const std::string
&oind) "

[DEPRECATED] Use Function::factory instead

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
const std::string &oind) "

[DEPRECATED] Use Function::factory instead

";

%feature("docstring")  casadi::Function::print_free(std::ostream
&stream=casadi::userOut()) const  "

Print free variables.

";

%feature("docstring")  casadi::Function::getAtomicInputReal(int k) const  "

Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::Function::setJacobian(const Function &jac,
int iind=0, int oind=0, bool compact=false) "

[DEPRECATED] Set the Jacobian function of output oind with respect to input
iind NOTE: Does not take ownership, only weak references to the Jacobians
are kept internally

";

%feature("docstring")  casadi::Function::generate(const std::string &fname,
const Dict &opts=Dict()) const  "

Export / Generate C code for the function.

";

%feature("docstring")  casadi::Function::generate(const Dict &opts=Dict())
const  "

Export / Generate C code for the function.

";

%feature("docstring")  casadi::Function::rootfinder_fun() const  "

[DEPRECATED] Use oracle() instead

";

%feature("docstring")  casadi::Function::has_free() const  "

Does the function have free variables.

";

%feature("docstring")  casadi::Function::assert_size_in(int i, int nrow, int
ncol) const  "

Assert that an input dimension is equal so some given value.

";

%feature("docstring")  casadi::Function::getAtomicOutput(int k) const  "

Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::Function::release(int mem) const  "

Release a memory object.

";

%feature("docstring")  casadi::Function::size_in(int ind) const  "

Get input dimension.

";

%feature("docstring")  casadi::Function::size_in(const std::string &iname)
const  "

Get input dimension.

";

%feature("docstring")  casadi::Function::call(const std::vector< DM > &arg,
std::vector< DM > &output_res, bool always_inline=false, bool
never_inline=false) const  "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< SX > &arg,
std::vector< SX > &output_res, bool always_inline=false, bool
never_inline=false) const  "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< MX > &arg,
std::vector< MX > &output_res, bool always_inline=false, bool
never_inline=false) const  "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const DMDict &arg, DMDict
&output_res, bool always_inline=false, bool never_inline=false) const  "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const SXDict &arg, SXDict
&output_res, bool always_inline=false, bool never_inline=false) const  "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const MXDict &arg, MXDict
&output_res, bool always_inline=false, bool never_inline=false) const  "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::size2_out(int ind) const  "

Get output dimension.

";

%feature("docstring")  casadi::Function::size2_out(const std::string &oname)
const  "

Get output dimension.

";

%feature("docstring")  casadi::Function::size1_out(int ind) const  "

Get output dimension.

";

%feature("docstring")  casadi::Function::size1_out(const std::string &oname)
const  "

Get output dimension.

";

%feature("docstring")  casadi::Function::generate_lifted(Function
&output_vdef_fcn, Function &output_vinit_fcn) const  "

Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::Function::sparsity_in(int ind) const  "

Get sparsity of a given input.

";

%feature("docstring")  casadi::Function::sparsity_in(const std::string
&iname) const  "

Get sparsity of a given input.

";

%feature("docstring")  casadi::Function::which_depends(const std::string
&s_in, const std::vector< std::string > &s_out, int order=1, bool tr=false)
const  "

Which variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::Function::getWorkSize() const  "

Get the length of the work vector.

";

%feature("docstring")  casadi::Function::jacobian_old(int iind, int oind,
bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output Legacy function: To be deprecated in a future
version of CasADi. Exists only for compatibility with Function::jacobian
pre-CasADi 3.2

";

%feature("docstring")  casadi::Function::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::Function::print_options(std::ostream
&stream=casadi::userOut()) const  "

Print options to a stream.

";

%feature("docstring")  casadi::Function::size2_in(int ind) const  "

Get input dimension.

";

%feature("docstring")  casadi::Function::size2_in(const std::string &iname)
const  "

Get input dimension.

";

%feature("docstring")  casadi::Function::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::Function::has_function(const std::string
&fname) const  "

";

%feature("docstring")  casadi::Function::sx_out(int oind) const  "

Get symbolic primitives equivalent to the output expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring")  casadi::Function::sx_out(const std::string &oname)
const  "

Get symbolic primitives equivalent to the output expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring")  casadi::Function::sx_out() const  "

Get symbolic primitives equivalent to the output expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring")  casadi::Function::default_in(int ind) const  "

Get default input value (NOTE: constant reference)

";

%feature("docstring")  casadi::PrintableObject< SharedObject
>::getDescription() const "

Return a string with a description (for SWIG)

";


// File: classcasadi_1_1GenericCall.xml


// File: classcasadi_1_1GenericExpression.xml
%feature("docstring")  floor(const ExType &x) "

Round down to nearest integer.

";

%feature("docstring")  acos(const ExType &x) "

Arc cosine.

";

%feature("docstring")  if_else_zero(const ExType &x, const ExType &y) "

Conditional assignment.

";

%feature("docstring")  exp(const ExType &x) "

Exponential function.

";

%feature("docstring")  ceil(const ExType &x) "

Round up to nearest integer.

";

%feature("docstring")  printme(const ExType &x, const ExType &y) "

Debug printing.

";

%feature("docstring")  cos(const ExType &x) "

Cosine.

";

%feature("docstring")  asinh(const ExType &x) "

Inverse hyperbolic sine.

";

%feature("docstring")  atanh(const ExType &x) "

Inverse hyperbolic tangent.

";

%feature("docstring")  tan(const ExType &x) "

Tangent.

";

%feature("docstring")  acosh(const ExType &x) "

Inverse hyperbolic cosine.

";

%feature("docstring")  erfinv(const ExType &x) "

Invers error function.

";

%feature("docstring")  fmod(const ExType &x, const ExType &y) "

Remainder after division.

";

%feature("docstring")  constpow(const ExType &x, const ExType &y) "

Elementwise power with const power.

";

%feature("docstring")  log(const ExType &x) "

Natural logarithm.

";

%feature("docstring")  log10(const ExType &x) "

Base-10 logarithm.

";

%feature("docstring")  copysign(const ExType &x, const ExType &y) "

Copy sign.

";

%feature("docstring")  abs(const ExType &x) "

Absolute value.

";

%feature("docstring")  fmax(const ExType &x, const ExType &y) "

Largest of two values.

";

%feature("docstring")  sqrt(const ExType &x) "

Square root.

";

%feature("docstring")  sign(const ExType &x) "

Sine function sign(x) := -1 for x<0 sign(x) := 1 for x>0, sign(0) := 0
sign(NaN) := NaN

";

%feature("docstring")  logic_and(const ExType &x, const ExType &y) "

Logical and, alternative syntax.

";

%feature("docstring")  fmin(const ExType &x, const ExType &y) "

Smallest of two values.

";

%feature("docstring")  erf(const ExType &x) "

Error function.

";

%feature("docstring")  pow(const ExType &x, const ExType &y) "

Elementwise power.

";

%feature("docstring")  atan2(const ExType &x, const ExType &y) "

Two argument arc tangent.

";

%feature("docstring")  logic_or(const ExType &x, const ExType &y) "

Logical or, alterntive syntax.

";

%feature("docstring")  fabs(const ExType &x) "

Absolute value.

";

%feature("docstring")  sq(const ExType &x) "

Square.

";

%feature("docstring")  sinh(const ExType &x) "

Hyperbolic sine.

";

%feature("docstring")  tanh(const ExType &x) "

Hyperbolic tangent.

";

%feature("docstring")  cosh(const ExType &x) "

Hyperbolic cosine.

";

%feature("docstring")  logic_not(const ExType &x) "

Logical not, alternative syntax.

";

%feature("docstring")  atan(const ExType &x) "

Arc tangent.

";

%feature("docstring") casadi::GenericExpression "

Expression interface.

This is a common base class for SX, MX and Matrix<>, introducing a uniform
syntax and implementing common functionality using the curiously recurring
template pattern (CRTP) idiom. Joel Andersson

C++ includes: generic_expression.hpp ";

%feature("docstring")  is_equal(const ExType &x, const ExType &y, int
depth=0) "

Check if two nodes are equivalent up to a given depth. Depth=0 checks if the
expressions are identical, i.e. points to the same node.

a = x*x b = x*x

a.is_equal(b, 0) will return false, but a.is_equal(b, 1) will return true

";

%feature("docstring")  sin(const ExType &x) "

Sine.

";

%feature("docstring")  asin(const ExType &x) "

Arc sine.

";


// File: classcasadi_1_1GenericExternal.xml
%feature("docstring")  casadi::FunctionInternal::size_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::alloc_memory() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::map_mx(const std::vector<
std::vector< MX > > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::map_mx(const std::vector<
MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::print(std::ostream &stream)
const override "

[INTERNAL]  Print.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::GenericExternal::_set_temp "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(int nadj,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::FunctionInternal::replaceAdjSeed(const
std::vector< std::vector< M > > &aseed) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(int ind) const
"

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(const
std::string &iname) const  "

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::FunctionInternal::checkInputs() const  "

[INTERNAL]  Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::FunctionInternal::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::sp_fwd(const bvec_t **arg,
bvec_t **res, int *iw, bvec_t *w, int mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::FunctionInternal::print_free(std::ostream
&stream) const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::FunctionInternal::tangent(int iind, int oind)
"

[INTERNAL]  Return tangent function.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring") casadi::GenericExternal "

[INTERNAL] C++ includes: external_impl.hpp ";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::hess_sx(int iind=0, int
oind=0) "

[INTERNAL]  Hessian expression.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(int iind,
int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::jacobian(int iind, int
oind, bool compact, bool symmetric) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::name_out(int ind) const  "

[INTERNAL]  Get output scheme name by index.

";

%feature("docstring")  casadi::FunctionInternal::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< int > &order_in, const std::vector< int >
&order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring") casadi::GenericExternal::_eval "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring") casadi::GenericExternal::_eval "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring") casadi::GenericExternal::_eval "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::size_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::GenericExternal::_setup "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::verbose() const  "

[INTERNAL]  Verbose mode?

";

%feature("docstring")  casadi::FunctionInternal::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::log(const std::string &msg)
const  "

[INTERNAL]  Log the status of the solver.

";

%feature("docstring")  casadi::FunctionInternal::log(const std::string &fcn,
const std::string &msg) const  "

[INTERNAL]  Log the status of the solver, function given.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOutput(int k)
const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::get_function() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring") casadi::GenericExternal::~GenericExternal "

[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::init_memory(void *mem)
const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::External::get_reverse(const std::string
&name, int nadj, const std::vector< std::string > &i_names, const
std::vector< std::string > &o_names, const Dict &opts) const override "

[INTERNAL]  Reverse mode derivatives.

";

%feature("docstring")
casadi::FunctionInternal::generateDeclarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring") casadi::GenericExternal::GenericExternal(const
std::string &name, const Importer &li) "

[INTERNAL]  Constructor.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::FunctionInternal::replaceFwdSeed(const
std::vector< std::vector< M > > &fseed) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::replaceRes(const
std::vector< M > &res) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::set_jac_sparsity(const
Sparsity &sp, int iind, int oind, bool compact) "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::jit_dependencies(const
std::string &fname) "

[INTERNAL]   Jit dependencies.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::forward(int nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::FunctionInternal::replaceArg(const
std::vector< M > &arg, bool hcat=false) const  "

[INTERNAL]  Replace 0-by-0 inputs.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::getJacobian(const
std::string &name, int iind, int oind, bool compact, bool symmetric, const
Dict &opts) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::getWorkSize() const  "

[INTERNAL]  Get the length of the work vector.

";

%feature("docstring")  casadi::FunctionInternal::getAlgorithmSize() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring") casadi::GenericExternal::_call "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring") casadi::GenericExternal::_call "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::matchingArg(const
std::vector< M > &arg, bool hcat=false) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::External::addDependency(CodeGenerator &g)
const override "

[INTERNAL]  Add a dependent function.

";

%feature("docstring")  casadi::FunctionInternal::n_out() const  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::External::get_name_out(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::External::generateFunction(CodeGenerator &g,
const std::string &fname, bool decl_static) const override "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::hasDerivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInputReal(int k)
const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::tang_sx(int iind=0, int
oind=0) "

[INTERNAL]  Tangent expression.

";

%feature("docstring")  casadi::FunctionInternal::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FunctionInternal::symbolicOutput(const
std::vector< MX > &arg) "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::FunctionInternal::getTangent(const
std::string &name, int iind, int oind, const Dict &opts) "

[INTERNAL]  Return tangent function.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(int nfwd) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::finalize(const Dict &opts)
"

[INTERNAL]  Finalize the object creation This function, which visits the
class hierarchy in reverse order is run after init() has been completed.

";

%feature("docstring")  casadi::FunctionInternal::checkArg(const std::vector<
M > &arg, bool hcat=false) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::n_in() const  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::External::get_n_reverse() const override "

[INTERNAL]  Reverse mode derivatives.

";

%feature("docstring")  casadi::External::factory(const std::string &name,
const std::vector< std::string > &s_in, const std::vector< std::string >
&s_out, const Function::AuxOut &aux, const Dict &opts) const override "

[INTERNAL] ";

%feature("docstring")  casadi::External::type_name() const override "

[INTERNAL]  Get type name.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::setJacobian(const Function
&jac, int iind, int oind, bool compact) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::FunctionInternal::tang_mx(int iind=0, int
oind=0) "

[INTERNAL]  Tangent expression.

";

%feature("docstring")  casadi::FunctionInternal::reverse(int nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::grad_sx(int iind=0, int
oind=0) "

[INTERNAL]  Gradient expression.

";

%feature("docstring")  casadi::FunctionInternal::repr(std::ostream &stream)
const override "

[INTERNAL]  Print.

";

%feature("docstring")  casadi::FunctionInternal::matchingRes(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

";

%feature("docstring")  casadi::FunctionInternal::getGradient(const
std::string &name, int iind, int oind, const Dict &opts) "

[INTERNAL]  Return gradient function.

";

%feature("docstring")  casadi::FunctionInternal::get_options() const  "

[INTERNAL]  Options.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::FunctionInternal::jac_sx(int iind=0, int
oind=0, const Dict &opts=Dict()) "

[INTERNAL]  Jacobian expression.

";

%feature("docstring") casadi::GenericExternal::_get_stats "

[INTERNAL]  Get all statistics

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(int nadj) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::clear_memory() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOperation(int k)
const  "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::addShorthand(CodeGenerator
&g, const std::string &name) const  "

[INTERNAL]  Generate shorthand macro.

";

%feature("docstring")  casadi::External::get_forward(const std::string
&name, int nfwd, const std::vector< std::string > &i_names, const
std::vector< std::string > &o_names, const Dict &opts) const override "

[INTERNAL]  Forward mode derivatives.

";

%feature("docstring")  casadi::External::getFullJacobian(const std::string
&name, const std::vector< std::string > &i_names, const std::vector<
std::string > &o_names, const Dict &opts) override "

[INTERNAL]  Full Jacobian.

";

%feature("docstring")  casadi::FunctionInternal::default_in(int ind) const
"

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::External::get_n_forward() const override "

[INTERNAL]  Forward mode derivatives.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, int *iw, SXElem *w, int mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::FunctionInternal::simplifiedCall() const  "

[INTERNAL]  Use simplified signature.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInput(int k) const
"

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::get_stats(void *mem) const
"

[INTERNAL]  Get all statistics

";

%feature("docstring")  casadi::FunctionInternal::generateMeta(CodeGenerator
&g, const std::string &fname) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::External::codegen_name(const CodeGenerator
&g) const override "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::FunctionInternal::jac_mx(int iind=0, int
oind=0, const Dict &opts=Dict()) "

[INTERNAL]  Jacobian expression.

";

%feature("docstring")  casadi::FunctionInternal::sx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::name_in(int ind) const  "

[INTERNAL]  Get input scheme name by index.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::GenericExternal::_set_work "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::External::get_n_out() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::eval_name() const  "

[INTERNAL]  Get name of the evaluation function.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::hessian(int iind, int oind)
"

[INTERNAL]  Return Hessian function.

";

%feature("docstring")  casadi::External::hasFullJacobian() const override "

[INTERNAL]  Full Jacobian.

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::GenericExternal::n_mem() const override "

[INTERNAL]  Maximum number of memory objects.

";

%feature("docstring")  casadi::FunctionInternal::construct(const Dict &opts)
"

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::External::get_name_in(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::GenericExternal::get_sparsity_in(int i)
override "

[INTERNAL]  Retreive sparsities.

";

%feature("docstring")  casadi::FunctionInternal::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::getPartition(int iind, int
oind, Sparsity &D1, Sparsity &D2, bool compact, bool symmetric, bool
allow_forward, bool allow_reverse) "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::name() const  "

[INTERNAL]  Name of the function.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(int iind, int
oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::symbolicFwdSeed(int nfwd,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(int ind) const
"

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(const
std::string &iname) const  "

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::External::get_n_in() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::simple(const double *arg,
double *res) const  "

[INTERNAL]  Evaluate numerically, simplied syntax.

";

%feature("docstring")  casadi::FunctionInternal::eval(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::GenericExternal::get_sparsity_out(int i)
override "

[INTERNAL]  Retreive sparsities.

";

%feature("docstring")  casadi::FunctionInternal::free_memory(void *mem)
const  "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::gradient(int iind, int
oind) "

[INTERNAL]  Return gradient function.

";

%feature("docstring")  casadi::FunctionInternal::getHessian(int iind, int
oind) "

[INTERNAL]  Return Hessian function.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sp_rev(bvec_t **arg, bvec_t
**res, int *iw, bvec_t *w, int mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsityGen(int iind,
int oind, bool symmetric, int gr_i=1, int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::grad_mx(int iind=0, int
oind=0) "

[INTERNAL]  Gradient expression.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, int order, bool
tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::size2_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::generateBody(CodeGenerator
&g) const  "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring")  casadi::FunctionInternal::fullJacobian() "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::GenericExternal::init(const Dict &opts)
override "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::set_temp(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::checkRes(const std::vector<
M > &res) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

";


// File: classcasadi_1_1GenericMatrix.xml


/*  Construct symbolic primitives  */

/* The \"sym\" function is intended to work in a similar way as \"sym\" used
in the Symbolic Toolbox for Matlab but instead creating a CasADi symbolic
primitive.

*/ %feature("docstring")  sum2(const MatType &x) "

Return a column-wise summation of elements.

";

%feature("docstring")  sum1(const MatType &x) "

Return a row-wise summation of elements.

";

%feature("docstring")  mrdivide(const MatType &x, const MatType &n) "

Matrix divide (cf. slash '/' in MATLAB)

";

%feature("docstring")  if_else(const MatType &cond, const MatType &if_true,
const MatType &if_false, bool short_circuit=false) "

Branching on MX nodes Ternary operator, \"cond ? if_true : if_false\".

";

%feature("docstring")  casadi::GenericMatrix< MatType >::tril2symm(const
MatType &a) "

Convert a lower triangular matrix to a symmetric one.

";

%feature("docstring")  det(const MatType &A) "

Matrix determinant (experimental)

";

%feature("docstring")  casadi::GenericMatrix< MatType >::nnz_diag() const  "

Get get the number of non-zeros on the diagonal.

";

%feature("docstring")  conditional(const MatType &ind, const std::vector<
MatType > &x, const MatType &x_default, bool short_circuit=false) "

Create a switch.

If the condition

Parameters:
-----------

ind:  evaluates to the integer k, where 0<=k<f.size(), then x[k] will be
returned, otherwise

x_default:  will be returned.

";

%feature("docstring")  pinv(const MatType &A) "

Computes the Moore-Penrose pseudo-inverse.

If the matrix A is fat (size1<size2), mul(A, pinv(A)) is unity.

pinv(A)' = (AA')^(-1) A

If the matrix A is slender (size1>size2), mul(pinv(A), A) is unity.

pinv(A) = (A'A)^(-1) A'

";

%feature("docstring")  pinv(const MatType &A, const std::string &lsolver,
const Dict &dict=Dict()) "

Computes the Moore-Penrose pseudo-inverse.

If the matrix A is fat (size1>size2), mul(A, pinv(A)) is unity. If the
matrix A is slender (size2<size1), mul(pinv(A), A) is unity.

";

%feature("docstring")  solve(const MatType &A, const MatType &b) "

Solve a system of equations: A*x = b The solve routine works similar to
Matlab's backslash when A is square and nonsingular. The algorithm used is
the following:

A simple forward or backward substitution if A is upper or lower triangular

If the linear system is at most 3-by-3, form the inverse via minor expansion
and multiply

Permute the variables and equations as to get a (structurally) nonzero
diagonal, then perform a QR factorization without pivoting and solve the
factorized system.

Note 1: If there are entries of the linear system known to be zero, these
will be removed. Elements that are very small, or will evaluate to be zero,
can still cause numerical errors, due to the lack of pivoting (which is not
possible since cannot compare the size of entries)

Note 2: When permuting the linear system, a BLT (block lower triangular)
transformation is formed. Only the permutation part of this is however used.
An improvement would be to solve block-by-block if there are multiple BLT
blocks.

";

%feature("docstring")  solve(const MatType &A, const MatType &b, const
std::string &lsolver, const Dict &dict=Dict()) "

Solve a system of equations: A*x = b.

";

%feature("docstring")  which_depends(const MatType &expr, const MatType
&var, int order, bool tr) "

Find out which variables enter with some order.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::get_row() const  "

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring")  print_operator(const MatType &xb, const std::vector<
std::string > &args) "

Get a string representation for a binary MatType, using custom arguments.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::linearize(const
MatType &f, const MatType &x, const MatType &x0) "

Linearize an expression.

";

%feature("docstring")  jacobian(const MatType &ex, const MatType &arg, const
Dict &opts=Dict()) "

Calculate Jacobian.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::is_dense() const  "

Check if the matrix expression is dense.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::nnz_lower() const
"

Get the number of non-zeros in the lower triangular half.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::rank1(const MatType
&A, const MatType &alpha, const MatType &x, const MatType &y) "

Make a rank-1 update to a matrix A Calculates A + 1/2 * alpha * x*y'.

";

%feature("docstring")  n_nodes(const MatType &A) "

Count number of nodes

";

%feature("docstring")  hessian(const MatType &ex, const MatType &arg) "

";

%feature("docstring")  hessian(const MatType &ex, const MatType &arg,
MatType &output_g) "

";

%feature("docstring")  nullspace(const MatType &A) "

Computes the nullspace of a matrix A.

Finds Z m-by-(m-n) such that AZ = 0 with A n-by-m with m > n

Assumes A is full rank

Inspired by Numerical Methods in Scientific Computing by Ake Bjorck

";

%feature("docstring")  substitute_inplace(const std::vector< MatType > &v,
std::vector< MatType > &inout_vdef, std::vector< MatType > &inout_ex, bool
reverse=false) "

Inplace substitution with piggyback expressions Substitute variables v out
of the expressions vdef sequentially, as well as out of a number of other
expressions piggyback.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::is_scalar(bool
scalar_and_dense=false) const  "

Check if the matrix expression is scalar.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::is_column() const
"

Check if the matrix is a column vector (i.e. size2()==1)

";

%feature("docstring")  casadi::GenericMatrix< MatType >::skew(const MatType
&a) "

Generate a skew symmetric matrix from a 3-vector.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::is_tril() const  "

Check if the matrix is lower triangular.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::colind(int col)
const  "

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::is_triu() const  "

Check if the matrix is upper triangular.

";

%feature("docstring")  gradient(const MatType &ex, const MatType &arg) "

Calculate Jacobian.

";

%feature("docstring")  unite(const MatType &A, const MatType &B) "

Unite two matrices no overlapping sparsity.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::dim() const  "

Get string representation of dimensions. The representation is (nrow x ncol
= numel | size)

";

%feature("docstring")  sum_square(const MatType &x) "

Calculate some of squares: sum_ij X_ij^2.

";

%feature("docstring")  inv(const MatType &A) "

Matrix inverse.

";

%feature("docstring")  inv(const MatType &A, const std::string &lsolver,
const Dict &options=Dict()) "

Matrix inverse.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::size1() const  "

Get the first dimension (i.e. number of rows)

";

%feature("docstring")  casadi::GenericMatrix< MatType >::size2() const  "

Get the second dimension (i.e. number of columns)

";

%feature("docstring")  norm_1(const MatType &x) "

1-norm

";

%feature("docstring")  norm_2(const MatType &x) "

2-norm

";

%feature("docstring")  forward(const std::vector< MatType > &ex, const
std::vector< MatType > &arg, const std::vector< std::vector< MatType > > &v,
const Dict &opts=Dict()) "

Forward directional derivative.

";

%feature("docstring")  diag(const MatType &A) "

Get the diagonal of a matrix or construct a diagonal When the input is
square, the diagonal elements are returned. If the input is vector- like, a
diagonal matrix is constructed with it.

";

%feature("docstring")  project(const MatType &A, const Sparsity &sp, bool
intersect=false) "

Create a new matrix with a given sparsity pattern but with the nonzeros
taken from an existing matrix.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::jtimes(const
MatType &ex, const MatType &arg, const MatType &v, bool tr=false) "

Calculate the Jacobian and multiply by a vector from the right This is
equivalent to mul(jacobian(ex, arg), v) or mul(jacobian(ex, arg).T, v) for
tr set to false and true respectively. If contrast to these expressions, it
will use directional derivatives which is typically (but not necessarily)
more efficient if the complete Jacobian is not needed and v has few rows.

";

%feature("docstring")  substitute(const MatType &ex, const MatType &v, const
MatType &vdef) "

Substitute variable v with expression vdef in an expression ex.

";

%feature("docstring")  substitute(const std::vector< MatType > &ex, const
std::vector< MatType > &v, const std::vector< MatType > &vdef) "

Substitute variable var with expression expr in multiple expressions.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::bilin(const MatType
&A, const MatType &x, const MatType &y) "

Calculate bilinear form x^T A y.

";

%feature("docstring")  mldivide(const MatType &x, const MatType &n) "

Matrix divide (cf. backslash '\\\\' in MATLAB)

";

%feature("docstring")  casadi::GenericMatrix< MatType >::get_colind() const
"

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::cross(const MatType
&a, const MatType &b, int dim=-1) "

Matlab's cross command.

";

%feature("docstring")  shared(std::vector< MatType > &ex, std::vector<
MatType > &v, std::vector< MatType > &vdef, const std::string
&v_prefix="v_", const std::string &v_suffix="") "

Extract shared subexpressions from an set of expressions.

";

%feature("docstring")  shared(const std::vector< MatType > &ex, std::vector<
MatType > &ex_output, std::vector< MatType > &v, std::vector< MatType >
&vdef, const std::string &v_prefix="v_", const std::string &v_suffix="") "

Extract shared subexpressions from an set of expressions.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::is_empty(bool
both=false) const  "

Check if the sparsity is empty, i.e. if one of the dimensions is zero (or
optionally both dimensions)

";

%feature("docstring")  casadi::GenericMatrix< MatType >::is_row() const  "

Check if the matrix is a row vector (i.e. size1()==1)

";

%feature("docstring")  casadi::GenericMatrix< MatType >::rank1(const MatType
&A, const MatType &alpha, const MatType &x, const MatType &y) "

Make a rank-1 update to a matrix A Calculates A + 1/2 * alpha * x*y'.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::inv_skew(const
MatType &a) "

Generate the 3-vector progenitor of a skew symmetric matrix.

";

%feature("docstring")  tangent(const MatType &ex, const MatType &arg) "

Calculate Jacobian.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::is_square() const
"

Check if the matrix expression is square.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::bilin(const MatType
&A, const MatType &x, const MatType &y) "

Calculate bilinear form x^T A y.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::jtimes(const
MatType &ex, const MatType &arg, const MatType &v, bool tr=false) "

Functions called by friend functions defined here

";

%feature("docstring")  simplify(const MatType &x) "

Simplify an expression.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::numel() const  "

Get the number of elements.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::linspace(const
MatType &a, const MatType &b, int nsteps) "

Matlab's linspace command.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::nnz() const  "

Get the number of (structural) non-zero elements.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::sym(const
std::string &name, int nrow=1, int ncol=1) "

Create an nrow-by-ncol symbolic primitive.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::sym(const
std::string &name, const std::pair< int, int > &rc) "

Construct a symbolic primitive with given dimensions.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::sym(const
std::string &name, const Sparsity &sp) "

Create symbolic primitive with a given sparsity pattern.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::sym(const
std::string &name, const Sparsity &sp, int p) "

Create a vector of length p with with matrices with symbolic primitives of
given sparsity.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::sym(const
std::string &name, int nrow, int ncol, int p) "

Create a vector of length p with nrow-by-ncol symbolic primitives.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::sym(const
std::string &name, const Sparsity &sp, int p, int r) "

Create a vector of length r of vectors of length p with symbolic primitives
with given sparsity.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::sym(const
std::string &name, int nrow, int ncol, int p, int r) "

Create a vector of length r of vectors of length p with nrow-by-ncol
symbolic primitives.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::row(int el) const
"

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring")  inv_minor(const MatType &A) "

Matrix inverse (experimental)

";

%feature("docstring")  casadi::GenericMatrix< MatType >::nnz_upper() const
"

Get the number of non-zeros in the upper triangular half.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::sparsity() const  "

Get the sparsity pattern.

";

%feature("docstring")  norm_inf(const MatType &x) "

Infinity-norm.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::mpower(const
MatType &x, const MatType &y) "

Functions called by friend functions defined here

";

%feature("docstring")  trace(const MatType &x) "

Matrix trace.

";

%feature("docstring")  einstein(const MatType &A, const MatType &B, const
MatType &C, const std::vector< int > &dim_a, const std::vector< int >
&dim_b, const std::vector< int > &dim_c, const std::vector< int > &a, const
std::vector< int > &b, const std::vector< int > &c) "

Compute any contraction of two dense tensors, using index/einstein notation
einstein(A, B, a, b, c) -> C.

Given two tensors, A and B, computes a third tensor C such that:

C_c = A_a * B_b

With a, b, c representing einstein indices. Instead of the classical index
labels i,j,k,... we employ -1,-2,-3,...

A, B, C are represented as CasADi vectors, with dim_a, dim_b, dim_c
indictating theire tensorial dimensions.

";

%feature("docstring")  einstein(const MatType &A, const MatType &B, const
std::vector< int > &dim_a, const std::vector< int > &dim_b, const
std::vector< int > &dim_c, const std::vector< int > &a, const std::vector<
int > &b, const std::vector< int > &c) "

Matrix power x^n.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::repsum(const
MatType &A, int n, int m=1) "

Given a repeated matrix, computes the sum of repeated parts.

";

%feature("docstring")  dot(const MatType &x, const MatType &y) "

Inner product of two matrices with x and y matrices of the same dimension.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::size() const  "

Get the shape.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::size(int axis)
const  "

Get the size along a particular dimensions.

";

%feature("docstring") casadi::GenericMatrix "

Matrix base class.

This is a common base class for MX and Matrix<>, introducing a uniform
syntax and implementing common functionality using the curiously recurring
template pattern (CRTP) idiom.  The class is designed with the idea that
\"everything is a matrix\", that is, also scalars and vectors. This
philosophy makes it easy to use and to interface in particularly with Python
and Matlab/Octave.  The syntax tries to stay as close as possible to the
ublas syntax when it comes to vector/matrix operations.  Index starts with
0. Index vec happens as follows: (rr, cc) -> k = rr+cc*size1() Vectors are
column vectors.  The storage format is Compressed Column Storage (CCS),
similar to that used for sparse matrices in Matlab, but unlike this format,
we do allow for elements to be structurally non-zero but numerically zero.
The sparsity pattern, which is reference counted and cached, can be accessed
with Sparsity& sparsity() Joel Andersson

C++ includes: generic_matrix.hpp ";

%feature("docstring")  polyval(const MatType &p, const MatType &x) "

Evaluate a polynomial with coefficients p in x.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::triu2symm(const
MatType &a) "

Convert a upper triangular matrix to a symmetric one.

";

%feature("docstring")  depends_on(const MatType &f, const MatType &arg) "

Check if expression depends on the argument The argument must be symbolic.

";

%feature("docstring")  symvar(const MatType &x) "

Get all symbols contained in the supplied expression Get all symbols on
which the supplied expression depends.

See:  SXFunction::getFree(), MXFunction::getFree()

";

%feature("docstring")  casadi::GenericMatrix< MatType >::is_vector() const
"

Check if the matrix is a row or column vector.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::mpower(const
MatType &x, const MatType &n) "

Matrix power x^n.

";

%feature("docstring")  norm_fro(const MatType &x) "

Frobenius norm.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::zeros(int nrow=1,
int ncol=1) "

Create a dense matrix or a matrix with specified sparsity with all entries
zero.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::zeros(const
Sparsity &sp) "

Create a dense matrix or a matrix with specified sparsity with all entries
zero.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::zeros(const
std::pair< int, int > &rc) "

Create a dense matrix or a matrix with specified sparsity with all entries
zero.

";

%feature("docstring")  reverse(const std::vector< MatType > &ex, const
std::vector< MatType > &arg, const std::vector< std::vector< MatType > > &v,
const Dict &opts=Dict()) "

Reverse directional derivative.

";

%feature("docstring")  expm_const(const MatType &A, const MatType &t) "

";

%feature("docstring")  expm(const MatType &A) "

";

%feature("docstring")  densify(const MatType &x) "

Make the matrix dense if not already.

";

%feature("docstring")  densify(const MatType &x, const MatType &val) "

Make the matrix dense and assign nonzeros to a value.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::linearize(const
MatType &f, const MatType &x, const MatType &x0) "

Functions called by friend functions defined here

";

%feature("docstring")  casadi::GenericMatrix< MatType >::ones(int nrow=1,
int ncol=1) "

Create a dense matrix or a matrix with specified sparsity with all entries
one.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::ones(const Sparsity
&sp) "

Create a dense matrix or a matrix with specified sparsity with all entries
one.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::ones(const
std::pair< int, int > &rc) "

Create a dense matrix or a matrix with specified sparsity with all entries
one.

";


// File: classcasadi_1_1GenericType.xml
%feature("docstring") casadi::GenericType "

Generic data type, can hold different types such as bool, int, string etc.

Joel Andersson

C++ includes: generic_type.hpp ";


// File: classcasadi_1_1GenericTypeBase.xml
%feature("docstring") casadi::GenericTypeBase::~GenericTypeBase "

[INTERNAL] ";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::GenericTypeBase::getType() const  "

[INTERNAL] ";

%feature("docstring")  casadi::SharedObjectInternal::print(std::ostream
&stream) const  "

[INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::SharedObjectInternal::repr(std::ostream
&stream) const  "

[INTERNAL]  Print a representation of the object.

";

%feature("docstring") casadi::GenericTypeBase "

[INTERNAL] C++ includes: generic_type_internal.hpp ";


// File: classcasadi_1_1GetNonzeros.xml


// File: classcasadi_1_1GetNonzerosSlice.xml


// File: classcasadi_1_1GetNonzerosSlice2.xml


// File: classcasadi_1_1GetNonzerosVector.xml


// File: classcasadi_1_1GlobalOptions.xml
%feature("docstring") casadi::GlobalOptions "

Collects global CasADi options.

Note to developers: use sparingly. Global options are - in general - a
rather bad idea

this class must never be instantiated. Access its static members directly
Joris Gillis

C++ includes: global_options.hpp ";


// File: classcasadi_1_1Horzcat.xml


// File: classcasadi_1_1HorzRepmat.xml


// File: classcasadi_1_1HorzRepsum.xml


// File: classcasadi_1_1Horzsplit.xml


// File: classcasadi_1_1ImplicitFixedStepIntegrator.xml
%feature("docstring")  casadi::FunctionInternal::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::generateBody(CodeGenerator
&g) const  "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInputReal(int k)
const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::ImplicitFixedStepIntegrator::get_options()
const override "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(int ind) const
"

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(const
std::string &iname) const  "

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(int nfwd) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::ImplicitFixedStepIntegrator::init(const Dict
&opts) override "

[INTERNAL]  Initialize stage.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::n_in() const  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::eval_name() const  "

[INTERNAL]  Get name of the evaluation function.

";

%feature("docstring")  casadi::FunctionInternal::n_out() const  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::Integrator::setStopTime(IntegratorMemory
*mem, double tf) const  "

[INTERNAL]  Set stop time for the integration.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::Integrator::type_name() const override "

[INTERNAL]  Get type name.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::_set_work "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FixedStepIntegrator::init_memory(void *mem)
const override "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::getJacobian(const
std::string &name, int iind, int oind, bool compact, bool symmetric, const
Dict &opts) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::Integrator::getDerivativeOptions(bool fwd)
const  "

[INTERNAL]  Set solver specific options to generated augmented integrators.

";

%feature("docstring")  casadi::FunctionInternal::tangent(int iind, int oind)
"

[INTERNAL]  Return tangent function.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::OracleFunction::jit_dependencies(const
std::string &fname) override "

[INTERNAL]  JIT for dependencies.

";

%feature("docstring")  casadi::FixedStepIntegrator::advance(IntegratorMemory
*mem, double t, double *x, double *z, double *q) const override "

[INTERNAL]  Advance solution in time.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::OracleFunction::print_fstats(const
OracleMemory *m) const  "

[INTERNAL]  Print statistics.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::_eval "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::_eval "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::_eval "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::grad_sx(int iind=0, int
oind=0) "

[INTERNAL]  Gradient expression.

";

%feature("docstring")  casadi::Integrator::get_sparsity_in(int i) override "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::forward(int nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::OracleFunction::get_stats(void *mem) const
override "

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsityGen(int iind,
int oind, bool symmetric, int gr_i=1, int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::replaceFwdSeed(const
std::vector< std::vector< M > > &fseed) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::symbolicOutput(const
std::vector< MX > &arg) "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::replaceRes(const
std::vector< M > &res) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn, const std::string &fname, bool jit=false) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOutput(int k)
const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator "



>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| augmented_option | OT_DICT         | Options to be    | casadi::Implicit |
| s                |                 | passed down to   | FixedStepIntegra |
|                  |                 | the augmented    | tor              |
|                  |                 | integrator, if   |                  |
|                  |                 | one is           |                  |
|                  |                 | constructed.     |                  |
+------------------+-----------------+------------------+------------------+
| common_options   | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | auto-generated   | nction           |
|                  |                 | functions        |                  |
+------------------+-----------------+------------------+------------------+
| expand           | OT_BOOL         | Replace MX with  | casadi::Implicit |
|                  |                 | SX expressions   | FixedStepIntegra |
|                  |                 | in problem       | tor              |
|                  |                 | formulation      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| grid             | OT_DOUBLEVECTOR | Time grid        | casadi::Implicit |
|                  |                 |                  | FixedStepIntegra |
|                  |                 |                  | tor              |
+------------------+-----------------+------------------+------------------+
| monitor          | OT_STRINGVECTOR | Set of user      | casadi::OracleFu |
|                  |                 | problem          | nction           |
|                  |                 | functions to be  |                  |
|                  |                 | monitored        |                  |
+------------------+-----------------+------------------+------------------+
| number_of_finite | OT_INT          | Number of finite | casadi::Implicit |
| _elements        |                 | elements         | FixedStepIntegra |
|                  |                 |                  | tor              |
+------------------+-----------------+------------------+------------------+
| output_t0        | OT_BOOL         | Output the state | casadi::Implicit |
|                  |                 | at the initial   | FixedStepIntegra |
|                  |                 | time             | tor              |
+------------------+-----------------+------------------+------------------+
| print_stats      | OT_BOOL         | Print out        | casadi::Implicit |
|                  |                 | statistics after | FixedStepIntegra |
|                  |                 | integration      | tor              |
+------------------+-----------------+------------------+------------------+
| rootfinder       | OT_STRING       | An implicit      | casadi::Implicit |
|                  |                 | function solver  | FixedStepIntegra |
|                  |                 |                  | tor              |
+------------------+-----------------+------------------+------------------+
| rootfinder_optio | OT_DICT         | Options to be    | casadi::Implicit |
| ns               |                 | passed to the    | FixedStepIntegra |
|                  |                 | NLP Solver       | tor              |
+------------------+-----------------+------------------+------------------+
| specific_options | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | specific auto-   | nction           |
|                  |                 | generated        |                  |
|                  |                 | functions,       |                  |
|                  |                 | overwriting the  |                  |
|                  |                 | defaults from    |                  |
|                  |                 | common_options.  |                  |
|                  |                 | Nested           |                  |
|                  |                 | dictionary.      |                  |
+------------------+-----------------+------------------+------------------+
| t0               | OT_DOUBLE       | Beginning of the | casadi::Implicit |
|                  |                 | time horizon     | FixedStepIntegra |
|                  |                 |                  | tor              |
+------------------+-----------------+------------------+------------------+
| tf               | OT_DOUBLE       | End of the time  | casadi::Implicit |
|                  |                 | horizon          | FixedStepIntegra |
|                  |                 |                  | tor              |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: integrator_impl.hpp ";

%feature("docstring")  casadi::FunctionInternal::getFullJacobian(const
std::string &name, const std::vector< std::string > &i_names, const
std::vector< std::string > &o_names, const Dict &opts) "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::repr(std::ostream &stream)
const override "

[INTERNAL]  Print.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::Integrator::q() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::p() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::size2_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::Integrator::t() const  "

[INTERNAL] ";

%feature("docstring")
casadi::ImplicitFixedStepIntegrator::~ImplicitFixedStepIntegrator "

[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::Integrator::z() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::x() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::symbolicFwdSeed(int nfwd,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::clear_memory() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::verbose() const  "

[INTERNAL]  Verbose mode?

";

%feature("docstring")  casadi::FunctionInternal::name_in(int ind) const  "

[INTERNAL]  Get input scheme name by index.

";

%feature("docstring")  casadi::Integrator::sp_rev(bvec_t **arg, bvec_t
**res, int *iw, bvec_t *w, int mem) const override "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FixedStepIntegrator::reset(IntegratorMemory
*mem, double t, const double *x, const double *z, const double *p) const
override "

[INTERNAL]  Reset the forward problem.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< int > &order_in, const std::vector< int >
&order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::FunctionInternal::mx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::getAlgorithmSize() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::tang_sx(int iind=0, int
oind=0) "

[INTERNAL]  Tangent expression.

";

%feature("docstring")  casadi::FunctionInternal::checkArg(const std::vector<
M > &arg, bool hcat=false) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::matchingArg(const
std::vector< M > &arg, bool hcat=false) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::size2_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::replaceArg(const
std::vector< M > &arg, bool hcat=false) const  "

[INTERNAL]  Replace 0-by-0 inputs.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::sx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FixedStepIntegrator::alloc_memory() const
override "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::Integrator::sp_jac_dae() "

[INTERNAL]  Create sparsity pattern of the extended Jacobian (forward
problem)

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::Integrator::print_stats(IntegratorMemory
*mem, std::ostream &stream) const  "

[INTERNAL]  Print solver statistics.

";

%feature("docstring")  casadi::FixedStepIntegrator::free_memory(void *mem)
const override "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::OracleFunction::finalize(const Dict &opts)
override "

[INTERNAL]  Finalize initialization.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, int order, bool
tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::OracleFunction::expand() "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::setJacobian(const Function
&jac, int iind, int oind, bool compact) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::ImplicitFixedStepIntegrator::getExplicitB()
const override "

[INTERNAL]  Get explicit dynamics (backward problem)

";

%feature("docstring")  casadi::FunctionInternal::tang_mx(int iind=0, int
oind=0) "

[INTERNAL]  Tangent expression.

";

%feature("docstring")  casadi::FunctionInternal::map_mx(const std::vector<
std::vector< MX > > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::map_mx(const std::vector<
MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::Integrator::get_sparsity_out(int i) override
"

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::addShorthand(CodeGenerator
&g, const std::string &name) const  "

[INTERNAL]  Generate shorthand macro.

";

%feature("docstring")  casadi::FunctionInternal::print(std::ostream &stream)
const override "

[INTERNAL]  Print.

";

%feature("docstring")  casadi::FunctionInternal::matchingRes(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

";

%feature("docstring")  casadi::FunctionInternal::getWorkSize() const  "

[INTERNAL]  Get the length of the work vector.

";

%feature("docstring")  casadi::FunctionInternal::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::FunctionInternal::name() const  "

[INTERNAL]  Name of the function.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::hasFullJacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::_setup "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(int iind,
int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::replaceAdjSeed(const
std::vector< std::vector< M > > &aseed) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::Integrator::has_sprev() const override "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::size1_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FixedStepIntegrator::setupFG() "

[INTERNAL]  Setup F and G.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, int *iw, SXElem *w, int mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::OracleFunction::monitored(const std::string
&name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::getHessian(int iind, int
oind) "

[INTERNAL]  Return Hessian function.

";

%feature("docstring")  casadi::ImplicitFixedStepIntegrator::getExplicit()
const override "

[INTERNAL]  Get explicit dynamics.

";

%feature("docstring")  casadi::Integrator::sp_fwd(const bvec_t **arg, bvec_t
**res, int *iw, bvec_t *w, int mem) const override "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::Integrator::get_name_out(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::jac_sx(int iind=0, int
oind=0, const Dict &opts=Dict()) "

[INTERNAL]  Jacobian expression.

";

%feature("docstring")  casadi::OracleFunction::oracle() const override "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FunctionInternal::simplifiedCall() const  "

[INTERNAL]  Use simplified signature.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::Integrator::aug_fwd(int nfwd) const  "

[INTERNAL]  Generate a augmented DAE system with nfwd forward sensitivities.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(int iind, int
oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::Integrator::get_n_reverse() const override "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::FunctionInternal::checkInputs() const  "

[INTERNAL]  Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::OracleFunction::get_function() const override
"

[INTERNAL] ";

%feature("docstring")  casadi::OracleFunction::get_function(const
std::string &name) const override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::set_jac_sparsity(const
Sparsity &sp, int iind, int oind, bool compact) "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(int nadj) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::OracleFunction::generate_dependencies(const
std::string &fname, const Dict &opts) const override "

[INTERNAL]  Export / Generate C code for the generated functions.

";

%feature("docstring")  casadi::FunctionInternal::size_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::print_free(std::ostream
&stream) const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")
casadi::FunctionInternal::generateDeclarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::fullJacobian() "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::generateMeta(CodeGenerator
&g, const std::string &fname) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInput(int k) const
"

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::Integrator::eval(void *mem, const double
**arg, double **res, int *iw, double *w) const override "

[INTERNAL]  evaluate

";

%feature("docstring")  casadi::FunctionInternal::hess_sx(int iind=0, int
oind=0) "

[INTERNAL]  Hessian expression.

";

%feature("docstring")  casadi::FunctionInternal::getPartition(int iind, int
oind, Sparsity &D1, Sparsity &D2, bool compact, bool symmetric, bool
allow_forward, bool allow_reverse) "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::simple(const double *arg,
double *res) const  "

[INTERNAL]  Evaluate numerically, simplied syntax.

";

%feature("docstring")  casadi::FunctionInternal::grad_mx(int iind=0, int
oind=0) "

[INTERNAL]  Gradient expression.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::hasDerivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::OracleFunction::has_function(const
std::string &fname) const override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::log(const std::string &msg)
const  "

[INTERNAL]  Log the status of the solver.

";

%feature("docstring")  casadi::FunctionInternal::log(const std::string &fcn,
const std::string &msg) const  "

[INTERNAL]  Log the status of the solver, function given.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::_get_stats "

[INTERNAL]  Get all statistics

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::FunctionInternal::hessian(int iind, int oind)
"

[INTERNAL]  Return Hessian function.

";

%feature("docstring")  casadi::FunctionInternal::construct(const Dict &opts)
"

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::reverse(int nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::_call "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::_call "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::OracleFunction::set_temp(void *mem, const
double **arg, double **res, int *iw, double *w) const override "

[INTERNAL]  Set the work vectors.

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::jac_mx(int iind=0, int
oind=0, const Dict &opts=Dict()) "

[INTERNAL]  Jacobian expression.

";

%feature("docstring")  casadi::FunctionInternal::getGradient(const
std::string &name, int iind, int oind, const Dict &opts) "

[INTERNAL]  Return gradient function.

";

%feature("docstring")  casadi::Integrator::get_reverse(const std::string
&name, int nadj, const std::vector< std::string > &i_names, const
std::vector< std::string > &o_names, const Dict &opts) const override "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::FunctionInternal::getTangent(const
std::string &name, int iind, int oind, const Dict &opts) "

[INTERNAL]  Return tangent function.

";

%feature("docstring")  casadi::FunctionInternal::addDependency(CodeGenerator
&g) const  "

[INTERNAL]  Add a dependent function.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::_set_temp "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::Integrator::rp() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::rq() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::get_forward(const std::string
&name, int nfwd, const std::vector< std::string > &i_names, const
std::vector< std::string > &o_names, const Dict &opts) const override "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::Integrator::rz() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::get_n_in() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::Integrator::rx() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::getAtomicOperation(int k)
const  "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::n_mem() const  "

[INTERNAL]  Maximum number of memory objects.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::PluginInterface< Integrator  >::plugin_name()
const  "

[INTERNAL] ";

%feature("docstring")
casadi::FunctionInternal::generateFunction(CodeGenerator &g, const
std::string &fname, bool decl_static) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::FunctionInternal::gradient(int iind, int
oind) "

[INTERNAL]  Return gradient function.

";

%feature("docstring")  casadi::FunctionInternal::size_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::Integrator::get_n_out() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::Integrator::sp_jac_rdae() "

[INTERNAL]  Create sparsity pattern of the extended Jacobian (backward
problem)

";

%feature("docstring")  casadi::Integrator::get_name_in(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::name_out(int ind) const  "

[INTERNAL]  Get output scheme name by index.

";

%feature("docstring")  casadi::OracleFunction::calc_function(OracleMemory
*m, const std::string &fcn, const double *const *arg=0) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::mx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::Integrator::aug_adj(int nadj) const  "

[INTERNAL]  Generate a augmented DAE system with nadj adjoint sensitivities.

";

%feature("docstring")  casadi::OracleFunction::create_function(const
std::string &fname, const std::vector< std::string > &s_in, const
std::vector< std::string > &s_out, const Function::AuxOut
&aux=Function::AuxOut()) "

[INTERNAL]  Create an oracle function

";

%feature("docstring")  casadi::Integrator::get_n_forward() const override "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(int ind) const
"

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(const
std::string &iname) const  "

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(int nadj,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FixedStepIntegrator::resetB(IntegratorMemory
*mem, double t, const double *rx, const double *rz, const double *rp) const
override "

[INTERNAL]  Reset the backward problem and take time to tf.

";

%feature("docstring")  casadi::Integrator::has_spfwd() const override "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::checkRes(const std::vector<
M > &res) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

";

%feature("docstring")  casadi::FunctionInternal::jacobian(int iind, int
oind, bool compact, bool symmetric) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FixedStepIntegrator::retreat(IntegratorMemory
*mem, double t, double *rx, double *rz, double *rq) const override "

[INTERNAL]  Retreat solution in time.

";

%feature("docstring")  casadi::FunctionInternal::default_in(int ind) const
"

[INTERNAL]  Get default input value.

";

%feature("docstring")
casadi::ImplicitFixedStepIntegrator::ImplicitFixedStepIntegrator(const
std::string &name, const Function &dae) "

[INTERNAL]  Constructor.

";


// File: classcasadi_1_1ImplicitToNlp.xml
%feature("docstring")  casadi::OracleFunction::create_function(const
std::string &fname, const std::vector< std::string > &s_in, const
std::vector< std::string > &s_out, const Function::AuxOut
&aux=Function::AuxOut()) "

[INTERNAL]  Create an oracle function

";

%feature("docstring")  casadi::OracleFunction::print_fstats(const
OracleMemory *m) const  "

[INTERNAL]  Print statistics.

";

%feature("docstring") casadi::ImplicitToNlp::ImplicitToNlp(const std::string
&name, const Function &f) "

[INTERNAL]  Constructor.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::getAlgorithmSize() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::sx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, int order, bool
tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::n_out() const  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::ImplicitToNlp::free_memory(void *mem) const
override "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::Rootfinder::has_spfwd() const override "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::symbolicFwdSeed(int nfwd,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOperation(int k)
const  "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::matchingRes(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(int ind) const
"

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(const
std::string &iname) const  "

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::FunctionInternal::symbolicOutput(const
std::vector< MX > &arg) "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::getJacobian(const
std::string &name, int iind, int oind, bool compact, bool symmetric, const
Dict &opts) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn, const std::string &fname, bool jit=false) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::setJacobian(const Function
&jac, int iind, int oind, bool compact) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::eval_name() const  "

[INTERNAL]  Get name of the evaluation function.

";

%feature("docstring")  casadi::FunctionInternal::addShorthand(CodeGenerator
&g, const std::string &name) const  "

[INTERNAL]  Generate shorthand macro.

";

%feature("docstring")  casadi::FunctionInternal::getTangent(const
std::string &name, int iind, int oind, const Dict &opts) "

[INTERNAL]  Return tangent function.

";

%feature("docstring")  casadi::FunctionInternal::construct(const Dict &opts)
"

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::FunctionInternal::tangent(int iind, int oind)
"

[INTERNAL]  Return tangent function.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::replaceFwdSeed(const
std::vector< std::vector< M > > &fseed) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::name_out(int ind) const  "

[INTERNAL]  Get output scheme name by index.

";

%feature("docstring") casadi::ImplicitToNlp "

'nlp' plugin for Rootfinder

Use an Nlpsol as Rootfinder solver

>List of available options

+----------------+-----------+---------------------------------+
|       Id       |   Type    |           Description           |
+================+===========+=================================+
| nlpsol         | OT_STRING | Name of solver.                 |
+----------------+-----------+---------------------------------+
| nlpsol_options | OT_DICT   | Options to be passed to solver. |
+----------------+-----------+---------------------------------+

Joris Gillis

>List of available options

+-------------------+--------------+-------------------+-------------------+
|        Id         |     Type     |    Description    |      Used in      |
+===================+==============+===================+===================+
| constraints       | OT_INTVECTOR | Constrain the     | casadi::Rootfinde |
|                   |              | unknowns. 0       | r                 |
|                   |              | (default): no     |                   |
|                   |              | constraint on ui, |                   |
|                   |              | 1: ui >= 0.0, -1: |                   |
|                   |              | ui <= 0.0, 2: ui  |                   |
|                   |              | > 0.0, -2: ui <   |                   |
|                   |              | 0.0.              |                   |
+-------------------+--------------+-------------------+-------------------+
| implicit_input    | OT_INT       | Index of the      | casadi::Rootfinde |
|                   |              | input that        | r                 |
|                   |              | corresponds to    |                   |
|                   |              | the actual root-  |                   |
|                   |              | finding           |                   |
+-------------------+--------------+-------------------+-------------------+
| implicit_output   | OT_INT       | Index of the      | casadi::Rootfinde |
|                   |              | output that       | r                 |
|                   |              | corresponds to    |                   |
|                   |              | the actual root-  |                   |
|                   |              | finding           |                   |
+-------------------+--------------+-------------------+-------------------+
| jacobian_function | OT_FUNCTION  | Function object   | casadi::Rootfinde |
|                   |              | for calculating   | r                 |
|                   |              | the Jacobian      |                   |
|                   |              | (autogenerated by |                   |
|                   |              | default)          |                   |
+-------------------+--------------+-------------------+-------------------+
| linear_solver     | OT_STRING    | User-defined      | casadi::Rootfinde |
|                   |              | linear solver     | r                 |
|                   |              | class. Needed for |                   |
|                   |              | sensitivities.    |                   |
+-------------------+--------------+-------------------+-------------------+
| linear_solver_opt | OT_DICT      | Options to be     | casadi::Rootfinde |
| ions              |              | passed to the     | r                 |
|                   |              | linear solver.    |                   |
+-------------------+--------------+-------------------+-------------------+
| nlpsol            | OT_STRING    | Name of solver.   | casadi::ImplicitT |
|                   |              |                   | oNlp              |
+-------------------+--------------+-------------------+-------------------+
| nlpsol_options    | OT_DICT      | Options to be     | casadi::ImplicitT |
|                   |              | passed to solver. | oNlp              |
+-------------------+--------------+-------------------+-------------------+

Diagrams
--------



C++ includes: implicit_to_nlp.hpp ";

%feature("docstring")  casadi::FunctionInternal::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::FunctionInternal::matchingArg(const
std::vector< M > &arg, bool hcat=false) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::ImplicitToNlp::solve(void *mem) const
override "

[INTERNAL]   Solve the system of equations and calculate derivatives.

";

%feature("docstring")  casadi::ImplicitToNlp::get_options() const override "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::OracleFunction::jit_dependencies(const
std::string &fname) override "

[INTERNAL]  JIT for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::default_in(int ind) const
"

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::repr(std::ostream &stream)
const override "

[INTERNAL]  Print.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::Rootfinder::init_memory(void *mem) const
override "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(int iind, int
oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::Rootfinder::get_name_in(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::name_in(int ind) const  "

[INTERNAL]  Get input scheme name by index.

";

%feature("docstring")  casadi::FunctionInternal::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::FunctionInternal::addDependency(CodeGenerator
&g) const  "

[INTERNAL]  Add a dependent function.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::print_free(std::ostream
&stream) const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::ImplicitToNlp::init(const Dict &opts)
override "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::FunctionInternal::size_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::replaceRes(const
std::vector< M > &res) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::Rootfinder::sp_fwd(const bvec_t **arg, bvec_t
**res, int *iw, bvec_t *w, int mem) const override "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(int ind) const
"

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(const
std::string &iname) const  "

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::FunctionInternal::verbose() const  "

[INTERNAL]  Verbose mode?

";

%feature("docstring")  casadi::FunctionInternal::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(int nadj,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::ImplicitToNlp::~ImplicitToNlp "

[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::FunctionInternal::hasDerivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::Rootfinder::get_n_out() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::Rootfinder::get_forward(const std::string
&name, int nfwd, const std::vector< std::string > &i_names, const
std::vector< std::string > &o_names, const Dict &opts) const override "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::Rootfinder::get_n_reverse() const override "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::FunctionInternal::getHessian(int iind, int
oind) "

[INTERNAL]  Return Hessian function.

";

%feature("docstring")  casadi::FunctionInternal::n_in() const  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::ImplicitToNlp::alloc_memory() const override
"

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::FunctionInternal::size_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::log(const std::string &msg)
const  "

[INTERNAL]  Log the status of the solver.

";

%feature("docstring")  casadi::FunctionInternal::log(const std::string &fcn,
const std::string &msg) const  "

[INTERNAL]  Log the status of the solver, function given.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInput(int k) const
"

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::simplifiedCall() const  "

[INTERNAL]  Use simplified signature.

";

%feature("docstring")  casadi::FunctionInternal::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::FunctionInternal::set_jac_sparsity(const
Sparsity &sp, int iind, int oind, bool compact) "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::OracleFunction::calc_function(OracleMemory
*m, const std::string &fcn, const double *const *arg=0) const  "

[INTERNAL] ";

%feature("docstring")  casadi::ImplicitToNlp::set_work(void *mem, const
double **&arg, double **&res, int *&iw, double *&w) const override "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::Rootfinder::type_name() const override "

[INTERNAL]  Get type name.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::tang_sx(int iind=0, int
oind=0) "

[INTERNAL]  Tangent expression.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::getFullJacobian(const
std::string &name, const std::vector< std::string > &i_names, const
std::vector< std::string > &o_names, const Dict &opts) "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::ImplicitToNlp::plugin_name() const override "

[INTERNAL] ";

%feature("docstring")
casadi::FunctionInternal::generateDeclarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::grad_mx(int iind=0, int
oind=0) "

[INTERNAL]  Gradient expression.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::Rootfinder::has_sprev() const override "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::size1_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::Rootfinder::get_reverse(const std::string
&name, int nadj, const std::vector< std::string > &i_names, const
std::vector< std::string > &o_names, const Dict &opts) const override "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::OracleFunction::set_temp(void *mem, const
double **arg, double **res, int *iw, double *w) const override "

[INTERNAL]  Set the work vectors.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInputReal(int k)
const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::Rootfinder::eval(void *mem, const double
**arg, double **res, int *iw, double *w) const override "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")
casadi::FunctionInternal::generateFunction(CodeGenerator &g, const
std::string &fname, bool decl_static) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< int > &order_in, const std::vector< int >
&order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::FunctionInternal::checkArg(const std::vector<
M > &arg, bool hcat=false) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::getGradient(const
std::string &name, int iind, int oind, const Dict &opts) "

[INTERNAL]  Return gradient function.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::n_mem() const  "

[INTERNAL]  Maximum number of memory objects.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOutput(int k)
const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::Rootfinder::eval_forward(const std::vector<
MX > &arg, const std::vector< MX > &res, const std::vector< std::vector< MX
> > &fseed, std::vector< std::vector< MX > > &fsens, bool always_inline,
bool never_inline) const  "

[INTERNAL]  Create call to (cached) derivative function, forward mode.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, int *iw, SXElem *w, int mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::checkRes(const std::vector<
M > &res) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

";

%feature("docstring")  casadi::OracleFunction::has_function(const
std::string &fname) const override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::getWorkSize() const  "

[INTERNAL]  Get the length of the work vector.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::Rootfinder::get_sparsity_in(int i) override "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::OracleFunction::monitored(const std::string
&name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::hessian(int iind, int oind)
"

[INTERNAL]  Return Hessian function.

";

%feature("docstring")  casadi::FunctionInternal::jacobian(int iind, int
oind, bool compact, bool symmetric) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring") casadi::ImplicitToNlp::_call "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring") casadi::ImplicitToNlp::_call "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::replaceAdjSeed(const
std::vector< std::vector< M > > &aseed) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(int iind,
int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::OracleFunction::get_function() const override
"

[INTERNAL] ";

%feature("docstring")  casadi::OracleFunction::get_function(const
std::string &name) const override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::checkInputs() const  "

[INTERNAL]  Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::FunctionInternal::simple(const double *arg,
double *res) const  "

[INTERNAL]  Evaluate numerically, simplied syntax.

";

%feature("docstring")  casadi::OracleFunction::finalize(const Dict &opts)
override "

[INTERNAL]  Finalize initialization.

";

%feature("docstring")  casadi::FunctionInternal::jac_mx(int iind=0, int
oind=0, const Dict &opts=Dict()) "

[INTERNAL]  Jacobian expression.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::generateMeta(CodeGenerator
&g, const std::string &fname) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(int nfwd) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::reverse(int nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::Rootfinder::sp_rev(bvec_t **arg, bvec_t
**res, int *iw, bvec_t *w, int mem) const override "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring") casadi::ImplicitToNlp::_set_work "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::hasFullJacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring") casadi::ImplicitToNlp::_set_temp "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::map_mx(const std::vector<
std::vector< MX > > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::map_mx(const std::vector<
MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::generateBody(CodeGenerator
&g) const  "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring")  casadi::Rootfinder::get_sparsity_out(int i) override
"

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::fullJacobian() "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::Rootfinder::eval_reverse(const std::vector<
MX > &arg, const std::vector< MX > &res, const std::vector< std::vector< MX
> > &aseed, std::vector< std::vector< MX > > &asens, bool always_inline,
bool never_inline) const  "

[INTERNAL]  Create call to (cached) derivative function, reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::tang_mx(int iind=0, int
oind=0) "

[INTERNAL]  Tangent expression.

";

%feature("docstring")  casadi::FunctionInternal::hess_sx(int iind=0, int
oind=0) "

[INTERNAL]  Hessian expression.

";

%feature("docstring")  casadi::FunctionInternal::replaceArg(const
std::vector< M > &arg, bool hcat=false) const  "

[INTERNAL]  Replace 0-by-0 inputs.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::gradient(int iind, int
oind) "

[INTERNAL]  Return gradient function.

";

%feature("docstring")  casadi::OracleFunction::generate_dependencies(const
std::string &fname, const Dict &opts) const override "

[INTERNAL]  Export / Generate C code for the generated functions.

";

%feature("docstring")  casadi::Rootfinder::get_name_out(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::OracleFunction::expand() "

[INTERNAL] ";

%feature("docstring")  casadi::Rootfinder::get_n_forward() const override "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::OracleFunction::get_stats(void *mem) const
override "

[INTERNAL]  Get all statistics.

";

%feature("docstring") casadi::ImplicitToNlp::_eval "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring") casadi::ImplicitToNlp::_eval "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring") casadi::ImplicitToNlp::_eval "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::getPartition(int iind, int
oind, Sparsity &D1, Sparsity &D2, bool compact, bool symmetric, bool
allow_forward, bool allow_reverse) "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(int nadj) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::grad_sx(int iind=0, int
oind=0) "

[INTERNAL]  Gradient expression.

";

%feature("docstring") casadi::ImplicitToNlp::_get_stats "

[INTERNAL]  Get all statistics

";

%feature("docstring")  casadi::FunctionInternal::name() const  "

[INTERNAL]  Name of the function.

";

%feature("docstring")  casadi::Rootfinder::get_n_in() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::OracleFunction::oracle() const override "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::clear_memory() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring") casadi::ImplicitToNlp::_setup "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::FunctionInternal::forward(int nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsityGen(int iind,
int oind, bool symmetric, int gr_i=1, int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::jac_sx(int iind=0, int
oind=0, const Dict &opts=Dict()) "

[INTERNAL]  Jacobian expression.

";

%feature("docstring")  casadi::FunctionInternal::print(std::ostream &stream)
const override "

[INTERNAL]  Print.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";


// File: classcasadi_1_1Importer.xml
%feature("docstring")  casadi::SharedObject::repr(std::ostream
&stream=casadi::userOut(), bool trailing_newline=true) const  "

Print a representation of the object.

";

%feature("docstring")  casadi::Importer::body(const std::string &symname)
const  "

Get the function body, if inlined.

";

%feature("docstring")  casadi::PrintableObject< SharedObject
>::getRepresentation() const "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::Importer::has_meta(const std::string &cmd,
int ind=-1) const  "

Does a meta entry exist?

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=casadi::userOut()) const  "

[INTERNAL]  Print the pointer to the internal class

";

%feature("docstring") casadi::Importer "

Importer.

Just-in-time compilation of code

General information
===================



List of plugins
===============



- clang

- shell

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
Importer.doc(\"myextraplugin\")



--------------------------------------------------------------------------------

clang
-----



Interface to the JIT compiler CLANG

>List of available options

+--------------+-----------------+-----------------------------------------+
|      Id      |      Type       |               Description               |
+==============+=================+=========================================+
| flags        | OT_STRINGVECTOR | Compile flags for the JIT compiler.     |
|              |                 | Default: None                           |
+--------------+-----------------+-----------------------------------------+
| include_path | OT_STRING       | Include paths for the JIT compiler. The |
|              |                 | include directory shipped with CasADi   |
|              |                 | will be automatically appended.         |
+--------------+-----------------+-----------------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

shell
-----



Interface to the JIT compiler SHELL

>List of available options

+----------------+-----------------+---------------------------------------+
|       Id       |      Type       |              Description              |
+================+=================+=======================================+
| cleanup        | OT_BOOL         | Cleanup temporary files when          |
|                |                 | unloading. Default: true              |
+----------------+-----------------+---------------------------------------+
| compiler       | OT_STRING       | Compiler command                      |
+----------------+-----------------+---------------------------------------+
| compiler_flags | OT_STRINGVECTOR | Alias for 'compiler_flags'            |
+----------------+-----------------+---------------------------------------+
| compiler_setup | OT_STRING       | Compiler setup command. Intended to   |
|                |                 | be fixed. The 'flag' option is the    |
|                |                 | prefered way to set custom flags.     |
+----------------+-----------------+---------------------------------------+
| flags          | OT_STRINGVECTOR | Compile flags for the JIT compiler.   |
|                |                 | Default: None                         |
+----------------+-----------------+---------------------------------------+
| folder         | OT_STRING       | Folder to put temporary objects in.   |
+----------------+-----------------+---------------------------------------+
| linker         | OT_STRING       | Linker command                        |
+----------------+-----------------+---------------------------------------+
| linker_flags   | OT_STRINGVECTOR | Linker flags for the JIT compiler.    |
|                |                 | Default: None                         |
+----------------+-----------------+---------------------------------------+
| linker_setup   | OT_STRING       | Linker setup command. Intended to be  |
|                |                 | fixed. The 'flag' option is the       |
|                |                 | prefered way to set custom flags.     |
+----------------+-----------------+---------------------------------------+

--------------------------------------------------------------------------------



Joris Gillis

C++ includes: importer.hpp ";

%feature("docstring")  casadi::Importer::plugin_name() const  "

Query plugin name.

";

%feature("docstring")  casadi::Importer::has_function(const std::string
&symname) const  "

";

%feature("docstring") casadi::Importer::Importer() "

Default constructor.

";

%feature("docstring") casadi::Importer::Importer(const std::string &name,
const std::string &compiler, const Dict &opts=Dict()) "

Importer factory.

";

%feature("docstring")  casadi::SharedObject::is_null() const  "

Is a null pointer?

";

%feature("docstring")  casadi::Importer::get_meta(const std::string &cmd,
int ind=-1) const  "

Get entry as a text.

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=casadi::userOut(), bool trailing_newline=true) const  "

Print a description of the object.

";

%feature("docstring")  casadi::PrintableObject< SharedObject
>::getDescription() const "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::Importer::__hash__ "

Returns a number that is unique for a given Node. If the Object does not
point to any node, \"0\" is returned.

";

%feature("docstring")  casadi::Importer::inlined(const std::string &symname)
const  "

Check if a function is inlined.

";


// File: classcasadi_1_1InfSX.xml


// File: classcasadi_1_1Input.xml


// File: classcasadi_1_1IntegerSX.xml


// File: classcasadi_1_1Integrator.xml
%feature("docstring")  casadi::OracleFunction::has_function(const
std::string &fname) const override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::name_out(int ind) const  "

[INTERNAL]  Get output scheme name by index.

";

%feature("docstring")  casadi::Integrator::get_n_reverse() const override "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::Integrator::_set_temp "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::size_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::getFullJacobian(const
std::string &name, const std::vector< std::string > &i_names, const
std::vector< std::string > &o_names, const Dict &opts) "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn, const std::string &fname, bool jit=false) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::FunctionInternal::addShorthand(CodeGenerator
&g, const std::string &name) const  "

[INTERNAL]  Generate shorthand macro.

";

%feature("docstring")  casadi::Integrator::aug_fwd(int nfwd) const  "

[INTERNAL]  Generate a augmented DAE system with nfwd forward sensitivities.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::hessian(int iind, int oind)
"

[INTERNAL]  Return Hessian function.

";

%feature("docstring")  casadi::FunctionInternal::jacobian(int iind, int
oind, bool compact, bool symmetric) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::simplifiedCall() const  "

[INTERNAL]  Use simplified signature.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::Integrator::z() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::x() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::n_out() const  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::Integrator::_setup "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring") casadi::Integrator::_call "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring") casadi::Integrator::_call "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, int *iw, SXElem *w, int mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::Integrator::q() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::p() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::print_free(std::ostream
&stream) const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::Integrator::t() const  "

[INTERNAL] ";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(int nadj) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::OracleFunction::calc_function(OracleMemory
*m, const std::string &fcn, const double *const *arg=0) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::simple(const double *arg,
double *res) const  "

[INTERNAL]  Evaluate numerically, simplied syntax.

";

%feature("docstring")  casadi::OracleFunction::jit_dependencies(const
std::string &fname) override "

[INTERNAL]  JIT for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::replaceAdjSeed(const
std::vector< std::vector< M > > &aseed) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring") casadi::Integrator::_get_stats "

[INTERNAL]  Get all statistics

";

%feature("docstring")  casadi::FunctionInternal::sx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::reverse(int nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(int iind, int
oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::OracleFunction::generate_dependencies(const
std::string &fname, const Dict &opts) const override "

[INTERNAL]  Export / Generate C code for the generated functions.

";

%feature("docstring")  casadi::FunctionInternal::tangent(int iind, int oind)
"

[INTERNAL]  Return tangent function.

";

%feature("docstring")  casadi::FunctionInternal::matchingRes(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

";

%feature("docstring")  casadi::Integrator::resetB(IntegratorMemory *mem,
double t, const double *rx, const double *rz, const double *rp) const  "

[INTERNAL]  Reset the backward problem.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::Integrator::sp_rev(bvec_t **arg, bvec_t
**res, int *iw, bvec_t *w, int mem) const override "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::generateMeta(CodeGenerator
&g, const std::string &fname) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::Integrator::get_n_out() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::replaceRes(const
std::vector< M > &res) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInput(int k) const
"

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::hasFullJacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::OracleFunction::alloc_memory() const override
"

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::FunctionInternal::matchingArg(const
std::vector< M > &arg, bool hcat=false) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::getPartition(int iind, int
oind, Sparsity &D1, Sparsity &D2, bool compact, bool symmetric, bool
allow_forward, bool allow_reverse) "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::PluginInterface< Integrator  >::plugin_name()
const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::symbolicOutput(const
std::vector< MX > &arg) "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::FunctionInternal::fullJacobian() "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::FunctionInternal::print(std::ostream &stream)
const override "

[INTERNAL]  Print.

";

%feature("docstring")  casadi::FunctionInternal::gradient(int iind, int
oind) "

[INTERNAL]  Return gradient function.

";

%feature("docstring") casadi::Integrator::Integrator(const std::string
&name, const Function &oracle) "

[INTERNAL]  Constructor.

";

%feature("docstring")  casadi::Integrator::sp_jac_dae() "

[INTERNAL]  Create sparsity pattern of the extended Jacobian (forward
problem)

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::hasDerivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::Integrator::has_sprev() const override "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(int iind,
int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::OracleFunction::create_function(const
std::string &fname, const std::vector< std::string > &s_in, const
std::vector< std::string > &s_out, const Function::AuxOut
&aux=Function::AuxOut()) "

[INTERNAL]  Create an oracle function

";

%feature("docstring")  casadi::Integrator::init_memory(void *mem) const
override "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::Integrator::advance(IntegratorMemory *mem,
double t, double *x, double *z, double *q) const  "

[INTERNAL]  Advance solution in time.

";

%feature("docstring")  casadi::Integrator::retreat(IntegratorMemory *mem,
double t, double *rx, double *rz, double *rq) const  "

[INTERNAL]  Retreat solution in time.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsityGen(int iind,
int oind, bool symmetric, int gr_i=1, int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(int nfwd) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::log(const std::string &msg)
const  "

[INTERNAL]  Log the status of the solver.

";

%feature("docstring")  casadi::FunctionInternal::log(const std::string &fcn,
const std::string &msg) const  "

[INTERNAL]  Log the status of the solver, function given.

";

%feature("docstring") casadi::Integrator "

Internal storage for integrator related data.

Joel Andersson

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| augmented_option | OT_DICT         | Options to be    | casadi::Integrat |
| s                |                 | passed down to   | or               |
|                  |                 | the augmented    |                  |
|                  |                 | integrator, if   |                  |
|                  |                 | one is           |                  |
|                  |                 | constructed.     |                  |
+------------------+-----------------+------------------+------------------+
| common_options   | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | auto-generated   | nction           |
|                  |                 | functions        |                  |
+------------------+-----------------+------------------+------------------+
| expand           | OT_BOOL         | Replace MX with  | casadi::Integrat |
|                  |                 | SX expressions   | or               |
|                  |                 | in problem       |                  |
|                  |                 | formulation      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| grid             | OT_DOUBLEVECTOR | Time grid        | casadi::Integrat |
|                  |                 |                  | or               |
+------------------+-----------------+------------------+------------------+
| monitor          | OT_STRINGVECTOR | Set of user      | casadi::OracleFu |
|                  |                 | problem          | nction           |
|                  |                 | functions to be  |                  |
|                  |                 | monitored        |                  |
+------------------+-----------------+------------------+------------------+
| number_of_finite | OT_INT          | Number of finite | casadi::Integrat |
| _elements        |                 | elements         | or               |
+------------------+-----------------+------------------+------------------+
| output_t0        | OT_BOOL         | Output the state | casadi::Integrat |
|                  |                 | at the initial   | or               |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| print_stats      | OT_BOOL         | Print out        | casadi::Integrat |
|                  |                 | statistics after | or               |
|                  |                 | integration      |                  |
+------------------+-----------------+------------------+------------------+
| rootfinder       | OT_STRING       | An implicit      | casadi::Integrat |
|                  |                 | function solver  | or               |
+------------------+-----------------+------------------+------------------+
| rootfinder_optio | OT_DICT         | Options to be    | casadi::Integrat |
| ns               |                 | passed to the    | or               |
|                  |                 | NLP Solver       |                  |
+------------------+-----------------+------------------+------------------+
| specific_options | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | specific auto-   | nction           |
|                  |                 | generated        |                  |
|                  |                 | functions,       |                  |
|                  |                 | overwriting the  |                  |
|                  |                 | defaults from    |                  |
|                  |                 | common_options.  |                  |
|                  |                 | Nested           |                  |
|                  |                 | dictionary.      |                  |
+------------------+-----------------+------------------+------------------+
| t0               | OT_DOUBLE       | Beginning of the | casadi::Integrat |
|                  |                 | time horizon     | or               |
+------------------+-----------------+------------------+------------------+
| tf               | OT_DOUBLE       | End of the time  | casadi::Integrat |
|                  |                 | horizon          | or               |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: integrator_impl.hpp ";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(int nadj,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FunctionInternal::replaceArg(const
std::vector< M > &arg, bool hcat=false) const  "

[INTERNAL]  Replace 0-by-0 inputs.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::Integrator::setStopTime(IntegratorMemory
*mem, double tf) const  "

[INTERNAL]  Set stop time for the integration.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::Integrator::type_name() const override "

[INTERNAL]  Get type name.

";

%feature("docstring")  casadi::Integrator::has_spfwd() const override "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::OracleFunction::print_fstats(const
OracleMemory *m) const  "

[INTERNAL]  Print statistics.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOperation(int k)
const  "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::set_jac_sparsity(const
Sparsity &sp, int iind, int oind, bool compact) "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Integrator::_set_work "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::OracleFunction::set_temp(void *mem, const
double **arg, double **res, int *iw, double *w) const override "

[INTERNAL]  Set the work vectors.

";

%feature("docstring")  casadi::FunctionInternal::tang_sx(int iind=0, int
oind=0) "

[INTERNAL]  Tangent expression.

";

%feature("docstring")  casadi::FunctionInternal::eval_name() const  "

[INTERNAL]  Get name of the evaluation function.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(int ind) const
"

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(const
std::string &iname) const  "

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::FunctionInternal::verbose() const  "

[INTERNAL]  Verbose mode?

";

%feature("docstring")  casadi::FunctionInternal::size_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::Integrator::getDerivativeOptions(bool fwd)
const  "

[INTERNAL]  Set solver specific options to generated augmented integrators.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::Integrator::sp_jac_rdae() "

[INTERNAL]  Create sparsity pattern of the extended Jacobian (backward
problem)

";

%feature("docstring")  casadi::FunctionInternal::numel_out(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::repr(std::ostream &stream)
const override "

[INTERNAL]  Print.

";

%feature("docstring")  casadi::FunctionInternal::getAlgorithmSize() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::map_mx(const std::vector<
std::vector< MX > > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::map_mx(const std::vector<
MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::Integrator::get_name_in(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::Integrator::get_n_in() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::forward(int nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::checkRes(const std::vector<
M > &res) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::jac_mx(int iind=0, int
oind=0, const Dict &opts=Dict()) "

[INTERNAL]  Jacobian expression.

";

%feature("docstring")  casadi::FunctionInternal::construct(const Dict &opts)
"

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::Integrator::sp_fwd(const bvec_t **arg, bvec_t
**res, int *iw, bvec_t *w, int mem) const override "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::FunctionInternal::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInputReal(int k)
const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::Integrator::get_n_forward() const override "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::FunctionInternal::checkArg(const std::vector<
M > &arg, bool hcat=false) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::Integrator::aug_adj(int nadj) const  "

[INTERNAL]  Generate a augmented DAE system with nadj adjoint sensitivities.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::Integrator::get_sparsity_out(int i) override
"

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::n_mem() const  "

[INTERNAL]  Maximum number of memory objects.

";

%feature("docstring") casadi::Integrator::~Integrator "

[INTERNAL]  Destructor.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::Integrator::print_stats(IntegratorMemory
*mem, std::ostream &stream) const  "

[INTERNAL]  Print solver statistics.

";

%feature("docstring")  casadi::OracleFunction::monitored(const std::string
&name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::eval(void *mem, const double
**arg, double **res, int *iw, double *w) const override "

[INTERNAL]  evaluate

";

%feature("docstring")  casadi::FunctionInternal::size2_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::jac_sx(int iind=0, int
oind=0, const Dict &opts=Dict()) "

[INTERNAL]  Jacobian expression.

";

%feature("docstring")  casadi::FunctionInternal::symbolicFwdSeed(int nfwd,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::Integrator::get_sparsity_in(int i) override "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Integrator::_eval "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring") casadi::Integrator::_eval "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring") casadi::Integrator::_eval "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::OracleFunction::oracle() const override "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FunctionInternal::replaceFwdSeed(const
std::vector< std::vector< M > > &fseed) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(int ind) const
"

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(const
std::string &iname) const  "

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::FunctionInternal::addDependency(CodeGenerator
&g) const  "

[INTERNAL]  Add a dependent function.

";

%feature("docstring")  casadi::FunctionInternal::name() const  "

[INTERNAL]  Name of the function.

";

%feature("docstring")  casadi::FunctionInternal::setJacobian(const Function
&jac, int iind, int oind, bool compact) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< int > &order_in, const std::vector< int >
&order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::OracleFunction::finalize(const Dict &opts)
override "

[INTERNAL]  Finalize initialization.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::getGradient(const
std::string &name, int iind, int oind, const Dict &opts) "

[INTERNAL]  Return gradient function.

";

%feature("docstring")  casadi::FunctionInternal::hess_sx(int iind=0, int
oind=0) "

[INTERNAL]  Hessian expression.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::sx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::generateBody(CodeGenerator
&g) const  "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::grad_sx(int iind=0, int
oind=0) "

[INTERNAL]  Gradient expression.

";

%feature("docstring")  casadi::FunctionInternal::tang_mx(int iind=0, int
oind=0) "

[INTERNAL]  Tangent expression.

";

%feature("docstring")  casadi::FunctionInternal::getJacobian(const
std::string &name, int iind, int oind, bool compact, bool symmetric, const
Dict &opts) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOutput(int k)
const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::FunctionInternal::getHessian(int iind, int
oind) "

[INTERNAL]  Return Hessian function.

";

%feature("docstring")  casadi::OracleFunction::get_function() const override
"

[INTERNAL] ";

%feature("docstring")  casadi::OracleFunction::get_function(const
std::string &name) const override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::getTangent(const
std::string &name, int iind, int oind, const Dict &opts) "

[INTERNAL]  Return tangent function.

";

%feature("docstring")  casadi::FunctionInternal::name_in(int ind) const  "

[INTERNAL]  Get input scheme name by index.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::n_in() const  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")
casadi::FunctionInternal::generateFunction(CodeGenerator &g, const
std::string &fname, bool decl_static) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::Integrator::get_forward(const std::string
&name, int nfwd, const std::vector< std::string > &i_names, const
std::vector< std::string > &o_names, const Dict &opts) const override "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")
casadi::FunctionInternal::generateDeclarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::getWorkSize() const  "

[INTERNAL]  Get the length of the work vector.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, int order, bool
tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::Integrator::get_name_out(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::Integrator::reset(IntegratorMemory *mem,
double t, const double *x, const double *z, const double *p) const  "

[INTERNAL]  Reset the forward problem.

";

%feature("docstring")  casadi::OracleFunction::expand() "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::get_reverse(const std::string
&name, int nadj, const std::vector< std::string > &i_names, const
std::vector< std::string > &o_names, const Dict &opts) const override "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::FunctionInternal::default_in(int ind) const
"

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::FunctionInternal::clear_memory() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::Integrator::rp() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::rq() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::get_options() const override "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::Integrator::rz() const  "

[INTERNAL] ";

%feature("docstring")  casadi::OracleFunction::free_memory(void *mem) const
override "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::Integrator::rx() const  "

[INTERNAL] ";

%feature("docstring")  casadi::OracleFunction::get_stats(void *mem) const
override "

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::Integrator::init(const Dict &opts) override "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::FunctionInternal::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FunctionInternal::grad_mx(int iind=0, int
oind=0) "

[INTERNAL]  Gradient expression.

";

%feature("docstring")  casadi::FunctionInternal::checkInputs() const  "

[INTERNAL]  Check if the numerical values of the supplied bounds make sense.

";


// File: classcasadi_1_1Interpolant.xml
%feature("docstring")  casadi::FunctionInternal::getAlgorithmSize() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(int nfwd) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::Interpolant::_get_stats "

[INTERNAL]  Get all statistics

";

%feature("docstring")  casadi::FunctionInternal::get_n_forward() const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::repr(std::ostream &stream)
const override "

[INTERNAL]  Print.

";

%feature("docstring")  casadi::FunctionInternal::get_function() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::mx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::Interpolant::get_sparsity_in(int i) override
"

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::get_options() const  "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::FunctionInternal::replaceArg(const
std::vector< M > &arg, bool hcat=false) const  "

[INTERNAL]  Replace 0-by-0 inputs.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::FunctionInternal::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::generateMeta(CodeGenerator
&g, const std::string &fname) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(int iind, int
oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::sp_fwd(const bvec_t **arg,
bvec_t **res, int *iw, bvec_t *w, int mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::FunctionInternal::finalize(const Dict &opts)
"

[INTERNAL]  Finalize the object creation This function, which visits the
class hierarchy in reverse order is run after init() has been completed.

";

%feature("docstring")  casadi::FunctionInternal::get_reverse(const
std::string &name, int nadj, const std::vector< std::string > &i_names,
const std::vector< std::string > &o_names, const Dict &opts) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::Interpolant::get_sparsity_out(int i) override
"

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::replaceAdjSeed(const
std::vector< std::vector< M > > &aseed) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(int iind,
int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::reverse(int nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::tang_mx(int iind=0, int
oind=0) "

[INTERNAL]  Tangent expression.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(int ind) const
"

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(const
std::string &iname) const  "

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOperation(int k)
const  "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::get_forward(const
std::string &name, int nfwd, const std::vector< std::string > &i_names,
const std::vector< std::string > &o_names, const Dict &opts) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::log(const std::string &msg)
const  "

[INTERNAL]  Log the status of the solver.

";

%feature("docstring")  casadi::FunctionInternal::log(const std::string &fcn,
const std::string &msg) const  "

[INTERNAL]  Log the status of the solver, function given.

";

%feature("docstring")  casadi::FunctionInternal::hasFullJacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::symbolicFwdSeed(int nfwd,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::name() const  "

[INTERNAL]  Name of the function.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOutput(int k)
const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(int nadj) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::Interpolant::get_n_in() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::FunctionInternal::generateBody(CodeGenerator
&g) const  "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::Interpolant::get_name_in(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::Interpolant::type_name() const override "

[INTERNAL]  Get type name.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::set_temp(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::replaceRes(const
std::vector< M > &res) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::FunctionInternal::print_free(std::ostream
&stream) const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::getTangent(const
std::string &name, int iind, int oind, const Dict &opts) "

[INTERNAL]  Return tangent function.

";

%feature("docstring")  casadi::FunctionInternal::getGradient(const
std::string &name, int iind, int oind, const Dict &opts) "

[INTERNAL]  Return gradient function.

";

%feature("docstring")  casadi::FunctionInternal::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::n_out() const  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::grad_sx(int iind=0, int
oind=0) "

[INTERNAL]  Gradient expression.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsityGen(int iind,
int oind, bool symmetric, int gr_i=1, int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::default_in(int ind) const
"

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::set_jac_sparsity(const
Sparsity &sp, int iind, int oind, bool compact) "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::n_in() const  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::symbolicOutput(const
std::vector< MX > &arg) "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::Interpolant::get_n_out() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::hessian(int iind, int oind)
"

[INTERNAL]  Return Hessian function.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::size_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::addDependency(CodeGenerator
&g) const  "

[INTERNAL]  Add a dependent function.

";

%feature("docstring")  casadi::FunctionInternal::matchingRes(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

";

%feature("docstring")  casadi::FunctionInternal::jacobian(int iind, int
oind, bool compact, bool symmetric) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::FunctionInternal::clear_memory() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::simplifiedCall() const  "

[INTERNAL]  Use simplified signature.

";

%feature("docstring") casadi::Interpolant::_setup "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring") casadi::Interpolant::_eval "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring") casadi::Interpolant::_eval "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring") casadi::Interpolant::_eval "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInputReal(int k)
const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::eval(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::checkInputs() const  "

[INTERNAL]  Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::FunctionInternal::getPartition(int iind, int
oind, Sparsity &D1, Sparsity &D2, bool compact, bool symmetric, bool
allow_forward, bool allow_reverse) "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::getJacobian(const
std::string &name, int iind, int oind, bool compact, bool symmetric, const
Dict &opts) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::checkArg(const std::vector<
M > &arg, bool hcat=false) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::addShorthand(CodeGenerator
&g, const std::string &name) const  "

[INTERNAL]  Generate shorthand macro.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")
casadi::FunctionInternal::generateFunction(CodeGenerator &g, const
std::string &fname, bool decl_static) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring") casadi::Interpolant "

[INTERNAL]  Internal class

C++ includes: interpolant_impl.hpp ";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::checkRes(const std::vector<
M > &res) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::sx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< int > &order_in, const std::vector< int >
&order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::FunctionInternal::size_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::matchingArg(const
std::vector< M > &arg, bool hcat=false) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::forward(int nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, int order, bool
tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::getHessian(int iind, int
oind) "

[INTERNAL]  Return Hessian function.

";

%feature("docstring")  casadi::FunctionInternal::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::get_n_reverse() const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::grad_mx(int iind=0, int
oind=0) "

[INTERNAL]  Gradient expression.

";

%feature("docstring") casadi::Interpolant::_call "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring") casadi::Interpolant::_call "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::getFullJacobian(const
std::string &name, const std::vector< std::string > &i_names, const
std::vector< std::string > &o_names, const Dict &opts) "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::simple(const double *arg,
double *res) const  "

[INTERNAL]  Evaluate numerically, simplied syntax.

";

%feature("docstring")  casadi::FunctionInternal::getWorkSize() const  "

[INTERNAL]  Get the length of the work vector.

";

%feature("docstring")  casadi::FunctionInternal::tangent(int iind, int oind)
"

[INTERNAL]  Return tangent function.

";

%feature("docstring")  casadi::FunctionInternal::sp_rev(bvec_t **arg, bvec_t
**res, int *iw, bvec_t *w, int mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::name_in(int ind) const  "

[INTERNAL]  Get input scheme name by index.

";

%feature("docstring")  casadi::FunctionInternal::init_memory(void *mem)
const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring") casadi::Interpolant::Interpolant(const std::string
&name, const std::vector< double > &grid, const std::vector< int > &offset,
const std::vector< double > &values) "

[INTERNAL]  Constructor.

";

%feature("docstring")
casadi::FunctionInternal::generateDeclarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(int ind) const
"

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(const
std::string &iname) const  "

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInput(int k) const
"

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::fullJacobian() "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::verbose() const  "

[INTERNAL]  Verbose mode?

";

%feature("docstring")  casadi::FunctionInternal::free_memory(void *mem)
const  "

[INTERNAL]  Free memory block.

";

%feature("docstring") casadi::Interpolant::~Interpolant "

[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::FunctionInternal::eval_name() const  "

[INTERNAL]  Get name of the evaluation function.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(int nadj,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FunctionInternal::print(std::ostream &stream)
const override "

[INTERNAL]  Print.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::jit_dependencies(const
std::string &fname) "

[INTERNAL]   Jit dependencies.

";

%feature("docstring")  casadi::FunctionInternal::map_mx(const std::vector<
std::vector< MX > > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::map_mx(const std::vector<
MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::get_stats(void *mem) const
"

[INTERNAL]  Get all statistics

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::gradient(int iind, int
oind) "

[INTERNAL]  Return gradient function.

";

%feature("docstring")  casadi::FunctionInternal::replaceFwdSeed(const
std::vector< std::vector< M > > &fseed) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::jac_mx(int iind=0, int
oind=0, const Dict &opts=Dict()) "

[INTERNAL]  Jacobian expression.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, int *iw, SXElem *w, int mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::FunctionInternal::hasDerivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::name_out(int ind) const  "

[INTERNAL]  Get output scheme name by index.

";

%feature("docstring")  casadi::FunctionInternal::alloc_memory() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring")  casadi::FunctionInternal::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FunctionInternal::n_mem() const  "

[INTERNAL]  Maximum number of memory objects.

";

%feature("docstring")  casadi::Interpolant::get_name_out(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::hess_sx(int iind=0, int
oind=0) "

[INTERNAL]  Hessian expression.

";

%feature("docstring")  casadi::FunctionInternal::tang_sx(int iind=0, int
oind=0) "

[INTERNAL]  Tangent expression.

";

%feature("docstring") casadi::Interpolant::_set_work "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::FunctionInternal::setJacobian(const Function
&jac, int iind, int oind, bool compact) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::PluginInterface< Interpolant
>::plugin_name() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::construct(const Dict &opts)
"

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::FunctionInternal::init(const Dict &opts) "

[INTERNAL]  Initialize Initialize and make the object ready for setting
arguments and evaluation. This method is typically called after setting
options but before evaluating. If passed to another class (in the
constructor), this class should invoke this function when initialized.

";

%feature("docstring") casadi::Interpolant::_set_temp "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::jac_sx(int iind=0, int
oind=0, const Dict &opts=Dict()) "

[INTERNAL]  Jacobian expression.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";


// File: classcasadi_1_1InterruptHandler.xml
%feature("docstring") casadi::InterruptHandler "

[INTERNAL]  Takes care of user interrupts (Ctrl+C)

This is an internal class.

Joris Gillis

C++ includes: casadi_interrupt.hpp ";


// File: classcasadi_1_1Inverse.xml


// File: classcasadi_1_1IOInstruction.xml


// File: classcasadi_1_1IpoptUserClass.xml
%feature("docstring")  casadi::IpoptUserClass::get_starting_point(Index n,
bool init_x, Number *x, bool init_z, Number *z_L, Number *z_U, Index m, bool
init_lambda, Number *lambda) override "

[INTERNAL]  Method to return the starting point for the algorithm

";

%feature("docstring")
casadi::IpoptUserClass::finalize_solution(SolverReturn status, Index n,
const Number *x, const Number *z_L, const Number *z_U, Index m, const Number
*g, const Number *lambda, Number obj_value, const IpoptData *ip_data,
IpoptCalculatedQuantities *ip_cq) override "

[INTERNAL]  This method is called when the algorithm is complete so the TNLP
can store/write the solution

";

%feature("docstring") casadi::IpoptUserClass "

[INTERNAL] C++ includes: ipopt_nlp.hpp ";

%feature("docstring")
casadi::IpoptUserClass::get_list_of_nonlinear_variables(Index
num_nonlin_vars, Index *pos_nonlin_vars) override "

[INTERNAL]  Specify which variables that appear in the Hessian

";

%feature("docstring")  casadi::IpoptUserClass::eval_grad_f(Index n, const
Number *x, bool new_x, Number *grad_f) override "

[INTERNAL]  Method to return the gradient of the objective

";

%feature("docstring")  casadi::IpoptUserClass::get_var_con_metadata(Index n,
StringMetaDataMapType &var_string_md, IntegerMetaDataMapType
&var_integer_md, NumericMetaDataMapType &var_numeric_md, Index m,
StringMetaDataMapType &con_string_md, IntegerMetaDataMapType
&con_integer_md, NumericMetaDataMapType &con_numeric_md) override "

[INTERNAL]  Allows setting information about variables and constraints

";

%feature("docstring") casadi::IpoptUserClass::~IpoptUserClass "

[INTERNAL] ";

%feature("docstring")  casadi::IpoptUserClass::eval_g(Index n, const Number
*x, bool new_x, Index m, Number *g) override "

[INTERNAL]  Method to return the constraint residuals

";

%feature("docstring")  casadi::IpoptUserClass::get_nlp_info(Index &n, Index
&m, Index &nnz_jac_g, Index &nnz_h_lag, IndexStyleEnum &index_style)
override "

[INTERNAL]  Method to return some info about the nlp

";

%feature("docstring")  casadi::IpoptUserClass::eval_f(Index n, const Number
*x, bool new_x, Number &obj_value) override "

[INTERNAL]  Method to return the objective value

";

%feature("docstring")
casadi::IpoptUserClass::get_number_of_nonlinear_variables() override "

[INTERNAL]  Specify the number of variables that appear in the Hessian

";

%feature("docstring")  casadi::IpoptUserClass::eval_jac_g(Index n, const
Number *x, bool new_x, Index m, Index nele_jac, Index *iRow, Index *jCol,
Number *values) override "

[INTERNAL]  Method to return: 1) The structure of the Jacobian (if
\"values\" is NULL) 2) The values of the Jacobian (if \"values\" is not
NULL)

";

%feature("docstring")  casadi::IpoptUserClass::finalize_metadata(Index n,
const StringMetaDataMapType &var_string_md, const IntegerMetaDataMapType
&var_integer_md, const NumericMetaDataMapType &var_numeric_md, Index m,
const StringMetaDataMapType &con_string_md, const IntegerMetaDataMapType
&con_integer_md, const NumericMetaDataMapType &con_numeric_md) override "

[INTERNAL]  Retrieve information about variables and constraints

";

%feature("docstring")  casadi::IpoptUserClass::get_bounds_info(Index n,
Number *x_l, Number *x_u, Index m, Number *g_l, Number *g_u) override "

[INTERNAL]  Method to return the bounds for my problem

";

%feature("docstring")  casadi::IpoptUserClass::eval_h(Index n, const Number
*x, bool new_x, Number obj_factor, Index m, const Number *lambda, bool
new_lambda, Index nele_hess, Index *iRow, Index *jCol, Number *values)
override "

[INTERNAL]  Method to return: 1) The structure of the hessian of the
Lagrangian (if \"values\" is NULL) 2) The values of the hessian of the
Lagrangian (if \"values\" is not NULL)

";

%feature("docstring")
casadi::IpoptUserClass::intermediate_callback(AlgorithmMode mode, Index
iter, Number obj_value, Number inf_pr, Number inf_du, Number mu, Number
d_norm, Number regularization_size, Number alpha_du, Number alpha_pr, Index
ls_trials, const IpoptData *ip_data, IpoptCalculatedQuantities *ip_cq)
override "

[INTERNAL]  This method is called at every iteration

";

%feature("docstring") casadi::IpoptUserClass::IpoptUserClass(const
IpoptInterface &ipoptInterface, IpoptMemory *mem) "

[INTERNAL] ";


// File: classcasadi_1_1Jit.xml
%feature("docstring") casadi::Jit::_eval "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring") casadi::Jit::_eval "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring") casadi::Jit::_eval "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::matchingArg(const
std::vector< M > &arg, bool hcat=false) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::Jit::~Jit "

Destructor.

";

%feature("docstring")  casadi::Jit::simplifiedCall() const override "

Use simplified signature.

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::Jit::type_name() const override "

Get type name.

";

%feature("docstring")  casadi::FunctionInternal::n_out() const  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::Jit::generateBody(CodeGenerator &g) const
override "

Generate code for the function body.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(int ind) const
"

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(const
std::string &iname) const  "

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::FunctionInternal::clear_memory() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::symbolicFwdSeed(int nfwd,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::getAlgorithmSize() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::Jit::get_sparsity_out(int i) override "

All inputs and outputs are scalars.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::jac_mx(int iind=0, int
oind=0, const Dict &opts=Dict()) "

[INTERNAL]  Jacobian expression.

";

%feature("docstring")  casadi::FunctionInternal::tangent(int iind, int oind)
"

[INTERNAL]  Return tangent function.

";

%feature("docstring")  casadi::Jit::get_sparsity_in(int i) override "

All inputs and outputs are scalars.

";

%feature("docstring")  casadi::FunctionInternal::simple(const double *arg,
double *res) const  "

[INTERNAL]  Evaluate numerically, simplied syntax.

";

%feature("docstring")  casadi::Jit::has_codegen() const override "

Is codegen supported?

";

%feature("docstring")  casadi::FunctionInternal::addShorthand(CodeGenerator
&g, const std::string &name) const  "

[INTERNAL]  Generate shorthand macro.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::replaceRes(const
std::vector< M > &res) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::sp_fwd(const bvec_t **arg,
bvec_t **res, int *iw, bvec_t *w, int mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::size_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(int iind, int
oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::get_forward(const
std::string &name, int nfwd, const std::vector< std::string > &i_names,
const std::vector< std::string > &o_names, const Dict &opts) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::matchingRes(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(int ind) const
"

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(const
std::string &iname) const  "

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring") casadi::Jit::_setup "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring") casadi::Jit::_set_work "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")
casadi::FunctionInternal::generateDeclarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::fullJacobian() "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::default_in(int ind) const
"

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::checkRes(const std::vector<
M > &res) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

";

%feature("docstring")  casadi::FunctionInternal::sp_rev(bvec_t **arg, bvec_t
**res, int *iw, bvec_t *w, int mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(int nadj) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::getPartition(int iind, int
oind, Sparsity &D1, Sparsity &D2, bool compact, bool symmetric, bool
allow_forward, bool allow_reverse) "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::symbolicOutput(const
std::vector< MX > &arg) "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInputReal(int k)
const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInput(int k) const
"

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::tang_mx(int iind=0, int
oind=0) "

[INTERNAL]  Tangent expression.

";

%feature("docstring")  casadi::FunctionInternal::gradient(int iind, int
oind) "

[INTERNAL]  Return gradient function.

";

%feature("docstring")  casadi::Jit::get_n_in() override "

Number of function inputs and outputs.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::FunctionInternal::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOutput(int k)
const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::size_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::FunctionInternal::getTangent(const
std::string &name, int iind, int oind, const Dict &opts) "

[INTERNAL]  Return tangent function.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::Jit::get_options() const override "

Options.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOperation(int k)
const  "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::repr(std::ostream &stream)
const override "

[INTERNAL]  Print.

";

%feature("docstring")  casadi::FunctionInternal::eval_name() const  "

[INTERNAL]  Get name of the evaluation function.

";

%feature("docstring")  casadi::FunctionInternal::forward(int nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring") casadi::Jit::_set_temp "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::hasDerivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(int iind,
int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Jit::_call "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring") casadi::Jit::_call "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(int nfwd) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, int *iw, SXElem *w, int mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::FunctionInternal::tang_sx(int iind=0, int
oind=0) "

[INTERNAL]  Tangent expression.

";

%feature("docstring")  casadi::FunctionInternal::hess_sx(int iind=0, int
oind=0) "

[INTERNAL]  Hessian expression.

";

%feature("docstring")  casadi::FunctionInternal::construct(const Dict &opts)
"

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::FunctionInternal::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::FunctionInternal::hessian(int iind, int oind)
"

[INTERNAL]  Return Hessian function.

";

%feature("docstring")  casadi::FunctionInternal::get_name_out(int i) "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::get_n_reverse() const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::Jit::getFullJacobian(const std::string &name,
const std::vector< std::string > &i_names, const std::vector< std::string >
&o_names, const Dict &opts) override "

Jacobian of all outputs with respect to all inputs.

";

%feature("docstring")  casadi::FunctionInternal::verbose() const  "

[INTERNAL]  Verbose mode?

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::getGradient(const
std::string &name, int iind, int oind, const Dict &opts) "

[INTERNAL]  Return gradient function.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::FunctionInternal::free_memory(void *mem)
const  "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::n_mem() const  "

[INTERNAL]  Maximum number of memory objects.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::replaceAdjSeed(const
std::vector< std::vector< M > > &aseed) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::jacobian(int iind, int
oind, bool compact, bool symmetric) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::set_temp(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::get_stats(void *mem) const
"

[INTERNAL]  Get all statistics

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsityGen(int iind,
int oind, bool symmetric, int gr_i=1, int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FunctionInternal::init_memory(void *mem)
const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::generateMeta(CodeGenerator
&g, const std::string &fname) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FunctionInternal::alloc_memory() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(int nadj,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, int order, bool
tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::addDependency(CodeGenerator
&g) const  "

[INTERNAL]  Add a dependent function.

";

%feature("docstring")  casadi::FunctionInternal::get_reverse(const
std::string &name, int nadj, const std::vector< std::string > &i_names,
const std::vector< std::string > &o_names, const Dict &opts) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::FunctionInternal::replaceArg(const
std::vector< M > &arg, bool hcat=false) const  "

[INTERNAL]  Replace 0-by-0 inputs.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::Jit::_get_stats "

[INTERNAL]  Get all statistics

";

%feature("docstring")  casadi::FunctionInternal::finalize(const Dict &opts)
"

[INTERNAL]  Finalize the object creation This function, which visits the
class hierarchy in reverse order is run after init() has been completed.

";

%feature("docstring") casadi::Jit::Jit(const std::string &name, int n_in,
int n_out, const std::string &body, const Dict &opts) "

Constructor.

";

%feature("docstring")  casadi::FunctionInternal::get_function() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::name() const  "

[INTERNAL]  Name of the function.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::eval(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::map_mx(const std::vector<
std::vector< MX > > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::map_mx(const std::vector<
MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::name_in(int ind) const  "

[INTERNAL]  Get input scheme name by index.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")
casadi::FunctionInternal::generateFunction(CodeGenerator &g, const
std::string &fname, bool decl_static) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::set_jac_sparsity(const
Sparsity &sp, int iind, int oind, bool compact) "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::getWorkSize() const  "

[INTERNAL]  Get the length of the work vector.

";

%feature("docstring")  casadi::FunctionInternal::name_out(int ind) const  "

[INTERNAL]  Get output scheme name by index.

";

%feature("docstring")  casadi::FunctionInternal::checkInputs() const  "

[INTERNAL]  Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::FunctionInternal::n_in() const  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< int > &order_in, const std::vector< int >
&order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::FunctionInternal::jit_dependencies(const
std::string &fname) "

[INTERNAL]   Jit dependencies.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::grad_sx(int iind=0, int
oind=0) "

[INTERNAL]  Gradient expression.

";

%feature("docstring")  casadi::FunctionInternal::print(std::ostream &stream)
const override "

[INTERNAL]  Print.

";

%feature("docstring")  casadi::FunctionInternal::getJacobian(const
std::string &name, int iind, int oind, bool compact, bool symmetric, const
Dict &opts) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::FunctionInternal::setJacobian(const Function
&jac, int iind, int oind, bool compact) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::get_name_in(int i) "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::getHessian(int iind, int
oind) "

[INTERNAL]  Return Hessian function.

";

%feature("docstring")  casadi::FunctionInternal::log(const std::string &msg)
const  "

[INTERNAL]  Log the status of the solver.

";

%feature("docstring")  casadi::FunctionInternal::log(const std::string &fcn,
const std::string &msg) const  "

[INTERNAL]  Log the status of the solver, function given.

";

%feature("docstring") casadi::Jit "



>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| hess             | OT_STRING       | Function body    | casadi::Jit      |
|                  |                 | for Hessian      |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Custom input     | casadi::Function |
|                  |                 | scheme           | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| jac              | OT_STRING       | Function body    | casadi::Jit      |
|                  |                 | for Jacobian     |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Custom output    | casadi::Function |
|                  |                 | scheme           | Internal         |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: jit_impl.hpp ";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::Jit::get_n_out() override "

Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::checkArg(const std::vector<
M > &arg, bool hcat=false) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::Jit::hasFullJacobian() const override "

Jacobian of all outputs with respect to all inputs.

";

%feature("docstring")  casadi::FunctionInternal::replaceFwdSeed(const
std::vector< std::vector< M > > &fseed) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::Jit::init(const Dict &opts) override "

Initialize.

";

%feature("docstring")  casadi::FunctionInternal::get_n_forward() const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::reverse(int nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::jac_sx(int iind=0, int
oind=0, const Dict &opts=Dict()) "

[INTERNAL]  Jacobian expression.

";

%feature("docstring")  casadi::FunctionInternal::grad_mx(int iind=0, int
oind=0) "

[INTERNAL]  Gradient expression.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::FunctionInternal::sx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::print_free(std::ostream
&stream) const  "

[INTERNAL]  Print free variables.

";


// File: classcasadi_1_1LapackLu.xml
%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::size_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::map_mx(const std::vector<
std::vector< MX > > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::map_mx(const std::vector<
MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::LinsolInternal::get_n_out() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::LapackLu::~LapackLu "

[INTERNAL]  Destructor.

";

%feature("docstring")
casadi::FunctionInternal::generateFunction(CodeGenerator &g, const
std::string &fname, bool decl_static) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::FunctionInternal::construct(const Dict &opts)
"

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsityGen(int iind,
int oind, bool symmetric, int gr_i=1, int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(int ind) const
"

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(const
std::string &iname) const  "

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::FunctionInternal::reverse(int nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::replaceFwdSeed(const
std::vector< std::vector< M > > &fseed) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::clear_memory() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::checkRes(const std::vector<
M > &res) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

";

%feature("docstring")  casadi::FunctionInternal::getJacobian(const
std::string &name, int iind, int oind, bool compact, bool symmetric, const
Dict &opts) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::LinsolInternal::linsol_eval_sx(const SXElem
**arg, SXElem **res, int *iw, SXElem *w, int mem, bool tr, int nrhs) const
"

[INTERNAL]  Evaluate SX, possibly transposed.

";

%feature("docstring")  casadi::FunctionInternal::getHessian(int iind, int
oind) "

[INTERNAL]  Return Hessian function.

";

%feature("docstring")  casadi::LapackLu::factorize(void *mem, const double
*A) const override "

[INTERNAL]  Factorize the linear system.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")
casadi::FunctionInternal::generateDeclarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOutput(int k)
const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::LapackLu::LapackLu(const std::string &name) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::finalize(const Dict &opts)
"

[INTERNAL]  Finalize the object creation This function, which visits the
class hierarchy in reverse order is run after init() has been completed.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::LinsolInternal::get_n_in() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::sp_fwd(const bvec_t **arg,
bvec_t **res, int *iw, bvec_t *w, int mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::FunctionInternal::get_sparsity_in(int i) "

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::get_n_reverse() const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::name_in(int ind) const  "

[INTERNAL]  Get input scheme name by index.

";

%feature("docstring")  casadi::FunctionInternal::matchingRes(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

";

%feature("docstring") casadi::LapackLu::_get_stats "

[INTERNAL]  Get all statistics

";

%feature("docstring")  casadi::LapackLu::get_options() const override "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::FunctionInternal::repr(std::ostream &stream)
const override "

[INTERNAL]  Print.

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::LinsolInternal::neig(void *mem) const  "

[INTERNAL]  Number of negative eigenvalues.

";

%feature("docstring")  casadi::FunctionInternal::getTangent(const
std::string &name, int iind, int oind, const Dict &opts) "

[INTERNAL]  Return tangent function.

";

%feature("docstring")  casadi::LinsolInternal::solve_cholesky(void *mem,
double *x, int nrhs, bool tr) const  "

[INTERNAL]   Solve Cholesky.

";

%feature("docstring")  casadi::LapackLu::free_memory(void *mem) const
override "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(int iind,
int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::setJacobian(const Function
&jac, int iind, int oind, bool compact) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, int order, bool
tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::get_function() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::verbose() const  "

[INTERNAL]  Verbose mode?

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::name_out(int ind) const  "

[INTERNAL]  Get output scheme name by index.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::set_jac_sparsity(const
Sparsity &sp, int iind, int oind, bool compact) "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::getFullJacobian(const
std::string &name, const std::vector< std::string > &i_names, const
std::vector< std::string > &o_names, const Dict &opts) "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::symbolicFwdSeed(int nfwd,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::replaceRes(const
std::vector< M > &res) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::get_name_in(int i) "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::replaceAdjSeed(const
std::vector< std::vector< M > > &aseed) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::eval(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::hasFullJacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::get_n_forward() const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::n_mem() const  "

[INTERNAL]  Maximum number of memory objects.

";

%feature("docstring")  casadi::LinsolInternal::rank(void *mem) const  "

[INTERNAL]   Matrix rank.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(int ind) const
"

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(const
std::string &iname) const  "

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::FunctionInternal::tang_mx(int iind=0, int
oind=0) "

[INTERNAL]  Tangent expression.

";

%feature("docstring")  casadi::FunctionInternal::hess_sx(int iind=0, int
oind=0) "

[INTERNAL]  Hessian expression.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::getAlgorithmSize() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::LinsolInternal::linsol_cholesky_sparsity(void
*mem, bool tr) const  "

[INTERNAL]   Sparsity pattern of the cholesky factors.

";

%feature("docstring") casadi::LapackLu::_set_temp "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::LinsolInternal::linsol_cholesky(void *mem,
bool tr) const  "

[INTERNAL]  Get Cholesky factor.

";

%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::matchingArg(const
std::vector< M > &arg, bool hcat=false) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::get_stats(void *mem) const
"

[INTERNAL]  Get all statistics

";

%feature("docstring")  casadi::FunctionInternal::jac_sx(int iind=0, int
oind=0, const Dict &opts=Dict()) "

[INTERNAL]  Jacobian expression.

";

%feature("docstring")  casadi::FunctionInternal::fullJacobian() "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::hasDerivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::simplifiedCall() const  "

[INTERNAL]  Use simplified signature.

";

%feature("docstring")  casadi::FunctionInternal::print(std::ostream &stream)
const override "

[INTERNAL]  Print.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(int nadj) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(int nadj,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInputReal(int k)
const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::LapackLu::init(const Dict &opts) override "

[INTERNAL]  Initialize the solver.

";

%feature("docstring")  casadi::FunctionInternal::get_reverse(const
std::string &name, int nadj, const std::vector< std::string > &i_names,
const std::vector< std::string > &o_names, const Dict &opts) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(int iind, int
oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::LinsolInternal::pivoting(void *mem, const
double *A) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< int > &order_in, const std::vector< int >
&order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::FunctionInternal::log(const std::string &msg)
const  "

[INTERNAL]  Log the status of the solver.

";

%feature("docstring")  casadi::FunctionInternal::log(const std::string &fcn,
const std::string &msg) const  "

[INTERNAL]  Log the status of the solver, function given.

";

%feature("docstring")  casadi::FunctionInternal::hessian(int iind, int oind)
"

[INTERNAL]  Return Hessian function.

";

%feature("docstring")  casadi::FunctionInternal::sx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::get_sparsity_out(int i) "

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::FunctionInternal::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::jac_mx(int iind=0, int
oind=0, const Dict &opts=Dict()) "

[INTERNAL]  Jacobian expression.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::eval_name() const  "

[INTERNAL]  Get name of the evaluation function.

";

%feature("docstring")  casadi::FunctionInternal::checkInputs() const  "

[INTERNAL]  Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring") casadi::LapackLu::_eval "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring") casadi::LapackLu::_eval "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring") casadi::LapackLu::_eval "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::checkArg(const std::vector<
M > &arg, bool hcat=false) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::symbolicOutput(const
std::vector< MX > &arg) "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::getWorkSize() const  "

[INTERNAL]  Get the length of the work vector.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::LapackLu::alloc_memory() const override "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::FunctionInternal::get_forward(const
std::string &name, int nfwd, const std::vector< std::string > &i_names,
const std::vector< std::string > &o_names, const Dict &opts) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::FunctionInternal::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::FunctionInternal::default_in(int ind) const
"

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::sp_rev(bvec_t **arg, bvec_t
**res, int *iw, bvec_t *w, int mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FunctionInternal::print_free(std::ostream
&stream) const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::simple(const double *arg,
double *res) const  "

[INTERNAL]  Evaluate numerically, simplied syntax.

";

%feature("docstring") casadi::LapackLu::_call "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring") casadi::LapackLu::_call "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::addDependency(CodeGenerator
&g) const  "

[INTERNAL]  Add a dependent function.

";

%feature("docstring")  casadi::FunctionInternal::getPartition(int iind, int
oind, Sparsity &D1, Sparsity &D2, bool compact, bool symmetric, bool
allow_forward, bool allow_reverse) "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::getGradient(const
std::string &name, int iind, int oind, const Dict &opts) "

[INTERNAL]  Return gradient function.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::name() const  "

[INTERNAL]  Name of the function.

";

%feature("docstring")  casadi::FunctionInternal::forward(int nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::grad_mx(int iind=0, int
oind=0) "

[INTERNAL]  Gradient expression.

";

%feature("docstring") casadi::LapackLu::_setup "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::LapackLu::solve(void *mem, double *x, int
nrhs, bool tr) const override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::jit_dependencies(const
std::string &fname) "

[INTERNAL]   Jit dependencies.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring") casadi::LapackLu::_set_work "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::generateMeta(CodeGenerator
&g, const std::string &fname) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FunctionInternal::gradient(int iind, int
oind) "

[INTERNAL]  Return gradient function.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::tangent(int iind, int oind)
"

[INTERNAL]  Return tangent function.

";

%feature("docstring")  casadi::FunctionInternal::addShorthand(CodeGenerator
&g, const std::string &name) const  "

[INTERNAL]  Generate shorthand macro.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::set_temp(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::replaceArg(const
std::vector< M > &arg, bool hcat=false) const  "

[INTERNAL]  Replace 0-by-0 inputs.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::LapackLu::reset(void *mem, const int *sp)
const override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOperation(int k)
const  "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::size_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::LinsolInternal::type_name() const override "

[INTERNAL]  Get type name.

";

%feature("docstring")  casadi::FunctionInternal::n_out() const  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::n_in() const  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::FunctionInternal::generateBody(CodeGenerator
&g) const  "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring") casadi::LapackLu "

'lapacklu' plugin for Linsol

This class solves the linear system A.x=b by making an LU factorization of
A: A = L.U, with L lower and U upper triangular

>List of available options

+-----------------------------+---------+----------------------------------+
|             Id              |  Type   |           Description            |
+=============================+=========+==================================+
| allow_equilibration_failure | OT_BOOL | Non-fatal error when             |
|                             |         | equilibration fails              |
+-----------------------------+---------+----------------------------------+
| equilibration               | OT_BOOL | Equilibrate the matrix           |
+-----------------------------+---------+----------------------------------+

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
+------------------+-----------------+------------------+------------------+
| allow_equilibrat | OT_BOOL         | Non-fatal error  | casadi::LapackLu |
| ion_failure      |                 | when             |                  |
|                  |                 | equilibration    |                  |
|                  |                 | fails            |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| equilibration    | OT_BOOL         | Equilibrate the  | casadi::LapackLu |
|                  |                 | matrix           |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Custom input     | casadi::Function |
|                  |                 | scheme           | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Custom output    | casadi::Function |
|                  |                 | scheme           | Internal         |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: lapack_lu.hpp ";

%feature("docstring")  casadi::FunctionInternal::grad_sx(int iind=0, int
oind=0) "

[INTERNAL]  Gradient expression.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::FunctionInternal::jacobian(int iind, int
oind, bool compact, bool symmetric) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInput(int k) const
"

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::get_name_out(int i) "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, int *iw, SXElem *w, int mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::LapackLu::init_memory(void *mem) const
override "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::tang_sx(int iind=0, int
oind=0) "

[INTERNAL]  Tangent expression.

";

%feature("docstring")  casadi::FunctionInternal::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(int nfwd) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";


// File: classcasadi_1_1LapackQr.xml
%feature("docstring")  casadi::FunctionInternal::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::LapackQr::_call "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring") casadi::LapackQr::_call "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, int *iw, SXElem *w, int mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::FunctionInternal::matchingArg(const
std::vector< M > &arg, bool hcat=false) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::getTangent(const
std::string &name, int iind, int oind, const Dict &opts) "

[INTERNAL]  Return tangent function.

";

%feature("docstring")  casadi::FunctionInternal::getPartition(int iind, int
oind, Sparsity &D1, Sparsity &D2, bool compact, bool symmetric, bool
allow_forward, bool allow_reverse) "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::fullJacobian() "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::LapackQr::_solve "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_name_in(int i) "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::tang_sx(int iind=0, int
oind=0) "

[INTERNAL]  Tangent expression.

";

%feature("docstring")  casadi::FunctionInternal::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::LapackQr::reset(void *mem, const int *sp)
const override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(int iind,
int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::simplifiedCall() const  "

[INTERNAL]  Use simplified signature.

";

%feature("docstring")  casadi::FunctionInternal::setJacobian(const Function
&jac, int iind, int oind, bool compact) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::FunctionInternal::get_reverse(const
std::string &name, int nadj, const std::vector< std::string > &i_names,
const std::vector< std::string > &o_names, const Dict &opts) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::get_n_reverse() const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::generateMeta(CodeGenerator
&g, const std::string &fname) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring") casadi::LapackQr "

'lapackqr' plugin for Linsol

This class solves the linear system A.x=b by making an QR factorization of
A: A = Q.R, with Q orthogonal and R upper triangular

>List of available options

+----------+--------+------------------------------------------------------+
|    Id    |  Type  |                     Description                      |
+==========+========+======================================================+
| max_nrhs | OT_INT | Maximum number of right-hand-sides that get          |
|          |        | processed in a single pass [default:10].             |
+----------+--------+------------------------------------------------------+

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Custom input     | casadi::Function |
|                  |                 | scheme           | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| max_nrhs         | OT_INT          | Maximum number   | casadi::LapackQr |
|                  |                 | of right-hand-   |                  |
|                  |                 | sides that get   |                  |
|                  |                 | processed in a   |                  |
|                  |                 | single pass      |                  |
|                  |                 | [default:10].    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Custom output    | casadi::Function |
|                  |                 | scheme           | Internal         |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: lapack_qr.hpp ";

%feature("docstring")  casadi::FunctionInternal::getFullJacobian(const
std::string &name, const std::vector< std::string > &i_names, const
std::vector< std::string > &o_names, const Dict &opts) "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::tang_mx(int iind=0, int
oind=0) "

[INTERNAL]  Tangent expression.

";

%feature("docstring")  casadi::FunctionInternal::simple(const double *arg,
double *res) const  "

[INTERNAL]  Evaluate numerically, simplied syntax.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::jacobian(int iind, int
oind, bool compact, bool symmetric) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::LinsolInternal::neig(void *mem) const  "

[INTERNAL]  Number of negative eigenvalues.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::LinsolInternal::solve_cholesky(void *mem,
double *x, int nrhs, bool tr) const  "

[INTERNAL]   Solve Cholesky.

";

%feature("docstring")  casadi::FunctionInternal::addDependency(CodeGenerator
&g) const  "

[INTERNAL]  Add a dependent function.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::print(std::ostream &stream)
const override "

[INTERNAL]  Print.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOperation(int k)
const  "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::default_in(int ind) const
"

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::get_sparsity_in(int i) "

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::FunctionInternal::construct(const Dict &opts)
"

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::name_in(int ind) const  "

[INTERNAL]  Get input scheme name by index.

";

%feature("docstring")  casadi::FunctionInternal::n_mem() const  "

[INTERNAL]  Maximum number of memory objects.

";

%feature("docstring")  casadi::FunctionInternal::gradient(int iind, int
oind) "

[INTERNAL]  Return gradient function.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::getAlgorithmSize() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::grad_sx(int iind=0, int
oind=0) "

[INTERNAL]  Gradient expression.

";

%feature("docstring")  casadi::FunctionInternal::matchingRes(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

";

%feature("docstring")  casadi::LapackQr::get_options() const override "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::FunctionInternal::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::LapackQr::free_memory(void *mem) const
override "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::symbolicOutput(const
std::vector< MX > &arg) "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")
casadi::FunctionInternal::generateDeclarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::LapackQr::init_memory(void *mem) const
override "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::sp_rev(bvec_t **arg, bvec_t
**res, int *iw, bvec_t *w, int mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring") casadi::LapackQr::_setup "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(int nadj,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(int iind, int
oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::LapackQr::_get_stats "

[INTERNAL]  Get all statistics

";

%feature("docstring")  casadi::FunctionInternal::size2_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::LapackQr::_set_temp "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::jac_mx(int iind=0, int
oind=0, const Dict &opts=Dict()) "

[INTERNAL]  Jacobian expression.

";

%feature("docstring")  casadi::FunctionInternal::addShorthand(CodeGenerator
&g, const std::string &name) const  "

[INTERNAL]  Generate shorthand macro.

";

%feature("docstring")  casadi::FunctionInternal::getWorkSize() const  "

[INTERNAL]  Get the length of the work vector.

";

%feature("docstring")  casadi::FunctionInternal::finalize(const Dict &opts)
"

[INTERNAL]  Finalize the object creation This function, which visits the
class hierarchy in reverse order is run after init() has been completed.

";

%feature("docstring")  casadi::LinsolInternal::linsol_eval_sx(const SXElem
**arg, SXElem **res, int *iw, SXElem *w, int mem, bool tr, int nrhs) const
"

[INTERNAL]  Evaluate SX, possibly transposed.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::set_temp(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::replaceArg(const
std::vector< M > &arg, bool hcat=false) const  "

[INTERNAL]  Replace 0-by-0 inputs.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInput(int k) const
"

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::LapackQr::_eval "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring") casadi::LapackQr::_eval "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring") casadi::LapackQr::_eval "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring") casadi::LapackQr::LapackQr(const std::string &name) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::checkArg(const std::vector<
M > &arg, bool hcat=false) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::FunctionInternal::hasFullJacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(int nadj) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::LapackQr::solve(void *mem, double *x, int
nrhs, bool tr) const override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::size_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInputReal(int k)
const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::LapackQr::init(const Dict &opts) override "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::FunctionInternal::log(const std::string &msg)
const  "

[INTERNAL]  Log the status of the solver.

";

%feature("docstring")  casadi::FunctionInternal::log(const std::string &fcn,
const std::string &msg) const  "

[INTERNAL]  Log the status of the solver, function given.

";

%feature("docstring")  casadi::FunctionInternal::n_in() const  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")
casadi::FunctionInternal::generateFunction(CodeGenerator &g, const
std::string &fname, bool decl_static) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::FunctionInternal::checkInputs() const  "

[INTERNAL]  Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::LinsolInternal::linsol_cholesky_sparsity(void
*mem, bool tr) const  "

[INTERNAL]   Sparsity pattern of the cholesky factors.

";

%feature("docstring")  casadi::FunctionInternal::tangent(int iind, int oind)
"

[INTERNAL]  Return tangent function.

";

%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::set_jac_sparsity(const
Sparsity &sp, int iind, int oind, bool compact) "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::get_stats(void *mem) const
"

[INTERNAL]  Get all statistics

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::LinsolInternal::get_n_in() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::grad_mx(int iind=0, int
oind=0) "

[INTERNAL]  Gradient expression.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::map_mx(const std::vector<
std::vector< MX > > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::map_mx(const std::vector<
MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::get_function() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::name_out(int ind) const  "

[INTERNAL]  Get output scheme name by index.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::replaceFwdSeed(const
std::vector< std::vector< M > > &fseed) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::get_sparsity_out(int i) "

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::FunctionInternal::generateBody(CodeGenerator
&g) const  "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring")  casadi::FunctionInternal::getJacobian(const
std::string &name, int iind, int oind, bool compact, bool symmetric, const
Dict &opts) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::repr(std::ostream &stream)
const override "

[INTERNAL]  Print.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::FunctionInternal::symbolicFwdSeed(int nfwd,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::eval_name() const  "

[INTERNAL]  Get name of the evaluation function.

";

%feature("docstring")  casadi::FunctionInternal::name() const  "

[INTERNAL]  Name of the function.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(int nfwd) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::LapackQr::alloc_memory() const override "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::FunctionInternal::get_forward(const
std::string &name, int nfwd, const std::vector< std::string > &i_names,
const std::vector< std::string > &o_names, const Dict &opts) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::replaceAdjSeed(const
std::vector< std::vector< M > > &aseed) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring") casadi::LapackQr::~LapackQr "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::n_out() const  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::LapackQr::_set_work "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::LapackQr::plugin_name() const override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::clear_memory() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::reverse(int nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::hessian(int iind, int oind)
"

[INTERNAL]  Return Hessian function.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOutput(int k)
const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::jit_dependencies(const
std::string &fname) "

[INTERNAL]   Jit dependencies.

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< int > &order_in, const std::vector< int >
&order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::FunctionInternal::jac_sx(int iind=0, int
oind=0, const Dict &opts=Dict()) "

[INTERNAL]  Jacobian expression.

";

%feature("docstring")  casadi::FunctionInternal::getGradient(const
std::string &name, int iind, int oind, const Dict &opts) "

[INTERNAL]  Return gradient function.

";

%feature("docstring")  casadi::LapackQr::factorize(void *mem, const double
*A) const override "

[INTERNAL]  Factorize the linear system.

";

%feature("docstring")  casadi::LinsolInternal::type_name() const override "

[INTERNAL]  Get type name.

";

%feature("docstring")  casadi::FunctionInternal::hasDerivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::FunctionInternal::eval(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::mx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::FunctionInternal::verbose() const  "

[INTERNAL]  Verbose mode?

";

%feature("docstring")  casadi::FunctionInternal::get_n_forward() const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::LinsolInternal::rank(void *mem) const  "

[INTERNAL]   Matrix rank.

";

%feature("docstring")  casadi::FunctionInternal::get_name_out(int i) "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::print_free(std::ostream
&stream) const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::FunctionInternal::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(int ind) const
"

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(const
std::string &iname) const  "

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::FunctionInternal::sx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::checkRes(const std::vector<
M > &res) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

";

%feature("docstring")  casadi::LinsolInternal::linsol_cholesky(void *mem,
bool tr) const  "

[INTERNAL]  Get Cholesky factor.

";

%feature("docstring")  casadi::FunctionInternal::replaceRes(const
std::vector< M > &res) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::getHessian(int iind, int
oind) "

[INTERNAL]  Return Hessian function.

";

%feature("docstring")  casadi::FunctionInternal::hess_sx(int iind=0, int
oind=0) "

[INTERNAL]  Hessian expression.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::forward(int nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, int order, bool
tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::sp_fwd(const bvec_t **arg,
bvec_t **res, int *iw, bvec_t *w, int mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::LinsolInternal::get_n_out() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::size_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(int ind) const
"

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(const
std::string &iname) const  "

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::LinsolInternal::pivoting(void *mem, const
double *A) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::getJacSparsityGen(int iind,
int oind, bool symmetric, int gr_i=1, int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";


// File: classcasadi_1_1LinearInterpolant.xml
%feature("docstring")  casadi::FunctionInternal::grad_sx(int iind=0, int
oind=0) "

[INTERNAL]  Gradient expression.

";

%feature("docstring")  casadi::FunctionInternal::get_n_forward() const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::Interpolant::get_sparsity_out(int i) override
"

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::print(std::ostream &stream)
const override "

[INTERNAL]  Print.

";

%feature("docstring")  casadi::FunctionInternal::simplifiedCall() const  "

[INTERNAL]  Use simplified signature.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< int > &order_in, const std::vector< int >
&order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::LinearInterpolant::getFullJacobian(const
std::string &name, const std::vector< std::string > &i_names, const
std::vector< std::string > &o_names, const Dict &opts) override "

[INTERNAL]  Full Jacobian.

";

%feature("docstring")  casadi::FunctionInternal::tang_sx(int iind=0, int
oind=0) "

[INTERNAL]  Tangent expression.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::repr(std::ostream &stream)
const override "

[INTERNAL]  Print.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::getPartition(int iind, int
oind, Sparsity &D1, Sparsity &D2, bool compact, bool symmetric, bool
allow_forward, bool allow_reverse) "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::name_in(int ind) const  "

[INTERNAL]  Get input scheme name by index.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::FunctionInternal::addDependency(CodeGenerator
&g) const  "

[INTERNAL]  Add a dependent function.

";

%feature("docstring")  casadi::FunctionInternal::replaceArg(const
std::vector< M > &arg, bool hcat=false) const  "

[INTERNAL]  Replace 0-by-0 inputs.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::addShorthand(CodeGenerator
&g, const std::string &name) const  "

[INTERNAL]  Generate shorthand macro.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::jac_sx(int iind=0, int
oind=0, const Dict &opts=Dict()) "

[INTERNAL]  Jacobian expression.

";

%feature("docstring") casadi::LinearInterpolant::_set_work "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::sx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::getAlgorithmSize() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring") casadi::LinearInterpolant::_eval "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring") casadi::LinearInterpolant::_eval "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring") casadi::LinearInterpolant::_eval "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::hasDerivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::get_forward(const
std::string &name, int nfwd, const std::vector< std::string > &i_names,
const std::vector< std::string > &o_names, const Dict &opts) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::default_in(int ind) const
"

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::get_function() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::n_out() const  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::symbolicOutput(const
std::vector< MX > &arg) "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::FunctionInternal::size_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::Interpolant::get_n_in() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::checkInputs() const  "

[INTERNAL]  Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::fullJacobian() "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")
casadi::FunctionInternal::generateFunction(CodeGenerator &g, const
std::string &fname, bool decl_static) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::LinearInterpolant::init(const Dict &opts)
override "

[INTERNAL]  Initialize Initialize and make the object ready for setting
arguments and evaluation. This method is typically called after setting
options but before evaluating. If passed to another class (in the
constructor), this class should invoke this function when initialized.

";

%feature("docstring")  casadi::FunctionInternal::matchingArg(const
std::vector< M > &arg, bool hcat=false) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, int order, bool
tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::size_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::getGradient(const
std::string &name, int iind, int oind, const Dict &opts) "

[INTERNAL]  Return gradient function.

";

%feature("docstring") casadi::LinearInterpolant::_setup "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::FunctionInternal::forward(int nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::replaceFwdSeed(const
std::vector< std::vector< M > > &fseed) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(int nadj,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FunctionInternal::gradient(int iind, int
oind) "

[INTERNAL]  Return gradient function.

";

%feature("docstring")
casadi::FunctionInternal::generateDeclarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::getTangent(const
std::string &name, int iind, int oind, const Dict &opts) "

[INTERNAL]  Return tangent function.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOutput(int k)
const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::checkRes(const std::vector<
M > &res) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

";

%feature("docstring")  casadi::FunctionInternal::construct(const Dict &opts)
"

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::Interpolant::type_name() const override "

[INTERNAL]  Get type name.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring") casadi::LinearInterpolant::_call "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring") casadi::LinearInterpolant::_call "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::sx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::map_mx(const std::vector<
std::vector< MX > > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::map_mx(const std::vector<
MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FunctionInternal::tang_mx(int iind=0, int
oind=0) "

[INTERNAL]  Tangent expression.

";

%feature("docstring")  casadi::FunctionInternal::jit_dependencies(const
std::string &fname) "

[INTERNAL]   Jit dependencies.

";

%feature("docstring")  casadi::FunctionInternal::grad_mx(int iind=0, int
oind=0) "

[INTERNAL]  Gradient expression.

";

%feature("docstring")  casadi::Interpolant::get_name_out(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::alloc_memory() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsityGen(int iind,
int oind, bool symmetric, int gr_i=1, int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FunctionInternal::init_memory(void *mem)
const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::log(const std::string &msg)
const  "

[INTERNAL]  Log the status of the solver.

";

%feature("docstring")  casadi::FunctionInternal::log(const std::string &fcn,
const std::string &msg) const  "

[INTERNAL]  Log the status of the solver, function given.

";

%feature("docstring")  casadi::FunctionInternal::hessian(int iind, int oind)
"

[INTERNAL]  Return Hessian function.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::FunctionInternal::free_memory(void *mem)
const  "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::getJacobian(const
std::string &name, int iind, int oind, bool compact, bool symmetric, const
Dict &opts) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::LinearInterpolant::has_codegen() const
override "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::FunctionInternal::tangent(int iind, int oind)
"

[INTERNAL]  Return tangent function.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::reverse(int nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::Interpolant::get_name_in(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::checkArg(const std::vector<
M > &arg, bool hcat=false) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(int ind) const
"

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(const
std::string &iname) const  "

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::FunctionInternal::get_n_reverse() const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::generateMeta(CodeGenerator
&g, const std::string &fname) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FunctionInternal::n_mem() const  "

[INTERNAL]  Maximum number of memory objects.

";

%feature("docstring")  casadi::FunctionInternal::symbolicFwdSeed(int nfwd,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInput(int k) const
"

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::clear_memory() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::getWorkSize() const  "

[INTERNAL]  Get the length of the work vector.

";

%feature("docstring")  casadi::FunctionInternal::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring")  casadi::LinearInterpolant::plugin_name() const
override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::Interpolant::get_n_out() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::FunctionInternal::print_free(std::ostream
&stream) const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::FunctionInternal::setJacobian(const Function
&jac, int iind, int oind, bool compact) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::eval_name() const  "

[INTERNAL]  Get name of the evaluation function.

";

%feature("docstring")  casadi::FunctionInternal::get_reverse(const
std::string &name, int nadj, const std::vector< std::string > &i_names,
const std::vector< std::string > &o_names, const Dict &opts) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::replaceRes(const
std::vector< M > &res) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring") casadi::LinearInterpolant::_get_stats "

[INTERNAL]  Get all statistics

";

%feature("docstring") casadi::LinearInterpolant "

'linear' plugin for Interpolant Implements a multilinear interpolant: For
1D, the interpolating polynomial will be linear. For 2D, the interpolating
polynomial will be bilinear, etc.

>List of available options

+-------------+-----------------+------------------------------------------+
|     Id      |      Type       |               Description                |
+=============+=================+==========================================+
| lookup_mode | OT_STRINGVECTOR | Sets, for each grid dimenion, the lookup |
|             |                 | algorithm used to find the correct       |
|             |                 | index. 'linear' uses a for-loop + break; |
|             |                 | 'exact' uses floored division (only for  |
|             |                 | uniform grids).                          |
+-------------+-----------------+------------------------------------------+

Joel Andersson

>List of available options

+-------------+-----------------+---------------------+--------------------+
|     Id      |      Type       |     Description     |      Used in       |
+=============+=================+=====================+====================+
| lookup_mode | OT_STRINGVECTOR | Sets, for each grid | casadi::LinearInte |
|             |                 | dimenion, the       | rpolant            |
|             |                 | lookup algorithm    |                    |
|             |                 | used to find the    |                    |
|             |                 | correct index.      |                    |
|             |                 | 'linear' uses a     |                    |
|             |                 | for-loop + break;   |                    |
|             |                 | 'exact' uses        |                    |
|             |                 | floored division    |                    |
|             |                 | (only for uniform   |                    |
|             |                 | grids).             |                    |
+-------------+-----------------+---------------------+--------------------+

Diagrams
--------



C++ includes: linear_interpolant.hpp ";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::sp_fwd(const bvec_t **arg,
bvec_t **res, int *iw, bvec_t *w, int mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::sp_rev(bvec_t **arg, bvec_t
**res, int *iw, bvec_t *w, int mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::name_out(int ind) const  "

[INTERNAL]  Get output scheme name by index.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::finalize(const Dict &opts)
"

[INTERNAL]  Finalize the object creation This function, which visits the
class hierarchy in reverse order is run after init() has been completed.

";

%feature("docstring")  casadi::FunctionInternal::verbose() const  "

[INTERNAL]  Verbose mode?

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, int *iw, SXElem *w, int mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring") casadi::LinearInterpolant::LinearInterpolant(const
std::string &name, const std::vector< double > &grid, const std::vector< int
> &offset, const std::vector< double > &values) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(int iind, int
oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::name() const  "

[INTERNAL]  Name of the function.

";

%feature("docstring")  casadi::FunctionInternal::jac_mx(int iind=0, int
oind=0, const Dict &opts=Dict()) "

[INTERNAL]  Jacobian expression.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring") casadi::LinearInterpolant::_set_temp "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::get_stats(void *mem) const
"

[INTERNAL]  Get all statistics

";

%feature("docstring")  casadi::LinearInterpolant::eval(void *mem, const
double **arg, double **res, int *iw, double *w) const override "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOperation(int k)
const  "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::Interpolant::get_sparsity_in(int i) override
"

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::jacobian(int iind, int
oind, bool compact, bool symmetric) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(int nfwd) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::n_in() const  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(int iind,
int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInputReal(int k)
const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::LinearInterpolant::get_options() const
override "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::FunctionInternal::getHessian(int iind, int
oind) "

[INTERNAL]  Return Hessian function.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::LinearInterpolant::generateBody(CodeGenerator
&g) const override "

[INTERNAL]  Generate code for the body of the C function.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(int ind) const
"

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(const
std::string &iname) const  "

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::simple(const double *arg,
double *res) const  "

[INTERNAL]  Evaluate numerically, simplied syntax.

";

%feature("docstring")  casadi::FunctionInternal::set_jac_sparsity(const
Sparsity &sp, int iind, int oind, bool compact) "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::LinearInterpolant::~LinearInterpolant "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::hess_sx(int iind=0, int
oind=0) "

[INTERNAL]  Hessian expression.

";

%feature("docstring")  casadi::FunctionInternal::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::set_temp(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::replaceAdjSeed(const
std::vector< std::vector< M > > &aseed) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::LinearInterpolant::hasFullJacobian() const
override "

[INTERNAL]  Full Jacobian.

";

%feature("docstring")  casadi::FunctionInternal::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(int nadj) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::matchingRes(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

";


// File: classcasadi_1_1LinearInterpolantJac.xml
%feature("docstring")  casadi::FunctionInternal::get_options() const  "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::FunctionInternal::size_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::LinearInterpolantJac::init(const Dict &opts)
override "

[INTERNAL]  Initialize Initialize and make the object ready for setting
arguments and evaluation. This method is typically called after setting
options but before evaluating. If passed to another class (in the
constructor), this class should invoke this function when initialized.

";

%feature("docstring")
casadi::FunctionInternal::generateFunction(CodeGenerator &g, const
std::string &fname, bool decl_static) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::FunctionInternal::get_name_out(int i) "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::replaceArg(const
std::vector< M > &arg, bool hcat=false) const  "

[INTERNAL]  Replace 0-by-0 inputs.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring") casadi::LinearInterpolantJac::_eval "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring") casadi::LinearInterpolantJac::_eval "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring") casadi::LinearInterpolantJac::_eval "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::set_temp(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::construct(const Dict &opts)
"

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::FunctionInternal::clear_memory() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, int *iw, SXElem *w, int mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::FunctionInternal::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::FunctionInternal::getAlgorithmSize() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring") casadi::LinearInterpolantJac::_set_temp "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::repr(std::ostream &stream)
const override "

[INTERNAL]  Print.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInputReal(int k)
const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::getGradient(const
std::string &name, int iind, int oind, const Dict &opts) "

[INTERNAL]  Return gradient function.

";

%feature("docstring") casadi::LinearInterpolantJac::_set_work "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::print_free(std::ostream
&stream) const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::FunctionInternal::sx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::LinearInterpolantJac::_setup "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::init_memory(void *mem)
const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::matchingArg(const
std::vector< M > &arg, bool hcat=false) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::tang_mx(int iind=0, int
oind=0) "

[INTERNAL]  Tangent expression.

";

%feature("docstring")  casadi::FunctionInternal::get_stats(void *mem) const
"

[INTERNAL]  Get all statistics

";

%feature("docstring")  casadi::FunctionInternal::alloc_memory() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(int nadj) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::jit_dependencies(const
std::string &fname) "

[INTERNAL]   Jit dependencies.

";

%feature("docstring")  casadi::FunctionInternal::n_mem() const  "

[INTERNAL]  Maximum number of memory objects.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::reverse(int nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::get_name_in(int i) "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::LinearInterpolantJac::eval(void *mem, const
double **arg, double **res, int *iw, double *w) const override "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(int ind) const
"

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(const
std::string &iname) const  "

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::tangent(int iind, int oind)
"

[INTERNAL]  Return tangent function.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsityGen(int iind,
int oind, bool symmetric, int gr_i=1, int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::forward(int nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::hessian(int iind, int oind)
"

[INTERNAL]  Return Hessian function.

";

%feature("docstring")  casadi::FunctionInternal::get_sparsity_in(int i) "

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(int nadj,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FunctionInternal::getWorkSize() const  "

[INTERNAL]  Get the length of the work vector.

";

%feature("docstring")  casadi::FunctionInternal::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, int order, bool
tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::FunctionInternal::checkInputs() const  "

[INTERNAL]  Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::FunctionInternal::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::LinearInterpolantJac::_call "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring") casadi::LinearInterpolantJac::_call "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::checkArg(const std::vector<
M > &arg, bool hcat=false) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::get_n_reverse() const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::log(const std::string &msg)
const  "

[INTERNAL]  Log the status of the solver.

";

%feature("docstring")  casadi::FunctionInternal::log(const std::string &fcn,
const std::string &msg) const  "

[INTERNAL]  Log the status of the solver, function given.

";

%feature("docstring")  casadi::FunctionInternal::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::name_in(int ind) const  "

[INTERNAL]  Get input scheme name by index.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::FunctionInternal::print(std::ostream &stream)
const override "

[INTERNAL]  Print.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::generateMeta(CodeGenerator
&g, const std::string &fname) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FunctionInternal::get_reverse(const
std::string &name, int nadj, const std::vector< std::string > &i_names,
const std::vector< std::string > &o_names, const Dict &opts) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring") casadi::LinearInterpolantJac::_get_stats "

[INTERNAL]  Get all statistics

";

%feature("docstring")  casadi::FunctionInternal::get_sparsity_out(int i) "

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::symbolicOutput(const
std::vector< MX > &arg) "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(int nfwd) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::replaceAdjSeed(const
std::vector< std::vector< M > > &aseed) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::matchingRes(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

";

%feature("docstring")  casadi::FunctionInternal::jac_sx(int iind=0, int
oind=0, const Dict &opts=Dict()) "

[INTERNAL]  Jacobian expression.

";

%feature("docstring")  casadi::FunctionInternal::get_forward(const
std::string &name, int nfwd, const std::vector< std::string > &i_names,
const std::vector< std::string > &o_names, const Dict &opts) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::getFullJacobian(const
std::string &name, const std::vector< std::string > &i_names, const
std::vector< std::string > &o_names, const Dict &opts) "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::n_out() const  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::verbose() const  "

[INTERNAL]  Verbose mode?

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(int iind, int
oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::grad_mx(int iind=0, int
oind=0) "

[INTERNAL]  Gradient expression.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::FunctionInternal::jacobian(int iind, int
oind, bool compact, bool symmetric) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::setJacobian(const Function
&jac, int iind, int oind, bool compact) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInput(int k) const
"

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::getJacobian(const
std::string &name, int iind, int oind, bool compact, bool symmetric, const
Dict &opts) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::default_in(int ind) const
"

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::set_jac_sparsity(const
Sparsity &sp, int iind, int oind, bool compact) "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::hess_sx(int iind=0, int
oind=0) "

[INTERNAL]  Hessian expression.

";

%feature("docstring")  casadi::FunctionInternal::tang_sx(int iind=0, int
oind=0) "

[INTERNAL]  Tangent expression.

";

%feature("docstring") casadi::LinearInterpolantJac::~LinearInterpolantJac "

[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::FunctionInternal::replaceFwdSeed(const
std::vector< std::vector< M > > &fseed) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring") casadi::LinearInterpolantJac "

[INTERNAL]  First order derivatives

>List of available options

+-------------+-----------------+---------------------+--------------------+
|     Id      |      Type       |     Description     |      Used in       |
+=============+=================+=====================+====================+
| lookup_mode | OT_STRINGVECTOR | Sets, for each grid | casadi::LinearInte |
|             |                 | dimenion, the       | rpolantJac         |
|             |                 | lookup algorithm    |                    |
|             |                 | used to find the    |                    |
|             |                 | correct index.      |                    |
|             |                 | 'linear' uses a     |                    |
|             |                 | for-loop + break;   |                    |
|             |                 | 'exact' uses        |                    |
|             |                 | floored division    |                    |
|             |                 | (only for uniform   |                    |
|             |                 | grids).             |                    |
+-------------+-----------------+---------------------+--------------------+

Diagrams
--------



C++ includes: linear_interpolant.hpp ";

%feature("docstring")  casadi::FunctionInternal::get_function() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::addShorthand(CodeGenerator
&g, const std::string &name) const  "

[INTERNAL]  Generate shorthand macro.

";

%feature("docstring")  casadi::FunctionInternal::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::addDependency(CodeGenerator
&g) const  "

[INTERNAL]  Add a dependent function.

";

%feature("docstring")  casadi::FunctionInternal::simple(const double *arg,
double *res) const  "

[INTERNAL]  Evaluate numerically, simplied syntax.

";

%feature("docstring")  casadi::FunctionInternal::getPartition(int iind, int
oind, Sparsity &D1, Sparsity &D2, bool compact, bool symmetric, bool
allow_forward, bool allow_reverse) "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::checkRes(const std::vector<
M > &res) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< int > &order_in, const std::vector< int >
&order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::LinearInterpolantJac::type_name() const
override "

[INTERNAL]  Get type name.

";

%feature("docstring")  casadi::FunctionInternal::hasFullJacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::simplifiedCall() const  "

[INTERNAL]  Use simplified signature.

";

%feature("docstring")  casadi::FunctionInternal::eval_name() const  "

[INTERNAL]  Get name of the evaluation function.

";

%feature("docstring")  casadi::FunctionInternal::get_n_out() "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::size_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::free_memory(void *mem)
const  "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::name() const  "

[INTERNAL]  Name of the function.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(int ind) const
"

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(const
std::string &iname) const  "

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::FunctionInternal::name_out(int ind) const  "

[INTERNAL]  Get output scheme name by index.

";

%feature("docstring")
casadi::LinearInterpolantJac::generateBody(CodeGenerator &g) const override
"

[INTERNAL]  Generate code for the body of the C function.

";

%feature("docstring")  casadi::FunctionInternal::map_mx(const std::vector<
std::vector< MX > > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::map_mx(const std::vector<
MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOutput(int k)
const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::jac_mx(int iind=0, int
oind=0, const Dict &opts=Dict()) "

[INTERNAL]  Jacobian expression.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::sp_fwd(const bvec_t **arg,
bvec_t **res, int *iw, bvec_t *w, int mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::FunctionInternal::replaceRes(const
std::vector< M > &res) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOperation(int k)
const  "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::get_n_forward() const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::finalize(const Dict &opts)
"

[INTERNAL]  Finalize the object creation This function, which visits the
class hierarchy in reverse order is run after init() has been completed.

";

%feature("docstring")  casadi::FunctionInternal::fullJacobian() "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")
casadi::FunctionInternal::generateDeclarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::gradient(int iind, int
oind) "

[INTERNAL]  Return gradient function.

";

%feature("docstring")  casadi::FunctionInternal::getTangent(const
std::string &name, int iind, int oind, const Dict &opts) "

[INTERNAL]  Return tangent function.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(int iind,
int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::get_n_in() "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::getHessian(int iind, int
oind) "

[INTERNAL]  Return Hessian function.

";

%feature("docstring")  casadi::LinearInterpolantJac::has_codegen() const
override "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::FunctionInternal::grad_sx(int iind=0, int
oind=0) "

[INTERNAL]  Gradient expression.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::n_in() const  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::hasDerivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::symbolicFwdSeed(int nfwd,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")
casadi::LinearInterpolantJac::LinearInterpolantJac(const std::string &name)
"

[INTERNAL]  Constructor.

";

%feature("docstring")  casadi::FunctionInternal::sp_rev(bvec_t **arg, bvec_t
**res, int *iw, bvec_t *w, int mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";


// File: classcasadi_1_1Linsol.xml
%feature("docstring")  casadi::Linsol::cholesky(bool tr=false) const  "

Obtain a numeric Cholesky factorization Only for Cholesky solvers.

";

%feature("docstring")  casadi::Linsol::neig() const  "

Number of negative eigenvalues Not available for all solvers.

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=casadi::userOut()) const  "

[INTERNAL]  Print the pointer to the internal class

";

%feature("docstring")  casadi::Linsol::cholesky_sparsity(bool tr=false)
const  "

Obtain a symbolic Cholesky factorization Only for Cholesky solvers.

";

%feature("docstring")  casadi::Linsol::solve(const DM &A, const DM &B, bool
tr=false) const  "

Solve numerically.

";

%feature("docstring")  casadi::Linsol::solve(const MX &A, const MX &B, bool
tr=false) const  "

Create a solve node.

";

%feature("docstring") casadi::Linsol::__hash__ "

Returns a number that is unique for a given Node. If the Object does not
point to any node, \"0\" is returned.

";

%feature("docstring") casadi::Linsol::Linsol() "

Default constructor.

";

%feature("docstring") casadi::Linsol::Linsol(const std::string &name, const
std::string &solver, const Dict &opts=Dict()) "

Importer factory.

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=casadi::userOut(), bool trailing_newline=true) const  "

Print a description of the object.

";

%feature("docstring") casadi::Linsol "

Linear solver Create a solver for linear systems of equations Solves the
linear system A*X = B or A^T*X = B for X with A square and non- singular.

If A is structurally singular, an error will be thrown during init. If A is
numerically singular, the prepare step will fail.

General information
===================



List of plugins
===============



- csparsecholesky

- csparse

- ma27

- lapacklu

- lapackqr

- symbolicqr

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
Linsol.doc(\"myextraplugin\")



--------------------------------------------------------------------------------

csparsecholesky
---------------



Linsol with CSparseCholesky Interface

--------------------------------------------------------------------------------





--------------------------------------------------------------------------------

csparse
-------



Linsol with CSparse Interface

--------------------------------------------------------------------------------





--------------------------------------------------------------------------------

ma27
----



Interface to the sparse direct linear solver MA27 Works for symmetric
indefinite systems Partly adopted from qpOASES 3.2 Joel Andersson

--------------------------------------------------------------------------------

lapacklu
--------



This class solves the linear system A.x=b by making an LU factorization of
A: A = L.U, with L lower and U upper triangular

>List of available options

+-----------------------------+---------+----------------------------------+
|             Id              |  Type   |           Description            |
+=============================+=========+==================================+
| allow_equilibration_failure | OT_BOOL | Non-fatal error when             |
|                             |         | equilibration fails              |
+-----------------------------+---------+----------------------------------+
| equilibration               | OT_BOOL | Equilibrate the matrix           |
+-----------------------------+---------+----------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

lapackqr
--------



This class solves the linear system A.x=b by making an QR factorization of
A: A = Q.R, with Q orthogonal and R upper triangular

>List of available options

+----------+--------+------------------------------------------------------+
|    Id    |  Type  |                     Description                      |
+==========+========+======================================================+
| max_nrhs | OT_INT | Maximum number of right-hand-sides that get          |
|          |        | processed in a single pass [default:10].             |
+----------+--------+------------------------------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

symbolicqr
----------



Linear solver for sparse least-squares problems Inspired
fromhttps://github.com/scipy/scipy/blob/v0.14.0/scipy/sparse/linalg/isolve/lsqr.py#L96

Linsol based on QR factorization with sparsity pattern based reordering
without partial pivoting

>List of available options

+----------+-----------+---------------------------------------------------+
|    Id    |   Type    |                    Description                    |
+==========+===========+===================================================+
| codegen  | OT_BOOL   | C-code generation                                 |
+----------+-----------+---------------------------------------------------+
| compiler | OT_STRING | Compiler command to be used for compiling         |
|          |           | generated code                                    |
+----------+-----------+---------------------------------------------------+

--------------------------------------------------------------------------------



Joel Andersson

C++ includes: linsol.hpp ";

%feature("docstring")  casadi::SharedObject::repr(std::ostream
&stream=casadi::userOut(), bool trailing_newline=true) const  "

Print a representation of the object.

";

%feature("docstring")  casadi::Linsol::rank() const  "

Matrix rank Not available for all solvers.

";

%feature("docstring")  casadi::SharedObject::is_null() const  "

Is a null pointer?

";

%feature("docstring")  casadi::PrintableObject< SharedObject
>::getDescription() const "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::Linsol::plugin_name() const  "

Query plugin name.

";

%feature("docstring")  casadi::PrintableObject< SharedObject
>::getRepresentation() const "

Return a string with a representation (for SWIG)

";


// File: classcasadi_1_1Logger.xml
%feature("docstring") casadi::Logger "

Keeps track of logging output to screen and/or files. All printout from
CasADi routines should go through this files.

Joel Andersson

C++ includes: casadi_logger.hpp ";


// File: classcasadi_1_1Lsqr.xml
%feature("docstring")  casadi::FunctionInternal::get_n_reverse() const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::print(std::ostream &stream)
const override "

[INTERNAL]  Print.

";

%feature("docstring")  casadi::FunctionInternal::set_temp(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::get_sparsity_out(int i) "

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::jacobian(int iind, int
oind, bool compact, bool symmetric) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::get_stats(void *mem) const
"

[INTERNAL]  Get all statistics

";

%feature("docstring")  casadi::FunctionInternal::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::clear_memory() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::tangent(int iind, int oind)
"

[INTERNAL]  Return tangent function.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::grad_sx(int iind=0, int
oind=0) "

[INTERNAL]  Gradient expression.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::sp_rev(bvec_t **arg, bvec_t
**res, int *iw, bvec_t *w, int mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::LinsolInternal::type_name() const override "

[INTERNAL]  Get type name.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::getFullJacobian(const
std::string &name, const std::vector< std::string > &i_names, const
std::vector< std::string > &o_names, const Dict &opts) "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")
casadi::FunctionInternal::generateFunction(CodeGenerator &g, const
std::string &fname, bool decl_static) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::FunctionInternal::fullJacobian() "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::Lsqr::get_options() const override "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::FunctionInternal::getWorkSize() const  "

[INTERNAL]  Get the length of the work vector.

";

%feature("docstring")  casadi::FunctionInternal::get_sparsity_in(int i) "

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring") casadi::Lsqr::~Lsqr "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::generateBody(CodeGenerator
&g) const  "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::LinsolInternal::linsol_eval_sx(const SXElem
**arg, SXElem **res, int *iw, SXElem *w, int mem, bool tr, int nrhs) const
"

[INTERNAL]  Evaluate SX, possibly transposed.

";

%feature("docstring")  casadi::FunctionInternal::checkArg(const std::vector<
M > &arg, bool hcat=false) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::getHessian(int iind, int
oind) "

[INTERNAL]  Return Hessian function.

";

%feature("docstring")  casadi::LinsolInternal::solve_cholesky(void *mem,
double *x, int nrhs, bool tr) const  "

[INTERNAL]   Solve Cholesky.

";

%feature("docstring")  casadi::FunctionInternal::get_n_forward() const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::hasFullJacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::size_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::Lsqr::init_memory(void *mem) const override "

[INTERNAL]  Initalize memory block.

";

%feature("docstring") casadi::Lsqr::_set_work "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::hessian(int iind, int oind)
"

[INTERNAL]  Return Hessian function.

";

%feature("docstring")  casadi::FunctionInternal::forward(int nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::name() const  "

[INTERNAL]  Name of the function.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsityGen(int iind,
int oind, bool symmetric, int gr_i=1, int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, int order, bool
tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::sx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::LinsolInternal::pivoting(void *mem, const
double *A) const  "

[INTERNAL] ";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::FunctionInternal::log(const std::string &msg)
const  "

[INTERNAL]  Log the status of the solver.

";

%feature("docstring")  casadi::FunctionInternal::log(const std::string &fcn,
const std::string &msg) const  "

[INTERNAL]  Log the status of the solver, function given.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(int ind) const
"

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(const
std::string &iname) const  "

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::FunctionInternal::checkRes(const std::vector<
M > &res) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(int nadj,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FunctionInternal::gradient(int iind, int
oind) "

[INTERNAL]  Return gradient function.

";

%feature("docstring")  casadi::FunctionInternal::replaceFwdSeed(const
std::vector< std::vector< M > > &fseed) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::Lsqr::alloc_memory() const override "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::FunctionInternal::default_in(int ind) const
"

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring") casadi::Lsqr::_call "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring") casadi::Lsqr::_call "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::get_function() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::construct(const Dict &opts)
"

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::FunctionInternal::map_mx(const std::vector<
std::vector< MX > > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::map_mx(const std::vector<
MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::set_jac_sparsity(const
Sparsity &sp, int iind, int oind, bool compact) "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::LinsolInternal::neig(void *mem) const  "

[INTERNAL]  Number of negative eigenvalues.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::Lsqr::free_memory(void *mem) const override "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::grad_mx(int iind=0, int
oind=0) "

[INTERNAL]  Gradient expression.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::LinsolInternal::get_n_in() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::get_reverse(const
std::string &name, int nadj, const std::vector< std::string > &i_names,
const std::vector< std::string > &o_names, const Dict &opts) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::addDependency(CodeGenerator
&g) const  "

[INTERNAL]  Add a dependent function.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< int > &order_in, const std::vector< int >
&order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInput(int k) const
"

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::name_out(int ind) const  "

[INTERNAL]  Get output scheme name by index.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, int *iw, SXElem *w, int mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInputReal(int k)
const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(int nadj) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::sp_fwd(const bvec_t **arg,
bvec_t **res, int *iw, bvec_t *w, int mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::FunctionInternal::matchingArg(const
std::vector< M > &arg, bool hcat=false) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::checkInputs() const  "

[INTERNAL]  Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::FunctionInternal::get_forward(const
std::string &name, int nfwd, const std::vector< std::string > &i_names,
const std::vector< std::string > &o_names, const Dict &opts) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::print_free(std::ostream
&stream) const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::LinsolInternal::get_n_out() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::getJacobian(const
std::string &name, int iind, int oind, bool compact, bool symmetric, const
Dict &opts) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FunctionInternal::setJacobian(const Function
&jac, int iind, int oind, bool compact) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::replaceArg(const
std::vector< M > &arg, bool hcat=false) const  "

[INTERNAL]  Replace 0-by-0 inputs.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FunctionInternal::getAlgorithmSize() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::LinsolInternal::linsol_cholesky_sparsity(void
*mem, bool tr) const  "

[INTERNAL]   Sparsity pattern of the cholesky factors.

";

%feature("docstring")  casadi::FunctionInternal::replaceRes(const
std::vector< M > &res) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::get_name_out(int i) "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOutput(int k)
const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::generateMeta(CodeGenerator
&g, const std::string &fname) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FunctionInternal::tang_mx(int iind=0, int
oind=0) "

[INTERNAL]  Tangent expression.

";

%feature("docstring")  casadi::FunctionInternal::simple(const double *arg,
double *res) const  "

[INTERNAL]  Evaluate numerically, simplied syntax.

";

%feature("docstring")  casadi::FunctionInternal::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring")  casadi::FunctionInternal::size_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::get_name_in(int i) "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::n_in() const  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::Lsqr::factorize(void *mem, const double *A)
const override "

[INTERNAL]  Factorize the linear system.

";

%feature("docstring") casadi::Lsqr::_set_temp "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::Lsqr::plugin_name() const override "

[INTERNAL] ";

%feature("docstring") casadi::Lsqr::_get_stats "

[INTERNAL]  Get all statistics

";

%feature("docstring")  casadi::FunctionInternal::replaceAdjSeed(const
std::vector< std::vector< M > > &aseed) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring") casadi::Lsqr "

'symbolicqr' plugin for Linsol

Linear solver for sparse least-squares problems Inspired
fromhttps://github.com/scipy/scipy/blob/v0.14.0/scipy/sparse/linalg/isolve/lsqr.py#L96

Linsol based on QR factorization with sparsity pattern based reordering
without partial pivoting

>List of available options

+----------+-----------+---------------------------------------------------+
|    Id    |   Type    |                    Description                    |
+==========+===========+===================================================+
| codegen  | OT_BOOL   | C-code generation                                 |
+----------+-----------+---------------------------------------------------+
| compiler | OT_STRING | Compiler command to be used for compiling         |
|          |           | generated code                                    |
+----------+-----------+---------------------------------------------------+

Joel Andersson

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
+------------------+-----------------+------------------+------------------+
| codegen          | OT_BOOL         | C-code           | casadi::Lsqr     |
|                  |                 | generation       |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Compiler command | casadi::Lsqr     |
|                  |                 | to be used for   |                  |
|                  |                 | compiling        |                  |
|                  |                 | generated code   |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Custom input     | casadi::Function |
|                  |                 | scheme           | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Custom output    | casadi::Function |
|                  |                 | scheme           | Internal         |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: lsqr.hpp ";

%feature("docstring")  casadi::FunctionInternal::name_in(int ind) const  "

[INTERNAL]  Get input scheme name by index.

";

%feature("docstring")  casadi::FunctionInternal::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(int nfwd) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::Lsqr::reset(void *mem, const int *sp) const
override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::getGradient(const
std::string &name, int iind, int oind, const Dict &opts) "

[INTERNAL]  Return gradient function.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring") casadi::Lsqr::Lsqr(const std::string &name) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::getAtomicOperation(int k)
const  "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::n_mem() const  "

[INTERNAL]  Maximum number of memory objects.

";

%feature("docstring")  casadi::FunctionInternal::reverse(int nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::symbolicOutput(const
std::vector< MX > &arg) "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::FunctionInternal::simplifiedCall() const  "

[INTERNAL]  Use simplified signature.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::jit_dependencies(const
std::string &fname) "

[INTERNAL]   Jit dependencies.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring") casadi::Lsqr::_eval "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring") casadi::Lsqr::_eval "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring") casadi::Lsqr::_eval "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::getPartition(int iind, int
oind, Sparsity &D1, Sparsity &D2, bool compact, bool symmetric, bool
allow_forward, bool allow_reverse) "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring") casadi::Lsqr::_setup "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")
casadi::FunctionInternal::generateDeclarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::eval_name() const  "

[INTERNAL]  Get name of the evaluation function.

";

%feature("docstring")  casadi::FunctionInternal::n_out() const  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::Lsqr::init(const Dict &opts) override "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::tang_sx(int iind=0, int
oind=0) "

[INTERNAL]  Tangent expression.

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::hess_sx(int iind=0, int
oind=0) "

[INTERNAL]  Hessian expression.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::symbolicFwdSeed(int nfwd,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::verbose() const  "

[INTERNAL]  Verbose mode?

";

%feature("docstring")  casadi::FunctionInternal::size2_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::LinsolInternal::rank(void *mem) const  "

[INTERNAL]   Matrix rank.

";

%feature("docstring")  casadi::FunctionInternal::hasDerivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::eval(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::Lsqr::solve(void *mem, double *x, int nrhs,
bool tr) const override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::jac_sx(int iind=0, int
oind=0, const Dict &opts=Dict()) "

[INTERNAL]  Jacobian expression.

";

%feature("docstring")  casadi::FunctionInternal::getTangent(const
std::string &name, int iind, int oind, const Dict &opts) "

[INTERNAL]  Return tangent function.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::FunctionInternal::finalize(const Dict &opts)
"

[INTERNAL]  Finalize the object creation This function, which visits the
class hierarchy in reverse order is run after init() has been completed.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(int iind,
int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(int iind, int
oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::matchingRes(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

";

%feature("docstring")  casadi::LinsolInternal::linsol_cholesky(void *mem,
bool tr) const  "

[INTERNAL]  Get Cholesky factor.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::addShorthand(CodeGenerator
&g, const std::string &name) const  "

[INTERNAL]  Generate shorthand macro.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(int ind) const
"

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(const
std::string &iname) const  "

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::FunctionInternal::repr(std::ostream &stream)
const override "

[INTERNAL]  Print.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::FunctionInternal::jac_mx(int iind=0, int
oind=0, const Dict &opts=Dict()) "

[INTERNAL]  Jacobian expression.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";


// File: classcasadi_1_1Map.xml
%feature("docstring")  casadi::FunctionInternal::getAtomicInputReal(int k)
const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::hessian(int iind, int oind)
"

[INTERNAL]  Return Hessian function.

";

%feature("docstring")  casadi::FunctionInternal::clear_memory() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::n_in() const  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::Map::get_n_out() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::Map::get_n_in() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::FunctionInternal::size_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::matchingRes(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::Map::_setup "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::addDependency(CodeGenerator
&g) const  "

[INTERNAL]  Add a dependent function.

";

%feature("docstring") casadi::Map::_eval "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring") casadi::Map::_eval "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring") casadi::Map::_eval "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(int nfwd) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::Map::eval(void *mem, const double **arg,
double **res, int *iw, double *w) const override "

[INTERNAL]  Evaluate the function numerically.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::symbolicOutput(const
std::vector< MX > &arg) "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::getFullJacobian(const
std::string &name, const std::vector< std::string > &i_names, const
std::vector< std::string > &o_names, const Dict &opts) "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::checkArg(const std::vector<
M > &arg, bool hcat=false) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::getWorkSize() const  "

[INTERNAL]  Get the length of the work vector.

";

%feature("docstring")  casadi::Map::get_n_reverse() const override "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Map "

[INTERNAL]  Evaluate in parallel Joel Andersson

C++ includes: map.hpp ";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, int order, bool
tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::sx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< int > &order_in, const std::vector< int >
&order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::matchingArg(const
std::vector< M > &arg, bool hcat=false) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::forward(int nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::getHessian(int iind, int
oind) "

[INTERNAL]  Return Hessian function.

";

%feature("docstring")  casadi::FunctionInternal::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::FunctionInternal::size_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")
casadi::FunctionInternal::generateFunction(CodeGenerator &g, const
std::string &fname, bool decl_static) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::Map::get_forward(const std::string &name, int
nfwd, const std::vector< std::string > &i_names, const std::vector<
std::string > &o_names, const Dict &opts) const override "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::FunctionInternal::getJacobian(const
std::string &name, int iind, int oind, bool compact, bool symmetric, const
Dict &opts) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring") casadi::Map::_call "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring") casadi::Map::_call "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::jacobian(int iind, int
oind, bool compact, bool symmetric) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::simple(const double *arg,
double *res) const  "

[INTERNAL]  Evaluate numerically, simplied syntax.

";

%feature("docstring")  casadi::FunctionInternal::addShorthand(CodeGenerator
&g, const std::string &name) const  "

[INTERNAL]  Generate shorthand macro.

";

%feature("docstring")  casadi::Map::has_sprev() const override "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::FunctionInternal::checkInputs() const  "

[INTERNAL]  Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::FunctionInternal::grad_mx(int iind=0, int
oind=0) "

[INTERNAL]  Gradient expression.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::replaceFwdSeed(const
std::vector< std::vector< M > > &fseed) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::tangent(int iind, int oind)
"

[INTERNAL]  Return tangent function.

";

%feature("docstring")  casadi::Map::sp_rev(bvec_t **arg, bvec_t **res, int
*iw, bvec_t *w, int mem) const override "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::name_in(int ind) const  "

[INTERNAL]  Get input scheme name by index.

";

%feature("docstring")  casadi::FunctionInternal::jit_dependencies(const
std::string &fname) "

[INTERNAL]   Jit dependencies.

";

%feature("docstring")  casadi::Map::generateDeclarations(CodeGenerator &g)
const override "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::verbose() const  "

[INTERNAL]  Verbose mode?

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(int nadj,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FunctionInternal::fullJacobian() "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::free_memory(void *mem)
const  "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::jac_mx(int iind=0, int
oind=0, const Dict &opts=Dict()) "

[INTERNAL]  Jacobian expression.

";

%feature("docstring")  casadi::FunctionInternal::eval_name() const  "

[INTERNAL]  Get name of the evaluation function.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(int ind) const
"

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(const
std::string &iname) const  "

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInput(int k) const
"

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::gradient(int iind, int
oind) "

[INTERNAL]  Return gradient function.

";

%feature("docstring")  casadi::FunctionInternal::map_mx(const std::vector<
std::vector< MX > > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::map_mx(const std::vector<
MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::get_stats(void *mem) const
"

[INTERNAL]  Get all statistics

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::name_out(int ind) const  "

[INTERNAL]  Get output scheme name by index.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::FunctionInternal::simplifiedCall() const  "

[INTERNAL]  Use simplified signature.

";

%feature("docstring")  casadi::Map::eval_sx(const SXElem **arg, SXElem
**res, int *iw, SXElem *w, int mem) const override "

[INTERNAL]  evaluate symbolically while also propagating directional
derivatives

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring")  casadi::FunctionInternal::setJacobian(const Function
&jac, int iind, int oind, bool compact) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::n_mem() const  "

[INTERNAL]  Maximum number of memory objects.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::Map::get_name_out(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::FunctionInternal::hess_sx(int iind=0, int
oind=0) "

[INTERNAL]  Hessian expression.

";

%feature("docstring")  casadi::FunctionInternal::tang_sx(int iind=0, int
oind=0) "

[INTERNAL]  Tangent expression.

";

%feature("docstring") casadi::Map::_set_work "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::Map::init(const Dict &opts) override "

[INTERNAL]  Initialize.

";

%feature("docstring") casadi::Map::_set_temp "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::jac_sx(int iind=0, int
oind=0, const Dict &opts=Dict()) "

[INTERNAL]  Jacobian expression.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::construct(const Dict &opts)
"

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::get_options() const  "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::FunctionInternal::getPartition(int iind, int
oind, Sparsity &D1, Sparsity &D2, bool compact, bool symmetric, bool
allow_forward, bool allow_reverse) "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring") casadi::Map::_get_stats "

[INTERNAL]  Get all statistics

";

%feature("docstring")  casadi::FunctionInternal::repr(std::ostream &stream)
const override "

[INTERNAL]  Print.

";

%feature("docstring")  casadi::Map::get_sparsity_in(int i) override "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::get_function() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::Map::get_n_forward() const override "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::init_memory(void *mem)
const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::Map::parallelization() const  "

[INTERNAL]  Type of parallellization.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Map::~Map "

[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::FunctionInternal::getAlgorithmSize() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::replaceArg(const
std::vector< M > &arg, bool hcat=false) const  "

[INTERNAL]  Replace 0-by-0 inputs.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::Map::has_spfwd() const override "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(int ind) const
"

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(const
std::string &iname) const  "

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(int iind, int
oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(int iind,
int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::FunctionInternal::replaceAdjSeed(const
std::vector< std::vector< M > > &aseed) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::Map::has_codegen() const override "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::Map::get_reverse(const std::string &name, int
nadj, const std::vector< std::string > &i_names, const std::vector<
std::string > &o_names, const Dict &opts) const override "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::Map::get_sparsity_out(int i) override "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::Map::sp_fwd(const bvec_t **arg, bvec_t **res,
int *iw, bvec_t *w, int mem) const override "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::FunctionInternal::finalize(const Dict &opts)
"

[INTERNAL]  Finalize the object creation This function, which visits the
class hierarchy in reverse order is run after init() has been completed.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::tang_mx(int iind=0, int
oind=0) "

[INTERNAL]  Tangent expression.

";

%feature("docstring")  casadi::FunctionInternal::generateMeta(CodeGenerator
&g, const std::string &fname) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FunctionInternal::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::reverse(int nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::name() const  "

[INTERNAL]  Name of the function.

";

%feature("docstring")  casadi::FunctionInternal::log(const std::string &msg)
const  "

[INTERNAL]  Log the status of the solver.

";

%feature("docstring")  casadi::FunctionInternal::log(const std::string &fcn,
const std::string &msg) const  "

[INTERNAL]  Log the status of the solver, function given.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::Map::generateBody(CodeGenerator &g) const
override "

[INTERNAL]  Generate code for the body of the C function.

";

%feature("docstring")  casadi::Map::get_name_in(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::Map::evalGen(const T **arg, T **res, int *iw,
T *w) const  "

[INTERNAL]  Evaluate or propagate sparsities.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOutput(int k)
const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(int nadj) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::hasDerivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::symbolicFwdSeed(int nfwd,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::set_temp(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::FunctionInternal::hasFullJacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOperation(int k)
const  "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::Map::type_name() const override "

[INTERNAL]  Get type name.

";

%feature("docstring")  casadi::FunctionInternal::print(std::ostream &stream)
const override "

[INTERNAL]  Print.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::set_jac_sparsity(const
Sparsity &sp, int iind, int oind, bool compact) "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::replaceRes(const
std::vector< M > &res) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::print_free(std::ostream
&stream) const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::Map::default_in(int ind) const override "

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsityGen(int iind,
int oind, bool symmetric, int gr_i=1, int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::getTangent(const
std::string &name, int iind, int oind, const Dict &opts) "

[INTERNAL]  Return tangent function.

";

%feature("docstring")  casadi::FunctionInternal::alloc_memory() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::FunctionInternal::grad_sx(int iind=0, int
oind=0) "

[INTERNAL]  Gradient expression.

";

%feature("docstring")  casadi::FunctionInternal::getGradient(const
std::string &name, int iind, int oind, const Dict &opts) "

[INTERNAL]  Return gradient function.

";

%feature("docstring")  casadi::FunctionInternal::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::n_out() const  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::checkRes(const std::vector<
M > &res) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

";

%feature("docstring")  casadi::FunctionInternal::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";


// File: classcasadi_1_1MapOmp.xml
%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::symbolicOutput(const
std::vector< MX > &arg) "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::free_memory(void *mem)
const  "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInput(int k) const
"

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::jac_sx(int iind=0, int
oind=0, const Dict &opts=Dict()) "

[INTERNAL]  Jacobian expression.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")
casadi::FunctionInternal::generateFunction(CodeGenerator &g, const
std::string &fname, bool decl_static) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsityGen(int iind,
int oind, bool symmetric, int gr_i=1, int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(int ind) const
"

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(const
std::string &iname) const  "

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::FunctionInternal::getGradient(const
std::string &name, int iind, int oind, const Dict &opts) "

[INTERNAL]  Return gradient function.

";

%feature("docstring")  casadi::FunctionInternal::symbolicFwdSeed(int nfwd,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::set_temp(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring") casadi::MapOmp::_eval "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring") casadi::MapOmp::_eval "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring") casadi::MapOmp::_eval "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::Map::get_forward(const std::string &name, int
nfwd, const std::vector< std::string > &i_names, const std::vector<
std::string > &o_names, const Dict &opts) const override "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::Map::has_spfwd() const override "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::n_out() const  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::tangent(int iind, int oind)
"

[INTERNAL]  Return tangent function.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::setJacobian(const Function
&jac, int iind, int oind, bool compact) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::checkInputs() const  "

[INTERNAL]  Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring") casadi::MapOmp::_set_work "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::set_jac_sparsity(const
Sparsity &sp, int iind, int oind, bool compact) "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::addShorthand(CodeGenerator
&g, const std::string &name) const  "

[INTERNAL]  Generate shorthand macro.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOutput(int k)
const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::print_free(std::ostream
&stream) const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::Map::generateDeclarations(CodeGenerator &g)
const override "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::hasFullJacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::FunctionInternal::grad_mx(int iind=0, int
oind=0) "

[INTERNAL]  Gradient expression.

";

%feature("docstring")  casadi::FunctionInternal::name() const  "

[INTERNAL]  Name of the function.

";

%feature("docstring")  casadi::FunctionInternal::simplifiedCall() const  "

[INTERNAL]  Use simplified signature.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< int > &order_in, const std::vector< int >
&order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring") casadi::MapOmp::_get_stats "

[INTERNAL]  Get all statistics

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::FunctionInternal::hess_sx(int iind=0, int
oind=0) "

[INTERNAL]  Hessian expression.

";

%feature("docstring")  casadi::FunctionInternal::generateMeta(CodeGenerator
&g, const std::string &fname) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FunctionInternal::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::Map::get_n_in() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInputReal(int k)
const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring")  casadi::Map::get_n_out() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::alloc_memory() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::FunctionInternal::n_in() const  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::FunctionInternal::checkRes(const std::vector<
M > &res) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(int ind) const
"

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(const
std::string &iname) const  "

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::FunctionInternal::clear_memory() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::finalize(const Dict &opts)
"

[INTERNAL]  Finalize the object creation This function, which visits the
class hierarchy in reverse order is run after init() has been completed.

";

%feature("docstring")  casadi::FunctionInternal::getFullJacobian(const
std::string &name, const std::vector< std::string > &i_names, const
std::vector< std::string > &o_names, const Dict &opts) "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::replaceAdjSeed(const
std::vector< std::vector< M > > &aseed) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::replaceArg(const
std::vector< M > &arg, bool hcat=false) const  "

[INTERNAL]  Replace 0-by-0 inputs.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::FunctionInternal::tang_mx(int iind=0, int
oind=0) "

[INTERNAL]  Tangent expression.

";

%feature("docstring") casadi::MapOmp::_setup "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::jit_dependencies(const
std::string &fname) "

[INTERNAL]   Jit dependencies.

";

%feature("docstring")  casadi::FunctionInternal::init_memory(void *mem)
const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::log(const std::string &msg)
const  "

[INTERNAL]  Log the status of the solver.

";

%feature("docstring")  casadi::FunctionInternal::log(const std::string &fcn,
const std::string &msg) const  "

[INTERNAL]  Log the status of the solver, function given.

";

%feature("docstring")  casadi::Map::default_in(int ind) const override "

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, int order, bool
tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::sx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(int nadj) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::Map::type_name() const override "

[INTERNAL]  Get type name.

";

%feature("docstring")  casadi::FunctionInternal::gradient(int iind, int
oind) "

[INTERNAL]  Return gradient function.

";

%feature("docstring")  casadi::FunctionInternal::replaceFwdSeed(const
std::vector< std::vector< M > > &fseed) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::eval_name() const  "

[INTERNAL]  Get name of the evaluation function.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::Map::sp_fwd(const bvec_t **arg, bvec_t **res,
int *iw, bvec_t *w, int mem) const override "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::jac_mx(int iind=0, int
oind=0, const Dict &opts=Dict()) "

[INTERNAL]  Jacobian expression.

";

%feature("docstring")  casadi::FunctionInternal::verbose() const  "

[INTERNAL]  Verbose mode?

";

%feature("docstring")  casadi::FunctionInternal::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::forward(int nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FunctionInternal::grad_sx(int iind=0, int
oind=0) "

[INTERNAL]  Gradient expression.

";

%feature("docstring")  casadi::FunctionInternal::fullJacobian() "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::Map::has_codegen() const override "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::Map::get_sparsity_out(int i) override "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::FunctionInternal::getWorkSize() const  "

[INTERNAL]  Get the length of the work vector.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(int nadj,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FunctionInternal::simple(const double *arg,
double *res) const  "

[INTERNAL]  Evaluate numerically, simplied syntax.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::MapOmp "

[INTERNAL]  A map Evaluate in parallel using OpenMP Note: Do not use this
class with much more than the intended number of threads for the parallel
evaluation as it will cause excessive memory use.

Joel Andersson

C++ includes: map.hpp ";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(int iind,
int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::Map::evalGen(const T **arg, T **res, int *iw,
T *w) const  "

[INTERNAL]  Evaluate or propagate sparsities.

";

%feature("docstring")  casadi::Map::get_n_forward() const override "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::FunctionInternal::hasDerivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::size1_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::repr(std::ostream &stream)
const override "

[INTERNAL]  Print.

";

%feature("docstring")  casadi::FunctionInternal::size_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::tang_sx(int iind=0, int
oind=0) "

[INTERNAL]  Tangent expression.

";

%feature("docstring") casadi::MapOmp::_call "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring") casadi::MapOmp::_call "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::Map::get_sparsity_in(int i) override "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::checkArg(const std::vector<
M > &arg, bool hcat=false) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::Map::get_n_reverse() const override "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::FunctionInternal::n_mem() const  "

[INTERNAL]  Maximum number of memory objects.

";

%feature("docstring")  casadi::Map::get_name_in(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::get_stats(void *mem) const
"

[INTERNAL]  Get all statistics

";

%feature("docstring")  casadi::FunctionInternal::getJacobian(const
std::string &name, int iind, int oind, bool compact, bool symmetric, const
Dict &opts) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::name_out(int ind) const  "

[INTERNAL]  Get output scheme name by index.

";

%feature("docstring")  casadi::FunctionInternal::getHessian(int iind, int
oind) "

[INTERNAL]  Return Hessian function.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::size_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::matchingRes(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

";

%feature("docstring")  casadi::FunctionInternal::getTangent(const
std::string &name, int iind, int oind, const Dict &opts) "

[INTERNAL]  Return tangent function.

";

%feature("docstring") casadi::MapOmp::_set_temp "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::Map::has_sprev() const override "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::Map::get_name_out(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::getPartition(int iind, int
oind, Sparsity &D1, Sparsity &D2, bool compact, bool symmetric, bool
allow_forward, bool allow_reverse) "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(int iind, int
oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::reverse(int nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(int nfwd) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::get_function() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::construct(const Dict &opts)
"

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::replaceRes(const
std::vector< M > &res) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::name_in(int ind) const  "

[INTERNAL]  Get input scheme name by index.

";

%feature("docstring")  casadi::Map::get_reverse(const std::string &name, int
nadj, const std::vector< std::string > &i_names, const std::vector<
std::string > &o_names, const Dict &opts) const override "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::FunctionInternal::get_options() const  "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOperation(int k)
const  "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::getAlgorithmSize() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::matchingArg(const
std::vector< M > &arg, bool hcat=false) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::sx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::Map::sp_rev(bvec_t **arg, bvec_t **res, int
*iw, bvec_t *w, int mem) const override "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::map_mx(const std::vector<
std::vector< MX > > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::map_mx(const std::vector<
MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::addDependency(CodeGenerator
&g) const  "

[INTERNAL]  Add a dependent function.

";

%feature("docstring")  casadi::FunctionInternal::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FunctionInternal::jacobian(int iind, int
oind, bool compact, bool symmetric) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::Map::eval_sx(const SXElem **arg, SXElem
**res, int *iw, SXElem *w, int mem) const override "

[INTERNAL]  evaluate symbolically while also propagating directional
derivatives

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::FunctionInternal::hessian(int iind, int oind)
"

[INTERNAL]  Return Hessian function.

";

%feature("docstring")  casadi::FunctionInternal::print(std::ostream &stream)
const override "

[INTERNAL]  Print.

";


// File: classcasadi_1_1Matrix.xml


/*  Construct symbolic primitives  */

/* The \"sym\" function is intended to work in a similar way as \"sym\" used
in the Symbolic Toolbox for Matlab but instead creating a CasADi symbolic
primitive.

*/ %feature("docstring")  casadi::Matrix< T >::print_scalar(std::ostream
&stream=casadi::userOut(), bool trailing_newline=true) const  "

Print scalar.

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >
>::nnz_upper() const "

Get the number of non-zeros in the upper triangular half.

";

%feature("docstring")  casadi::Matrix< T >::repr(std::ostream
&stream=casadi::userOut(), bool trailing_newline=true) const  "

Print a representation of the object.

";

%feature("docstring")  expand(const Matrix< Scalar > &ex, Matrix< Scalar >
&weights, Matrix< Scalar > &terms) "

Expand the expression as a weighted sum (with constant weights)

";

%feature("docstring")  casadi::Matrix< T >::is_constant() const  "

Check if the matrix is constant (note that false negative answers are
possible)

";

%feature("docstring")  mtaylor(const Matrix< Scalar > &ex, const Matrix<
Scalar > &x, const Matrix< Scalar > &a, int order=1) "

multivariate Taylor series expansion

Do Taylor expansions until the aggregated order of a term is equal to
'order'. The aggregated order of $x^n y^m$ equals $n+m$.

";

%feature("docstring")  mtaylor(const Matrix< Scalar > &ex, const Matrix<
Scalar > &x, const Matrix< Scalar > &a, int order, const std::vector< int >
&order_contributions) "

multivariate Taylor series expansion

Do Taylor expansions until the aggregated order of a term is equal to
'order'. The aggregated order of $x^n y^m$ equals $n+m$.

The argument order_contributions can denote how match each variable
contributes to the aggregated order. If x=[x, y] and order_contributions=[1,
2], then the aggregated order of $x^n y^m$ equals $1n+2m$.

Example usage

$ \\\\sin(b+a)+\\\\cos(b+a)(x-a)+\\\\cos(b+a)(y-b) $ $ y+x-(x^3+3y x^2+3 y^2
x+y^3)/6 $ $ (-3 x^2 y-x^3)/6+y+x $

";

%feature("docstring")  casadi::Matrix< T >::get_elements() const  "

Get all elements.

";

%feature("docstring")  casadi::Matrix< T >::set(const Matrix< Scalar > &m,
bool ind1, const Slice &rr) "

Set a submatrix, single argument

";

%feature("docstring")  casadi::Matrix< T >::set(const Matrix< Scalar > &m,
bool ind1, const Matrix< int > &rr) "

Set a submatrix, single argument

";

%feature("docstring")  casadi::Matrix< T >::set(const Matrix< Scalar > &m,
bool ind1, const Sparsity &sp) "

Set a submatrix, single argument

";

%feature("docstring")  casadi::Matrix< T >::set(const Matrix< Scalar > &m,
bool ind1, const Slice &rr, const Slice &cc) "

Set a submatrix, two arguments

";

%feature("docstring")  casadi::Matrix< T >::set(const Matrix< Scalar > &m,
bool ind1, const Slice &rr, const Matrix< int > &cc) "

Set a submatrix, two arguments

";

%feature("docstring")  casadi::Matrix< T >::set(const Matrix< Scalar > &m,
bool ind1, const Matrix< int > &rr, const Slice &cc) "

Set a submatrix, two arguments

";

%feature("docstring")  casadi::Matrix< T >::set(const Matrix< Scalar > &m,
bool ind1, const Matrix< int > &rr, const Matrix< int > &cc) "

Set a submatrix, two arguments

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >  >::nnz()
const "

Get the number of (structural) non-zero elements.

";

%feature("docstring")  casadi::Matrix< T >::remove(const std::vector< int >
&rr, const std::vector< int > &cc) "

Remove columns and rows Remove/delete rows and/or columns of a matrix.

";

%feature("docstring")  casadi::Matrix< T >::get(Matrix< Scalar > &output_m,
bool ind1, const Slice &rr) const  "

Get a submatrix, single argument

";

%feature("docstring")  casadi::Matrix< T >::get(Matrix< Scalar > &output_m,
bool ind1, const Matrix< int > &rr) const  "

Get a submatrix, single argument

";

%feature("docstring")  casadi::Matrix< T >::get(Matrix< Scalar > &output_m,
bool ind1, const Sparsity &sp) const  "

Get a submatrix, single argument

";

%feature("docstring")  casadi::Matrix< T >::get(Matrix< Scalar > &output_m,
bool ind1, const Slice &rr, const Slice &cc) const  "

Get a submatrix, two arguments

";

%feature("docstring")  casadi::Matrix< T >::get(Matrix< Scalar > &output_m,
bool ind1, const Slice &rr, const Matrix< int > &cc) const  "

Get a submatrix, two arguments

";

%feature("docstring")  casadi::Matrix< T >::get(Matrix< Scalar > &output_m,
bool ind1, const Matrix< int > &rr, const Slice &cc) const  "

Get a submatrix, two arguments

";

%feature("docstring")  casadi::Matrix< T >::get(Matrix< Scalar > &output_m,
bool ind1, const Matrix< int > &rr, const Matrix< int > &cc) const  "

Get a submatrix, two arguments

";

%feature("docstring")  triangle(const Matrix< Scalar > &x) "

triangle function

\\\\[ \\\\begin {cases} \\\\Lambda(x) = 0 & |x| >= 1 \\\\\\\\ \\\\Lambda(x)
= 1-|x| & |x| < 1 \\\\end {cases} \\\\]

";

%feature("docstring")  adj(const Matrix< Scalar > &A) "

Matrix adjoint.

";

%feature("docstring")  casadi::Matrix< T >::triplet(const std::vector< int >
&row, const std::vector< int > &col, const Matrix< Scalar > &d) "

";

%feature("docstring")  casadi::Matrix< T >::triplet(const std::vector< int >
&row, const std::vector< int > &col, const Matrix< Scalar > &d, int nrow,
int ncol) "

";

%feature("docstring")  casadi::Matrix< T >::triplet(const std::vector< int >
&row, const std::vector< int > &col, const Matrix< Scalar > &d, const
std::pair< int, int > &rc) "

";

%feature("docstring")  casadi::PrintableObject< Matrix< Scalar >
>::getRepresentation() const "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::Matrix< T >::set_width(int width) "

Set the 'precision, width & scientific' used in printing and serializing to
streams.

";

%feature("docstring")  casadi::Matrix< T >::sanity_check(bool
complete=false) const  "

Check if the dimensions and colind, row vectors are compatible.

Parameters:
-----------

complete:  set to true to also check elementwise throws an error as possible
result

";

%feature("docstring")  casadi::SX::print_split(std::vector< std::string >
&output_nz, std::vector< std::string > &output_inter) const  "

[INTERNAL]  Get strings corresponding to the nonzeros and the
interdependencies.

";

%feature("docstring")  casadi::Matrix< T >::unary(int op, const Matrix<
Scalar > &x) "

[INTERNAL]  Create nodes by their ID.

";

%feature("docstring")  casadi::Matrix< T >::set_precision(int precision) "

Set the 'precision, width & scientific' used in printing and serializing to
streams.

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >  >::is_tril()
const "

Check if the matrix is lower triangular.

";

%feature("docstring")  norm_inf_mul(const Matrix< Scalar > &x, const Matrix<
Scalar > &y) "

Inf-norm of a Matrix-Matrix product.

";

%feature("docstring")  casadi::Matrix< T >::is_integer() const  "

Check if the matrix is integer-valued (note that false negative answers are
possible)

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >  >::numel()
const "

Get the number of elements.

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >  >::is_triu()
const "

Check if the matrix is upper triangular.

";

%feature("docstring")  all(const Matrix< Scalar > &x) "

Returns true only if every element in the matrix is true.

";

%feature("docstring")  casadi::SX::is_regular() const  "

[INTERNAL]  Checks if expression does not contain NaN or Inf.

";

%feature("docstring")  casadi::Matrix< T >::set_nz(const Matrix< Scalar >
&m, bool ind1, const Slice &k) "

Set a set of nonzeros

";

%feature("docstring")  casadi::Matrix< T >::set_nz(const Matrix< Scalar >
&m, bool ind1, const Matrix< int > &k) "

Set a set of nonzeros

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >
>::nnz_diag() const "

Get get the number of non-zeros on the diagonal.

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >
>::sparsity() const "

Get the sparsity pattern.

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >  >::get_row()
const "

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring")  casadi::Matrix< T >::get_sparsity() const  "

Get an owning reference to the sparsity pattern.

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >
>::bilin(const Matrix< Scalar > &A, const Matrix< Scalar > &x, const Matrix<
Scalar > &y) "

Calculate bilinear form x^T A y.

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >
>::jtimes(const Matrix< Scalar > &ex, const Matrix< Scalar > &arg, const
Matrix< Scalar > &v, bool tr=false) "

Functions called by friend functions defined here

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >  >::dim()
const "

Get string representation of dimensions. The representation is (nrow x ncol
= numel | size)

";

%feature("docstring")  casadi::Matrix< T >::get_nz(Matrix< Scalar >
&output_m, bool ind1, const Slice &k) const  "

Get a set of nonzeros

";

%feature("docstring")  casadi::Matrix< T >::get_nz(Matrix< Scalar >
&output_m, bool ind1, const Matrix< int > &k) const  "

Get a set of nonzeros

";

%feature("docstring")  casadi::Matrix< T >::T() const  "

Transpose the matrix.

";

%feature("docstring")  any(const Matrix< Scalar > &x) "

Returns true only if any element in the matrix is true.

";

%feature("docstring")  casadi::SX::is_smooth() const  "

[INTERNAL]  Check if smooth.

";

%feature("docstring")  casadi::Matrix< T >::clear() "

";

%feature("docstring")  casadi::Matrix< T >::is_minus_one() const  "

check if the matrix is -1 (note that false negative answers are possible)

";

%feature("docstring")  poly_roots(const Matrix< Scalar > &p) "

Attempts to find the roots of a polynomial.

This will only work for polynomials up to order 3 It is assumed that the
roots are real.

";

%feature("docstring")  casadi::SX::n_dep() const  "

[INTERNAL]  Get the number of dependencies of a binary SXElem Only defined
if symbolic scalar.

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >
>::is_dense() const "

Check if the matrix expression is dense.

";

%feature("docstring")  casadi::Matrix< T >::print_sparse(std::ostream
&stream=casadi::userOut(), bool trailing_newline=true) const  "

Print sparse matrix style.

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >
>::nnz_lower() const "

Get the number of non-zeros in the lower triangular half.

";

%feature("docstring")  casadi::Matrix< T >::reserve(int nnz) "

";

%feature("docstring")  casadi::Matrix< T >::reserve(int nnz, int ncol) "

";

%feature("docstring")  casadi::Matrix< T >::erase(const std::vector< int >
&rr, const std::vector< int > &cc, bool ind1=false) "

Erase a submatrix (leaving structural zeros in its place) Erase rows and/or
columns of a matrix.

";

%feature("docstring")  casadi::Matrix< T >::erase(const std::vector< int >
&rr, bool ind1=false) "

Erase a submatrix (leaving structural zeros in its place) Erase elements of
a matrix.

";

%feature("docstring")  casadi::Matrix< T >::inf(const Sparsity &sp) "

create a matrix with all inf

";

%feature("docstring")  casadi::Matrix< T >::inf(int nrow=1, int ncol=1) "

create a matrix with all inf

";

%feature("docstring")  casadi::Matrix< T >::inf(const std::pair< int, int >
&rc) "

create a matrix with all inf

";

%feature("docstring")  casadi::SX::element_hash() const  "

[INTERNAL]  Returns a number that is unique for a given symbolic scalar.

Only defined if symbolic scalar.

";

%feature("docstring")  casadi::Matrix< T >::scalar_matrix(int op, const
Matrix< Scalar > &x, const Matrix< Scalar > &y) "

[INTERNAL]  Create nodes by their ID.

";

%feature("docstring")  ramp(const Matrix< Scalar > &x) "

ramp function

\\\\[ \\\\begin {cases} R(x) = 0 & x <= 1 \\\\\\\\ R(x) = x & x > 1 \\\\\\\\
\\\\end {cases} \\\\]

Also called: slope function

";

%feature("docstring")  casadi::Matrix< T >::print_vector(std::ostream
&stream=casadi::userOut(), bool trailing_newline=true) const  "

Print vector-style.

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >  >::ones(int
nrow=1, int ncol=1) "

Create a dense matrix or a matrix with specified sparsity with all entries
one.

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >
>::ones(const Sparsity &sp) "

Create a dense matrix or a matrix with specified sparsity with all entries
one.

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >
>::ones(const std::pair< int, int > &rc) "

Create a dense matrix or a matrix with specified sparsity with all entries
one.

";

%feature("docstring")  casadi::Matrix< T >::resize(int nrow, int ncol) "

";

%feature("docstring")  qr(const Matrix< Scalar > &A, Matrix< Scalar > &Q,
Matrix< Scalar > &R) "

QR factorization using the modified Gram-Schmidt algorithm More stable than
the classical Gram-Schmidt, but may break down if the rows of A are nearly
linearly dependent See J. Demmel: Applied Numerical Linear Algebra
(algorithm 3.1.). Note that in SWIG, Q and R are returned by value.

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >  >::row(int
el) const "

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >  >::zeros(int
nrow=1, int ncol=1) "

Create a dense matrix or a matrix with specified sparsity with all entries
zero.

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >
>::zeros(const Sparsity &sp) "

Create a dense matrix or a matrix with specified sparsity with all entries
zero.

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >
>::zeros(const std::pair< int, int > &rc) "

Create a dense matrix or a matrix with specified sparsity with all entries
zero.

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >
>::rank1(const Matrix< Scalar > &A, const Matrix< Scalar > &alpha, const
Matrix< Scalar > &x, const Matrix< Scalar > &y) "

Make a rank-1 update to a matrix A Calculates A + 1/2 * alpha * x*y'.

";

%feature("docstring") casadi::Matrix "

Sparse matrix class. SX and DM are specializations.

General sparse matrix class that is designed with the idea that \"everything
is a matrix\", that is, also scalars and vectors. This philosophy makes it
easy to use and to interface in particularly with Python and Matlab/Octave.
Index starts with 0. Index vec happens as follows: (rr, cc) -> k =
rr+cc*size1() Vectors are column vectors.  The storage format is Compressed
Column Storage (CCS), similar to that used for sparse matrices in Matlab,
but unlike this format, we do allow for elements to be structurally non-zero
but numerically zero.  Matrix<Scalar> is polymorphic with a
std::vector<Scalar> that contain all non-identical-zero elements. The
sparsity can be accessed with Sparsity& sparsity() Joel Andersson

C++ includes: casadi_types.hpp ";

%feature("docstring")  rectangle(const Matrix< Scalar > &x) "

rectangle function

\\\\[ \\\\begin {cases} \\\\Pi(x) = 1 & |x| < 1/2 \\\\\\\\ \\\\Pi(x) = 1/2 &
|x| = 1/2 \\\\\\\\ \\\\Pi(x) = 0 & |x| > 1/2 \\\\\\\\ \\\\end {cases} \\\\]

Also called: gate function, block function, band function, pulse function,
window function

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >  >::sym(const
std::string &name, int nrow=1, int ncol=1) "

Create an nrow-by-ncol symbolic primitive.

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >  >::sym(const
std::string &name, const std::pair< int, int > &rc) "

Construct a symbolic primitive with given dimensions.

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >  >::sym(const
std::string &name, const Sparsity &sp) "

Create symbolic primitive with a given sparsity pattern.

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >  >::sym(const
std::string &name, const Sparsity &sp, int p) "

Create a vector of length p with with matrices with symbolic primitives of
given sparsity.

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >  >::sym(const
std::string &name, int nrow, int ncol, int p) "

Create a vector of length p with nrow-by-ncol symbolic primitives.

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >  >::sym(const
std::string &name, const Sparsity &sp, int p, int r) "

Create a vector of length r of vectors of length p with symbolic primitives
with given sparsity.

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >  >::sym(const
std::string &name, int nrow, int ncol, int p, int r) "

Create a vector of length r of vectors of length p with nrow-by-ncol
symbolic primitives.

";

%feature("docstring")  eig_symbolic(const Matrix< Scalar > &m) "

Attempts to find the eigenvalues of a symbolic matrix This will only work
for up to 3x3 matrices.

";

%feature("docstring")  casadi::SX::is_leaf() const  "

[INTERNAL]  Check if SX is a leaf of the SX graph.

Only defined if symbolic scalar.

";

%feature("docstring")  sparsify(const Matrix< Scalar > &A, double tol=0) "

Make a matrix sparse by removing numerical zeros.

";

%feature("docstring")  cofactor(const Matrix< Scalar > &x, int i, int j) "

Get the (i,j) cofactor matrix.

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >
>::colind(int col) const "

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring")  casadi::Matrix< T >::print_dense(std::ostream
&stream=casadi::userOut(), bool trailing_newline=true) const  "

Print dense matrix-stype.

";

%feature("docstring")  casadi::Matrix< T >::has_nz(int rr, int cc) const  "

Returns true if the matrix has a non-zero at location rr, cc.

";

%feature("docstring")  casadi::Matrix< T >::matrix_scalar(int op, const
Matrix< Scalar > &x, const Matrix< Scalar > &y) "

[INTERNAL]  Create nodes by their ID.

";

%feature("docstring")  casadi::Matrix< T >::nan(const Sparsity &sp) "

create a matrix with all nan

";

%feature("docstring")  casadi::Matrix< T >::nan(int nrow=1, int ncol=1) "

create a matrix with all nan

";

%feature("docstring")  casadi::Matrix< T >::nan(const std::pair< int, int >
&rc) "

create a matrix with all nan

";

%feature("docstring")  casadi::SX::is_commutative() const  "

[INTERNAL]  Check whether a binary SX is commutative.

Only defined if symbolic scalar.

";

%feature("docstring")  casadi::PrintableObject< Matrix< Scalar >
>::getDescription() const "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::SX::is_valid_input() const  "

[INTERNAL]  Check if matrix can be used to define function inputs. Sparse
matrices can return true if all non-zero elements are symbolic.

";

%feature("docstring")  getMinor(const Matrix< Scalar > &x, int i, int j) "

Get the (i,j) minor matrix.

";

%feature("docstring")  heaviside(const Matrix< Scalar > &x) "

Heaviside function.

\\\\[ \\\\begin {cases} H(x) = 0 & x<0 \\\\\\\\ H(x) = 1/2 & x=0 \\\\\\\\
H(x) = 1 & x>0 \\\\\\\\ \\\\end {cases} \\\\]

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >  >::size()
const "

Get the shape.

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >  >::size(int
axis) const "

Get the size along a particular dimensions.

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >
>::mpower(const Matrix< Scalar > &x, const Matrix< Scalar > &y) "

Functions called by friend functions defined here

";

%feature("docstring")  casadi::Matrix< T >::is_one() const  "

check if the matrix is 1 (note that false negative answers are possible)

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >  >::is_row()
const "

Check if the matrix is a row vector (i.e. size1()==1)

";

%feature("docstring") casadi::Matrix::__nonzero__ "

Returns the truth value of a Matrix.

";

%feature("docstring") casadi::Matrix::__nonzero__ "

[INTERNAL] ";

%feature("docstring")  taylor(const Matrix< Scalar > &ex, const Matrix<
Scalar > &x, const Matrix< Scalar > &a, int order=1) "

univariate Taylor series expansion

Calculate the Taylor expansion of expression 'ex' up to order 'order' with
respect to variable 'x' around the point 'a'

$(x)=f(a)+f'(a)(x-a)+f''(a)\\\\frac
{(x-a)^2}{2!}+f'''(a)\\\\frac{(x-a)^3}{3!}+\\\\ldots$

Example usage:

::

>>   x



";

%feature("docstring")  taylor(const Matrix< Scalar > &ex, const Matrix<
Scalar > &x) "

univariate Taylor series expansion

Calculate the Taylor expansion of expression 'ex' up to order 'order' with
respect to variable 'x' around the point 'a'

$(x)=f(a)+f'(a)(x-a)+f''(a)\\\\frac
{(x-a)^2}{2!}+f'''(a)\\\\frac{(x-a)^3}{3!}+\\\\ldots$

Example usage:

::

>>   x



";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >  >::size2()
const "

Get the second dimension (i.e. number of columns)

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >
>::is_square() const "

Check if the matrix expression is square.

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >  >::size1()
const "

Get the first dimension (i.e. number of rows)

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >
>::is_empty(bool both=false) const "

Check if the sparsity is empty, i.e. if one of the dimensions is zero (or
optionally both dimensions)

";

%feature("docstring")  casadi::Matrix< T >::is_identity() const  "

check if the matrix is an identity matrix (note that false negative answers
are possible)

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >
>::linearize(const Matrix< Scalar > &f, const Matrix< Scalar > &x, const
Matrix< Scalar > &x0) "

Functions called by friend functions defined here

";

%feature("docstring")  casadi::SX::reset_input() const  "

[INTERNAL]  Reset the marker for an input expression.

";

%feature("docstring")  poly_coeff(const Matrix< Scalar > &f, const Matrix<
Scalar > &x) "

extracts polynomial coefficients from an expression

Parameters:
-----------

ex:  Scalar expression that represents a polynomial

x:  Scalar symbol that the polynomial is build up with

";

%feature("docstring")  casadi::Matrix< T >::printme(const Matrix< Scalar >
&y) const  "

";

%feature("docstring")  gauss_quadrature(const Matrix< Scalar > &f, const
Matrix< Scalar > &x, const Matrix< Scalar > &a, const Matrix< Scalar > &b,
int order=5) "

Integrate f from a to b using Gaussian quadrature with n points.

";

%feature("docstring")  gauss_quadrature(const Matrix< Scalar > &f, const
Matrix< Scalar > &x, const Matrix< Scalar > &a, const Matrix< Scalar > &b,
int order, const Matrix< Scalar > &w) "

Matrix adjoint.

";

%feature("docstring")  casadi::Matrix< T >::set_scientific(bool scientific)
"

Set the 'precision, width & scientific' used in printing and serializing to
streams.

";

%feature("docstring")  pw_const(const Matrix< Scalar > &t, const Matrix<
Scalar > &tval, const Matrix< Scalar > &val) "

Create a piecewise constant function Create a piecewise constant function
with n=val.size() intervals.

Inputs:

Parameters:
-----------

t:  a scalar variable (e.g. time)

tval:  vector with the discrete values of t at the interval transitions
(length n-1)

val:  vector with the value of the function for each interval (length n)

";

%feature("docstring")  casadi::Matrix< T >::enlarge(int nrow, int ncol,
const std::vector< int > &rr, const std::vector< int > &cc, bool ind1=false)
"

Enlarge matrix Make the matrix larger by inserting empty rows and columns,
keeping the existing non-zeros.

";

%feature("docstring")  casadi::SX::is_symbolic() const  "

[INTERNAL]  Check if symbolic (Dense) Sparse matrices invariable return
false.

";

%feature("docstring")  pw_lin(const Matrix< Scalar > &t, const Matrix<
Scalar > &tval, const Matrix< Scalar > &val) "

t a scalar variable (e.g. time)

Create a piecewise linear function Create a piecewise linear function:

Inputs: tval vector with the the discrete values of t (monotonically
increasing) val vector with the corresponding function values (same length
as tval)

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >
>::is_column() const "

Check if the matrix is a column vector (i.e. size2()==1)

";

%feature("docstring") casadi::Matrix< T >::Matrix() "

constructors

empty 0-by-0 matrix constructor

";

%feature("docstring") casadi::Matrix< T >::Matrix(const Matrix< Scalar > &m)
"

Copy constructor.

";

%feature("docstring") casadi::Matrix< T >::Matrix(int nrow, int ncol) "

Create a sparse matrix with all structural zeros.

";

%feature("docstring") casadi::Matrix< T >::Matrix(const Sparsity &sp) "

Create a sparse matrix from a sparsity pattern. Same as
Matrix::ones(sparsity)

";

%feature("docstring") casadi::Matrix< T >::Matrix(const Sparsity &sp, const
Matrix< Scalar > &d) "

Construct matrix with a given sparsity and nonzeros.

";

%feature("docstring") casadi::Matrix< T >::Matrix(double val) "

This constructor enables implicit type conversion from a numeric type.

";

%feature("docstring") casadi::Matrix< T >::Matrix(const std::vector<
std::vector< double > > &m) "

Dense matrix constructor with data given as vector of vectors.

";

%feature("docstring") casadi::Matrix< T >::Matrix(const std::vector< A > &x)
"

Create an expression from a vector.

";

%feature("docstring") casadi::Matrix< T >::Matrix(const Matrix< A > &x) "

Create a matrix from another matrix with a different entry type Assumes that
the scalar conversion is valid.

";

%feature("docstring")  chol(const Matrix< Scalar > &A) "

Obtain a Cholesky factorisation of a matrix Returns an upper triangular R
such that R'R = A. Matrix A must be positive definite.

At the moment, the algorithm is dense (Cholesky-Banachiewicz). There is an
open ticket #1212 to make it sparse.

";

%feature("docstring")  casadi::SX::dep(int ch=0) const  "

[INTERNAL]  Get expressions of the children of the expression Only defined
if symbolic scalar. Wraps SXElem SXElem::dep(int ch=0) const.

";

%feature("docstring")  casadi::Matrix< T >::is_zero() const  "

check if the matrix is 0 (note that false negative answers are possible)

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >
>::is_vector() const "

Check if the matrix is a row or column vector.

";

%feature("docstring")  casadi::Matrix< T >::matrix_matrix(int op, const
Matrix< Scalar > &x, const Matrix< Scalar > &y) "

[INTERNAL]  Create nodes by their ID.

";

%feature("docstring")  casadi::Matrix< T >::binary(int op, const Matrix<
Scalar > &x, const Matrix< Scalar > &y) "

[INTERNAL]  Create nodes by their ID.

";

%feature("docstring")  casadi::Matrix< Scalar >::get_nonzeros() const  "

Get all nonzeros.

Implementation of Matrix::get_nonzeros (in public API)

";

%feature("docstring")  casadi::SX::has_duplicates() const  "

[INTERNAL]  Detect duplicate symbolic expressions If there are symbolic
primitives appearing more than once, the function will return true and the
names of the duplicate expressions will be printed to userOut<true,
PL_WARN>(). Note: Will mark the node using SXElem::set_temp. Make sure to
call reset_input() after usage.

";

%feature("docstring")  casadi::SX::name() const  "

[INTERNAL]  Get name (only if symbolic scalar)

";

%feature("docstring")  casadi::Matrix< T >::has_zeros() const  "

Check if the matrix has any zero entries which are not structural zeros.

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >
>::is_scalar(bool scalar_and_dense=false) const "

Check if the matrix expression is scalar.

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >
>::get_colind() const "

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring")  casadi::Matrix< T >::print(std::ostream
&stream=casadi::userOut(), bool trailing_newline=true) const  "

Print a description of the object.

";


// File: classcasadi_1_1MinusInfSX.xml


// File: classcasadi_1_1MinusOneSX.xml


// File: classcasadi_1_1Monitor.xml


// File: classcasadi_1_1MultipleOutput.xml


// File: classcasadi_1_1Multiplication.xml


// File: classcasadi_1_1MX.xml


/*  Construct symbolic primitives  */

/* The \"sym\" function is intended to work in a similar way as \"sym\" used
in the Symbolic Toolbox for Matlab but instead creating a CasADi symbolic
primitive.

*/ %feature("docstring")  casadi::MX::get_output() const  "

Get the index of evaluation output - only valid when is_calloutput() is
true.

";

%feature("docstring")  casadi::MX::attachAssert(const MX &y, const
std::string &fail_message="") const  "

returns itself, but with an assertion attached

If y does not evaluate to 1, a runtime error is raised

";

%feature("docstring")  casadi::GenericMatrix< MX  >::jtimes(const MX &ex,
const MX &arg, const MX &v, bool tr=false) "

Functions called by friend functions defined here

";

%feature("docstring")  inv_node(const MX &x) "

Inverse node.

";

%feature("docstring") casadi::MX "

MX - Matrix expression.

The MX class is used to build up trees made up from MXNodes. It is a more
general graph representation than the scalar expression, SX, and much less
efficient for small objects. On the other hand, the class allows much more
general operations than does SX, in particular matrix valued operations and
calls to arbitrary differentiable functions.

The MX class is designed to have identical syntax with the Matrix<> template
class, and uses Matrix<double> as its internal representation of the values
at a node. By keeping the syntaxes identical, it is possible to switch from
one class to the other, as well as inlining MX functions to SXElem
functions.

Note that an operation is always \"lazy\", making a matrix multiplication
will create a matrix multiplication node, not perform the actual
multiplication.

Joel Andersson

C++ includes: mx.hpp ";

%feature("docstring")  casadi::GenericMatrix< MX  >::is_scalar(bool
scalar_and_dense=false) const "

Check if the matrix expression is scalar.

";

%feature("docstring")  casadi::PrintableObject< SharedObject
>::getDescription() const "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::MX::erase(const std::vector< int > &rr, const
std::vector< int > &cc, bool ind1=false) "

Erase a submatrix (leaving structural zeros in its place) Erase rows and/or
columns of a matrix.

";

%feature("docstring")  casadi::MX::erase(const std::vector< int > &rr, bool
ind1=false) "

Erase a submatrix (leaving structural zeros in its place) Erase elements of
a matrix.

";

%feature("docstring")  casadi::MX::monitor(const std::string &comment) const
"

Monitor an expression Returns itself, but with the side effect of printing
the nonzeros along with a comment.

";

%feature("docstring")  casadi::MX::primitives() const  "

Get primitives.

";

%feature("docstring")  casadi::MX::is_constant() const  "

Check if constant.

";

%feature("docstring")  casadi::MX::is_output() const  "

Check if evaluation output.

";

%feature("docstring")  casadi::MX::set(const MX &m, bool ind1, const Slice
&rr) "

Set a submatrix, single argument

";

%feature("docstring")  casadi::MX::set(const MX &m, bool ind1, const Matrix<
int > &rr) "

Set a submatrix, single argument

";

%feature("docstring")  casadi::MX::set(const MX &m, bool ind1, const
Sparsity &sp) "

Set a submatrix, single argument

";

%feature("docstring")  casadi::MX::set(const MX &m, bool ind1, const Slice
&rr, const Slice &cc) "

";

%feature("docstring")  casadi::MX::set(const MX &m, bool ind1, const Slice
&rr, const Matrix< int > &cc) "

";

%feature("docstring")  casadi::MX::set(const MX &m, bool ind1, const Matrix<
int > &rr, const Slice &cc) "

";

%feature("docstring")  casadi::MX::set(const MX &m, bool ind1, const Matrix<
int > &rr, const Matrix< int > &cc) "

";

%feature("docstring")  casadi::MX::is_valid_input() const  "

Check if matrix can be used to define function inputs. Valid inputs for
MXFunctions are combinations of Reshape, concatenations and SymbolicMX.

";

%feature("docstring")  casadi::MX::binary(int op, const MX &x, const MX &y)
"

Create nodes by their ID.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::sparsity() const "

Get the sparsity pattern.

";

%feature("docstring")  lift(const MX &x, const MX &x_guess) "

Lift the expression Experimental feature.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::is_tril() const "

Check if the matrix is lower triangular.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::size2() const "

Get the second dimension (i.e. number of columns)

";

%feature("docstring")  casadi::GenericMatrix< MX  >::size1() const "

Get the first dimension (i.e. number of rows)

";

%feature("docstring")  casadi::GenericMatrix< MX  >::linearize(const MX &f,
const MX &x, const MX &x0) "

Functions called by friend functions defined here

";

%feature("docstring")  casadi::MX::is_op(int op) const  "

Is it a certain operation.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::is_triu() const "

Check if the matrix is upper triangular.

";

%feature("docstring") casadi::MX::~MX "

[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::MX::set_nz(const MX &m, bool ind1, const
Slice &kk) "

Set a set of nonzeros

";

%feature("docstring")  casadi::MX::set_nz(const MX &m, bool ind1, const
Matrix< int > &kk) "

Set a set of nonzeros

";

%feature("docstring")  casadi::PrintableObject< SharedObject
>::getRepresentation() const "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::MX::n_out() const  "

Number of outputs.

";

%feature("docstring")  casadi::MX::set_temp(int t) const  "

[INTERNAL]  Set the temporary variable.

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=casadi::userOut(), bool trailing_newline=true) const  "

Print a description of the object.

";

%feature("docstring")  casadi::MX::is_one() const  "

check if zero (note that false negative answers are possible)

";

%feature("docstring")  casadi::GenericMatrix< MX  >::is_empty(bool
both=false) const "

Check if the sparsity is empty, i.e. if one of the dimensions is zero (or
optionally both dimensions)

";

%feature("docstring")  casadi::MX::get_nz(MX &output_m, bool ind1, const
Slice &kk) const  "

Get a set of nonzeros

";

%feature("docstring")  casadi::MX::get_nz(MX &output_m, bool ind1, const
Matrix< int > &kk) const  "

Get a set of nonzeros

";

%feature("docstring")  casadi::GenericMatrix< MX  >::ones(int nrow=1, int
ncol=1) "

Create a dense matrix or a matrix with specified sparsity with all entries
one.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::ones(const Sparsity
&sp) "

Create a dense matrix or a matrix with specified sparsity with all entries
one.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::ones(const std::pair<
int, int > &rc) "

Create a dense matrix or a matrix with specified sparsity with all entries
one.

";

%feature("docstring")  casadi::MX::is_transpose() const  "

Is the expression a transpose?

";

%feature("docstring")  casadi::MX::einstein(const MX &A, const MX &B, const
MX &C, const std::vector< int > &dim_a, const std::vector< int > &dim_b,
const std::vector< int > &dim_c, const std::vector< int > &a, const
std::vector< int > &b, const std::vector< int > &c) "

Computes an einstein dense tensor contraction.

Computes the product: C_c = A_a + B_b where a b c are index/einstein
notation in an encoded form

For example, an matrix-matrix product may be written as: C_ij = A_ik B_kj

The encoded form uses strictly negative numbers to indicate labels. For the
above example, we would have: a {-1, -3} b {-3, -2} c {-1 -2}

";

%feature("docstring")  casadi::MX::einstein(const MX &A, const MX &B, const
std::vector< int > &dim_a, const std::vector< int > &dim_b, const
std::vector< int > &dim_c, const std::vector< int > &a, const std::vector<
int > &b, const std::vector< int > &c) "

Computes an einstein dense tensor contraction.

Computes the product: C_c = A_a + B_b where a b c are index/einstein
notation in an encoded form

For example, an matrix-matrix product may be written as: C_ij = A_ik B_kj

The encoded form uses strictly negative numbers to indicate labels. For the
above example, we would have: a {-1, -3} b {-3, -2} c {-1 -2}

";

%feature("docstring")  casadi::MX::is_binary() const  "

Is binary operation.

";

%feature("docstring")  casadi::MX::inf(const Sparsity &sp) "

create a matrix with all inf

";

%feature("docstring")  casadi::MX::inf(int nrow=1, int ncol=1) "

create a matrix with all inf

";

%feature("docstring")  casadi::MX::inf(const std::pair< int, int > &rc) "

create a matrix with all inf

";

%feature("docstring")  matrix_expand(const MX &e, const std::vector< MX >
&boundary=std::vector< MX >(), const Dict &options=Dict()) "

Expand MX graph to SXFunction call.

Expand the given expression e, optionally supplying expressions contained in
it at which expansion should stop.

";

%feature("docstring")  matrix_expand(const std::vector< MX > &e, const
std::vector< MX > &boundary=std::vector< MX >(), const Dict &options=Dict())
"

Expand MX graph to SXFunction call.

Expand the given expression e, optionally supplying expressions contained in
it at which expansion should stop.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::colind(int col) const "

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring")  casadi::MX::is_symbolic() const  "

Check if symbolic.

";

%feature("docstring")  casadi::MX::join_primitives(const std::vector< MX >
&v) const  "

Join an expression along symbolic primitives.

";

%feature("docstring")  casadi::MX::reset_input() const  "

[INTERNAL]  Reset the marker for an input expression.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::get_colind() const "

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring")  casadi::SharedObject::is_null() const  "

Is a null pointer?

";

%feature("docstring")  casadi::MX::is_multiplication() const  "

Check if multiplication.

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=casadi::userOut()) const  "

[INTERNAL]  Print the pointer to the internal class

";

%feature("docstring")  casadi::GenericMatrix< MX  >::nnz() const "

Get the number of (structural) non-zero elements.

";

%feature("docstring")  casadi::MX::is_identity() const  "

check if identity

";

%feature("docstring")  casadi::GenericMatrix< MX  >::dim() const "

Get string representation of dimensions. The representation is (nrow x ncol
= numel | size)

";

%feature("docstring")  find(const MX &x) "

Find first nonzero If failed, returns the number of rows.

";

%feature("docstring")  casadi::MX::is_minus_one() const  "

check if zero (note that false negative answers are possible)

";

%feature("docstring")  graph_substitute(const MX &ex, const std::vector< MX
> &v, const std::vector< MX > &vdef) "

Substitute single expression in graph Substitute variable v with expression
vdef in an expression ex, preserving nodes.

";

%feature("docstring")  graph_substitute(const std::vector< MX > &ex, const
std::vector< MX > &v, const std::vector< MX > &vdef) "

Substitute multiple expressions in graph Substitute variable var with
expression expr in multiple expressions, preserving nodes.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::get_row() const "

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring")  casadi::MX::is_call() const  "

Check if evaluation.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::nnz_upper() const "

Get the number of non-zeros in the upper triangular half.

";

%feature("docstring")  casadi::MX::get_temp() const  "

[INTERNAL]  Get the temporary variable

";

%feature("docstring") casadi::MX::__hash__ "

Returns a number that is unique for a given Node. If the Object does not
point to any node, \"0\" is returned.

";

%feature("docstring")  casadi::MX::getOutput(int oind=0) const  "

Get an output.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::zeros(int nrow=1, int
ncol=1) "

Create a dense matrix or a matrix with specified sparsity with all entries
zero.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::zeros(const Sparsity
&sp) "

Create a dense matrix or a matrix with specified sparsity with all entries
zero.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::zeros(const std::pair<
int, int > &rc) "

Create a dense matrix or a matrix with specified sparsity with all entries
zero.

";

%feature("docstring")  casadi::MX::is_zero() const  "

check if zero (note that false negative answers are possible)

";

%feature("docstring")  casadi::GenericMatrix< MX  >::size() const "

Get the shape.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::size(int axis) const "

Get the size along a particular dimensions.

";

%feature("docstring")  casadi::MX::T() const  "

Transpose the matrix.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::is_vector() const "

Check if the matrix is a row or column vector.

";

%feature("docstring")  casadi::MX::printme(const MX &y) const  "

";

%feature("docstring")  casadi::MX::nan(const Sparsity &sp) "

create a matrix with all nan

";

%feature("docstring")  casadi::MX::nan(int nrow=1, int ncol=1) "

create a matrix with all nan

";

%feature("docstring")  casadi::MX::nan(const std::pair< int, int > &rc) "

create a matrix with all nan

";

%feature("docstring")  casadi::GenericMatrix< MX  >::row(int el) const "

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring")  casadi::MX::n_dep() const  "

Get the number of dependencies of a binary SXElem.

";

%feature("docstring")  casadi::MX::has_duplicates() const  "

[INTERNAL]  Detect duplicate symbolic expressions If there are symbolic
primitives appearing more than once, the function will return true and the
names of the duplicate expressions will be printed to userOut<true,
PL_WARN>(). Note: Will mark the node using MX::set_temp. Make sure to call
reset_input() after usage.

";

%feature("docstring")  casadi::MX::is_norm() const  "

Check if norm.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::mpower(const MX &x,
const MX &y) "

Functions called by friend functions defined here

";

%feature("docstring")  casadi::GenericMatrix< MX  >::numel() const "

Get the number of elements.

";

%feature("docstring")  casadi::MX::enlarge(int nrow, int ncol, const
std::vector< int > &rr, const std::vector< int > &cc, bool ind1=false) "

Enlarge matrix Make the matrix larger by inserting empty rows and columns,
keeping the existing non-zeros.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::sym(const std::string
&name, int nrow=1, int ncol=1) "

Create an nrow-by-ncol symbolic primitive.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::sym(const std::string
&name, const std::pair< int, int > &rc) "

Construct a symbolic primitive with given dimensions.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::sym(const std::string
&name, const Sparsity &sp) "

Create symbolic primitive with a given sparsity pattern.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::sym(const std::string
&name, const Sparsity &sp, int p) "

Create a vector of length p with with matrices with symbolic primitives of
given sparsity.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::sym(const std::string
&name, int nrow, int ncol, int p) "

Create a vector of length p with nrow-by-ncol symbolic primitives.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::sym(const std::string
&name, const Sparsity &sp, int p, int r) "

Create a vector of length r of vectors of length p with symbolic primitives
with given sparsity.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::sym(const std::string
&name, int nrow, int ncol, int p, int r) "

Create a vector of length r of vectors of length p with nrow-by-ncol
symbolic primitives.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::is_square() const "

Check if the matrix expression is square.

";

%feature("docstring")  casadi::MX::get(MX &output_m, bool ind1, const Slice
&rr) const  "

Get a submatrix, single argument

";

%feature("docstring")  casadi::MX::get(MX &output_m, bool ind1, const
Matrix< int > &rr) const  "

Get a submatrix, single argument

";

%feature("docstring")  casadi::MX::get(MX &output_m, bool ind1, const
Sparsity &sp) const  "

Get a submatrix, single argument

";

%feature("docstring")  casadi::MX::get(MX &output_m, bool ind1, const Slice
&rr, const Slice &cc) const  "

Get a submatrix, two arguments

";

%feature("docstring")  casadi::MX::get(MX &output_m, bool ind1, const Slice
&rr, const Matrix< int > &cc) const  "

Get a submatrix, two arguments

";

%feature("docstring")  casadi::MX::get(MX &output_m, bool ind1, const
Matrix< int > &rr, const Slice &cc) const  "

Get a submatrix, two arguments

";

%feature("docstring")  casadi::MX::get(MX &output_m, bool ind1, const
Matrix< int > &rr, const Matrix< int > &cc) const  "

Get a submatrix, two arguments

";

%feature("docstring")  casadi::SharedObject::repr(std::ostream
&stream=casadi::userOut(), bool trailing_newline=true) const  "

Print a representation of the object.

";

%feature("docstring")  casadi::MX::getFunction(int i=0) "

Get function.

";

%feature("docstring")  casadi::MX::numFunctions() const  "

Number of functions.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::is_column() const "

Check if the matrix is a column vector (i.e. size2()==1)

";

%feature("docstring") casadi::MX::__nonzero__ "

Returns the truth value of an MX expression.

";

%feature("docstring")  casadi::MX::name() const  "

Get the name.

";

%feature("docstring") casadi::MX::MX() "

Default constructor.

";

%feature("docstring") casadi::MX::MX(int nrow, int ncol) "

Create a sparse matrix with all structural zeros.

";

%feature("docstring") casadi::MX::MX(const Sparsity &sp) "

Create a sparse matrix from a sparsity pattern. Same as MX::ones(sparsity)

";

%feature("docstring") casadi::MX::MX(const Sparsity &sp, const MX &val) "

Construct matrix with a given sparsity and nonzeros.

";

%feature("docstring") casadi::MX::MX(double x) "

Create scalar constant (also implicit type conversion)

";

%feature("docstring") casadi::MX::MX(const MX &x) "

Copy constructor.

";

%feature("docstring") casadi::MX::MX(const std::vector< double > &x) "

Create vector constant (also implicit type conversion)

";

%feature("docstring") casadi::MX::MX(const Matrix< double > &x) "

Create sparse matrix constant (also implicit type conversion)

";

%feature("docstring")  casadi::GenericMatrix< MX  >::rank1(const MX &A,
const MX &alpha, const MX &x, const MX &y) "

Make a rank-1 update to a matrix A Calculates A + 1/2 * alpha * x*y'.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::bilin(const MX &A,
const MX &x, const MX &y) "

Calculate bilinear form x^T A y.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::nnz_lower() const "

Get the number of non-zeros in the lower triangular half.

";

%feature("docstring")  casadi::MX::is_unary() const  "

Is unary operation.

";

%feature("docstring")  casadi::MX::is_commutative() const  "

Check if commutative operation.

";

%feature("docstring")  casadi::MX::mapping() const  "

Get an IM representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring")  casadi::MX::split_primitives(const MX &x) const  "

Split up an expression along symbolic primitives.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::is_dense() const "

Check if the matrix expression is dense.

";

%feature("docstring")  casadi::MX::op() const  "

Get operation type.

";

%feature("docstring")  casadi::MX::n_primitives() const  "

Get the number of primitives for MXFunction inputs/outputs.

";

%feature("docstring")  casadi::MX::dep(int ch=0) const  "

Get the nth dependency as MX.

";

%feature("docstring")  casadi::MX::get_sparsity() const  "

Get an owning reference to the sparsity pattern.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::nnz_diag() const "

Get get the number of non-zeros on the diagonal.

";

%feature("docstring")  casadi::MX::unary(int op, const MX &x) "

Create nodes by their ID.

";

%feature("docstring")  casadi::MX::is_regular() const  "

Checks if expression does not contain NaN or Inf.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::is_row() const "

Check if the matrix is a row vector (i.e. size1()==1)

";


// File: classcasadi_1_1MXFunction.xml


// File: classcasadi_1_1NanSX.xml


// File: classcasadi_1_1Newton.xml
%feature("docstring")  casadi::FunctionInternal::print(std::ostream &stream)
const override "

[INTERNAL]  Print.

";

%feature("docstring")  casadi::FunctionInternal::getAlgorithmSize() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::Newton::init_memory(void *mem) const override
"

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::generateMeta(CodeGenerator
&g, const std::string &fname) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::OracleFunction::jit_dependencies(const
std::string &fname) override "

[INTERNAL]  JIT for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(int nadj) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::OracleFunction::expand() "

[INTERNAL] ";

%feature("docstring")  casadi::Rootfinder::get_sparsity_in(int i) override "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::Rootfinder::get_reverse(const std::string
&name, int nadj, const std::vector< std::string > &i_names, const
std::vector< std::string > &o_names, const Dict &opts) const override "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::OracleFunction::calc_function(OracleMemory
*m, const std::string &fcn, const double *const *arg=0) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::checkArg(const std::vector<
M > &arg, bool hcat=false) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::FunctionInternal::jacobian(int iind, int
oind, bool compact, bool symmetric) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::jac_mx(int iind=0, int
oind=0, const Dict &opts=Dict()) "

[INTERNAL]  Jacobian expression.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOutput(int k)
const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::replaceArg(const
std::vector< M > &arg, bool hcat=false) const  "

[INTERNAL]  Replace 0-by-0 inputs.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(int iind, int
oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::replaceAdjSeed(const
std::vector< std::vector< M > > &aseed) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::tang_mx(int iind=0, int
oind=0) "

[INTERNAL]  Tangent expression.

";

%feature("docstring")  casadi::FunctionInternal::name_out(int ind) const  "

[INTERNAL]  Get output scheme name by index.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(int iind,
int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::symbolicOutput(const
std::vector< MX > &arg) "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::Rootfinder::type_name() const override "

[INTERNAL]  Get type name.

";

%feature("docstring")  casadi::OracleFunction::set_temp(void *mem, const
double **arg, double **res, int *iw, double *w) const override "

[INTERNAL]  Set the work vectors.

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< int > &order_in, const std::vector< int >
&order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::FunctionInternal::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::Rootfinder::get_n_out() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::Rootfinder::get_sparsity_out(int i) override
"

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::FunctionInternal::construct(const Dict &opts)
"

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::Newton::plugin_name() const override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, int order, bool
tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::setJacobian(const Function
&jac, int iind, int oind, bool compact) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::reverse(int nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::simple(const double *arg,
double *res) const  "

[INTERNAL]  Evaluate numerically, simplied syntax.

";

%feature("docstring") casadi::Newton::Newton(const std::string &name, const
Function &f) "

[INTERNAL]  Constructor.

";

%feature("docstring")  casadi::Newton::alloc_memory() const override "

[INTERNAL]  Create memory block.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::Newton::_setup "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::Newton::init(const Dict &opts) override "

[INTERNAL]  Initialize.

";

%feature("docstring")
casadi::FunctionInternal::generateFunction(CodeGenerator &g, const
std::string &fname, bool decl_static) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, int *iw, SXElem *w, int mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::FunctionInternal::n_out() const  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::checkInputs() const  "

[INTERNAL]  Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::FunctionInternal::getPartition(int iind, int
oind, Sparsity &D1, Sparsity &D2, bool compact, bool symmetric, bool
allow_forward, bool allow_reverse) "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::size_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::Newton::_set_work "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::OracleFunction::get_function() const override
"

[INTERNAL] ";

%feature("docstring")  casadi::OracleFunction::get_function(const
std::string &name) const override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::map_mx(const std::vector<
std::vector< MX > > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::map_mx(const std::vector<
MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring") casadi::Newton::~Newton "

[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::FunctionInternal::log(const std::string &msg)
const  "

[INTERNAL]  Log the status of the solver.

";

%feature("docstring")  casadi::FunctionInternal::log(const std::string &fcn,
const std::string &msg) const  "

[INTERNAL]  Log the status of the solver, function given.

";

%feature("docstring")  casadi::OracleFunction::oracle() const override "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FunctionInternal::name_in(int ind) const  "

[INTERNAL]  Get input scheme name by index.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::FunctionInternal::addDependency(CodeGenerator
&g) const  "

[INTERNAL]  Add a dependent function.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::getTangent(const
std::string &name, int iind, int oind, const Dict &opts) "

[INTERNAL]  Return tangent function.

";

%feature("docstring")  casadi::Rootfinder::has_spfwd() const override "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Newton::_call "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring") casadi::Newton::_call "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOperation(int k)
const  "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::Newton "

'newton' plugin for Rootfinder

Implements simple newton iterations to solve an implicit function.

>List of available options

+-----------------+-----------+--------------------------------------------+
|       Id        |   Type    |                Description                 |
+=================+===========+============================================+
| abstol          | OT_DOUBLE | Stopping criterion tolerance on max(|F|)   |
+-----------------+-----------+--------------------------------------------+
| abstolStep      | OT_DOUBLE | Stopping criterion tolerance on step size  |
+-----------------+-----------+--------------------------------------------+
| max_iter        | OT_INT    | Maximum number of Newton iterations to     |
|                 |           | perform before returning.                  |
+-----------------+-----------+--------------------------------------------+
| print_iteration | OT_BOOL   | Print information about each iteration     |
+-----------------+-----------+--------------------------------------------+

Joris Gillis

>List of available options

+-------------------+--------------+-------------------+-------------------+
|        Id         |     Type     |    Description    |      Used in      |
+===================+==============+===================+===================+
| abstol            | OT_DOUBLE    | Stopping          | casadi::Newton    |
|                   |              | criterion         |                   |
|                   |              | tolerance on      |                   |
|                   |              | max(|F|)          |                   |
+-------------------+--------------+-------------------+-------------------+
| abstolStep        | OT_DOUBLE    | Stopping          | casadi::Newton    |
|                   |              | criterion         |                   |
|                   |              | tolerance on step |                   |
|                   |              | size              |                   |
+-------------------+--------------+-------------------+-------------------+
| constraints       | OT_INTVECTOR | Constrain the     | casadi::Rootfinde |
|                   |              | unknowns. 0       | r                 |
|                   |              | (default): no     |                   |
|                   |              | constraint on ui, |                   |
|                   |              | 1: ui >= 0.0, -1: |                   |
|                   |              | ui <= 0.0, 2: ui  |                   |
|                   |              | > 0.0, -2: ui <   |                   |
|                   |              | 0.0.              |                   |
+-------------------+--------------+-------------------+-------------------+
| implicit_input    | OT_INT       | Index of the      | casadi::Rootfinde |
|                   |              | input that        | r                 |
|                   |              | corresponds to    |                   |
|                   |              | the actual root-  |                   |
|                   |              | finding           |                   |
+-------------------+--------------+-------------------+-------------------+
| implicit_output   | OT_INT       | Index of the      | casadi::Rootfinde |
|                   |              | output that       | r                 |
|                   |              | corresponds to    |                   |
|                   |              | the actual root-  |                   |
|                   |              | finding           |                   |
+-------------------+--------------+-------------------+-------------------+
| jacobian_function | OT_FUNCTION  | Function object   | casadi::Rootfinde |
|                   |              | for calculating   | r                 |
|                   |              | the Jacobian      |                   |
|                   |              | (autogenerated by |                   |
|                   |              | default)          |                   |
+-------------------+--------------+-------------------+-------------------+
| linear_solver     | OT_STRING    | User-defined      | casadi::Rootfinde |
|                   |              | linear solver     | r                 |
|                   |              | class. Needed for |                   |
|                   |              | sensitivities.    |                   |
+-------------------+--------------+-------------------+-------------------+
| linear_solver_opt | OT_DICT      | Options to be     | casadi::Rootfinde |
| ions              |              | passed to the     | r                 |
|                   |              | linear solver.    |                   |
+-------------------+--------------+-------------------+-------------------+
| max_iter          | OT_INT       | Maximum number of | casadi::Newton    |
|                   |              | Newton iterations |                   |
|                   |              | to perform before |                   |
|                   |              | returning.        |                   |
+-------------------+--------------+-------------------+-------------------+
| print_iteration   | OT_BOOL      | Print information | casadi::Newton    |
|                   |              | about each        |                   |
|                   |              | iteration         |                   |
+-------------------+--------------+-------------------+-------------------+

Diagrams
--------



C++ includes: newton.hpp ";

%feature("docstring") casadi::Newton::_set_temp "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::OracleFunction::generate_dependencies(const
std::string &fname, const Dict &opts) const override "

[INTERNAL]  Export / Generate C code for the generated functions.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(int ind) const
"

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(const
std::string &iname) const  "

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")
casadi::FunctionInternal::generateDeclarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::OracleFunction::print_fstats(const
OracleMemory *m) const  "

[INTERNAL]  Print statistics.

";

%feature("docstring")  casadi::FunctionInternal::getWorkSize() const  "

[INTERNAL]  Get the length of the work vector.

";

%feature("docstring")  casadi::OracleFunction::monitored(const std::string
&name) const  "

[INTERNAL] ";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::Rootfinder::eval_reverse(const std::vector<
MX > &arg, const std::vector< MX > &res, const std::vector< std::vector< MX
> > &aseed, std::vector< std::vector< MX > > &asens, bool always_inline,
bool never_inline) const  "

[INTERNAL]  Create call to (cached) derivative function, reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::hasFullJacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::Rootfinder::get_n_reverse() const override "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(int nadj,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInputReal(int k)
const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::Newton::_eval "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring") casadi::Newton::_eval "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring") casadi::Newton::_eval "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(int ind) const
"

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(const
std::string &iname) const  "

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::Rootfinder::get_name_in(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::getJacobian(const
std::string &name, int iind, int oind, bool compact, bool symmetric, const
Dict &opts) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::jac_sx(int iind=0, int
oind=0, const Dict &opts=Dict()) "

[INTERNAL]  Jacobian expression.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::symbolicFwdSeed(int nfwd,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::Rootfinder::has_sprev() const override "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::addShorthand(CodeGenerator
&g, const std::string &name) const  "

[INTERNAL]  Generate shorthand macro.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::n_in() const  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::Rootfinder::eval_forward(const std::vector<
MX > &arg, const std::vector< MX > &res, const std::vector< std::vector< MX
> > &fseed, std::vector< std::vector< MX > > &fsens, bool always_inline,
bool never_inline) const  "

[INTERNAL]  Create call to (cached) derivative function, forward mode.

";

%feature("docstring")  casadi::FunctionInternal::print_free(std::ostream
&stream) const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::FunctionInternal::clear_memory() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::FunctionInternal::hessian(int iind, int oind)
"

[INTERNAL]  Return Hessian function.

";

%feature("docstring")  casadi::FunctionInternal::generateBody(CodeGenerator
&g) const  "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(int nfwd) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::n_mem() const  "

[INTERNAL]  Maximum number of memory objects.

";

%feature("docstring")  casadi::FunctionInternal::replaceFwdSeed(const
std::vector< std::vector< M > > &fseed) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::getGradient(const
std::string &name, int iind, int oind, const Dict &opts) "

[INTERNAL]  Return gradient function.

";

%feature("docstring")  casadi::FunctionInternal::replaceRes(const
std::vector< M > &res) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::repr(std::ostream &stream)
const override "

[INTERNAL]  Print.

";

%feature("docstring")  casadi::FunctionInternal::eval_name() const  "

[INTERNAL]  Get name of the evaluation function.

";

%feature("docstring")  casadi::Newton::get_options() const override "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::checkRes(const std::vector<
M > &res) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::Rootfinder::sp_rev(bvec_t **arg, bvec_t
**res, int *iw, bvec_t *w, int mem) const override "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInput(int k) const
"

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::FunctionInternal::verbose() const  "

[INTERNAL]  Verbose mode?

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::Rootfinder::get_forward(const std::string
&name, int nfwd, const std::vector< std::string > &i_names, const
std::vector< std::string > &o_names, const Dict &opts) const override "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::FunctionInternal::grad_sx(int iind=0, int
oind=0) "

[INTERNAL]  Gradient expression.

";

%feature("docstring")  casadi::OracleFunction::has_function(const
std::string &fname) const override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::fullJacobian() "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::matchingArg(const
std::vector< M > &arg, bool hcat=false) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::forward(int nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::OracleFunction::create_function(const
std::string &fname, const std::vector< std::string > &s_in, const
std::vector< std::string > &s_out, const Function::AuxOut
&aux=Function::AuxOut()) "

[INTERNAL]  Create an oracle function

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsityGen(int iind,
int oind, bool symmetric, int gr_i=1, int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::OracleFunction::get_stats(void *mem) const
override "

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::Rootfinder::get_name_out(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::simplifiedCall() const  "

[INTERNAL]  Use simplified signature.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring") casadi::Newton::_get_stats "

[INTERNAL]  Get all statistics

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::matchingRes(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

";

%feature("docstring")  casadi::FunctionInternal::getFullJacobian(const
std::string &name, const std::vector< std::string > &i_names, const
std::vector< std::string > &o_names, const Dict &opts) "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::name() const  "

[INTERNAL]  Name of the function.

";

%feature("docstring")  casadi::FunctionInternal::set_jac_sparsity(const
Sparsity &sp, int iind, int oind, bool compact) "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::Rootfinder::get_n_in() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn, const std::string &fname, bool jit=false) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::FunctionInternal::size1_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::Newton::set_work(void *mem, const double
**&arg, double **&res, int *&iw, double *&w) const override "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::default_in(int ind) const
"

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::tang_sx(int iind=0, int
oind=0) "

[INTERNAL]  Tangent expression.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::sx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::size_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::Rootfinder::eval(void *mem, const double
**arg, double **res, int *iw, double *w) const override "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::Rootfinder::sp_fwd(const bvec_t **arg, bvec_t
**res, int *iw, bvec_t *w, int mem) const override "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::Rootfinder::get_n_forward() const override "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::getHessian(int iind, int
oind) "

[INTERNAL]  Return Hessian function.

";

%feature("docstring")  casadi::FunctionInternal::tangent(int iind, int oind)
"

[INTERNAL]  Return tangent function.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::hasDerivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::gradient(int iind, int
oind) "

[INTERNAL]  Return gradient function.

";

%feature("docstring")  casadi::Newton::free_memory(void *mem) const override
"

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::hess_sx(int iind=0, int
oind=0) "

[INTERNAL]  Hessian expression.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::Newton::solve(void *mem) const override "

[INTERNAL]   Solve the system of equations and calculate derivatives.

";

%feature("docstring")  casadi::OracleFunction::finalize(const Dict &opts)
override "

[INTERNAL]  Finalize initialization.

";

%feature("docstring")  casadi::FunctionInternal::grad_mx(int iind=0, int
oind=0) "

[INTERNAL]  Gradient expression.

";


// File: classcasadi_1_1NlpBuilder.xml


/*  Symbolic representation of the NLP  */

/* Data members

*/ %feature("docstring") casadi::NlpBuilder "

A symbolic NLP representation.

Joel Andersson

C++ includes: nlp_builder.hpp ";

%feature("docstring")  casadi::NlpBuilder::import_nl(const std::string
&filename, const Dict &opts=Dict()) "

Import an .nl file.

";

%feature("docstring")  casadi::PrintableObject< NlpBuilder
>::getDescription() const "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::PrintableObject< NlpBuilder
>::getRepresentation() const "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::NlpBuilder::repr(std::ostream
&stream=casadi::userOut(), bool trailing_newline=true) const  "

Print a representation of the object.

";

%feature("docstring")  casadi::NlpBuilder::print(std::ostream
&stream=casadi::userOut(), bool trailing_newline=true) const  "

Print a description of the object.

";


// File: classcasadi_1_1Nlpsol.xml
%feature("docstring")
casadi::FunctionInternal::generateFunction(CodeGenerator &g, const
std::string &fname, bool decl_static) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring") casadi::Nlpsol::_get_stats "

[INTERNAL]  Get all statistics

";

%feature("docstring")  casadi::FunctionInternal::getAlgorithmSize() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::OracleFunction::oracle() const override "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FunctionInternal::replaceAdjSeed(const
std::vector< std::vector< M > > &aseed) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::Nlpsol::get_sparsity_in(int i) override "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::repr(std::ostream &stream)
const override "

[INTERNAL]  Print.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::addShorthand(CodeGenerator
&g, const std::string &name) const  "

[INTERNAL]  Generate shorthand macro.

";

%feature("docstring")  casadi::OracleFunction::get_function() const override
"

[INTERNAL] ";

%feature("docstring")  casadi::OracleFunction::get_function(const
std::string &name) const override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::name() const  "

[INTERNAL]  Name of the function.

";

%feature("docstring") casadi::Nlpsol::Nlpsol(const std::string &name, const
Function &oracle) "

[INTERNAL]  Constructor.

";

%feature("docstring")  casadi::FunctionInternal::get_n_forward() const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(int iind, int
oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::matchingArg(const
std::vector< M > &arg, bool hcat=false) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::Nlpsol::getReducedHessian() "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(int ind) const
"

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(const
std::string &iname) const  "

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::FunctionInternal::getPartition(int iind, int
oind, Sparsity &D1, Sparsity &D2, bool compact, bool symmetric, bool
allow_forward, bool allow_reverse) "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(int iind,
int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::OracleFunction::print_fstats(const
OracleMemory *m) const  "

[INTERNAL]  Print statistics.

";

%feature("docstring")  casadi::OracleFunction::create_function(const
std::string &fname, const std::vector< std::string > &s_in, const
std::vector< std::string > &s_out, const Function::AuxOut
&aux=Function::AuxOut()) "

[INTERNAL]  Create an oracle function

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::FunctionInternal::gradient(int iind, int
oind) "

[INTERNAL]  Return gradient function.

";

%feature("docstring")  casadi::Nlpsol::get_options() const override "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::FunctionInternal::get_reverse(const
std::string &name, int nadj, const std::vector< std::string > &i_names,
const std::vector< std::string > &o_names, const Dict &opts) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::Nlpsol::get_sparsity_out(int i) override "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::OracleFunction::finalize(const Dict &opts)
override "

[INTERNAL]  Finalize initialization.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::clear_memory() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::sp_fwd(const bvec_t **arg,
bvec_t **res, int *iw, bvec_t *w, int mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::FunctionInternal::tang_mx(int iind=0, int
oind=0) "

[INTERNAL]  Tangent expression.

";

%feature("docstring")  casadi::OracleFunction::monitored(const std::string
&name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::FunctionInternal::reverse(int nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOperation(int k)
const  "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::log(const std::string &msg)
const  "

[INTERNAL]  Log the status of the solver.

";

%feature("docstring")  casadi::FunctionInternal::log(const std::string &fcn,
const std::string &msg) const  "

[INTERNAL]  Log the status of the solver, function given.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::generateBody(CodeGenerator
&g) const  "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring")  casadi::Nlpsol::setOptionsFromFile(const std::string
&file) "

[INTERNAL]  Read options from parameter xml.

";

%feature("docstring")  casadi::Nlpsol::get_name_in(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOutput(int k)
const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(int nadj) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn, const std::string &fname, bool jit=false) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::FunctionInternal::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FunctionInternal::symbolicFwdSeed(int nfwd,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::Nlpsol::type_name() const override "

[INTERNAL]  Get type name.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::hasFullJacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::Nlpsol::get_n_in() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::OracleFunction::set_temp(void *mem, const
double **arg, double **res, int *iw, double *w) const override "

[INTERNAL]  Set the work vectors.

";

%feature("docstring")  casadi::FunctionInternal::get_forward(const
std::string &name, int nfwd, const std::vector< std::string > &i_names,
const std::vector< std::string > &o_names, const Dict &opts) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::Nlpsol::default_in(int ind) const override "

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::print_free(std::ostream
&stream) const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::Nlpsol::init_memory(void *mem) const override
"

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::replaceRes(const
std::vector< M > &res) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::getTangent(const
std::string &name, int iind, int oind, const Dict &opts) "

[INTERNAL]  Return tangent function.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::getGradient(const
std::string &name, int iind, int oind, const Dict &opts) "

[INTERNAL]  Return gradient function.

";

%feature("docstring")  casadi::OracleFunction::has_function(const
std::string &fname) const override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::n_out() const  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::generateMeta(CodeGenerator
&g, const std::string &fname) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::Nlpsol::set_work(void *mem, const double
**&arg, double **&res, int *&iw, double *&w) const override "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::set_jac_sparsity(const
Sparsity &sp, int iind, int oind, bool compact) "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::PluginInterface< Nlpsol  >::plugin_name()
const  "

[INTERNAL] ";

%feature("docstring")  casadi::Nlpsol::get_n_out() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::hessian(int iind, int oind)
"

[INTERNAL]  Return Hessian function.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(int nfwd) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::n_in() const  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::Nlpsol::solve(void *mem) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_n_reverse() const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::jacobian(int iind, int
oind, bool compact, bool symmetric) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::size_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::matchingRes(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

";

%feature("docstring")  casadi::OracleFunction::expand() "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::addDependency(CodeGenerator
&g) const  "

[INTERNAL]  Add a dependent function.

";

%feature("docstring") casadi::Nlpsol::_setup "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::OracleFunction::calc_function(OracleMemory
*m, const std::string &fcn, const double *const *arg=0) const  "

[INTERNAL] ";

%feature("docstring")  casadi::Nlpsol::eval(void *mem, const double **arg,
double **res, int *iw, double *w) const override "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring") casadi::Nlpsol::_eval "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring") casadi::Nlpsol::_eval "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring") casadi::Nlpsol::_eval "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::symbolicOutput(const
std::vector< MX > &arg) "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::getFullJacobian(const
std::string &name, const std::vector< std::string > &i_names, const
std::vector< std::string > &o_names, const Dict &opts) "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")
casadi::FunctionInternal::generateDeclarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::getWorkSize() const  "

[INTERNAL]  Get the length of the work vector.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::checkArg(const std::vector<
M > &arg, bool hcat=false) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::Nlpsol "

NLP solver storage class.

Joel Andersson

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| common_options   | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | auto-generated   | nction           |
|                  |                 | functions        |                  |
+------------------+-----------------+------------------+------------------+
| discrete         | OT_BOOLVECTOR   | Indicates which  | casadi::Nlpsol   |
|                  |                 | of the variables |                  |
|                  |                 | are discrete,    |                  |
|                  |                 | i.e. integer-    |                  |
|                  |                 | valued           |                  |
+------------------+-----------------+------------------+------------------+
| eval_errors_fata | OT_BOOL         | When errors      | casadi::Nlpsol   |
| l                |                 | occur during     |                  |
|                  |                 | evaluation of    |                  |
|                  |                 | f,g,...,stop the |                  |
|                  |                 | iterations       |                  |
+------------------+-----------------+------------------+------------------+
| expand           | OT_BOOL         | Replace MX with  | casadi::Nlpsol   |
|                  |                 | SX expressions   |                  |
|                  |                 | in problem       |                  |
|                  |                 | formulation      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| ignore_check_vec | OT_BOOL         | If set to true,  | casadi::Nlpsol   |
|                  |                 | the input shape  |                  |
|                  |                 | of F will not be |                  |
|                  |                 | checked.         |                  |
+------------------+-----------------+------------------+------------------+
| iteration_callba | OT_FUNCTION     | A function that  | casadi::Nlpsol   |
| ck               |                 | will be called   |                  |
|                  |                 | at each          |                  |
|                  |                 | iteration with   |                  |
|                  |                 | the solver as    |                  |
|                  |                 | input. Check     |                  |
|                  |                 | documentation of |                  |
|                  |                 | Callback .       |                  |
+------------------+-----------------+------------------+------------------+
| iteration_callba | OT_BOOL         | If set to true,  | casadi::Nlpsol   |
| ck_ignore_errors |                 | errors thrown by |                  |
|                  |                 | iteration_callba |                  |
|                  |                 | ck will be       |                  |
|                  |                 | ignored.         |                  |
+------------------+-----------------+------------------+------------------+
| iteration_callba | OT_INT          | Only call the    | casadi::Nlpsol   |
| ck_step          |                 | callback         |                  |
|                  |                 | function every   |                  |
|                  |                 | few iterations.  |                  |
+------------------+-----------------+------------------+------------------+
| monitor          | OT_STRINGVECTOR | Set of user      | casadi::OracleFu |
|                  |                 | problem          | nction           |
|                  |                 | functions to be  |                  |
|                  |                 | monitored        |                  |
+------------------+-----------------+------------------+------------------+
| specific_options | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | specific auto-   | nction           |
|                  |                 | generated        |                  |
|                  |                 | functions,       |                  |
|                  |                 | overwriting the  |                  |
|                  |                 | defaults from    |                  |
|                  |                 | common_options.  |                  |
|                  |                 | Nested           |                  |
|                  |                 | dictionary.      |                  |
+------------------+-----------------+------------------+------------------+
| verbose_init     | OT_BOOL         | Print out timing | casadi::Nlpsol   |
|                  |                 | information      |                  |
|                  |                 | about the        |                  |
|                  |                 | different stages |                  |
|                  |                 | of               |                  |
|                  |                 | initialization   |                  |
+------------------+-----------------+------------------+------------------+
| warn_initial_bou | OT_BOOL         | Warn if the      | casadi::Nlpsol   |
| nds              |                 | initial guess    |                  |
|                  |                 | does not satisfy |                  |
|                  |                 | LBX and UBX      |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: nlpsol_impl.hpp ";

%feature("docstring")  casadi::FunctionInternal::grad_sx(int iind=0, int
oind=0) "

[INTERNAL]  Gradient expression.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< int > &order_in, const std::vector< int >
&order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::FunctionInternal::sx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, int order, bool
tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::checkRes(const std::vector<
M > &res) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::replaceArg(const
std::vector< M > &arg, bool hcat=false) const  "

[INTERNAL]  Replace 0-by-0 inputs.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::forward(int nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::size_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::getHessian(int iind, int
oind) "

[INTERNAL]  Return Hessian function.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::simple(const double *arg,
double *res) const  "

[INTERNAL]  Evaluate numerically, simplied syntax.

";

%feature("docstring")  casadi::FunctionInternal::getJacobian(const
std::string &name, int iind, int oind, bool compact, bool symmetric, const
Dict &opts) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring") casadi::Nlpsol::_call "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring") casadi::Nlpsol::_call "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::FunctionInternal::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::FunctionInternal::grad_mx(int iind=0, int
oind=0) "

[INTERNAL]  Gradient expression.

";

%feature("docstring")  casadi::Nlpsol::checkInputs(void *mem) const  "

[INTERNAL]  Check if the inputs correspond to a well-posed problem.

";

%feature("docstring")  casadi::FunctionInternal::checkInputs() const  "

[INTERNAL]  Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::FunctionInternal::replaceFwdSeed(const
std::vector< std::vector< M > > &fseed) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::name_in(int ind) const  "

[INTERNAL]  Get input scheme name by index.

";

%feature("docstring")  casadi::FunctionInternal::tangent(int iind, int oind)
"

[INTERNAL]  Return tangent function.

";

%feature("docstring")  casadi::FunctionInternal::sp_rev(bvec_t **arg, bvec_t
**res, int *iw, bvec_t *w, int mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsityGen(int iind,
int oind, bool symmetric, int gr_i=1, int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FunctionInternal::verbose() const  "

[INTERNAL]  Verbose mode?

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInputReal(int k)
const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(int nadj,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::Nlpsol::free_memory(void *mem) const override
"

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::simplifiedCall() const  "

[INTERNAL]  Use simplified signature.

";

%feature("docstring")  casadi::FunctionInternal::fullJacobian() "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Nlpsol::~Nlpsol "

[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::FunctionInternal::print(std::ostream &stream)
const override "

[INTERNAL]  Print.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(int ind) const
"

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(const
std::string &iname) const  "

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::FunctionInternal::jac_mx(int iind=0, int
oind=0, const Dict &opts=Dict()) "

[INTERNAL]  Jacobian expression.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInput(int k) const
"

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::OracleFunction::get_stats(void *mem) const
override "

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::OracleFunction::jit_dependencies(const
std::string &fname) override "

[INTERNAL]  JIT for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::map_mx(const std::vector<
std::vector< MX > > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::map_mx(const std::vector<
MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::Nlpsol::integer_support() const  "

[INTERNAL]  Can discrete variables be treated.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, int *iw, SXElem *w, int mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::FunctionInternal::name_out(int ind) const  "

[INTERNAL]  Get output scheme name by index.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::numel_out(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::n_mem() const  "

[INTERNAL]  Maximum number of memory objects.

";

%feature("docstring")  casadi::OracleFunction::generate_dependencies(const
std::string &fname, const Dict &opts) const override "

[INTERNAL]  Export / Generate C code for the generated functions.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::setJacobian(const Function
&jac, int iind, int oind, bool compact) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::FunctionInternal::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::Nlpsol::get_name_out(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring") casadi::Nlpsol::_set_work "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::eval_name() const  "

[INTERNAL]  Get name of the evaluation function.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::FunctionInternal::tang_sx(int iind=0, int
oind=0) "

[INTERNAL]  Tangent expression.

";

%feature("docstring")  casadi::FunctionInternal::hess_sx(int iind=0, int
oind=0) "

[INTERNAL]  Hessian expression.

";

%feature("docstring")  casadi::FunctionInternal::construct(const Dict &opts)
"

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::Nlpsol::alloc_memory() const override "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::FunctionInternal::jac_sx(int iind=0, int
oind=0, const Dict &opts=Dict()) "

[INTERNAL]  Jacobian expression.

";

%feature("docstring")  casadi::FunctionInternal::hasDerivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::Nlpsol::init(const Dict &opts) override "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Nlpsol::_set_temp "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";


// File: classcasadi_1_1NonZeros.xml
%feature("docstring") casadi::NonZeros< M, K >::NonZeros(M &mat, const K &k)
"

Constructor.

";

%feature("docstring") casadi::NonZeros "

Access to a set of nonzeros.

NonZeros class for Matrix NonZeros is the return type for operator[] of the
Matrix class, it allows access to the value as well as changing the parent
object Joel Andersson

C++ includes: nonzeros.hpp ";


// File: classcasadi_1_1Norm.xml


// File: classcasadi_1_1Norm1.xml


// File: classcasadi_1_1Norm2.xml


// File: classcasadi_1_1NormF.xml


// File: classcasadi_1_1NormInf.xml


// File: classcasadi_1_1OneSX.xml


// File: classcasadi_1_1Opti.xml
%feature("docstring")  casadi::OptiStack::subject_to(const MX &g) "

Add constraints.

Examples:

::

  * \\\\begin{itemize}
  * opti.subject_to( sqrt(x+y) >= 1);
  * opti.subject_to( sqrt(x+y) > 1)}: same as above
  * opti.subject_to( 1<= sqrt(x+y) )}: same as above
  * opti.subject_to( 5*x+y==1 )}: equality
  *
  * Python
  * opti.subject_to([x*y>=1,x==3])
  * opti.subject_to(opti.bounded(0,x,1))
  *
  * MATLAB
  * opti.subject_to({x*y>=1,x==3})
  * opti.subject_to( 0<=x<=1 )
  * 



";

%feature("docstring")  casadi::OptiStack::subject_to(const std::vector< MX >
&g) "

Add constraints.

Examples:

::

  * \\\\begin{itemize}
  * opti.subject_to( sqrt(x+y) >= 1);
  * opti.subject_to( sqrt(x+y) > 1)}: same as above
  * opti.subject_to( 1<= sqrt(x+y) )}: same as above
  * opti.subject_to( 5*x+y==1 )}: equality
  *
  * Python
  * opti.subject_to([x*y>=1,x==3])
  * opti.subject_to(opti.bounded(0,x,1))
  *
  * MATLAB
  * opti.subject_to({x*y>=1,x==3})
  * opti.subject_to( 0<=x<=1 )
  * 



";

%feature("docstring")  casadi::OptiStack::set_initial(const MX &x, const DM
&v) "

Set initial guess for decision variables

::

  * opti.set_initial(x, 2)
  * opti.set_initial(10*x(1), 2)
  * 



";

%feature("docstring")  casadi::OptiStack::set_initial(const std::vector< MX
> &assignments) "

Set initial guess for decision variables

::

  * opti.set_initial(x, 2)
  * opti.set_initial(10*x(1), 2)
  * 



";

%feature("docstring") casadi::Opti "

A simplified interface for NLP modeling/solving.

This class offers a view with model description facilities The API is
guaranteed to be stable.

Joris Gillis, Erik Lambrechts

C++ includes: optistack.hpp ";

%feature("docstring")  casadi::OptiStack::symvar() const  "

Get symbols present in expression.

Returned vector is ordered according to the order of variable()/parameter()
calls used to create the variables

";

%feature("docstring")  casadi::OptiStack::symvar(const MX &expr) const  "

Get symbols present in expression.

Returned vector is ordered according to the order of variable()/parameter()
calls used to create the variables

";

%feature("docstring")  casadi::OptiStack::symvar(const MX &expr,
VariableType type) const  "

Get symbols present in expression.

Returned vector is ordered according to the order of variable()/parameter()
calls used to create the variables

";

%feature("docstring")  casadi::OptiStack::set_value(const MX &x, const DM
&v) "

Set value of parameter.

Each parameter must be given a value before 'solve' can be called

";

%feature("docstring")  casadi::OptiStack::set_value(const std::vector< MX >
&assignments) "

Set value of parameter.

Each parameter must be given a value before 'solve' can be called

";

%feature("docstring")  casadi::Opti::debug() "

";

%feature("docstring")  casadi::Opti::copy() "

";

%feature("docstring")  casadi::OptiStack::value(const MX &x, const
std::vector< MX > &values=std::vector< MX >()) const  "

Obtain value of expression at the current value

In regular mode, teh current value is the converged solution In debug mode,
the value can be non-converged

Parameters:
-----------

values:  Optional assignment expressions (e.g. x==3) to overrule the current
value

";

%feature("docstring")  casadi::OptiStack::value(const DM &x, const
std::vector< MX > &values=std::vector< MX >()) const  "

Obtain value of expression at the current value

In regular mode, teh current value is the converged solution In debug mode,
the value can be non-converged

Parameters:
-----------

values:  Optional assignment expressions (e.g. x==3) to overrule the current
value

";

%feature("docstring")  casadi::OptiStack::value(const SX &x, const
std::vector< MX > &values=std::vector< MX >()) const  "

Obtain value of expression at the current value

In regular mode, teh current value is the converged solution In debug mode,
the value can be non-converged

Parameters:
-----------

values:  Optional assignment expressions (e.g. x==3) to overrule the current
value

";


// File: classcasadi_1_1OptiCallback.xml
%feature("docstring") casadi::OptiCallback::~OptiCallback "

";

%feature("docstring") casadi::OptiCallback "

C++ includes: optistack.hpp ";

%feature("docstring")  casadi::OptiCallback::call(int i) "

";

%feature("docstring") casadi::OptiCallback::OptiCallback() "

";

%feature("docstring") casadi::OptiCallback::OptiCallback(const OptiCallback
&obj) "

";


// File: classcasadi_1_1OptiSol.xml
%feature("docstring")  casadi::OptiStack::symvar() const  "

Get symbols present in expression.

Returned vector is ordered according to the order of variable()/parameter()
calls used to create the variables

";

%feature("docstring")  casadi::OptiStack::symvar(const MX &expr) const  "

Get symbols present in expression.

Returned vector is ordered according to the order of variable()/parameter()
calls used to create the variables

";

%feature("docstring")  casadi::OptiStack::symvar(const MX &expr,
VariableType type) const  "

Get symbols present in expression.

Returned vector is ordered according to the order of variable()/parameter()
calls used to create the variables

";

%feature("docstring")  casadi::OptiSol::opti() "

";

%feature("docstring") casadi::OptiSol "

A simplified interface for NLP modeling/solving.

This class offers a view with solution retrieval facilities The API is
guaranteed to be stable.

Example NLP:

::

    opti = casadi.Opti();
  
    x = opti.variable();
    y = opti.variable();
  
    opti.minimize(  (y-x^2)^2   );
    opti.subject_to( x^2+y^2==1 );
    opti.subject_to(     x+y>=1 );
  
    opti.solver('ipopt');
    sol = opti.solve();
  
    sol.value(x)
    sol.value(y)



Example parametric NLP:

::

    opti = casadi.Opti();
  
    x = opti.variable(2,1);
    p = opti.parameter();
  
    opti.minimize(  (p*x(2)-x(1)^2)^2   );
    opti.subject_to( 1<=sum(x)<=2 );
  
    opti.solver('ipopt');
  
    opti.set_value(p, 3);
    sol = opti.solve();
    sol.value(x)
  
    opti.set_value(p, 5);
    sol = opti.solve();
    sol.value(x)



Joris Gillis, Erik Lambrechts

C++ includes: optistack.hpp ";

%feature("docstring") casadi::OptiSol::OptiSol(const OptiStack &opti) "

";

%feature("docstring")  casadi::OptiStack::value(const MX &x, const
std::vector< MX > &values=std::vector< MX >()) const  "

Obtain value of expression at the current value

In regular mode, teh current value is the converged solution In debug mode,
the value can be non-converged

Parameters:
-----------

values:  Optional assignment expressions (e.g. x==3) to overrule the current
value

";

%feature("docstring")  casadi::OptiStack::value(const DM &x, const
std::vector< MX > &values=std::vector< MX >()) const  "

Obtain value of expression at the current value

In regular mode, teh current value is the converged solution In debug mode,
the value can be non-converged

Parameters:
-----------

values:  Optional assignment expressions (e.g. x==3) to overrule the current
value

";

%feature("docstring")  casadi::OptiStack::value(const SX &x, const
std::vector< MX > &values=std::vector< MX >()) const  "

Obtain value of expression at the current value

In regular mode, teh current value is the converged solution In debug mode,
the value can be non-converged

Parameters:
-----------

values:  Optional assignment expressions (e.g. x==3) to overrule the current
value

";

%feature("docstring")  casadi::OptiSol::debug() "

";

%feature("docstring")  casadi::OptiStack::set_value(const MX &x, const DM
&v) "

Set value of parameter.

Each parameter must be given a value before 'solve' can be called

";

%feature("docstring")  casadi::OptiStack::set_value(const std::vector< MX >
&assignments) "

Set value of parameter.

Each parameter must be given a value before 'solve' can be called

";

%feature("docstring")  casadi::OptiStack::set_initial(const MX &x, const DM
&v) "

Set initial guess for decision variables

::

  * opti.set_initial(x, 2)
  * opti.set_initial(10*x(1), 2)
  * 



";

%feature("docstring")  casadi::OptiStack::set_initial(const std::vector< MX
> &assignments) "

Set initial guess for decision variables

::

  * opti.set_initial(x, 2)
  * opti.set_initial(10*x(1), 2)
  * 



";

%feature("docstring")  casadi::OptiStack::subject_to(const MX &g) "

Add constraints.

Examples:

::

  * \\\\begin{itemize}
  * opti.subject_to( sqrt(x+y) >= 1);
  * opti.subject_to( sqrt(x+y) > 1)}: same as above
  * opti.subject_to( 1<= sqrt(x+y) )}: same as above
  * opti.subject_to( 5*x+y==1 )}: equality
  *
  * Python
  * opti.subject_to([x*y>=1,x==3])
  * opti.subject_to(opti.bounded(0,x,1))
  *
  * MATLAB
  * opti.subject_to({x*y>=1,x==3})
  * opti.subject_to( 0<=x<=1 )
  * 



";

%feature("docstring")  casadi::OptiStack::subject_to(const std::vector< MX >
&g) "

Add constraints.

Examples:

::

  * \\\\begin{itemize}
  * opti.subject_to( sqrt(x+y) >= 1);
  * opti.subject_to( sqrt(x+y) > 1)}: same as above
  * opti.subject_to( 1<= sqrt(x+y) )}: same as above
  * opti.subject_to( 5*x+y==1 )}: equality
  *
  * Python
  * opti.subject_to([x*y>=1,x==3])
  * opti.subject_to(opti.bounded(0,x,1))
  *
  * MATLAB
  * opti.subject_to({x*y>=1,x==3})
  * opti.subject_to( 0<=x<=1 )
  * 



";


// File: classcasadi_1_1OptiStack.xml
%feature("docstring")  casadi::OptiStack::casadi_solver() const  "

Get the underlying CasADi solver of the Opti stack.

";

%feature("docstring")
casadi::OptiStack::active_symvar(OptiStack::VariableType type) const  "

";

%feature("docstring")  casadi::OptiStack::symvar() const  "

Get symbols present in expression.

Returned vector is ordered according to the order of variable()/parameter()
calls used to create the variables

";

%feature("docstring")  casadi::OptiStack::symvar(const MX &expr) const  "

Get symbols present in expression.

Returned vector is ordered according to the order of variable()/parameter()
calls used to create the variables

";

%feature("docstring")  casadi::OptiStack::symvar(const MX &expr,
VariableType type) const  "

Get symbols present in expression.

Returned vector is ordered according to the order of variable()/parameter()
calls used to create the variables

";

%feature("docstring")  casadi::OptiStack::constraints() const  "

";

%feature("docstring")  casadi::OptiStack::stats() const  "

Get statistics.

nlpsol stats are passed as-is. No stability can be guaranteed about this
part of the API

";

%feature("docstring")  casadi::OptiStack::subject_to(const MX &g) "

Add constraints.

Examples:

::

  * \\\\begin{itemize}
  * opti.subject_to( sqrt(x+y) >= 1);
  * opti.subject_to( sqrt(x+y) > 1)}: same as above
  * opti.subject_to( 1<= sqrt(x+y) )}: same as above
  * opti.subject_to( 5*x+y==1 )}: equality
  *
  * Python
  * opti.subject_to([x*y>=1,x==3])
  * opti.subject_to(opti.bounded(0,x,1))
  *
  * MATLAB
  * opti.subject_to({x*y>=1,x==3})
  * opti.subject_to( 0<=x<=1 )
  * 



";

%feature("docstring")  casadi::OptiStack::subject_to(const std::vector< MX >
&g) "

Add constraints.

Examples:

::

  * \\\\begin{itemize}
  * opti.subject_to( sqrt(x+y) >= 1);
  * opti.subject_to( sqrt(x+y) > 1)}: same as above
  * opti.subject_to( 1<= sqrt(x+y) )}: same as above
  * opti.subject_to( 5*x+y==1 )}: equality
  *
  * Python
  * opti.subject_to([x*y>=1,x==3])
  * opti.subject_to(opti.bounded(0,x,1))
  *
  * MATLAB
  * opti.subject_to({x*y>=1,x==3})
  * opti.subject_to( 0<=x<=1 )
  * 



";

%feature("docstring")  casadi::OptiStack::subject_to() "

Clear constraints.

";

%feature("docstring")  casadi::OptiStack::return_status() const  "

Get return status of solver passed as-is from nlpsol No stability can be
guaranteed about this part of the API.

";

%feature("docstring")
casadi::OptiStack::active_values(OptiStack::VariableType type) const  "

";

%feature("docstring")  casadi::OptiStack::parameter(int n=1, int m=1, const
std::string &attribute="full") "

Create a parameter (symbol); fixed during optimization.

The order of creation does not matter. It is not required for parameter to
actualy appear in the optimization problem. Parameters that do appear, must
be given a value before the problem can be solved.

Parameters:
-----------

n:  number of rows (default 1)

m:  number of columnss (default 1)

attribute:  'full' (default) or 'symmetric'

";

%feature("docstring")  casadi::OptiStack::solve() "

Crunch the numbers; solve the problem.

";

%feature("docstring")  casadi::OptiStack::set_initial(const MX &x, const DM
&v) "

Set initial guess for decision variables

::

  * opti.set_initial(x, 2)
  * opti.set_initial(10*x(1), 2)
  * 



";

%feature("docstring")  casadi::OptiStack::set_initial(const std::vector< MX
> &assignments) "

Set initial guess for decision variables

::

  * opti.set_initial(x, 2)
  * opti.set_initial(10*x(1), 2)
  * 



";

%feature("docstring")  casadi::OptiStack::get_meta_con(const MX &m) const  "

Get meta-data of symbol (for internal use only)

";

%feature("docstring")  casadi::OptiStack::value_variables() const  "

get assignment expressions for latest values

";

%feature("docstring")  casadi::OptiStack::is_parametric(const MX &expr)
const  "

return true if expression is only dependant on Opti parameters, not
variables

";

%feature("docstring")  casadi::OptiStack::callback_class(OptiCallback
*callback) "

";

%feature("docstring")  casadi::OptiStack::callback_class() "

";

%feature("docstring")  casadi::OptiStack::canon_expr(const MX &expr) const
"

Interpret an expression (for internal use only)

";

%feature("docstring")  casadi::OptiStack::p() "

Get all (scalarised) parameters as a symbolic column vector.

";

%feature("docstring")  casadi::OptiStack::np() "

Number of (scalarised) parameters.

";

%feature("docstring")  casadi::OptiStack::repr(std::ostream
&stream=casadi::userOut(), bool trailing_newline=true) const  "

Print representation.

";

%feature("docstring")  casadi::OptiStack::solver_dirty() const  "

";

%feature("docstring")  casadi::OptiStack::mark_solver_dirty(bool flag=true)
"

";

%feature("docstring")  casadi::OptiStack::assert_empty() const  "

";

%feature("docstring")  casadi::OptiStack::x() "

Get all (scalarised) decision variables as a symbolic column vector.

";

%feature("docstring")  casadi::OptiStack::copy() const  "

Copy.

";

%feature("docstring")  casadi::OptiStack::minimize(const MX &f) "

Set objective.

Objective must be a scalar. Default objective: 0 When method is called
multiple times, the last call takes effect

";

%feature("docstring")  casadi::OptiStack::assert_active_symbol(const MX &m)
const  "

";

%feature("docstring")  casadi::OptiStack::f() "

Get objective expression.

";

%feature("docstring")  casadi::OptiStack::solve_actual(const DMDict &args) "

";

%feature("docstring")  casadi::OptiStack::lam_g() "

Get all (scalarised) dual variables as a symbolic column vector.

Useful for obtaining the Lagrange Hessian:

::

  * sol.value(hessian(opti.f+opti.lam_g'*opti.g,opti.x)) % MATLAB
  * sol.value(hessian(opti.f+dot(opti.lam_g,opti.g),opti.x)[0]) # Python
  * 



";

%feature("docstring")  casadi::OptiStack::nx() "

Number of (scalarised) decision variables.

";

%feature("docstring")  casadi::OptiStack::assert_baked() const  "

";

%feature("docstring")  casadi::OptiStack::set_value(const MX &x, const DM
&v) "

Set value of parameter.

Each parameter must be given a value before 'solve' can be called

";

%feature("docstring")  casadi::OptiStack::set_value(const std::vector< MX >
&assignments) "

Set value of parameter.

Each parameter must be given a value before 'solve' can be called

";

%feature("docstring")  casadi::OptiStack::solve_prepare() "

";

%feature("docstring")  casadi::OptiStack::value(const MX &x, const
std::vector< MX > &values=std::vector< MX >()) const  "

Obtain value of expression at the current value

In regular mode, teh current value is the converged solution In debug mode,
the value can be non-converged

Parameters:
-----------

values:  Optional assignment expressions (e.g. x==3) to overrule the current
value

";

%feature("docstring")  casadi::OptiStack::value(const DM &x, const
std::vector< MX > &values=std::vector< MX >()) const  "

Obtain value of expression at the current value

In regular mode, teh current value is the converged solution In debug mode,
the value can be non-converged

Parameters:
-----------

values:  Optional assignment expressions (e.g. x==3) to overrule the current
value

";

%feature("docstring")  casadi::OptiStack::value(const SX &x, const
std::vector< MX > &values=std::vector< MX >()) const  "

Obtain value of expression at the current value

In regular mode, teh current value is the converged solution In debug mode,
the value can be non-converged

Parameters:
-----------

values:  Optional assignment expressions (e.g. x==3) to overrule the current
value

";

%feature("docstring")  casadi::OptiStack::set_meta(const MX &m, const
MetaVar &meta) "

Set meta-data of an expression.

";

%feature("docstring")  casadi::OptiStack::arg() const  "

";

%feature("docstring")  casadi::OptiStack::variable(int n=1, int m=1, const
std::string &attribute="full") "

Create a decision variable (symbol)

The order of creation matters. The order will be reflected in the
optimization problem. It is not required for decision variables to actualy
appear in the optimization problem.

Parameters:
-----------

n:  number of rows (default 1)

m:  number of columnss (default 1)

attribute:  'full' (default) or 'symmetric'

";

%feature("docstring")  casadi::OptiStack::solver(const std::string &solver,
const Dict &options=Dict()) "

Set a solver.

Parameters:
-----------

solver:  any of the nlpsol plugins can be used here In practice, not all
nlpsol plugins may be supported yet

options:  passed on to nlpsol No stability can be guaranteed about this part
of the API

";

%feature("docstring")  casadi::OptiStack::res(const DMDict &res) "

";

%feature("docstring")  casadi::OptiStack::mark_problem_dirty(bool flag=true)
"

";

%feature("docstring")  casadi::OptiStack::solved() const  "

";

%feature("docstring") casadi::OptiStack "

A simplified interface for NLP modeling/solving.

This is the low-level base class. Direct usage of this class is not
recommended unless for debugging. There are no guaranties API stability

Joris Gillis, Erik Lambrechts

C++ includes: optistack.hpp ";

%feature("docstring")  casadi::OptiStack::internal_bake() "

Fix the structure of the optimization problem.

";

%feature("docstring")  casadi::OptiStack::mark_solved(bool flag=true) "

";

%feature("docstring")  casadi::OptiStack::assert_solved() const  "

";

%feature("docstring")  casadi::OptiStack::get_meta(const MX &m) const  "

Get meta-data of symbol (for internal use only)

";

%feature("docstring")  casadi::PrintableObject< OptiStack
>::getRepresentation() const "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::OptiStack::problem_dirty() const  "

";

%feature("docstring")  casadi::PrintableObject< OptiStack
>::getDescription() const "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::OptiStack::value_parameters() const  "

";

%feature("docstring")  casadi::OptiStack::g() "

Get all (scalarised) constraint expressions as a column vector.

";

%feature("docstring")  casadi::OptiStack::set_meta_con(const MX &m, const
MetaCon &meta) "

Set meta-data of an expression.

";

%feature("docstring")  casadi::OptiStack::objective() const  "

";

%feature("docstring")  casadi::OptiStack::dual(const MX &m) const  "

get the dual variable

m must be a constraint expression. The returned value is still a symbolic
expression. Use value on it to obtain the numerical value.

";

%feature("docstring") casadi::OptiStack::OptiStack() "

Create Opti Context.

";

%feature("docstring")  casadi::OptiStack::ng() "

Number of (scalarised) constraints.

";

%feature("docstring")  casadi::OptiStack::print(std::ostream
&stream=casadi::userOut(), bool trailing_newline=true) const  "

Print description.

";

%feature("docstring")  casadi::OptiStack::initial() const  "

get assignment expressions for initial values

";


// File: classcasadi_1_1OracleFunction.xml
%feature("docstring")  casadi::FunctionInternal::getAtomicInputReal(int k)
const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::get_reverse(const
std::string &name, int nadj, const std::vector< std::string > &i_names,
const std::vector< std::string > &o_names, const Dict &opts) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::getGradient(const
std::string &name, int iind, int oind, const Dict &opts) "

[INTERNAL]  Return gradient function.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::construct(const Dict &opts)
"

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::FunctionInternal::tangent(int iind, int oind)
"

[INTERNAL]  Return tangent function.

";

%feature("docstring")  casadi::FunctionInternal::name_in(int ind) const  "

[INTERNAL]  Get input scheme name by index.

";

%feature("docstring")  casadi::FunctionInternal::verbose() const  "

[INTERNAL]  Verbose mode?

";

%feature("docstring")  casadi::OracleFunction::set_temp(void *mem, const
double **arg, double **res, int *iw, double *w) const override "

[INTERNAL]  Set the work vectors.

";

%feature("docstring")  casadi::FunctionInternal::tang_sx(int iind=0, int
oind=0) "

[INTERNAL]  Tangent expression.

";

%feature("docstring") casadi::OracleFunction::~OracleFunction "

[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::OracleFunction::has_function(const
std::string &fname) const override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(int nadj,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::OracleFunction::oracle() const override "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(int ind) const
"

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(const
std::string &iname) const  "

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::checkInputs() const  "

[INTERNAL]  Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::OracleFunction::_set_temp "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::print(std::ostream &stream)
const override "

[INTERNAL]  Print.

";

%feature("docstring")  casadi::FunctionInternal::simplifiedCall() const  "

[INTERNAL]  Use simplified signature.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::getWorkSize() const  "

[INTERNAL]  Get the length of the work vector.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::OracleFunction::get_options() const override
"

[INTERNAL]  Options.

";

%feature("docstring") casadi::OracleFunction::_eval "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring") casadi::OracleFunction::_eval "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring") casadi::OracleFunction::_eval "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::jac_mx(int iind=0, int
oind=0, const Dict &opts=Dict()) "

[INTERNAL]  Jacobian expression.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::hess_sx(int iind=0, int
oind=0) "

[INTERNAL]  Hessian expression.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::get_name_out(int i) "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FunctionInternal::matchingRes(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::getJacobian(const
std::string &name, int iind, int oind, bool compact, bool symmetric, const
Dict &opts) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::eval_name() const  "

[INTERNAL]  Get name of the evaluation function.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::OracleFunction::get_stats(void *mem) const
override "

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::OracleFunction::generate_dependencies(const
std::string &fname, const Dict &opts) const override "

[INTERNAL]  Export / Generate C code for the generated functions.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::size_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::grad_mx(int iind=0, int
oind=0) "

[INTERNAL]  Gradient expression.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::generateBody(CodeGenerator
&g) const  "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring")  casadi::FunctionInternal::getHessian(int iind, int
oind) "

[INTERNAL]  Return Hessian function.

";

%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::size_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::symbolicFwdSeed(int nfwd,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring") casadi::OracleFunction::_set_work "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::matchingArg(const
std::vector< M > &arg, bool hcat=false) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::FunctionInternal::eval(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")
casadi::FunctionInternal::generateFunction(CodeGenerator &g, const
std::string &fname, bool decl_static) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::FunctionInternal::getFullJacobian(const
std::string &name, const std::vector< std::string > &i_names, const
std::vector< std::string > &o_names, const Dict &opts) "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::gradient(int iind, int
oind) "

[INTERNAL]  Return gradient function.

";

%feature("docstring")  casadi::FunctionInternal::log(const std::string &msg)
const  "

[INTERNAL]  Log the status of the solver.

";

%feature("docstring")  casadi::FunctionInternal::log(const std::string &fcn,
const std::string &msg) const  "

[INTERNAL]  Log the status of the solver, function given.

";

%feature("docstring")  casadi::FunctionInternal::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::getPartition(int iind, int
oind, Sparsity &D1, Sparsity &D2, bool compact, bool symmetric, bool
allow_forward, bool allow_reverse) "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::checkArg(const std::vector<
M > &arg, bool hcat=false) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::getTangent(const
std::string &name, int iind, int oind, const Dict &opts) "

[INTERNAL]  Return tangent function.

";

%feature("docstring")
casadi::FunctionInternal::generateDeclarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::get_sparsity_in(int i) "

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::OracleFunction::free_memory(void *mem) const
override "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInput(int k) const
"

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::repr(std::ostream &stream)
const override "

[INTERNAL]  Print.

";

%feature("docstring")  casadi::FunctionInternal::generateMeta(CodeGenerator
&g, const std::string &fname) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::OracleFunction::alloc_memory() const override
"

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(int ind) const
"

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(const
std::string &iname) const  "

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::OracleFunction::get_function() const override
"

[INTERNAL] ";

%feature("docstring")  casadi::OracleFunction::get_function(const
std::string &name) const override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::replaceAdjSeed(const
std::vector< std::vector< M > > &aseed) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOutput(int k)
const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::n_out() const  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(int nfwd) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::addDependency(CodeGenerator
&g) const  "

[INTERNAL]  Add a dependent function.

";

%feature("docstring")  casadi::FunctionInternal::clear_memory() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::OracleFunction::expand() "

[INTERNAL] ";

%feature("docstring")  casadi::OracleFunction::create_function(const
std::string &fname, const std::vector< std::string > &s_in, const
std::vector< std::string > &s_out, const Function::AuxOut
&aux=Function::AuxOut()) "

[INTERNAL]  Create an oracle function

";

%feature("docstring")  casadi::FunctionInternal::get_n_in() "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::type_name() const  "

[INTERNAL]  Get type name.

";

%feature("docstring")  casadi::FunctionInternal::forward(int nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::default_in(int ind) const
"

[INTERNAL]  Get default input value.

";

%feature("docstring") casadi::OracleFunction::_call "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring") casadi::OracleFunction::_call "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::hasDerivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::checkRes(const std::vector<
M > &res) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

";

%feature("docstring")  casadi::FunctionInternal::reverse(int nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, int order, bool
tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::sx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::n_mem() const  "

[INTERNAL]  Maximum number of memory objects.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::n_in() const  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::OracleFunction::_get_stats "

[INTERNAL]  Get all statistics

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< int > &order_in, const std::vector< int >
&order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::OracleFunction::calc_function(OracleMemory
*m, const std::string &fcn, const double *const *arg=0) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::mx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::get_forward(const
std::string &name, int nfwd, const std::vector< std::string > &i_names,
const std::vector< std::string > &o_names, const Dict &opts) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(int iind, int
oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(int iind,
int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::sp_fwd(const bvec_t **arg,
bvec_t **res, int *iw, bvec_t *w, int mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::FunctionInternal::hessian(int iind, int oind)
"

[INTERNAL]  Return Hessian function.

";

%feature("docstring")  casadi::OracleFunction::finalize(const Dict &opts)
override "

[INTERNAL]  Finalize initialization.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::FunctionInternal::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::OracleFunction::init_memory(void *mem) const
override "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::jac_sx(int iind=0, int
oind=0, const Dict &opts=Dict()) "

[INTERNAL]  Jacobian expression.

";

%feature("docstring")  casadi::FunctionInternal::hasFullJacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring") casadi::OracleFunction "

[INTERNAL]  Base class for functions that perform calculation with an
oracle.

Joel Andersson

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
+------------------+-----------------+------------------+------------------+
| common_options   | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | auto-generated   | nction           |
|                  |                 | functions        |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Custom input     | casadi::Function |
|                  |                 | scheme           | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| monitor          | OT_STRINGVECTOR | Set of user      | casadi::OracleFu |
|                  |                 | problem          | nction           |
|                  |                 | functions to be  |                  |
|                  |                 | monitored        |                  |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Custom output    | casadi::Function |
|                  |                 | scheme           | Internal         |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| specific_options | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | specific auto-   | nction           |
|                  |                 | generated        |                  |
|                  |                 | functions,       |                  |
|                  |                 | overwriting the  |                  |
|                  |                 | defaults from    |                  |
|                  |                 | common_options.  |                  |
|                  |                 | Nested           |                  |
|                  |                 | dictionary.      |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: oracle_function.hpp ";

%feature("docstring")  casadi::FunctionInternal::print_free(std::ostream
&stream) const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::FunctionInternal::fullJacobian() "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn, const std::string &fname, bool jit=false) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::FunctionInternal::sp_rev(bvec_t **arg, bvec_t
**res, int *iw, bvec_t *w, int mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::replaceRes(const
std::vector< M > &res) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::get_n_reverse() const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::name_out(int ind) const  "

[INTERNAL]  Get output scheme name by index.

";

%feature("docstring")  casadi::FunctionInternal::get_sparsity_out(int i) "

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::sx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::OracleFunction::_setup "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::OracleFunction::print_fstats(const
OracleMemory *m) const  "

[INTERNAL]  Print statistics.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsityGen(int iind,
int oind, bool symmetric, int gr_i=1, int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(int nadj) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::name() const  "

[INTERNAL]  Name of the function.

";

%feature("docstring")  casadi::FunctionInternal::getAlgorithmSize() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::map_mx(const std::vector<
std::vector< MX > > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::map_mx(const std::vector<
MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::OracleFunction::init(const Dict &opts)
override "

[INTERNAL]  Initialize

";

%feature("docstring")  casadi::FunctionInternal::jacobian(int iind, int
oind, bool compact, bool symmetric) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::replaceFwdSeed(const
std::vector< std::vector< M > > &fseed) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, int *iw, SXElem *w, int mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::FunctionInternal::get_n_forward() const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::get_n_out() "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::OracleFunction::jit_dependencies(const
std::string &fname) override "

[INTERNAL]  JIT for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::setJacobian(const Function
&jac, int iind, int oind, bool compact) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::set_jac_sparsity(const
Sparsity &sp, int iind, int oind, bool compact) "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOperation(int k)
const  "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::get_name_in(int i) "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::FunctionInternal::simple(const double *arg,
double *res) const  "

[INTERNAL]  Evaluate numerically, simplied syntax.

";

%feature("docstring")  casadi::FunctionInternal::grad_sx(int iind=0, int
oind=0) "

[INTERNAL]  Gradient expression.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::replaceArg(const
std::vector< M > &arg, bool hcat=false) const  "

[INTERNAL]  Replace 0-by-0 inputs.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::OracleFunction::monitored(const std::string
&name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring") casadi::OracleFunction::OracleFunction(const
std::string &name, const Function &oracle) "

[INTERNAL]  Constructor.

";

%feature("docstring")  casadi::FunctionInternal::addShorthand(CodeGenerator
&g, const std::string &name) const  "

[INTERNAL]  Generate shorthand macro.

";

%feature("docstring")  casadi::FunctionInternal::tang_mx(int iind=0, int
oind=0) "

[INTERNAL]  Tangent expression.

";

%feature("docstring")  casadi::FunctionInternal::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::FunctionInternal::symbolicOutput(const
std::vector< MX > &arg) "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";


// File: classcasadi_1_1Output.xml


// File: classcasadi_1_1ParsedFile.xml
%feature("docstring") casadi::ParsedFile::ParsedFile() "

Default constructor (no commands)

";

%feature("docstring") casadi::ParsedFile::ParsedFile(const std::string
&fname) "

Construct from a file.

";

%feature("docstring") casadi::ParsedFile::ParsedFile(const std::vector<
std::string > &lines, int offset=0) "

Construct from a file.

";

%feature("docstring")  casadi::ParsedFile::print(std::ostream
&stream=casadi::userOut()) const  "

Print parsed file.

";

%feature("docstring")  casadi::ParsedFile::to(const std::string &cmd, int
ind=-1) const  "

Convert to a type.

";

%feature("docstring")  casadi::ParsedFile::parse(const std::string &fname) "

Parse a file.

";

%feature("docstring")  casadi::ParsedFile::parse(const std::vector<
std::string > &lines, int offset) "

Parse a list of strings.

";

%feature("docstring")  casadi::ParsedFile::has(const std::string &cmd, int
ind=-1) const  "

Does an entry exist?

";

%feature("docstring")  casadi::ParsedFile::to_int(const std::string &cmd,
int ind=-1) const  "

Get entry as an integer.

";

%feature("docstring")  casadi::ParsedFile::to_vector(const std::string &cmd,
int ind=-1) const  "

Get entry as a vector.

";

%feature("docstring")  casadi::ParsedFile::to_text(const std::string &cmd,
int ind=-1) const  "

Get entry as a text.

";

%feature("docstring")  casadi::ParsedFile::to_string(const std::string &cmd,
int ind=-1) const  "

Get entry as a string.

";

%feature("docstring")  casadi::ParsedFile::to_set(const std::string &cmd,
int ind=-1) const  "

Get entry as a set.

";

%feature("docstring") casadi::ParsedFile "

A parsed file.

Joel Andersson

C++ includes: casadi_file.hpp ";


// File: classcasadi_1_1Polynomial.xml
%feature("docstring") casadi::Polynomial "

Helper class for differentiating and integrating polynomials.

Joel Andersson

C++ includes: polynomial.hpp ";

%feature("docstring")  casadi::Polynomial::derivative() const  "

Create a new polynomial for the derivative.

";

%feature("docstring") casadi::Polynomial::Polynomial(real_t scalar=1) "

Construct a constant polynomial.

";

%feature("docstring") casadi::Polynomial::Polynomial(real_t p0, real_t p1) "

Construct a linear polynomial.

";

%feature("docstring") casadi::Polynomial::Polynomial(real_t p0, real_t p1,
real_t p2) "

Construct a quadratic polynomial.

";

%feature("docstring") casadi::Polynomial::Polynomial(real_t p0, real_t p1,
real_t p2, real_t p3) "

Construct a cubic polynomial.

";

%feature("docstring") casadi::Polynomial::Polynomial(const std::vector< T >
&coeff) "

Construct from a vector of polynomial coefficients.

";

%feature("docstring")  casadi::Polynomial::print(std::ostream
&stream=casadi::userOut(), bool trailing_newline=true) const  "

Print a description of the object.

";

%feature("docstring")  casadi::Polynomial::anti_derivative() const  "

Create a new polynomial for the anti-derivative (primitive function)

";

%feature("docstring")  casadi::PrintableObject< Polynomial
>::getDescription() const "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::Polynomial::scalar() const  "

Get scalar value (error if degree()!=0)

";

%feature("docstring")  casadi::Polynomial::degree() const  "

Degree of the polynomial.

";

%feature("docstring")  casadi::Polynomial::trim() "

Remove excess zeros.

";

%feature("docstring")  casadi::Polynomial::repr(std::ostream
&stream=casadi::userOut(), bool trailing_newline=true) const  "

Print a representation of the object.

";

%feature("docstring")  casadi::PrintableObject< Polynomial
>::getRepresentation() const "

Return a string with a representation (for SWIG)

";


// File: classcasadi_1_1PrintableObject.xml
%feature("docstring")  casadi::PrintableObject< Derived
>::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring")  repr(const PrintableObject< Derived > &obj) "

Return a string with a representation of the object, cf. repr(Object) in
Python.

";

%feature("docstring")  str(const PrintableObject< Derived > &obj) "

Return a string with a description of the object, cf. str(Object) in Python.

";

%feature("docstring") casadi::PrintableObject "

Base class for objects that have a natural string representation.

Joel Andersson

C++ includes: printable_object.hpp ";

%feature("docstring")  casadi::PrintableObject< Derived >::getDescription()
const  "

Return a string with a description (for SWIG)

";


// File: classcasadi_1_1Project.xml


// File: classcasadi_1_1QpToNlp.xml
%feature("docstring") casadi::QpToNlp::_eval "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring") casadi::QpToNlp::_eval "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring") casadi::QpToNlp::_eval "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::Conic::get_name_out(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::tang_sx(int iind=0, int
oind=0) "

[INTERNAL]  Tangent expression.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::hasDerivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::hess_sx(int iind=0, int
oind=0) "

[INTERNAL]  Hessian expression.

";

%feature("docstring")  casadi::FunctionInternal::get_stats(void *mem) const
"

[INTERNAL]  Get all statistics

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::FunctionInternal::grad_mx(int iind=0, int
oind=0) "

[INTERNAL]  Gradient expression.

";

%feature("docstring") casadi::QpToNlp::_set_temp "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::get_reverse(const
std::string &name, int nadj, const std::vector< std::string > &i_names,
const std::vector< std::string > &o_names, const Dict &opts) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::Conic::get_n_out() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOutput(int k)
const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::symbolicFwdSeed(int nfwd,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::print(std::ostream &stream)
const override "

[INTERNAL]  Print.

";

%feature("docstring")  casadi::FunctionInternal::getTangent(const
std::string &name, int iind, int oind, const Dict &opts) "

[INTERNAL]  Return tangent function.

";

%feature("docstring") casadi::QpToNlp::_get_stats "

[INTERNAL]  Get all statistics

";

%feature("docstring")  casadi::FunctionInternal::get_n_reverse() const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::sx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::name() const  "

[INTERNAL]  Name of the function.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, int *iw, SXElem *w, int mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::replaceRes(const
std::vector< M > &res) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::jit_dependencies(const
std::string &fname) "

[INTERNAL]   Jit dependencies.

";

%feature("docstring")  casadi::FunctionInternal::getPartition(int iind, int
oind, Sparsity &D1, Sparsity &D2, bool compact, bool symmetric, bool
allow_forward, bool allow_reverse) "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::getAlgorithmSize() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::FunctionInternal::getFullJacobian(const
std::string &name, const std::vector< std::string > &i_names, const
std::vector< std::string > &o_names, const Dict &opts) "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::size_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::eval_name() const  "

[INTERNAL]  Get name of the evaluation function.

";

%feature("docstring")  casadi::FunctionInternal::name_in(int ind) const  "

[INTERNAL]  Get input scheme name by index.

";

%feature("docstring")  casadi::FunctionInternal::matchingArg(const
std::vector< M > &arg, bool hcat=false) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::size_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(int ind) const
"

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(const
std::string &iname) const  "

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::QpToNlp::eval(void *mem, const double **arg,
double **res, int *iw, double *w) const override "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::set_jac_sparsity(const
Sparsity &sp, int iind, int oind, bool compact) "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::QpToNlp::~QpToNlp "

[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::FunctionInternal::fullJacobian() "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsityGen(int iind,
int oind, bool symmetric, int gr_i=1, int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FunctionInternal::print_free(std::ostream
&stream) const  "

[INTERNAL]  Print free variables.

";

%feature("docstring") casadi::QpToNlp::_call "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring") casadi::QpToNlp::_call "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::hasFullJacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::matchingRes(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

";

%feature("docstring")  casadi::FunctionInternal::simplifiedCall() const  "

[INTERNAL]  Use simplified signature.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOperation(int k)
const  "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::Conic::get_sparsity_out(int i) override "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::checkRes(const std::vector<
M > &res) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

";

%feature("docstring")  casadi::FunctionInternal::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::Conic::default_in(int ind) const override "

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(int ind) const
"

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(const
std::string &iname) const  "

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::FunctionInternal::free_memory(void *mem)
const  "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::reverse(int nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring") casadi::QpToNlp "

'nlpsol' plugin for Conic

Solve QPs using an Nlpsol Use the 'nlpsol' option to specify the NLP solver
to use.

>List of available options

+----------------+-----------+---------------------------------+
|       Id       |   Type    |           Description           |
+================+===========+=================================+
| nlpsol         | OT_STRING | Name of solver.                 |
+----------------+-----------+---------------------------------+
| nlpsol_options | OT_DICT   | Options to be passed to solver. |
+----------------+-----------+---------------------------------+

Joris Gillis

>List of available options

+----------------+---------------+-----------------------+-----------------+
|       Id       |     Type      |      Description      |     Used in     |
+================+===============+=======================+=================+
| discrete       | OT_BOOLVECTOR | Indicates which of    | casadi::Conic   |
|                |               | the variables are     |                 |
|                |               | discrete, i.e.        |                 |
|                |               | integer-valued        |                 |
+----------------+---------------+-----------------------+-----------------+
| nlpsol         | OT_STRING     | Name of solver.       | casadi::QpToNlp |
+----------------+---------------+-----------------------+-----------------+
| nlpsol_options | OT_DICT       | Options to be passed  | casadi::QpToNlp |
|                |               | to solver.            |                 |
+----------------+---------------+-----------------------+-----------------+

Diagrams
--------



C++ includes: qp_to_nlp.hpp ";

%feature("docstring")  casadi::FunctionInternal::replaceFwdSeed(const
std::vector< std::vector< M > > &fseed) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FunctionInternal::construct(const Dict &opts)
"

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::QpToNlp::_set_work "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::Conic::get_sparsity_in(int i) override "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< int > &order_in, const std::vector< int >
&order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::log(const std::string &msg)
const  "

[INTERNAL]  Log the status of the solver.

";

%feature("docstring")  casadi::FunctionInternal::log(const std::string &fcn,
const std::string &msg) const  "

[INTERNAL]  Log the status of the solver, function given.

";

%feature("docstring")  casadi::Conic::type_name() const override "

[INTERNAL]  Get type name.

";

%feature("docstring")  casadi::FunctionInternal::getWorkSize() const  "

[INTERNAL]  Get the length of the work vector.

";

%feature("docstring")  casadi::FunctionInternal::tang_mx(int iind=0, int
oind=0) "

[INTERNAL]  Tangent expression.

";

%feature("docstring")  casadi::FunctionInternal::name_out(int ind) const  "

[INTERNAL]  Get output scheme name by index.

";

%feature("docstring")  casadi::FunctionInternal::jac_mx(int iind=0, int
oind=0, const Dict &opts=Dict()) "

[INTERNAL]  Jacobian expression.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::forward(int nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::get_function() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_forward(const
std::string &name, int nfwd, const std::vector< std::string > &i_names,
const std::vector< std::string > &o_names, const Dict &opts) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::Conic::print_fstats(const ConicMemory *m)
const  "

[INTERNAL]  Print statistics.

";

%feature("docstring") casadi::QpToNlp::_setup "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::QpToNlp::plugin_name() const override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::repr(std::ostream &stream)
const override "

[INTERNAL]  Print.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInputReal(int k)
const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::clear_memory() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::gradient(int iind, int
oind) "

[INTERNAL]  Return gradient function.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::addShorthand(CodeGenerator
&g, const std::string &name) const  "

[INTERNAL]  Generate shorthand macro.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, int order, bool
tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::hessian(int iind, int oind)
"

[INTERNAL]  Return Hessian function.

";

%feature("docstring")  casadi::FunctionInternal::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::symbolicOutput(const
std::vector< MX > &arg) "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::checkArg(const std::vector<
M > &arg, bool hcat=false) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::map_mx(const std::vector<
std::vector< MX > > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::map_mx(const std::vector<
MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::n_mem() const  "

[INTERNAL]  Maximum number of memory objects.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring")  casadi::FunctionInternal::jac_sx(int iind=0, int
oind=0, const Dict &opts=Dict()) "

[INTERNAL]  Jacobian expression.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::QpToNlp::get_options() const override "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(int nfwd) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::Conic::integer_support() const  "

[INTERNAL]  Can discrete variables be treated.

";

%feature("docstring")  casadi::QpToNlp::init(const Dict &opts) override "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::getHessian(int iind, int
oind) "

[INTERNAL]  Return Hessian function.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::FunctionInternal::sp_fwd(const bvec_t **arg,
bvec_t **res, int *iw, bvec_t *w, int mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::FunctionInternal::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FunctionInternal::sp_rev(bvec_t **arg, bvec_t
**res, int *iw, bvec_t *w, int mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring") casadi::QpToNlp::QpToNlp(const std::string &name,
const std::map< std::string, Sparsity > &st) "

[INTERNAL]  Create a new Solver.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::FunctionInternal::getJacobian(const
std::string &name, int iind, int oind, bool compact, bool symmetric, const
Dict &opts) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInput(int k) const
"

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::Conic::get_name_in(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::n_in() const  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::get_n_forward() const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::verbose() const  "

[INTERNAL]  Verbose mode?

";

%feature("docstring")
casadi::FunctionInternal::generateDeclarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(int iind, int
oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::jacobian(int iind, int
oind, bool compact, bool symmetric) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::setJacobian(const Function
&jac, int iind, int oind, bool compact) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")
casadi::FunctionInternal::generateFunction(CodeGenerator &g, const
std::string &fname, bool decl_static) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(int nadj,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::Conic::get_n_in() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::tangent(int iind, int oind)
"

[INTERNAL]  Return tangent function.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::n_out() const  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::getGradient(const
std::string &name, int iind, int oind, const Dict &opts) "

[INTERNAL]  Return gradient function.

";

%feature("docstring")  casadi::FunctionInternal::set_temp(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::simple(const double *arg,
double *res) const  "

[INTERNAL]  Evaluate numerically, simplied syntax.

";

%feature("docstring")  casadi::FunctionInternal::generateMeta(CodeGenerator
&g, const std::string &fname) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::Conic::generateNativeCode(std::ostream &file)
const  "

[INTERNAL]  Generate native code in the interfaced language for debugging

";

%feature("docstring")  casadi::FunctionInternal::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::grad_sx(int iind=0, int
oind=0) "

[INTERNAL]  Gradient expression.

";

%feature("docstring")  casadi::FunctionInternal::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::finalize(const Dict &opts)
"

[INTERNAL]  Finalize the object creation This function, which visits the
class hierarchy in reverse order is run after init() has been completed.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::init_memory(void *mem)
const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(int iind,
int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::replaceAdjSeed(const
std::vector< std::vector< M > > &aseed) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::Conic::checkInputs(const double *lbx, const
double *ubx, const double *lba, const double *uba) const  "

[INTERNAL]  Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::FunctionInternal::checkInputs() const  "

[INTERNAL]  Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::replaceArg(const
std::vector< M > &arg, bool hcat=false) const  "

[INTERNAL]  Replace 0-by-0 inputs.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::addDependency(CodeGenerator
&g) const  "

[INTERNAL]  Add a dependent function.

";

%feature("docstring")  casadi::FunctionInternal::generateBody(CodeGenerator
&g) const  "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring")  casadi::FunctionInternal::alloc_memory() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(int nadj) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";


// File: classcasadi_1_1Rank1.xml


// File: classcasadi_1_1RealtypeSX.xml


// File: classcasadi_1_1Reshape.xml


// File: classcasadi_1_1Rootfinder.xml
%feature("docstring")  casadi::FunctionInternal::checkInputs() const  "

[INTERNAL]  Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< int > &order_in, const std::vector< int >
&order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::OracleFunction::expand() "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::simplifiedCall() const  "

[INTERNAL]  Use simplified signature.

";

%feature("docstring")  casadi::FunctionInternal::clear_memory() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::matchingArg(const
std::vector< M > &arg, bool hcat=false) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::FunctionInternal::reverse(int nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::generateBody(CodeGenerator
&g) const  "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring")  casadi::OracleFunction::calc_function(OracleMemory
*m, const std::string &fcn, const double *const *arg=0) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::size_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::OracleFunction::monitored(const std::string
&name) const  "

[INTERNAL] ";

%feature("docstring") casadi::Rootfinder::_call "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring") casadi::Rootfinder::_call "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::getHessian(int iind, int
oind) "

[INTERNAL]  Return Hessian function.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::FunctionInternal::replaceArg(const
std::vector< M > &arg, bool hcat=false) const  "

[INTERNAL]  Replace 0-by-0 inputs.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::construct(const Dict &opts)
"

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::OracleFunction::finalize(const Dict &opts)
override "

[INTERNAL]  Finalize initialization.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::name_out(int ind) const  "

[INTERNAL]  Get output scheme name by index.

";

%feature("docstring")  casadi::FunctionInternal::forward(int nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::jacobian(int iind, int
oind, bool compact, bool symmetric) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::OracleFunction::alloc_memory() const override
"

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::Rootfinder::get_n_reverse() const override "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::FunctionInternal::setJacobian(const Function
&jac, int iind, int oind, bool compact) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, int *iw, SXElem *w, int mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::Rootfinder::get_sparsity_out(int i) override
"

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::getWorkSize() const  "

[INTERNAL]  Get the length of the work vector.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::Rootfinder::_set_work "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn, const std::string &fname, bool jit=false) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::FunctionInternal::replaceAdjSeed(const
std::vector< std::vector< M > > &aseed) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(int iind, int
oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(int nadj,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FunctionInternal::n_out() const  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::Rootfinder::get_name_out(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::Rootfinder::init(const Dict &opts) override "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::Rootfinder::init_memory(void *mem) const
override "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::replaceRes(const
std::vector< M > &res) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring") casadi::Rootfinder::Rootfinder(const std::string
&name, const Function &oracle) "

[INTERNAL]  Constructor.

Parameters:
-----------

f:   Function mapping from (n+1) inputs to 1 output.

";

%feature("docstring") casadi::Rootfinder::_setup "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::Rootfinder::get_n_in() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")
casadi::FunctionInternal::generateDeclarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::OracleFunction::get_function() const override
"

[INTERNAL] ";

%feature("docstring")  casadi::OracleFunction::get_function(const
std::string &name) const override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::default_in(int ind) const
"

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::n_mem() const  "

[INTERNAL]  Maximum number of memory objects.

";

%feature("docstring")  casadi::Rootfinder::solve(void *mem) const  "

[INTERNAL] ";

%feature("docstring")  casadi::Rootfinder::sp_rev(bvec_t **arg, bvec_t
**res, int *iw, bvec_t *w, int mem) const override "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::getGradient(const
std::string &name, int iind, int oind, const Dict &opts) "

[INTERNAL]  Return gradient function.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::FunctionInternal::symbolicOutput(const
std::vector< MX > &arg) "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::Rootfinder::get_name_in(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::OracleFunction::oracle() const override "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::tang_mx(int iind=0, int
oind=0) "

[INTERNAL]  Tangent expression.

";

%feature("docstring")  casadi::FunctionInternal::simple(const double *arg,
double *res) const  "

[INTERNAL]  Evaluate numerically, simplied syntax.

";

%feature("docstring")  casadi::FunctionInternal::grad_mx(int iind=0, int
oind=0) "

[INTERNAL]  Gradient expression.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::addShorthand(CodeGenerator
&g, const std::string &name) const  "

[INTERNAL]  Generate shorthand macro.

";

%feature("docstring") casadi::Rootfinder::~Rootfinder "

[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::FunctionInternal::jac_mx(int iind=0, int
oind=0, const Dict &opts=Dict()) "

[INTERNAL]  Jacobian expression.

";

%feature("docstring")  casadi::FunctionInternal::n_in() const  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::Rootfinder::has_sprev() const override "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(int nadj) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::FunctionInternal::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FunctionInternal::set_jac_sparsity(const
Sparsity &sp, int iind, int oind, bool compact) "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::Rootfinder::sp_fwd(const bvec_t **arg, bvec_t
**res, int *iw, bvec_t *w, int mem) const override "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::OracleFunction::free_memory(void *mem) const
override "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring") casadi::Rootfinder "

Internal class.

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| common_options   | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | auto-generated   | nction           |
|                  |                 | functions        |                  |
+------------------+-----------------+------------------+------------------+
| constraints      | OT_INTVECTOR    | Constrain the    | casadi::Rootfind |
|                  |                 | unknowns. 0      | er               |
|                  |                 | (default): no    |                  |
|                  |                 | constraint on    |                  |
|                  |                 | ui, 1: ui >=     |                  |
|                  |                 | 0.0, -1: ui <=   |                  |
|                  |                 | 0.0, 2: ui >     |                  |
|                  |                 | 0.0, -2: ui <    |                  |
|                  |                 | 0.0.             |                  |
+------------------+-----------------+------------------+------------------+
| implicit_input   | OT_INT          | Index of the     | casadi::Rootfind |
|                  |                 | input that       | er               |
|                  |                 | corresponds to   |                  |
|                  |                 | the actual root- |                  |
|                  |                 | finding          |                  |
+------------------+-----------------+------------------+------------------+
| implicit_output  | OT_INT          | Index of the     | casadi::Rootfind |
|                  |                 | output that      | er               |
|                  |                 | corresponds to   |                  |
|                  |                 | the actual root- |                  |
|                  |                 | finding          |                  |
+------------------+-----------------+------------------+------------------+
| jacobian_functio | OT_FUNCTION     | Function object  | casadi::Rootfind |
| n                |                 | for calculating  | er               |
|                  |                 | the Jacobian     |                  |
|                  |                 | (autogenerated   |                  |
|                  |                 | by default)      |                  |
+------------------+-----------------+------------------+------------------+
| linear_solver    | OT_STRING       | User-defined     | casadi::Rootfind |
|                  |                 | linear solver    | er               |
|                  |                 | class. Needed    |                  |
|                  |                 | for              |                  |
|                  |                 | sensitivities.   |                  |
+------------------+-----------------+------------------+------------------+
| linear_solver_op | OT_DICT         | Options to be    | casadi::Rootfind |
| tions            |                 | passed to the    | er               |
|                  |                 | linear solver.   |                  |
+------------------+-----------------+------------------+------------------+
| monitor          | OT_STRINGVECTOR | Set of user      | casadi::OracleFu |
|                  |                 | problem          | nction           |
|                  |                 | functions to be  |                  |
|                  |                 | monitored        |                  |
+------------------+-----------------+------------------+------------------+
| specific_options | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | specific auto-   | nction           |
|                  |                 | generated        |                  |
|                  |                 | functions,       |                  |
|                  |                 | overwriting the  |                  |
|                  |                 | defaults from    |                  |
|                  |                 | common_options.  |                  |
|                  |                 | Nested           |                  |
|                  |                 | dictionary.      |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: rootfinder_impl.hpp ";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::checkArg(const std::vector<
M > &arg, bool hcat=false) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::sx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(int nfwd) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::Rootfinder::get_n_out() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::hasFullJacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, int order, bool
tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::tang_sx(int iind=0, int
oind=0) "

[INTERNAL]  Tangent expression.

";

%feature("docstring")  casadi::FunctionInternal::gradient(int iind, int
oind) "

[INTERNAL]  Return gradient function.

";

%feature("docstring")  casadi::FunctionInternal::log(const std::string &msg)
const  "

[INTERNAL]  Log the status of the solver.

";

%feature("docstring")  casadi::FunctionInternal::log(const std::string &fcn,
const std::string &msg) const  "

[INTERNAL]  Log the status of the solver, function given.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsityGen(int iind,
int oind, bool symmetric, int gr_i=1, int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FunctionInternal::hess_sx(int iind=0, int
oind=0) "

[INTERNAL]  Hessian expression.

";

%feature("docstring")  casadi::FunctionInternal::hasDerivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInput(int k) const
"

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::print(std::ostream &stream)
const override "

[INTERNAL]  Print.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::replaceFwdSeed(const
std::vector< std::vector< M > > &fseed) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::OracleFunction::jit_dependencies(const
std::string &fname) override "

[INTERNAL]  JIT for dependencies.

";

%feature("docstring")  casadi::Rootfinder::type_name() const override "

[INTERNAL]  Get type name.

";

%feature("docstring") casadi::Rootfinder::_eval "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring") casadi::Rootfinder::_eval "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring") casadi::Rootfinder::_eval "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(int iind,
int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::FunctionInternal::tangent(int iind, int oind)
"

[INTERNAL]  Return tangent function.

";

%feature("docstring")  casadi::FunctionInternal::getFullJacobian(const
std::string &name, const std::vector< std::string > &i_names, const
std::vector< std::string > &o_names, const Dict &opts) "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::OracleFunction::print_fstats(const
OracleMemory *m) const  "

[INTERNAL]  Print statistics.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::OracleFunction::create_function(const
std::string &fname, const std::vector< std::string > &s_in, const
std::vector< std::string > &s_out, const Function::AuxOut
&aux=Function::AuxOut()) "

[INTERNAL]  Create an oracle function

";

%feature("docstring")  casadi::FunctionInternal::size2_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::fullJacobian() "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::Rootfinder::get_sparsity_in(int i) override "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(int ind) const
"

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(const
std::string &iname) const  "

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::addDependency(CodeGenerator
&g) const  "

[INTERNAL]  Add a dependent function.

";

%feature("docstring")  casadi::PluginInterface< Rootfinder  >::plugin_name()
const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::map_mx(const std::vector<
std::vector< MX > > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::map_mx(const std::vector<
MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::print_free(std::ostream
&stream) const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::FunctionInternal::checkRes(const std::vector<
M > &res) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

";

%feature("docstring")  casadi::FunctionInternal::generateMeta(CodeGenerator
&g, const std::string &fname) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInputReal(int k)
const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring") casadi::Rootfinder::_get_stats "

[INTERNAL]  Get all statistics

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::OracleFunction::has_function(const
std::string &fname) const override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::mx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::getTangent(const
std::string &name, int iind, int oind, const Dict &opts) "

[INTERNAL]  Return tangent function.

";

%feature("docstring")  casadi::OracleFunction::get_stats(void *mem) const
override "

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOutput(int k)
const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::grad_sx(int iind=0, int
oind=0) "

[INTERNAL]  Gradient expression.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOperation(int k)
const  "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::FunctionInternal::size_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::Rootfinder::get_n_forward() const override "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::FunctionInternal::jac_sx(int iind=0, int
oind=0, const Dict &opts=Dict()) "

[INTERNAL]  Jacobian expression.

";

%feature("docstring")  casadi::FunctionInternal::repr(std::ostream &stream)
const override "

[INTERNAL]  Print.

";

%feature("docstring")
casadi::FunctionInternal::generateFunction(CodeGenerator &g, const
std::string &fname, bool decl_static) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring") casadi::Rootfinder::_set_temp "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::Rootfinder::has_spfwd() const override "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::name() const  "

[INTERNAL]  Name of the function.

";

%feature("docstring")  casadi::Rootfinder::get_forward(const std::string
&name, int nfwd, const std::vector< std::string > &i_names, const
std::vector< std::string > &o_names, const Dict &opts) const override "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::Rootfinder::set_work(void *mem, const double
**&arg, double **&res, int *&iw, double *&w) const override "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::OracleFunction::set_temp(void *mem, const
double **arg, double **res, int *iw, double *w) const override "

[INTERNAL]  Set the work vectors.

";

%feature("docstring")  casadi::Rootfinder::get_options() const override "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::FunctionInternal::symbolicFwdSeed(int nfwd,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::hessian(int iind, int oind)
"

[INTERNAL]  Return Hessian function.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(int ind) const
"

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(const
std::string &iname) const  "

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::Rootfinder::eval(void *mem, const double
**arg, double **res, int *iw, double *w) const override "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::name_in(int ind) const  "

[INTERNAL]  Get input scheme name by index.

";

%feature("docstring")  casadi::Rootfinder::eval_forward(const std::vector<
MX > &arg, const std::vector< MX > &res, const std::vector< std::vector< MX
> > &fseed, std::vector< std::vector< MX > > &fsens, bool always_inline,
bool never_inline) const  "

[INTERNAL]  Create call to (cached) derivative function, forward mode.

";

%feature("docstring")  casadi::FunctionInternal::eval_name() const  "

[INTERNAL]  Get name of the evaluation function.

";

%feature("docstring")  casadi::FunctionInternal::matchingRes(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

";

%feature("docstring")  casadi::OracleFunction::generate_dependencies(const
std::string &fname, const Dict &opts) const override "

[INTERNAL]  Export / Generate C code for the generated functions.

";

%feature("docstring")  casadi::Rootfinder::get_reverse(const std::string
&name, int nadj, const std::vector< std::string > &i_names, const
std::vector< std::string > &o_names, const Dict &opts) const override "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::FunctionInternal::verbose() const  "

[INTERNAL]  Verbose mode?

";

%feature("docstring")  casadi::Rootfinder::eval_reverse(const std::vector<
MX > &arg, const std::vector< MX > &res, const std::vector< std::vector< MX
> > &aseed, std::vector< std::vector< MX > > &asens, bool always_inline,
bool never_inline) const  "

[INTERNAL]  Create call to (cached) derivative function, reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::getAlgorithmSize() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::getJacobian(const
std::string &name, int iind, int oind, bool compact, bool symmetric, const
Dict &opts) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::getPartition(int iind, int
oind, Sparsity &D1, Sparsity &D2, bool compact, bool symmetric, bool
allow_forward, bool allow_reverse) "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";


// File: classcasadi_1_1RungeKutta.xml
%feature("docstring") casadi::RungeKutta::_set_temp "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::Integrator::rx() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::rz() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::getFullJacobian(const
std::string &name, const std::vector< std::string > &i_names, const
std::vector< std::string > &o_names, const Dict &opts) "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::RungeKutta::~RungeKutta "

[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::OracleFunction::generate_dependencies(const
std::string &fname, const Dict &opts) const override "

[INTERNAL]  Export / Generate C code for the generated functions.

";

%feature("docstring")  casadi::Integrator::rq() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::rp() const  "

[INTERNAL] ";

%feature("docstring")  casadi::OracleFunction::jit_dependencies(const
std::string &fname) override "

[INTERNAL]  JIT for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::Integrator::aug_fwd(int nfwd) const  "

[INTERNAL]  Generate a augmented DAE system with nfwd forward sensitivities.

";

%feature("docstring")  casadi::Integrator::get_n_forward() const override "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(int ind) const
"

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(const
std::string &iname) const  "

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring") casadi::RungeKutta::_setup "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOutput(int k)
const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::Integrator::has_spfwd() const override "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::grad_sx(int iind=0, int
oind=0) "

[INTERNAL]  Gradient expression.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::setJacobian(const Function
&jac, int iind, int oind, bool compact) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::OracleFunction::expand() "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::replaceRes(const
std::vector< M > &res) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::replaceAdjSeed(const
std::vector< std::vector< M > > &aseed) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::Integrator::print_stats(IntegratorMemory
*mem, std::ostream &stream) const  "

[INTERNAL]  Print solver statistics.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(int nadj,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::Integrator::setStopTime(IntegratorMemory
*mem, double tf) const  "

[INTERNAL]  Set stop time for the integration.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::Integrator::get_n_in() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::n_mem() const  "

[INTERNAL]  Maximum number of memory objects.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::FunctionInternal::log(const std::string &msg)
const  "

[INTERNAL]  Log the status of the solver.

";

%feature("docstring")  casadi::FunctionInternal::log(const std::string &fcn,
const std::string &msg) const  "

[INTERNAL]  Log the status of the solver, function given.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FixedStepIntegrator::getExplicit() const  "

[INTERNAL]  Get explicit dynamics.

";

%feature("docstring")
casadi::FunctionInternal::generateDeclarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::generateMeta(CodeGenerator
&g, const std::string &fname) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::Integrator::get_name_in(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::getAlgorithmSize() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::reverse(int nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, int *iw, SXElem *w, int mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::Integrator::sp_jac_rdae() "

[INTERNAL]  Create sparsity pattern of the extended Jacobian (backward
problem)

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::Integrator::p() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::q() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::t() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::jac_sx(int iind=0, int
oind=0, const Dict &opts=Dict()) "

[INTERNAL]  Jacobian expression.

";

%feature("docstring")  casadi::Integrator::z() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::mx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::Integrator::x() const  "

[INTERNAL] ";

%feature("docstring")  casadi::OracleFunction::get_function() const override
"

[INTERNAL] ";

%feature("docstring")  casadi::OracleFunction::get_function(const
std::string &name) const override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FunctionInternal::size_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::getHessian(int iind, int
oind) "

[INTERNAL]  Return Hessian function.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::FixedStepIntegrator::free_memory(void *mem)
const override "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FixedStepIntegrator::init_memory(void *mem)
const override "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::getGradient(const
std::string &name, int iind, int oind, const Dict &opts) "

[INTERNAL]  Return gradient function.

";

%feature("docstring")  casadi::FunctionInternal::matchingRes(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

";

%feature("docstring")  casadi::OracleFunction::finalize(const Dict &opts)
override "

[INTERNAL]  Finalize initialization.

";

%feature("docstring")  casadi::FunctionInternal::verbose() const  "

[INTERNAL]  Verbose mode?

";

%feature("docstring")  casadi::FunctionInternal::jac_mx(int iind=0, int
oind=0, const Dict &opts=Dict()) "

[INTERNAL]  Jacobian expression.

";

%feature("docstring")  casadi::OracleFunction::create_function(const
std::string &fname, const std::vector< std::string > &s_in, const
std::vector< std::string > &s_out, const Function::AuxOut
&aux=Function::AuxOut()) "

[INTERNAL]  Create an oracle function

";

%feature("docstring")  casadi::Integrator::get_forward(const std::string
&name, int nfwd, const std::vector< std::string > &i_names, const
std::vector< std::string > &o_names, const Dict &opts) const override "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::FunctionInternal::symbolicFwdSeed(int nfwd,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")
casadi::FunctionInternal::generateFunction(CodeGenerator &g, const
std::string &fname, bool decl_static) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::FunctionInternal::map_mx(const std::vector<
std::vector< MX > > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::map_mx(const std::vector<
MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::repr(std::ostream &stream)
const override "

[INTERNAL]  Print.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOperation(int k)
const  "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::replaceFwdSeed(const
std::vector< std::vector< M > > &fseed) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(int iind,
int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(int nadj) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::Integrator::type_name() const override "

[INTERNAL]  Get type name.

";

%feature("docstring")  casadi::Integrator::sp_rev(bvec_t **arg, bvec_t
**res, int *iw, bvec_t *w, int mem) const override "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::Integrator::getDerivativeOptions(bool fwd)
const  "

[INTERNAL]  Set solver specific options to generated augmented integrators.

";

%feature("docstring")  casadi::Integrator::sp_fwd(const bvec_t **arg, bvec_t
**res, int *iw, bvec_t *w, int mem) const override "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::FunctionInternal::getTangent(const
std::string &name, int iind, int oind, const Dict &opts) "

[INTERNAL]  Return tangent function.

";

%feature("docstring")  casadi::FunctionInternal::tangent(int iind, int oind)
"

[INTERNAL]  Return tangent function.

";

%feature("docstring") casadi::RungeKutta::_call "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring") casadi::RungeKutta::_call "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::Integrator::sp_jac_dae() "

[INTERNAL]  Create sparsity pattern of the extended Jacobian (forward
problem)

";

%feature("docstring")  casadi::OracleFunction::print_fstats(const
OracleMemory *m) const  "

[INTERNAL]  Print statistics.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::tang_sx(int iind=0, int
oind=0) "

[INTERNAL]  Tangent expression.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(int iind, int
oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::hessian(int iind, int oind)
"

[INTERNAL]  Return Hessian function.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::RungeKutta::setupFG() override "

[INTERNAL]  Setup F and G.

";

%feature("docstring")  casadi::FunctionInternal::forward(int nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::grad_mx(int iind=0, int
oind=0) "

[INTERNAL]  Gradient expression.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::Integrator::get_n_reverse() const override "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::FunctionInternal::checkArg(const std::vector<
M > &arg, bool hcat=false) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FixedStepIntegrator::retreat(IntegratorMemory
*mem, double t, double *rx, double *rz, double *rq) const override "

[INTERNAL]  Retreat solution in time.

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::addShorthand(CodeGenerator
&g, const std::string &name) const  "

[INTERNAL]  Generate shorthand macro.

";

%feature("docstring")  casadi::FunctionInternal::getWorkSize() const  "

[INTERNAL]  Get the length of the work vector.

";

%feature("docstring")  casadi::FixedStepIntegrator::advance(IntegratorMemory
*mem, double t, double *x, double *z, double *q) const override "

[INTERNAL]  Advance solution in time.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInput(int k) const
"

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::replaceArg(const
std::vector< M > &arg, bool hcat=false) const  "

[INTERNAL]  Replace 0-by-0 inputs.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::sx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, int order, bool
tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FixedStepIntegrator::alloc_memory() const
override "

[INTERNAL]  Create memory block.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::FunctionInternal::n_in() const  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring") casadi::RungeKutta "

[INTERNAL]  'rk' plugin for Integrator

Fixed-step explicit Runge-Kutta integrator for ODEs Currently implements
RK4.

The method is still under development

Joel Andersson

C++ includes: runge_kutta.hpp ";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsityGen(int iind,
int oind, bool symmetric, int gr_i=1, int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::Integrator::get_sparsity_in(int i) override "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::sx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::tang_mx(int iind=0, int
oind=0) "

[INTERNAL]  Tangent expression.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::FunctionInternal::getPartition(int iind, int
oind, Sparsity &D1, Sparsity &D2, bool compact, bool symmetric, bool
allow_forward, bool allow_reverse) "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::hasFullJacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::hasDerivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::jacobian(int iind, int
oind, bool compact, bool symmetric) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::OracleFunction::oracle() const override "

[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::RungeKutta::_get_stats "

[INTERNAL]  Get all statistics

";

%feature("docstring")  casadi::FunctionInternal::checkInputs() const  "

[INTERNAL]  Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::FunctionInternal::generateBody(CodeGenerator
&g) const  "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::clear_memory() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn, const std::string &fname, bool jit=false) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::FixedStepIntegrator::getExplicitB() const  "

[INTERNAL]  Get explicit dynamics (backward problem)

";

%feature("docstring")  casadi::OracleFunction::set_temp(void *mem, const
double **arg, double **res, int *iw, double *w) const override "

[INTERNAL]  Set the work vectors.

";

%feature("docstring")  casadi::FunctionInternal::checkRes(const std::vector<
M > &res) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

";

%feature("docstring")  casadi::FunctionInternal::set_jac_sparsity(const
Sparsity &sp, int iind, int oind, bool compact) "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::n_out() const  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::Integrator::get_name_out(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::RungeKutta::RungeKutta(const std::string
&name, const Function &dae) "

[INTERNAL]  Constructor.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::FunctionInternal::getJacobian(const
std::string &name, int iind, int oind, bool compact, bool symmetric, const
Dict &opts) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FixedStepIntegrator::get_options() const
override "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< int > &order_in, const std::vector< int >
&order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::Integrator::get_n_out() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::RungeKutta::_set_work "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::OracleFunction::monitored(const std::string
&name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::FunctionInternal::hess_sx(int iind=0, int
oind=0) "

[INTERNAL]  Hessian expression.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::RungeKutta::_eval "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring") casadi::RungeKutta::_eval "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring") casadi::RungeKutta::_eval "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(int ind) const
"

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(const
std::string &iname) const  "

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(int nfwd) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::FunctionInternal::name() const  "

[INTERNAL]  Name of the function.

";

%feature("docstring")  casadi::Integrator::has_sprev() const override "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::addDependency(CodeGenerator
&g) const  "

[INTERNAL]  Add a dependent function.

";

%feature("docstring")  casadi::FixedStepIntegrator::resetB(IntegratorMemory
*mem, double t, const double *rx, const double *rz, const double *rp) const
override "

[INTERNAL]  Reset the backward problem and take time to tf.

";

%feature("docstring")  casadi::FunctionInternal::print_free(std::ostream
&stream) const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::simple(const double *arg,
double *res) const  "

[INTERNAL]  Evaluate numerically, simplied syntax.

";

%feature("docstring")  casadi::Integrator::eval(void *mem, const double
**arg, double **res, int *iw, double *w) const override "

[INTERNAL]  evaluate

";

%feature("docstring")  casadi::OracleFunction::calc_function(OracleMemory
*m, const std::string &fcn, const double *const *arg=0) const  "

[INTERNAL] ";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::eval_name() const  "

[INTERNAL]  Get name of the evaluation function.

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::Integrator::get_reverse(const std::string
&name, int nadj, const std::vector< std::string > &i_names, const
std::vector< std::string > &o_names, const Dict &opts) const override "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::FunctionInternal::gradient(int iind, int
oind) "

[INTERNAL]  Return gradient function.

";

%feature("docstring")  casadi::FunctionInternal::name_out(int ind) const  "

[INTERNAL]  Get output scheme name by index.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInputReal(int k)
const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FixedStepIntegrator::reset(IntegratorMemory
*mem, double t, const double *x, const double *z, const double *p) const
override "

[INTERNAL]  Reset the forward problem.

";

%feature("docstring")  casadi::FunctionInternal::name_in(int ind) const  "

[INTERNAL]  Get input scheme name by index.

";

%feature("docstring")  casadi::FunctionInternal::fullJacobian() "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::RungeKutta::init(const Dict &opts) override "

[INTERNAL]  Initialize stage.

";

%feature("docstring")  casadi::Integrator::get_sparsity_out(int i) override
"

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::OracleFunction::has_function(const
std::string &fname) const override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::simplifiedCall() const  "

[INTERNAL]  Use simplified signature.

";

%feature("docstring")  casadi::FunctionInternal::size_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::OracleFunction::get_stats(void *mem) const
override "

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::Integrator::aug_adj(int nadj) const  "

[INTERNAL]  Generate a augmented DAE system with nadj adjoint sensitivities.

";

%feature("docstring")  casadi::FunctionInternal::matchingArg(const
std::vector< M > &arg, bool hcat=false) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::RungeKutta::plugin_name() const override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::FunctionInternal::default_in(int ind) const
"

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::construct(const Dict &opts)
"

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::FunctionInternal::symbolicOutput(const
std::vector< MX > &arg) "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::print(std::ostream &stream)
const override "

[INTERNAL]  Print.

";


// File: classcasadi_1_1Scpgen.xml
%feature("docstring")  casadi::FunctionInternal::getWorkSize() const  "

[INTERNAL]  Get the length of the work vector.

";

%feature("docstring")  casadi::FunctionInternal::setJacobian(const Function
&jac, int iind, int oind, bool compact) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::Nlpsol::get_name_in(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::getFullJacobian(const
std::string &name, const std::vector< std::string > &i_names, const
std::vector< std::string > &o_names, const Dict &opts) "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, int order, bool
tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::Scpgen::primalInfeasibility(ScpgenMemory *m)
const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::getAtomicOperation(int k)
const  "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::OracleFunction::create_function(const
std::string &fname, const std::vector< std::string > &s_in, const
std::vector< std::string > &s_out, const Function::AuxOut
&aux=Function::AuxOut()) "

[INTERNAL]  Create an oracle function

";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn, const std::string &fname, bool jit=false) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::FunctionInternal::symbolicOutput(const
std::vector< MX > &arg) "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::Scpgen::eval_vec(ScpgenMemory *m) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::size1_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::Scpgen::eval_res(ScpgenMemory *m) const  "

[INTERNAL] ";

%feature("docstring")
casadi::FunctionInternal::generateDeclarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(int nadj,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::FunctionInternal::print(std::ostream &stream)
const override "

[INTERNAL]  Print.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::replaceArg(const
std::vector< M > &arg, bool hcat=false) const  "

[INTERNAL]  Replace 0-by-0 inputs.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::Scpgen::eval_mat(ScpgenMemory *m) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::FunctionInternal::generateBody(CodeGenerator
&g) const  "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(int nfwd) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::addDependency(CodeGenerator
&g) const  "

[INTERNAL]  Add a dependent function.

";

%feature("docstring")  casadi::Nlpsol::getReducedHessian() "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::repr(std::ostream &stream)
const override "

[INTERNAL]  Print.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::checkArg(const std::vector<
M > &arg, bool hcat=false) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::mx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::OracleFunction::expand() "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_reverse(const
std::string &name, int nadj, const std::vector< std::string > &i_names,
const std::vector< std::string > &o_names, const Dict &opts) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::OracleFunction::oracle() const override "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FunctionInternal::getAlgorithmSize() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::OracleFunction::set_temp(void *mem, const
double **arg, double **res, int *iw, double *w) const override "

[INTERNAL]  Set the work vectors.

";

%feature("docstring")  casadi::FunctionInternal::matchingArg(const
std::vector< M > &arg, bool hcat=false) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::print_free(std::ostream
&stream) const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::FunctionInternal::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::jac_sx(int iind=0, int
oind=0, const Dict &opts=Dict()) "

[INTERNAL]  Jacobian expression.

";

%feature("docstring")  casadi::FunctionInternal::tang_mx(int iind=0, int
oind=0) "

[INTERNAL]  Tangent expression.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring") casadi::Scpgen::Scpgen(const std::string &name, const
Function &nlp) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::FunctionInternal::generateMeta(CodeGenerator
&g, const std::string &fname) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::OracleFunction::finalize(const Dict &opts)
override "

[INTERNAL]  Finalize initialization.

";

%feature("docstring")  casadi::FunctionInternal::hess_sx(int iind=0, int
oind=0) "

[INTERNAL]  Hessian expression.

";

%feature("docstring")  casadi::Nlpsol::get_n_out() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::sp_fwd(const bvec_t **arg,
bvec_t **res, int *iw, bvec_t *w, int mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::Nlpsol::integer_support() const  "

[INTERNAL]  Can discrete variables be treated.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::simple(const double *arg,
double *res) const  "

[INTERNAL]  Evaluate numerically, simplied syntax.

";

%feature("docstring")  casadi::FunctionInternal::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FunctionInternal::reverse(int nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::Scpgen::set_work(void *mem, const double
**&arg, double **&res, int *&iw, double *&w) const override "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::Nlpsol::checkInputs(void *mem) const  "

[INTERNAL]  Check if the inputs correspond to a well-posed problem.

";

%feature("docstring")  casadi::FunctionInternal::checkInputs() const  "

[INTERNAL]  Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::FunctionInternal::map_mx(const std::vector<
std::vector< MX > > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::map_mx(const std::vector<
MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring") casadi::Scpgen::_get_stats "

[INTERNAL]  Get all statistics

";

%feature("docstring")  casadi::FunctionInternal::simplifiedCall() const  "

[INTERNAL]  Use simplified signature.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::sx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::get_forward(const
std::string &name, int nfwd, const std::vector< std::string > &i_names,
const std::vector< std::string > &o_names, const Dict &opts) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::Scpgen::free_memory(void *mem) const override
"

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::tangent(int iind, int oind)
"

[INTERNAL]  Return tangent function.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInput(int k) const
"

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(int iind,
int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, int *iw, SXElem *w, int mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::size_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::Nlpsol::default_in(int ind) const override "

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::name_in(int ind) const  "

[INTERNAL]  Get input scheme name by index.

";

%feature("docstring")  casadi::FunctionInternal::hessian(int iind, int oind)
"

[INTERNAL]  Return Hessian function.

";

%feature("docstring")  casadi::FunctionInternal::log(const std::string &msg)
const  "

[INTERNAL]  Log the status of the solver.

";

%feature("docstring")  casadi::FunctionInternal::log(const std::string &fcn,
const std::string &msg) const  "

[INTERNAL]  Log the status of the solver, function given.

";

%feature("docstring")  casadi::FunctionInternal::symbolicFwdSeed(int nfwd,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::Scpgen::solve(void *mem) const override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::mx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::Scpgen::dualInfeasibility(ScpgenMemory *m)
const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::addShorthand(CodeGenerator
&g, const std::string &name) const  "

[INTERNAL]  Generate shorthand macro.

";

%feature("docstring")  casadi::FunctionInternal::get_n_reverse() const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< int > &order_in, const std::vector< int >
&order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::Scpgen::solve_qp(ScpgenMemory *m) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::FunctionInternal::replaceAdjSeed(const
std::vector< std::vector< M > > &aseed) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(int ind) const
"

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(const
std::string &iname) const  "

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::Scpgen::eval_exp(ScpgenMemory *m) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::sp_rev(bvec_t **arg, bvec_t
**res, int *iw, bvec_t *w, int mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::FunctionInternal::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::Nlpsol::type_name() const override "

[INTERNAL]  Get type name.

";

%feature("docstring")  casadi::Scpgen::regularize(ScpgenMemory *m) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring") casadi::Scpgen::_set_temp "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring") casadi::Scpgen::_setup "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::name() const  "

[INTERNAL]  Name of the function.

";

%feature("docstring")  casadi::FunctionInternal::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::FunctionInternal::forward(int nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::Scpgen::get_options() const override "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::Nlpsol::get_name_out(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::n_in() const  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::jacobian(int iind, int
oind, bool compact, bool symmetric) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(int nadj) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::Scpgen::init_memory(void *mem) const override
"

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::grad_sx(int iind=0, int
oind=0) "

[INTERNAL]  Gradient expression.

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::Nlpsol::get_sparsity_in(int i) override "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::Nlpsol::get_sparsity_out(int i) override "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::OracleFunction::generate_dependencies(const
std::string &fname, const Dict &opts) const override "

[INTERNAL]  Export / Generate C code for the generated functions.

";

%feature("docstring")  casadi::OracleFunction::monitored(const std::string
&name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::OracleFunction::get_function() const override
"

[INTERNAL] ";

%feature("docstring")  casadi::OracleFunction::get_function(const
std::string &name) const override "

[INTERNAL] ";

%feature("docstring") casadi::Scpgen::_eval "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring") casadi::Scpgen::_eval "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring") casadi::Scpgen::_eval "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::OracleFunction::print_fstats(const
OracleMemory *m) const  "

[INTERNAL]  Print statistics.

";

%feature("docstring")  casadi::FunctionInternal::gradient(int iind, int
oind) "

[INTERNAL]  Return gradient function.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(int ind) const
"

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(const
std::string &iname) const  "

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::FunctionInternal::getHessian(int iind, int
oind) "

[INTERNAL]  Return Hessian function.

";

%feature("docstring")  casadi::Nlpsol::eval(void *mem, const double **arg,
double **res, int *iw, double *w) const override "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(int iind, int
oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::Nlpsol::setOptionsFromFile(const std::string
&file) "

[INTERNAL]  Read options from parameter xml.

";

%feature("docstring")  casadi::FunctionInternal::n_mem() const  "

[INTERNAL]  Maximum number of memory objects.

";

%feature("docstring")  casadi::FunctionInternal::checkRes(const std::vector<
M > &res) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::OracleFunction::jit_dependencies(const
std::string &fname) override "

[INTERNAL]  JIT for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::size_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Scpgen::_set_work "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOutput(int k)
const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::verbose() const  "

[INTERNAL]  Verbose mode?

";

%feature("docstring")  casadi::FunctionInternal::getJacobian(const
std::string &name, int iind, int oind, bool compact, bool symmetric, const
Dict &opts) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::eval_name() const  "

[INTERNAL]  Get name of the evaluation function.

";

%feature("docstring")  casadi::Scpgen::line_search(ScpgenMemory *m, int
&ls_iter, bool &ls_success) const  "

[INTERNAL] ";

%feature("docstring")  casadi::Scpgen::alloc_memory() const override "

[INTERNAL]  Create memory block.

";

%feature("docstring") casadi::Scpgen::_call "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring") casadi::Scpgen::_call "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::FunctionInternal::replaceRes(const
std::vector< M > &res) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::hasFullJacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::n_out() const  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::FunctionInternal::clear_memory() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::set_jac_sparsity(const
Sparsity &sp, int iind, int oind, bool compact) "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::Scpgen::get_stats(void *mem) const override "

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::OracleFunction::calc_function(OracleMemory
*m, const std::string &fcn, const double *const *arg=0) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::fullJacobian() "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::tang_sx(int iind=0, int
oind=0) "

[INTERNAL]  Tangent expression.

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::replaceFwdSeed(const
std::vector< std::vector< M > > &fseed) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::jac_mx(int iind=0, int
oind=0, const Dict &opts=Dict()) "

[INTERNAL]  Jacobian expression.

";

%feature("docstring")  casadi::FunctionInternal::getGradient(const
std::string &name, int iind, int oind, const Dict &opts) "

[INTERNAL]  Return gradient function.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::Scpgen::plugin_name() const override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::getAtomicInputReal(int k)
const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::getTangent(const
std::string &name, int iind, int oind, const Dict &opts) "

[INTERNAL]  Return tangent function.

";

%feature("docstring")  casadi::Scpgen::init(const Dict &opts) override "

[INTERNAL]  Initialize.

";

%feature("docstring")
casadi::FunctionInternal::generateFunction(CodeGenerator &g, const
std::string &fname, bool decl_static) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::FunctionInternal::name_out(int ind) const  "

[INTERNAL]  Get output scheme name by index.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::getPartition(int iind, int
oind, Sparsity &D1, Sparsity &D2, bool compact, bool symmetric, bool
allow_forward, bool allow_reverse) "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::grad_mx(int iind=0, int
oind=0) "

[INTERNAL]  Gradient expression.

";

%feature("docstring")  casadi::FunctionInternal::construct(const Dict &opts)
"

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::Scpgen "

'scpgen' plugin for Nlpsol

A structure-exploiting sequential quadratic programming (to be come
sequential convex programming) method for nonlinear programming.

>List of available options

+-----------------------+-----------------+--------------------------------+
|          Id           |      Type       |          Description           |
+=======================+=================+================================+
| beta                  | OT_DOUBLE       | Line-search parameter,         |
|                       |                 | restoration factor of stepsize |
+-----------------------+-----------------+--------------------------------+
| c1                    | OT_DOUBLE       | Armijo condition, coefficient  |
|                       |                 | of decrease in merit           |
+-----------------------+-----------------+--------------------------------+
| codegen               | OT_BOOL         | C-code generation              |
+-----------------------+-----------------+--------------------------------+
| hessian_approximation | OT_STRING       | gauss-newton|exact             |
+-----------------------+-----------------+--------------------------------+
| lbfgs_memory          | OT_INT          | Size of L-BFGS memory.         |
+-----------------------+-----------------+--------------------------------+
| max_iter              | OT_INT          | Maximum number of SQP          |
|                       |                 | iterations                     |
+-----------------------+-----------------+--------------------------------+
| max_iter_ls           | OT_INT          | Maximum number of linesearch   |
|                       |                 | iterations                     |
+-----------------------+-----------------+--------------------------------+
| merit_memsize         | OT_INT          | Size of memory to store        |
|                       |                 | history of merit function      |
|                       |                 | values                         |
+-----------------------+-----------------+--------------------------------+
| merit_start           | OT_DOUBLE       | Lower bound for the merit      |
|                       |                 | function parameter             |
+-----------------------+-----------------+--------------------------------+
| name_x                | OT_STRINGVECTOR | Names of the variables.        |
+-----------------------+-----------------+--------------------------------+
| print_header          | OT_BOOL         | Print the header with problem  |
|                       |                 | statistics                     |
+-----------------------+-----------------+--------------------------------+
| print_x               | OT_INTVECTOR    | Which variables to print.      |
+-----------------------+-----------------+--------------------------------+
| qpsol                 | OT_STRING       | The QP solver to be used by    |
|                       |                 | the SQP method                 |
+-----------------------+-----------------+--------------------------------+
| qpsol_options         | OT_DICT         | Options to be passed to the QP |
|                       |                 | solver                         |
+-----------------------+-----------------+--------------------------------+
| reg_threshold         | OT_DOUBLE       | Threshold for the              |
|                       |                 | regularization.                |
+-----------------------+-----------------+--------------------------------+
| regularize            | OT_BOOL         | Automatic regularization of    |
|                       |                 | Lagrange Hessian.              |
+-----------------------+-----------------+--------------------------------+
| tol_du                | OT_DOUBLE       | Stopping criterion for dual    |
|                       |                 | infeasability                  |
+-----------------------+-----------------+--------------------------------+
| tol_pr                | OT_DOUBLE       | Stopping criterion for primal  |
|                       |                 | infeasibility                  |
+-----------------------+-----------------+--------------------------------+
| tol_pr_step           | OT_DOUBLE       | Stopping criterion for the     |
|                       |                 | step size                      |
+-----------------------+-----------------+--------------------------------+
| tol_reg               | OT_DOUBLE       | Stopping criterion for         |
|                       |                 | regularization                 |
+-----------------------+-----------------+--------------------------------+

Joel Andersson, Attila Kozma and Joris Gillis

>List of available options

+-------------------+-----------------+-------------------+----------------+
|        Id         |      Type       |    Description    |    Used in     |
+===================+=================+===================+================+
| beta              | OT_DOUBLE       | Line-search       | casadi::Scpgen |
|                   |                 | parameter,        |                |
|                   |                 | restoration       |                |
|                   |                 | factor of         |                |
|                   |                 | stepsize          |                |
+-------------------+-----------------+-------------------+----------------+
| c1                | OT_DOUBLE       | Armijo condition, | casadi::Scpgen |
|                   |                 | coefficient of    |                |
|                   |                 | decrease in merit |                |
+-------------------+-----------------+-------------------+----------------+
| codegen           | OT_BOOL         | C-code generation | casadi::Scpgen |
+-------------------+-----------------+-------------------+----------------+
| discrete          | OT_BOOLVECTOR   | Indicates which   | casadi::Nlpsol |
|                   |                 | of the variables  |                |
|                   |                 | are discrete,     |                |
|                   |                 | i.e. integer-     |                |
|                   |                 | valued            |                |
+-------------------+-----------------+-------------------+----------------+
| eval_errors_fatal | OT_BOOL         | When errors occur | casadi::Nlpsol |
|                   |                 | during evaluation |                |
|                   |                 | of f,g,...,stop   |                |
|                   |                 | the iterations    |                |
+-------------------+-----------------+-------------------+----------------+
| expand            | OT_BOOL         | Replace MX with   | casadi::Nlpsol |
|                   |                 | SX expressions in |                |
|                   |                 | problem           |                |
|                   |                 | formulation       |                |
|                   |                 | [false]           |                |
+-------------------+-----------------+-------------------+----------------+
| hessian_approxima | OT_STRING       | gauss-            | casadi::Scpgen |
| tion              |                 | newton|exact      |                |
+-------------------+-----------------+-------------------+----------------+
| ignore_check_vec  | OT_BOOL         | If set to true,   | casadi::Nlpsol |
|                   |                 | the input shape   |                |
|                   |                 | of F will not be  |                |
|                   |                 | checked.          |                |
+-------------------+-----------------+-------------------+----------------+
| iteration_callbac | OT_FUNCTION     | A function that   | casadi::Nlpsol |
| k                 |                 | will be called at |                |
|                   |                 | each iteration    |                |
|                   |                 | with the solver   |                |
|                   |                 | as input. Check   |                |
|                   |                 | documentation of  |                |
|                   |                 | Callback .        |                |
+-------------------+-----------------+-------------------+----------------+
| iteration_callbac | OT_BOOL         | If set to true,   | casadi::Nlpsol |
| k_ignore_errors   |                 | errors thrown by  |                |
|                   |                 | iteration_callbac |                |
|                   |                 | k will be         |                |
|                   |                 | ignored.          |                |
+-------------------+-----------------+-------------------+----------------+
| iteration_callbac | OT_INT          | Only call the     | casadi::Nlpsol |
| k_step            |                 | callback function |                |
|                   |                 | every few         |                |
|                   |                 | iterations.       |                |
+-------------------+-----------------+-------------------+----------------+
| lbfgs_memory      | OT_INT          | Size of L-BFGS    | casadi::Scpgen |
|                   |                 | memory.           |                |
+-------------------+-----------------+-------------------+----------------+
| max_iter          | OT_INT          | Maximum number of | casadi::Scpgen |
|                   |                 | SQP iterations    |                |
+-------------------+-----------------+-------------------+----------------+
| max_iter_ls       | OT_INT          | Maximum number of | casadi::Scpgen |
|                   |                 | linesearch        |                |
|                   |                 | iterations        |                |
+-------------------+-----------------+-------------------+----------------+
| merit_memsize     | OT_INT          | Size of memory to | casadi::Scpgen |
|                   |                 | store history of  |                |
|                   |                 | merit function    |                |
|                   |                 | values            |                |
+-------------------+-----------------+-------------------+----------------+
| merit_start       | OT_DOUBLE       | Lower bound for   | casadi::Scpgen |
|                   |                 | the merit         |                |
|                   |                 | function          |                |
|                   |                 | parameter         |                |
+-------------------+-----------------+-------------------+----------------+
| name_x            | OT_STRINGVECTOR | Names of the      | casadi::Scpgen |
|                   |                 | variables.        |                |
+-------------------+-----------------+-------------------+----------------+
| print_header      | OT_BOOL         | Print the header  | casadi::Scpgen |
|                   |                 | with problem      |                |
|                   |                 | statistics        |                |
+-------------------+-----------------+-------------------+----------------+
| print_x           | OT_INTVECTOR    | Which variables   | casadi::Scpgen |
|                   |                 | to print.         |                |
+-------------------+-----------------+-------------------+----------------+
| qpsol             | OT_STRING       | The QP solver to  | casadi::Scpgen |
|                   |                 | be used by the    |                |
|                   |                 | SQP method        |                |
+-------------------+-----------------+-------------------+----------------+
| qpsol_options     | OT_DICT         | Options to be     | casadi::Scpgen |
|                   |                 | passed to the QP  |                |
|                   |                 | solver            |                |
+-------------------+-----------------+-------------------+----------------+
| reg_threshold     | OT_DOUBLE       | Threshold for the | casadi::Scpgen |
|                   |                 | regularization.   |                |
+-------------------+-----------------+-------------------+----------------+
| regularize        | OT_BOOL         | Automatic         | casadi::Scpgen |
|                   |                 | regularization of |                |
|                   |                 | Lagrange Hessian. |                |
+-------------------+-----------------+-------------------+----------------+
| tol_du            | OT_DOUBLE       | Stopping          | casadi::Scpgen |
|                   |                 | criterion for     |                |
|                   |                 | dual              |                |
|                   |                 | infeasability     |                |
+-------------------+-----------------+-------------------+----------------+
| tol_pr            | OT_DOUBLE       | Stopping          | casadi::Scpgen |
|                   |                 | criterion for     |                |
|                   |                 | primal            |                |
|                   |                 | infeasibility     |                |
+-------------------+-----------------+-------------------+----------------+
| tol_pr_step       | OT_DOUBLE       | Stopping          | casadi::Scpgen |
|                   |                 | criterion for the |                |
|                   |                 | step size         |                |
+-------------------+-----------------+-------------------+----------------+
| tol_reg           | OT_DOUBLE       | Stopping          | casadi::Scpgen |
|                   |                 | criterion for     |                |
|                   |                 | regularization    |                |
+-------------------+-----------------+-------------------+----------------+
| verbose_init      | OT_BOOL         | Print out timing  | casadi::Nlpsol |
|                   |                 | information about |                |
|                   |                 | the different     |                |
|                   |                 | stages of         |                |
|                   |                 | initialization    |                |
+-------------------+-----------------+-------------------+----------------+
| warn_initial_boun | OT_BOOL         | Warn if the       | casadi::Nlpsol |
| ds                |                 | initial guess     |                |
|                   |                 | does not satisfy  |                |
|                   |                 | LBX and UBX       |                |
+-------------------+-----------------+-------------------+----------------+

Diagrams
--------



C++ includes: scpgen.hpp ";

%feature("docstring")  casadi::FunctionInternal::hasDerivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::Nlpsol::get_n_in() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::Scpgen::~Scpgen "

[INTERNAL] ";

%feature("docstring")  casadi::Scpgen::getConic() const  "

[INTERNAL]  Access qpsol.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsityGen(int iind,
int oind, bool symmetric, int gr_i=1, int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FunctionInternal::matchingRes(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

";

%feature("docstring")  casadi::OracleFunction::has_function(const
std::string &fname) const override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_n_forward() const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::Scpgen::printIteration(ScpgenMemory *m,
std::ostream &stream) const  "

[INTERNAL] ";

%feature("docstring")  casadi::Scpgen::printIteration(ScpgenMemory *m,
std::ostream &stream, int iter, double obj, double pr_inf, double du_inf,
double reg, int ls_trials, bool ls_success) const  "

[INTERNAL] ";


// File: classcasadi_1_1SetNonzeros.xml


// File: classcasadi_1_1SetNonzerosSlice.xml


// File: classcasadi_1_1SetNonzerosSlice2.xml


// File: classcasadi_1_1SetNonzerosVector.xml


// File: classcasadi_1_1SharedObject.xml
%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=casadi::userOut(), bool trailing_newline=true) const  "

Print a description of the object.

";

%feature("docstring")  casadi::SharedObject::is_null() const  "

Is a null pointer?

";

%feature("docstring")  casadi::PrintableObject< SharedObject
>::getRepresentation() const "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=casadi::userOut()) const  "

[INTERNAL]  Print the pointer to the internal class

";

%feature("docstring") casadi::SharedObject "

SharedObject implements a reference counting framework similar for efficient
and easily-maintained memory management.

To use the class, both the SharedObject class (the public class), and the
SharedObjectInternal class (the internal class) must be inherited from. It
can be done in two different files and together with memory management, this
approach provides a clear distinction of which methods of the class are to
be considered \"public\", i.e. methods for public use that can be considered
to remain over time with small changes, and the internal memory.

When interfacing a software, which typically includes including some header
file, this is best done only in the file where the internal class is
defined, to avoid polluting the global namespace and other side effects.

The default constructor always means creating a null pointer to an internal
class only. To allocate an internal class (this works only when the internal
class isn't abstract), use the constructor with arguments.

The copy constructor and the assignment operator perform shallow copies
only, to make a deep copy you must use the clone method explicitly. This
will give a shared pointer instance.

In an inheritance hierarchy, you can cast down automatically, e.g. (
SXFunction is a child class of Function): SXFunction derived(...); Function
base = derived;

To cast up, use the shared_cast template function, which works analogously
to dynamic_cast, static_cast, const_cast etc, e.g.: SXFunction derived(...);
Function base = derived; SXFunction derived_from_base =
shared_cast<SXFunction>(base);

A failed shared_cast will result in a null pointer (cf. dynamic_cast)

Joel Andersson

C++ includes: shared_object.hpp ";

%feature("docstring") casadi::SharedObject::__hash__ "

Returns a number that is unique for a given Node. If the Object does not
point to any node, \"0\" is returned.

";

%feature("docstring")  casadi::SharedObject::repr(std::ostream
&stream=casadi::userOut(), bool trailing_newline=true) const  "

Print a representation of the object.

";

%feature("docstring")  casadi::PrintableObject< SharedObject
>::getDescription() const "

Return a string with a description (for SWIG)

";


// File: classcasadi_1_1ShellCompiler.xml
%feature("docstring")  casadi::ImporterInternal::read_external(const
std::string &sym, bool inlined, std::istream &file, int &offset) "

[INTERNAL]  Get an external function declaration.

";

%feature("docstring")  casadi::ImporterInternal::construct(const Dict &opts)
"

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::ImporterInternal::to_text(const std::string
&cmd, int ind=-1) const  "

[INTERNAL]  Get entry as a text.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::ShellCompiler::get_options() const override "

[INTERNAL]  Options.

";

%feature("docstring") casadi::ShellCompiler::~ShellCompiler "

[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::ShellCompiler::get_function(const std::string
&symname) override "

[INTERNAL]  Get a function pointer for numerical evaluation.

";

%feature("docstring")  casadi::ShellCompiler::init(const Dict &opts)
override "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::ImporterInternal::get_meta(const std::string
&cmd, int ind=-1) const  "

[INTERNAL]  Get entry as a text.

";

%feature("docstring")  casadi::ImporterInternal::has_function(const
std::string &symname) const  "

[INTERNAL]  Get a function pointer for numerical evaluation.

";

%feature("docstring")  casadi::ImporterInternal::inlined(const std::string
&symname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::ImporterInternal::body(const std::string
&symname) const  "

[INTERNAL]  Get the function body, if inlined.

";

%feature("docstring") casadi::ShellCompiler "

'shell' plugin for Importer

Joel Andersson  Interface to the JIT compiler SHELL

>List of available options

+----------------+-----------------+---------------------------------------+
|       Id       |      Type       |              Description              |
+================+=================+=======================================+
| cleanup        | OT_BOOL         | Cleanup temporary files when          |
|                |                 | unloading. Default: true              |
+----------------+-----------------+---------------------------------------+
| compiler       | OT_STRING       | Compiler command                      |
+----------------+-----------------+---------------------------------------+
| compiler_flags | OT_STRINGVECTOR | Alias for 'compiler_flags'            |
+----------------+-----------------+---------------------------------------+
| compiler_setup | OT_STRING       | Compiler setup command. Intended to   |
|                |                 | be fixed. The 'flag' option is the    |
|                |                 | prefered way to set custom flags.     |
+----------------+-----------------+---------------------------------------+
| flags          | OT_STRINGVECTOR | Compile flags for the JIT compiler.   |
|                |                 | Default: None                         |
+----------------+-----------------+---------------------------------------+
| folder         | OT_STRING       | Folder to put temporary objects in.   |
+----------------+-----------------+---------------------------------------+
| linker         | OT_STRING       | Linker command                        |
+----------------+-----------------+---------------------------------------+
| linker_flags   | OT_STRINGVECTOR | Linker flags for the JIT compiler.    |
|                |                 | Default: None                         |
+----------------+-----------------+---------------------------------------+
| linker_setup   | OT_STRING       | Linker setup command. Intended to be  |
|                |                 | fixed. The 'flag' option is the       |
|                |                 | prefered way to set custom flags.     |
+----------------+-----------------+---------------------------------------+

>List of available options

+----------------+-----------------+-------------------+-------------------+
|       Id       |      Type       |    Description    |      Used in      |
+================+=================+===================+===================+
| cleanup        | OT_BOOL         | Cleanup temporary | casadi::ShellComp |
|                |                 | files when        | iler              |
|                |                 | unloading.        |                   |
|                |                 | Default: true     |                   |
+----------------+-----------------+-------------------+-------------------+
| compiler       | OT_STRING       | Compiler command  | casadi::ShellComp |
|                |                 |                   | iler              |
+----------------+-----------------+-------------------+-------------------+
| compiler_flags | OT_STRINGVECTOR | Alias for         | casadi::ShellComp |
|                |                 | 'compiler_flags'  | iler              |
+----------------+-----------------+-------------------+-------------------+
| compiler_setup | OT_STRING       | Compiler setup    | casadi::ShellComp |
|                |                 | command. Intended | iler              |
|                |                 | to be fixed. The  |                   |
|                |                 | 'flag' option is  |                   |
|                |                 | the prefered way  |                   |
|                |                 | to set custom     |                   |
|                |                 | flags.            |                   |
+----------------+-----------------+-------------------+-------------------+
| flags          | OT_STRINGVECTOR | Compile flags for | casadi::ShellComp |
|                |                 | the JIT compiler. | iler              |
|                |                 | Default: None     |                   |
+----------------+-----------------+-------------------+-------------------+
| folder         | OT_STRING       | Folder to put     | casadi::ShellComp |
|                |                 | temporary objects | iler              |
|                |                 | in.               |                   |
+----------------+-----------------+-------------------+-------------------+
| linker         | OT_STRING       | Linker command    | casadi::ShellComp |
|                |                 |                   | iler              |
+----------------+-----------------+-------------------+-------------------+
| linker_flags   | OT_STRINGVECTOR | Linker flags for  | casadi::ShellComp |
|                |                 | the JIT compiler. | iler              |
|                |                 | Default: None     |                   |
+----------------+-----------------+-------------------+-------------------+
| linker_setup   | OT_STRING       | Linker setup      | casadi::ShellComp |
|                |                 | command. Intended | iler              |
|                |                 | to be fixed. The  |                   |
|                |                 | 'flag' option is  |                   |
|                |                 | the prefered way  |                   |
|                |                 | to set custom     |                   |
|                |                 | flags.            |                   |
+----------------+-----------------+-------------------+-------------------+
| verbose        | OT_BOOL         | Verbose           | casadi::ImporterI |
|                |                 | evaluation  for   | nternal           |
|                |                 | debugging         |                   |
+----------------+-----------------+-------------------+-------------------+

Diagrams
--------



C++ includes: shell_compiler.hpp ";

%feature("docstring")  casadi::ImporterInternal::read_meta(std::istream
&file, int &offset) "

[INTERNAL]  Get meta information.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::ImporterInternal::can_have_meta() const  "

[INTERNAL]  Can meta information be read?

";

%feature("docstring")  casadi::ImporterInternal::has_meta(const std::string
&cmd, int ind=-1) const  "

[INTERNAL]  Does an entry exist?

";

%feature("docstring")  casadi::ImporterInternal::repr(std::ostream &stream)
const override "

[INTERNAL]  Print representation.

";

%feature("docstring")  casadi::ShellCompiler::plugin_name() const override "

[INTERNAL]  Get name of plugin.

";

%feature("docstring")  casadi::ImporterInternal::print(std::ostream &stream)
const override "

[INTERNAL]  Print.

";

%feature("docstring") casadi::ShellCompiler::ShellCompiler(const std::string
&name) "

[INTERNAL]  Constructor.

";


// File: classcasadi_1_1SimplifiedExternal.xml
%feature("docstring")  casadi::FunctionInternal::hessian(int iind, int oind)
"

[INTERNAL]  Return Hessian function.

";

%feature("docstring")  casadi::SimplifiedExternal::get_sparsity_out(int i)
override "

[INTERNAL]  Retreive sparsities.

";

%feature("docstring")  casadi::FunctionInternal::get_stats(void *mem) const
"

[INTERNAL]  Get all statistics

";

%feature("docstring")  casadi::FunctionInternal::jac_sx(int iind=0, int
oind=0, const Dict &opts=Dict()) "

[INTERNAL]  Jacobian expression.

";

%feature("docstring")  casadi::FunctionInternal::fullJacobian() "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::grad_sx(int iind=0, int
oind=0) "

[INTERNAL]  Gradient expression.

";

%feature("docstring") casadi::SimplifiedExternal::_call "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring") casadi::SimplifiedExternal::_call "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::symbolicOutput(const
std::vector< MX > &arg) "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(int ind) const
"

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(const
std::string &iname) const  "

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring")  casadi::FunctionInternal::print(std::ostream &stream)
const override "

[INTERNAL]  Print.

";

%feature("docstring")  casadi::FunctionInternal::log(const std::string &msg)
const  "

[INTERNAL]  Log the status of the solver.

";

%feature("docstring")  casadi::FunctionInternal::log(const std::string &fcn,
const std::string &msg) const  "

[INTERNAL]  Log the status of the solver, function given.

";

%feature("docstring")
casadi::FunctionInternal::generateDeclarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::size_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::getPartition(int iind, int
oind, Sparsity &D1, Sparsity &D2, bool compact, bool symmetric, bool
allow_forward, bool allow_reverse) "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::replaceArg(const
std::vector< M > &arg, bool hcat=false) const  "

[INTERNAL]  Replace 0-by-0 inputs.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::alloc_memory() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::FunctionInternal::getTangent(const
std::string &name, int iind, int oind, const Dict &opts) "

[INTERNAL]  Return tangent function.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsityGen(int iind,
int oind, bool symmetric, int gr_i=1, int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::replaceRes(const
std::vector< M > &res) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::reverse(int nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInputReal(int k)
const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::External::get_name_out(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::External::get_n_in() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(int nadj) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::hasDerivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::numel_out(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::External::generateFunction(CodeGenerator &g,
const std::string &fname, bool decl_static) const override "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(int nfwd) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::tangent(int iind, int oind)
"

[INTERNAL]  Return tangent function.

";

%feature("docstring") casadi::SimplifiedExternal::_set_work "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::jit_dependencies(const
std::string &fname) "

[INTERNAL]   Jit dependencies.

";

%feature("docstring")  casadi::External::get_forward(const std::string
&name, int nfwd, const std::vector< std::string > &i_names, const
std::vector< std::string > &o_names, const Dict &opts) const override "

[INTERNAL]  Forward mode derivatives.

";

%feature("docstring") casadi::SimplifiedExternal "

[INTERNAL] C++ includes: external_impl.hpp ";

%feature("docstring")  casadi::FunctionInternal::getAlgorithmSize() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::size_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, int order, bool
tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::verbose() const  "

[INTERNAL]  Verbose mode?

";

%feature("docstring")  casadi::External::get_n_out() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring") casadi::SimplifiedExternal::SimplifiedExternal(const
std::string &name, const Importer &li) "

[INTERNAL]  Constructor.

";

%feature("docstring")  casadi::FunctionInternal::set_jac_sparsity(const
Sparsity &sp, int iind, int oind, bool compact) "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::jac_mx(int iind=0, int
oind=0, const Dict &opts=Dict()) "

[INTERNAL]  Jacobian expression.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, int *iw, SXElem *w, int mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::External::hasFullJacobian() const override "

[INTERNAL]  Full Jacobian.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::FunctionInternal::getGradient(const
std::string &name, int iind, int oind, const Dict &opts) "

[INTERNAL]  Return gradient function.

";

%feature("docstring")  casadi::FunctionInternal::print_free(std::ostream
&stream) const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::FunctionInternal::getWorkSize() const  "

[INTERNAL]  Get the length of the work vector.

";

%feature("docstring")  casadi::External::getFullJacobian(const std::string
&name, const std::vector< std::string > &i_names, const std::vector<
std::string > &o_names, const Dict &opts) override "

[INTERNAL]  Full Jacobian.

";

%feature("docstring")  casadi::FunctionInternal::name_in(int ind) const  "

[INTERNAL]  Get input scheme name by index.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::finalize(const Dict &opts)
"

[INTERNAL]  Finalize the object creation This function, which visits the
class hierarchy in reverse order is run after init() has been completed.

";

%feature("docstring")  casadi::FunctionInternal::gradient(int iind, int
oind) "

[INTERNAL]  Return gradient function.

";

%feature("docstring")  casadi::FunctionInternal::symbolicFwdSeed(int nfwd,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::FunctionInternal::tang_mx(int iind=0, int
oind=0) "

[INTERNAL]  Tangent expression.

";

%feature("docstring")  casadi::FunctionInternal::n_in() const  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::n_mem() const  "

[INTERNAL]  Maximum number of memory objects.

";

%feature("docstring")  casadi::FunctionInternal::hess_sx(int iind=0, int
oind=0) "

[INTERNAL]  Hessian expression.

";

%feature("docstring")  casadi::FunctionInternal::sp_rev(bvec_t **arg, bvec_t
**res, int *iw, bvec_t *w, int mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::External::get_n_forward() const override "

[INTERNAL]  Forward mode derivatives.

";

%feature("docstring")  casadi::SimplifiedExternal::init(const Dict &opts)
override "

[INTERNAL]  Initialize.

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring") casadi::SimplifiedExternal::_setup "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::addShorthand(CodeGenerator
&g, const std::string &name) const  "

[INTERNAL]  Generate shorthand macro.

";

%feature("docstring")  casadi::FunctionInternal::generateBody(CodeGenerator
&g) const  "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInput(int k) const
"

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::External::get_n_reverse() const override "

[INTERNAL]  Reverse mode derivatives.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::replaceAdjSeed(const
std::vector< std::vector< M > > &aseed) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::eval_name() const  "

[INTERNAL]  Get name of the evaluation function.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring") casadi::SimplifiedExternal::_get_stats "

[INTERNAL]  Get all statistics

";

%feature("docstring")  casadi::FunctionInternal::set_temp(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::simple(const double *arg,
double *res) const  "

[INTERNAL]  Evaluate numerically, simplied syntax.

";

%feature("docstring")  casadi::FunctionInternal::free_memory(void *mem)
const  "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::init_memory(void *mem)
const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::External::type_name() const override "

[INTERNAL]  Get type name.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::map_mx(const std::vector<
std::vector< MX > > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::map_mx(const std::vector<
MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(int iind, int
oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOperation(int k)
const  "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::construct(const Dict &opts)
"

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::FunctionInternal::sp_fwd(const bvec_t **arg,
bvec_t **res, int *iw, bvec_t *w, int mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::FunctionInternal::generateMeta(CodeGenerator
&g, const std::string &fname) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::External::get_reverse(const std::string
&name, int nadj, const std::vector< std::string > &i_names, const
std::vector< std::string > &o_names, const Dict &opts) const override "

[INTERNAL]  Reverse mode derivatives.

";

%feature("docstring")  casadi::FunctionInternal::jacobian(int iind, int
oind, bool compact, bool symmetric) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::checkRes(const std::vector<
M > &res) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

";

%feature("docstring") casadi::SimplifiedExternal::_set_temp "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::External::get_name_in(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::getJacobian(const
std::string &name, int iind, int oind, bool compact, bool symmetric, const
Dict &opts) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(int iind,
int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::SimplifiedExternal::_eval "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring") casadi::SimplifiedExternal::_eval "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring") casadi::SimplifiedExternal::_eval "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::tang_sx(int iind=0, int
oind=0) "

[INTERNAL]  Tangent expression.

";

%feature("docstring")  casadi::FunctionInternal::replaceFwdSeed(const
std::vector< std::vector< M > > &fseed) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::matchingArg(const
std::vector< M > &arg, bool hcat=false) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::SimplifiedExternal::get_sparsity_in(int i)
override "

[INTERNAL]  Retreive sparsities.

";

%feature("docstring")  casadi::External::addDependency(CodeGenerator &g)
const override "

[INTERNAL]  Add a dependent function.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::grad_mx(int iind=0, int
oind=0) "

[INTERNAL]  Gradient expression.

";

%feature("docstring") casadi::SimplifiedExternal::~SimplifiedExternal "

[INTERNAL]  Destructor.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::External::codegen_name(const CodeGenerator
&g) const override "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::External::factory(const std::string &name,
const std::vector< std::string > &s_in, const std::vector< std::string >
&s_out, const Function::AuxOut &aux, const Dict &opts) const override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< int > &order_in, const std::vector< int >
&order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::FunctionInternal::name_out(int ind) const  "

[INTERNAL]  Get output scheme name by index.

";

%feature("docstring")  casadi::SimplifiedExternal::simplifiedCall() const
override "

[INTERNAL]  Use simplified signature.

";

%feature("docstring")  casadi::FunctionInternal::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::FunctionInternal::checkInputs() const  "

[INTERNAL]  Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOutput(int k)
const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::getHessian(int iind, int
oind) "

[INTERNAL]  Return Hessian function.

";

%feature("docstring")  casadi::FunctionInternal::checkArg(const std::vector<
M > &arg, bool hcat=false) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::eval(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::get_function() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::name() const  "

[INTERNAL]  Name of the function.

";

%feature("docstring")  casadi::FunctionInternal::matchingRes(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::repr(std::ostream &stream)
const override "

[INTERNAL]  Print.

";

%feature("docstring")  casadi::FunctionInternal::n_out() const  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::default_in(int ind) const
"

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::forward(int nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(int ind) const
"

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(const
std::string &iname) const  "

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::FunctionInternal::setJacobian(const Function
&jac, int iind, int oind, bool compact) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::get_options() const  "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(int nadj,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FunctionInternal::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::clear_memory() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";


// File: classcasadi_1_1Slice.xml
%feature("docstring")  casadi::Slice::is_scalar(int len) const  "

Is the slice a scalar.

";

%feature("docstring")  casadi::Slice::scalar(int len) const  "

Get scalar (if is_scalar)

";

%feature("docstring")  casadi::Slice::print(std::ostream
&stream=casadi::userOut(), bool trailing_newline=true) const  "

Print a description of the object.

";

%feature("docstring") casadi::Slice "

Class representing a Slice.

Note that Python or Octave do not need to use this class. They can just use
slicing utility from the host language ( M[0:6] in Python, M(1:7) )

C++ includes: slice.hpp ";

%feature("docstring")  casadi::Slice::all(int len, bool ind1=false) const  "

Get a vector of indices.

";

%feature("docstring")  casadi::Slice::all(const Slice &outer, int len) const
"

Get a vector of indices (nested slice)

";

%feature("docstring") casadi::Slice::Slice() "

Default constructor - all elements.

";

%feature("docstring") casadi::Slice::Slice(int i, bool ind1=false) "

A single element (explicit to avoid ambiguity with IM overload.

";

%feature("docstring") casadi::Slice::Slice(int start, int stop, int step=1)
"

A slice.

";

%feature("docstring")  casadi::PrintableObject< Slice  >::getDescription()
const "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::Slice::repr(std::ostream
&stream=casadi::userOut(), bool trailing_newline=true) const  "

Print a representation of the object.

";

%feature("docstring")  casadi::PrintableObject< Slice
>::getRepresentation() const "

Return a string with a representation (for SWIG)

";


// File: classcasadi_1_1SlicotDple.xml
%feature("docstring")  casadi::Dple::get_name_out(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::tangent(int iind, int oind)
"

[INTERNAL]  Return tangent function.

";

%feature("docstring")  casadi::FunctionInternal::n_mem() const  "

[INTERNAL]  Maximum number of memory objects.

";

%feature("docstring")  casadi::SlicotDple::init(const Dict &opts) override "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::simple(const double *arg,
double *res) const  "

[INTERNAL]  Evaluate numerically, simplied syntax.

";

%feature("docstring")  casadi::FunctionInternal::tang_mx(int iind=0, int
oind=0) "

[INTERNAL]  Tangent expression.

";

%feature("docstring")  casadi::FunctionInternal::set_temp(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::replaceRes(const
std::vector< M > &res) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInput(int k) const
"

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::hasFullJacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::sp_rev(bvec_t **arg, bvec_t
**res, int *iw, bvec_t *w, int mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::SlicotDple::plugin_name() const override "

[INTERNAL] ";

%feature("docstring")  casadi::Dple::get_sparsity_in(int i) override "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::Dple::get_forward(const std::string &name,
int nfwd, const std::vector< std::string > &i_names, const std::vector<
std::string > &o_names, const Dict &opts) const override "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::FunctionInternal::checkInputs() const  "

[INTERNAL]  Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::Dple::get_n_in() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::grad_mx(int iind=0, int
oind=0) "

[INTERNAL]  Gradient expression.

";

%feature("docstring")  casadi::FunctionInternal::print_free(std::ostream
&stream) const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::replaceArg(const
std::vector< M > &arg, bool hcat=false) const  "

[INTERNAL]  Replace 0-by-0 inputs.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::mx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::FunctionInternal::getAlgorithmSize() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(int ind) const
"

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(const
std::string &iname) const  "

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::SlicotDple::alloc_memory() const override "

[INTERNAL]  Create memory block.

";

%feature("docstring") casadi::SlicotDple::_eval "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring") casadi::SlicotDple::_eval "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring") casadi::SlicotDple::_eval "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::replaceAdjSeed(const
std::vector< std::vector< M > > &aseed) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::SlicotDple::eval(void *mem, const double
**arg, double **res, int *iw, double *w) const override "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::Dple::get_n_out() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::fullJacobian() "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, int order, bool
tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::SlicotDple::SlicotDple() "

[INTERNAL]  Constructor.

";

%feature("docstring") casadi::SlicotDple::SlicotDple(const std::string
&name, const SpDict &st) "

[INTERNAL]  Constructor.

Parameters:
-----------

st:

Problem structure.

";

%feature("docstring") casadi::SlicotDple::SlicotDple(const SpDict &st) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::construct(const Dict &opts)
"

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::FunctionInternal::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::SlicotDple::_set_work "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring") casadi::SlicotDple "

'slicot' plugin for Dple

An efficient solver for Discrete Periodic Lyapunov Equations using SLICOT

An efficient solver for Discrete Periodic Lyapunov Equations using SLICOT

Uses Periodic Schur Decomposition ('psd') and does not assume positive
definiteness. Based on Periodic Lyapunov equations: some applications and
new algorithms. Int. J. Control, vol. 67, pp. 69-87, 1997.

Overview of the method: J. Gillis Practical Methods for Approximate Robust
Periodic Optimal Control ofNonlinear Mechanical Systems, PhD Thesis,
KULeuven, 2015

>List of available options

+-----------------------+-----------+--------------------------------------+
|          Id           |   Type    |             Description              |
+=======================+===========+======================================+
| linear_solver         | OT_STRING | User-defined linear solver class.    |
|                       |           | Needed for sensitivities.            |
+-----------------------+-----------+--------------------------------------+
| linear_solver_options | OT_DICT   | Options to be passed to the linear   |
|                       |           | solver.                              |
+-----------------------+-----------+--------------------------------------+
| psd_num_zero          | OT_DOUBLE | Numerical zero used in Periodic      |
|                       |           | Schur decomposition with slicot.This |
|                       |           | option is needed when your systems   |
|                       |           | has Floquet multiplierszero or close |
|                       |           | to zero                              |
+-----------------------+-----------+--------------------------------------+

Joris Gillis

>List of available options

+--------------------+-----------+--------------------+--------------------+
|         Id         |   Type    |    Description     |      Used in       |
+====================+===========+====================+====================+
| const_dim          | OT_BOOL   | Assume constant    | casadi::Dple       |
|                    |           | dimension of P     |                    |
+--------------------+-----------+--------------------+--------------------+
| eps_unstable       | OT_DOUBLE | A margin for       | casadi::Dple       |
|                    |           | unstability        |                    |
|                    |           | detection          |                    |
+--------------------+-----------+--------------------+--------------------+
| error_unstable     | OT_BOOL   | Throw an exception | casadi::Dple       |
|                    |           | when it is         |                    |
|                    |           | detected that      |                    |
|                    |           | Product(A_i,       |                    |
|                    |           | i=N..1)has         |                    |
|                    |           | eigenvalues        |                    |
|                    |           | greater than       |                    |
|                    |           | 1-eps_unstable     |                    |
+--------------------+-----------+--------------------+--------------------+
| linear_solver      | OT_STRING | User-defined       | casadi::SlicotDple |
|                    |           | linear solver      |                    |
|                    |           | class. Needed for  |                    |
|                    |           | sensitivities.     |                    |
+--------------------+-----------+--------------------+--------------------+
| linear_solver_opti | OT_DICT   | Options to be      | casadi::SlicotDple |
| ons                |           | passed to the      |                    |
|                    |           | linear solver.     |                    |
+--------------------+-----------+--------------------+--------------------+
| pos_def            | OT_BOOL   | Assume P positive  | casadi::Dple       |
|                    |           | definite           |                    |
+--------------------+-----------+--------------------+--------------------+
| psd_num_zero       | OT_DOUBLE | Numerical zero     | casadi::SlicotDple |
|                    |           | used in Periodic   |                    |
|                    |           | Schur              |                    |
|                    |           | decomposition with |                    |
|                    |           | slicot.This option |                    |
|                    |           | is needed when     |                    |
|                    |           | your systems has   |                    |
|                    |           | Floquet            |                    |
|                    |           | multiplierszero or |                    |
|                    |           | close to zero      |                    |
+--------------------+-----------+--------------------+--------------------+

Diagrams
--------



C++ includes: slicot_dple.hpp ";

%feature("docstring")  casadi::FunctionInternal::map_mx(const std::vector<
std::vector< MX > > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::map_mx(const std::vector<
MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOperation(int k)
const  "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")
casadi::FunctionInternal::generateFunction(CodeGenerator &g, const
std::string &fname, bool decl_static) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::getGradient(const
std::string &name, int iind, int oind, const Dict &opts) "

[INTERNAL]  Return gradient function.

";

%feature("docstring")  casadi::Dple::type_name() const override "

[INTERNAL]  Get type name.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::log(const std::string &msg)
const  "

[INTERNAL]  Log the status of the solver.

";

%feature("docstring")  casadi::FunctionInternal::log(const std::string &fcn,
const std::string &msg) const  "

[INTERNAL]  Log the status of the solver, function given.

";

%feature("docstring")  casadi::FunctionInternal::size_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::FunctionInternal::setJacobian(const Function
&jac, int iind, int oind, bool compact) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::sp_fwd(const bvec_t **arg,
bvec_t **res, int *iw, bvec_t *w, int mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::FunctionInternal::simplifiedCall() const  "

[INTERNAL]  Use simplified signature.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, int *iw, SXElem *w, int mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::FunctionInternal::hess_sx(int iind=0, int
oind=0) "

[INTERNAL]  Hessian expression.

";

%feature("docstring")  casadi::FunctionInternal::generateBody(CodeGenerator
&g) const  "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::replaceFwdSeed(const
std::vector< std::vector< M > > &fseed) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring") casadi::SlicotDple::_set_temp "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(int iind,
int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::repr(std::ostream &stream)
const override "

[INTERNAL]  Print.

";

%feature("docstring")  casadi::FunctionInternal::addDependency(CodeGenerator
&g) const  "

[INTERNAL]  Add a dependent function.

";

%feature("docstring")  casadi::FunctionInternal::matchingRes(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

";

%feature("docstring")  casadi::SlicotDple::free_memory(void *mem) const
override "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::getJacobian(const
std::string &name, int iind, int oind, bool compact, bool symmetric, const
Dict &opts) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::getTangent(const
std::string &name, int iind, int oind, const Dict &opts) "

[INTERNAL]  Return tangent function.

";

%feature("docstring") casadi::SlicotDple::_setup "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::jac_sx(int iind=0, int
oind=0, const Dict &opts=Dict()) "

[INTERNAL]  Jacobian expression.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOutput(int k)
const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::SlicotDple::~SlicotDple "

[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::FunctionInternal::symbolicFwdSeed(int nfwd,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::print(std::ostream &stream)
const override "

[INTERNAL]  Print.

";

%feature("docstring")
casadi::FunctionInternal::generateDeclarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::getFullJacobian(const
std::string &name, const std::vector< std::string > &i_names, const
std::vector< std::string > &o_names, const Dict &opts) "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::name_out(int ind) const  "

[INTERNAL]  Get output scheme name by index.

";

%feature("docstring")  casadi::FunctionInternal::symbolicOutput(const
std::vector< MX > &arg) "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::Dple::get_name_in(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::addShorthand(CodeGenerator
&g, const std::string &name) const  "

[INTERNAL]  Generate shorthand macro.

";

%feature("docstring")  casadi::FunctionInternal::jit_dependencies(const
std::string &fname) "

[INTERNAL]   Jit dependencies.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::Dple::get_n_reverse() const override "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::SlicotDple::get_options() const override "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::sx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(int iind, int
oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::clear_memory() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(int nadj,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::Dple::get_n_forward() const override "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::SlicotDple::_call "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring") casadi::SlicotDple::_call "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::Dple::get_sparsity_out(int i) override "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::size_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::eval_name() const  "

[INTERNAL]  Get name of the evaluation function.

";

%feature("docstring")  casadi::FunctionInternal::checkRes(const std::vector<
M > &res) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

";

%feature("docstring")  casadi::FunctionInternal::get_function() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::sx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::FunctionInternal::generateMeta(CodeGenerator
&g, const std::string &fname) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::hessian(int iind, int oind)
"

[INTERNAL]  Return Hessian function.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(int nfwd) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::SlicotDple::init_memory(void *mem) const
override "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::jac_mx(int iind=0, int
oind=0, const Dict &opts=Dict()) "

[INTERNAL]  Jacobian expression.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::FunctionInternal::get_stats(void *mem) const
"

[INTERNAL]  Get all statistics

";

%feature("docstring")  casadi::FunctionInternal::verbose() const  "

[INTERNAL]  Verbose mode?

";

%feature("docstring")  casadi::FunctionInternal::checkArg(const std::vector<
M > &arg, bool hcat=false) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FunctionInternal::reverse(int nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::n_in() const  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring")  casadi::FunctionInternal::getWorkSize() const  "

[INTERNAL]  Get the length of the work vector.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::getHessian(int iind, int
oind) "

[INTERNAL]  Return Hessian function.

";

%feature("docstring")  casadi::FunctionInternal::gradient(int iind, int
oind) "

[INTERNAL]  Return gradient function.

";

%feature("docstring")  casadi::FunctionInternal::finalize(const Dict &opts)
"

[INTERNAL]  Finalize the object creation This function, which visits the
class hierarchy in reverse order is run after init() has been completed.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::forward(int nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::name_in(int ind) const  "

[INTERNAL]  Get input scheme name by index.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInputReal(int k)
const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::Dple::default_in(int ind) const override "

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::SlicotDple::set_work(void *mem, const double
**&arg, double **&res, int *&iw, double *&w) const override "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::hasDerivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(int nadj) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsityGen(int iind,
int oind, bool symmetric, int gr_i=1, int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FunctionInternal::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::SlicotDple::_get_stats "

[INTERNAL]  Get all statistics

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< int > &order_in, const std::vector< int >
&order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::jacobian(int iind, int
oind, bool compact, bool symmetric) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::tang_sx(int iind=0, int
oind=0) "

[INTERNAL]  Tangent expression.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::FunctionInternal::matchingArg(const
std::vector< M > &arg, bool hcat=false) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::grad_sx(int iind=0, int
oind=0) "

[INTERNAL]  Gradient expression.

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(int ind) const
"

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(const
std::string &iname) const  "

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::FunctionInternal::set_jac_sparsity(const
Sparsity &sp, int iind, int oind, bool compact) "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::getPartition(int iind, int
oind, Sparsity &D1, Sparsity &D2, bool compact, bool symmetric, bool
allow_forward, bool allow_reverse) "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::name() const  "

[INTERNAL]  Name of the function.

";

%feature("docstring")  casadi::FunctionInternal::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::n_out() const  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::Dple::get_reverse(const std::string &name,
int nadj, const std::vector< std::string > &i_names, const std::vector<
std::string > &o_names, const Dict &opts) const override "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";


// File: classcasadi_1_1SlicotExpm.xml
%feature("docstring")  casadi::FunctionInternal::gradient(int iind, int
oind) "

[INTERNAL]  Return gradient function.

";

%feature("docstring")  casadi::FunctionInternal::hasDerivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::Expm::get_n_reverse() const override "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::FunctionInternal::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::Expm::type_name() const override "

[INTERNAL]  Get type name.

";

%feature("docstring")  casadi::SlicotExpm::plugin_name() const override "

[INTERNAL] ";

%feature("docstring")  casadi::SlicotExpm::alloc_memory() const override "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::FunctionInternal::n_in() const  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::grad_sx(int iind=0, int
oind=0) "

[INTERNAL]  Gradient expression.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOperation(int k)
const  "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring") casadi::SlicotExpm::_get_stats "

[INTERNAL]  Get all statistics

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(int nadj) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::FunctionInternal::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::FunctionInternal::clear_memory() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInput(int k) const
"

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")
casadi::FunctionInternal::generateFunction(CodeGenerator &g, const
std::string &fname, bool decl_static) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::Expm::get_n_out() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::print(std::ostream &stream)
const override "

[INTERNAL]  Print.

";

%feature("docstring")  casadi::FunctionInternal::jac_sx(int iind=0, int
oind=0, const Dict &opts=Dict()) "

[INTERNAL]  Jacobian expression.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::grad_mx(int iind=0, int
oind=0) "

[INTERNAL]  Gradient expression.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(int ind) const
"

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(const
std::string &iname) const  "

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::FunctionInternal::n_out() const  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::SlicotExpm::free_memory(void *mem) const
override "

[INTERNAL]  Free memory block.

";

%feature("docstring") casadi::SlicotExpm::SlicotExpm() "

[INTERNAL]  Constructor.

";

%feature("docstring") casadi::SlicotExpm::SlicotExpm(const std::string
&name, const Sparsity &A) "

[INTERNAL]  Constructor.

Parameters:
-----------

st:

Problem structure.

";

%feature("docstring")  casadi::Expm::get_reverse(const std::string &name,
int nadj, const std::vector< std::string > &i_names, const std::vector<
std::string > &o_names, const Dict &opts) const override "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::Expm::get_options() const override "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::FunctionInternal::log(const std::string &msg)
const  "

[INTERNAL]  Log the status of the solver.

";

%feature("docstring")  casadi::FunctionInternal::log(const std::string &fcn,
const std::string &msg) const  "

[INTERNAL]  Log the status of the solver, function given.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::n_mem() const  "

[INTERNAL]  Maximum number of memory objects.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::hessian(int iind, int oind)
"

[INTERNAL]  Return Hessian function.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::SlicotExpm::_call "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring") casadi::SlicotExpm::_call "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::Expm::getJacSparsity(int iind, int oind, bool
symmetric) const override "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::finalize(const Dict &opts)
"

[INTERNAL]  Finalize the object creation This function, which visits the
class hierarchy in reverse order is run after init() has been completed.

";

%feature("docstring")  casadi::FunctionInternal::getTangent(const
std::string &name, int iind, int oind, const Dict &opts) "

[INTERNAL]  Return tangent function.

";

%feature("docstring")  casadi::FunctionInternal::name_in(int ind) const  "

[INTERNAL]  Get input scheme name by index.

";

%feature("docstring")  casadi::FunctionInternal::tangent(int iind, int oind)
"

[INTERNAL]  Return tangent function.

";

%feature("docstring")  casadi::FunctionInternal::simple(const double *arg,
double *res) const  "

[INTERNAL]  Evaluate numerically, simplied syntax.

";

%feature("docstring") casadi::SlicotExpm "

[INTERNAL]  'slicot' plugin for Expm

An efficient solver for Discrete Periodic Lyapunov Equations using SLICOT

Joris Gillis

C++ includes: slicot_expm.hpp ";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(int iind, int
oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::getFullJacobian(const
std::string &name, const std::vector< std::string > &i_names, const
std::vector< std::string > &o_names, const Dict &opts) "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::checkRes(const std::vector<
M > &res) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInputReal(int k)
const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::hasFullJacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::replaceRes(const
std::vector< M > &res) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::generateBody(CodeGenerator
&g) const  "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring")  casadi::FunctionInternal::print_free(std::ostream
&stream) const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::SlicotExpm::init(const Dict &opts) override "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::Expm::get_sparsity_out(int i) override "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::sp_fwd(const bvec_t **arg,
bvec_t **res, int *iw, bvec_t *w, int mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring") casadi::SlicotExpm::_set_temp "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::fullJacobian() "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::FunctionInternal::forward(int nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::symbolicOutput(const
std::vector< MX > &arg) "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::SlicotExpm::~SlicotExpm "

[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::SlicotExpm::init_memory(void *mem) const
override "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::verbose() const  "

[INTERNAL]  Verbose mode?

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(int nfwd) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::size_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring")  casadi::FunctionInternal::get_name_out(int i) "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::get_stats(void *mem) const
"

[INTERNAL]  Get all statistics

";

%feature("docstring")  casadi::FunctionInternal::simplifiedCall() const  "

[INTERNAL]  Use simplified signature.

";

%feature("docstring") casadi::SlicotExpm::_eval "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring") casadi::SlicotExpm::_eval "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring") casadi::SlicotExpm::_eval "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::Expm::get_n_forward() const override "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::getPartition(int iind, int
oind, Sparsity &D1, Sparsity &D2, bool compact, bool symmetric, bool
allow_forward, bool allow_reverse) "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::FunctionInternal::size_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::Expm::get_n_in() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::name() const  "

[INTERNAL]  Name of the function.

";

%feature("docstring")  casadi::FunctionInternal::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring") casadi::SlicotExpm::_setup "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::getHessian(int iind, int
oind) "

[INTERNAL]  Return Hessian function.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::SlicotExpm::set_work(void *mem, const double
**&arg, double **&res, int *&iw, double *&w) const override "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::Expm::get_forward(const std::string &name,
int nfwd, const std::vector< std::string > &i_names, const std::vector<
std::string > &o_names, const Dict &opts) const override "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::FunctionInternal::setJacobian(const Function
&jac, int iind, int oind, bool compact) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::tang_sx(int iind=0, int
oind=0) "

[INTERNAL]  Tangent expression.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsityGen(int iind,
int oind, bool symmetric, int gr_i=1, int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")
casadi::FunctionInternal::generateDeclarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(int ind) const
"

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(const
std::string &iname) const  "

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::hess_sx(int iind=0, int
oind=0) "

[INTERNAL]  Hessian expression.

";

%feature("docstring")  casadi::FunctionInternal::sx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::set_temp(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::matchingRes(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

";

%feature("docstring")  casadi::FunctionInternal::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< int > &order_in, const std::vector< int >
&order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::FunctionInternal::getGradient(const
std::string &name, int iind, int oind, const Dict &opts) "

[INTERNAL]  Return gradient function.

";

%feature("docstring")  casadi::FunctionInternal::checkArg(const std::vector<
M > &arg, bool hcat=false) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOutput(int k)
const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::symbolicFwdSeed(int nfwd,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, int *iw, SXElem *w, int mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::FunctionInternal::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::tang_mx(int iind=0, int
oind=0) "

[INTERNAL]  Tangent expression.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::set_jac_sparsity(const
Sparsity &sp, int iind, int oind, bool compact) "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::Expm::get_sparsity_in(int i) override "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::FunctionInternal::jacobian(int iind, int
oind, bool compact, bool symmetric) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::matchingArg(const
std::vector< M > &arg, bool hcat=false) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::replaceAdjSeed(const
std::vector< std::vector< M > > &aseed) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::get_function() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::addShorthand(CodeGenerator
&g, const std::string &name) const  "

[INTERNAL]  Generate shorthand macro.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::checkInputs() const  "

[INTERNAL]  Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::FunctionInternal::construct(const Dict &opts)
"

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::FunctionInternal::eval_name() const  "

[INTERNAL]  Get name of the evaluation function.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::size2_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::getAlgorithmSize() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::name_out(int ind) const  "

[INTERNAL]  Get output scheme name by index.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::FunctionInternal::getJacobian(const
std::string &name, int iind, int oind, bool compact, bool symmetric, const
Dict &opts) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::jit_dependencies(const
std::string &fname) "

[INTERNAL]   Jit dependencies.

";

%feature("docstring")  casadi::FunctionInternal::getWorkSize() const  "

[INTERNAL]  Get the length of the work vector.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::repr(std::ostream &stream)
const override "

[INTERNAL]  Print.

";

%feature("docstring")  casadi::FunctionInternal::reverse(int nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::get_name_in(int i) "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::replaceFwdSeed(const
std::vector< std::vector< M > > &fseed) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::replaceArg(const
std::vector< M > &arg, bool hcat=false) const  "

[INTERNAL]  Replace 0-by-0 inputs.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::sp_rev(bvec_t **arg, bvec_t
**res, int *iw, bvec_t *w, int mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::addDependency(CodeGenerator
&g) const  "

[INTERNAL]  Add a dependent function.

";

%feature("docstring")  casadi::FunctionInternal::jac_mx(int iind=0, int
oind=0, const Dict &opts=Dict()) "

[INTERNAL]  Jacobian expression.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(int nadj,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FunctionInternal::map_mx(const std::vector<
std::vector< MX > > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::map_mx(const std::vector<
MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, int order, bool
tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::generateMeta(CodeGenerator
&g, const std::string &fname) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::Expm::default_in(int ind) const override "

[INTERNAL]  Get default input value.

";

%feature("docstring") casadi::SlicotExpm::_set_work "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::SlicotExpm::eval(void *mem, const double
**arg, double **res, int *iw, double *w) const override "

[INTERNAL]  Evaluate numerically.

";


// File: classcasadi_1_1Solve.xml


// File: classcasadi_1_1SparseStorage.xml
%feature("docstring")  casadi::SparseStorage< DataType >::has_nz(int rr, int
cc) const  "

[INTERNAL]  Returns true if the matrix has a non-zero at location rr, cc.

";

%feature("docstring")  casadi::SparseStorage< DataType >::elem(int rr, int
cc) "

[INTERNAL]  get a reference to an element

";

%feature("docstring")  casadi::SparseStorage< DataType >::clear() "

[INTERNAL] ";

%feature("docstring")  casadi::SparseStorage< DataType >::reserve(int nnz) "

[INTERNAL] ";

%feature("docstring")  casadi::SparseStorage< DataType >::reserve(int nnz,
int ncol) "

[INTERNAL] ";

%feature("docstring")  casadi::SparseStorage< DataType >::resize(int nrow,
int ncol) "

[INTERNAL] ";

%feature("docstring") casadi::SparseStorage "

[INTERNAL] C++ includes: sparse_storage.hpp ";

%feature("docstring")  casadi::SparseStorage< DataType >::sparsity() const
"

[INTERNAL]  Const access the sparsity - reference to data member.

";

%feature("docstring") casadi::SparseStorage< DataType >::SparseStorage(const
Sparsity &sparsity, const DataType &val=DataType(0)) "

[INTERNAL]  Sparse matrix with a given sparsity

";

%feature("docstring") casadi::SparseStorage< DataType >::SparseStorage() "

[INTERNAL]  constructors

empty 0-by-0 matrix constructor

";

%feature("docstring") casadi::SparseStorage< DataType >::SparseStorage(const
SparseStorage< DataType > &m) "

[INTERNAL]  Copy constructor.

";

%feature("docstring")  casadi::SparseStorage< DataType >::nonzeros() "

[INTERNAL]  Access the non-zero elements.

";

%feature("docstring")  casadi::SparseStorage< DataType >::nonzeros() const
"

[INTERNAL]  Const access the non-zero elements.

";


// File: classcasadi_1_1Sparsity.xml


/*  Check if two sparsity patterns are identical  */

/*  Size and element counting  */ %feature("docstring")
casadi::Sparsity::enlargeRows(int nrow, const std::vector< int > &rr, bool
ind1=false) "

Enlarge the matrix along the first dimension (i.e. insert rows)

";

%feature("docstring") casadi::Sparsity "

General sparsity class.

The storage format is a compressed column storage (CCS) format.  In this
format, the structural non-zero elements are stored in column-major order,
starting from the upper left corner of the matrix and ending in the lower
right corner.

In addition to the dimension ( size1(), size2()), (i.e. the number of rows
and the number of columns respectively), there are also two vectors of
integers:

\"colind\" [length size2()+1], which contains the index to the first non-
zero element on or after the corresponding column. All the non-zero elements
of a particular i are thus the elements with index el that fulfills:
colind[i] <= el < colind[i+1].

\"row\" [same length as the number of non-zero elements, nnz()] The rows for
each of the structural non-zeros.

Note that with this format, it is cheap to loop over all the non-zero
elements of a particular column, at constant time per element, but expensive
to jump to access a location (i, j).

If the matrix is dense, i.e. length(row) == size1()*size2(), the format
reduces to standard dense column major format, which allows access to an
arbitrary element in constant time.

Since the object is reference counted (it inherits from SharedObject),
several matrices are allowed to share the same sparsity pattern.

The implementations of some methods of this class has been taken from the
CSparse package and modified to use C++ standard library and CasADi data
structures.

See:   Matrix

Joel Andersson

C++ includes: sparsity.hpp ";

%feature("docstring")  casadi::Sparsity::largest_first() const  "

Order the columns by decreasing degree.

";

%feature("docstring")  casadi::Sparsity::dim() const  "

Get the dimension as a string.

";

%feature("docstring")  casadi::Sparsity::add_nz(int rr, int cc) "

Get the index of a non-zero element Add the element if it does not exist and
copy object if it's not unique.

";

%feature("docstring")  casadi::Sparsity::is_scalar(bool
scalar_and_dense=false) const  "

Is scalar?

";

%feature("docstring")  casadi::Sparsity::rowsSequential(bool strictly=true)
const  "

Do the rows appear sequentially on each column.

Parameters:
-----------

strictly:  if true, then do not allow multiple entries

";

%feature("docstring")  casadi::Sparsity::get_diag(std::vector< int >
&output_mapping) const  "

Get the diagonal of the matrix/create a diagonal matrix (mapping will
contain the nonzero mapping) When the input is square, the diagonal elements
are returned. If the input is vector-like, a diagonal matrix is constructed
with it.

";

%feature("docstring")  casadi::Sparsity::btf(std::vector< int >
&output_rowperm, std::vector< int > &output_colperm, std::vector< int >
&output_rowblock, std::vector< int > &output_colblock, std::vector< int >
&output_coarse_rowblock, std::vector< int > &output_coarse_colblock) const
"

Calculate the block triangular form (BTF) See Direct Methods for Sparse
Linear Systems by Davis (2006).

The function computes the Dulmage-Mendelsohn decomposition, which allows you
to reorder the rows and columns of a matrix to bring it into block
triangular form (BTF).

It will not consider the distance of off-diagonal elements to the diagonal:
there is no guarantee you will get a block-diagonal matrix if you supply a
randomly permuted block-diagonal matrix.

If your matrix is symmetrical, this method is of limited use; permutation
can make it non-symmetric.

See:   scc

";

%feature("docstring")  casadi::Sparsity::star_coloring2(int ordering=1, int
cutoff=std::numeric_limits< int >::max()) const  "

Perform a star coloring of a symmetric matrix: A new greedy distance-2
coloring algorithm Algorithm 4.1 in NEW ACYCLIC AND STAR COLORING ALGORITHMS
WITH APPLICATION TO COMPUTING HESSIANS A. H. GEBREMEDHIN, A. TARAFDAR, F.
MANNE, A. POTHEN SIAM J. SCI. COMPUT. Vol. 29, No. 3, pp. 10421072 (2007)

Ordering options: None (0), largest first (1)

";

%feature("docstring")  casadi::Sparsity::enlargeColumns(int ncol, const
std::vector< int > &cc, bool ind1=false) "

Enlarge the matrix along the second dimension (i.e. insert columns)

";

%feature("docstring")  casadi::Sparsity::is_vector() const  "

Check if the pattern is a row or column vector.

";

%feature("docstring")  casadi::Sparsity::hash() const  "

";

%feature("docstring")  casadi::Sparsity::resize(int nrow, int ncol) "

Resize.

";

%feature("docstring")  casadi::Sparsity::find(bool ind1=false) const  "

Get the location of all non-zero elements as they would appear in a Dense
matrix A : DenseMatrix 4 x 3 B : SparseMatrix 4 x 3 , 5 structural non-
zeros.

k = A.find() A[k] will contain the elements of A that are non-zero in B

";

%feature("docstring")  casadi::Sparsity::spy_matlab(const std::string
&mfile) const  "

Generate a script for Matlab or Octave which visualizes the sparsity using
the spy command.

";

%feature("docstring")  casadi::SharedObject::repr(std::ostream
&stream=casadi::userOut(), bool trailing_newline=true) const  "

Print a representation of the object.

";

%feature("docstring")  casadi::Sparsity::bw_lower() const  "

Lower half-bandwidth.

";

%feature("docstring")  casadi::Sparsity::T() const  "

Transpose the matrix.

";

%feature("docstring")  casadi::Sparsity::repr_el(int k) const  "

Describe the nonzero location k as a string.

";

%feature("docstring") casadi::Sparsity::Sparsity(int dummy=0) "

Default constructor.

";

%feature("docstring") casadi::Sparsity::Sparsity(int nrow, int ncol) "

Pattern with all structural zeros.

";

%feature("docstring") casadi::Sparsity::Sparsity(int nrow, int ncol, const
std::vector< int > &colind, const std::vector< int > &row) "

Construct from sparsity pattern vectors given in compressed column storage
format.

";

%feature("docstring") casadi::Sparsity::Sparsity(const std::pair< int, int >
&rc) "

Create a sparse matrix with all structural zeros.

";

%feature("docstring")  casadi::Sparsity::pattern_inverse() const  "

Take the inverse of a sparsity pattern; flip zeros and non-zeros.

";

%feature("docstring")  casadi::Sparsity::colind(int cc) const  "

Get a reference to the colindex of column cc (see class description)

";

%feature("docstring")  casadi::Sparsity::is_row() const  "

Check if the pattern is a row vector (i.e. size1()==1)

";

%feature("docstring")  casadi::Sparsity::numel() const  "

The total number of elements, including structural zeros, i.e.
size2()*size1()

See:   nnz()

";

%feature("docstring")  casadi::Sparsity::unite(const Sparsity &y) const  "

Union of two sparsity patterns.

";

%feature("docstring")  casadi::Sparsity::get_ccs(std::vector< int >
&output_colind, std::vector< int > &output_row) const  "

Get the sparsity in compressed column storage (CCS) format.

";

%feature("docstring")  casadi::Sparsity::is_transpose(const Sparsity &y)
const  "

Check if the sparsity is the transpose of another.

";

%feature("docstring")  casadi::Sparsity::get_triplet(std::vector< int >
&output_row, std::vector< int > &output_col) const  "

Get the sparsity in sparse triplet format.

";

%feature("docstring")  casadi::Sparsity::is_square() const  "

Is square?

";

%feature("docstring")  casadi::Sparsity::appendColumns(const Sparsity &sp) "

Append another sparsity patten horizontally.

";

%feature("docstring")  casadi::Sparsity::isReshape(const Sparsity &y) const
"

Check if the sparsity is a reshape of another.

";

%feature("docstring")  casadi::Sparsity::removeDuplicates(std::vector< int >
&INOUT) "

Remove duplicate entries.

The same indices will be removed from the mapping vector, which must have
the same length as the number of nonzeros

";

%feature("docstring")  casadi::Sparsity::is_empty(bool both=false) const  "

Check if the sparsity is empty.

A sparsity is considered empty if one of the dimensions is zero (or
optionally both dimensions)

";

%feature("docstring")  casadi::Sparsity::makeDense(std::vector< int >
&output_mapping) const  "

Make a patten dense.

";

%feature("docstring")  casadi::Sparsity::nnz_diag() const  "

Number of non-zeros on the diagonal, i.e. the number of elements (i, j) with
j==i.

";

%feature("docstring")  casadi::PrintableObject< SharedObject
>::getDescription() const "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::Sparsity::dense(int nrow, int ncol=1) "

Create a dense rectangular sparsity pattern.

";

%feature("docstring")  casadi::Sparsity::dense(const std::pair< int, int >
&rc) "

Create a dense rectangular sparsity pattern.

";

%feature("docstring")  casadi::Sparsity::diag(int nrow) "

Create diagonal sparsity pattern.

";

%feature("docstring")  casadi::Sparsity::diag(int nrow, int ncol) "

Create diagonal sparsity pattern.

";

%feature("docstring")  casadi::Sparsity::diag(const std::pair< int, int >
&rc) "

Create diagonal sparsity pattern.

";

%feature("docstring")  casadi::Sparsity::get_crs(std::vector< int >
&output_rowind, std::vector< int > &output_col) const  "

Get the sparsity in compressed row storage (CRS) format.

";

%feature("docstring")  casadi::Sparsity::sub(const std::vector< int > &rr,
const std::vector< int > &cc, std::vector< int > &output_mapping, bool
ind1=false) const  "

Get a submatrix.

Returns the sparsity of the submatrix, with a mapping such that submatrix[k]
= originalmatrix[mapping[k]]

";

%feature("docstring")  casadi::Sparsity::sub(const std::vector< int > &rr,
const Sparsity &sp, std::vector< int > &output_mapping, bool ind1=false)
const  "

Get a set of elements.

Returns the sparsity of the corresponding elements, with a mapping such that
submatrix[k] = originalmatrix[mapping[k]]

";

%feature("docstring")  casadi::Sparsity::unit(int n, int el) "

Create the sparsity pattern for a unit vector of length n and a nonzero on
position el.

";

%feature("docstring")  casadi::SharedObject::is_null() const  "

Is a null pointer?

";

%feature("docstring")  casadi::Sparsity::append(const Sparsity &sp) "

Append another sparsity patten vertically (NOTE: only efficient if vector)

";

%feature("docstring")  casadi::PrintableObject< SharedObject
>::getRepresentation() const "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::Sparsity::combine(const Sparsity &y, bool
f0x_is_zero, bool fx0_is_zero) const  "

Combine two sparsity patterns Returns the new sparsity pattern as well as a
mapping with the same length as the number of non-zero elements The mapping
matrix contains the arguments for each nonzero, the first bit indicates if
the first argument is nonzero, the second bit indicates if the second
argument is nonzero (note that none of, one of or both of the arguments can
be nonzero)

";

%feature("docstring")  casadi::Sparsity::nnz() const  "

Get the number of (structural) non-zeros.

See:   numel()

";

%feature("docstring")  casadi::Sparsity::intersect(const Sparsity &y) const
"

Intersection of two sparsity patterns Returns the new sparsity pattern as
well as a mapping with the same length as the number of non-zero elements
The value is 1 if the non-zero comes from the first (i.e. this) object, 2 if
it is from the second and 3 (i.e. 1 | 2) if from both.

";

%feature("docstring")  casadi::Sparsity::row(int el) const  "

Get the row of a non-zero element.

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=casadi::userOut(), bool trailing_newline=true) const  "

Print a description of the object.

";

%feature("docstring")  casadi::Sparsity::is_column() const  "

Check if the pattern is a column vector (i.e. size2()==1)

";

%feature("docstring")  casadi::Sparsity::get_colind() const  "

Get the column index for each column Together with the row-vector, one
obtains the sparsity pattern in the column compressed format.

";

%feature("docstring")  casadi::Sparsity::get_row() const  "

Get the row for each non-zero entry Together with the column-vector, this
vector gives the sparsity of the matrix in sparse triplet format, and
together with the colind vector, one obtains the sparsity in column
compressed format.

";

%feature("docstring")  casadi::Sparsity::is_symmetric() const  "

Is symmetric?

";

%feature("docstring")  casadi::Sparsity::has_nz(int rr, int cc) const  "

Returns true if the pattern has a non-zero at location rr, cc.

";

%feature("docstring")  casadi::Sparsity::transpose(std::vector< int >
&output_mapping, bool invert_mapping=false) const  "

Transpose the matrix and get the reordering of the non-zero entries.

Parameters:
-----------

mapping:  the non-zeros of the original matrix for each non-zero of the new
matrix

";

%feature("docstring")  casadi::Sparsity::pmult(const std::vector< int > &p,
bool permute_rows=true, bool permute_columns=true, bool
invert_permutation=false) const  "

Permute rows and/or columns Multiply the sparsity with a permutation matrix
from the left and/or from the right P * A * trans(P), A * trans(P) or A *
trans(P) with P defined by an index vector containing the row for each col.
As an alternative, P can be transposed (inverted).

";

%feature("docstring")  casadi::Sparsity::is_diag() const  "

Is diagonal?

";

%feature("docstring")  casadi::Sparsity::is_equal(const Sparsity &y) const
"

";

%feature("docstring")  casadi::Sparsity::is_equal(int nrow, int ncol, const
std::vector< int > &colind, const std::vector< int > &row) const  "

";

%feature("docstring")  casadi::Sparsity::nnz_lower(bool strictly=false)
const  "

Number of non-zeros in the lower triangular half, i.e. the number of
elements (i, j) with j<=i.

";

%feature("docstring")  casadi::Sparsity::get_lower() const  "

Get nonzeros in lower triangular part.

";

%feature("docstring")  casadi::Sparsity::is_singular() const  "

Check whether the sparsity-pattern indicates structural singularity.

";

%feature("docstring")  casadi::Sparsity::print_compact(std::ostream
&stream=casadi::userOut()) const  "

Print a compact description of the sparsity pattern.

";

%feature("docstring")  casadi::Sparsity::is_dense() const  "

Is dense?

";

%feature("docstring")  casadi::Sparsity::sanity_check(bool complete=false)
const  "

Check if the dimensions and colind, row vectors are compatible.

Parameters:
-----------

complete:  set to true to also check elementwise throws an error as possible
result

";

%feature("docstring")  casadi::Sparsity::compressed(const std::vector< int >
&v) "

Create from a single vector containing the pattern in compressed column
storage format: The format: The first two entries are the number of rows
(nrow) and columns (ncol) The next ncol+1 entries are the column offsets
(colind). Note that the last element, colind[ncol], gives the number of
nonzeros The last colind[ncol] entries are the row indices

";

%feature("docstring")  casadi::Sparsity::uni_coloring(const Sparsity
&AT=Sparsity(), int cutoff=std::numeric_limits< int >::max()) const  "

Perform a unidirectional coloring: A greedy distance-2 coloring algorithm
(Algorithm 3.1 in A. H. GEBREMEDHIN, F. MANNE, A. POTHEN)

";

%feature("docstring")  casadi::Sparsity::star_coloring(int ordering=1, int
cutoff=std::numeric_limits< int >::max()) const  "

Perform a star coloring of a symmetric matrix: A greedy distance-2 coloring
algorithm Algorithm 4.1 in What Color Is Your Jacobian? Graph Coloring for
Computing Derivatives A. H. GEBREMEDHIN, F. MANNE, A. POTHEN SIAM Rev.,
47(4), 629705 (2006)

Ordering options: None (0), largest first (1)

";

%feature("docstring")  casadi::Sparsity::enlarge(int nrow, int ncol, const
std::vector< int > &rr, const std::vector< int > &cc, bool ind1=false) "

Enlarge matrix Make the matrix larger by inserting empty rows and columns,
keeping the existing non-zeros.

For the matrices A to B A(m, n) length(jj)=m , length(ii)=n B(nrow, ncol)

A=enlarge(m, n, ii, jj) makes sure that

B[jj, ii] == A

";

%feature("docstring")  casadi::Sparsity::compress() const  "

Compress a sparsity pattern.

";

%feature("docstring")  casadi::Sparsity::scc(std::vector< int >
&output_index, std::vector< int > &output_offset) const  "

Find the strongly connected components of the bigraph defined by the
sparsity pattern of a square matrix.

See Direct Methods for Sparse Linear Systems by Davis (2006). Returns:
Number of components

Offset for each components (length: 1 + number of components)

Indices for each components, component i has indices index[offset[i]], ...,
index[offset[i+1]]

In the case that the matrix is symmetric, the result has a particular
interpretation: Given a symmetric matrix A and n = A.scc(p, r)

=> A[p, p] will appear block-diagonal with n blocks and with the indices of
the block boundaries to be found in r.

";

%feature("docstring")  casadi::Sparsity::get_upper() const  "

Get nonzeros in upper triangular part.

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=casadi::userOut()) const  "

[INTERNAL]  Print the pointer to the internal class

";

%feature("docstring")  casadi::Sparsity::dfs(int j, int top, std::vector<
int > &INOUT, std::vector< int > &INOUT, const std::vector< int > &pinv,
std::vector< bool > &INOUT) const  "

Depth-first search on the adjacency graph of the sparsity See Direct Methods
for Sparse Linear Systems by Davis (2006).

";

%feature("docstring")  casadi::Sparsity::is_tril() const  "

Is lower triangular?

";

%feature("docstring")  casadi::Sparsity::size2() const  "

Get the number of columns.

";

%feature("docstring")  casadi::Sparsity::get_col() const  "

Get the column for each non-zero entry Together with the row-vector, this
vector gives the sparsity of the matrix in sparse triplet format, i.e. the
column and row for each non-zero elements.

";

%feature("docstring")  casadi::Sparsity::size1() const  "

Get the number of rows.

";

%feature("docstring")  casadi::Sparsity::is_triu() const  "

Is upper triangular?

";

%feature("docstring")  casadi::Sparsity::spy(std::ostream
&stream=casadi::userOut()) const  "

Print a textual representation of sparsity.

";

%feature("docstring") casadi::Sparsity::__hash__ "

Returns a number that is unique for a given Node. If the Object does not
point to any node, \"0\" is returned.

";

%feature("docstring")  casadi::Sparsity::size() const  "

Get the shape.

";

%feature("docstring")  casadi::Sparsity::size(int axis) const  "

Get the size along a particular dimensions.

";

%feature("docstring")  casadi::Sparsity::etree(bool ata=false) const  "

Calculate the elimination tree See Direct Methods for Sparse Linear Systems
by Davis (2006). If the parameter ata is false, the algorithm is equivalent
to MATLAB's etree(A), except that the indices are zero- based. If ata is
true, the algorithm is equivalent to MATLAB's etree(A, 'col').

";

%feature("docstring")  casadi::Sparsity::get_nz(int rr, int cc) const  "

Get the index of an existing non-zero element return -1 if the element does
not exist.

";

%feature("docstring")  casadi::Sparsity::get_nz(const std::vector< int >
&rr, const std::vector< int > &cc) const  "

Get a set of non-zero element return -1 if the element does not exist.

";

%feature("docstring")  casadi::Sparsity::get_nz(std::vector< int > &INOUT)
const  "

Get the nonzero index for a set of elements The index vector is used both
for input and outputs and must be sorted by increasing nonzero index, i.e.
column-wise. Elements not found in the sparsity pattern are set to -1.

";

%feature("docstring")  casadi::Sparsity::erase(const std::vector< int > &rr,
const std::vector< int > &cc, bool ind1=false) "

Erase rows and/or columns of a matrix.

";

%feature("docstring")  casadi::Sparsity::erase(const std::vector< int > &rr,
bool ind1=false) "

Erase elements of a matrix.

";

%feature("docstring")  casadi::Sparsity::bw_upper() const  "

Upper half-bandwidth.

";

%feature("docstring")  casadi::Sparsity::scalar(bool dense_scalar=true) "

Create a scalar sparsity pattern.

";

%feature("docstring")  casadi::Sparsity::nnz_upper(bool strictly=false)
const  "

Number of non-zeros in the upper triangular half, i.e. the number of
elements (i, j) with j>=i.

";


// File: classcasadi_1_1SparsityInterface.xml
%feature("docstring")  diagsplit(const MatType &x, const std::vector< int >
&output_offset1, const std::vector< int > &output_offset2) "

split diagonally, retaining square matrices

Parameters:
-----------

output_offset1:  List of all start locations (row) for each group the last
matrix will run to the end.

output_offset2:  List of all start locations (row) for each group the last
matrix will run to the end.

diagcat(diagsplit(x, ...)) = x

";

%feature("docstring")  diagsplit(const MatType &x, const std::vector< int >
&output_offset) "

split diagonally, retaining square matrices

Parameters:
-----------

output_offset:  List of all start locations for each group the last matrix
will run to the end.

diagcat(diagsplit(x, ...)) = x

";

%feature("docstring")  diagsplit(const MatType &x, int incr=1) "

split diagonally, retaining groups of square matrices

Parameters:
-----------

incr:  Size of each matrix

diagsplit(diagsplit(x, ...)) = x

";

%feature("docstring")  diagsplit(const MatType &x, int incr1, int incr2) "

split diagonally, retaining fixed-sized matrices

Parameters:
-----------

incr1:  Row dimension of each matrix

incr2:  Column dimension of each matrix

diagsplit(diagsplit(x, ...)) = x

";

%feature("docstring")  triu(const MatType &x, bool includeDiagonal=true) "

Get the upper triangular part of a matrix.

";

%feature("docstring")  mac(const MatType &x, const MatType &y, const MatType
&z) "

Multiply-accumulate operation Matrix product of two matrices (x and y),
adding the result to a third matrix z. The result has the same sparsity
pattern as C meaning that other entries of (x*y) are ignored. The operation
is equivalent to: z+mtimes(x,y).project(z.sparsity()).

";

%feature("docstring")  mtimes(const MatType &x, const MatType &y) "

Matrix product of two matrices.

";

%feature("docstring")  mtimes(const std::vector< MatType > &args) "

Matrix product of n matrices.

";

%feature("docstring")  transpose(const MatType &X) "

Transpose.

";

%feature("docstring")  tril(const MatType &x, bool includeDiagonal=true) "

Get the lower triangular part of a matrix.

";

%feature("docstring")  offset(const std::vector< MatType > &v, bool
vert=true) "

Helper function, get offsets corresponding to a vector of matrices.

";

%feature("docstring")  vec(const MatType &x) "

make a vector Reshapes/vectorizes the matrix such that the shape becomes
(expr.numel(), 1). Columns are stacked on top of each other. Same as
reshape(expr, expr.numel(), 1)

a c b d  turns into

a b c d

";

%feature("docstring")  horzcat(const std::vector< MatType > &v) "

Concatenate a list of matrices horizontally Alternative terminology:
horizontal stack, hstack, horizontal append, [a b].

horzcat(horzsplit(x, ...)) = x

";

%feature("docstring")  horzcat(const MatType &x, const MatType &y) "

Concatenate horizontally, two matrices.

";

%feature("docstring")  horzcat(const MatType &x, const MatType &y, const
MatType &z) "

Concatenate horizontally, three matrices.

";

%feature("docstring")  horzcat(const MatType &x, const MatType &y, const
MatType &z, const MatType &w) "

Concatenate horizontally, four matrices.

";

%feature("docstring") casadi::SparsityInterface "

Sparsity interface class.

This is a common base class for GenericMatrix (i.e. MX and Matrix<>) and
Sparsity, introducing a uniform syntax and implementing common functionality
using the curiously recurring template pattern (CRTP) idiom. Joel Andersson

C++ includes: sparsity_interface.hpp ";

%feature("docstring")  horzsplit(const MatType &x, const std::vector< int >
&offset) "

split horizontally, retaining groups of columns

Parameters:
-----------

offset:  List of all start columns for each group the last column group will
run to the end.

horzcat(horzsplit(x, ...)) = x

";

%feature("docstring")  horzsplit(const MatType &x, int incr=1) "

split horizontally, retaining fixed-sized groups of columns

Parameters:
-----------

incr:  Size of each group of columns

horzcat(horzsplit(x, ...)) = x

";

%feature("docstring")  veccat(const std::vector< MatType > &x) "

concatenate vertically while vectorizing all arguments with vec

";

%feature("docstring")  blocksplit(const MatType &x, const std::vector< int >
&vert_offset, const std::vector< int > &horz_offset) "

chop up into blocks

Parameters:
-----------

vert_offset:  Defines the boundaries of the block rows

horz_offset:  Defines the boundaries of the block columns

blockcat(blocksplit(x,..., ...)) = x

";

%feature("docstring")  blocksplit(const MatType &x, int vert_incr=1, int
horz_incr=1) "

chop up into blocks

Parameters:
-----------

vert_incr:  Defines the increment for block boundaries in row dimension

horz_incr:  Defines the increment for block boundaries in column dimension

blockcat(blocksplit(x,..., ...)) = x

";

%feature("docstring")  repmat(const MatType &A, int n, int m=1) "

Repeat matrix A n times vertically and m times horizontally.

";

%feature("docstring")  repmat(const MatType &A, const std::pair< int, int >
&rc) "

Repeat matrix A n times vertically and m times horizontally.

";

%feature("docstring")  vertcat(const std::vector< MatType > &v) "

Concatenate a list of matrices vertically Alternative terminology: vertical
stack, vstack, vertical append, [a;b].

vertcat(vertsplit(x, ...)) = x

";

%feature("docstring")  vertcat(const MatType &x, const MatType &y) "

Concatenate vertically, two matrices.

";

%feature("docstring")  vertcat(const MatType &x, const MatType &y, const
MatType &z) "

Concatenate vertically, three matrices.

";

%feature("docstring")  vertcat(const MatType &x, const MatType &y, const
MatType &z, const MatType &w) "

Concatenate vertically, four matrices.

";

%feature("docstring")  sprank(const MatType &x) "

Obtain the structural rank of a sparsity-pattern.

";

%feature("docstring")  kron(const MatType &a, const MatType &b) "

Kronecker tensor product.

Creates a block matrix in which each element (i, j) is a_ij*b

";

%feature("docstring")  reshape(const MatType &x, int nrow, int ncol) "

Returns a reshaped version of the matrix.

";

%feature("docstring")  reshape(const MatType &x, std::pair< int, int > rc) "

Returns a reshaped version of the matrix, dimensions as a vector.

";

%feature("docstring")  reshape(const MatType &x, const Sparsity &sp) "

Reshape the matrix.

";

%feature("docstring")  norm_0_mul(const MatType &x, const MatType &y) "

0-norm (nonzero count) of a Matrix-matrix product

";

%feature("docstring")  diagcat(const std::vector< MatType > &A) "

Construct a matrix with given block on the diagonal.

";

%feature("docstring")  diagcat(const MatType &x, const MatType &y) "

Concatenate along diagonal, two matrices.

";

%feature("docstring")  diagcat(const MatType &x, const MatType &y, const
MatType &z) "

Concatenate along diagonal, three matrices.

";

%feature("docstring")  diagcat(const MatType &x, const MatType &y, const
MatType &z, const MatType &w) "

Concatenate along diagonal, four matrices.

";

%feature("docstring")  vertsplit(const MatType &x, const std::vector< int >
&offset) "

split vertically, retaining groups of rows

*

Parameters:
-----------

output_offset:  List of all start rows for each group the last row group
will run to the end.

vertcat(vertsplit(x, ...)) = x

";

%feature("docstring")  vertsplit(const MatType &x, int incr=1) "

split vertically, retaining fixed-sized groups of rows

Parameters:
-----------

incr:  Size of each group of rows

vertcat(vertsplit(x, ...)) = x



::

  >>> print vertsplit(SX.sym(\"a\",4))
  [SX(a_0), SX(a_1), SX(a_2), SX(a_3)]
  





::

  >>> print vertsplit(SX.sym(\"a\",4),2)
  [SX([a_0, a_1]), SX([a_2, a_3])]
  



If the number of rows is not a multiple of incr, the last entry returned
will have a size smaller than incr.



::

  >>> print vertsplit(DM([0,1,2,3,4]),2)
  [DM([0, 1]), DM([2, 3]), DM(4)]
  



";

%feature("docstring")  blockcat(const std::vector< std::vector< MatType > >
&v) "

Construct a matrix from a list of list of blocks.

";

%feature("docstring")  blockcat(const MatType &A, const MatType &B, const
MatType &C, const MatType &D) "

Construct a matrix from 4 blocks.

";


// File: classcasadi_1_1Split.xml


// File: classcasadi_1_1Sqpmethod.xml
%feature("docstring")  casadi::FunctionInternal::print_free(std::ostream
&stream) const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::Sqpmethod::eval_h(SqpmethodMemory *m, const
double *x, const double *lambda, double sigma, double *H) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::Nlpsol::get_sparsity_out(int i) override "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::Sqpmethod::eval_g(SqpmethodMemory *m, const
double *x, double *g) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::tang_sx(int iind=0, int
oind=0) "

[INTERNAL]  Tangent expression.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::Sqpmethod::init(const Dict &opts) override "

[INTERNAL]  Initialize.

";

%feature("docstring") casadi::Sqpmethod::_call "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring") casadi::Sqpmethod::_call "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::tangent(int iind, int oind)
"

[INTERNAL]  Return tangent function.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::FunctionInternal::name_out(int ind) const  "

[INTERNAL]  Get output scheme name by index.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInputReal(int k)
const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::Nlpsol::checkInputs(void *mem) const  "

[INTERNAL]  Check if the inputs correspond to a well-posed problem.

";

%feature("docstring")  casadi::FunctionInternal::checkInputs() const  "

[INTERNAL]  Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::Sqpmethod::eval_jac_g(SqpmethodMemory *m,
const double *x, double *g, double *J) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::setJacobian(const Function
&jac, int iind, int oind, bool compact) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::Sqpmethod::eval_f(SqpmethodMemory *m, const
double *x) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::jac_mx(int iind=0, int
oind=0, const Dict &opts=Dict()) "

[INTERNAL]  Jacobian expression.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::set_jac_sparsity(const
Sparsity &sp, int iind, int oind, bool compact) "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::OracleFunction::set_temp(void *mem, const
double **arg, double **res, int *iw, double *w) const override "

[INTERNAL]  Set the work vectors.

";

%feature("docstring")  casadi::Sqpmethod::eval_grad_f(SqpmethodMemory *m,
const double *x, double *f, double *grad_f) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::getJacSparsityGen(int iind,
int oind, bool symmetric, int gr_i=1, int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::Sqpmethod::alloc_memory() const override "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::getGradient(const
std::string &name, int iind, int oind, const Dict &opts) "

[INTERNAL]  Return gradient function.

";

%feature("docstring")  casadi::FunctionInternal::sp_rev(bvec_t **arg, bvec_t
**res, int *iw, bvec_t *w, int mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::addDependency(CodeGenerator
&g) const  "

[INTERNAL]  Add a dependent function.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(int ind) const
"

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(const
std::string &iname) const  "

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::FunctionInternal::matchingArg(const
std::vector< M > &arg, bool hcat=false) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring") casadi::Sqpmethod::_set_temp "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::FunctionInternal::hess_sx(int iind=0, int
oind=0) "

[INTERNAL]  Hessian expression.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::OracleFunction::jit_dependencies(const
std::string &fname) override "

[INTERNAL]  JIT for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(int nadj) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::jac_sx(int iind=0, int
oind=0, const Dict &opts=Dict()) "

[INTERNAL]  Jacobian expression.

";

%feature("docstring")  casadi::FunctionInternal::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::FunctionInternal::getTangent(const
std::string &name, int iind, int oind, const Dict &opts) "

[INTERNAL]  Return tangent function.

";

%feature("docstring")  casadi::FunctionInternal::get_reverse(const
std::string &name, int nadj, const std::vector< std::string > &i_names,
const std::vector< std::string > &o_names, const Dict &opts) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(int ind) const
"

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(const
std::string &iname) const  "

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::OracleFunction::expand() "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring") casadi::Sqpmethod "

'sqpmethod' plugin for Nlpsol

A textbook SQPMethod

>List of available options

+-----------------------+-----------+--------------------------------------+
|          Id           |   Type    |             Description              |
+=======================+===========+======================================+
| beta                  | OT_DOUBLE | Line-search parameter, restoration   |
|                       |           | factor of stepsize                   |
+-----------------------+-----------+--------------------------------------+
| c1                    | OT_DOUBLE | Armijo condition, coefficient of     |
|                       |           | decrease in merit                    |
+-----------------------+-----------+--------------------------------------+
| hessian_approximation | OT_STRING | limited-memory|exact                 |
+-----------------------+-----------+--------------------------------------+
| lbfgs_memory          | OT_INT    | Size of L-BFGS memory.               |
+-----------------------+-----------+--------------------------------------+
| max_iter              | OT_INT    | Maximum number of SQP iterations     |
+-----------------------+-----------+--------------------------------------+
| max_iter_ls           | OT_INT    | Maximum number of linesearch         |
|                       |           | iterations                           |
+-----------------------+-----------+--------------------------------------+
| merit_memory          | OT_INT    | Size of memory to store history of   |
|                       |           | merit function values                |
+-----------------------+-----------+--------------------------------------+
| min_step_size         | OT_DOUBLE | The size (inf-norm) of the step size |
|                       |           | should not become smaller than this. |
+-----------------------+-----------+--------------------------------------+
| print_header          | OT_BOOL   | Print the header with problem        |
|                       |           | statistics                           |
+-----------------------+-----------+--------------------------------------+
| print_iteration       | OT_BOOL   | Print the iterations                 |
+-----------------------+-----------+--------------------------------------+
| qpsol                 | OT_STRING | The QP solver to be used by the SQP  |
|                       |           | method                               |
+-----------------------+-----------+--------------------------------------+
| qpsol_options         | OT_DICT   | Options to be passed to the QP       |
|                       |           | solver                               |
+-----------------------+-----------+--------------------------------------+
| regularize            | OT_BOOL   | Automatic regularization of Lagrange |
|                       |           | Hessian.                             |
+-----------------------+-----------+--------------------------------------+
| tol_du                | OT_DOUBLE | Stopping criterion for dual          |
|                       |           | infeasability                        |
+-----------------------+-----------+--------------------------------------+
| tol_pr                | OT_DOUBLE | Stopping criterion for primal        |
|                       |           | infeasibility                        |
+-----------------------+-----------+--------------------------------------+

>List of available options

+-------------------+---------------+-------------------+------------------+
|        Id         |     Type      |    Description    |     Used in      |
+===================+===============+===================+==================+
| beta              | OT_DOUBLE     | Line-search       | casadi::Sqpmetho |
|                   |               | parameter,        | d                |
|                   |               | restoration       |                  |
|                   |               | factor of         |                  |
|                   |               | stepsize          |                  |
+-------------------+---------------+-------------------+------------------+
| c1                | OT_DOUBLE     | Armijo condition, | casadi::Sqpmetho |
|                   |               | coefficient of    | d                |
|                   |               | decrease in merit |                  |
+-------------------+---------------+-------------------+------------------+
| discrete          | OT_BOOLVECTOR | Indicates which   | casadi::Nlpsol   |
|                   |               | of the variables  |                  |
|                   |               | are discrete,     |                  |
|                   |               | i.e. integer-     |                  |
|                   |               | valued            |                  |
+-------------------+---------------+-------------------+------------------+
| eval_errors_fatal | OT_BOOL       | When errors occur | casadi::Nlpsol   |
|                   |               | during evaluation |                  |
|                   |               | of f,g,...,stop   |                  |
|                   |               | the iterations    |                  |
+-------------------+---------------+-------------------+------------------+
| expand            | OT_BOOL       | Replace MX with   | casadi::Nlpsol   |
|                   |               | SX expressions in |                  |
|                   |               | problem           |                  |
|                   |               | formulation       |                  |
|                   |               | [false]           |                  |
+-------------------+---------------+-------------------+------------------+
| hessian_approxima | OT_STRING     | limited-          | casadi::Sqpmetho |
| tion              |               | memory|exact      | d                |
+-------------------+---------------+-------------------+------------------+
| ignore_check_vec  | OT_BOOL       | If set to true,   | casadi::Nlpsol   |
|                   |               | the input shape   |                  |
|                   |               | of F will not be  |                  |
|                   |               | checked.          |                  |
+-------------------+---------------+-------------------+------------------+
| iteration_callbac | OT_FUNCTION   | A function that   | casadi::Nlpsol   |
| k                 |               | will be called at |                  |
|                   |               | each iteration    |                  |
|                   |               | with the solver   |                  |
|                   |               | as input. Check   |                  |
|                   |               | documentation of  |                  |
|                   |               | Callback .        |                  |
+-------------------+---------------+-------------------+------------------+
| iteration_callbac | OT_BOOL       | If set to true,   | casadi::Nlpsol   |
| k_ignore_errors   |               | errors thrown by  |                  |
|                   |               | iteration_callbac |                  |
|                   |               | k will be         |                  |
|                   |               | ignored.          |                  |
+-------------------+---------------+-------------------+------------------+
| iteration_callbac | OT_INT        | Only call the     | casadi::Nlpsol   |
| k_step            |               | callback function |                  |
|                   |               | every few         |                  |
|                   |               | iterations.       |                  |
+-------------------+---------------+-------------------+------------------+
| lbfgs_memory      | OT_INT        | Size of L-BFGS    | casadi::Sqpmetho |
|                   |               | memory.           | d                |
+-------------------+---------------+-------------------+------------------+
| max_iter          | OT_INT        | Maximum number of | casadi::Sqpmetho |
|                   |               | SQP iterations    | d                |
+-------------------+---------------+-------------------+------------------+
| max_iter_ls       | OT_INT        | Maximum number of | casadi::Sqpmetho |
|                   |               | linesearch        | d                |
|                   |               | iterations        |                  |
+-------------------+---------------+-------------------+------------------+
| merit_memory      | OT_INT        | Size of memory to | casadi::Sqpmetho |
|                   |               | store history of  | d                |
|                   |               | merit function    |                  |
|                   |               | values            |                  |
+-------------------+---------------+-------------------+------------------+
| min_step_size     | OT_DOUBLE     | The size (inf-    | casadi::Sqpmetho |
|                   |               | norm) of the step | d                |
|                   |               | size should not   |                  |
|                   |               | become smaller    |                  |
|                   |               | than this.        |                  |
+-------------------+---------------+-------------------+------------------+
| print_header      | OT_BOOL       | Print the header  | casadi::Sqpmetho |
|                   |               | with problem      | d                |
|                   |               | statistics        |                  |
+-------------------+---------------+-------------------+------------------+
| print_iteration   | OT_BOOL       | Print the         | casadi::Sqpmetho |
|                   |               | iterations        | d                |
+-------------------+---------------+-------------------+------------------+
| qpsol             | OT_STRING     | The QP solver to  | casadi::Sqpmetho |
|                   |               | be used by the    | d                |
|                   |               | SQP method        |                  |
+-------------------+---------------+-------------------+------------------+
| qpsol_options     | OT_DICT       | Options to be     | casadi::Sqpmetho |
|                   |               | passed to the QP  | d                |
|                   |               | solver            |                  |
+-------------------+---------------+-------------------+------------------+
| regularize        | OT_BOOL       | Automatic         | casadi::Sqpmetho |
|                   |               | regularization of | d                |
|                   |               | Lagrange Hessian. |                  |
+-------------------+---------------+-------------------+------------------+
| tol_du            | OT_DOUBLE     | Stopping          | casadi::Sqpmetho |
|                   |               | criterion for     | d                |
|                   |               | dual              |                  |
|                   |               | infeasability     |                  |
+-------------------+---------------+-------------------+------------------+
| tol_pr            | OT_DOUBLE     | Stopping          | casadi::Sqpmetho |
|                   |               | criterion for     | d                |
|                   |               | primal            |                  |
|                   |               | infeasibility     |                  |
+-------------------+---------------+-------------------+------------------+
| verbose_init      | OT_BOOL       | Print out timing  | casadi::Nlpsol   |
|                   |               | information about |                  |
|                   |               | the different     |                  |
|                   |               | stages of         |                  |
|                   |               | initialization    |                  |
+-------------------+---------------+-------------------+------------------+
| warn_initial_boun | OT_BOOL       | Warn if the       | casadi::Nlpsol   |
| ds                |               | initial guess     |                  |
|                   |               | does not satisfy  |                  |
|                   |               | LBX and UBX       |                  |
+-------------------+---------------+-------------------+------------------+

Diagrams
--------



C++ includes: sqpmethod.hpp ";

%feature("docstring")  casadi::FunctionInternal::generateMeta(CodeGenerator
&g, const std::string &fname) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FunctionInternal::grad_mx(int iind=0, int
oind=0) "

[INTERNAL]  Gradient expression.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::replaceArg(const
std::vector< M > &arg, bool hcat=false) const  "

[INTERNAL]  Replace 0-by-0 inputs.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::n_out() const  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::Sqpmethod::get_options() const override "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::FunctionInternal::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(int nadj,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FunctionInternal::fullJacobian() "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::get_forward(const
std::string &name, int nfwd, const std::vector< std::string > &i_names,
const std::vector< std::string > &o_names, const Dict &opts) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::verbose() const  "

[INTERNAL]  Verbose mode?

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOutput(int k)
const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::OracleFunction::get_function() const override
"

[INTERNAL] ";

%feature("docstring")  casadi::OracleFunction::get_function(const
std::string &name) const override "

[INTERNAL] ";

%feature("docstring")  casadi::Nlpsol::get_sparsity_in(int i) override "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::log(const std::string &msg)
const  "

[INTERNAL]  Log the status of the solver.

";

%feature("docstring")  casadi::FunctionInternal::log(const std::string &fcn,
const std::string &msg) const  "

[INTERNAL]  Log the status of the solver, function given.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::eval_name() const  "

[INTERNAL]  Get name of the evaluation function.

";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn, const std::string &fname, bool jit=false) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::FunctionInternal::grad_sx(int iind=0, int
oind=0) "

[INTERNAL]  Gradient expression.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::Sqpmethod::primalInfeasibility(const double
*x, const double *lbx, const double *ubx, const double *g, const double
*lbg, const double *ubg) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::size_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(int nfwd) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::Sqpmethod::_eval "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring") casadi::Sqpmethod::_eval "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring") casadi::Sqpmethod::_eval "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::map_mx(const std::vector<
std::vector< MX > > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::map_mx(const std::vector<
MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::replaceFwdSeed(const
std::vector< std::vector< M > > &fseed) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::OracleFunction::finalize(const Dict &opts)
override "

[INTERNAL]  Finalize initialization.

";

%feature("docstring")  casadi::Sqpmethod::regularize(double *H, double reg)
const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::mx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Sqpmethod::_get_stats "

[INTERNAL]  Get all statistics

";

%feature("docstring")  casadi::FunctionInternal::print(std::ostream &stream)
const override "

[INTERNAL]  Print.

";

%feature("docstring")  casadi::FunctionInternal::simple(const double *arg,
double *res) const  "

[INTERNAL]  Evaluate numerically, simplied syntax.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::tang_mx(int iind=0, int
oind=0) "

[INTERNAL]  Tangent expression.

";

%feature("docstring")  casadi::FunctionInternal::get_n_reverse() const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::forward(int nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::symbolicFwdSeed(int nfwd,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::Sqpmethod::set_work(void *mem, const double
**&arg, double **&res, int *&iw, double *&w) const override "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::name_in(int ind) const  "

[INTERNAL]  Get input scheme name by index.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::Nlpsol::default_in(int ind) const override "

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::checkArg(const std::vector<
M > &arg, bool hcat=false) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::Sqpmethod::solve(void *mem) const override "

[INTERNAL] ";

%feature("docstring")  casadi::Nlpsol::get_n_out() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, int order, bool
tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInput(int k) const
"

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::n_in() const  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::Sqpmethod::solve_QP(SqpmethodMemory *m, const
double *H, const double *g, const double *lbx, const double *ubx, const
double *A, const double *lbA, const double *ubA, double *x_opt, double
*lambda_x_opt, double *lambda_A_opt) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::gradient(int iind, int
oind) "

[INTERNAL]  Return gradient function.

";

%feature("docstring")  casadi::FunctionInternal::getJacobian(const
std::string &name, int iind, int oind, bool compact, bool symmetric, const
Dict &opts) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::getHessian(int iind, int
oind) "

[INTERNAL]  Return Hessian function.

";

%feature("docstring")  casadi::FunctionInternal::getFullJacobian(const
std::string &name, const std::vector< std::string > &i_names, const
std::vector< std::string > &o_names, const Dict &opts) "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::Nlpsol::getReducedHessian() "

[INTERNAL] ";

%feature("docstring")  casadi::Nlpsol::type_name() const override "

[INTERNAL]  Get type name.

";

%feature("docstring")  casadi::FunctionInternal::repr(std::ostream &stream)
const override "

[INTERNAL]  Print.

";

%feature("docstring")  casadi::FunctionInternal::getAlgorithmSize() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::jacobian(int iind, int
oind, bool compact, bool symmetric) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::replaceRes(const
std::vector< M > &res) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::Sqpmethod::free_memory(void *mem) const
override "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::OracleFunction::create_function(const
std::string &fname, const std::vector< std::string > &s_in, const
std::vector< std::string > &s_out, const Function::AuxOut
&aux=Function::AuxOut()) "

[INTERNAL]  Create an oracle function

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::getWorkSize() const  "

[INTERNAL]  Get the length of the work vector.

";

%feature("docstring")  casadi::OracleFunction::get_stats(void *mem) const
override "

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::OracleFunction::monitored(const std::string
&name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::Sqpmethod::reset_h(SqpmethodMemory *m) const
"

[INTERNAL] ";

%feature("docstring")  casadi::Nlpsol::integer_support() const  "

[INTERNAL]  Can discrete variables be treated.

";

%feature("docstring")  casadi::OracleFunction::oracle() const override "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::Sqpmethod::getConic() const  "

[INTERNAL]  Access Conic.

";

%feature("docstring")  casadi::Nlpsol::eval(void *mem, const double **arg,
double **res, int *iw, double *w) const override "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::Nlpsol::get_name_out(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOperation(int k)
const  "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::reverse(int nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::getPartition(int iind, int
oind, Sparsity &D1, Sparsity &D2, bool compact, bool symmetric, bool
allow_forward, bool allow_reverse) "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, int *iw, SXElem *w, int mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::FunctionInternal::matchingRes(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::FunctionInternal::hessian(int iind, int oind)
"

[INTERNAL]  Return Hessian function.

";

%feature("docstring")  casadi::FunctionInternal::get_n_forward() const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::simplifiedCall() const  "

[INTERNAL]  Use simplified signature.

";

%feature("docstring")  casadi::Nlpsol::init_memory(void *mem) const override
"

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::hasFullJacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::n_mem() const  "

[INTERNAL]  Maximum number of memory objects.

";

%feature("docstring")  casadi::FunctionInternal::sp_fwd(const bvec_t **arg,
bvec_t **res, int *iw, bvec_t *w, int mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::FunctionInternal::addShorthand(CodeGenerator
&g, const std::string &name) const  "

[INTERNAL]  Generate shorthand macro.

";

%feature("docstring")  casadi::Sqpmethod::getRegularization(const double *H)
const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::hasDerivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::OracleFunction::print_fstats(const
OracleMemory *m) const  "

[INTERNAL]  Print statistics.

";

%feature("docstring")  casadi::FunctionInternal::name() const  "

[INTERNAL]  Name of the function.

";

%feature("docstring")  casadi::FunctionInternal::size_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")
casadi::FunctionInternal::generateDeclarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring") casadi::Sqpmethod::_setup "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::OracleFunction::calc_function(OracleMemory
*m, const std::string &fcn, const double *const *arg=0) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::symbolicOutput(const
std::vector< MX > &arg) "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::Sqpmethod::plugin_name() const override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(int iind, int
oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::construct(const Dict &opts)
"

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::OracleFunction::generate_dependencies(const
std::string &fname, const Dict &opts) const override "

[INTERNAL]  Export / Generate C code for the generated functions.

";

%feature("docstring")  casadi::FunctionInternal::checkRes(const std::vector<
M > &res) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

";

%feature("docstring")  casadi::FunctionInternal::generateBody(CodeGenerator
&g) const  "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(int iind,
int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::OracleFunction::has_function(const
std::string &fname) const override "

[INTERNAL] ";

%feature("docstring")  casadi::Nlpsol::get_n_in() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::Sqpmethod::printIteration(std::ostream
&stream) const  "

[INTERNAL]  Print iteration header.

";

%feature("docstring")  casadi::Sqpmethod::printIteration(std::ostream
&stream, int iter, double obj, double pr_inf, double du_inf, double dx_norm,
double reg, int ls_trials, bool ls_success) const  "

[INTERNAL]  Print iteration.

";

%feature("docstring")  casadi::Nlpsol::setOptionsFromFile(const std::string
&file) "

[INTERNAL]  Read options from parameter xml.

";

%feature("docstring")  casadi::Nlpsol::get_name_in(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::sx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::clear_memory() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< int > &order_in, const std::vector< int >
&order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring") casadi::Sqpmethod::Sqpmethod(const std::string &name,
const Function &nlp) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::Sqpmethod::_set_work "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")
casadi::FunctionInternal::generateFunction(CodeGenerator &g, const
std::string &fname, bool decl_static) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring") casadi::Sqpmethod::~Sqpmethod "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::replaceAdjSeed(const
std::vector< std::vector< M > > &aseed) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";


// File: classcasadi_1_1Logger_1_1Stream.xml
%feature("docstring") casadi::Logger::Stream "

C++ includes: casadi_logger.hpp ";

%feature("docstring") casadi::Logger::Stream< Err, PL >::Stream() "

";


// File: classcasadi_1_1Logger_1_1Streambuf.xml
%feature("docstring") casadi::Logger::Streambuf "

C++ includes: casadi_logger.hpp ";

%feature("docstring") casadi::Logger::Streambuf< Err, PL >::Streambuf() "

";


// File: classcasadi_1_1SubAssign.xml


// File: classcasadi_1_1SubIndex.xml
%feature("docstring") casadi::SubIndex "

SubIndex class for Matrix Same as the above class but for single argument
return for operator() Joel Andersson

C++ includes: submatrix.hpp ";

%feature("docstring") casadi::SubIndex< M, I >::SubIndex(M &mat, const I &i)
"

Constructor.

";


// File: classcasadi_1_1SubMatrix.xml
%feature("docstring") casadi::SubMatrix "

SubMatrix class for Matrix SubMatrix is the return type for operator() of
the Matrix class, it allows access to the value as well as changing the
parent object Joel Andersson

C++ includes: submatrix.hpp ";

%feature("docstring") casadi::SubMatrix< M, I, J >::SubMatrix(M &mat, const
I &i, const J &j) "

Constructor.

";


// File: classcasadi_1_1SubRef.xml


// File: classcasadi_1_1Switch.xml
%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< int > &order_in, const std::vector< int >
&order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::Switch::get_n_forward() const override "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(int nadj,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::Switch::eval(void *mem, const double **arg,
double **res, int *iw, double *w) const override "

[INTERNAL]  Evaluate numerically, work vectors given.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(int nfwd) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(int ind) const
"

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(const
std::string &iname) const  "

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(int iind,
int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, int order, bool
tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::Switch::get_forward(const std::string &name,
int nfwd, const std::vector< std::string > &i_names, const std::vector<
std::string > &o_names, const Dict &opts) const override "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::FunctionInternal::matchingArg(const
std::vector< M > &arg, bool hcat=false) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::getAlgorithmSize() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::addDependency(CodeGenerator
&g) const  "

[INTERNAL]  Add a dependent function.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOperation(int k)
const  "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::get_name_in(int i) "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::jit_dependencies(const
std::string &fname) "

[INTERNAL]   Jit dependencies.

";

%feature("docstring") casadi::Switch::_eval "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring") casadi::Switch::_eval "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring") casadi::Switch::_eval "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::map_mx(const std::vector<
std::vector< MX > > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::map_mx(const std::vector<
MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::set_temp(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::free_memory(void *mem)
const  "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::log(const std::string &msg)
const  "

[INTERNAL]  Log the status of the solver.

";

%feature("docstring")  casadi::FunctionInternal::log(const std::string &fcn,
const std::string &msg) const  "

[INTERNAL]  Log the status of the solver, function given.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(int nadj) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::sp_fwd(const bvec_t **arg,
bvec_t **res, int *iw, bvec_t *w, int mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::getJacobian(const
std::string &name, int iind, int oind, bool compact, bool symmetric, const
Dict &opts) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::Switch::has_codegen() const override "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::FunctionInternal::setJacobian(const Function
&jac, int iind, int oind, bool compact) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::FunctionInternal::getWorkSize() const  "

[INTERNAL]  Get the length of the work vector.

";

%feature("docstring") casadi::Switch::~Switch "

[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::simplifiedCall() const  "

[INTERNAL]  Use simplified signature.

";

%feature("docstring")  casadi::FunctionInternal::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::sx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::Switch::init(const Dict &opts) override "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::FunctionInternal::verbose() const  "

[INTERNAL]  Verbose mode?

";

%feature("docstring")  casadi::FunctionInternal::checkRes(const std::vector<
M > &res) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

";

%feature("docstring")  casadi::FunctionInternal::tang_mx(int iind=0, int
oind=0) "

[INTERNAL]  Tangent expression.

";

%feature("docstring")  casadi::FunctionInternal::construct(const Dict &opts)
"

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::Switch::_call "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring") casadi::Switch::_call "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::FunctionInternal::clear_memory() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::get_name_out(int i) "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::size_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::name_in(int ind) const  "

[INTERNAL]  Get input scheme name by index.

";

%feature("docstring")  casadi::Switch::get_n_reverse() const override "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::FunctionInternal::name() const  "

[INTERNAL]  Name of the function.

";

%feature("docstring")  casadi::FunctionInternal::get_stats(void *mem) const
"

[INTERNAL]  Get all statistics

";

%feature("docstring")  casadi::FunctionInternal::size2_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::matchingRes(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

";

%feature("docstring") casadi::Switch::_get_stats "

[INTERNAL]  Get all statistics

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::n_in() const  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::getFullJacobian(const
std::string &name, const std::vector< std::string > &i_names, const
std::vector< std::string > &o_names, const Dict &opts) "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInputReal(int k)
const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::name_out(int ind) const  "

[INTERNAL]  Get output scheme name by index.

";

%feature("docstring")  casadi::FunctionInternal::replaceAdjSeed(const
std::vector< std::vector< M > > &aseed) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::n_mem() const  "

[INTERNAL]  Maximum number of memory objects.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsityGen(int iind,
int oind, bool symmetric, int gr_i=1, int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(int iind, int
oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::tang_sx(int iind=0, int
oind=0) "

[INTERNAL]  Tangent expression.

";

%feature("docstring")  casadi::Switch::get_sparsity_in(int i) override "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::addShorthand(CodeGenerator
&g, const std::string &name) const  "

[INTERNAL]  Generate shorthand macro.

";

%feature("docstring")  casadi::FunctionInternal::hasFullJacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::FunctionInternal::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring")  casadi::FunctionInternal::size_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(int ind) const
"

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(const
std::string &iname) const  "

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::hessian(int iind, int oind)
"

[INTERNAL]  Return Hessian function.

";

%feature("docstring")  casadi::Switch::print(std::ostream &stream) const
override "

[INTERNAL]  Print description.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")
casadi::FunctionInternal::generateFunction(CodeGenerator &g, const
std::string &fname, bool decl_static) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::FunctionInternal::grad_mx(int iind=0, int
oind=0) "

[INTERNAL]  Gradient expression.

";

%feature("docstring") casadi::Switch::_set_work "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::default_in(int ind) const
"

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::eval_name() const  "

[INTERNAL]  Get name of the evaluation function.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInput(int k) const
"

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::get_options() const  "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::FunctionInternal::jac_sx(int iind=0, int
oind=0, const Dict &opts=Dict()) "

[INTERNAL]  Jacobian expression.

";

%feature("docstring")  casadi::FunctionInternal::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::init_memory(void *mem)
const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::set_jac_sparsity(const
Sparsity &sp, int iind, int oind, bool compact) "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::Switch::get_sparsity_out(int i) override "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOutput(int k)
const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::get_function() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::Switch::eval_sx(const SXElem **arg, SXElem
**res, int *iw, SXElem *w, int mem) const override "

[INTERNAL]  evaluate symbolically while also propagating directional
derivatives

";

%feature("docstring")  casadi::FunctionInternal::checkArg(const std::vector<
M > &arg, bool hcat=false) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::getPartition(int iind, int
oind, Sparsity &D1, Sparsity &D2, bool compact, bool symmetric, bool
allow_forward, bool allow_reverse) "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::sp_rev(bvec_t **arg, bvec_t
**res, int *iw, bvec_t *w, int mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::simple(const double *arg,
double *res) const  "

[INTERNAL]  Evaluate numerically, simplied syntax.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::Switch::get_n_out() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::grad_sx(int iind=0, int
oind=0) "

[INTERNAL]  Gradient expression.

";

%feature("docstring") casadi::Switch::Switch(const std::string &name, const
std::vector< Function > &f, const Function &f_def) "

[INTERNAL]  Constructor (generic switch)

";

%feature("docstring")  casadi::FunctionInternal::alloc_memory() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::FunctionInternal::symbolicFwdSeed(int nfwd,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::Switch::type_name() const override "

[INTERNAL]  Get type name.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::replaceArg(const
std::vector< M > &arg, bool hcat=false) const  "

[INTERNAL]  Replace 0-by-0 inputs.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::reverse(int nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::checkInputs() const  "

[INTERNAL]  Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::FunctionInternal::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FunctionInternal::tangent(int iind, int oind)
"

[INTERNAL]  Return tangent function.

";

%feature("docstring")  casadi::FunctionInternal::n_out() const  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::getTangent(const
std::string &name, int iind, int oind, const Dict &opts) "

[INTERNAL]  Return tangent function.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring") casadi::Switch "

[INTERNAL]   Switch statement Joel Andersson

C++ includes: switch.hpp ";

%feature("docstring")  casadi::FunctionInternal::repr(std::ostream &stream)
const override "

[INTERNAL]  Print.

";

%feature("docstring")  casadi::FunctionInternal::hasDerivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::gradient(int iind, int
oind) "

[INTERNAL]  Return gradient function.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::Switch::get_n_in() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::finalize(const Dict &opts)
"

[INTERNAL]  Finalize the object creation This function, which visits the
class hierarchy in reverse order is run after init() has been completed.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::getHessian(int iind, int
oind) "

[INTERNAL]  Return Hessian function.

";

%feature("docstring")  casadi::FunctionInternal::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::replaceRes(const
std::vector< M > &res) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::Switch::generateBody(CodeGenerator &g) const
override "

[INTERNAL]  Generate code for the body of the C function.

";

%feature("docstring")  casadi::FunctionInternal::generateMeta(CodeGenerator
&g, const std::string &fname) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FunctionInternal::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::FunctionInternal::symbolicOutput(const
std::vector< MX > &arg) "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::Switch::_set_temp "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::jacobian(int iind, int
oind, bool compact, bool symmetric) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::getGradient(const
std::string &name, int iind, int oind, const Dict &opts) "

[INTERNAL]  Return gradient function.

";

%feature("docstring")  casadi::FunctionInternal::print_free(std::ostream
&stream) const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::FunctionInternal::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::forward(int nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FunctionInternal::jac_mx(int iind=0, int
oind=0, const Dict &opts=Dict()) "

[INTERNAL]  Jacobian expression.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::hess_sx(int iind=0, int
oind=0) "

[INTERNAL]  Hessian expression.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::Switch::get_reverse(const std::string &name,
int nadj, const std::vector< std::string > &i_names, const std::vector<
std::string > &o_names, const Dict &opts) const override "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::FunctionInternal::replaceFwdSeed(const
std::vector< std::vector< M > > &fseed) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::fullJacobian() "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Switch::_setup "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::Switch::generateDeclarations(CodeGenerator
&g) const override "

[INTERNAL]  Generate code for the declarations of the C function.

";


// File: classcasadi_1_1SXFunction.xml


// File: classcasadi_1_1SymbolicMX.xml


// File: classcasadi_1_1SymbolicQr.xml
%feature("docstring")  casadi::FunctionInternal::grad_mx(int iind=0, int
oind=0) "

[INTERNAL]  Gradient expression.

";

%feature("docstring")  casadi::FunctionInternal::tang_mx(int iind=0, int
oind=0) "

[INTERNAL]  Tangent expression.

";

%feature("docstring")  casadi::FunctionInternal::verbose() const  "

[INTERNAL]  Verbose mode?

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsityGen(int iind,
int oind, bool symmetric, int gr_i=1, int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::SymbolicQr::free_memory(void *mem) const
override "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::sx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::hessian(int iind, int oind)
"

[INTERNAL]  Return Hessian function.

";

%feature("docstring")  casadi::FunctionInternal::get_sparsity_out(int i) "

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::FunctionInternal::getWorkSize() const  "

[INTERNAL]  Get the length of the work vector.

";

%feature("docstring")  casadi::FunctionInternal::eval(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::SymbolicQr::linsol_eval_sx(const SXElem
**arg, SXElem **res, int *iw, SXElem *w, int mem, bool tr, int nrhs) const
override "

[INTERNAL]  Evaluate symbolically (SX)

";

%feature("docstring")  casadi::FunctionInternal::get_function() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::LinsolInternal::rank(void *mem) const  "

[INTERNAL]   Matrix rank.

";

%feature("docstring")  casadi::FunctionInternal::getGradient(const
std::string &name, int iind, int oind, const Dict &opts) "

[INTERNAL]  Return gradient function.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(int nfwd) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::hasFullJacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(int iind, int
oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(int ind) const
"

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(const
std::string &iname) const  "

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::simple(const double *arg,
double *res) const  "

[INTERNAL]  Evaluate numerically, simplied syntax.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, int *iw, SXElem *w, int mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::LinsolInternal::type_name() const override "

[INTERNAL]  Get type name.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::jac_mx(int iind=0, int
oind=0, const Dict &opts=Dict()) "

[INTERNAL]  Jacobian expression.

";

%feature("docstring")  casadi::FunctionInternal::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::clear_memory() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::get_n_reverse() const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::symbolicFwdSeed(int nfwd,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::name() const  "

[INTERNAL]  Name of the function.

";

%feature("docstring")  casadi::FunctionInternal::size_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::n_mem() const  "

[INTERNAL]  Maximum number of memory objects.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::LinsolInternal::neig(void *mem) const  "

[INTERNAL]  Number of negative eigenvalues.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring") casadi::SymbolicQr::SymbolicQr(const std::string
&name) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::getAtomicOperation(int k)
const  "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::setJacobian(const Function
&jac, int iind, int oind, bool compact) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::LinsolInternal::solve_cholesky(void *mem,
double *x, int nrhs, bool tr) const  "

[INTERNAL]   Solve Cholesky.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInput(int k) const
"

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::SymbolicQr::get_options() const override "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::FunctionInternal::set_temp(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(int nadj,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FunctionInternal::repr(std::ostream &stream)
const override "

[INTERNAL]  Print.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::gradient(int iind, int
oind) "

[INTERNAL]  Return gradient function.

";

%feature("docstring")  casadi::FunctionInternal::eval_name() const  "

[INTERNAL]  Get name of the evaluation function.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::SymbolicQr::_call "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring") casadi::SymbolicQr::_call "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::SymbolicQr::factorize(void *mem, const double
*A) const override "

[INTERNAL]  Factorize the linear system.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::fullJacobian() "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, int order, bool
tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::SymbolicQr::_setup "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::log(const std::string &msg)
const  "

[INTERNAL]  Log the status of the solver.

";

%feature("docstring")  casadi::FunctionInternal::log(const std::string &fcn,
const std::string &msg) const  "

[INTERNAL]  Log the status of the solver, function given.

";

%feature("docstring")  casadi::FunctionInternal::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::n_in() const  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::jac_sx(int iind=0, int
oind=0, const Dict &opts=Dict()) "

[INTERNAL]  Jacobian expression.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(int nadj) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::set_jac_sparsity(const
Sparsity &sp, int iind, int oind, bool compact) "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::generateBody(CodeGenerator
&g) const  "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::LinsolInternal::get_n_out() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(int ind) const
"

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(const
std::string &iname) const  "

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::FunctionInternal::map_mx(const std::vector<
std::vector< MX > > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::map_mx(const std::vector<
MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::construct(const Dict &opts)
"

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::SymbolicQr::_set_work "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::matchingArg(const
std::vector< M > &arg, bool hcat=false) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::addDependency(CodeGenerator
&g) const  "

[INTERNAL]  Add a dependent function.

";

%feature("docstring")  casadi::FunctionInternal::name_out(int ind) const  "

[INTERNAL]  Get output scheme name by index.

";

%feature("docstring")  casadi::LinsolInternal::linsol_cholesky(void *mem,
bool tr) const  "

[INTERNAL]  Get Cholesky factor.

";

%feature("docstring")  casadi::FunctionInternal::print_free(std::ostream
&stream) const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::FunctionInternal::default_in(int ind) const
"

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::LinsolInternal::pivoting(void *mem, const
double *A) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::SymbolicQr::init_memory(void *mem) const
override "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::checkArg(const std::vector<
M > &arg, bool hcat=false) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::name_in(int ind) const  "

[INTERNAL]  Get input scheme name by index.

";

%feature("docstring") casadi::SymbolicQr::_set_temp "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring") casadi::SymbolicQr::_eval "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring") casadi::SymbolicQr::_eval "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring") casadi::SymbolicQr::_eval "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::FunctionInternal::getPartition(int iind, int
oind, Sparsity &D1, Sparsity &D2, bool compact, bool symmetric, bool
allow_forward, bool allow_reverse) "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring") casadi::SymbolicQr::~SymbolicQr "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::finalize(const Dict &opts)
"

[INTERNAL]  Finalize the object creation This function, which visits the
class hierarchy in reverse order is run after init() has been completed.

";

%feature("docstring")  casadi::FunctionInternal::symbolicOutput(const
std::vector< MX > &arg) "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")
casadi::FunctionInternal::generateFunction(CodeGenerator &g, const
std::string &fname, bool decl_static) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")
casadi::FunctionInternal::generateDeclarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::get_reverse(const
std::string &name, int nadj, const std::vector< std::string > &i_names,
const std::vector< std::string > &o_names, const Dict &opts) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::SymbolicQr::solve(void *mem, double *x, int
nrhs, bool tr) const override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::matchingRes(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::getJacobian(const
std::string &name, int iind, int oind, bool compact, bool symmetric, const
Dict &opts) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::LinsolInternal::linsol_cholesky_sparsity(void
*mem, bool tr) const  "

[INTERNAL]   Sparsity pattern of the cholesky factors.

";

%feature("docstring")  casadi::FunctionInternal::getHessian(int iind, int
oind) "

[INTERNAL]  Return Hessian function.

";

%feature("docstring")  casadi::FunctionInternal::get_forward(const
std::string &name, int nfwd, const std::vector< std::string > &i_names,
const std::vector< std::string > &o_names, const Dict &opts) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::n_out() const  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::size_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::tangent(int iind, int oind)
"

[INTERNAL]  Return tangent function.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::getTangent(const
std::string &name, int iind, int oind, const Dict &opts) "

[INTERNAL]  Return tangent function.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::SymbolicQr::reset(void *mem, const int *sp)
const override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< int > &order_in, const std::vector< int >
&order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::FunctionInternal::grad_sx(int iind=0, int
oind=0) "

[INTERNAL]  Gradient expression.

";

%feature("docstring")  casadi::SymbolicQr::alloc_memory() const override "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::SymbolicQr::init(const Dict &opts) override "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::FunctionInternal::forward(int nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(int iind,
int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::simplifiedCall() const  "

[INTERNAL]  Use simplified signature.

";

%feature("docstring")  casadi::FunctionInternal::getFullJacobian(const
std::string &name, const std::vector< std::string > &i_names, const
std::vector< std::string > &o_names, const Dict &opts) "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::jacobian(int iind, int
oind, bool compact, bool symmetric) "

[INTERNAL]  Return Jacobian function.

";

%feature("docstring")  casadi::FunctionInternal::tang_sx(int iind=0, int
oind=0) "

[INTERNAL]  Tangent expression.

";

%feature("docstring")  casadi::FunctionInternal::replaceAdjSeed(const
std::vector< std::vector< M > > &aseed) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOutput(int k)
const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::hasDerivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::sp_rev(bvec_t **arg, bvec_t
**res, int *iw, bvec_t *w, int mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::checkRes(const std::vector<
M > &res) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::checkInputs() const  "

[INTERNAL]  Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::FunctionInternal::get_sparsity_in(int i) "

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::FunctionInternal::get_stats(void *mem) const
"

[INTERNAL]  Get all statistics

";

%feature("docstring")  casadi::FunctionInternal::get_name_in(int i) "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::SymbolicQr "

'symbolicqr' plugin for Linsol

Linear solver for sparse least-squares problems Inspired
fromhttps://github.com/scipy/scipy/blob/v0.14.0/scipy/sparse/linalg/isolve/lsqr.py#L96

Linsol based on QR factorization with sparsity pattern based reordering
without partial pivoting

>List of available options

+----------+-----------+---------------------------------------------------+
|    Id    |   Type    |                    Description                    |
+==========+===========+===================================================+
| codegen  | OT_BOOL   | C-code generation                                 |
+----------+-----------+---------------------------------------------------+
| compiler | OT_STRING | Compiler command to be used for compiling         |
|          |           | generated code                                    |
+----------+-----------+---------------------------------------------------+

Joel Andersson

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
+------------------+-----------------+------------------+------------------+
| codegen          | OT_BOOL         | C-code           | casadi::Symbolic |
|                  |                 | generation       | Qr               |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Compiler command | casadi::Symbolic |
|                  |                 | to be used for   | Qr               |
|                  |                 | compiling        |                  |
|                  |                 | generated code   |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Custom input     | casadi::Function |
|                  |                 | scheme           | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Custom output    | casadi::Function |
|                  |                 | scheme           | Internal         |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: symbolic_qr.hpp ";

%feature("docstring")  casadi::FunctionInternal::size2_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::sp_fwd(const bvec_t **arg,
bvec_t **res, int *iw, bvec_t *w, int mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::FunctionInternal::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::SymbolicQr::plugin_name() const override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::addShorthand(CodeGenerator
&g, const std::string &name) const  "

[INTERNAL]  Generate shorthand macro.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInputReal(int k)
const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::reverse(int nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::FunctionInternal::replaceRes(const
std::vector< M > &res) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::get_n_forward() const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::get_name_out(int i) "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::print(std::ostream &stream)
const override "

[INTERNAL]  Print.

";

%feature("docstring")  casadi::LinsolInternal::get_n_in() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::FunctionInternal::replaceFwdSeed(const
std::vector< std::vector< M > > &fseed) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::jit_dependencies(const
std::string &fname) "

[INTERNAL]   Jit dependencies.

";

%feature("docstring")  casadi::FunctionInternal::getAlgorithmSize() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::replaceArg(const
std::vector< M > &arg, bool hcat=false) const  "

[INTERNAL]  Replace 0-by-0 inputs.

Parameters:
-----------

hcat:  check if horizontal repetion of the function input is allowed

";

%feature("docstring")  casadi::FunctionInternal::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::FunctionInternal::hess_sx(int iind=0, int
oind=0) "

[INTERNAL]  Hessian expression.

";

%feature("docstring") casadi::SymbolicQr::_get_stats "

[INTERNAL]  Get all statistics

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::FunctionInternal::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FunctionInternal::generateMeta(CodeGenerator
&g, const std::string &fname) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FunctionInternal::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";


// File: classcasadi_1_1SymbolicSX.xml


// File: classcasadi_1_1Transpose.xml


// File: classcasadi_1_1UnaryMX.xml


// File: classcasadi_1_1UnarySX.xml


// File: classcasadi_1_1Vertcat.xml


// File: classcasadi_1_1Vertsplit.xml


// File: classcasadi_1_1WeakRef.xml
%feature("docstring") casadi::WeakRef "

Weak reference type A weak reference to a SharedObject.

Joel Andersson

C++ includes: shared_object.hpp ";

%feature("docstring")  casadi::WeakRef::shared() "

Get a shared (owning) reference.

";

%feature("docstring") casadi::WeakRef::__hash__ "

Returns a number that is unique for a given Node. If the Object does not
point to any node, \"0\" is returned.

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=casadi::userOut(), bool trailing_newline=true) const  "

Print a description of the object.

";

%feature("docstring")  casadi::PrintableObject< SharedObject
>::getDescription() const "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::WeakRef::WeakRef(int dummy=0) "

Default constructor.

";

%feature("docstring") casadi::WeakRef::WeakRef(SharedObject shared) "

Construct from a shared object (also implicit type conversion)

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=casadi::userOut()) const  "

[INTERNAL]  Print the pointer to the internal class

";

%feature("docstring")  casadi::SharedObject::is_null() const  "

Is a null pointer?

";

%feature("docstring")  casadi::PrintableObject< SharedObject
>::getRepresentation() const "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::SharedObject::repr(std::ostream
&stream=casadi::userOut(), bool trailing_newline=true) const  "

Print a representation of the object.

";

%feature("docstring")  casadi::WeakRef::alive() const  "

Check if alive.

";


// File: classcasadi_1_1XFunction.xml


// File: classcasadi_1_1XmlFile.xml
%feature("docstring") casadi::XmlFile "

XML parser Can be used for parsing XML files into CasADi data structures.

Joel Andersson

C++ includes: xml_file.hpp ";

%feature("docstring")  casadi::PrintableObject< SharedObject
>::getDescription() const "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=casadi::userOut(), bool trailing_newline=true) const  "

Print a description of the object.

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=casadi::userOut()) const  "

[INTERNAL]  Print the pointer to the internal class

";

%feature("docstring")  casadi::PrintableObject< SharedObject
>::getRepresentation() const "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::XmlFile::__hash__ "

Returns a number that is unique for a given Node. If the Object does not
point to any node, \"0\" is returned.

";

%feature("docstring")  casadi::SharedObject::is_null() const  "

Is a null pointer?

";

%feature("docstring") casadi::XmlFile::XmlFile() "

";

%feature("docstring") casadi::XmlFile::XmlFile(const std::string &name) "

";

%feature("docstring") casadi::XmlFile::~XmlFile "

";

%feature("docstring")  casadi::SharedObject::repr(std::ostream
&stream=casadi::userOut(), bool trailing_newline=true) const  "

Print a representation of the object.

";


// File: classcasadi_1_1ZeroByZero.xml


// File: classcasadi_1_1ZeroSX.xml


// File: namespaceBonmin.xml


// File: namespacecasadi.xml
%feature("docstring")  casadi::matrixName< double >() "
Get typename.

";

%feature("docstring")  casadi::complement(const std::vector< int > &v, int
size) "

Returns the list of all i in [0, size[ not found in supplied list.

The supplied vector may contain duplicates and may be non-monotonous The
supplied vector will be checked for bounds The result vector is guaranteed
to be monotonously increasing

";

%feature("docstring")  casadi::conic_option_type(const std::string &name,
const std::string &op) "

Get type info for a particular option.

";

%feature("docstring")  casadi::inBounds(const std::vector< T > &v, int
upper) "

Check if for each element of v holds: v_i < upper.

";

%feature("docstring")  casadi::inBounds(const std::vector< T > &v, int
lower, int upper) "

Check if for each element of v holds: lower <= v_i < upper.

";

%feature("docstring")  casadi::load_expm(const std::string &name) "

Explicitly load a plugin dynamically.

";

%feature("docstring")  casadi::casadi_rank1(T1 *A, const int *sp_A, T1
alpha, const T1 *x) "

[INTERNAL]  Adds a multiple alpha/2 of the outer product mul(x, trans(x)) to
A.

";

%feature("docstring")  casadi::casadi_rank1(T1 *A, const int *sp_A, T1
alpha, const T1 *x, const T1 *y) "

[INTERNAL] ";

%feature("docstring")  casadi::swapIndices(const std::vector< std::vector< T
> > &m) "

swap inner and outer indices of list of lists



::

  * [[apple0,apple1,...],[pear0,pear1,...]] ->
  *   [[apple0,pear0],[apple1,pear1],...]
  * 



";

%feature("docstring")  casadi::dense_mul_nt_stride(int n, int m, int l,
const double *A, const double *B, double *C, int strideA, int strideB, int
strideC) "

[INTERNAL] ";

%feature("docstring")  casadi::isNon_increasing(const std::vector< T > &v) "

Check if the vector is non-increasing.

";

%feature("docstring")  casadi::dense_mul_tn(int n, int m, int l, const
double *A, const double *B, double *C) "

[INTERNAL] ";

%feature("docstring")  casadi::dense_mul_nn_stride(int n, int m, int l,
const double *A, const double *B, double *C, int strideA, int strideB, int
strideC) "

[INTERNAL] ";

%feature("docstring")  casadi::is_zero(const T &x) "

";

%feature("docstring")  casadi::dple_out() "

Get output scheme of DPLE solvers.

";

%feature("docstring")  casadi::dple_out(int ind) "

Get DPLE output scheme name by index.

";

%feature("docstring")  casadi::expmsol(const std::string &name, const
std::string &solver, const Sparsity &A, const Dict &opts=Dict()) "

Performs a matrix exponentiation expm(A)

General information
===================



>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| const_A          | OT_BOOL         | Assume A is      | casadi::Expm     |
|                  |                 | constant.        |                  |
|                  |                 | Default: false.  |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Custom input     | casadi::Function |
|                  |                 | scheme           | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Custom output    | casadi::Function |
|                  |                 | scheme           | Internal         |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

List of plugins
===============



- slicot

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
Expm.doc(\"myextraplugin\")



--------------------------------------------------------------------------------

slicot
------





--------------------------------------------------------------------------------



Joris Gillis

";

%feature("docstring")  casadi::casadi_mtimes(const T1 *x, const int *sp_x,
const T1 *y, const int *sp_y, T1 *z, const int *sp_z, T1 *w, int tr) "

[INTERNAL]  Sparse matrix-matrix multiplication: z <- z + x*y.

";

%feature("docstring")  casadi::integrator_n_out() "

Get the number of integrator outputs.

";

%feature("docstring")  casadi::slicot_periodic_schur(int n, int K, const
double *a, double *t, double *z, double *dwork, double *eig_real, double
*eig_imag, double num_zero=0) "

[INTERNAL] ";

%feature("docstring")  casadi::external(const std::string &name, const Dict
&opts=Dict()) "

Load an external function File name is assumed to be ./<f_name>.so.

";

%feature("docstring")  casadi::external(const std::string &name, const
std::string &bin_name, const Dict &opts=Dict()) "

Load an external function File name given.

";

%feature("docstring")  casadi::external(const std::string &name, const
Importer &compiler, const Dict &opts=Dict()) "

Load a just-in-time compiled external function File name given.

";

%feature("docstring")  casadi::nlpsol_n_out() "

Number of NLP solver outputs.

";

%feature("docstring")  casadi::isDecreasing(const std::vector< T > &v) "

Check if the vector is strictly decreasing.

";

%feature("docstring")  casadi::to_slice2(const std::vector< int > &v) "

Construct nested slices from an index vector (requires is_slice2(v) to be
true)

";

%feature("docstring")  casadi::load_integrator(const std::string &name) "

Explicitly load a plugin dynamically.

";

%feature("docstring")  casadi::expm_n_out() "

Get the number of expm solver outputs.

";

%feature("docstring")  casadi::casadi_sum_viol(int n, const T1 *x, const T1
*lb, const T1 *ub) "

[INTERNAL]  Sum of bound violations.

";

%feature("docstring")  casadi::load_nlpsol(const std::string &name) "

Explicitly load a plugin dynamically.

";

%feature("docstring")  casadi::casadi_scal(int n, T1 alpha, T1 *x) "

[INTERNAL]  SCAL: x <- alpha*x.

";

%feature("docstring")  casadi::Contraction(const T &a, const T &b, T &r) "

";

%feature("docstring")  casadi::Contraction(const bvec_t &a, const bvec_t &b,
bvec_t &r) "

";

%feature("docstring")  casadi::conic_options(const std::string &name) "

Get all options for a plugin.

";

%feature("docstring")  casadi::load_linsol(const std::string &name) "

Explicitly load a plugin dynamically.

";

%feature("docstring")  casadi::casadi_interpn_grad(T1 *grad, int ndim, const
T1 *grid, const int *offset, const T1 *values, const T1 *x, int *iw, T1 *w)
"

[INTERNAL] ";

%feature("docstring")  casadi::casadi_interpn_grad(T1 *grad, int ndim, const
T1 *grid, const int *offset, const T1 *values, const T1 *x, const int
*lookup_mode, int *iw, T1 *w) "

[INTERNAL] ";

%feature("docstring")  casadi::has_interpolant(const std::string &name) "

Check if a particular plugin is available.

";

%feature("docstring")  casadi::casadi_swap(int n, T1 *x, int inc_x, T1 *y,
int inc_y) "

[INTERNAL]  SWAP: x <-> y.

";

%feature("docstring")  casadi::nlpsol_options(const std::string &name) "

Get all options for a plugin.

";

%feature("docstring")  casadi::einstein_eval(int n_iter, const std::vector<
int > &iter_dims, const std::vector< int > &strides_a, const std::vector<
int > &strides_b, const std::vector< int > &strides_c, const T *a_in, const
T *b_in, T *c_in) "

";

%feature("docstring")  casadi::hasNegative(const std::vector< T > &v) "

Check if the vector has negative entries.

";

%feature("docstring")  casadi::conic_option_info(const std::string &name,
const std::string &op) "

Get documentation for a particular option.

";

%feature("docstring")  casadi::check_exposed(T t) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_interpn(int ndim, const T1 *grid,
const int *offset, const T1 *values, const T1 *x, int *iw, T1 *w) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_interpn(int ndim, const T1 *grid,
const int *offset, const T1 *values, const T1 *x, const int *lookup_mode,
int *iw, T1 *w) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_norm_1(int n, const T1 *x) "

[INTERNAL]  NORM_1: ||x||_1 -> return.

";

%feature("docstring")  casadi::casadi_iamax(int n, const T1 *x, int inc_x) "

[INTERNAL]  IAMAX: index corresponding to the entry with the largest
absolute value.

";

%feature("docstring")  casadi::doc_interpolant(const std::string &name) "

Get the documentation string for a plugin.

";

%feature("docstring")  casadi::write_matlab(std::ostream &stream, const
std::vector< T > &v) "

Print vector, matlab style.

";

%feature("docstring")  casadi::write_matlab(std::ostream &stream, const
std::vector< std::vector< T > > &v) "

Print matrix, matlab style.

";

%feature("docstring")  casadi::casadi_sparsify(const T1 *x, T2 *y, const int
*sp_y, int tr) "

[INTERNAL]  Convert dense to sparse.

";

%feature("docstring")  casadi::hash_sparsity(int nrow, int ncol, const
std::vector< int > &colind, const std::vector< int > &row) "

Hash a sparsity pattern.

";

%feature("docstring")  casadi::hash_sparsity(int nrow, int ncol, const int
*colind, const int *row) "

";

%feature("docstring")  casadi::is_slice2(const std::vector< int > &v) "

Check if an index vector can be represented more efficiently as two nested
slices.

";

%feature("docstring")  casadi::rootfinder(const std::string &name, const
std::string &solver, const Function &f, const Dict &opts=Dict()) "

Create a solver for rootfinding problems Takes a function where one of the
inputs is unknown and one of the outputs is a residual function that is
always zero, defines a new function where the the unknown input has been
replaced by a guess for the unknown and the residual output has been
replaced by the calculated value for the input.

For a function [y0, y1, ...,yi, .., yn] = F(x0, x1, ..., xj, ..., xm), where
xj is unknown and yi=0, defines a new function [y0, y1, ...,xj, .., yn] =
G(x0, x1, ..., xj_guess, ..., xm),

xj and yi must have the same dimension and d(yi)/d(xj) must be invertable.

By default, the first input is unknown and the first output is the residual.

General information
===================



>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| common_options   | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | auto-generated   | nction           |
|                  |                 | functions        |                  |
+------------------+-----------------+------------------+------------------+
| constraints      | OT_INTVECTOR    | Constrain the    | casadi::Rootfind |
|                  |                 | unknowns. 0      | er               |
|                  |                 | (default): no    |                  |
|                  |                 | constraint on    |                  |
|                  |                 | ui, 1: ui >=     |                  |
|                  |                 | 0.0, -1: ui <=   |                  |
|                  |                 | 0.0, 2: ui >     |                  |
|                  |                 | 0.0, -2: ui <    |                  |
|                  |                 | 0.0.             |                  |
+------------------+-----------------+------------------+------------------+
| implicit_input   | OT_INT          | Index of the     | casadi::Rootfind |
|                  |                 | input that       | er               |
|                  |                 | corresponds to   |                  |
|                  |                 | the actual root- |                  |
|                  |                 | finding          |                  |
+------------------+-----------------+------------------+------------------+
| implicit_output  | OT_INT          | Index of the     | casadi::Rootfind |
|                  |                 | output that      | er               |
|                  |                 | corresponds to   |                  |
|                  |                 | the actual root- |                  |
|                  |                 | finding          |                  |
+------------------+-----------------+------------------+------------------+
| jacobian_functio | OT_FUNCTION     | Function object  | casadi::Rootfind |
| n                |                 | for calculating  | er               |
|                  |                 | the Jacobian     |                  |
|                  |                 | (autogenerated   |                  |
|                  |                 | by default)      |                  |
+------------------+-----------------+------------------+------------------+
| linear_solver    | OT_STRING       | User-defined     | casadi::Rootfind |
|                  |                 | linear solver    | er               |
|                  |                 | class. Needed    |                  |
|                  |                 | for              |                  |
|                  |                 | sensitivities.   |                  |
+------------------+-----------------+------------------+------------------+
| linear_solver_op | OT_DICT         | Options to be    | casadi::Rootfind |
| tions            |                 | passed to the    | er               |
|                  |                 | linear solver.   |                  |
+------------------+-----------------+------------------+------------------+
| monitor          | OT_STRINGVECTOR | Set of user      | casadi::OracleFu |
|                  |                 | problem          | nction           |
|                  |                 | functions to be  |                  |
|                  |                 | monitored        |                  |
+------------------+-----------------+------------------+------------------+
| specific_options | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | specific auto-   | nction           |
|                  |                 | generated        |                  |
|                  |                 | functions,       |                  |
|                  |                 | overwriting the  |                  |
|                  |                 | defaults from    |                  |
|                  |                 | common_options.  |                  |
|                  |                 | Nested           |                  |
|                  |                 | dictionary.      |                  |
+------------------+-----------------+------------------+------------------+

List of plugins
===============



- kinsol

- nlpsol

- newton

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
Rootfinder.doc(\"myextraplugin\")



--------------------------------------------------------------------------------

kinsol
------



KINSOL interface from the Sundials suite

>List of available options

+---------------------------+-----------------+----------------------------+
|            Id             |      Type       |        Description         |
+===========================+=================+============================+
| abstol                    | OT_DOUBLE       | Stopping criterion         |
|                           |                 | tolerance                  |
+---------------------------+-----------------+----------------------------+
| disable_internal_warnings | OT_BOOL         | Disable KINSOL internal    |
|                           |                 | warning messages           |
+---------------------------+-----------------+----------------------------+
| exact_jacobian            | OT_BOOL         | Use exact Jacobian         |
|                           |                 | information                |
+---------------------------+-----------------+----------------------------+
| f_scale                   | OT_DOUBLEVECTOR | Equation scaling factors   |
+---------------------------+-----------------+----------------------------+
| iterative_solver          | OT_STRING       | gmres|bcgstab|tfqmr        |
+---------------------------+-----------------+----------------------------+
| linear_solver_type        | OT_STRING       | dense|banded|iterative|use |
|                           |                 | r_defined                  |
+---------------------------+-----------------+----------------------------+
| lower_bandwidth           | OT_INT          | Lower bandwidth for banded |
|                           |                 | linear solvers             |
+---------------------------+-----------------+----------------------------+
| max_iter                  | OT_INT          | Maximum number of Newton   |
|                           |                 | iterations. Putting 0 sets |
|                           |                 | the default value of       |
|                           |                 | KinSol.                    |
+---------------------------+-----------------+----------------------------+
| max_krylov                | OT_INT          | Maximum Krylov space       |
|                           |                 | dimension                  |
+---------------------------+-----------------+----------------------------+
| pretype                   | OT_STRING       | Type of preconditioner     |
+---------------------------+-----------------+----------------------------+
| strategy                  | OT_STRING       | Globalization strategy     |
+---------------------------+-----------------+----------------------------+
| u_scale                   | OT_DOUBLEVECTOR | Variable scaling factors   |
+---------------------------+-----------------+----------------------------+
| upper_bandwidth           | OT_INT          | Upper bandwidth for banded |
|                           |                 | linear solvers             |
+---------------------------+-----------------+----------------------------+
| use_preconditioner        | OT_BOOL         | Precondition an iterative  |
|                           |                 | solver                     |
+---------------------------+-----------------+----------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

nlpsol
------





--------------------------------------------------------------------------------





--------------------------------------------------------------------------------

newton
------



Implements simple newton iterations to solve an implicit function.

>List of available options

+-----------------+-----------+--------------------------------------------+
|       Id        |   Type    |                Description                 |
+=================+===========+============================================+
| abstol          | OT_DOUBLE | Stopping criterion tolerance on max(|F|)   |
+-----------------+-----------+--------------------------------------------+
| abstolStep      | OT_DOUBLE | Stopping criterion tolerance on step size  |
+-----------------+-----------+--------------------------------------------+
| max_iter        | OT_INT    | Maximum number of Newton iterations to     |
|                 |           | perform before returning.                  |
+-----------------+-----------+--------------------------------------------+
| print_iteration | OT_BOOL   | Print information about each iteration     |
+-----------------+-----------+--------------------------------------------+

--------------------------------------------------------------------------------



Joel Andersson

";

%feature("docstring")  casadi::isStrictlyMonotone(const std::vector< T > &v)
"

Check if the vector is strictly monotone.

";

%feature("docstring")  casadi::dple_n_in() "

Get the number of QP solver inputs.

";

%feature("docstring")  casadi::casadi_eprintf(const char *fmt,...) "

";

%feature("docstring")  casadi::to_slice(const IM &x, bool ind1=false) "

Convert IM to Slice.

";

%feature("docstring")  casadi::to_slice(const std::vector< int > &v, bool
ind1=false) "

Construct from an index vector (requires is_slice(v) to be true)

";

%feature("docstring")  casadi::dense_copy_stride(int n, int m, const double
*A, double *B, int strideA, int strideB) "

[INTERNAL] ";

%feature("docstring")  casadi::doc_linsol(const std::string &name) "

Get the documentation string for a plugin.

";

%feature("docstring")  casadi::expm_n_in() "

Get the number of expm solver inputs.

";

%feature("docstring")  casadi::conic_in() "

Get input scheme of QP solvers.

";

%feature("docstring")  casadi::conic_in(int ind) "

Get QP solver input scheme name by index.

";

%feature("docstring")  casadi::doc_expm(const std::string &name) "

Get the documentation string for a plugin.

";

%feature("docstring")  casadi::lookupvector(const std::vector< int > &v, int
size) "

Returns a vector for quickly looking up entries of supplied list.

lookupvector[i]!=-1 <=> v contains i v[lookupvector[i]] == i <=> v contains
i

Duplicates are treated by looking up last occurrence

";

%feature("docstring")  casadi::lookupvector(const std::vector< int > &v) "

";

%feature("docstring")  casadi::slicot_mb03vy(int n, int p, int ilo, int ihi,
double *a, int lda1, int lda2, const double *tau, int ldtau, double
*dwork=0, int ldwork=0) "

";

%feature("docstring")  casadi::doc_dple(const std::string &name) "

Get the documentation string for a plugin.

";

%feature("docstring")  casadi::hash_combine(std::size_t &seed, T v) "

Generate a hash value incrementally (function taken from boost)

";

%feature("docstring")  casadi::hash_combine(std::size_t &seed, const int *v,
int sz) "

Generate a hash value incrementally, array.

";

%feature("docstring")  casadi::hash_combine(std::size_t &seed, const
std::vector< int > &v) "

Generate a hash value incrementally (function taken from boost)

";

%feature("docstring")  casadi::casadi_copy_int(const int *x, int n, int *y)
"

[INTERNAL] ";

%feature("docstring")  casadi::has_integrator(const std::string &name) "

Check if a particular plugin is available.

";

%feature("docstring")  casadi::isNonDecreasing(const std::vector< T > &v) "

Check if the vector is non-decreasing.

";

%feature("docstring")  casadi::integrator(const std::string &name, const
std::string &solver, const SXDict &dae, const Dict &opts=Dict()) "

Create an ODE/DAE integrator Solves an initial value problem (IVP) coupled
to a terminal value problem with differential equation given as an implicit
ODE coupled to an algebraic equation and a set of quadratures:



::

  Initial conditions at t=t0
  x(t0)  = x0
  q(t0)  = 0
  
  Forward integration from t=t0 to t=tf
  der(x) = function(x, z, p, t)                  Forward ODE
  0 = fz(x, z, p, t)                  Forward algebraic equations
  der(q) = fq(x, z, p, t)                  Forward quadratures
  
  Terminal conditions at t=tf
  rx(tf)  = rx0
  rq(tf)  = 0
  
  Backward integration from t=tf to t=t0
  der(rx) = gx(rx, rz, rp, x, z, p, t)        Backward ODE
  0 = gz(rx, rz, rp, x, z, p, t)        Backward algebraic equations
  der(rq) = gq(rx, rz, rp, x, z, p, t)        Backward quadratures
  
  where we assume that both the forward and backwards integrations are index-1
  (i.e. dfz/dz, dgz/drz are invertible) and furthermore that
  gx, gz and gq have a linear dependency on rx, rz and rp.



General information
===================



>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| augmented_option | OT_DICT         | Options to be    | casadi::Integrat |
| s                |                 | passed down to   | or               |
|                  |                 | the augmented    |                  |
|                  |                 | integrator, if   |                  |
|                  |                 | one is           |                  |
|                  |                 | constructed.     |                  |
+------------------+-----------------+------------------+------------------+
| common_options   | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | auto-generated   | nction           |
|                  |                 | functions        |                  |
+------------------+-----------------+------------------+------------------+
| expand           | OT_BOOL         | Replace MX with  | casadi::Integrat |
|                  |                 | SX expressions   | or               |
|                  |                 | in problem       |                  |
|                  |                 | formulation      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| grid             | OT_DOUBLEVECTOR | Time grid        | casadi::Integrat |
|                  |                 |                  | or               |
+------------------+-----------------+------------------+------------------+
| monitor          | OT_STRINGVECTOR | Set of user      | casadi::OracleFu |
|                  |                 | problem          | nction           |
|                  |                 | functions to be  |                  |
|                  |                 | monitored        |                  |
+------------------+-----------------+------------------+------------------+
| number_of_finite | OT_INT          | Number of finite | casadi::Integrat |
| _elements        |                 | elements         | or               |
+------------------+-----------------+------------------+------------------+
| output_t0        | OT_BOOL         | Output the state | casadi::Integrat |
|                  |                 | at the initial   | or               |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| print_stats      | OT_BOOL         | Print out        | casadi::Integrat |
|                  |                 | statistics after | or               |
|                  |                 | integration      |                  |
+------------------+-----------------+------------------+------------------+
| rootfinder       | OT_STRING       | An implicit      | casadi::Integrat |
|                  |                 | function solver  | or               |
+------------------+-----------------+------------------+------------------+
| rootfinder_optio | OT_DICT         | Options to be    | casadi::Integrat |
| ns               |                 | passed to the    | or               |
|                  |                 | NLP Solver       |                  |
+------------------+-----------------+------------------+------------------+
| specific_options | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | specific auto-   | nction           |
|                  |                 | generated        |                  |
|                  |                 | functions,       |                  |
|                  |                 | overwriting the  |                  |
|                  |                 | defaults from    |                  |
|                  |                 | common_options.  |                  |
|                  |                 | Nested           |                  |
|                  |                 | dictionary.      |                  |
+------------------+-----------------+------------------+------------------+
| t0               | OT_DOUBLE       | Beginning of the | casadi::Integrat |
|                  |                 | time horizon     | or               |
+------------------+-----------------+------------------+------------------+
| tf               | OT_DOUBLE       | End of the time  | casadi::Integrat |
|                  |                 | horizon          | or               |
+------------------+-----------------+------------------+------------------+

>Input scheme: casadi::IntegratorInput (INTEGRATOR_NUM_IN = 6)

+----------------+-------+-------------------------------------------------+
|   Full name    | Short |                   Description                   |
+================+=======+=================================================+
| INTEGRATOR_X0  | x0    | Differential state at the initial time.         |
+----------------+-------+-------------------------------------------------+
| INTEGRATOR_P   | p     | Parameters.                                     |
+----------------+-------+-------------------------------------------------+
| INTEGRATOR_Z0  | z0    | Initial guess for the algebraic variable.       |
+----------------+-------+-------------------------------------------------+
| INTEGRATOR_RX0 | rx0   | Backward differential state at the final time.  |
+----------------+-------+-------------------------------------------------+
| INTEGRATOR_RP  | rp    | Backward parameter vector.                      |
+----------------+-------+-------------------------------------------------+
| INTEGRATOR_RZ0 | rz0   | Initial guess for the backwards algebraic       |
|                |       | variable.                                       |
+----------------+-------+-------------------------------------------------+

>Output scheme: casadi::IntegratorOutput (INTEGRATOR_NUM_OUT = 6)

+----------------+-------+-------------------------------------------------+
|   Full name    | Short |                   Description                   |
+================+=======+=================================================+
| INTEGRATOR_XF  | xf    | Differential state at the final time.           |
+----------------+-------+-------------------------------------------------+
| INTEGRATOR_QF  | qf    | Quadrature state at the final time.             |
+----------------+-------+-------------------------------------------------+
| INTEGRATOR_ZF  | zf    | Algebraic variable at the final time.           |
+----------------+-------+-------------------------------------------------+
| INTEGRATOR_RXF | rxf   | Backward differential state at the initial      |
|                |       | time.                                           |
+----------------+-------+-------------------------------------------------+
| INTEGRATOR_RQF | rqf   | Backward quadrature state at the initial time.  |
+----------------+-------+-------------------------------------------------+
| INTEGRATOR_RZF | rzf   | Backward algebraic variable at the initial      |
|                |       | time.                                           |
+----------------+-------+-------------------------------------------------+

List of plugins
===============



- cvodes

- idas

- collocation

- rk

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
Integrator.doc(\"myextraplugin\")



--------------------------------------------------------------------------------

cvodes
------



Interface to CVodes from the Sundials suite.

A call to evaluate will integrate to the end.

You can retrieve the entire state trajectory as follows, after the evaluate
call: Call reset. Then call integrate(t_i) and getOuput for a series of
times t_i.

>List of available options

+----------------------------+-----------+---------------------------------+
|             Id             |   Type    |           Description           |
+============================+===========+=================================+
| abstol                     | OT_DOUBLE | Absolute tolerence for the IVP  |
|                            |           | solution                        |
+----------------------------+-----------+---------------------------------+
| disable_internal_warnings  | OT_BOOL   | Disable SUNDIALS internal       |
|                            |           | warning messages                |
+----------------------------+-----------+---------------------------------+
| fsens_all_at_once          | OT_BOOL   | Calculate all right hand sides  |
|                            |           | of the sensitivity equations at |
|                            |           | once                            |
+----------------------------+-----------+---------------------------------+
| fsens_err_con              | OT_BOOL   | include the forward             |
|                            |           | sensitivities in all error      |
|                            |           | controls                        |
+----------------------------+-----------+---------------------------------+
| interpolation_type         | OT_STRING | Type of interpolation for the   |
|                            |           | adjoint sensitivities           |
+----------------------------+-----------+---------------------------------+
| linear_multistep_method    | OT_STRING | Integrator scheme: BDF|adams    |
+----------------------------+-----------+---------------------------------+
| linear_solver              | OT_STRING | A custom linear solver creator  |
|                            |           | function [default: csparse]     |
+----------------------------+-----------+---------------------------------+
| linear_solver_options      | OT_DICT   | Options to be passed to the     |
|                            |           | linear solver                   |
+----------------------------+-----------+---------------------------------+
| max_krylov                 | OT_INT    | Maximum Krylov subspace size    |
+----------------------------+-----------+---------------------------------+
| max_multistep_order        | OT_INT    | Maximum order for the           |
|                            |           | (variable-order) multistep      |
|                            |           | method                          |
+----------------------------+-----------+---------------------------------+
| max_num_steps              | OT_INT    | Maximum number of integrator    |
|                            |           | steps                           |
+----------------------------+-----------+---------------------------------+
| max_order                  | OT_DOUBLE | Maximum order                   |
+----------------------------+-----------+---------------------------------+
| newton_scheme              | OT_STRING | Linear solver scheme in the     |
|                            |           | Newton method:                  |
|                            |           | DIRECT|gmres|bcgstab|tfqmr      |
+----------------------------+-----------+---------------------------------+
| nonlin_conv_coeff          | OT_DOUBLE | Coefficient in the nonlinear    |
|                            |           | convergence test                |
+----------------------------+-----------+---------------------------------+
| nonlinear_solver_iteration | OT_STRING | Nonlinear solver type:          |
|                            |           | NEWTON|functional               |
+----------------------------+-----------+---------------------------------+
| quad_err_con               | OT_BOOL   | Should the quadratures affect   |
|                            |           | the step size control           |
+----------------------------+-----------+---------------------------------+
| reltol                     | OT_DOUBLE | Relative tolerence for the IVP  |
|                            |           | solution                        |
+----------------------------+-----------+---------------------------------+
| second_order_correction    | OT_BOOL   | Second order correction in the  |
|                            |           | augmented system Jacobian       |
|                            |           | [true]                          |
+----------------------------+-----------+---------------------------------+
| sensitivity_method         | OT_STRING | Sensitivity method:             |
|                            |           | SIMULTANEOUS|staggered          |
+----------------------------+-----------+---------------------------------+
| step0                      | OT_DOUBLE | initial step size [default:     |
|                            |           | 0/estimated]                    |
+----------------------------+-----------+---------------------------------+
| steps_per_checkpoint       | OT_INT    | Number of steps between two     |
|                            |           | consecutive checkpoints         |
+----------------------------+-----------+---------------------------------+
| stop_at_end                | OT_BOOL   | Stop the integrator at the end  |
|                            |           | of the interval                 |
+----------------------------+-----------+---------------------------------+
| use_preconditioner         | OT_BOOL   | Precondition the iterative      |
|                            |           | solver [default: true]          |
+----------------------------+-----------+---------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

idas
----



Interface to IDAS from the Sundials suite.

>List of available options

+---------------------------+-----------------+----------------------------+
|            Id             |      Type       |        Description         |
+===========================+=================+============================+
| abstol                    | OT_DOUBLE       | Absolute tolerence for the |
|                           |                 | IVP solution               |
+---------------------------+-----------------+----------------------------+
| abstolv                   | OT_DOUBLEVECTOR | Absolute tolerarance for   |
|                           |                 | each component             |
+---------------------------+-----------------+----------------------------+
| calc_ic                   | OT_BOOL         | Use IDACalcIC to get       |
|                           |                 | consistent initial         |
|                           |                 | conditions.                |
+---------------------------+-----------------+----------------------------+
| calc_icB                  | OT_BOOL         | Use IDACalcIC to get       |
|                           |                 | consistent initial         |
|                           |                 | conditions for backwards   |
|                           |                 | system [default: equal to  |
|                           |                 | calc_ic].                  |
+---------------------------+-----------------+----------------------------+
| cj_scaling                | OT_BOOL         | IDAS scaling on cj for the |
|                           |                 | user-defined linear solver |
|                           |                 | module                     |
+---------------------------+-----------------+----------------------------+
| disable_internal_warnings | OT_BOOL         | Disable SUNDIALS internal  |
|                           |                 | warning messages           |
+---------------------------+-----------------+----------------------------+
| first_time                | OT_DOUBLE       | First requested time as a  |
|                           |                 | fraction of the time       |
|                           |                 | interval                   |
+---------------------------+-----------------+----------------------------+
| fsens_err_con             | OT_BOOL         | include the forward        |
|                           |                 | sensitivities in all error |
|                           |                 | controls                   |
+---------------------------+-----------------+----------------------------+
| init_xdot                 | OT_DOUBLEVECTOR | Initial values for the     |
|                           |                 | state derivatives          |
+---------------------------+-----------------+----------------------------+
| interpolation_type        | OT_STRING       | Type of interpolation for  |
|                           |                 | the adjoint sensitivities  |
+---------------------------+-----------------+----------------------------+
| linear_solver             | OT_STRING       | A custom linear solver     |
|                           |                 | creator function [default: |
|                           |                 | csparse]                   |
+---------------------------+-----------------+----------------------------+
| linear_solver_options     | OT_DICT         | Options to be passed to    |
|                           |                 | the linear solver          |
+---------------------------+-----------------+----------------------------+
| max_krylov                | OT_INT          | Maximum Krylov subspace    |
|                           |                 | size                       |
+---------------------------+-----------------+----------------------------+
| max_multistep_order       | OT_INT          | Maximum order for the      |
|                           |                 | (variable-order) multistep |
|                           |                 | method                     |
+---------------------------+-----------------+----------------------------+
| max_num_steps             | OT_INT          | Maximum number of          |
|                           |                 | integrator steps           |
+---------------------------+-----------------+----------------------------+
| max_order                 | OT_DOUBLE       | Maximum order              |
+---------------------------+-----------------+----------------------------+
| max_step_size             | OT_DOUBLE       | Maximim step size          |
+---------------------------+-----------------+----------------------------+
| newton_scheme             | OT_STRING       | Linear solver scheme in    |
|                           |                 | the Newton method:         |
|                           |                 | DIRECT|gmres|bcgstab|tfqmr |
+---------------------------+-----------------+----------------------------+
| nonlin_conv_coeff         | OT_DOUBLE       | Coefficient in the         |
|                           |                 | nonlinear convergence test |
+---------------------------+-----------------+----------------------------+
| quad_err_con              | OT_BOOL         | Should the quadratures     |
|                           |                 | affect the step size       |
|                           |                 | control                    |
+---------------------------+-----------------+----------------------------+
| reltol                    | OT_DOUBLE       | Relative tolerence for the |
|                           |                 | IVP solution               |
+---------------------------+-----------------+----------------------------+
| second_order_correction   | OT_BOOL         | Second order correction in |
|                           |                 | the augmented system       |
|                           |                 | Jacobian [true]            |
+---------------------------+-----------------+----------------------------+
| sensitivity_method        | OT_STRING       | Sensitivity method:        |
|                           |                 | SIMULTANEOUS|staggered     |
+---------------------------+-----------------+----------------------------+
| step0                     | OT_DOUBLE       | initial step size          |
|                           |                 | [default: 0/estimated]     |
+---------------------------+-----------------+----------------------------+
| steps_per_checkpoint      | OT_INT          | Number of steps between    |
|                           |                 | two consecutive            |
|                           |                 | checkpoints                |
+---------------------------+-----------------+----------------------------+
| stop_at_end               | OT_BOOL         | Stop the integrator at the |
|                           |                 | end of the interval        |
+---------------------------+-----------------+----------------------------+
| suppress_algebraic        | OT_BOOL         | Suppress algebraic         |
|                           |                 | variables in the error     |
|                           |                 | testing                    |
+---------------------------+-----------------+----------------------------+
| use_preconditioner        | OT_BOOL         | Precondition the iterative |
|                           |                 | solver [default: true]     |
+---------------------------+-----------------+----------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

collocation
-----------



Fixed-step implicit Runge-Kutta integrator ODE/DAE integrator based on
collocation schemes

The method is still under development

>List of available options

+---------------------------+-----------------+----------------------------+
|            Id             |      Type       |        Description         |
+===========================+=================+============================+
| augmented_options         | OT_DICT         | Options to be passed down  |
|                           |                 | to the augmented           |
|                           |                 | integrator, if one is      |
|                           |                 | constructed.               |
+---------------------------+-----------------+----------------------------+
| collocation_scheme        | OT_STRING       | Collocation scheme:        |
|                           |                 | radau|legendre             |
+---------------------------+-----------------+----------------------------+
| expand                    | OT_BOOL         | Replace MX with SX         |
|                           |                 | expressions in problem     |
|                           |                 | formulation [false]        |
+---------------------------+-----------------+----------------------------+
| grid                      | OT_DOUBLEVECTOR | Time grid                  |
+---------------------------+-----------------+----------------------------+
| interpolation_order       | OT_INT          | Order of the interpolating |
|                           |                 | polynomials                |
+---------------------------+-----------------+----------------------------+
| number_of_finite_elements | OT_INT          | Number of finite elements  |
+---------------------------+-----------------+----------------------------+
| output_t0                 | OT_BOOL         | Output the state at the    |
|                           |                 | initial time               |
+---------------------------+-----------------+----------------------------+
| print_stats               | OT_BOOL         | Print out statistics after |
|                           |                 | integration                |
+---------------------------+-----------------+----------------------------+
| rootfinder                | OT_STRING       | An implicit function       |
|                           |                 | solver                     |
+---------------------------+-----------------+----------------------------+
| rootfinder_options        | OT_DICT         | Options to be passed to    |
|                           |                 | the NLP Solver             |
+---------------------------+-----------------+----------------------------+
| t0                        | OT_DOUBLE       | Beginning of the time      |
|                           |                 | horizon                    |
+---------------------------+-----------------+----------------------------+
| tf                        | OT_DOUBLE       | End of the time horizon    |
+---------------------------+-----------------+----------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

rk --



Fixed-step explicit Runge-Kutta integrator for ODEs Currently implements
RK4.

The method is still under development

--------------------------------------------------------------------------------



Joel Andersson

";

%feature("docstring")  casadi::integrator(const std::string &name, const
std::string &solver, const MXDict &dae, const Dict &opts=Dict()) "

";

%feature("docstring")  casadi::integrator_out() "

Get integrator output scheme of integrators.

";

%feature("docstring")  casadi::integrator_out(int ind) "

Get output scheme name by index.

";

%feature("docstring")  casadi::has_dple(const std::string &name) "

Check if a particular plugin is available.

";

%feature("docstring") casadi::_jtimes "

[INTERNAL] ";

%feature("docstring")  casadi::dense_mul_nn(int n, int m, int l, const
double *A, const double *B, double *C) "

[INTERNAL] ";

%feature("docstring")  casadi::load_interpolant(const std::string &name) "

Explicitly load a plugin dynamically.

";

%feature("docstring")  casadi::casadi_printf(const char *fmt,...) "

";

%feature("docstring")  casadi::integrator_n_in() "

Get the number of integrator inputs.

";

%feature("docstring")  casadi::collocation_points(int order, const
std::string &scheme="radau") "

Obtain collocation points of specific order and scheme.

Parameters:
-----------

scheme:  'radau' or 'legendre'

";

%feature("docstring")  casadi::conic(const std::string &name, const
std::string &solver, const SpDict &qp, const Dict &opts=Dict()) "

Create a QP solver Solves the following strictly convex problem:



::

  min          1/2 x' H x + g' x
  x
  
  subject to
  LBA <= A x <= UBA
  LBX <= x   <= UBX
  
  with :
  H sparse (n x n) positive definite
  g dense  (n x 1)
  
  n: number of decision variables (x)
  nc: number of constraints (A)



If H is not positive-definite, the solver should throw an error.

General information
===================



>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| discrete         | OT_BOOLVECTOR   | Indicates which  | casadi::Conic    |
|                  |                 | of the variables |                  |
|                  |                 | are discrete,    |                  |
|                  |                 | i.e. integer-    |                  |
|                  |                 | valued           |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Custom input     | casadi::Function |
|                  |                 | scheme           | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Custom output    | casadi::Function |
|                  |                 | scheme           | Internal         |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

>Input scheme: casadi::ConicInput (CONIC_NUM_IN = 10)

+--------------+--------+--------------------------------------------------+
|  Full name   | Short  |                   Description                    |
+==============+========+==================================================+
| CONIC_H      | h      | The square matrix H: sparse, (n x n). Only the   |
|              |        | lower triangular part is actually used. The      |
|              |        | matrix is assumed to be symmetrical.             |
+--------------+--------+--------------------------------------------------+
| CONIC_G      | g      | The vector g: dense, (n x 1)                     |
+--------------+--------+--------------------------------------------------+
| CONIC_A      | a      | The matrix A: sparse, (nc x n) - product with x  |
|              |        | must be dense.                                   |
+--------------+--------+--------------------------------------------------+
| CONIC_LBA    | lba    | dense, (nc x 1)                                  |
+--------------+--------+--------------------------------------------------+
| CONIC_UBA    | uba    | dense, (nc x 1)                                  |
+--------------+--------+--------------------------------------------------+
| CONIC_LBX    | lbx    | dense, (n x 1)                                   |
+--------------+--------+--------------------------------------------------+
| CONIC_UBX    | ubx    | dense, (n x 1)                                   |
+--------------+--------+--------------------------------------------------+
| CONIC_X0     | x0     | dense, (n x 1)                                   |
+--------------+--------+--------------------------------------------------+
| CONIC_LAM_X0 | lam_x0 | dense                                            |
+--------------+--------+--------------------------------------------------+
| CONIC_LAM_A0 | lam_a0 | dense                                            |
+--------------+--------+--------------------------------------------------+

>Output scheme: casadi::ConicOutput (CONIC_NUM_OUT = 4)

+-------------+-------+---------------------------------------------------+
|  Full name  | Short |                    Description                    |
+=============+=======+===================================================+
| CONIC_X     | x     | The primal solution.                              |
+-------------+-------+---------------------------------------------------+
| CONIC_COST  | cost  | The optimal cost.                                 |
+-------------+-------+---------------------------------------------------+
| CONIC_LAM_A | lam_a | The dual solution corresponding to linear bounds. |
+-------------+-------+---------------------------------------------------+
| CONIC_LAM_X | lam_x | The dual solution corresponding to simple bounds. |
+-------------+-------+---------------------------------------------------+

List of plugins
===============



- clp

- cplex

- gurobi

- hpmpc

- ooqp

- qpoases

- sqic

- nlpsol

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
Conic.doc(\"myextraplugin\")



--------------------------------------------------------------------------------

clp
---



Interface to Clp solver for sparse Quadratic Programs

--------------------------------------------------------------------------------





--------------------------------------------------------------------------------

cplex
-----



Interface to Cplex solver for sparse Quadratic Programs

>List of available options

+---------------+-----------+----------------------------------------------+
|      Id       |   Type    |                 Description                  |
+===============+===========+==============================================+
| cplex         | OT_DICT   | Options to be passed to CPLEX                |
+---------------+-----------+----------------------------------------------+
| dep_check     | OT_INT    | Detect redundant constraints.                |
+---------------+-----------+----------------------------------------------+
| dump_filename | OT_STRING | The filename to dump to.                     |
+---------------+-----------+----------------------------------------------+
| dump_to_file  | OT_BOOL   | Dumps QP to file in CPLEX format.            |
+---------------+-----------+----------------------------------------------+
| qp_method     | OT_INT    | Determines which CPLEX algorithm to use.     |
+---------------+-----------+----------------------------------------------+
| tol           | OT_DOUBLE | Tolerance of solver                          |
+---------------+-----------+----------------------------------------------+
| warm_start    | OT_BOOL   | Use warm start with simplex methods (affects |
|               |           | only the simplex methods).                   |
+---------------+-----------+----------------------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

gurobi
------



Interface to the GUROBI Solver for quadratic programming

>List of available options

+-------+-----------------+------------------------------------------------+
|  Id   |      Type       |                  Description                   |
+=======+=================+================================================+
| vtype | OT_STRINGVECTOR | Type of variables:                             |
|       |                 | [CONTINUOUS|binary|integer|semicont|semiint]   |
+-------+-----------------+------------------------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

hpmpc
-----



Interface to HMPC Solver

In order to use this interface, you must:

Decision variables must only by state and control, and the variable ordering
must be [x0 u0 x1 u1 ...]

The constraints must be in order: [ gap0 lincon0 gap1 lincon1 ]

gap: Ak+1 = Ak xk + Bk uk lincon: yk= Ck xk + Dk uk



::

         A0 B0 -I
         C0 D0
                A1 B1 -I
                C1 D1



where I must be a diagonal sparse matrix Either supply all of N, nx, ng, nu
options or rely on automatic detection

>List of available options

+----------------+--------------+------------------------------------------+
|       Id       |     Type     |               Description                |
+================+==============+==========================================+
| N              | OT_INT       | OCP horizon                              |
+----------------+--------------+------------------------------------------+
| blasfeo_target | OT_STRING    | hpmpc target                             |
+----------------+--------------+------------------------------------------+
| inf            | OT_DOUBLE    | HPMPC cannot handle infinities.          |
|                |              | Infinities will be replaced by this      |
|                |              | option's value.                          |
+----------------+--------------+------------------------------------------+
| max_iter       | OT_INT       | Max number of iterations                 |
+----------------+--------------+------------------------------------------+
| mu0            | OT_DOUBLE    | Max element in cost function as estimate |
|                |              | of max multiplier                        |
+----------------+--------------+------------------------------------------+
| ng             | OT_INTVECTOR | Number of non-dynamic constraints,       |
|                |              | length N+1                               |
+----------------+--------------+------------------------------------------+
| nu             | OT_INTVECTOR | Number of controls, length N             |
+----------------+--------------+------------------------------------------+
| nx             | OT_INTVECTOR | Number of states, length N+1             |
+----------------+--------------+------------------------------------------+
| target         | OT_STRING    | hpmpc target                             |
+----------------+--------------+------------------------------------------+
| tol            | OT_DOUBLE    | Tolerance in the duality measure         |
+----------------+--------------+------------------------------------------+
| warm_start     | OT_BOOL      | Use warm-starting                        |
+----------------+--------------+------------------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

ooqp
----



Interface to the OOQP Solver for quadratic programming The current
implementation assumes that OOQP is configured with the MA27 sparse linear
solver.

NOTE: when doing multiple calls to evaluate(), check if you need to
reInit();

>List of available options

+-------------+-----------+------------------------------------------------+
|     Id      |   Type    |                  Description                   |
+=============+===========+================================================+
| artol       | OT_DOUBLE | tolerance as provided with setArTol to OOQP    |
+-------------+-----------+------------------------------------------------+
| mutol       | OT_DOUBLE | tolerance as provided with setMuTol to OOQP    |
+-------------+-----------+------------------------------------------------+
| print_level | OT_INT    | Print level. OOQP listens to print_level 0, 10 |
|             |           | and 100                                        |
+-------------+-----------+------------------------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

qpoases
-------



Interface to QPOases Solver for quadratic programming

>List of available options

+-------------------------------+-----------+------------------------------+
|              Id               |   Type    |         Description          |
+===============================+===========+==============================+
| CPUtime                       | OT_DOUBLE | The maximum allowed CPU time |
|                               |           | in seconds for the whole     |
|                               |           | initialisation (and the      |
|                               |           | actually required one on     |
|                               |           | output). Disabled if unset.  |
+-------------------------------+-----------+------------------------------+
| boundRelaxation               | OT_DOUBLE | Initial relaxation of bounds |
|                               |           | to start homotopy and        |
|                               |           | initial value for far        |
|                               |           | bounds.                      |
+-------------------------------+-----------+------------------------------+
| boundTolerance                | OT_DOUBLE | If upper and lower bounds    |
|                               |           | differ less than this        |
|                               |           | tolerance, they are regarded |
|                               |           | equal, i.e. as equality      |
|                               |           | constraint.                  |
+-------------------------------+-----------+------------------------------+
| enableCholeskyRefactorisation | OT_INT    | Specifies the frequency of a |
|                               |           | full re-factorisation of     |
|                               |           | projected Hessian matrix: 0: |
|                               |           | turns them off, 1: uses them |
|                               |           | at each iteration etc.       |
+-------------------------------+-----------+------------------------------+
| enableDriftCorrection         | OT_INT    | Specifies the frequency of   |
|                               |           | drift corrections: 0: turns  |
|                               |           | them off.                    |
+-------------------------------+-----------+------------------------------+
| enableEqualities              | OT_BOOL   | Specifies whether equalities |
|                               |           | should be treated as always  |
|                               |           | active (True) or not (False) |
+-------------------------------+-----------+------------------------------+
| enableFarBounds               | OT_BOOL   | Enables the use of far       |
|                               |           | bounds.                      |
+-------------------------------+-----------+------------------------------+
| enableFlippingBounds          | OT_BOOL   | Enables the use of flipping  |
|                               |           | bounds.                      |
+-------------------------------+-----------+------------------------------+
| enableFullLITests             | OT_BOOL   | Enables condition-hardened   |
|                               |           | (but more expensive) LI      |
|                               |           | test.                        |
+-------------------------------+-----------+------------------------------+
| enableInertiaCorrection       | OT_BOOL   | Should working set be        |
|                               |           | repaired when negative       |
|                               |           | curvature is discovered      |
|                               |           | during hotstart.             |
+-------------------------------+-----------+------------------------------+
| enableNZCTests                | OT_BOOL   | Enables nonzero curvature    |
|                               |           | tests.                       |
+-------------------------------+-----------+------------------------------+
| enableRamping                 | OT_BOOL   | Enables ramping.             |
+-------------------------------+-----------+------------------------------+
| enableRegularisation          | OT_BOOL   | Enables automatic Hessian    |
|                               |           | regularisation.              |
+-------------------------------+-----------+------------------------------+
| epsDen                        | OT_DOUBLE | Denominator tolerance for    |
|                               |           | ratio tests.                 |
+-------------------------------+-----------+------------------------------+
| epsFlipping                   | OT_DOUBLE | Tolerance of squared         |
|                               |           | Cholesky diagonal factor     |
|                               |           | which triggers flipping      |
|                               |           | bound.                       |
+-------------------------------+-----------+------------------------------+
| epsIterRef                    | OT_DOUBLE | Early termination tolerance  |
|                               |           | for iterative refinement.    |
+-------------------------------+-----------+------------------------------+
| epsLITests                    | OT_DOUBLE | Tolerance for linear         |
|                               |           | independence tests.          |
+-------------------------------+-----------+------------------------------+
| epsNZCTests                   | OT_DOUBLE | Tolerance for nonzero        |
|                               |           | curvature tests.             |
+-------------------------------+-----------+------------------------------+
| epsNum                        | OT_DOUBLE | Numerator tolerance for      |
|                               |           | ratio tests.                 |
+-------------------------------+-----------+------------------------------+
| epsRegularisation             | OT_DOUBLE | Scaling factor of identity   |
|                               |           | matrix used for Hessian      |
|                               |           | regularisation.              |
+-------------------------------+-----------+------------------------------+
| finalRamping                  | OT_DOUBLE | Final value for ramping      |
|                               |           | strategy.                    |
+-------------------------------+-----------+------------------------------+
| growFarBounds                 | OT_DOUBLE | Factor to grow far bounds.   |
+-------------------------------+-----------+------------------------------+
| hessian_type                  | OT_STRING | Type of Hessian - see        |
|                               |           | qpOASES documentation [UNKNO |
|                               |           | WN|posdef|semidef|indef|zero |
|                               |           | |identity]]                  |
+-------------------------------+-----------+------------------------------+
| initialFarBounds              | OT_DOUBLE | Initial size for far bounds. |
+-------------------------------+-----------+------------------------------+
| initialRamping                | OT_DOUBLE | Start value for ramping      |
|                               |           | strategy.                    |
+-------------------------------+-----------+------------------------------+
| initialStatusBounds           | OT_STRING | Initial status of bounds at  |
|                               |           | first iteration.             |
+-------------------------------+-----------+------------------------------+
| linsol_plugin                 | OT_STRING | Linear solver plugin         |
+-------------------------------+-----------+------------------------------+
| maxDualJump                   | OT_DOUBLE | Maximum allowed jump in dual |
|                               |           | variables in linear          |
|                               |           | independence tests.          |
+-------------------------------+-----------+------------------------------+
| maxPrimalJump                 | OT_DOUBLE | Maximum allowed jump in      |
|                               |           | primal variables in nonzero  |
|                               |           | curvature tests.             |
+-------------------------------+-----------+------------------------------+
| max_schur                     | OT_INT    | Maximal number of Schur      |
|                               |           | updates [75]                 |
+-------------------------------+-----------+------------------------------+
| nWSR                          | OT_INT    | The maximum number of        |
|                               |           | working set recalculations   |
|                               |           | to be performed during the   |
|                               |           | initial homotopy. Default is |
|                               |           | 5(nx + nc)                   |
+-------------------------------+-----------+------------------------------+
| numRefinementSteps            | OT_INT    | Maximum number of iterative  |
|                               |           | refinement steps.            |
+-------------------------------+-----------+------------------------------+
| numRegularisationSteps        | OT_INT    | Maximum number of successive |
|                               |           | regularisation steps.        |
+-------------------------------+-----------+------------------------------+
| printLevel                    | OT_STRING | Defines the amount of text   |
|                               |           | output during QP solution,   |
|                               |           | see Section 5.7              |
+-------------------------------+-----------+------------------------------+
| schur                         | OT_BOOL   | Use Schur Complement         |
|                               |           | Approach [false]             |
+-------------------------------+-----------+------------------------------+
| sparse                        | OT_BOOL   | Formulate the QP using       |
|                               |           | sparse matrices. [false]     |
+-------------------------------+-----------+------------------------------+
| terminationTolerance          | OT_DOUBLE | Relative termination         |
|                               |           | tolerance to stop homotopy.  |
+-------------------------------+-----------+------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

sqic
----



Interface to the SQIC solver for quadratic programming

--------------------------------------------------------------------------------





--------------------------------------------------------------------------------

nlpsol
------



Solve QPs using an Nlpsol Use the 'nlpsol' option to specify the NLP solver
to use.

>List of available options

+----------------+-----------+---------------------------------+
|       Id       |   Type    |           Description           |
+================+===========+=================================+
| nlpsol         | OT_STRING | Name of solver.                 |
+----------------+-----------+---------------------------------+
| nlpsol_options | OT_DICT   | Options to be passed to solver. |
+----------------+-----------+---------------------------------+

--------------------------------------------------------------------------------



Joel Andersson

";

%feature("docstring")  casadi::doc_integrator(const std::string &name) "

Get the documentation string for a plugin.

";

%feature("docstring")  casadi::simpleIRK(Function f, int N=10, int order=4,
const std::string &scheme="radau", const std::string &solver="newton", const
Dict &solver_options=Dict()) "

Construct an implicit Runge-Kutta integrator using a collocation scheme The
constructed function has three inputs, corresponding to initial state (x0),
parameter (p) and integration time (h) and one output, corresponding to
final state (xf).

Parameters:
-----------

f:  ODE function with two inputs (x and p) and one output (xdot)

N:  Number of integrator steps

order:  Order of interpolating polynomials

scheme:   Collocation scheme, as excepted by collocationPoints function.

";

%feature("docstring")  casadi::ptrVec(std::vector< T > &v) "

[INTERNAL]  Convenience function, convert vectors to vectors of pointers.

";

%feature("docstring")  casadi::ptrVec(const std::vector< T > &v) "

[INTERNAL]  Convenience function, convert vectors to vectors of pointers.

";

%feature("docstring")  casadi::ptrVec(std::vector< std::vector< T > > &v) "

[INTERNAL]  Convenience function, convert vectors to vectors of pointers.

";

%feature("docstring")  casadi::ptrVec(const std::vector< std::vector< T > >
&v) "

[INTERNAL]  Convenience function, convert vectors to vectors of pointers.

";

%feature("docstring")  casadi::nlpsol_option_type(const std::string &name,
const std::string &op) "

Get type info for a particular option.

";

%feature("docstring")  casadi::casadi_axpy(int n, T1 alpha, const T1 *x, T1
*y) "

[INTERNAL]  AXPY: y <- a*x + y.

";

%feature("docstring")  casadi::has_nlpsol(const std::string &name) "

Check if a particular plugin is available.

";

%feature("docstring")  casadi::casadi_getu(const T1 *x, const int *sp_x, T1
*v) "

[INTERNAL]  Get the nonzeros for the upper triangular half.

";

%feature("docstring")  casadi::doc_nlpsol(const std::string &name) "

Get the documentation string for a plugin.

";

%feature("docstring")  casadi::qpsol(const std::string &name, const
std::string &solver, const SXDict &qp, const Dict &opts=Dict()) "

";

%feature("docstring")  casadi::qpsol(const std::string &name, const
std::string &solver, const MXDict &qp, const Dict &opts=Dict()) "

";

%feature("docstring")  casadi::zip(const std::vector< std::string > &id,
const std::vector< T > &mat) "

[INTERNAL] ";

%feature("docstring")  casadi::slicot_mb03wd(char job, char compz, int n,
int p, int ilo, int ihi, int iloz, int ihiz, double *h, int ldh1, int ldh2,
double *z, int ldz1, int ldz2, double *wr, double *wi, double *dwork=0, int
ldwork=0) "

";

%feature("docstring")  casadi::casadi_max_viol(int n, const T1 *x, const T1
*lb, const T1 *ub) "

[INTERNAL]  Largest bound violation.

";

%feature("docstring")  casadi::collocation_interpolators(const std::vector<
double > &tau_root, std::vector< std::vector< double > > &output_C,
std::vector< double > &output_D) "

Obtain collocation interpolating matrices.

Parameters:
-----------

tau_root:  location of collocation points, as obtained from
collocation_points

C:  interpolating coefficients to obtain derivatives Length: order+1, order
+ 1



::

dX/dt @collPoint(j) ~ Sum_i C[j][i]*X@collPoint(i)



Parameters:
-----------

D:  interpolating coefficients to obtain end state Length: order+1

";

%feature("docstring")  casadi::replaceMat(const M &arg, const Sparsity &inp,
bool hcat=false) "

[INTERNAL] ";

%feature("docstring")  casadi::isMonotone(const std::vector< T > &v) "

Check if the vector is monotone.

";

%feature("docstring")  casadi::nlpsol_n_in() "

Number of NLP solver inputs.

";

%feature("docstring")  casadi::matrixName() "

Get typename.

";

%feature("docstring")  casadi::load_dple(const std::string &name) "

Explicitly load a plugin dynamically.

";

%feature("docstring")  casadi::integrator_in() "

Get input scheme of integrators.

";

%feature("docstring")  casadi::integrator_in(int ind) "

Get integrator input scheme name by index.

";

%feature("docstring")  casadi::is_regular(const std::vector< T > &v) "

Checks if array does not contain NaN or Inf.

";

%feature("docstring")  casadi::is_regular(N_Vector v) "

[INTERNAL] ";

%feature("docstring")  casadi::getcopy(const A &a, std::map<
SharedObjectInternal *, SharedObject > &already_copied) "

[INTERNAL] ";

%feature("docstring")  casadi::nlpsol_option_info(const std::string &name,
const std::string &op) "

Get documentation for a particular option.

";

%feature("docstring")  casadi::read_matlab(std::istream &stream,
std::vector< T > &v) "

Read vector, matlab style.

";

%feature("docstring")  casadi::read_matlab(std::ifstream &file, std::vector<
std::vector< T > > &v) "

Read matrix, matlab style.

";

%feature("docstring")  casadi::hash_value(T v) "

Hash value of an integer.

";

%feature("docstring")  casadi::casadi_polyval(const T1 *p, int n, T1 x) "

[INTERNAL]  Evaluate a polynomial.

";

%feature("docstring")  casadi::casadi_fill_int(int *x, int n, int alpha) "

[INTERNAL] ";

%feature("docstring")  casadi::dense_mul_nt(int n, int m, int l, const
double *A, const double *B, double *C) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_flip(int *corner, int ndim) "

[INTERNAL] ";

%feature("docstring")  casadi::simpleIntegrator(Function f, const
std::string &integrator="cvodes", const Dict &integrator_options=Dict()) "

Simplified wrapper for the Integrator class Constructs an integrator using
the same syntax as simpleRK and simpleIRK. The constructed function has
three inputs, corresponding to initial state (x0), parameter (p) and
integration time (h) and one output, corresponding to final state (xf).

Parameters:
-----------

f:  ODE function with two inputs (x and p) and one output (xdot)

N:  Number of integrator steps

order:  Order of interpolating polynomials

scheme:   Collocation scheme, as excepted by collocationPoints function.

";

%feature("docstring")  casadi::casadi_interpn_interpolate(int ndim, const
int *offset, const T1 *values, const T1 *alpha, const int *index, const int
*corner, T1 *coeff) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_copy(const T1 *x, int n, T1 *y) "

[INTERNAL]  COPY: y <-x.

";

%feature("docstring")  casadi::slicot_mb03vd(int n, int p, int ilo, int ihi,
double *a, int lda1, int lda2, double *tau, int ldtau, double *dwork=0) "

";

%feature("docstring")  casadi::nlpsol_default_in(int ind) "

Default input for an NLP solver.

";

%feature("docstring")  casadi::nlpsol_default_in() "

Default input for an NLP solver.

";

%feature("docstring")  casadi::einstein_process(const T &A, const T &B,
const T &C, const std::vector< int > &dim_a, const std::vector< int >
&dim_b, const std::vector< int > &dim_c, const std::vector< int > &a, const
std::vector< int > &b, const std::vector< int > &c, std::vector< int >
&iter_dims, std::vector< int > &strides_a, std::vector< int > &strides_b,
std::vector< int > &strides_c) "

";

%feature("docstring")  casadi::casadi_interpn_weights(int ndim, const T1
*grid, const int *offset, const T1 *x, T1 *alpha, int *index) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_interpn_weights(int ndim, const T1
*grid, const int *offset, const T1 *x, T1 *alpha, int *index, const int
*lookup_mode) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_norm_inf(int n, const T1 *x) "

[INTERNAL]  Inf-norm of a vector * Returns the largest element in absolute
value

";

%feature("docstring")  casadi::slicot_mb05nd(int n, double delta, const
double *a, int lda, double *ex, int ldex, double *exint, int ldexin, double
tol, int *iwork, double *dwork, int ldwork) "

";

%feature("docstring")  casadi::has_rootfinder(const std::string &name) "

Check if a particular plugin is available.

";

%feature("docstring")  casadi::conic_n_out() "

Get the number of QP solver outputs.

";

%feature("docstring")  casadi::casadi_project(const T1 *x, const int *sp_x,
T1 *y, const int *sp_y, T1 *w) "

[INTERNAL]  Sparse copy: y <- x, w work vector (length >= number of rows)

";

%feature("docstring")  casadi::matrixName< int >() "

Get typename.

";

%feature("docstring")  casadi::interpolant(const std::string &name, const
std::string &solver, const std::vector< std::vector< double > > &grid, const
std::vector< double > &values, const Dict &opts=Dict()) "

An interpolant function for lookup table data

General information
===================



List of plugins
===============



- bspline

- linear

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
Interpolant.doc(\"myextraplugin\")



--------------------------------------------------------------------------------

bspline
-------



>List of available options

+---------------+--------------+-------------------------------------------+
|      Id       |     Type     |                Description                |
+===============+==============+===========================================+
| degree        | OT_INTVECTOR | Sets, for each grid dimenion, the degree  |
|               |              | of the spline.                            |
+---------------+--------------+-------------------------------------------+
| linear_solver | OT_STRING    | Solver used for constructing the          |
|               |              | coefficient tensor.                       |
+---------------+--------------+-------------------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

linear
------



>List of available options

+-------------+-----------------+------------------------------------------+
|     Id      |      Type       |               Description                |
+=============+=================+==========================================+
| lookup_mode | OT_STRINGVECTOR | Sets, for each grid dimenion, the lookup |
|             |                 | algorithm used to find the correct       |
|             |                 | index. 'linear' uses a for-loop + break; |
|             |                 | 'exact' uses floored division (only for  |
|             |                 | uniform grids).                          |
+-------------+-----------------+------------------------------------------+

--------------------------------------------------------------------------------



Joel Andersson

";

%feature("docstring")  casadi::dplesol(const std::string &name, const
std::string &solver, const SpDict &qp, const Dict &opts=Dict()) "

Discrete periodic Lyapunov Equation solver Given matrices $A_k$ and
symmetric $V_k, k = 0..K-1$

::

  A_k in R^(n x n)
  V_k in R^n
  

provides all of $P_k$ that satisfy:

::

  P_0 = A_(K-1)*P_(K-1)*A_(K-1)' + V_k
  P_k+1 = A_k*P_k*A_k' + V_k  for k = 1..K-1
  



General information
===================



>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| const_dim        | OT_BOOL         | Assume constant  | casadi::Dple     |
|                  |                 | dimension of P   |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| eps_unstable     | OT_DOUBLE       | A margin for     | casadi::Dple     |
|                  |                 | unstability      |                  |
|                  |                 | detection        |                  |
+------------------+-----------------+------------------+------------------+
| error_unstable   | OT_BOOL         | Throw an         | casadi::Dple     |
|                  |                 | exception when   |                  |
|                  |                 | it is detected   |                  |
|                  |                 | that             |                  |
|                  |                 | Product(A_i,     |                  |
|                  |                 | i=N..1)has       |                  |
|                  |                 | eigenvalues      |                  |
|                  |                 | greater than     |                  |
|                  |                 | 1-eps_unstable   |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Custom input     | casadi::Function |
|                  |                 | scheme           | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Custom output    | casadi::Function |
|                  |                 | scheme           | Internal         |
+------------------+-----------------+------------------+------------------+
| pos_def          | OT_BOOL         | Assume P         | casadi::Dple     |
|                  |                 | positive         |                  |
|                  |                 | definite         |                  |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

>Input scheme: casadi::DpleInput (DPLE_NUM_IN = 2)

+-----------+-------+------------------------------------------------------+
| Full name | Short |                     Description                      |
+===========+=======+======================================================+
| DPLE_A    | a     | A matrices (horzcat when const_dim, diagcat          |
|           |       | otherwise) [a].                                      |
+-----------+-------+------------------------------------------------------+
| DPLE_V    | v     | V matrices (horzcat when const_dim, diagcat          |
|           |       | otherwise) [v].                                      |
+-----------+-------+------------------------------------------------------+

>Output scheme: casadi::DpleOutput (DPLE_NUM_OUT = 1)

+-----------+-------+------------------------------------------------------+
| Full name | Short |                     Description                      |
+===========+=======+======================================================+
| DPLE_P    | p     | Lyapunov matrix (horzcat when const_dim, diagcat     |
|           |       | otherwise) (Cholesky of P if pos_def) [p].           |
+-----------+-------+------------------------------------------------------+

List of plugins
===============



- slicot

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
Dple.doc(\"myextraplugin\")



--------------------------------------------------------------------------------

slicot
------



An efficient solver for Discrete Periodic Lyapunov Equations using SLICOT

Uses Periodic Schur Decomposition ('psd') and does not assume positive
definiteness. Based on Periodic Lyapunov equations: some applications and
new algorithms. Int. J. Control, vol. 67, pp. 69-87, 1997.

Overview of the method: J. Gillis Practical Methods for Approximate Robust
Periodic Optimal Control ofNonlinear Mechanical Systems, PhD Thesis,
KULeuven, 2015

>List of available options

+-----------------------+-----------+--------------------------------------+
|          Id           |   Type    |             Description              |
+=======================+===========+======================================+
| linear_solver         | OT_STRING | User-defined linear solver class.    |
|                       |           | Needed for sensitivities.            |
+-----------------------+-----------+--------------------------------------+
| linear_solver_options | OT_DICT   | Options to be passed to the linear   |
|                       |           | solver.                              |
+-----------------------+-----------+--------------------------------------+
| psd_num_zero          | OT_DOUBLE | Numerical zero used in Periodic      |
|                       |           | Schur decomposition with slicot.This |
|                       |           | option is needed when your systems   |
|                       |           | has Floquet multiplierszero or close |
|                       |           | to zero                              |
+-----------------------+-----------+--------------------------------------+

--------------------------------------------------------------------------------



Joris Gillis

";

%feature("docstring")  casadi::dplesol(const MX &A, const MX &V, const
std::string &solver, const Dict &opts=Dict()) "

";

%feature("docstring")  casadi::dplesol(const MXVector &A, const MXVector &V,
const std::string &solver, const Dict &opts=Dict()) "

";

%feature("docstring")  casadi::dplesol(const DMVector &A, const DMVector &V,
const std::string &solver, const Dict &opts=Dict()) "

";

%feature("docstring")  casadi::is_slice(const IM &x, bool ind1=false) "

Is the IM a Slice.

";

%feature("docstring")  casadi::is_slice(const std::vector< int > &v, bool
ind1=false) "

Check if an index vector can be represented more efficiently as a slice.

";

%feature("docstring")  casadi::isIncreasing(const std::vector< T > &v) "

Check if the vector is strictly increasing.

";

%feature("docstring")  casadi::doc_conic(const std::string &name) "

Get the documentation string for a plugin.

";

%feature("docstring")  casadi::casadi_dot(int n, const T1 *x, const T1 *y) "

[INTERNAL]  Inner product.

";

%feature("docstring")  casadi::casadi_de_boor(T1 x, const T1 *knots, int
n_knots, int degree, T1 *boor) "

[INTERNAL] ";

%feature("docstring")  casadi::has_conic(const std::string &name) "

Check if a particular plugin is available.

";

%feature("docstring")  casadi::load_conic(const std::string &name) "

Explicitly load a plugin dynamically.

";

%feature("docstring")  casadi::jit(const std::string &name, int n_in, int
n_out, const std::string &body, const Dict &opts=Dict()) "

Create a just-in-time compiled function from a C/C++ language string The
function can an arbitrary number of inputs and outputs that must all be
scalar-valued. Only specify the function body, assuming that the inputs are
stored in an array named 'arg' and the outputs stored in an array named
'res'. The data type used must be 'real_t', which is typically equal to
'double` or another data type with the same API as 'double'.

The final generated function will have a structure similar to:

void fname(const real_t* arg, real_t* res) { <FUNCTION_BODY> }

";

%feature("docstring")  casadi::combine(const Dict &first, const Dict
&second) "

[INTERNAL]  Combine two dictionaries, giving priority to first one.

";

%feature("docstring")  casadi::dple_n_out() "

Get the number of QP solver outputs.

";

%feature("docstring")  casadi::casadi_low(T1 x, const double *grid, int ng,
int lookup_mode) "

[INTERNAL] ";

%feature("docstring")  casadi::load_rootfinder(const std::string &name) "

Explicitly load a plugin dynamically.

";

%feature("docstring")  casadi::casadi_mv(const T1 *x, const int *sp_x, const
T1 *y, T1 *z, int tr) "

[INTERNAL]  Sparse matrix-vector multiplication: z <- z + x*y.

";

%feature("docstring")  casadi::casadi_norm_2(int n, const T1 *x) "

[INTERNAL]  NORM_2: ||x||_2 -> return.

";

%feature("docstring")  casadi::dense_kron_stride(int n, int m, const double
*A, const double *B, double *C, int strideA, int strideB, int strideC) "

[INTERNAL] ";

%feature("docstring") casadi::_which_depends "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_bilin(const T1 *A, const int *sp_A,
const T1 *x, const T1 *y) "

[INTERNAL]  Calculates dot(x, mul(A, y))

";

%feature("docstring")  casadi::casadi_trans(const T1 *x, const int *sp_x, T1
*y, const int *sp_y, int *tmp) "

[INTERNAL]  TRANS: y <- trans(x) , w work vector (length >= rows x)

";

%feature("docstring")  casadi::casadi_nd_boor_eval(T1 *ret, int n_dims,
const T1 *knots, const int *offset, const int *degree, const int *strides,
const T1 *c, int m, const T1 *x, const int *lookup_mode, int reverse, int
*iw, T1 *w) "

[INTERNAL] ";

%feature("docstring")  casadi::nlpsol_out() "

Get NLP solver output scheme of NLP solvers.

>Output scheme: casadi::NlpsolOutput (NLPSOL_NUM_OUT = 6)

+--------------+-------+---------------------------------------------------+
|  Full name   | Short |                    Description                    |
+==============+=======+===================================================+
| NLPSOL_X     | x     | Decision variables at the optimal solution (nx x  |
|              |       | 1)                                                |
+--------------+-------+---------------------------------------------------+
| NLPSOL_F     | f     | Cost function value at the optimal solution (1 x  |
|              |       | 1)                                                |
+--------------+-------+---------------------------------------------------+
| NLPSOL_G     | g     | Constraints function at the optimal solution (ng  |
|              |       | x 1)                                              |
+--------------+-------+---------------------------------------------------+
| NLPSOL_LAM_X | lam_x | Lagrange multipliers for bounds on X at the       |
|              |       | solution (nx x 1)                                 |
+--------------+-------+---------------------------------------------------+
| NLPSOL_LAM_G | lam_g | Lagrange multipliers for bounds on G at the       |
|              |       | solution (ng x 1)                                 |
+--------------+-------+---------------------------------------------------+
| NLPSOL_LAM_P | lam_p | Lagrange multipliers for bounds on P at the       |
|              |       | solution (np x 1)                                 |
+--------------+-------+---------------------------------------------------+

";

%feature("docstring")  casadi::nlpsol_out(int ind) "

Get output scheme name by index.

>Output scheme: casadi::NlpsolOutput (NLPSOL_NUM_OUT = 6)

+--------------+-------+---------------------------------------------------+
|  Full name   | Short |                    Description                    |
+==============+=======+===================================================+
| NLPSOL_X     | x     | Decision variables at the optimal solution (nx x  |
|              |       | 1)                                                |
+--------------+-------+---------------------------------------------------+
| NLPSOL_F     | f     | Cost function value at the optimal solution (1 x  |
|              |       | 1)                                                |
+--------------+-------+---------------------------------------------------+
| NLPSOL_G     | g     | Constraints function at the optimal solution (ng  |
|              |       | x 1)                                              |
+--------------+-------+---------------------------------------------------+
| NLPSOL_LAM_X | lam_x | Lagrange multipliers for bounds on X at the       |
|              |       | solution (nx x 1)                                 |
+--------------+-------+---------------------------------------------------+
| NLPSOL_LAM_G | lam_g | Lagrange multipliers for bounds on G at the       |
|              |       | solution (ng x 1)                                 |
+--------------+-------+---------------------------------------------------+
| NLPSOL_LAM_P | lam_p | Lagrange multipliers for bounds on P at the       |
|              |       | solution (np x 1)                                 |
+--------------+-------+---------------------------------------------------+

";

%feature("docstring")  casadi::has_expm(const std::string &name) "

Check if a particular plugin is available.

";

%feature("docstring")  casadi::has_linsol(const std::string &name) "

Check if a particular plugin is available.

";

%feature("docstring")  casadi::simpleRK(Function f, int N=10, int order=4) "

Construct an explicit Runge-Kutta integrator The constructed function has
three inputs, corresponding to initial state (x0), parameter (p) and
integration time (h) and one output, corresponding to final state (xf).

Parameters:
-----------

f:  ODE function with two inputs (x and p) and one output (xdot)

N:  Number of integrator steps

order:  Order of interpolating polynomials

";

%feature("docstring")  casadi::nlpsol_in() "

Get input scheme of NLP solvers.

>Input scheme: casadi::NlpsolInput (NLPSOL_NUM_IN = 8)

+---------------+--------+-------------------------------------------------+
|   Full name   | Short  |                   Description                   |
+===============+========+=================================================+
| NLPSOL_X0     | x0     | Decision variables, initial guess (nx x 1)      |
+---------------+--------+-------------------------------------------------+
| NLPSOL_P      | p      | Value of fixed parameters (np x 1)              |
+---------------+--------+-------------------------------------------------+
| NLPSOL_LBX    | lbx    | Decision variables lower bound (nx x 1),        |
|               |        | default -inf.                                   |
+---------------+--------+-------------------------------------------------+
| NLPSOL_UBX    | ubx    | Decision variables upper bound (nx x 1),        |
|               |        | default +inf.                                   |
+---------------+--------+-------------------------------------------------+
| NLPSOL_LBG    | lbg    | Constraints lower bound (ng x 1), default -inf. |
+---------------+--------+-------------------------------------------------+
| NLPSOL_UBG    | ubg    | Constraints upper bound (ng x 1), default +inf. |
+---------------+--------+-------------------------------------------------+
| NLPSOL_LAM_X0 | lam_x0 | Lagrange multipliers for bounds on X, initial   |
|               |        | guess (nx x 1)                                  |
+---------------+--------+-------------------------------------------------+
| NLPSOL_LAM_G0 | lam_g0 | Lagrange multipliers for bounds on G, initial   |
|               |        | guess (ng x 1)                                  |
+---------------+--------+-------------------------------------------------+

";

%feature("docstring")  casadi::nlpsol_in(int ind) "

Get NLP solver input scheme name by index.

>Input scheme: casadi::NlpsolInput (NLPSOL_NUM_IN = 8)

+---------------+--------+-------------------------------------------------+
|   Full name   | Short  |                   Description                   |
+===============+========+=================================================+
| NLPSOL_X0     | x0     | Decision variables, initial guess (nx x 1)      |
+---------------+--------+-------------------------------------------------+
| NLPSOL_P      | p      | Value of fixed parameters (np x 1)              |
+---------------+--------+-------------------------------------------------+
| NLPSOL_LBX    | lbx    | Decision variables lower bound (nx x 1),        |
|               |        | default -inf.                                   |
+---------------+--------+-------------------------------------------------+
| NLPSOL_UBX    | ubx    | Decision variables upper bound (nx x 1),        |
|               |        | default +inf.                                   |
+---------------+--------+-------------------------------------------------+
| NLPSOL_LBG    | lbg    | Constraints lower bound (ng x 1), default -inf. |
+---------------+--------+-------------------------------------------------+
| NLPSOL_UBG    | ubg    | Constraints upper bound (ng x 1), default +inf. |
+---------------+--------+-------------------------------------------------+
| NLPSOL_LAM_X0 | lam_x0 | Lagrange multipliers for bounds on X, initial   |
|               |        | guess (nx x 1)                                  |
+---------------+--------+-------------------------------------------------+
| NLPSOL_LAM_G0 | lam_g0 | Lagrange multipliers for bounds on G, initial   |
|               |        | guess (ng x 1)                                  |
+---------------+--------+-------------------------------------------------+

";

%feature("docstring")  casadi::conic_n_in() "

Get the number of QP solver inputs.

";

%feature("docstring")  casadi::casadi_densify(const T1 *x, const int *sp_x,
T2 *y, int tr) "

[INTERNAL]  Convert sparse to dense.

";

%feature("docstring")  casadi::doc_rootfinder(const std::string &name) "

Get the documentation string for a plugin.

";

%feature("docstring")  casadi::dple_in() "

Get input scheme of DPLE solvers.

";

%feature("docstring")  casadi::dple_in(int ind) "

Get DPLE input scheme name by index.

";

%feature("docstring")  casadi::dense_copy_t_stride(int n, int m, const
double *A, double *B, int strideA, int strideB) "

[INTERNAL] ";

%feature("docstring")  casadi::dense_mul_nn2(int n, int m, int l, const
double *A, const double *B, double *C) "

[INTERNAL] ";

%feature("docstring")  casadi::nlpsol(const std::string &name, const
std::string &solver, const SXDict &nlp, const Dict &opts=Dict()) "

Create an NLP solver Creates a solver for the following parametric nonlinear
program (NLP):

::

  min          F(x, p)
  x
  
  subject to
  LBX <=   x    <= UBX
  LBG <= G(x, p) <= UBG
  p  == P
  
  nx: number of decision variables
  ng: number of constraints
  np: number of parameters



General information
===================



>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| common_options   | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | auto-generated   | nction           |
|                  |                 | functions        |                  |
+------------------+-----------------+------------------+------------------+
| discrete         | OT_BOOLVECTOR   | Indicates which  | casadi::Nlpsol   |
|                  |                 | of the variables |                  |
|                  |                 | are discrete,    |                  |
|                  |                 | i.e. integer-    |                  |
|                  |                 | valued           |                  |
+------------------+-----------------+------------------+------------------+
| eval_errors_fata | OT_BOOL         | When errors      | casadi::Nlpsol   |
| l                |                 | occur during     |                  |
|                  |                 | evaluation of    |                  |
|                  |                 | f,g,...,stop the |                  |
|                  |                 | iterations       |                  |
+------------------+-----------------+------------------+------------------+
| expand           | OT_BOOL         | Replace MX with  | casadi::Nlpsol   |
|                  |                 | SX expressions   |                  |
|                  |                 | in problem       |                  |
|                  |                 | formulation      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| ignore_check_vec | OT_BOOL         | If set to true,  | casadi::Nlpsol   |
|                  |                 | the input shape  |                  |
|                  |                 | of F will not be |                  |
|                  |                 | checked.         |                  |
+------------------+-----------------+------------------+------------------+
| iteration_callba | OT_FUNCTION     | A function that  | casadi::Nlpsol   |
| ck               |                 | will be called   |                  |
|                  |                 | at each          |                  |
|                  |                 | iteration with   |                  |
|                  |                 | the solver as    |                  |
|                  |                 | input. Check     |                  |
|                  |                 | documentation of |                  |
|                  |                 | Callback .       |                  |
+------------------+-----------------+------------------+------------------+
| iteration_callba | OT_BOOL         | If set to true,  | casadi::Nlpsol   |
| ck_ignore_errors |                 | errors thrown by |                  |
|                  |                 | iteration_callba |                  |
|                  |                 | ck will be       |                  |
|                  |                 | ignored.         |                  |
+------------------+-----------------+------------------+------------------+
| iteration_callba | OT_INT          | Only call the    | casadi::Nlpsol   |
| ck_step          |                 | callback         |                  |
|                  |                 | function every   |                  |
|                  |                 | few iterations.  |                  |
+------------------+-----------------+------------------+------------------+
| monitor          | OT_STRINGVECTOR | Set of user      | casadi::OracleFu |
|                  |                 | problem          | nction           |
|                  |                 | functions to be  |                  |
|                  |                 | monitored        |                  |
+------------------+-----------------+------------------+------------------+
| specific_options | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | specific auto-   | nction           |
|                  |                 | generated        |                  |
|                  |                 | functions,       |                  |
|                  |                 | overwriting the  |                  |
|                  |                 | defaults from    |                  |
|                  |                 | common_options.  |                  |
|                  |                 | Nested           |                  |
|                  |                 | dictionary.      |                  |
+------------------+-----------------+------------------+------------------+
| verbose_init     | OT_BOOL         | Print out timing | casadi::Nlpsol   |
|                  |                 | information      |                  |
|                  |                 | about the        |                  |
|                  |                 | different stages |                  |
|                  |                 | of               |                  |
|                  |                 | initialization   |                  |
+------------------+-----------------+------------------+------------------+
| warn_initial_bou | OT_BOOL         | Warn if the      | casadi::Nlpsol   |
| nds              |                 | initial guess    |                  |
|                  |                 | does not satisfy |                  |
|                  |                 | LBX and UBX      |                  |
+------------------+-----------------+------------------+------------------+

>Input scheme: casadi::NlpsolInput (NLPSOL_NUM_IN = 8)

+---------------+--------+-------------------------------------------------+
|   Full name   | Short  |                   Description                   |
+===============+========+=================================================+
| NLPSOL_X0     | x0     | Decision variables, initial guess (nx x 1)      |
+---------------+--------+-------------------------------------------------+
| NLPSOL_P      | p      | Value of fixed parameters (np x 1)              |
+---------------+--------+-------------------------------------------------+
| NLPSOL_LBX    | lbx    | Decision variables lower bound (nx x 1),        |
|               |        | default -inf.                                   |
+---------------+--------+-------------------------------------------------+
| NLPSOL_UBX    | ubx    | Decision variables upper bound (nx x 1),        |
|               |        | default +inf.                                   |
+---------------+--------+-------------------------------------------------+
| NLPSOL_LBG    | lbg    | Constraints lower bound (ng x 1), default -inf. |
+---------------+--------+-------------------------------------------------+
| NLPSOL_UBG    | ubg    | Constraints upper bound (ng x 1), default +inf. |
+---------------+--------+-------------------------------------------------+
| NLPSOL_LAM_X0 | lam_x0 | Lagrange multipliers for bounds on X, initial   |
|               |        | guess (nx x 1)                                  |
+---------------+--------+-------------------------------------------------+
| NLPSOL_LAM_G0 | lam_g0 | Lagrange multipliers for bounds on G, initial   |
|               |        | guess (ng x 1)                                  |
+---------------+--------+-------------------------------------------------+

>Output scheme: casadi::NlpsolOutput (NLPSOL_NUM_OUT = 6)

+--------------+-------+---------------------------------------------------+
|  Full name   | Short |                    Description                    |
+==============+=======+===================================================+
| NLPSOL_X     | x     | Decision variables at the optimal solution (nx x  |
|              |       | 1)                                                |
+--------------+-------+---------------------------------------------------+
| NLPSOL_F     | f     | Cost function value at the optimal solution (1 x  |
|              |       | 1)                                                |
+--------------+-------+---------------------------------------------------+
| NLPSOL_G     | g     | Constraints function at the optimal solution (ng  |
|              |       | x 1)                                              |
+--------------+-------+---------------------------------------------------+
| NLPSOL_LAM_X | lam_x | Lagrange multipliers for bounds on X at the       |
|              |       | solution (nx x 1)                                 |
+--------------+-------+---------------------------------------------------+
| NLPSOL_LAM_G | lam_g | Lagrange multipliers for bounds on G at the       |
|              |       | solution (ng x 1)                                 |
+--------------+-------+---------------------------------------------------+
| NLPSOL_LAM_P | lam_p | Lagrange multipliers for bounds on P at the       |
|              |       | solution (np x 1)                                 |
+--------------+-------+---------------------------------------------------+

List of plugins
===============



- blocksqp

- bonmin

- ipopt

- knitro

- snopt

- worhp

- scpgen

- sqpmethod

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
Nlpsol.doc(\"myextraplugin\")



--------------------------------------------------------------------------------

blocksqp
--------



This is a modified version of blockSQP by Janka et al.

Dennis Janka, Joel Andersson

>List of available options

+----------------------------+-----------+---------------------------------+
|             Id             |   Type    |           Description           |
+============================+===========+=================================+
| block_hess                 | OT_INT    | Blockwise Hessian               |
|                            |           | approximation?                  |
+----------------------------+-----------+---------------------------------+
| col_eps                    | OT_DOUBLE | Epsilon for COL scaling         |
|                            |           | strategy                        |
+----------------------------+-----------+---------------------------------+
| col_tau1                   | OT_DOUBLE | tau1 for COL scaling strategy   |
+----------------------------+-----------+---------------------------------+
| col_tau2                   | OT_DOUBLE | tau2 for COL scaling strategy   |
+----------------------------+-----------+---------------------------------+
| conv_strategy              | OT_INT    | Convexification strategy        |
+----------------------------+-----------+---------------------------------+
| delta                      | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| delta_h0                   | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| eps                        | OT_DOUBLE | Values smaller than this are    |
|                            |           | regarded as numerically zero    |
+----------------------------+-----------+---------------------------------+
| eta                        | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| fallback_scaling           | OT_INT    | If indefinite update is used,   |
|                            |           | the type of fallback strategy   |
+----------------------------+-----------+---------------------------------+
| fallback_update            | OT_INT    | If indefinite update is used,   |
|                            |           | the type of fallback strategy   |
+----------------------------+-----------+---------------------------------+
| gamma_f                    | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| gamma_theta                | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| globalization              | OT_BOOL   | Enable globalization            |
+----------------------------+-----------+---------------------------------+
| hess_damp                  | OT_INT    | Activate Powell damping for     |
|                            |           | BFGS                            |
+----------------------------+-----------+---------------------------------+
| hess_damp_fac              | OT_DOUBLE | Damping factor for BFGS Powell  |
|                            |           | modification                    |
+----------------------------+-----------+---------------------------------+
| hess_lim_mem               | OT_INT    | Full or limited memory          |
+----------------------------+-----------+---------------------------------+
| hess_memsize               | OT_INT    | Memory size for L-BFGS updates  |
+----------------------------+-----------+---------------------------------+
| hess_scaling               | OT_INT    | Scaling strategy for Hessian    |
|                            |           | approximation                   |
+----------------------------+-----------+---------------------------------+
| hess_update                | OT_INT    | Type of Hessian approximation   |
+----------------------------+-----------+---------------------------------+
| ini_hess_diag              | OT_DOUBLE | Initial Hessian guess: diagonal |
|                            |           | matrix diag(iniHessDiag)        |
+----------------------------+-----------+---------------------------------+
| kappa_f                    | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| kappa_minus                | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| kappa_plus                 | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| kappa_plus_max             | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| kappa_soc                  | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| linsol                     | OT_STRING | The linear solver to be used by |
|                            |           | the QP method                   |
+----------------------------+-----------+---------------------------------+
| max_consec_reduced_steps   | OT_INT    | Maximum number of consecutive   |
|                            |           | reduced steps                   |
+----------------------------+-----------+---------------------------------+
| max_consec_skipped_updates | OT_INT    | Maximum number of consecutive   |
|                            |           | skipped updates                 |
+----------------------------+-----------+---------------------------------+
| max_conv_qp                | OT_INT    | How many additional QPs may be  |
|                            |           | solved for convexification per  |
|                            |           | iteration?                      |
+----------------------------+-----------+---------------------------------+
| max_it_qp                  | OT_INT    | Maximum number of QP iterations |
|                            |           | per SQP iteration               |
+----------------------------+-----------+---------------------------------+
| max_iter                   | OT_INT    | Maximum number of SQP           |
|                            |           | iterations                      |
+----------------------------+-----------+---------------------------------+
| max_line_search            | OT_INT    | Maximum number of steps in line |
|                            |           | search                          |
+----------------------------+-----------+---------------------------------+
| max_soc_iter               | OT_INT    | Maximum number of SOC line      |
|                            |           | search iterations               |
+----------------------------+-----------+---------------------------------+
| max_time_qp                | OT_DOUBLE | Maximum number of time in       |
|                            |           | seconds per QP solve per SQP    |
|                            |           | iteration                       |
+----------------------------+-----------+---------------------------------+
| nlinfeastol                | OT_DOUBLE | Nonlinear feasibility tolerance |
+----------------------------+-----------+---------------------------------+
| obj_lo                     | OT_DOUBLE | Lower bound on objective        |
|                            |           | function [-inf]                 |
+----------------------------+-----------+---------------------------------+
| obj_up                     | OT_DOUBLE | Upper bound on objective        |
|                            |           | function [inf]                  |
+----------------------------+-----------+---------------------------------+
| opttol                     | OT_DOUBLE | Optimality tolerance            |
+----------------------------+-----------+---------------------------------+
| print_header               | OT_BOOL   | Print solver header at startup  |
+----------------------------+-----------+---------------------------------+
| print_iteration            | OT_BOOL   | Print SQP iterations            |
+----------------------------+-----------+---------------------------------+
| qpsol                      | OT_STRING | The QP solver to be used by the |
|                            |           | SQP method                      |
+----------------------------+-----------+---------------------------------+
| qpsol_options              | OT_DICT   | Options to be passed to the QP  |
|                            |           | solver                          |
+----------------------------+-----------+---------------------------------+
| restore_feas               | OT_BOOL   | Use feasibility restoration     |
|                            |           | phase                           |
+----------------------------+-----------+---------------------------------+
| s_f                        | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| s_theta                    | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| schur                      | OT_BOOL   | Use qpOASES Schur compliment    |
|                            |           | approach                        |
+----------------------------+-----------+---------------------------------+
| skip_first_globalization   | OT_BOOL   | No globalization strategy in    |
|                            |           | first iteration                 |
+----------------------------+-----------+---------------------------------+
| theta_max                  | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| theta_min                  | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| warmstart                  | OT_BOOL   | Use warmstarting                |
+----------------------------+-----------+---------------------------------+
| which_second_derv          | OT_INT    | For which block should second   |
|                            |           | derivatives be provided by the  |
|                            |           | user                            |
+----------------------------+-----------+---------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

bonmin
------



When in warmstart mode, output NLPSOL_LAM_X may be used as input

NOTE: Even when max_iter == 0, it is not guaranteed that input(NLPSOL_X0) ==
output(NLPSOL_X). Indeed if bounds on X or constraints are unmet, they will
differ.

For a good tutorial on BONMIN,
seehttp://drops.dagstuhl.de/volltexte/2009/2089/pdf/09061.WaechterAndreas.Paper.2089.pdf

A good resource about the algorithms in BONMIN is: Wachter and L. T.
Biegler, On the Implementation of an Interior-Point Filter Line-Search
Algorithm for Large-Scale Nonlinear Programming, Mathematical Programming
106(1), pp. 25-57, 2006 (As Research Report RC 23149, IBM T. J. Watson
Research Center, Yorktown, USA

Caveats: with default options, multipliers for the decision variables are
wrong for equality constraints. Change the 'fixed_variable_treatment' to
'make_constraint' or 'relax_bounds' to obtain correct results.

>List of available options

+--------------------------+-------------+---------------------------------+
|            Id            |    Type     |           Description           |
+==========================+=============+=================================+
| bonmin                   | OT_DICT     | Options to be passed to BONMIN  |
+--------------------------+-------------+---------------------------------+
| con_integer_md           | OT_DICT     | Integer metadata (a dictionary  |
|                          |             | with lists of integers) about   |
|                          |             | constraints to be passed to     |
|                          |             | BONMIN                          |
+--------------------------+-------------+---------------------------------+
| con_numeric_md           | OT_DICT     | Numeric metadata (a dictionary  |
|                          |             | with lists of reals) about      |
|                          |             | constraints to be passed to     |
|                          |             | BONMIN                          |
+--------------------------+-------------+---------------------------------+
| con_string_md            | OT_DICT     | String metadata (a dictionary   |
|                          |             | with lists of strings) about    |
|                          |             | constraints to be passed to     |
|                          |             | BONMIN                          |
+--------------------------+-------------+---------------------------------+
| grad_f                   | OT_FUNCTION | Function for calculating the    |
|                          |             | gradient of the objective       |
|                          |             | (column, autogenerated by       |
|                          |             | default)                        |
+--------------------------+-------------+---------------------------------+
| grad_f_options           | OT_DICT     | Options for the autogenerated   |
|                          |             | gradient of the objective.      |
+--------------------------+-------------+---------------------------------+
| hess_lag                 | OT_FUNCTION | Function for calculating the    |
|                          |             | Hessian of the Lagrangian       |
|                          |             | (autogenerated by default)      |
+--------------------------+-------------+---------------------------------+
| hess_lag_options         | OT_DICT     | Options for the autogenerated   |
|                          |             | Hessian of the Lagrangian.      |
+--------------------------+-------------+---------------------------------+
| jac_g                    | OT_FUNCTION | Function for calculating the    |
|                          |             | Jacobian of the constraints     |
|                          |             | (autogenerated by default)      |
+--------------------------+-------------+---------------------------------+
| jac_g_options            | OT_DICT     | Options for the autogenerated   |
|                          |             | Jacobian of the constraints.    |
+--------------------------+-------------+---------------------------------+
| pass_nonlinear_variables | OT_BOOL     | Pass list of variables entering |
|                          |             | nonlinearly to BONMIN           |
+--------------------------+-------------+---------------------------------+
| var_integer_md           | OT_DICT     | Integer metadata (a dictionary  |
|                          |             | with lists of integers) about   |
|                          |             | variables to be passed to       |
|                          |             | BONMIN                          |
+--------------------------+-------------+---------------------------------+
| var_numeric_md           | OT_DICT     | Numeric metadata (a dictionary  |
|                          |             | with lists of reals) about      |
|                          |             | variables to be passed to       |
|                          |             | BONMIN                          |
+--------------------------+-------------+---------------------------------+
| var_string_md            | OT_DICT     | String metadata (a dictionary   |
|                          |             | with lists of strings) about    |
|                          |             | variables to be passed to       |
|                          |             | BONMIN                          |
+--------------------------+-------------+---------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

ipopt
-----



When in warmstart mode, output NLPSOL_LAM_X may be used as input

NOTE: Even when max_iter == 0, it is not guaranteed that input(NLPSOL_X0) ==
output(NLPSOL_X). Indeed if bounds on X or constraints are unmet, they will
differ.

For a good tutorial on IPOPT,
seehttp://drops.dagstuhl.de/volltexte/2009/2089/pdf/09061.WaechterAndreas.Paper.2089.pdf

A good resource about the algorithms in IPOPT is: Wachter and L. T. Biegler,
On the Implementation of an Interior-Point Filter Line-Search Algorithm for
Large-Scale Nonlinear Programming, Mathematical Programming 106(1), pp.
25-57, 2006 (As Research Report RC 23149, IBM T. J. Watson Research Center,
Yorktown, USA

Caveats: with default options, multipliers for the decision variables are
wrong for equality constraints. Change the 'fixed_variable_treatment' to
'make_constraint' or 'relax_bounds' to obtain correct results.

>List of available options

+--------------------------+-------------+---------------------------------+
|            Id            |    Type     |           Description           |
+==========================+=============+=================================+
| con_integer_md           | OT_DICT     | Integer metadata (a dictionary  |
|                          |             | with lists of integers) about   |
|                          |             | constraints to be passed to     |
|                          |             | IPOPT                           |
+--------------------------+-------------+---------------------------------+
| con_numeric_md           | OT_DICT     | Numeric metadata (a dictionary  |
|                          |             | with lists of reals) about      |
|                          |             | constraints to be passed to     |
|                          |             | IPOPT                           |
+--------------------------+-------------+---------------------------------+
| con_string_md            | OT_DICT     | String metadata (a dictionary   |
|                          |             | with lists of strings) about    |
|                          |             | constraints to be passed to     |
|                          |             | IPOPT                           |
+--------------------------+-------------+---------------------------------+
| grad_f                   | OT_FUNCTION | Function for calculating the    |
|                          |             | gradient of the objective       |
|                          |             | (column, autogenerated by       |
|                          |             | default)                        |
+--------------------------+-------------+---------------------------------+
| hess_lag                 | OT_FUNCTION | Function for calculating the    |
|                          |             | Hessian of the Lagrangian       |
|                          |             | (autogenerated by default)      |
+--------------------------+-------------+---------------------------------+
| ipopt                    | OT_DICT     | Options to be passed to IPOPT   |
+--------------------------+-------------+---------------------------------+
| jac_g                    | OT_FUNCTION | Function for calculating the    |
|                          |             | Jacobian of the constraints     |
|                          |             | (autogenerated by default)      |
+--------------------------+-------------+---------------------------------+
| pass_nonlinear_variables | OT_BOOL     | Pass list of variables entering |
|                          |             | nonlinearly to IPOPT            |
+--------------------------+-------------+---------------------------------+
| var_integer_md           | OT_DICT     | Integer metadata (a dictionary  |
|                          |             | with lists of integers) about   |
|                          |             | variables to be passed to IPOPT |
+--------------------------+-------------+---------------------------------+
| var_numeric_md           | OT_DICT     | Numeric metadata (a dictionary  |
|                          |             | with lists of reals) about      |
|                          |             | variables to be passed to IPOPT |
+--------------------------+-------------+---------------------------------+
| var_string_md            | OT_DICT     | String metadata (a dictionary   |
|                          |             | with lists of strings) about    |
|                          |             | variables to be passed to IPOPT |
+--------------------------+-------------+---------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

knitro
------



KNITRO interface

>List of available options

+---------+--------------+--------------------------------+
|   Id    |     Type     |          Description           |
+=========+==============+================================+
| contype | OT_INTVECTOR | Type of constraint             |
+---------+--------------+--------------------------------+
| knitro  | OT_DICT      | Options to be passed to KNITRO |
+---------+--------------+--------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

snopt
-----



SNOPT interface

>List of available options

+-------+-----------+---------------------------------------------+
|  Id   |   Type    |                 Description                 |
+=======+===========+=============================================+
| snopt | OT_DICT   | Options to be passed to SNOPT               |
+-------+-----------+---------------------------------------------+
| start | OT_STRING | Warm-start options for Worhp: cold|warm|hot |
+-------+-----------+---------------------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

worhp
-----



WORHP interface

Designed for Worhp 1.10

>List of available options

+-------+---------+-------------------------------+
|  Id   |  Type   |          Description          |
+=======+=========+===============================+
| worhp | OT_DICT | Options to be passed to WORHP |
+-------+---------+-------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

scpgen
------



A structure-exploiting sequential quadratic programming (to be come
sequential convex programming) method for nonlinear programming.

>List of available options

+-----------------------+-----------------+--------------------------------+
|          Id           |      Type       |          Description           |
+=======================+=================+================================+
| beta                  | OT_DOUBLE       | Line-search parameter,         |
|                       |                 | restoration factor of stepsize |
+-----------------------+-----------------+--------------------------------+
| c1                    | OT_DOUBLE       | Armijo condition, coefficient  |
|                       |                 | of decrease in merit           |
+-----------------------+-----------------+--------------------------------+
| codegen               | OT_BOOL         | C-code generation              |
+-----------------------+-----------------+--------------------------------+
| hessian_approximation | OT_STRING       | gauss-newton|exact             |
+-----------------------+-----------------+--------------------------------+
| lbfgs_memory          | OT_INT          | Size of L-BFGS memory.         |
+-----------------------+-----------------+--------------------------------+
| max_iter              | OT_INT          | Maximum number of SQP          |
|                       |                 | iterations                     |
+-----------------------+-----------------+--------------------------------+
| max_iter_ls           | OT_INT          | Maximum number of linesearch   |
|                       |                 | iterations                     |
+-----------------------+-----------------+--------------------------------+
| merit_memsize         | OT_INT          | Size of memory to store        |
|                       |                 | history of merit function      |
|                       |                 | values                         |
+-----------------------+-----------------+--------------------------------+
| merit_start           | OT_DOUBLE       | Lower bound for the merit      |
|                       |                 | function parameter             |
+-----------------------+-----------------+--------------------------------+
| name_x                | OT_STRINGVECTOR | Names of the variables.        |
+-----------------------+-----------------+--------------------------------+
| print_header          | OT_BOOL         | Print the header with problem  |
|                       |                 | statistics                     |
+-----------------------+-----------------+--------------------------------+
| print_x               | OT_INTVECTOR    | Which variables to print.      |
+-----------------------+-----------------+--------------------------------+
| qpsol                 | OT_STRING       | The QP solver to be used by    |
|                       |                 | the SQP method                 |
+-----------------------+-----------------+--------------------------------+
| qpsol_options         | OT_DICT         | Options to be passed to the QP |
|                       |                 | solver                         |
+-----------------------+-----------------+--------------------------------+
| reg_threshold         | OT_DOUBLE       | Threshold for the              |
|                       |                 | regularization.                |
+-----------------------+-----------------+--------------------------------+
| regularize            | OT_BOOL         | Automatic regularization of    |
|                       |                 | Lagrange Hessian.              |
+-----------------------+-----------------+--------------------------------+
| tol_du                | OT_DOUBLE       | Stopping criterion for dual    |
|                       |                 | infeasability                  |
+-----------------------+-----------------+--------------------------------+
| tol_pr                | OT_DOUBLE       | Stopping criterion for primal  |
|                       |                 | infeasibility                  |
+-----------------------+-----------------+--------------------------------+
| tol_pr_step           | OT_DOUBLE       | Stopping criterion for the     |
|                       |                 | step size                      |
+-----------------------+-----------------+--------------------------------+
| tol_reg               | OT_DOUBLE       | Stopping criterion for         |
|                       |                 | regularization                 |
+-----------------------+-----------------+--------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

sqpmethod
---------



A textbook SQPMethod

>List of available options

+-----------------------+-----------+--------------------------------------+
|          Id           |   Type    |             Description              |
+=======================+===========+======================================+
| beta                  | OT_DOUBLE | Line-search parameter, restoration   |
|                       |           | factor of stepsize                   |
+-----------------------+-----------+--------------------------------------+
| c1                    | OT_DOUBLE | Armijo condition, coefficient of     |
|                       |           | decrease in merit                    |
+-----------------------+-----------+--------------------------------------+
| hessian_approximation | OT_STRING | limited-memory|exact                 |
+-----------------------+-----------+--------------------------------------+
| lbfgs_memory          | OT_INT    | Size of L-BFGS memory.               |
+-----------------------+-----------+--------------------------------------+
| max_iter              | OT_INT    | Maximum number of SQP iterations     |
+-----------------------+-----------+--------------------------------------+
| max_iter_ls           | OT_INT    | Maximum number of linesearch         |
|                       |           | iterations                           |
+-----------------------+-----------+--------------------------------------+
| merit_memory          | OT_INT    | Size of memory to store history of   |
|                       |           | merit function values                |
+-----------------------+-----------+--------------------------------------+
| min_step_size         | OT_DOUBLE | The size (inf-norm) of the step size |
|                       |           | should not become smaller than this. |
+-----------------------+-----------+--------------------------------------+
| print_header          | OT_BOOL   | Print the header with problem        |
|                       |           | statistics                           |
+-----------------------+-----------+--------------------------------------+
| print_iteration       | OT_BOOL   | Print the iterations                 |
+-----------------------+-----------+--------------------------------------+
| qpsol                 | OT_STRING | The QP solver to be used by the SQP  |
|                       |           | method                               |
+-----------------------+-----------+--------------------------------------+
| qpsol_options         | OT_DICT   | Options to be passed to the QP       |
|                       |           | solver                               |
+-----------------------+-----------+--------------------------------------+
| regularize            | OT_BOOL   | Automatic regularization of Lagrange |
|                       |           | Hessian.                             |
+-----------------------+-----------+--------------------------------------+
| tol_du                | OT_DOUBLE | Stopping criterion for dual          |
|                       |           | infeasability                        |
+-----------------------+-----------+--------------------------------------+
| tol_pr                | OT_DOUBLE | Stopping criterion for primal        |
|                       |           | infeasibility                        |
+-----------------------+-----------+--------------------------------------+

--------------------------------------------------------------------------------



Joel Andersson

";

%feature("docstring")  casadi::nlpsol(const std::string &name, const
std::string &solver, const MXDict &nlp, const Dict &opts=Dict()) "

";

%feature("docstring")  casadi::nlpsol(const std::string &name, const
std::string &solver, const std::string &fname, const Dict &opts=Dict()) "

";

%feature("docstring")  casadi::nlpsol(const std::string &name, const
std::string &solver, const Importer &compiler, const Dict &opts=Dict()) "

";

%feature("docstring")  casadi::nlpsol(const std::string &name, const
std::string &solver, const NlpBuilder &nl, const Dict &opts=Dict()) "

";

%feature("docstring")  casadi::userOut() "

";

%feature("docstring")  casadi::casadi_norm_inf_mul(const T1 *x, const int
*sp_x, const T1 *y, const int *sp_y, T1 *dwork, int *iwork) "

[INTERNAL]  Inf-norm of a Matrix-matrix product,*

Parameters:
-----------

dwork:  A real work vector that you must allocate Minimum size: y.size1()

iwork:  A integer work vector that you must allocate Minimum size:
y.size1()+x.size2()+1

";

%feature("docstring")  casadi::matrixName< SXElem >() "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_fill(T1 *x, int n, T1 alpha) "

[INTERNAL]  FILL: x <- alpha.

";

%feature("docstring")  casadi::conic_out() "

Get QP solver output scheme of QP solvers.

";

%feature("docstring")  casadi::conic_out(int ind) "

Get output scheme name by index.

";


// File: namespaceIpopt.xml


// File: namespacestd.xml


// File: chapter1.xml


// File: chapter2.xml


// File: chapter3.xml


// File: chapter4.xml


// File: chapter5.xml


// File: chapter6.xml

