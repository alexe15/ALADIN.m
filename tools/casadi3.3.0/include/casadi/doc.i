
// File: index.xml

// File: classcasadi_1_1Assertion.xml


// File: classcasadi_1_1BackwardDiff.xml
%feature("docstring")  casadi::FunctionInternal::instruction_constant(int k)
const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::disp_more(std::ostream
&stream) const  "

[INTERNAL]  Print more.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::FunctionInternal::replace_res(const
std::vector< M > &res) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< int > &order_in, const std::vector< int >
&order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::FunctionInternal::size1_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(int iind,
int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::eval_dm(const std::vector<
DM > &arg) const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::FiniteDiff::get_sparsity_out(int i) override
"

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::get_reverse(int nadj, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FiniteDiff::uses_output() const override "

[INTERNAL]  Is the scheme using the (nondifferentiated) output?

";

%feature("docstring")  casadi::FunctionInternal::info() const  "

[INTERNAL]  Obtain information about function

";

%feature("docstring")  casadi::FunctionInternal::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::BackwardDiff::class_name() const override "

[INTERNAL]  Get type name.

";

%feature("docstring")  casadi::FunctionInternal::all_scalar() const  "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::ProtoFunction::alloc_mem() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::symbolic_output(const
std::vector< MX > &arg) const  "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::disp(std::ostream &stream,
bool more) const override "

[INTERNAL]  Display object.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::jit_dependencies(const
std::string &fname) "

[INTERNAL]  Jit dependencies.

";

%feature("docstring")  casadi::ProtoFunction::init_mem(void *mem) const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian(const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FiniteDiff::get_name_out(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::check_res(const
std::vector< M > &res) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FiniteDiff::has_codegen() const override "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::FunctionInternal::instruction_output(int k)
const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::size_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FiniteDiff::get_sparsity_in(int i) override "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::FunctionInternal::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::replace_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInput(int k) const
"

[DEPRECATED] Renamed instruction_index

";

%feature("docstring")  casadi::FunctionInternal::codegen(CodeGenerator &g,
const std::string &fname) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsityGen(int iind,
int oind, bool symmetric, int gr_i=1, int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FiniteDiff::get_name_in(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M > > &fseed) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::has_derivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const double
**arg, double **res, int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const SXElem
**arg, SXElem **res, int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const bvec_t
**arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::n_instructions() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FiniteDiff::codegen_body(CodeGenerator &g)
const override "

[INTERNAL]  Generate code for the body of the C function.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring") casadi::BackwardDiff::BackwardDiff(const std::string
&name, int n) "

[INTERNAL] ";

%feature("docstring")  casadi::ForwardDiff::has_err() const override "

[INTERNAL] ";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::FunctionInternal::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(int iind, int
oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::has_reverse(int nadj) const
"

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::check_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(int nadj,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FunctionInternal::matching_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::ForwardDiff::get_abstol() const override "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring")  casadi::FunctionInternal::fwd_seed(int nfwd) const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::ForwardDiff::calc_fd(double **yk, double *y0,
double *J, double h) const override "

[INTERNAL] ";

%feature("docstring")  casadi::ForwardDiff::calc_fd() const override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::get_function() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::size1_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::matching_res(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

";

%feature("docstring")  casadi::FunctionInternal::definition() const  "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(int nadj) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::sp_reverse(bvec_t **arg,
bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")  casadi::FunctionInternal::instruction_id(int k) const
"

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::get_reltol() const  "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring")  casadi::FiniteDiff::get_default_in(int ind) const
override "

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::BackwardDiff "

[INTERNAL]  Calculate derivative using backward differences Joel Andersson

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| abstol           | OT_DOUBLE       | Accuracy of      | casadi::Backward |
|                  |                 | function outputs | Diff             |
|                  |                 | [default: query  |                  |
|                  |                 | object]          |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| enable_fd        | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation by   |                  |
|                  |                 | finite           |                  |
|                  |                 | differencing.    |                  |
|                  |                 | [default:        |                  |
|                  |                 | false]]          |                  |
+------------------+-----------------+------------------+------------------+
| enable_forward   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using forward    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_jacobian  | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobians of all |                  |
|                  |                 | differentiable   |                  |
|                  |                 | outputs with     |                  |
|                  |                 | respect to all   |                  |
|                  |                 | differentiable   |                  |
|                  |                 | inputs - if      |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_reverse   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | transposed       |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using reverse    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| fd_method        | OT_STRING       | Method for       | casadi::Function |
|                  |                 | finite           | Internal         |
|                  |                 | differencing     |                  |
|                  |                 | [default         |                  |
|                  |                 | 'central']       |                  |
+------------------+-----------------+------------------+------------------+
| fd_options       | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | finite           |                  |
|                  |                 | difference       |                  |
|                  |                 | instance         |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| h_iter           | OT_INT          | Number of        | casadi::Backward |
|                  |                 | iterations to    | Diff             |
|                  |                 | improve on the   |                  |
|                  |                 | step-size        |                  |
|                  |                 | [default: 1 if   |                  |
|                  |                 | error estimate   |                  |
|                  |                 | available,       |                  |
|                  |                 | otherwise 0]     |                  |
+------------------+-----------------+------------------+------------------+
| h_max            | OT_DOUBLE       | Maximum step     | casadi::Backward |
|                  |                 | size [default 0] | Diff             |
+------------------+-----------------+------------------+------------------+
| h_min            | OT_DOUBLE       | Minimum step     | casadi::Backward |
|                  |                 | size [default    | Diff             |
|                  |                 | inf]             |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| reltol           | OT_DOUBLE       | Accuracy of      | casadi::Backward |
|                  |                 | function inputs  | Diff             |
|                  |                 | [default: query  |                  |
|                  |                 | object]          |                  |
+------------------+-----------------+------------------+------------------+
| second_order_ste | OT_DOUBLE       | Second order     | casadi::Backward |
| psize            |                 | perturbation     | Diff             |
|                  |                 | size [default:   |                  |
|                  |                 | 1e-3]            |                  |
+------------------+-----------------+------------------+------------------+
| smoothing        | OT_DOUBLE       | Smoothing        | casadi::Backward |
|                  |                 | regularization   | Diff             |
|                  |                 | [default:        |                  |
|                  |                 | machine          |                  |
|                  |                 | precision]       |                  |
+------------------+-----------------+------------------+------------------+
| u_aim            | OT_DOUBLE       | Target ratio of  | casadi::Backward |
|                  |                 | roundoff error   | Diff             |
|                  |                 | to truncation    |                  |
|                  |                 | error [default:  |                  |
|                  |                 | 100.]            |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: finite_differences.hpp ";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const std::vector<
Matrix< D > > &arg, std::vector< Matrix< D > > &res, bool always_inline,
bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FiniteDiff::init(const Dict &opts) override "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, int order, bool
tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::size2_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")
casadi::FiniteDiff::codegen_declarations(CodeGenerator &g) const override "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FiniteDiff::eval(const double **arg, double
**res, int *iw, double *w, void *mem) const override "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::export_code(const
std::string &lang, std::ostream &stream, const Dict &options) const  "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring")  casadi::FunctionInternal::instruction_MX(int k) const
"

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring")  casadi::FunctionInternal::set_temp(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::ForwardDiff::has_forward(int nfwd) const
override "

[INTERNAL]  Second order derivatives.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FiniteDiff::get_n_in() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring")  casadi::FunctionInternal::get_free() const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::ProtoFunction::free_mem(void *mem) const  "

[INTERNAL]  Free memory block.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::ForwardDiff::n_pert() const override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::finalize(const Dict &opts)
override "

[INTERNAL]  Finalize the object creation.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FiniteDiff::get_options() const override "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::FunctionInternal::get_max_in(int ind) const
"

[INTERNAL]  Get largest input value.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::FunctionInternal::reverse(int nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::ForwardDiff::pert(const std::string &k) const
override "

[INTERNAL] ";

%feature("docstring")  casadi::ForwardDiff::pert(int k, double h) const
override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::size_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::forward(int nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOutput(int k)
const  "

[DEPRECATED] Renamed instruction_output

";

%feature("docstring")  casadi::BackwardDiff::calc_stepsize(double abstol)
const override "

[INTERNAL] ";

%feature("docstring")  casadi::ForwardDiff::get_forward(int nfwd, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const override "

[INTERNAL]  Second order derivatives.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::FunctionInternal::sx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::get_stats(void *mem) const
"

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::FunctionInternal::instruction_input(int k)
const  "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(int nfwd) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")
casadi::FunctionInternal::codegen_sparsities(CodeGenerator &g) const  "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M > > &aseed) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring") casadi::BackwardDiff::~BackwardDiff "

[INTERNAL]  Destructor.

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::sp_forward(const bvec_t
**arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::FunctionInternal::get_partition(int iind, int
oind, Sparsity &D1, Sparsity &D2, bool compact, bool symmetric, bool
allow_forward, bool allow_reverse) const  "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FiniteDiff::get_n_out() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::get_min_in(int ind) const
"

[INTERNAL]  Get smallest input value.

";

%feature("docstring")  casadi::FunctionInternal::codegen_meta(CodeGenerator
&g) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";


// File: classcasadi_1_1Bilin.xml


// File: classcasadi_1_1BinaryMX.xml


// File: classcasadi_1_1BinarySX.xml


// File: classcasadi_1_1Blocksqp.xml
%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::Blocksqp::get_options() const override "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::matching_res(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

";

%feature("docstring")  casadi::Nlpsol::get_name_out(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::get_forward(int nfwd, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::FunctionInternal::instruction_constant(int k)
const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::Blocksqp::alloc_mem() const override "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::OracleFunction::finalize(const Dict &opts)
override "

[INTERNAL]  Finalize initialization.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(int nadj) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::Blocksqp::plugin_name() const override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::mx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn, const std::string &fname, bool jit=false) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::Blocksqp::printProgress(BlocksqpMemory *m)
const  "

[INTERNAL]  Print one line of output to stdout about the current iteration.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::codegen(CodeGenerator &g,
const std::string &fname) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::Nlpsol::disp_more(std::ostream &stream) const
override "

[INTERNAL]  Print description.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::replace_res(const
std::vector< M > &res) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M > > &fseed) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::Blocksqp::init(const Dict &opts) override "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::Blocksqp::run(BlocksqpMemory *m, int maxIt,
int warmStart=0) const  "

[INTERNAL]  Main Loop of SQP method.

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::FunctionInternal::size_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")
casadi::FunctionInternal::codegen_sparsities(CodeGenerator &g) const  "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring")  casadi::FunctionInternal::disp(std::ostream &stream,
bool more) const override "

[INTERNAL]  Display object.

";

%feature("docstring")  casadi::FunctionInternal::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::Blocksqp::sizeHessianCOL(BlocksqpMemory *m,
const double *gamma, const double *delta, int b) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::FunctionInternal::n_instructions() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::Blocksqp::calcBFGS(BlocksqpMemory *m, const
double *gamma, const double *delta, int b) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::Blocksqp::pairInFilter(BlocksqpMemory *m,
double cNorm, double obj) const  "

[INTERNAL] ";

%feature("docstring")  casadi::Blocksqp::reset_sqp(BlocksqpMemory *m) const
"

[INTERNAL]  Reset variables that any SQP code needs.

";

%feature("docstring")  casadi::Blocksqp::resetHessian(BlocksqpMemory *m)
const  "

[INTERNAL] ";

%feature("docstring")  casadi::Blocksqp::resetHessian(BlocksqpMemory *m, int
b) const  "

[INTERNAL] ";

%feature("docstring")  casadi::OracleFunction::has_function(const
std::string &fname) const override "

[INTERNAL] ";

%feature("docstring")  casadi::Blocksqp::fullstep(BlocksqpMemory *m) const
"

[INTERNAL]  No globalization strategy.

";

%feature("docstring")  casadi::FunctionInternal::has_reverse(int nadj) const
"

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::fwd_seed(int nfwd) const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const std::vector<
Matrix< D > > &arg, std::vector< Matrix< D > > &res, bool always_inline,
bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::Nlpsol::get_n_in() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::all_scalar() const  "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::Nlpsol::get_sparsity_in(int i) override "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::sp_reverse(bvec_t **arg,
bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring") casadi::Blocksqp::~Blocksqp "

[INTERNAL] ";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::Blocksqp::calcHessianUpdate(BlocksqpMemory
*m, int updateType, int hessScaling) const  "

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::Nlpsol::check_inputs(void *mem) const  "

[INTERNAL]  Check if the inputs correspond to a well-posed problem.

";

%feature("docstring")  casadi::Blocksqp::initializeFilter(BlocksqpMemory *m)
const  "

[INTERNAL] ";

%feature("docstring")  casadi::Nlpsol::getReducedHessian() "

[INTERNAL] ";

%feature("docstring")  casadi::OracleFunction::get_function() const override
"

[INTERNAL] ";

%feature("docstring")  casadi::OracleFunction::get_function(const
std::string &name) const override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(int iind, int
oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Blocksqp::Blocksqp(const std::string &name,
const Function &nlp) "

[INTERNAL] ";

%feature("docstring")  casadi::Blocksqp::computeNextHessian(BlocksqpMemory
*m, int idx, int maxQP) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::sp_forward(const bvec_t
**arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::OracleFunction::expand() "

[INTERNAL] ";

%feature("docstring")  casadi::Blocksqp::acceptStep(BlocksqpMemory *m, const
double *deltaXi, const double *lambdaQP, double alpha, int nSOCS) const  "

[INTERNAL]  Set new primal dual iterate.

";

%feature("docstring")  casadi::Blocksqp::acceptStep(BlocksqpMemory *m,
double alpha) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::has_forward(int nfwd) const
"

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring") casadi::Blocksqp "

'blocksqp' plugin for Nlpsol

This is a modified version of blockSQP by Janka et al.

Dennis Janka, Joel Andersson

>List of available options

+----------------------------+-----------+---------------------------------+
|             Id             |   Type    |           Description           |
+============================+===========+=================================+
| block_hess                 | OT_INT    | Blockwise Hessian               |
|                            |           | approximation?                  |
+----------------------------+-----------+---------------------------------+
| col_eps                    | OT_DOUBLE | Epsilon for COL scaling         |
|                            |           | strategy                        |
+----------------------------+-----------+---------------------------------+
| col_tau1                   | OT_DOUBLE | tau1 for COL scaling strategy   |
+----------------------------+-----------+---------------------------------+
| col_tau2                   | OT_DOUBLE | tau2 for COL scaling strategy   |
+----------------------------+-----------+---------------------------------+
| conv_strategy              | OT_INT    | Convexification strategy        |
+----------------------------+-----------+---------------------------------+
| delta                      | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| delta_h0                   | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| eps                        | OT_DOUBLE | Values smaller than this are    |
|                            |           | regarded as numerically zero    |
+----------------------------+-----------+---------------------------------+
| eta                        | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| fallback_scaling           | OT_INT    | If indefinite update is used,   |
|                            |           | the type of fallback strategy   |
+----------------------------+-----------+---------------------------------+
| fallback_update            | OT_INT    | If indefinite update is used,   |
|                            |           | the type of fallback strategy   |
+----------------------------+-----------+---------------------------------+
| gamma_f                    | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| gamma_theta                | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| globalization              | OT_BOOL   | Enable globalization            |
+----------------------------+-----------+---------------------------------+
| hess_damp                  | OT_INT    | Activate Powell damping for     |
|                            |           | BFGS                            |
+----------------------------+-----------+---------------------------------+
| hess_damp_fac              | OT_DOUBLE | Damping factor for BFGS Powell  |
|                            |           | modification                    |
+----------------------------+-----------+---------------------------------+
| hess_lim_mem               | OT_INT    | Full or limited memory          |
+----------------------------+-----------+---------------------------------+
| hess_memsize               | OT_INT    | Memory size for L-BFGS updates  |
+----------------------------+-----------+---------------------------------+
| hess_scaling               | OT_INT    | Scaling strategy for Hessian    |
|                            |           | approximation                   |
+----------------------------+-----------+---------------------------------+
| hess_update                | OT_INT    | Type of Hessian approximation   |
+----------------------------+-----------+---------------------------------+
| ini_hess_diag              | OT_DOUBLE | Initial Hessian guess: diagonal |
|                            |           | matrix diag(iniHessDiag)        |
+----------------------------+-----------+---------------------------------+
| kappa_f                    | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| kappa_minus                | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| kappa_plus                 | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| kappa_plus_max             | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| kappa_soc                  | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| linsol                     | OT_STRING | The linear solver to be used by |
|                            |           | the QP method                   |
+----------------------------+-----------+---------------------------------+
| max_consec_reduced_steps   | OT_INT    | Maximum number of consecutive   |
|                            |           | reduced steps                   |
+----------------------------+-----------+---------------------------------+
| max_consec_skipped_updates | OT_INT    | Maximum number of consecutive   |
|                            |           | skipped updates                 |
+----------------------------+-----------+---------------------------------+
| max_conv_qp                | OT_INT    | How many additional QPs may be  |
|                            |           | solved for convexification per  |
|                            |           | iteration?                      |
+----------------------------+-----------+---------------------------------+
| max_it_qp                  | OT_INT    | Maximum number of QP iterations |
|                            |           | per SQP iteration               |
+----------------------------+-----------+---------------------------------+
| max_iter                   | OT_INT    | Maximum number of SQP           |
|                            |           | iterations                      |
+----------------------------+-----------+---------------------------------+
| max_line_search            | OT_INT    | Maximum number of steps in line |
|                            |           | search                          |
+----------------------------+-----------+---------------------------------+
| max_soc_iter               | OT_INT    | Maximum number of SOC line      |
|                            |           | search iterations               |
+----------------------------+-----------+---------------------------------+
| max_time_qp                | OT_DOUBLE | Maximum number of time in       |
|                            |           | seconds per QP solve per SQP    |
|                            |           | iteration                       |
+----------------------------+-----------+---------------------------------+
| nlinfeastol                | OT_DOUBLE | Nonlinear feasibility tolerance |
+----------------------------+-----------+---------------------------------+
| obj_lo                     | OT_DOUBLE | Lower bound on objective        |
|                            |           | function [-inf]                 |
+----------------------------+-----------+---------------------------------+
| obj_up                     | OT_DOUBLE | Upper bound on objective        |
|                            |           | function [inf]                  |
+----------------------------+-----------+---------------------------------+
| opttol                     | OT_DOUBLE | Optimality tolerance            |
+----------------------------+-----------+---------------------------------+
| print_header               | OT_BOOL   | Print solver header at startup  |
+----------------------------+-----------+---------------------------------+
| print_iteration            | OT_BOOL   | Print SQP iterations            |
+----------------------------+-----------+---------------------------------+
| qpsol                      | OT_STRING | The QP solver to be used by the |
|                            |           | SQP method                      |
+----------------------------+-----------+---------------------------------+
| qpsol_options              | OT_DICT   | Options to be passed to the QP  |
|                            |           | solver                          |
+----------------------------+-----------+---------------------------------+
| restore_feas               | OT_BOOL   | Use feasibility restoration     |
|                            |           | phase                           |
+----------------------------+-----------+---------------------------------+
| s_f                        | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| s_theta                    | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| schur                      | OT_BOOL   | Use qpOASES Schur compliment    |
|                            |           | approach                        |
+----------------------------+-----------+---------------------------------+
| skip_first_globalization   | OT_BOOL   | No globalization strategy in    |
|                            |           | first iteration                 |
+----------------------------+-----------+---------------------------------+
| theta_max                  | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| theta_min                  | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| warmstart                  | OT_BOOL   | Use warmstarting                |
+----------------------------+-----------+---------------------------------+
| which_second_derv          | OT_INT    | For which block should second   |
|                            |           | derivatives be provided by the  |
|                            |           | user                            |
+----------------------------+-----------+---------------------------------+

>List of available options

+-------------------+---------------+-------------------+------------------+
|        Id         |     Type      |    Description    |     Used in      |
+===================+===============+===================+==================+
| block_hess        | OT_INT        | Blockwise Hessian | casadi::Blocksqp |
|                   |               | approximation?    |                  |
+-------------------+---------------+-------------------+------------------+
| calc_multipliers  | OT_BOOL       | Calculate         | casadi::Nlpsol   |
|                   |               | Lagrange          |                  |
|                   |               | multipliers in    |                  |
|                   |               | the Nlpsol base   |                  |
|                   |               | class             |                  |
+-------------------+---------------+-------------------+------------------+
| col_eps           | OT_DOUBLE     | Epsilon for COL   | casadi::Blocksqp |
|                   |               | scaling strategy  |                  |
+-------------------+---------------+-------------------+------------------+
| col_tau1          | OT_DOUBLE     | tau1 for COL      | casadi::Blocksqp |
|                   |               | scaling strategy  |                  |
+-------------------+---------------+-------------------+------------------+
| col_tau2          | OT_DOUBLE     | tau2 for COL      | casadi::Blocksqp |
|                   |               | scaling strategy  |                  |
+-------------------+---------------+-------------------+------------------+
| conv_strategy     | OT_INT        | Convexification   | casadi::Blocksqp |
|                   |               | strategy          |                  |
+-------------------+---------------+-------------------+------------------+
| delta             | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| delta_h0          | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| discrete          | OT_BOOLVECTOR | Indicates which   | casadi::Nlpsol   |
|                   |               | of the variables  |                  |
|                   |               | are discrete,     |                  |
|                   |               | i.e. integer-     |                  |
|                   |               | valued            |                  |
+-------------------+---------------+-------------------+------------------+
| eps               | OT_DOUBLE     | Values smaller    | casadi::Blocksqp |
|                   |               | than this are     |                  |
|                   |               | regarded as       |                  |
|                   |               | numerically zero  |                  |
+-------------------+---------------+-------------------+------------------+
| eta               | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| eval_errors_fatal | OT_BOOL       | When errors occur | casadi::Nlpsol   |
|                   |               | during evaluation |                  |
|                   |               | of f,g,...,stop   |                  |
|                   |               | the iterations    |                  |
+-------------------+---------------+-------------------+------------------+
| expand            | OT_BOOL       | Replace MX with   | casadi::Nlpsol   |
|                   |               | SX expressions in |                  |
|                   |               | problem           |                  |
|                   |               | formulation       |                  |
|                   |               | [false]           |                  |
+-------------------+---------------+-------------------+------------------+
| fallback_scaling  | OT_INT        | If indefinite     | casadi::Blocksqp |
|                   |               | update is used,   |                  |
|                   |               | the type of       |                  |
|                   |               | fallback strategy |                  |
+-------------------+---------------+-------------------+------------------+
| fallback_update   | OT_INT        | If indefinite     | casadi::Blocksqp |
|                   |               | update is used,   |                  |
|                   |               | the type of       |                  |
|                   |               | fallback strategy |                  |
+-------------------+---------------+-------------------+------------------+
| gamma_f           | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| gamma_theta       | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| globalization     | OT_BOOL       | Enable            | casadi::Blocksqp |
|                   |               | globalization     |                  |
+-------------------+---------------+-------------------+------------------+
| hess_damp         | OT_INT        | Activate Powell   | casadi::Blocksqp |
|                   |               | damping for BFGS  |                  |
+-------------------+---------------+-------------------+------------------+
| hess_damp_fac     | OT_DOUBLE     | Damping factor    | casadi::Blocksqp |
|                   |               | for BFGS Powell   |                  |
|                   |               | modification      |                  |
+-------------------+---------------+-------------------+------------------+
| hess_lim_mem      | OT_INT        | Full or limited   | casadi::Blocksqp |
|                   |               | memory            |                  |
+-------------------+---------------+-------------------+------------------+
| hess_memsize      | OT_INT        | Memory size for   | casadi::Blocksqp |
|                   |               | L-BFGS updates    |                  |
+-------------------+---------------+-------------------+------------------+
| hess_scaling      | OT_INT        | Scaling strategy  | casadi::Blocksqp |
|                   |               | for Hessian       |                  |
|                   |               | approximation     |                  |
+-------------------+---------------+-------------------+------------------+
| hess_update       | OT_INT        | Type of Hessian   | casadi::Blocksqp |
|                   |               | approximation     |                  |
+-------------------+---------------+-------------------+------------------+
| ignore_check_vec  | OT_BOOL       | If set to true,   | casadi::Nlpsol   |
|                   |               | the input shape   |                  |
|                   |               | of F will not be  |                  |
|                   |               | checked.          |                  |
+-------------------+---------------+-------------------+------------------+
| ini_hess_diag     | OT_DOUBLE     | Initial Hessian   | casadi::Blocksqp |
|                   |               | guess: diagonal   |                  |
|                   |               | matrix            |                  |
|                   |               | diag(iniHessDiag) |                  |
+-------------------+---------------+-------------------+------------------+
| iteration_callbac | OT_FUNCTION   | A function that   | casadi::Nlpsol   |
| k                 |               | will be called at |                  |
|                   |               | each iteration    |                  |
|                   |               | with the solver   |                  |
|                   |               | as input. Check   |                  |
|                   |               | documentation of  |                  |
|                   |               | Callback .        |                  |
+-------------------+---------------+-------------------+------------------+
| iteration_callbac | OT_BOOL       | If set to true,   | casadi::Nlpsol   |
| k_ignore_errors   |               | errors thrown by  |                  |
|                   |               | iteration_callbac |                  |
|                   |               | k will be         |                  |
|                   |               | ignored.          |                  |
+-------------------+---------------+-------------------+------------------+
| iteration_callbac | OT_INT        | Only call the     | casadi::Nlpsol   |
| k_step            |               | callback function |                  |
|                   |               | every few         |                  |
|                   |               | iterations.       |                  |
+-------------------+---------------+-------------------+------------------+
| kappa_f           | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| kappa_minus       | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| kappa_plus        | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| kappa_plus_max    | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| kappa_soc         | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| linsol            | OT_STRING     | The linear solver | casadi::Blocksqp |
|                   |               | to be used by the |                  |
|                   |               | QP method         |                  |
+-------------------+---------------+-------------------+------------------+
| max_consec_reduce | OT_INT        | Maximum number of | casadi::Blocksqp |
| d_steps           |               | consecutive       |                  |
|                   |               | reduced steps     |                  |
+-------------------+---------------+-------------------+------------------+
| max_consec_skippe | OT_INT        | Maximum number of | casadi::Blocksqp |
| d_updates         |               | consecutive       |                  |
|                   |               | skipped updates   |                  |
+-------------------+---------------+-------------------+------------------+
| max_conv_qp       | OT_INT        | How many          | casadi::Blocksqp |
|                   |               | additional QPs    |                  |
|                   |               | may be solved for |                  |
|                   |               | convexification   |                  |
|                   |               | per iteration?    |                  |
+-------------------+---------------+-------------------+------------------+
| max_it_qp         | OT_INT        | Maximum number of | casadi::Blocksqp |
|                   |               | QP iterations per |                  |
|                   |               | SQP iteration     |                  |
+-------------------+---------------+-------------------+------------------+
| max_iter          | OT_INT        | Maximum number of | casadi::Blocksqp |
|                   |               | SQP iterations    |                  |
+-------------------+---------------+-------------------+------------------+
| max_line_search   | OT_INT        | Maximum number of | casadi::Blocksqp |
|                   |               | steps in line     |                  |
|                   |               | search            |                  |
+-------------------+---------------+-------------------+------------------+
| max_soc_iter      | OT_INT        | Maximum number of | casadi::Blocksqp |
|                   |               | SOC line search   |                  |
|                   |               | iterations        |                  |
+-------------------+---------------+-------------------+------------------+
| max_time_qp       | OT_DOUBLE     | Maximum number of | casadi::Blocksqp |
|                   |               | time in seconds   |                  |
|                   |               | per QP solve per  |                  |
|                   |               | SQP iteration     |                  |
+-------------------+---------------+-------------------+------------------+
| nlinfeastol       | OT_DOUBLE     | Nonlinear         | casadi::Blocksqp |
|                   |               | feasibility       |                  |
|                   |               | tolerance         |                  |
+-------------------+---------------+-------------------+------------------+
| obj_lo            | OT_DOUBLE     | Lower bound on    | casadi::Blocksqp |
|                   |               | objective         |                  |
|                   |               | function [-inf]   |                  |
+-------------------+---------------+-------------------+------------------+
| obj_up            | OT_DOUBLE     | Upper bound on    | casadi::Blocksqp |
|                   |               | objective         |                  |
|                   |               | function [inf]    |                  |
+-------------------+---------------+-------------------+------------------+
| opttol            | OT_DOUBLE     | Optimality        | casadi::Blocksqp |
|                   |               | tolerance         |                  |
+-------------------+---------------+-------------------+------------------+
| oracle_options    | OT_DICT       | Options to be     | casadi::Nlpsol   |
|                   |               | passed to the     |                  |
|                   |               | oracle function   |                  |
+-------------------+---------------+-------------------+------------------+
| print_header      | OT_BOOL       | Print solver      | casadi::Blocksqp |
|                   |               | header at startup |                  |
+-------------------+---------------+-------------------+------------------+
| print_iteration   | OT_BOOL       | Print SQP         | casadi::Blocksqp |
|                   |               | iterations        |                  |
+-------------------+---------------+-------------------+------------------+
| qpsol             | OT_STRING     | The QP solver to  | casadi::Blocksqp |
|                   |               | be used by the    |                  |
|                   |               | SQP method        |                  |
+-------------------+---------------+-------------------+------------------+
| qpsol_options     | OT_DICT       | Options to be     | casadi::Blocksqp |
|                   |               | passed to the QP  |                  |
|                   |               | solver            |                  |
+-------------------+---------------+-------------------+------------------+
| restore_feas      | OT_BOOL       | Use feasibility   | casadi::Blocksqp |
|                   |               | restoration phase |                  |
+-------------------+---------------+-------------------+------------------+
| s_f               | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| s_theta           | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| schur             | OT_BOOL       | Use qpOASES Schur | casadi::Blocksqp |
|                   |               | compliment        |                  |
|                   |               | approach          |                  |
+-------------------+---------------+-------------------+------------------+
| skip_first_global | OT_BOOL       | No globalization  | casadi::Blocksqp |
| ization           |               | strategy in first |                  |
|                   |               | iteration         |                  |
+-------------------+---------------+-------------------+------------------+
| theta_max         | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| theta_min         | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| verbose_init      | OT_BOOL       | Print out timing  | casadi::Nlpsol   |
|                   |               | information about |                  |
|                   |               | the different     |                  |
|                   |               | stages of         |                  |
|                   |               | initialization    |                  |
+-------------------+---------------+-------------------+------------------+
| warmstart         | OT_BOOL       | Use warmstarting  | casadi::Blocksqp |
+-------------------+---------------+-------------------+------------------+
| warn_initial_boun | OT_BOOL       | Warn if the       | casadi::Nlpsol   |
| ds                |               | initial guess     |                  |
|                   |               | does not satisfy  |                  |
|                   |               | LBX and UBX       |                  |
+-------------------+---------------+-------------------+------------------+
| which_second_derv | OT_INT        | For which block   | casadi::Blocksqp |
|                   |               | should second     |                  |
|                   |               | derivatives be    |                  |
|                   |               | provided by the   |                  |
|                   |               | user              |                  |
+-------------------+---------------+-------------------+------------------+

Diagrams
--------



C++ includes: blocksqp.hpp ";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")
casadi::Blocksqp::secondOrderCorrection(BlocksqpMemory *m, double cNorm,
double cNormTrial, double dfTdeltaXi, bool swCond, int it) const  "

[INTERNAL] ";

%feature("docstring")  casadi::Blocksqp::solve(void *mem) const override "

[INTERNAL] ";

%feature("docstring")  casadi::Blocksqp::kktErrorReduction(BlocksqpMemory
*m) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::codegen_body(CodeGenerator
&g) const  "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring")  casadi::FunctionInternal::check_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

";

%feature("docstring")  casadi::Nlpsol::setOptionsFromFile(const std::string
&file) "

[INTERNAL]  Read options from parameter xml.

";

%feature("docstring")  casadi::FunctionInternal::instruction_input(int k)
const  "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::Blocksqp::class_name() const override "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring")
casadi::Blocksqp::feasibilityRestorationPhase(BlocksqpMemory *m) const  "

[INTERNAL] ";

%feature("docstring")  casadi::Blocksqp::updateStepBounds(BlocksqpMemory *m,
bool soc) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")
casadi::FunctionInternal::codegen_declarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::Blocksqp::filterLineSearch(BlocksqpMemory *m)
const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::instruction_MX(int k) const
"

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring")  casadi::FunctionInternal::size2_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::Blocksqp::calcOptTol(BlocksqpMemory *m) const
"

[INTERNAL]  Update optimization tolerance (similar to SNOPT) in current
iterate.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::Blocksqp::calcInitialHessian(BlocksqpMemory
*m) const  "

[INTERNAL] ";

%feature("docstring")  casadi::Blocksqp::calcInitialHessian(BlocksqpMemory
*m, int b) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M > > &aseed) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::get_reltol() const  "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::Blocksqp::augmentFilter(BlocksqpMemory *m,
double cNorm, double obj) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::Nlpsol::integer_support() const  "

[INTERNAL]  Can discrete variables be treated.

";

%feature("docstring")  casadi::Nlpsol::get_name_in(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")
casadi::Blocksqp::calcHessianUpdateLimitedMemory(BlocksqpMemory *m, int
updateType, int hessScaling) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::uses_output() const  "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring")  casadi::Nlpsol::eval(const double **arg, double
**res, int *iw, double *w, void *mem) const override "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::FunctionInternal::instruction_id(int k) const
"

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(int nadj,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::reverse(int nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::Blocksqp::initIterate(BlocksqpMemory *m)
const  "

[INTERNAL]  Set initial filter, objective function, tolerances etc.

";

%feature("docstring")  casadi::Blocksqp::evaluate(BlocksqpMemory *m, double
*f, double *g, double *grad_f, double *jac_g) const  "

[INTERNAL]  Evaluate objective and constraints, including derivatives.

";

%feature("docstring")  casadi::Blocksqp::evaluate(BlocksqpMemory *m, const
double *xk, double *f, double *g) const  "

[INTERNAL]  Evaluate objective and constraints, no derivatives.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::get_partition(int iind, int
oind, Sparsity &D1, Sparsity &D2, bool compact, bool symmetric, bool
allow_forward, bool allow_reverse) const  "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian(const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const double
**arg, double **res, int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const SXElem
**arg, SXElem **res, int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const bvec_t
**arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::Blocksqp::set_work(void *mem, const double
**&arg, double **&res, int *&iw, double *&w) const override "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::Nlpsol::get_n_out() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::check_res(const
std::vector< M > &res) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::replace_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< int > &order_in, const std::vector< int >
&order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::Nlpsol::get_default_in(int ind) const
override "

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::codegen_meta(CodeGenerator
&g) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::Blocksqp::initStats(BlocksqpMemory *m) const
"

[INTERNAL] ";

%feature("docstring")  casadi::Blocksqp::printInfo(BlocksqpMemory *m) const
"

[INTERNAL]  Print information about the SQP method.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsityGen(int iind,
int oind, bool symmetric, int gr_i=1, int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, int order, bool
tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::FunctionInternal::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::Blocksqp::reduceSOCStepsize(BlocksqpMemory
*m, double *alphaSOC) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::get_min_in(int ind) const
"

[INTERNAL]  Get smallest input value.

";

%feature("docstring")  casadi::FunctionInternal::get_free() const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::Blocksqp::free_mem(void *mem) const override
"

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::Blocksqp::updateDeltaGamma(BlocksqpMemory *m)
const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::instruction_output(int k)
const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::OracleFunction::oracle() const override "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::OracleFunction::jit_dependencies(const
std::string &fname) override "

[INTERNAL]  JIT for dependencies.

";

%feature("docstring")  casadi::OracleFunction::print_fstats(const
OracleMemory *m) const  "

[INTERNAL]  Print statistics.

";

%feature("docstring")  casadi::FunctionInternal::size_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInput(int k) const
"

[DEPRECATED] Renamed instruction_index

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(int nfwd) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::OracleFunction::generate_dependencies(const
std::string &fname, const Dict &opts) const override "

[INTERNAL]  Export / Generate C code for the generated functions.

";

%feature("docstring")  casadi::FunctionInternal::sx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::Blocksqp::calcSR1(BlocksqpMemory *m, const
double *gamma, const double *delta, int b) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::symbolic_output(const
std::vector< MX > &arg) const  "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::FunctionInternal::eval_dm(const std::vector<
DM > &arg) const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::FunctionInternal::definition() const  "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring")  casadi::FunctionInternal::has_derivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::matching_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(int iind,
int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::forward(int nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::Blocksqp::solveQP(BlocksqpMemory *m, double
*deltaXi, double *lambdaQP, bool matricesChanged=true) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::OracleFunction::get_stats(void *mem) const
override "

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::Blocksqp::reduceStepsize(BlocksqpMemory *m,
double *alpha) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::sx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::Blocksqp::lInfConstraintNorm(BlocksqpMemory
*m, const double *xk, const double *g) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::Blocksqp::calcLagrangeGradient(BlocksqpMemory
*m, const double *lam_x, const double *lam_g, const double *grad_f, double
*jacNz, double *grad_lag, int flag) const  "

[INTERNAL]  Compute gradient of Lagrangian function (sparse version)

";

%feature("docstring")  casadi::Blocksqp::calcLagrangeGradient(BlocksqpMemory
*m, double *grad_lag, int flag) const  "

[INTERNAL]  Overloaded function for convenience, uses current variables of
SQPiterate vars.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::FunctionInternal::get_abstol() const  "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring")  casadi::Blocksqp::init_mem(void *mem) const override
"

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::info() const  "

[INTERNAL]  Obtain information about function

";

%feature("docstring")  casadi::Blocksqp::sizeInitialHessian(BlocksqpMemory
*m, const double *gamma, const double *delta, int b, int option) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::export_code(const
std::string &lang, std::ostream &stream, const Dict &options) const  "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::get_reverse(int nadj, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::get_max_in(int ind) const
"

[INTERNAL]  Get largest input value.

";

%feature("docstring")  casadi::OracleFunction::set_temp(void *mem, const
double **arg, double **res, int *iw, double *w) const override "

[INTERNAL]  Set the work vectors.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")
casadi::Blocksqp::feasibilityRestorationHeuristic(BlocksqpMemory *m) const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::getAtomicOutput(int k)
const  "

[DEPRECATED] Renamed instruction_output

";

%feature("docstring")  casadi::Nlpsol::get_sparsity_out(int i) override "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::OracleFunction::create_function(const
std::string &fname, const std::vector< std::string > &s_in, const
std::vector< std::string > &s_out, const Function::AuxOut
&aux=Function::AuxOut()) "

[INTERNAL]  Create an oracle function

";

%feature("docstring")  casadi::OracleFunction::calc_function(OracleMemory
*m, const std::string &fcn, const double *const *arg=0) const  "

[INTERNAL] ";

%feature("docstring")  casadi::OracleFunction::monitored(const std::string
&name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::Blocksqp::convertHessian(BlocksqpMemory *m)
const  "

[INTERNAL]  Convert *hess to column compressed sparse format.

";

%feature("docstring")  casadi::Blocksqp::updateStats(BlocksqpMemory *m)
const  "

[INTERNAL] ";


// File: classcasadi_1_1BonMinMessageHandler.xml
%feature("docstring") casadi::BonMinMessageHandler "

[INTERNAL]

>List of available options

+-------------------+---------------+-------------------+------------------+
|        Id         |     Type      |    Description    |     Used in      |
+===================+===============+===================+==================+
| bonmin            | OT_DICT       | Options to be     | casadi::BonMinMe |
|                   |               | passed to BONMIN  | ssageHandler     |
+-------------------+---------------+-------------------+------------------+
| calc_multipliers  | OT_BOOL       | Calculate         | casadi::Nlpsol   |
|                   |               | Lagrange          |                  |
|                   |               | multipliers in    |                  |
|                   |               | the Nlpsol base   |                  |
|                   |               | class             |                  |
+-------------------+---------------+-------------------+------------------+
| con_integer_md    | OT_DICT       | Integer metadata  | casadi::BonMinMe |
|                   |               | (a dictionary     | ssageHandler     |
|                   |               | with lists of     |                  |
|                   |               | integers) about   |                  |
|                   |               | constraints to be |                  |
|                   |               | passed to BONMIN  |                  |
+-------------------+---------------+-------------------+------------------+
| con_numeric_md    | OT_DICT       | Numeric metadata  | casadi::BonMinMe |
|                   |               | (a dictionary     | ssageHandler     |
|                   |               | with lists of     |                  |
|                   |               | reals) about      |                  |
|                   |               | constraints to be |                  |
|                   |               | passed to BONMIN  |                  |
+-------------------+---------------+-------------------+------------------+
| con_string_md     | OT_DICT       | String metadata   | casadi::BonMinMe |
|                   |               | (a dictionary     | ssageHandler     |
|                   |               | with lists of     |                  |
|                   |               | strings) about    |                  |
|                   |               | constraints to be |                  |
|                   |               | passed to BONMIN  |                  |
+-------------------+---------------+-------------------+------------------+
| discrete          | OT_BOOLVECTOR | Indicates which   | casadi::Nlpsol   |
|                   |               | of the variables  |                  |
|                   |               | are discrete,     |                  |
|                   |               | i.e. integer-     |                  |
|                   |               | valued            |                  |
+-------------------+---------------+-------------------+------------------+
| eval_errors_fatal | OT_BOOL       | When errors occur | casadi::Nlpsol   |
|                   |               | during evaluation |                  |
|                   |               | of f,g,...,stop   |                  |
|                   |               | the iterations    |                  |
+-------------------+---------------+-------------------+------------------+
| expand            | OT_BOOL       | Replace MX with   | casadi::Nlpsol   |
|                   |               | SX expressions in |                  |
|                   |               | problem           |                  |
|                   |               | formulation       |                  |
|                   |               | [false]           |                  |
+-------------------+---------------+-------------------+------------------+
| grad_f            | OT_FUNCTION   | Function for      | casadi::BonMinMe |
|                   |               | calculating the   | ssageHandler     |
|                   |               | gradient of the   |                  |
|                   |               | objective         |                  |
|                   |               | (column,          |                  |
|                   |               | autogenerated by  |                  |
|                   |               | default)          |                  |
+-------------------+---------------+-------------------+------------------+
| grad_f_options    | OT_DICT       | Options for the   | casadi::BonMinMe |
|                   |               | autogenerated     | ssageHandler     |
|                   |               | gradient of the   |                  |
|                   |               | objective.        |                  |
+-------------------+---------------+-------------------+------------------+
| hess_lag          | OT_FUNCTION   | Function for      | casadi::BonMinMe |
|                   |               | calculating the   | ssageHandler     |
|                   |               | Hessian of the    |                  |
|                   |               | Lagrangian        |                  |
|                   |               | (autogenerated by |                  |
|                   |               | default)          |                  |
+-------------------+---------------+-------------------+------------------+
| hess_lag_options  | OT_DICT       | Options for the   | casadi::BonMinMe |
|                   |               | autogenerated     | ssageHandler     |
|                   |               | Hessian of the    |                  |
|                   |               | Lagrangian.       |                  |
+-------------------+---------------+-------------------+------------------+
| ignore_check_vec  | OT_BOOL       | If set to true,   | casadi::Nlpsol   |
|                   |               | the input shape   |                  |
|                   |               | of F will not be  |                  |
|                   |               | checked.          |                  |
+-------------------+---------------+-------------------+------------------+
| iteration_callbac | OT_FUNCTION   | A function that   | casadi::Nlpsol   |
| k                 |               | will be called at |                  |
|                   |               | each iteration    |                  |
|                   |               | with the solver   |                  |
|                   |               | as input. Check   |                  |
|                   |               | documentation of  |                  |
|                   |               | Callback .        |                  |
+-------------------+---------------+-------------------+------------------+
| iteration_callbac | OT_BOOL       | If set to true,   | casadi::Nlpsol   |
| k_ignore_errors   |               | errors thrown by  |                  |
|                   |               | iteration_callbac |                  |
|                   |               | k will be         |                  |
|                   |               | ignored.          |                  |
+-------------------+---------------+-------------------+------------------+
| iteration_callbac | OT_INT        | Only call the     | casadi::Nlpsol   |
| k_step            |               | callback function |                  |
|                   |               | every few         |                  |
|                   |               | iterations.       |                  |
+-------------------+---------------+-------------------+------------------+
| jac_g             | OT_FUNCTION   | Function for      | casadi::BonMinMe |
|                   |               | calculating the   | ssageHandler     |
|                   |               | Jacobian of the   |                  |
|                   |               | constraints       |                  |
|                   |               | (autogenerated by |                  |
|                   |               | default)          |                  |
+-------------------+---------------+-------------------+------------------+
| jac_g_options     | OT_DICT       | Options for the   | casadi::BonMinMe |
|                   |               | autogenerated     | ssageHandler     |
|                   |               | Jacobian of the   |                  |
|                   |               | constraints.      |                  |
+-------------------+---------------+-------------------+------------------+
| oracle_options    | OT_DICT       | Options to be     | casadi::Nlpsol   |
|                   |               | passed to the     |                  |
|                   |               | oracle function   |                  |
+-------------------+---------------+-------------------+------------------+
| pass_nonlinear_va | OT_BOOL       | Pass list of      | casadi::BonMinMe |
| riables           |               | variables         | ssageHandler     |
|                   |               | entering          |                  |
|                   |               | nonlinearly to    |                  |
|                   |               | BONMIN            |                  |
+-------------------+---------------+-------------------+------------------+
| var_integer_md    | OT_DICT       | Integer metadata  | casadi::BonMinMe |
|                   |               | (a dictionary     | ssageHandler     |
|                   |               | with lists of     |                  |
|                   |               | integers) about   |                  |
|                   |               | variables to be   |                  |
|                   |               | passed to BONMIN  |                  |
+-------------------+---------------+-------------------+------------------+
| var_numeric_md    | OT_DICT       | Numeric metadata  | casadi::BonMinMe |
|                   |               | (a dictionary     | ssageHandler     |
|                   |               | with lists of     |                  |
|                   |               | reals) about      |                  |
|                   |               | variables to be   |                  |
|                   |               | passed to BONMIN  |                  |
+-------------------+---------------+-------------------+------------------+
| var_string_md     | OT_DICT       | String metadata   | casadi::BonMinMe |
|                   |               | (a dictionary     | ssageHandler     |
|                   |               | with lists of     |                  |
|                   |               | strings) about    |                  |
|                   |               | variables to be   |                  |
|                   |               | passed to BONMIN  |                  |
+-------------------+---------------+-------------------+------------------+
| verbose_init      | OT_BOOL       | Print out timing  | casadi::Nlpsol   |
|                   |               | information about |                  |
|                   |               | the different     |                  |
|                   |               | stages of         |                  |
|                   |               | initialization    |                  |
+-------------------+---------------+-------------------+------------------+
| warn_initial_boun | OT_BOOL       | Warn if the       | casadi::Nlpsol   |
| ds                |               | initial guess     |                  |
|                   |               | does not satisfy  |                  |
|                   |               | LBX and UBX       |                  |
+-------------------+---------------+-------------------+------------------+

Diagrams
--------



C++ includes: b0_options.hpp ";


// File: classcasadi_1_1BonminUserClass.xml
%feature("docstring") casadi::BonminUserClass "

[INTERNAL] C++ includes: bonmin_nlp.hpp ";

%feature("docstring")
casadi::BonminUserClass::finalize_solution(TMINLP::SolverReturn status,
Index n, const Number *x, Number obj_value) override "

[INTERNAL]  This method is called when the algorithm is complete so the TNLP
can store/write the solution

";

%feature("docstring")  casadi::BonminUserClass::eval_g(Index n, const Number
*x, bool new_x, Index m, Number *g) override "

[INTERNAL]  Method to return the constraint residuals

";

%feature("docstring")  casadi::BonminUserClass::eval_f(Index n, const Number
*x, bool new_x, Number &obj_value) override "

[INTERNAL]  Method to return the objective value

";

%feature("docstring")
casadi::BonminUserClass::get_constraints_linearity(Index m,
Ipopt::TNLP::LinearityType *const_types) override "

[INTERNAL] ";

%feature("docstring") casadi::BonminUserClass::BonminUserClass(const
BonminInterface &bonminInterface, BonminMemory *mem) "

[INTERNAL] ";

%feature("docstring")  casadi::BonminUserClass::get_starting_point(Index n,
bool init_x, Number *x, bool init_z, Number *z_L, Number *z_U, Index m, bool
init_lambda, Number *lambda) override "

[INTERNAL]  Method to return the starting point for the algorithm

";

%feature("docstring")
casadi::BonminUserClass::get_number_of_nonlinear_variables() "

[INTERNAL]  Specify the number of variables that appear in the Hessian

";

%feature("docstring")  casadi::BonminUserClass::eval_jac_g(Index n, const
Number *x, bool new_x, Index m, Index nele_jac, Index *iRow, Index *jCol,
Number *values) override "

[INTERNAL]  Method to return: 1) The structure of the Jacobian (if
\"values\" is NULL) 2) The values of the Jacobian (if \"values\" is not
NULL)

";

%feature("docstring")
casadi::BonminUserClass::intermediate_callback(AlgorithmMode mode, Index
iter, Number obj_value, Number inf_pr, Number inf_du, Number mu, Number
d_norm, Number regularization_size, Number alpha_du, Number alpha_pr, Index
ls_trials, const IpoptData *ip_data, IpoptCalculatedQuantities *ip_cq) "

[INTERNAL]  This method is called at every iteration

";

%feature("docstring")  casadi::BonminUserClass::eval_h(Index n, const Number
*x, bool new_x, Number obj_factor, Index m, const Number *lambda, bool
new_lambda, Index nele_hess, Index *iRow, Index *jCol, Number *values)
override "

[INTERNAL]  Method to return: 1) The structure of the hessian of the
Lagrangian (if \"values\" is NULL) 2) The values of the hessian of the
Lagrangian (if \"values\" is not NULL)

";

%feature("docstring")  casadi::BonminUserClass::get_variables_types(Index n,
VariableType *var_types) override "

[INTERNAL] ";

%feature("docstring") casadi::BonminUserClass::~BonminUserClass "

[INTERNAL] ";

%feature("docstring")
casadi::BonminUserClass::get_list_of_nonlinear_variables(Index
num_nonlin_vars, Index *pos_nonlin_vars) "

[INTERNAL]  Specify which variables that appear in the Hessian

";

%feature("docstring")  casadi::BonminUserClass::get_bounds_info(Index n,
Number *x_l, Number *x_u, Index m, Number *g_l, Number *g_u) override "

[INTERNAL]  Method to return the bounds for my problem

";

%feature("docstring")  casadi::BonminUserClass::sosConstraints() const
override "

[INTERNAL] ";

%feature("docstring")  casadi::BonminUserClass::get_nlp_info(Index &n, Index
&m, Index &nnz_jac_g, Index &nnz_h_lag, TNLP::IndexStyleEnum &index_style)
override "

[INTERNAL]  Method to return some info about the nlp

";

%feature("docstring")  casadi::BonminUserClass::branchingInfo() const
override "

[INTERNAL] ";

%feature("docstring")  casadi::BonminUserClass::eval_grad_f(Index n, const
Number *x, bool new_x, Number *grad_f) override "

[INTERNAL]  Method to return the gradient of the objective

";

%feature("docstring")
casadi::BonminUserClass::get_variables_linearity(Index n,
Ipopt::TNLP::LinearityType *var_types) override "

[INTERNAL] ";


// File: classcasadi_1_1BSpline.xml
%feature("docstring")  casadi::FunctionInternal::get_reltol() const  "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M > > &aseed) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::BSpline::get_sparsity_in(int i) override "

Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring")  casadi::FunctionInternal::symbolic_output(const
std::vector< MX > &arg) const  "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::BSpline::has_reverse(int nadj) const override
"

Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::FunctionInternal::replace_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring")  casadi::FunctionInternal::get_name_out(int i) "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::get_default_in(int ind)
const  "

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::sx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::matching_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

";

%feature("docstring")  casadi::FunctionInternal::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< int > &order_in, const std::vector< int >
&order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(int iind, int
oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInput(int k) const
"

[DEPRECATED] Renamed instruction_index

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::size1_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::sp_forward(const bvec_t
**arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::BSpline::class_name() const override "

Readable name of the internal class.

";

%feature("docstring")  casadi::FunctionInternal::finalize(const Dict &opts)
override "

[INTERNAL]  Finalize the object creation.

";

%feature("docstring")  casadi::ProtoFunction::free_mem(void *mem) const  "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsityGen(int iind,
int oind, bool symmetric, int gr_i=1, int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOutput(int k)
const  "

[DEPRECATED] Renamed instruction_output

";

%feature("docstring")  casadi::BSplineCommon::get_options() const override "

Options.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::disp(std::ostream &stream,
bool more) const override "

[INTERNAL]  Display object.

";

%feature("docstring")  casadi::FunctionInternal::export_code(const
std::string &lang, std::ostream &stream, const Dict &options) const  "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring")  casadi::FunctionInternal::get_max_in(int ind) const
"

[INTERNAL]  Get largest input value.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::BSpline::get_forward(int nfwd, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const override "

Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(int nadj) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::BSpline::get_jacobian(const std::string
&name, const std::vector< std::string > &inames, const std::vector<
std::string > &onames, const Dict &opts) const override "

Return Jacobian of all input elements with respect to all output elements.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(int nadj,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, int order, bool
tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::all_scalar() const  "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const double
**arg, double **res, int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const SXElem
**arg, SXElem **res, int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const bvec_t
**arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::FunctionInternal::sp_reverse(bvec_t **arg,
bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::n_instructions() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::BSpline::has_codegen() const override "

Is codegen supported?

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::BSpline::get_sparsity_out(int i) override "

Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::size_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::eval_dm(const std::vector<
DM > &arg) const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M > > &fseed) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::get_function() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::instruction_MX(int k) const
"

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring")  casadi::BSplineCommon::get_n_out() override "

Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::definition() const  "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring")  casadi::FunctionInternal::reverse(int nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::BSpline::init(const Dict &opts) override "

Initialize.

";

%feature("docstring")  casadi::BSpline::get_reverse(int nadj, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const override "

Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::FunctionInternal::set_temp(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::get_free() const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::size_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::fwd_seed(int nfwd) const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::codegen(CodeGenerator &g,
const std::string &fname) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::replace_res(const
std::vector< M > &res) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::ProtoFunction::init_mem(void *mem) const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::get_name_in(int i) "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::BSpline::codegen_declarations(CodeGenerator
&g) const override "

Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::FunctionInternal::disp_more(std::ostream
&stream) const  "

[INTERNAL]  Print more.

";

%feature("docstring")  casadi::FunctionInternal::get_min_in(int ind) const
"

[INTERNAL]  Get smallest input value.

";

%feature("docstring")  casadi::FunctionInternal::get_partition(int iind, int
oind, Sparsity &D1, Sparsity &D2, bool compact, bool symmetric, bool
allow_forward, bool allow_reverse) const  "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::BSpline::codegen_body(CodeGenerator &g) const
override "

Generate code for the body of the C function.

";

%feature("docstring")  casadi::ProtoFunction::alloc_mem() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(int nfwd) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::get_abstol() const  "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring")  casadi::FunctionInternal::has_derivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::BSpline::has_jacobian() const override "

Return Jacobian of all input elements with respect to all output elements.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::codegen_meta(CodeGenerator
&g) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FunctionInternal::check_res(const
std::vector< M > &res) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

";

%feature("docstring")  casadi::BSplineCommon::get_n_in() override "

Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::forward(int nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::get_stats(void *mem) const
"

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::BSpline::has_forward(int nfwd) const override
"

Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::BSpline::eval(const double **arg, double
**res, int *iw, double *w, void *mem) const override "

Evaluate numerically, work vectors given.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::instruction_id(int k) const
"

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::instruction_constant(int k)
const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::instruction_output(int k)
const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(int iind,
int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FunctionInternal::uses_output() const  "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::FunctionInternal::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring") casadi::BSpline "



>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| enable_fd        | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation by   |                  |
|                  |                 | finite           |                  |
|                  |                 | differencing.    |                  |
|                  |                 | [default:        |                  |
|                  |                 | false]]          |                  |
+------------------+-----------------+------------------+------------------+
| enable_forward   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using forward    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_jacobian  | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobians of all |                  |
|                  |                 | differentiable   |                  |
|                  |                 | outputs with     |                  |
|                  |                 | respect to all   |                  |
|                  |                 | differentiable   |                  |
|                  |                 | inputs - if      |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_reverse   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | transposed       |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using reverse    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| fd_method        | OT_STRING       | Method for       | casadi::Function |
|                  |                 | finite           | Internal         |
|                  |                 | differencing     |                  |
|                  |                 | [default         |                  |
|                  |                 | 'central']       |                  |
+------------------+-----------------+------------------+------------------+
| fd_options       | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | finite           |                  |
|                  |                 | difference       |                  |
|                  |                 | instance         |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| lookup_mode      | OT_STRINGVECTOR | Sets, for each   | casadi::BSpline  |
|                  |                 | grid dimenion,   |                  |
|                  |                 | the lookup       |                  |
|                  |                 | algorithm used   |                  |
|                  |                 | to find the      |                  |
|                  |                 | correct index.   |                  |
|                  |                 | 'linear' uses a  |                  |
|                  |                 | for-loop +       |                  |
|                  |                 | break; 'exact'   |                  |
|                  |                 | uses floored     |                  |
|                  |                 | division (only   |                  |
|                  |                 | for uniform      |                  |
|                  |                 | grids).          |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: bspline.hpp ";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::jit_dependencies(const
std::string &fname) "

[INTERNAL]  Jit dependencies.

";

%feature("docstring")  casadi::FunctionInternal::matching_res(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring") casadi::BSpline::~BSpline "

Destructor.

";

%feature("docstring")  casadi::FunctionInternal::instruction_input(int k)
const  "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::info() const  "

[INTERNAL]  Obtain information about function

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::check_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

";

%feature("docstring")
casadi::FunctionInternal::codegen_sparsities(CodeGenerator &g) const  "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring") casadi::BSpline::BSpline(const std::string &name,
const std::vector< double > &knots, const std::vector< int > &offset, const
std::vector< double > &coeffs, const std::vector< int > &degree, int m) "

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const std::vector<
Matrix< D > > &arg, std::vector< Matrix< D > > &res, bool always_inline,
bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";


// File: classcasadi_1_1BSplineCommon.xml
%feature("docstring")  casadi::FunctionInternal::eval_gen(const double
**arg, double **res, int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const SXElem
**arg, SXElem **res, int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const bvec_t
**arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::instruction_id(int k) const
"

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::get_reverse(int nadj, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::get_free() const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::FunctionInternal::set_temp(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::symbolic_output(const
std::vector< MX > &arg) const  "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FunctionInternal::get_max_in(int ind) const
"

[INTERNAL]  Get largest input value.

";

%feature("docstring")  casadi::ProtoFunction::init_mem(void *mem) const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::eval(const double **arg,
double **res, int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::uses_output() const  "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring")  casadi::FunctionInternal::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::instruction_input(int k)
const  "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring") casadi::BSplineCommon "

Base class for BSpline evaluators

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| enable_fd        | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation by   |                  |
|                  |                 | finite           |                  |
|                  |                 | differencing.    |                  |
|                  |                 | [default:        |                  |
|                  |                 | false]]          |                  |
+------------------+-----------------+------------------+------------------+
| enable_forward   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using forward    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_jacobian  | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobians of all |                  |
|                  |                 | differentiable   |                  |
|                  |                 | outputs with     |                  |
|                  |                 | respect to all   |                  |
|                  |                 | differentiable   |                  |
|                  |                 | inputs - if      |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_reverse   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | transposed       |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using reverse    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| fd_method        | OT_STRING       | Method for       | casadi::Function |
|                  |                 | finite           | Internal         |
|                  |                 | differencing     |                  |
|                  |                 | [default         |                  |
|                  |                 | 'central']       |                  |
+------------------+-----------------+------------------+------------------+
| fd_options       | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | finite           |                  |
|                  |                 | difference       |                  |
|                  |                 | instance         |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| lookup_mode      | OT_STRINGVECTOR | Sets, for each   | casadi::BSplineC |
|                  |                 | grid dimenion,   | ommon            |
|                  |                 | the lookup       |                  |
|                  |                 | algorithm used   |                  |
|                  |                 | to find the      |                  |
|                  |                 | correct index.   |                  |
|                  |                 | 'linear' uses a  |                  |
|                  |                 | for-loop +       |                  |
|                  |                 | break; 'exact'   |                  |
|                  |                 | uses floored     |                  |
|                  |                 | division (only   |                  |
|                  |                 | for uniform      |                  |
|                  |                 | grids).          |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: bspline.hpp ";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::FunctionInternal::get_forward(int nfwd, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< int > &order_in, const std::vector< int >
&order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::FunctionInternal::sx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::check_res(const
std::vector< M > &res) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

";

%feature("docstring")  casadi::FunctionInternal::export_code(const
std::string &lang, std::ostream &stream, const Dict &options) const  "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, int order, bool
tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::matching_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

";

%feature("docstring")
casadi::FunctionInternal::codegen_sparsities(CodeGenerator &g) const  "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian(const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::sp_forward(const bvec_t
**arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::size_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M > > &fseed) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::BSplineCommon::get_n_out() override "

Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::eval_dm(const std::vector<
DM > &arg) const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::FunctionInternal::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")  casadi::FunctionInternal::jit_dependencies(const
std::string &fname) "

[INTERNAL]  Jit dependencies.

";

%feature("docstring")  casadi::FunctionInternal::forward(int nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::info() const  "

[INTERNAL]  Obtain information about function

";

%feature("docstring")  casadi::FunctionInternal::sx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(int iind,
int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::n_instructions() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::check_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::FunctionInternal::get_sparsity_out(int i) "

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::FunctionInternal::reverse(int nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(int iind, int
oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::get_name_out(int i) "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(int nadj,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FunctionInternal::get_name_in(int i) "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::ProtoFunction::free_mem(void *mem) const  "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::disp_more(std::ostream
&stream) const  "

[INTERNAL]  Print more.

";

%feature("docstring")  casadi::FunctionInternal::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(int nfwd) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::size_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::instruction_constant(int k)
const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::FunctionInternal::has_forward(int nfwd) const
"

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(int nadj) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::get_stats(void *mem) const
"

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOutput(int k)
const  "

[DEPRECATED] Renamed instruction_output

";

%feature("docstring")  casadi::BSplineCommon::get_n_in() override "

Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::matching_res(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

";

%feature("docstring")  casadi::FunctionInternal::disp(std::ostream &stream,
bool more) const override "

[INTERNAL]  Display object.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")
casadi::FunctionInternal::codegen_declarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::has_reverse(int nadj) const
"

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring")  casadi::FunctionInternal::has_derivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::codegen_meta(CodeGenerator
&g) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::codegen(CodeGenerator &g,
const std::string &fname) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sp_reverse(bvec_t **arg,
bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::SharedObjectInternal::class_name() const  "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::ProtoFunction::alloc_mem() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsityGen(int iind,
int oind, bool symmetric, int gr_i=1, int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInput(int k) const
"

[DEPRECATED] Renamed instruction_index

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::replace_res(const
std::vector< M > &res) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::definition() const  "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring") casadi::BSplineCommon::BSplineCommon(const std::string
&name, const std::vector< double > &knots, const std::vector< int > &offset,
const std::vector< int > &degree, int m) "

";

%feature("docstring")  casadi::FunctionInternal::get_min_in(int ind) const
"

[INTERNAL]  Get smallest input value.

";

%feature("docstring")  casadi::FunctionInternal::fwd_seed(int nfwd) const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::get_partition(int iind, int
oind, Sparsity &D1, Sparsity &D2, bool compact, bool symmetric, bool
allow_forward, bool allow_reverse) const  "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::replace_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::get_abstol() const  "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring")  casadi::FunctionInternal::finalize(const Dict &opts)
override "

[INTERNAL]  Finalize the object creation.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M > > &aseed) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const std::vector<
Matrix< D > > &arg, std::vector< Matrix< D > > &res, bool always_inline,
bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::BSplineCommon::init(const Dict &opts)
override "

Initialize.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::instruction_output(int k)
const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::get_sparsity_in(int i) "

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::codegen_body(CodeGenerator
&g) const  "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring")  casadi::FunctionInternal::get_function() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::get_reltol() const  "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring")  casadi::BSplineCommon::get_options() const override "

Options.

";

%feature("docstring")  casadi::FunctionInternal::instruction_MX(int k) const
"

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring")  casadi::FunctionInternal::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::FunctionInternal::get_default_in(int ind)
const  "

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::FunctionInternal::all_scalar() const  "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::oracle() const  "

[INTERNAL]  Get oracle.

";


// File: classcasadi_1_1BSplineDual.xml
%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::FunctionInternal::get_default_in(int ind)
const  "

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const double
**arg, double **res, int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const SXElem
**arg, SXElem **res, int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const bvec_t
**arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::sx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::symbolic_output(const
std::vector< MX > &arg) const  "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")
casadi::BSplineDual::codegen_declarations(CodeGenerator &g) const override "

Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::get_abstol() const  "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring")  casadi::FunctionInternal::finalize(const Dict &opts)
override "

[INTERNAL]  Finalize the object creation.

";

%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::BSplineDual::has_forward(int nfwd) const
override "

Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::BSplineDual::sp_reverse(bvec_t **arg, bvec_t
**res, int *iw, bvec_t *w, void *mem) const override "

Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::FunctionInternal::jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::FunctionInternal::all_scalar() const  "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::disp(std::ostream &stream,
bool more) const override "

[INTERNAL]  Display object.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M > > &aseed) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::instruction_id(int k) const
"

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOutput(int k)
const  "

[DEPRECATED] Renamed instruction_output

";

%feature("docstring")  casadi::FunctionInternal::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::get_name_out(int i) "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::BSplineDual::get_sparsity_in(int i) override
"

Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::BSplineCommon::get_options() const override "

Options.

";

%feature("docstring")  casadi::BSplineDual::init(const Dict &opts) override
"

Initialize.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::get_name_in(int i) "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::set_temp(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::replace_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInput(int k) const
"

[DEPRECATED] Renamed instruction_index

";

%feature("docstring")  casadi::FunctionInternal::size1_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const std::vector<
Matrix< D > > &arg, std::vector< Matrix< D > > &res, bool always_inline,
bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring") casadi::BSplineDual::~BSplineDual "

Destructor.

";

%feature("docstring")  casadi::FunctionInternal::instruction_output(int k)
const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::fwd_seed(int nfwd) const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::BSplineDual::get_n_in() override "

Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian(const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::instruction_MX(int k) const
"

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(int nadj,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(int nfwd) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::disp_more(std::ostream
&stream) const  "

[INTERNAL]  Print more.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< int > &order_in, const std::vector< int >
&order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::get_stats(void *mem) const
"

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::BSplineDual::has_codegen() const override "

Is codegen supported?

";

%feature("docstring")  casadi::BSplineDual::eval(const double **arg, double
**res, int *iw, double *w, void *mem) const override "

Evaluate numerically, work vectors given.

";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::reverse(int nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring") casadi::BSplineDual "



>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| enable_fd        | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation by   |                  |
|                  |                 | finite           |                  |
|                  |                 | differencing.    |                  |
|                  |                 | [default:        |                  |
|                  |                 | false]]          |                  |
+------------------+-----------------+------------------+------------------+
| enable_forward   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using forward    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_jacobian  | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobians of all |                  |
|                  |                 | differentiable   |                  |
|                  |                 | outputs with     |                  |
|                  |                 | respect to all   |                  |
|                  |                 | differentiable   |                  |
|                  |                 | inputs - if      |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_reverse   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | transposed       |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using reverse    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| fd_method        | OT_STRING       | Method for       | casadi::Function |
|                  |                 | finite           | Internal         |
|                  |                 | differencing     |                  |
|                  |                 | [default         |                  |
|                  |                 | 'central']       |                  |
+------------------+-----------------+------------------+------------------+
| fd_options       | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | finite           |                  |
|                  |                 | difference       |                  |
|                  |                 | instance         |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| lookup_mode      | OT_STRINGVECTOR | Sets, for each   | casadi::BSplineD |
|                  |                 | grid dimenion,   | ual              |
|                  |                 | the lookup       |                  |
|                  |                 | algorithm used   |                  |
|                  |                 | to find the      |                  |
|                  |                 | correct index.   |                  |
|                  |                 | 'linear' uses a  |                  |
|                  |                 | for-loop +       |                  |
|                  |                 | break; 'exact'   |                  |
|                  |                 | uses floored     |                  |
|                  |                 | division (only   |                  |
|                  |                 | for uniform      |                  |
|                  |                 | grids).          |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: bspline.hpp ";

%feature("docstring")  casadi::FunctionInternal::get_free() const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring")  casadi::BSplineDual::has_reverse(int nadj) const
override "

Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::FunctionInternal::size_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::FunctionInternal::instruction_input(int k)
const  "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::forward(int nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::get_max_in(int ind) const
"

[INTERNAL]  Get largest input value.

";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::ProtoFunction::init_mem(void *mem) const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::definition() const  "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring")  casadi::FunctionInternal::matching_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

";

%feature("docstring")  casadi::FunctionInternal::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsityGen(int iind,
int oind, bool symmetric, int gr_i=1, int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(int nadj) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::n_instructions() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::BSplineDual::has_spfwd() const override "

Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::check_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::FunctionInternal::get_reltol() const  "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring")  casadi::BSplineDual::get_reverse(int nadj, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const override "

Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::FunctionInternal::check_res(const
std::vector< M > &res) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::BSplineDual::codegen_body(CodeGenerator &g)
const override "

Generate code for the body of the C function.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::get_min_in(int ind) const
"

[INTERNAL]  Get smallest input value.

";

%feature("docstring")  casadi::ProtoFunction::free_mem(void *mem) const  "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(int iind,
int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::BSplineDual::has_sprev() const override "

Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::uses_output() const  "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring") casadi::BSplineDual::BSplineDual(const std::string
&name, const std::vector< double > &knots, const std::vector< int > &offset,
const std::vector< double > &x, const std::vector< int > &degree, int m,
bool reverse) "

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::BSplineDual::class_name() const override "

Readable name of the internal class.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::has_derivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::instruction_constant(int k)
const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::matching_res(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::jit_dependencies(const
std::string &fname) "

[INTERNAL]  Jit dependencies.

";

%feature("docstring")  casadi::FunctionInternal::codegen(CodeGenerator &g,
const std::string &fname) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::FunctionInternal::get_partition(int iind, int
oind, Sparsity &D1, Sparsity &D2, bool compact, bool symmetric, bool
allow_forward, bool allow_reverse) const  "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::export_code(const
std::string &lang, std::ostream &stream, const Dict &options) const  "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M > > &fseed) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(int iind, int
oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::BSplineDual::get_sparsity_out(int i) override
"

Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::size_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::FunctionInternal::get_function() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::sx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::BSplineDual::sp_forward(const bvec_t **arg,
bvec_t **res, int *iw, bvec_t *w, void *mem) const override "

Propagate sparsity forward.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")
casadi::FunctionInternal::codegen_sparsities(CodeGenerator &g) const  "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring")  casadi::FunctionInternal::eval_dm(const std::vector<
DM > &arg) const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::ProtoFunction::alloc_mem() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::FunctionInternal::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring")  casadi::FunctionInternal::info() const  "

[INTERNAL]  Obtain information about function

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::BSplineDual::get_n_out() override "

Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, int order, bool
tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::codegen_meta(CodeGenerator
&g) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::BSplineDual::get_forward(int nfwd, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const override "

Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::FunctionInternal::replace_res(const
std::vector< M > &res) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";


// File: classcasadi_1_1BSplineInterpolant.xml
%feature("docstring")  casadi::FunctionInternal::check_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(int iind, int
oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::set_temp(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::codegen(CodeGenerator &g,
const std::string &fname) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")
casadi::FunctionInternal::codegen_sparsities(CodeGenerator &g) const  "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring")  casadi::BSplineInterpolant::init(const Dict &opts)
override "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::Interpolant::get_sparsity_in(int i) override
"

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::instruction_input(int k)
const  "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::size_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::FunctionInternal::get_function() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::instruction_constant(int k)
const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::FunctionInternal::instruction_id(int k) const
"

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FunctionInternal::get_free() const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::FunctionInternal::check_res(const
std::vector< M > &res) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const std::vector<
Matrix< D > > &arg, std::vector< Matrix< D > > &res, bool always_inline,
bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::forward(int nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(int iind,
int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::FunctionInternal::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring")  casadi::FunctionInternal::definition() const  "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring") casadi::BSplineInterpolant::~BSplineInterpolant "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M > > &fseed) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::ProtoFunction::free_mem(void *mem) const  "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::Interpolant::get_n_out() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::BSplineInterpolant::get_options() const
override "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::Interpolant::get_n_in() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::finalize(const Dict &opts)
override "

[INTERNAL]  Finalize the object creation.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::export_code(const
std::string &lang, std::ostream &stream, const Dict &options) const  "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring")
casadi::FunctionInternal::codegen_declarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< int > &order_in, const std::vector< int >
&order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(int nadj) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::replace_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring")  casadi::FunctionInternal::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::BSplineInterpolant "

'bspline' plugin for Interpolant

N-dimensional BSpline interpolator

Uses not-a-knot conditions. For 1D and 2D cases, this code is equivalent to
fitpack

>List of available options

+---------------+--------------+-------------------------------------------+
|      Id       |     Type     |                Description                |
+===============+==============+===========================================+
| degree        | OT_INTVECTOR | Sets, for each grid dimenion, the degree  |
|               |              | of the spline.                            |
+---------------+--------------+-------------------------------------------+
| linear_solver | OT_STRING    | Solver used for constructing the          |
|               |              | coefficient tensor.                       |
+---------------+--------------+-------------------------------------------+

Joris Gillis

>List of available options

+---------------+--------------+---------------------+---------------------+
|      Id       |     Type     |     Description     |       Used in       |
+===============+==============+=====================+=====================+
| degree        | OT_INTVECTOR | Sets, for each grid | casadi::BSplineInte |
|               |              | dimenion, the       | rpolant             |
|               |              | degree of the       |                     |
|               |              | spline.             |                     |
+---------------+--------------+---------------------+---------------------+
| linear_solver | OT_STRING    | Solver used for     | casadi::BSplineInte |
|               |              | constructing the    | rpolant             |
|               |              | coefficient tensor. |                     |
+---------------+--------------+---------------------+---------------------+

Diagrams
--------



C++ includes: bspline_interpolant.hpp ";

%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::n_instructions() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::get_partition(int iind, int
oind, Sparsity &D1, Sparsity &D2, bool compact, bool symmetric, bool
allow_forward, bool allow_reverse) const  "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::disp_more(std::ostream
&stream) const  "

[INTERNAL]  Print more.

";

%feature("docstring")  casadi::FunctionInternal::matching_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::FunctionInternal::eval_dm(const std::vector<
DM > &arg) const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::FunctionInternal::sp_forward(const bvec_t
**arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::FunctionInternal::has_forward(int nfwd) const
"

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::uses_output() const  "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring")  casadi::FunctionInternal::all_scalar() const  "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")  casadi::FunctionInternal::instruction_MX(int k) const
"

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::disp(std::ostream &stream,
bool more) const override "

[INTERNAL]  Display object.

";

%feature("docstring")  casadi::BSplineInterpolant::has_jacobian() const
override "

[INTERNAL]  Full Jacobian.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::get_default_in(int ind)
const  "

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::FunctionInternal::get_stats(void *mem) const
"

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(int nadj,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FunctionInternal::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::getJacSparsityGen(int iind,
int oind, bool symmetric, int gr_i=1, int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FunctionInternal::replace_res(const
std::vector< M > &res) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::ProtoFunction::init_mem(void *mem) const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInput(int k) const
"

[DEPRECATED] Renamed instruction_index

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::size_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::instruction_output(int k)
const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::matching_res(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

";

%feature("docstring")  casadi::ProtoFunction::alloc_mem() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::FunctionInternal::get_forward(int nfwd, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::Interpolant::get_sparsity_out(int i) override
"

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::fwd_seed(int nfwd) const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M > > &aseed) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::get_min_in(int ind) const
"

[INTERNAL]  Get smallest input value.

";

%feature("docstring")  casadi::Interpolant::get_name_out(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, int order, bool
tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const double
**arg, double **res, int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const SXElem
**arg, SXElem **res, int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const bvec_t
**arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::sx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")
casadi::BSplineInterpolant::codegen_body(CodeGenerator &g) const override "

[INTERNAL]  Generate code for the body of the C function.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOutput(int k)
const  "

[DEPRECATED] Renamed instruction_output

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::get_reverse(int nadj, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::BSplineInterpolant::plugin_name() const
override "

[INTERNAL] ";

%feature("docstring") casadi::BSplineInterpolant::BSplineInterpolant(const
std::string &name, const std::vector< double > &grid, const std::vector< int
> &offset, const std::vector< double > &values) "

[INTERNAL] ";

%feature("docstring")  casadi::BSplineInterpolant::eval(const double **arg,
double **res, int *iw, double *w, void *mem) const override "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::reverse(int nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::get_reltol() const  "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::jit_dependencies(const
std::string &fname) "

[INTERNAL]  Jit dependencies.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::has_derivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::codegen_meta(CodeGenerator
&g) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FunctionInternal::symbolic_output(const
std::vector< MX > &arg) const  "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::FunctionInternal::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring")  casadi::BSplineInterpolant::get_jacobian(const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const override "

[INTERNAL]  Full Jacobian.

";

%feature("docstring")  casadi::FunctionInternal::get_max_in(int ind) const
"

[INTERNAL]  Get largest input value.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::get_abstol() const  "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(int nfwd) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::BSplineInterpolant::class_name() const
override "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::sp_reverse(bvec_t **arg,
bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::BSplineInterpolant::has_codegen() const
override "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::info() const  "

[INTERNAL]  Obtain information about function

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::FunctionInternal::has_reverse(int nadj) const
"

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::Interpolant::get_name_in(int i) override "

[INTERNAL]  Names of function input and outputs.

";


// File: classcasadi_1_1Call.xml


// File: classcasadi_1_1Callback.xml
%feature("docstring")  casadi::Callback::has_forward(int nfwd) const  "

Return function that calculates forward derivatives forward(nfwd) returns a
cached instance if available, and calls  Function get_forward(int nfwd) if
no cached version is available.

";

%feature("docstring")  casadi::Function::size2_in(int ind) const  "

Get input dimension.

";

%feature("docstring")  casadi::Function::size2_in(const std::string &iname)
const  "

Get input dimension.

";

%feature("docstring")  casadi::Function::call(const std::vector< DM > &arg,
std::vector< DM > &output_res, bool always_inline=false, bool
never_inline=false) const  "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< SX > &arg,
std::vector< SX > &output_res, bool always_inline=false, bool
never_inline=false) const  "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output Legacy function: To be deprecated in a future
version of CasADi. Exists only for compatibility with Function::jacobian
pre-CasADi 3.2

";

%feature("docstring")  casadi::Function::call(const std::vector< MX > &arg,
std::vector< MX > &output_res, bool always_inline=false, bool
never_inline=false) const  "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output Legacy function: To be deprecated in a future
version of CasADi. Exists only for compatibility with Function::jacobian
pre-CasADi 3.2

";

%feature("docstring")  casadi::Function::call(const DMDict &arg, DMDict
&output_res, bool always_inline=false, bool never_inline=false) const  "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output Legacy function: To be deprecated in a future
version of CasADi. Exists only for compatibility with Function::jacobian
pre-CasADi 3.2

";

%feature("docstring")  casadi::Function::call(const SXDict &arg, SXDict
&output_res, bool always_inline=false, bool never_inline=false) const  "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output Legacy function: To be deprecated in a future
version of CasADi. Exists only for compatibility with Function::jacobian
pre-CasADi 3.2

";

%feature("docstring")  casadi::Function::call(const MXDict &arg, MXDict
&output_res, bool always_inline=false, bool never_inline=false) const  "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output Legacy function: To be deprecated in a future
version of CasADi. Exists only for compatibility with Function::jacobian
pre-CasADi 3.2

";

%feature("docstring")  casadi::Function::generate_dependencies(const
std::string &fname, const Dict &opts=Dict()) const  "

Export / Generate C code for the dependency function.

";

%feature("docstring")  casadi::Callback::get_n_in() "

Get the number of inputs This function is called during construction.

";

%feature("docstring")  casadi::Callback::get_n_out() "

Get the number of outputs This function is called during construction.

";

%feature("docstring")  casadi::Function::size_in(int ind) const  "

Get input dimension.

";

%feature("docstring")  casadi::Function::size_in(const std::string &iname)
const  "

Get input dimension.

";

%feature("docstring") casadi::Callback::Callback() "

Default constructor.

";

%feature("docstring") casadi::Callback::Callback(const Callback &obj) "

Copy constructor (throws an error)

";

%feature("docstring")  casadi::Callback::get_name_in(int i) "

Get the sparsity of an input This function is called during construction.

";

%feature("docstring")  casadi::Function::getWorkSize() const  "

[DEPRECATED] Use sz_w instead

";

%feature("docstring")  casadi::Function::instruction_id(int k) const  "

Identifier index of the instruction (SXFunction/MXFunction)

";

%feature("docstring")  casadi::Function::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::Function::slice(const std::string &name,
const std::vector< int > &order_in, const std::vector< int > &order_out,
const Dict &opts=Dict()) const  "

returns a new function with a selection of inputs/outputs of the original

";

%feature("docstring")  casadi::Function::export_code(const std::string
&lang, const std::string &fname, const Dict &options=Dict()) const  "

Export function in specific language.

Only allowed for (a subset of) SX/MX Functions

";

%feature("docstring")  casadi::Function::export_code(const std::string
&lang, const Dict &options=Dict()) const  "

Export function in specific language.

Only allowed for (a subset of) SX/MX Functions

";

%feature("docstring")  casadi::Function::hessian_old(int iind, int oind)
const  "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output Legacy function: To be deprecated in a future
version of CasADi. Exists only for compatibility with Function::hessian pre-
CasADi 3.2

";

%feature("docstring")  casadi::Function::has_function(const std::string
&fname) const  "

";

%feature("docstring")  casadi::Function::nnz_out() const  "

Get number of output nonzeros.

For a particular output or for all of the outputs

";

%feature("docstring")  casadi::Function::nnz_out(int ind) const  "

Get number of output nonzeros.

For a particular output or for all of the outputs

";

%feature("docstring")  casadi::Function::nnz_out(const std::string &oname)
const  "

Get number of output nonzeros.

For a particular output or for all of the outputs

";

%feature("docstring")  casadi::Function::mapsum(const std::vector< MX >
&arg, const std::string &parallelization="serial") const  "

Evaluate symbolically in parallel and sum (matrix graph)

Parameters:
-----------

parallelization:  Type of parallelization used: unroll|serial|openmp

";

%feature("docstring")  casadi::Function::print_free(std::ostream
&stream=casadi::uout()) const  "

[DEPRECATED] Use get_free instead

";

%feature("docstring")  casadi::Function::free_sx() const  "

Get all the free variables of the function.

";

%feature("docstring")  casadi::Function::name_out() const  "

Get output scheme.

";

%feature("docstring")  casadi::Function::name_out(int ind) const  "

Get output scheme name by index.

";

%feature("docstring")  casadi::Function::nnz_in() const  "

Get number of input nonzeros.

For a particular input or for all of the inputs

";

%feature("docstring")  casadi::Function::nnz_in(int ind) const  "

Get number of input nonzeros.

For a particular input or for all of the inputs

";

%feature("docstring")  casadi::Function::nnz_in(const std::string &iname)
const  "

Get number of input nonzeros.

For a particular input or for all of the inputs

";

%feature("docstring")  casadi::Function::forward(int nfwd) const  "

Get a function that calculates nfwd forward derivatives.

Returns a function with n_in + n_out + n_in inputs and nfwd outputs. The
first n_in inputs correspond to nondifferentiated inputs. The next n_out
inputs correspond to nondifferentiated outputs. and the last n_in inputs
correspond to forward seeds, stacked horizontally The n_out outputs
correspond to forward sensitivities, stacked horizontally. * (n_in = n_in(),
n_out = n_out())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring")  casadi::Function::default_in(int ind) const  "

Get default input value.

";

%feature("docstring")  casadi::Callback::init() "

Initialize the object This function is called after the object construction
(for the whole class hierarchy) is complete, but before the finalization
step. It is called recursively for the whole class hierarchy, starting with
the lowest level.

";

%feature("docstring")  casadi::Function::numel_out() const  "

Get number of output elements.

For a particular output or for all of the outputs

";

%feature("docstring")  casadi::Function::numel_out(int ind) const  "

Get number of output elements.

For a particular output or for all of the outputs

";

%feature("docstring")  casadi::Function::numel_out(const std::string &oname)
const  "

Get number of output elements.

For a particular output or for all of the outputs

";

%feature("docstring")  casadi::Function::print_dimensions(std::ostream
&stream=casadi::uout()) const  "

Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::Function::generate(const std::string &fname,
const Dict &opts=Dict()) const  "

Export / Generate C code for the function.

";

%feature("docstring")  casadi::Function::generate(const Dict &opts=Dict())
const  "

Export / Generate C code for the function.

";

%feature("docstring")  casadi::Function::getAtomicInput(int k) const  "

[DEPRECATED] Renamed instruction_index

";

%feature("docstring")  casadi::Function::instruction_input(int k) const  "

Locations in the work vector for the inputs of the instruction
(SXFunction/MXFunction)

";

%feature("docstring")  casadi::Function::getAtomicInputReal(int k) const  "

[DEPRECATED] Renamed instruction_constant

";

%feature("docstring")  casadi::SharedObject::is_null() const  "

Is a null pointer?

";

%feature("docstring")  casadi::Callback::has_reverse(int nadj) const  "

Return function that calculates adjoint derivatives reverse(nadj) returns a
cached instance if available, and calls  Function get_reverse(int nadj) if
no cached version is available.

";

%feature("docstring")  casadi::Function::jacobian() const  "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring")  casadi::Function::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::Function::n_nodes() const  "

Number of nodes in the algorithm.

";

%feature("docstring")  casadi::Function::sx_out(int oind) const  "

Get symbolic primitives equivalent to the output expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring")  casadi::Function::sx_out(const std::string &oname)
const  "

Get symbolic primitives equivalent to the output expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring")  casadi::Function::sx_out() const  "

Get symbolic primitives equivalent to the output expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring")  casadi::Function::print_options(std::ostream
&stream=casadi::uout()) const  "

Print options to a stream.

";

%feature("docstring")  casadi::Function::checkout() const  "

Checkout a memory object.

";

%feature("docstring")  casadi::Function::reverse(int nadj) const  "

Get a function that calculates nadj adjoint derivatives.

Returns a function with n_in + n_out + n_out inputs and n_in outputs. The
first n_in inputs correspond to nondifferentiated inputs. The next n_out
inputs correspond to nondifferentiated outputs. and the last n_out inputs
correspond to adjoint seeds, stacked horizontally The n_in outputs
correspond to adjoint sensitivities, stacked horizontally. * (n_in = n_in(),
n_out = n_out())

(n_in = n_in(), n_out = n_out())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::Callback::~Callback "

Destructor.

";

%feature("docstring")  casadi::Function::getAtomicOutput(int k) const  "

[DEPRECATED] Renamed instruction_output

";

%feature("docstring")  casadi::Function::instruction_output(int k) const  "

Location in the work vector for the output of the instruction
(SXFunction/MXFunction)

";

%feature("docstring")  casadi::Callback::uses_output() const  "

Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring")  casadi::Function::has_spfwd() const  "

Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::Function::conic_debug(const std::string
&filename) const  "

[INTERNAL]  Generate native code in the interfaced language for debugging

";

%feature("docstring")  casadi::Function::conic_debug(std::ostream &file)
const  "

[INTERNAL]  Generate native code in the interfaced language for debugging

";

%feature("docstring")  casadi::Function::which_depends(const std::string
&s_in, const std::vector< std::string > &s_out, int order=1, bool tr=false)
const  "

Which variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::Function::jit(const std::string &name, const
std::string &body, const std::vector< std::string > &name_in, const
std::vector< std::string > &name_out, const Dict &opts=Dict()) "

To resolve ambiguity on some compilers.

Create a just-in-time compiled function from a C language string The names
and sparsity patterns of all the inputs and outputs must be provided. If
sparsities are not provided, all inputs and outputs are assumed to be
scalar. Only specify the function body, assuming that input and output
nonzeros are stored in arrays with the specified naming convension. The data
type used is 'casadi_real', which is typically equal to 'double` or another
data type with the same API as 'double'.

Inputs may be null pointers. This means that the all entries are zero.
Outputs may be null points. This means that the corresponding result can be
ignored.

If an error occurs in the evaluation, issue \"return 1;\";

The final generated function will have a structure similar to:

int fname(const casadi_real** arg, casadi_real** res, int* iw, casadi_real*
w, void* mem) { const casadi_real *x1, *x2; casadi_real *r1, *r2; x1 =
*arg++; x2 = *arg++; r1 = *res++; r2 = *res++; <FUNCTION_BODY> return 0; }

";

%feature("docstring")  casadi::Function::jit(const std::string &name, const
std::string &body, const std::vector< std::string > &name_in, const
std::vector< std::string > &name_out, const std::vector< Sparsity >
&sparsity_in, const std::vector< Sparsity > &sparsity_out, const Dict
&opts=Dict()) "

To resolve ambiguity on some compilers.

Create a just-in-time compiled function from a C language string The names
and sparsity patterns of all the inputs and outputs must be provided. If
sparsities are not provided, all inputs and outputs are assumed to be
scalar. Only specify the function body, assuming that input and output
nonzeros are stored in arrays with the specified naming convension. The data
type used is 'casadi_real', which is typically equal to 'double` or another
data type with the same API as 'double'.

Inputs may be null pointers. This means that the all entries are zero.
Outputs may be null points. This means that the corresponding result can be
ignored.

If an error occurs in the evaluation, issue \"return 1;\";

The final generated function will have a structure similar to:

int fname(const casadi_real** arg, casadi_real** res, int* iw, casadi_real*
w, void* mem) { const casadi_real *x1, *x2; casadi_real *r1, *r2; x1 =
*arg++; x2 = *arg++; r1 = *res++; r2 = *res++; <FUNCTION_BODY> return 0; }

";

%feature("docstring")  casadi::Function::get_free() const  "

Get free variables as a string.

";

%feature("docstring")  casadi::Function::index_out(const std::string &name)
const  "

Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLPSOL_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Callback::construct(const std::string &name,
const Dict &opts=Dict()) "

Construct internal object This is the step that actually construct the
internal object, as the class constructor only creates a null pointer. It
should be called from the user constructor.

";

%feature("docstring")  casadi::Function::has_sprev() const  "

Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::Function::sx_in(int iind) const  "

Get symbolic primitives equivalent to the input expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring")  casadi::Function::sx_in(const std::string &iname)
const  "

Get symbolic primitives equivalent to the input expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring")  casadi::Function::sx_in() const  "

Get symbolic primitives equivalent to the input expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring")  casadi::Callback::get_forward(int nfwd, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

Return function that calculates forward derivatives forward(nfwd) returns a
cached instance if available, and calls  Function get_forward(int nfwd) if
no cached version is available.

";

%feature("docstring")  casadi::Function::max_in(int ind) const  "

Get largest input value.

";

%feature("docstring")  casadi::Function::min_in(int ind) const  "

Get smallest input value.

";

%feature("docstring")  casadi::Function::sparsity_jac(int iind, int oind,
bool compact=false, bool symmetric=false) const  "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::sparsity_jac(const std::string
&iind, int oind=0, bool compact=false, bool symmetric=false) const  "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::sparsity_jac(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) const  "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::sparsity_jac(const std::string
&iind, const std::string &oind, bool compact=false, bool symmetric=false)
const  "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::SharedObject::class_name() const  "

Get class name.

";

%feature("docstring")  casadi::SharedObject::get_str(bool more=false) const
"

Get string representation.

";

%feature("docstring")  casadi::Callback::alloc_w(size_t sz_w, bool
persist=false) "

Allocate work vectors.

";

%feature("docstring")  casadi::Function::size1_out(int ind) const  "

Get output dimension.

";

%feature("docstring")  casadi::Function::size1_out(const std::string &oname)
const  "

Get output dimension.

";

%feature("docstring")  casadi::Function::spCanEvaluate(bool fwd) const  "

[DEPRECATED] Use has_spfwd, has_sprev

";

%feature("docstring")  casadi::Function::n_instructions() const  "

Number of instruction in the algorithm (SXFunction/MXFunction)

";

%feature("docstring")  casadi::Function::instruction_constant(int k) const
"

Get the floating point output argument of an instruction ( SXFunction)

";

%feature("docstring")  casadi::Callback::has_jacobian() const  "

Return Jacobian of all input elements with respect to all output elements.

";

%feature("docstring")  casadi::Callback::finalize() "

Finalize the object This function is called after the construction and init
steps are completed, but before user functions are called. It is called
recursively for the whole class hierarchy, starting with the highest level.

";

%feature("docstring")  casadi::Function::size2_out(int ind) const  "

Get output dimension.

";

%feature("docstring")  casadi::Function::size2_out(const std::string &oname)
const  "

Get output dimension.

";

%feature("docstring")  casadi::Function::mx_in(int ind) const  "

Get symbolic primitives equivalent to the input expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring")  casadi::Function::mx_in(const std::string &iname)
const  "

Get symbolic primitives equivalent to the input expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring")  casadi::Function::mx_in() const  "

Get symbolic primitives equivalent to the input expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring")  casadi::Function::release(int mem) const  "

Release a memory object.

";

%feature("docstring")  casadi::Function::is_a(const std::string &type, bool
recursive=true) const  "

Check if the function is of a particular type Optionally check if name
matches one of the base classes (default true)

";

%feature("docstring")  casadi::Function::wrap() const  "

Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::Callback::get_sparsity_out(int i) "

Get the sparsity of an output This function is called during construction.

";

%feature("docstring")  casadi::Function::assert_size_out(int i, int nrow,
int ncol) const  "

Assert that an output dimension is equal so some given value.

";

%feature("docstring")  casadi::Function::name_in() const  "

Get input scheme.

";

%feature("docstring")  casadi::Function::name_in(int ind) const  "

Get input scheme name by index.

";

%feature("docstring")  casadi::Function::has_free() const  "

Does the function have free variables.

";

%feature("docstring")  casadi::Callback::alloc_res(size_t sz_res, bool
persist=false) "

Allocate work vectors.

";

%feature("docstring")  casadi::Function::assert_size_in(int i, int nrow, int
ncol) const  "

Assert that an input dimension is equal so some given value.

";

%feature("docstring")  casadi::Callback::get_sparsity_in(int i) "

Get the sparsity of an input This function is called during construction.

";

%feature("docstring")  casadi::SharedObject::disp(std::ostream &stream, bool
more=false) const  "

Print a description of the object.

";

%feature("docstring")  casadi::Function::n_in() const  "

Get the number of function inputs.

";

%feature("docstring")  casadi::Function::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::Function::info() const  "

Obtain information about function

";

%feature("docstring")  casadi::Function::instruction_MX(int k) const  "

";

%feature("docstring")  casadi::Function::factory(const std::string &name,
const std::vector< std::string > &s_in, const std::vector< std::string >
&s_out, const AuxOut &aux=AuxOut(), const Dict &opts=Dict()) const  "

";

%feature("docstring")  casadi::Function::getAlgorithmSize() const  "

[DEPRECATED] Renamed n_instructions

";

%feature("docstring")  casadi::Function::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::SharedObject::print_ptr(std::ostream
&stream=casadi::uout()) const  "

[INTERNAL]  Print the pointer to the internal class

";

%feature("docstring")  casadi::Callback::get_jacobian(const std::string
&name, const std::vector< std::string > &inames, const std::vector<
std::string > &onames, const Dict &opts) const  "

Return Jacobian of all input elements with respect to all output elements.

";

%feature("docstring")  casadi::Callback::alloc_iw(size_t sz_iw, bool
persist=false) "

Allocate work vectors.

";

%feature("docstring")  casadi::Callback::alloc_arg(size_t sz_arg, bool
persist=false) "

Allocate work vectors.

";

%feature("docstring")  casadi::Function::oracle() const  "

Get oracle.

";

%feature("docstring")  casadi::Callback::eval(const std::vector< DM > &arg)
const  "

Evaluate numerically, temporary matrices and work vectors.

";

%feature("docstring")  casadi::Function::numel_in() const  "

Get number of input elements.

For a particular input or for all of the inputs

";

%feature("docstring")  casadi::Function::numel_in(int ind) const  "

Get number of input elements.

For a particular input or for all of the inputs

";

%feature("docstring")  casadi::Function::numel_in(const std::string &iname)
const  "

Get number of input elements.

For a particular input or for all of the inputs

";

%feature("docstring")  casadi::Function::getAtomicOperation(int k) const  "

[DEPRECATED] Renamed instruction_id

";

%feature("docstring")  casadi::Function::map(const std::string &name, const
std::string &parallelization, int n, const std::vector< int > &reduce_in,
const std::vector< int > &reduce_out, const Dict &opts=Dict()) const  "

Map with reduction A subset of the inputs are non-repeated and a subset of
the outputs summed up.

";

%feature("docstring")  casadi::Function::map(const std::string &name, const
std::string &parallelization, int n, const std::vector< std::string >
&reduce_in, const std::vector< std::string > &reduce_out, const Dict
&opts=Dict()) const  "

Map with reduction A subset of the inputs are non-repeated and a subset of
the outputs summed up.

";

%feature("docstring")  casadi::Function::map(int n, const std::string
&parallelization="serial") const  "

Create a mapped version of this function.

Suppose the function has a signature of:

::

     f: (a, p) -> ( s )
  



The the mapped version has the signature:

::

     F: (A, P) -> (S )
  
      with
          A: horzcat([a0, a1, ..., a_(N-1)])
          P: horzcat([p0, p1, ..., p_(N-1)])
          S: horzcat([s0, s1, ..., s_(N-1)])
      and
          s0 <- f(a0, p0)
          s1 <- f(a1, p1)
          ...
          s_(N-1) <- f(a_(N-1), p_(N-1))
  



Parameters:
-----------

parallelization:  Type of parallelization used: unroll|serial|openmp

";

%feature("docstring")  casadi::Function::print_option(const std::string
&name, std::ostream &stream=casadi::uout()) const  "

Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::Function::mapaccum(const std::string &name,
int n, const Dict &opts=Dict()) const  "

Create a mapaccumulated version of this function.

Suppose the function has a signature of:

::

     f: (x, u) -> (x_next , y )
  



The the mapaccumulated version has the signature:

::

     F: (x0, U) -> (X , Y )
  
      with
          U: horzcat([u0, u1, ..., u_(N-1)])
          X: horzcat([x1, x2, ..., x_N])
          Y: horzcat([y0, y1, ..., y_(N-1)])
  
      and
          x1, y0 <- f(x0, u0)
          x2, y1 <- f(x1, u1)
          ...
          x_N, y_(N-1) <- f(x_(N-1), u_(N-1))
  



Mapaccum has the following benefits over writing an equivalent for- loop:
much faster at construction time

potentially much faster compilation times (for codegen)

offers a trade-off between memory and evaluation time

The base (settable through the options dictionary, default 10), is used to
create a tower of function calls, containing unrolled for- loops of length
maximum base.

This technique is much more scalable in terms of memory-usage, but slightly
slower at evaluation, than a plain for-loop. The effect is similar to that
of a for-loop with a check-pointing instruction after each chunk of
iterations with size base.

Set base to -1 to unroll all the way; no gains in memory efficiency here.

";

%feature("docstring")  casadi::Function::mapaccum(const std::string &name,
int n, int n_accum, const Dict &opts=Dict()) const  "

Create a mapaccumulated version of this function.

Suppose the function has a signature of:

::

     f: (x, u) -> (x_next , y )
  



The the mapaccumulated version has the signature:

::

     F: (x0, U) -> (X , Y )
  
      with
          U: horzcat([u0, u1, ..., u_(N-1)])
          X: horzcat([x1, x2, ..., x_N])
          Y: horzcat([y0, y1, ..., y_(N-1)])
  
      and
          x1, y0 <- f(x0, u0)
          x2, y1 <- f(x1, u1)
          ...
          x_N, y_(N-1) <- f(x_(N-1), u_(N-1))
  



Mapaccum has the following benefits over writing an equivalent for- loop:
much faster at construction time

potentially much faster compilation times (for codegen)

offers a trade-off between memory and evaluation time

The base (settable through the options dictionary, default 10), is used to
create a tower of function calls, containing unrolled for- loops of length
maximum base.

This technique is much more scalable in terms of memory-usage, but slightly
slower at evaluation, than a plain for-loop. The effect is similar to that
of a for-loop with a check-pointing instruction after each chunk of
iterations with size base.

Set base to -1 to unroll all the way; no gains in memory efficiency here.

";

%feature("docstring")  casadi::Function::mapaccum(const std::string &name,
int n, const std::vector< int > &accum_in, const std::vector< int >
&accum_out, const Dict &opts=Dict()) const  "

Create a mapaccumulated version of this function.

Suppose the function has a signature of:

::

     f: (x, u) -> (x_next , y )
  



The the mapaccumulated version has the signature:

::

     F: (x0, U) -> (X , Y )
  
      with
          U: horzcat([u0, u1, ..., u_(N-1)])
          X: horzcat([x1, x2, ..., x_N])
          Y: horzcat([y0, y1, ..., y_(N-1)])
  
      and
          x1, y0 <- f(x0, u0)
          x2, y1 <- f(x1, u1)
          ...
          x_N, y_(N-1) <- f(x_(N-1), u_(N-1))
  



Mapaccum has the following benefits over writing an equivalent for- loop:
much faster at construction time

potentially much faster compilation times (for codegen)

offers a trade-off between memory and evaluation time

The base (settable through the options dictionary, default 10), is used to
create a tower of function calls, containing unrolled for- loops of length
maximum base.

This technique is much more scalable in terms of memory-usage, but slightly
slower at evaluation, than a plain for-loop. The effect is similar to that
of a for-loop with a check-pointing instruction after each chunk of
iterations with size base.

Set base to -1 to unroll all the way; no gains in memory efficiency here.

";

%feature("docstring")  casadi::Function::mapaccum(const std::string &name,
int n, const std::vector< std::string > &accum_in, const std::vector<
std::string > &accum_out, const Dict &opts=Dict()) const  "

Create a mapaccumulated version of this function.

Suppose the function has a signature of:

::

     f: (x, u) -> (x_next , y )
  



The the mapaccumulated version has the signature:

::

     F: (x0, U) -> (X , Y )
  
      with
          U: horzcat([u0, u1, ..., u_(N-1)])
          X: horzcat([x1, x2, ..., x_N])
          Y: horzcat([y0, y1, ..., y_(N-1)])
  
      and
          x1, y0 <- f(x0, u0)
          x2, y1 <- f(x1, u1)
          ...
          x_N, y_(N-1) <- f(x_(N-1), u_(N-1))
  



Mapaccum has the following benefits over writing an equivalent for- loop:
much faster at construction time

potentially much faster compilation times (for codegen)

offers a trade-off between memory and evaluation time

The base (settable through the options dictionary, default 10), is used to
create a tower of function calls, containing unrolled for- loops of length
maximum base.

This technique is much more scalable in terms of memory-usage, but slightly
slower at evaluation, than a plain for-loop. The effect is similar to that
of a for-loop with a check-pointing instruction after each chunk of
iterations with size base.

Set base to -1 to unroll all the way; no gains in memory efficiency here.

";

%feature("docstring")  casadi::Function::size1_in(int ind) const  "

Get input dimension.

";

%feature("docstring")  casadi::Function::size1_in(const std::string &iname)
const  "

Get input dimension.

";

%feature("docstring")  casadi::Function::sparsity_in(int ind) const  "

Get sparsity of a given input.

";

%feature("docstring")  casadi::Function::sparsity_in(const std::string
&iname) const  "

Get sparsity of a given input.

";

%feature("docstring")  casadi::Callback::get_reverse(int nadj, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

Return function that calculates adjoint derivatives reverse(nadj) returns a
cached instance if available, and calls  Function get_reverse(int nadj) if
no cached version is available.

";

%feature("docstring")  casadi::Function::expand() const  "

Expand a function to SX.

";

%feature("docstring")  casadi::Function::expand(const std::string &name,
const Dict &opts=Dict()) const  "

Expand a function to SX.

";

%feature("docstring") casadi::Callback "

Callback function functionality.

This class provides a public API to the FunctionInternal class that can be
subclassed by the user, who is then able to implement the different virtual
method. Note that the Function class also provides a public API to
FunctionInternal, but only allows calling, not being called.

The user is responsible for not deleting this class for the lifetime of the
internal function object.

Joris Gillis, Joel Andersson

C++ includes: callback.hpp ";

%feature("docstring")  casadi::Function::n_out() const  "

Get the number of function outputs.

";

%feature("docstring")  casadi::Function::jacobian_old(int iind, int oind)
const  "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output Legacy function: To be deprecated in a future
version of CasADi. Exists only for compatibility with Function::jacobian
pre-CasADi 3.2

";

%feature("docstring") casadi::Callback::__hash__ "

Returns a number that is unique for a given Node. If the Object does not
point to any node, \"0\" is returned.

";

%feature("docstring")  casadi::Function::free_mx() const  "

Get all the free variables of the function.

";

%feature("docstring")  casadi::Function::index_in(const std::string &name)
const  "

Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLPSOL_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::generate_lifted(Function
&output_vdef_fcn, Function &output_vinit_fcn) const  "

Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::Function::sparsity_out(int ind) const  "

Get sparsity of a given output.

";

%feature("docstring")  casadi::Function::sparsity_out(const std::string
&iname) const  "

Get sparsity of a given output.

";

%feature("docstring")  casadi::Function::stats(int mem=0) const  "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::Function::name() const  "

Name of the function.

";

%feature("docstring")  casadi::Function::size_out(int ind) const  "

Get output dimension.

";

%feature("docstring")  casadi::Function::size_out(const std::string &oname)
const  "

Get output dimension.

";

%feature("docstring")  casadi::Function::fullJacobian() const  "

[DEPRECATED] Alias of Function::jacobian

";

%feature("docstring")  casadi::Function::get_function() const  "

";

%feature("docstring")  casadi::Function::get_function(const std::string
&name) const  "

";

%feature("docstring")  casadi::Callback::get_name_out(int i) "

Get the sparsity of an output This function is called during construction.

";

%feature("docstring")  casadi::Function::mx_out(int ind) const  "

Get symbolic primitives equivalent to the output expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring")  casadi::Function::mx_out(const std::string &oname)
const  "

Get symbolic primitives equivalent to the output expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring")  casadi::Function::mx_out() const  "

Get symbolic primitives equivalent to the output expressions There is no
guarantee that subsequent calls return unique answers.

";


// File: classcasadi_1_1casadi__limits.xml
%feature("docstring") casadi::casadi_limits "

casadi_limits class

The following class, which acts as a complements to the standard
numeric_limits class, allows specifying certain properties of scalar
objects. The template can be specialized for e.g. symbolic scalars Joel
Andersson

C++ includes: casadi_limits.hpp ";


// File: classcasadi_1_1CasadiException.xml
%feature("docstring")  casadi::CasadiException::what() const override "

throw () Display error.

";

%feature("docstring") casadi::CasadiException::CasadiException() "

Default constructor.

";

%feature("docstring") casadi::CasadiException::CasadiException(const
std::string &msg) "

Form message string.

";

%feature("docstring") casadi::CasadiException "

Casadi exception class.

Joel Andersson

C++ includes: exception.hpp ";

%feature("docstring") casadi::CasadiException::~CasadiException "

throw () Destructor.

";


// File: classcasadi_1_1CasadiMeta.xml
%feature("docstring") casadi::CasadiMeta "

Collects global CasADi meta information.

Joris Gillis

C++ includes: casadi_meta.hpp ";


// File: classcasadi_1_1CentralDiff.xml
%feature("docstring")  casadi::FunctionInternal::matching_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::forward(int nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(int nadj,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FiniteDiff::uses_output() const override "

[INTERNAL]  Is the scheme using the (nondifferentiated) output?

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::FiniteDiff::get_sparsity_out(int i) override
"

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const double
**arg, double **res, int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const SXElem
**arg, SXElem **res, int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const bvec_t
**arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::get_reverse(int nadj, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::set_temp(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::ProtoFunction::alloc_mem() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::CentralDiff::get_forward(int nfwd, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const override "

[INTERNAL]  Second order derivatives.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::export_code(const
std::string &lang, std::ostream &stream, const Dict &options) const  "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring")  casadi::FunctionInternal::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(int nfwd) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::matching_res(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

";

%feature("docstring")  casadi::FiniteDiff::get_n_in() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::check_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::CentralDiff::has_err() const override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::numel_out(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(int iind, int
oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::disp(std::ostream &stream,
bool more) const override "

[INTERNAL]  Display object.

";

%feature("docstring")  casadi::FunctionInternal::get_function() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::mx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::CentralDiff::get_abstol() const override "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring")  casadi::FunctionInternal::instruction_MX(int k) const
"

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring")  casadi::FunctionInternal::replace_res(const
std::vector< M > &res) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring") casadi::CentralDiff "

[INTERNAL]  Calculate derivative using central differences Joel Andersson

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| abstol           | OT_DOUBLE       | Accuracy of      | casadi::CentralD |
|                  |                 | function outputs | iff              |
|                  |                 | [default: query  |                  |
|                  |                 | object]          |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| enable_fd        | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation by   |                  |
|                  |                 | finite           |                  |
|                  |                 | differencing.    |                  |
|                  |                 | [default:        |                  |
|                  |                 | false]]          |                  |
+------------------+-----------------+------------------+------------------+
| enable_forward   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using forward    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_jacobian  | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobians of all |                  |
|                  |                 | differentiable   |                  |
|                  |                 | outputs with     |                  |
|                  |                 | respect to all   |                  |
|                  |                 | differentiable   |                  |
|                  |                 | inputs - if      |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_reverse   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | transposed       |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using reverse    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| fd_method        | OT_STRING       | Method for       | casadi::Function |
|                  |                 | finite           | Internal         |
|                  |                 | differencing     |                  |
|                  |                 | [default         |                  |
|                  |                 | 'central']       |                  |
+------------------+-----------------+------------------+------------------+
| fd_options       | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | finite           |                  |
|                  |                 | difference       |                  |
|                  |                 | instance         |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| h_iter           | OT_INT          | Number of        | casadi::CentralD |
|                  |                 | iterations to    | iff              |
|                  |                 | improve on the   |                  |
|                  |                 | step-size        |                  |
|                  |                 | [default: 1 if   |                  |
|                  |                 | error estimate   |                  |
|                  |                 | available,       |                  |
|                  |                 | otherwise 0]     |                  |
+------------------+-----------------+------------------+------------------+
| h_max            | OT_DOUBLE       | Maximum step     | casadi::CentralD |
|                  |                 | size [default 0] | iff              |
+------------------+-----------------+------------------+------------------+
| h_min            | OT_DOUBLE       | Minimum step     | casadi::CentralD |
|                  |                 | size [default    | iff              |
|                  |                 | inf]             |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| reltol           | OT_DOUBLE       | Accuracy of      | casadi::CentralD |
|                  |                 | function inputs  | iff              |
|                  |                 | [default: query  |                  |
|                  |                 | object]          |                  |
+------------------+-----------------+------------------+------------------+
| second_order_ste | OT_DOUBLE       | Second order     | casadi::CentralD |
| psize            |                 | perturbation     | iff              |
|                  |                 | size [default:   |                  |
|                  |                 | 1e-3]            |                  |
+------------------+-----------------+------------------+------------------+
| smoothing        | OT_DOUBLE       | Smoothing        | casadi::CentralD |
|                  |                 | regularization   | iff              |
|                  |                 | [default:        |                  |
|                  |                 | machine          |                  |
|                  |                 | precision]       |                  |
+------------------+-----------------+------------------+------------------+
| u_aim            | OT_DOUBLE       | Target ratio of  | casadi::CentralD |
|                  |                 | roundoff error   | iff              |
|                  |                 | to truncation    |                  |
|                  |                 | error [default:  |                  |
|                  |                 | 100.]            |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: finite_differences.hpp ";

%feature("docstring")  casadi::CentralDiff::calc_stepsize(double abstol)
const override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::disp_more(std::ostream
&stream) const  "

[INTERNAL]  Print more.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::ProtoFunction::init_mem(void *mem) const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::CentralDiff::pert(const std::string &k) const
override "

[INTERNAL] ";

%feature("docstring")  casadi::CentralDiff::pert(int k, double h) const
override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::instruction_input(int k)
const  "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::instruction_output(int k)
const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FiniteDiff::get_name_out(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FiniteDiff::get_name_in(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsityGen(int iind,
int oind, bool symmetric, int gr_i=1, int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FunctionInternal::jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::CentralDiff::CentralDiff(const std::string
&name, int n) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M > > &fseed) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::finalize(const Dict &opts)
override "

[INTERNAL]  Finalize the object creation.

";

%feature("docstring")  casadi::CentralDiff::calc_fd(double **yk, double *y0,
double *J, double h) const override "

[INTERNAL] ";

%feature("docstring")  casadi::CentralDiff::calc_fd() const override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring")  casadi::ProtoFunction::free_mem(void *mem) const  "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::fwd_seed(int nfwd) const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::CentralDiff::class_name() const override "

[INTERNAL]  Get type name.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::get_partition(int iind, int
oind, Sparsity &D1, Sparsity &D2, bool compact, bool symmetric, bool
allow_forward, bool allow_reverse) const  "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::FiniteDiff::get_n_out() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(int iind,
int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, int order, bool
tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::n_instructions() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian(const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::get_stats(void *mem) const
"

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::FunctionInternal::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::get_max_in(int ind) const
"

[INTERNAL]  Get largest input value.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FiniteDiff::has_codegen() const override "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::FunctionInternal::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FiniteDiff::get_sparsity_in(int i) override "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::sp_reverse(bvec_t **arg,
bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::get_free() const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::FunctionInternal::symbolic_output(const
std::vector< MX > &arg) const  "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInput(int k) const
"

[DEPRECATED] Renamed instruction_index

";

%feature("docstring")  casadi::FunctionInternal::sp_forward(const bvec_t
**arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::codegen(CodeGenerator &g,
const std::string &fname) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring") casadi::CentralDiff::~CentralDiff "

[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::FiniteDiff::eval(const double **arg, double
**res, int *iw, double *w, void *mem) const override "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::info() const  "

[INTERNAL]  Obtain information about function

";

%feature("docstring")
casadi::FiniteDiff::codegen_declarations(CodeGenerator &g) const override "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::FunctionInternal::size_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::get_reltol() const  "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring")  casadi::FunctionInternal::size_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::CentralDiff::n_pert() const override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::all_scalar() const  "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")  casadi::FunctionInternal::has_reverse(int nadj) const
"

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::check_res(const
std::vector< M > &res) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::FunctionInternal::instruction_constant(int k)
const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")
casadi::FunctionInternal::codegen_sparsities(CodeGenerator &g) const  "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< int > &order_in, const std::vector< int >
&order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::FiniteDiff::init(const Dict &opts) override "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::FunctionInternal::jit_dependencies(const
std::string &fname) "

[INTERNAL]  Jit dependencies.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::FunctionInternal::codegen_meta(CodeGenerator
&g) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FunctionInternal::eval_dm(const std::vector<
DM > &arg) const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::CentralDiff::has_forward(int nfwd) const
override "

[INTERNAL]  Second order derivatives.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M > > &aseed) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_min_in(int ind) const
"

[INTERNAL]  Get smallest input value.

";

%feature("docstring")  casadi::FunctionInternal::has_derivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::FunctionInternal::replace_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const std::vector<
Matrix< D > > &arg, std::vector< Matrix< D > > &res, bool always_inline,
bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(int nadj) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::reverse(int nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOutput(int k)
const  "

[DEPRECATED] Renamed instruction_output

";

%feature("docstring")  casadi::FunctionInternal::instruction_id(int k) const
"

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FiniteDiff::get_options() const override "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::FiniteDiff::codegen_body(CodeGenerator &g)
const override "

[INTERNAL]  Generate code for the body of the C function.

";

%feature("docstring")  casadi::FiniteDiff::get_default_in(int ind) const
override "

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::definition() const  "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";


// File: classcasadi_1_1ClangCompiler.xml
%feature("docstring") casadi::ClangCompiler::ClangCompiler(const std::string
&name) "

[INTERNAL]  Constructor.

";

%feature("docstring")  casadi::ClangCompiler::init(const Dict &opts)
override "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::ImporterInternal::read_external(const
std::string &sym, bool inlined, std::istream &file, int &offset) "

[INTERNAL]  Get an external function declaration.

";

%feature("docstring")  casadi::ImporterInternal::disp(std::ostream &stream,
bool more) const override "

[INTERNAL]  Print.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::ClangCompiler::get_options() const override "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::ImporterInternal::has_meta(const std::string
&cmd, int ind=-1) const  "

[INTERNAL]  Does an entry exist?

";

%feature("docstring") casadi::ClangCompiler "

'clang' plugin for Importer

Joris Gillis  Interface to the JIT compiler CLANG

>List of available options

+--------------+-----------------+-----------------------------------------+
|      Id      |      Type       |               Description               |
+==============+=================+=========================================+
| flags        | OT_STRINGVECTOR | Compile flags for the JIT compiler.     |
|              |                 | Default: None                           |
+--------------+-----------------+-----------------------------------------+
| include_path | OT_STRING       | Include paths for the JIT compiler. The |
|              |                 | include directory shipped with CasADi   |
|              |                 | will be automatically appended.         |
+--------------+-----------------+-----------------------------------------+

>List of available options

+--------------+-----------------+--------------------+--------------------+
|      Id      |      Type       |    Description     |      Used in       |
+==============+=================+====================+====================+
| flags        | OT_STRINGVECTOR | Compile flags for  | casadi::ClangCompi |
|              |                 | the JIT compiler.  | ler                |
|              |                 | Default: None      |                    |
+--------------+-----------------+--------------------+--------------------+
| include_path | OT_STRING       | Include paths for  | casadi::ClangCompi |
|              |                 | the JIT compiler.  | ler                |
|              |                 | The include        |                    |
|              |                 | directory shipped  |                    |
|              |                 | with CasADi will   |                    |
|              |                 | be automatically   |                    |
|              |                 | appended.          |                    |
+--------------+-----------------+--------------------+--------------------+
| verbose      | OT_BOOL         | Verbose evaluation | casadi::ImporterIn |
|              |                 | for debugging      | ternal             |
+--------------+-----------------+--------------------+--------------------+

Diagrams
--------



C++ includes: clang_compiler.hpp ";

%feature("docstring")  casadi::ImporterInternal::to_text(const std::string
&cmd, int ind=-1) const  "

[INTERNAL]  Get entry as a text.

";

%feature("docstring")  casadi::ImporterInternal::get_meta(const std::string
&cmd, int ind=-1) const  "

[INTERNAL]  Get entry as a text.

";

%feature("docstring")  casadi::ImporterInternal::can_have_meta() const  "

[INTERNAL]  Can meta information be read?

";

%feature("docstring")  casadi::ImporterInternal::construct(const Dict &opts)
"

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::ImporterInternal::inlined(const std::string
&symname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::ImporterInternal::read_meta(std::istream
&file, int &offset) "

[INTERNAL]  Get meta information.

";

%feature("docstring")  casadi::ClangCompiler::class_name() const override "

[INTERNAL]  Get type name.

";

%feature("docstring")  casadi::ImporterInternal::body(const std::string
&symname) const  "

[INTERNAL]  Get the function body, if inlined.

";

%feature("docstring")  casadi::ClangCompiler::get_function(const std::string
&symname) override "

[INTERNAL]  Get a function pointer for numerical evaluation.

";

%feature("docstring") casadi::ClangCompiler::~ClangCompiler "

[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::ClangCompiler::plugin_name() const override "

[INTERNAL]  Get name of plugin.

";

%feature("docstring")  casadi::ImporterInternal::has_function(const
std::string &symname) const  "

[INTERNAL]  Get a function pointer for numerical evaluation.

";


// File: classcasadi_1_1CodeGenerator.xml
%feature("docstring")  casadi::CodeGenerator::add_include(const std::string
&new_include, bool relative_path=false, const std::string
&use_ifdef=std::string()) "

Add an include file optionally using a relative path \"...\" instead of an
absolute path <...>

";

%feature("docstring") casadi::CodeGenerator "

Helper class for C code generation.

Joel Andersson

C++ includes: code_generator.hpp ";

%feature("docstring")  casadi::CodeGenerator::dump() const  "

Generate a file, return code as string.

";

%feature("docstring")  casadi::CodeGenerator::add(const Function &f, bool
with_jac_sparsity=false) "

Add a function (name generated)

";

%feature("docstring") casadi::CodeGenerator::CodeGenerator(const std::string
&name, const Dict &opts=Dict()) "

Constructor.

";

%feature("docstring")  casadi::CodeGenerator::generate(const std::string
&prefix="") const  "

Generate file(s) The \"prefix\" argument will be prepended to the generated
files and may be a directory or a file prefix. returns the filename.

";


// File: classcasadi_1_1Collocation.xml
%feature("docstring")  casadi::Collocation::class_name() const override "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring")  casadi::Integrator::sp_reverse(bvec_t **arg, bvec_t
**res, int *iw, bvec_t *w, void *mem) const override "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< int > &order_in, const std::vector< int >
&order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const std::vector<
Matrix< D > > &arg, std::vector< Matrix< D > > &res, bool always_inline,
bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::FunctionInternal::get_min_in(int ind) const
"

[INTERNAL]  Get smallest input value.

";

%feature("docstring")  casadi::FunctionInternal::get_default_in(int ind)
const  "

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::Integrator::sp_forward(const bvec_t **arg,
bvec_t **res, int *iw, bvec_t *w, void *mem) const override "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::get_reltol() const  "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring")  casadi::FunctionInternal::instruction_id(int k) const
"

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::uses_output() const  "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::Integrator::has_forward(int nfwd) const
override "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::Integrator::aug_adj(int nadj) const  "

[INTERNAL]  Generate a augmented DAE system with nadj adjoint sensitivities.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::Integrator::get_sparsity_in(int i) override "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::definition() const  "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::codegen_body(CodeGenerator
&g) const  "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn, const std::string &fname, bool jit=false) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::FunctionInternal::size_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Collocation::~Collocation "

[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::OracleFunction::oracle() const override "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::OracleFunction::set_temp(void *mem, const
double **arg, double **res, int *iw, double *w) const override "

[INTERNAL]  Set the work vectors.

";

%feature("docstring")  casadi::FixedStepIntegrator::advance(IntegratorMemory
*mem, double t, double *x, double *z, double *q) const override "

[INTERNAL]  Advance solution in time.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::check_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

";

%feature("docstring")  casadi::Collocation::plugin_name() const override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::ImplicitFixedStepIntegrator::getExplicitB()
const override "

[INTERNAL]  Get explicit dynamics (backward problem)

";

%feature("docstring")  casadi::FunctionInternal::replace_res(const
std::vector< M > &res) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::replace_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring")  casadi::Collocation::setupFG() override "

[INTERNAL]  Setup F and G.

";

%feature("docstring")  casadi::FunctionInternal::get_free() const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::FunctionInternal::get_partition(int iind, int
oind, Sparsity &D1, Sparsity &D2, bool compact, bool symmetric, bool
allow_forward, bool allow_reverse) const  "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOutput(int k)
const  "

[DEPRECATED] Renamed instruction_output

";

%feature("docstring")  casadi::Integrator::print_stats(IntegratorMemory
*mem) const  "

[INTERNAL]  Print solver statistics.

";

%feature("docstring")  casadi::OracleFunction::has_function(const
std::string &fname) const override "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::eval(const double **arg, double
**res, int *iw, double *w, void *mem) const override "

[INTERNAL]  evaluate

";

%feature("docstring")  casadi::Integrator::get_name_in(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::Integrator::get_n_in() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::instruction_output(int k)
const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, int order, bool
tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::fwd_seed(int nfwd) const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")
casadi::FunctionInternal::codegen_sparsities(CodeGenerator &g) const  "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::OracleFunction::generate_dependencies(const
std::string &fname, const Dict &opts) const override "

[INTERNAL]  Export / Generate C code for the generated functions.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::disp(std::ostream &stream,
bool more) const override "

[INTERNAL]  Display object.

";

%feature("docstring")  casadi::OracleFunction::expand() "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::eval_dm(const std::vector<
DM > &arg) const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::Integrator::x() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::has_sprev() const override "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::get_max_in(int ind) const
"

[INTERNAL]  Get largest input value.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::Integrator::has_reverse(int nadj) const
override "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::Integrator::getDerivativeOptions(bool fwd)
const  "

[INTERNAL]  Set solver specific options to generated augmented integrators.

";

%feature("docstring") casadi::Collocation::Collocation(const std::string
&name, const Function &dae) "

[INTERNAL]  Constructor.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::OracleFunction::print_fstats(const
OracleMemory *m) const  "

[INTERNAL]  Print statistics.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::n_instructions() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")  casadi::OracleFunction::calc_function(OracleMemory
*m, const std::string &fcn, const double *const *arg=0) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::Integrator::get_forward(int nfwd, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const override "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::all_scalar() const  "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::matching_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

";

%feature("docstring")  casadi::FunctionInternal::has_derivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::Integrator::sp_jac_dae() "

[INTERNAL]  Create sparsity pattern of the extended Jacobian (forward
problem)

";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::mx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::Integrator::z() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FixedStepIntegrator::free_mem(void *mem)
const override "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::reverse(int nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FixedStepIntegrator::alloc_mem() const
override "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::Integrator::p() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::q() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::t() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::disp_more(std::ostream
&stream) const  "

[INTERNAL]  Print more.

";

%feature("docstring")  casadi::Integrator::get_sparsity_out(int i) override
"

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::FixedStepIntegrator::init_mem(void *mem)
const override "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::Integrator::setStopTime(IntegratorMemory
*mem, double tf) const  "

[INTERNAL]  Set stop time for the integration.

";

%feature("docstring")  casadi::FunctionInternal::matching_res(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(int nadj) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring")  casadi::Integrator::rx() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::rz() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Collocation::get_options() const override "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::Integrator::rq() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::rp() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(int iind, int
oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(int iind,
int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::Integrator::sp_jac_rdae() "

[INTERNAL]  Create sparsity pattern of the extended Jacobian (backward
problem)

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::OracleFunction::create_function(const
std::string &fname, const std::vector< std::string > &s_in, const
std::vector< std::string > &s_out, const Function::AuxOut
&aux=Function::AuxOut()) "

[INTERNAL]  Create an oracle function

";

%feature("docstring")  casadi::FunctionInternal::codegen_meta(CodeGenerator
&g) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::OracleFunction::get_stats(void *mem) const
override "

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::FunctionInternal::get_abstol() const  "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::OracleFunction::get_function() const override
"

[INTERNAL] ";

%feature("docstring")  casadi::OracleFunction::get_function(const
std::string &name) const override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::size1_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::check_res(const
std::vector< M > &res) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

";

%feature("docstring")  casadi::FunctionInternal::instruction_constant(int k)
const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::ImplicitFixedStepIntegrator::getExplicit()
const override "

[INTERNAL]  Get explicit dynamics.

";

%feature("docstring")  casadi::FunctionInternal::sx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::symbolic_output(const
std::vector< MX > &arg) const  "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::Collocation::init(const Dict &opts) override
"

[INTERNAL]  Initialize stage.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const double
**arg, double **res, int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const SXElem
**arg, SXElem **res, int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const bvec_t
**arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M > > &aseed) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(int nadj,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::OracleFunction::jit_dependencies(const
std::string &fname) override "

[INTERNAL]  JIT for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::instruction_input(int k)
const  "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::OracleFunction::finalize(const Dict &opts)
override "

[INTERNAL]  Finalize initialization.

";

%feature("docstring")  casadi::Collocation::resetB(IntegratorMemory *mem,
double t, const double *rx, const double *rz, const double *rp) const
override "

[INTERNAL]  Reset the backward problem and take time to tf.

";

%feature("docstring")  casadi::Integrator::get_n_out() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::info() const  "

[INTERNAL]  Obtain information about function

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian(const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::OracleFunction::monitored(const std::string
&name) const  "

[INTERNAL] ";

%feature("docstring") casadi::Collocation "

'collocation' plugin for Integrator

Fixed-step implicit Runge-Kutta integrator ODE/DAE integrator based on
collocation schemes

The method is still under development

>List of available options

+---------------------------+-----------------+----------------------------+
|            Id             |      Type       |        Description         |
+===========================+=================+============================+
| augmented_options         | OT_DICT         | Options to be passed down  |
|                           |                 | to the augmented           |
|                           |                 | integrator, if one is      |
|                           |                 | constructed.               |
+---------------------------+-----------------+----------------------------+
| collocation_scheme        | OT_STRING       | Collocation scheme:        |
|                           |                 | radau|legendre             |
+---------------------------+-----------------+----------------------------+
| expand                    | OT_BOOL         | Replace MX with SX         |
|                           |                 | expressions in problem     |
|                           |                 | formulation [false]        |
+---------------------------+-----------------+----------------------------+
| grid                      | OT_DOUBLEVECTOR | Time grid                  |
+---------------------------+-----------------+----------------------------+
| interpolation_order       | OT_INT          | Order of the interpolating |
|                           |                 | polynomials                |
+---------------------------+-----------------+----------------------------+
| number_of_finite_elements | OT_INT          | Number of finite elements  |
+---------------------------+-----------------+----------------------------+
| output_t0                 | OT_BOOL         | Output the state at the    |
|                           |                 | initial time               |
+---------------------------+-----------------+----------------------------+
| print_stats               | OT_BOOL         | Print out statistics after |
|                           |                 | integration                |
+---------------------------+-----------------+----------------------------+
| rootfinder                | OT_STRING       | An implicit function       |
|                           |                 | solver                     |
+---------------------------+-----------------+----------------------------+
| rootfinder_options        | OT_DICT         | Options to be passed to    |
|                           |                 | the NLP Solver             |
+---------------------------+-----------------+----------------------------+
| t0                        | OT_DOUBLE       | Beginning of the time      |
|                           |                 | horizon                    |
+---------------------------+-----------------+----------------------------+
| tf                        | OT_DOUBLE       | End of the time horizon    |
+---------------------------+-----------------+----------------------------+

Joel Andersson

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| augmented_option | OT_DICT         | Options to be    | casadi::Implicit |
| s                |                 | passed down to   | FixedStepIntegra |
|                  |                 | the augmented    | tor              |
|                  |                 | integrator, if   |                  |
|                  |                 | one is           |                  |
|                  |                 | constructed.     |                  |
+------------------+-----------------+------------------+------------------+
| collocation_sche | OT_STRING       | Collocation      | casadi::Collocat |
| me               |                 | scheme:          | ion              |
|                  |                 | radau|legendre   |                  |
+------------------+-----------------+------------------+------------------+
| expand           | OT_BOOL         | Replace MX with  | casadi::Implicit |
|                  |                 | SX expressions   | FixedStepIntegra |
|                  |                 | in problem       | tor              |
|                  |                 | formulation      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| grid             | OT_DOUBLEVECTOR | Time grid        | casadi::Implicit |
|                  |                 |                  | FixedStepIntegra |
|                  |                 |                  | tor              |
+------------------+-----------------+------------------+------------------+
| interpolation_or | OT_INT          | Order of the     | casadi::Collocat |
| der              |                 | interpolating    | ion              |
|                  |                 | polynomials      |                  |
+------------------+-----------------+------------------+------------------+
| number_of_finite | OT_INT          | Number of finite | casadi::Implicit |
| _elements        |                 | elements         | FixedStepIntegra |
|                  |                 |                  | tor              |
+------------------+-----------------+------------------+------------------+
| output_t0        | OT_BOOL         | Output the state | casadi::Implicit |
|                  |                 | at the initial   | FixedStepIntegra |
|                  |                 | time             | tor              |
+------------------+-----------------+------------------+------------------+
| print_stats      | OT_BOOL         | Print out        | casadi::Implicit |
|                  |                 | statistics after | FixedStepIntegra |
|                  |                 | integration      | tor              |
+------------------+-----------------+------------------+------------------+
| rootfinder       | OT_STRING       | An implicit      | casadi::Implicit |
|                  |                 | function solver  | FixedStepIntegra |
|                  |                 |                  | tor              |
+------------------+-----------------+------------------+------------------+
| rootfinder_optio | OT_DICT         | Options to be    | casadi::Implicit |
| ns               |                 | passed to the    | FixedStepIntegra |
|                  |                 | NLP Solver       | tor              |
+------------------+-----------------+------------------+------------------+
| t0               | OT_DOUBLE       | Beginning of the | casadi::Implicit |
|                  |                 | time horizon     | FixedStepIntegra |
|                  |                 |                  | tor              |
+------------------+-----------------+------------------+------------------+
| tf               | OT_DOUBLE       | End of the time  | casadi::Implicit |
|                  |                 | horizon          | FixedStepIntegra |
|                  |                 |                  | tor              |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: collocation.hpp ";

%feature("docstring")  casadi::FunctionInternal::size_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::Integrator::aug_fwd(int nfwd) const  "

[INTERNAL]  Generate a augmented DAE system with nfwd forward sensitivities.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInput(int k) const
"

[DEPRECATED] Renamed instruction_index

";

%feature("docstring")  casadi::FunctionInternal::instruction_MX(int k) const
"

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M > > &fseed) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::forward(int nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::export_code(const
std::string &lang, std::ostream &stream, const Dict &options) const  "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(int nfwd) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::FunctionInternal::size1_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::codegen(CodeGenerator &g,
const std::string &fname) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::Integrator::has_spfwd() const override "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::Integrator::get_reverse(int nadj, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const override "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")
casadi::FunctionInternal::codegen_declarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FixedStepIntegrator::retreat(IntegratorMemory
*mem, double t, double *rx, double *rz, double *rq) const override "

[INTERNAL]  Retreat solution in time.

";

%feature("docstring")  casadi::Integrator::get_name_out(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::Collocation::reset(IntegratorMemory *mem,
double t, const double *x, const double *z, const double *p) const override
"

[INTERNAL]  Reset the forward problem.

";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsityGen(int iind,
int oind, bool symmetric, int gr_i=1, int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";


// File: classcasadi_1_1Concat.xml


// File: classcasadi_1_1Conic.xml
%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M > > &fseed) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::FunctionInternal::eval_dm(const std::vector<
DM > &arg) const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::FunctionInternal::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_free() const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::symbolic_output(const
std::vector< MX > &arg) const  "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::Conic::get_n_in() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, int order, bool
tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::instruction_MX(int k) const
"

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring")  casadi::Conic::generateNativeCode(std::ostream &file)
const  "

[INTERNAL]  Generate native code in the interfaced language for debugging

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::n_instructions() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::get_reltol() const  "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring")  casadi::FunctionInternal::eval(const double **arg,
double **res, int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::get_reverse(int nadj, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::finalize(const Dict &opts)
override "

[INTERNAL]  Finalize the object creation.

";

%feature("docstring")  casadi::FunctionInternal::get_abstol() const  "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring")  casadi::FunctionInternal::get_partition(int iind, int
oind, Sparsity &D1, Sparsity &D2, bool compact, bool symmetric, bool
allow_forward, bool allow_reverse) const  "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(int iind, int
oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::disp_more(std::ostream
&stream) const  "

[INTERNAL]  Print more.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< int > &order_in, const std::vector< int >
&order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const double
**arg, double **res, int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const SXElem
**arg, SXElem **res, int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const bvec_t
**arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(int nadj) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::Conic::get_n_out() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian(const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::get_forward(int nfwd, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::get_min_in(int ind) const
"

[INTERNAL]  Get smallest input value.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::all_scalar() const  "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::Conic::get_default_in(int ind) const override
"

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::Conic::get_sparsity_out(int i) override "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::Conic::init(const Dict &opts) override "

[INTERNAL]  Initialize Initialize and make the object ready for setting
arguments and evaluation. This method is typically called after setting
options but before evaluating. If passed to another class (in the
constructor), this class should invoke this function when initialized.

";

%feature("docstring")  casadi::FunctionInternal::check_res(const
std::vector< M > &res) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOutput(int k)
const  "

[DEPRECATED] Renamed instruction_output

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::definition() const  "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring")  casadi::FunctionInternal::size2_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::Conic::integer_support() const  "

[INTERNAL]  Can discrete variables be treated.

";

%feature("docstring")  casadi::FunctionInternal::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::matching_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M > > &aseed) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::Conic::get_name_in(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::has_reverse(int nadj) const
"

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring") casadi::Conic::~Conic "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(int iind,
int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::PluginInterface< Conic  >::plugin_name()
const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::jit_dependencies(const
std::string &fname) "

[INTERNAL]  Jit dependencies.

";

%feature("docstring") casadi::Conic::Conic(const std::string &name, const
std::map< std::string, Sparsity > &st) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::check_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(int nfwd) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::has_derivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::sx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::fwd_seed(int nfwd) const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::reverse(int nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::disp(std::ostream &stream,
bool more) const override "

[INTERNAL]  Display object.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const std::vector<
Matrix< D > > &arg, std::vector< Matrix< D > > &res, bool always_inline,
bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::replace_res(const
std::vector< M > &res) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")  casadi::SharedObjectInternal::class_name() const  "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring")  casadi::FunctionInternal::instruction_input(int k)
const  "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::Conic::check_inputs(const double *lbx, const
double *ubx, const double *lba, const double *uba) const  "

[INTERNAL]  Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")
casadi::FunctionInternal::codegen_sparsities(CodeGenerator &g) const  "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring")  casadi::FunctionInternal::get_function() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::set_temp(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::codegen_body(CodeGenerator
&g) const  "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring")  casadi::FunctionInternal::sp_forward(const bvec_t
**arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::FunctionInternal::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::instruction_constant(int k)
const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::instruction_output(int k)
const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FunctionInternal::instruction_id(int k) const
"

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::FunctionInternal::codegen(CodeGenerator &g,
const std::string &fname) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::FunctionInternal::matching_res(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::info() const  "

[INTERNAL]  Obtain information about function

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(int nadj,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FunctionInternal::get_stats(void *mem) const
"

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::FunctionInternal::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::ProtoFunction::free_mem(void *mem) const  "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::Conic::get_name_out(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::sp_reverse(bvec_t **arg,
bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::FunctionInternal::has_forward(int nfwd) const
"

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::get_max_in(int ind) const
"

[INTERNAL]  Get largest input value.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsityGen(int iind,
int oind, bool symmetric, int gr_i=1, int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FunctionInternal::uses_output() const  "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")
casadi::FunctionInternal::codegen_declarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::size_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::Conic::get_options() const override "

[INTERNAL]  Options.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::Conic::print_fstats(const ConicMemory *m)
const  "

[INTERNAL]  Print statistics.

";

%feature("docstring")  casadi::Conic::get_sparsity_in(int i) override "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::codegen_meta(CodeGenerator
&g) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::ProtoFunction::alloc_mem() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::FunctionInternal::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::FunctionInternal::size_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Conic "

Internal class.

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| discrete         | OT_BOOLVECTOR   | Indicates which  | casadi::Conic    |
|                  |                 | of the variables |                  |
|                  |                 | are discrete,    |                  |
|                  |                 | i.e. integer-    |                  |
|                  |                 | valued           |                  |
+------------------+-----------------+------------------+------------------+
| enable_fd        | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation by   |                  |
|                  |                 | finite           |                  |
|                  |                 | differencing.    |                  |
|                  |                 | [default:        |                  |
|                  |                 | false]]          |                  |
+------------------+-----------------+------------------+------------------+
| enable_forward   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using forward    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_jacobian  | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobians of all |                  |
|                  |                 | differentiable   |                  |
|                  |                 | outputs with     |                  |
|                  |                 | respect to all   |                  |
|                  |                 | differentiable   |                  |
|                  |                 | inputs - if      |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_reverse   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | transposed       |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using reverse    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| fd_method        | OT_STRING       | Method for       | casadi::Function |
|                  |                 | finite           | Internal         |
|                  |                 | differencing     |                  |
|                  |                 | [default         |                  |
|                  |                 | 'central']       |                  |
+------------------+-----------------+------------------+------------------+
| fd_options       | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | finite           |                  |
|                  |                 | difference       |                  |
|                  |                 | instance         |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: conic_impl.hpp ";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::ProtoFunction::init_mem(void *mem) const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInput(int k) const
"

[DEPRECATED] Renamed instruction_index

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::replace_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring")  casadi::FunctionInternal::forward(int nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::export_code(const
std::string &lang, std::ostream &stream, const Dict &options) const  "

[INTERNAL]  Export function in a specific language.

";


// File: classcasadi_1_1Constant.xml


// File: classcasadi_1_1ConstantDM.xml


// File: classcasadi_1_1ConstantMX.xml


// File: classcasadi_1_1ConstantSX.xml


// File: classcasadi_1_1DaeBuilder.xml


/*  Variables and equations  */

/* Public data members

*/

/*  Symbolic modeling  */

/* Formulate an optimal control problem

*/

/*  Manipulation  */

/* Reformulate the dynamic optimization problem.

*/

/*  Functions  */

/* Add or load auxiliary functions

*/

/*  Import and export  */ %feature("docstring")
casadi::DaeBuilder::add_s(const std::string &name=std::string(), int n=1) "

Add a implicit state.

";

%feature("docstring")  casadi::DaeBuilder::add_fun(const std::string &name,
const std::vector< std::string > &arg, const std::vector< std::string >
&res, const Dict &opts=Dict()) "

Add a function from loaded expressions.

";

%feature("docstring")  casadi::DaeBuilder::add_fun(const Function &f) "

Add an already existing function.

";

%feature("docstring")  casadi::DaeBuilder::add_fun(const std::string &name,
const Importer &compiler, const Dict &opts=Dict()) "

Add an external function.

";

%feature("docstring")  casadi::DaeBuilder::sanity_check() const  "

Check if dimensions match.

";

%feature("docstring")  casadi::DaeBuilder::set_unit(const std::string &name,
const std::string &val) "

Set the unit for a component.

";

%feature("docstring") casadi::DaeBuilder::DaeBuilder() "

Default constructor.

";

%feature("docstring")  casadi::DaeBuilder::sort_dae() "

Sort the DAE and implicitly defined states.

";

%feature("docstring")  casadi::DaeBuilder::start(const std::string &name,
bool normalized=false) const  "

Get the (optionally normalized) value at time 0 by name.

";

%feature("docstring")  casadi::DaeBuilder::start(const MX &var, bool
normalized=false) const  "

Get the (optionally normalized) value(s) at time 0 by expression.

";

%feature("docstring")  casadi::DaeBuilder::add_aux(const std::string
&name=std::string(), int n=1) "

Add an auxiliary variable.

";

%feature("docstring")  casadi::DaeBuilder::min(const std::string &name, bool
normalized=false) const  "

Get the lower bound by name.

";

%feature("docstring")  casadi::DaeBuilder::min(const MX &var, bool
normalized=false) const  "

Get the lower bound(s) by expression.

";

%feature("docstring")  casadi::DaeBuilder::add_quad(const std::string &name,
const MX &new_quad) "

Add a quadrature equation.

";

%feature("docstring")  casadi::DaeBuilder::add_quad(const MX &new_quad,
const std::string &name=std::string()) "

[INTERNAL]  Add a quadrature equation. Old syntax: Swap arguments.

";

%feature("docstring")  casadi::DaeBuilder::nominal(const std::string &name)
const  "

Get the nominal value by name.

";

%feature("docstring")  casadi::DaeBuilder::nominal(const MX &var) const  "

Get the nominal value(s) by expression.

";

%feature("docstring")  casadi::DaeBuilder::max(const std::string &name, bool
normalized=false) const  "

Get the upper bound by name.

";

%feature("docstring")  casadi::DaeBuilder::max(const MX &var, bool
normalized=false) const  "

Get the upper bound(s) by expression.

";

%feature("docstring")  casadi::DaeBuilder::make_semi_explicit() "

Transform the implicit DAE to a semi-explicit DAE.

";

%feature("docstring")  casadi::DaeBuilder::set_derivative_start(const
std::string &name, double val, bool normalized=false) "

Set the (optionally normalized) derivative value at time 0 by name.

";

%feature("docstring")  casadi::DaeBuilder::set_derivative_start(const MX
&var, const std::vector< double > &val, bool normalized=false) "

Set the (optionally normalized) derivative value(s) at time 0 by expression.

";

%feature("docstring")  casadi::DaeBuilder::add_lc(const std::string &name,
const std::vector< std::string > &f_out) "

Add a named linear combination of output expressions.

";

%feature("docstring")  casadi::DaeBuilder::sort_d() "

Sort dependent parameters.

";

%feature("docstring")  casadi::DaeBuilder::sort_alg() "

Sort the algebraic equations and algebraic states.

";

%feature("docstring")  casadi::DaeBuilder::fun(const std::string &name)
const  "

Get function by name.

";

%feature("docstring")  casadi::DaeBuilder::add_dae(const std::string &name,
const MX &new_dae) "

Add a differential-algebraic equation.

";

%feature("docstring")  casadi::DaeBuilder::add_dae(const MX &new_dae, const
std::string &name=std::string()) "

[INTERNAL]  Add a differential-algebraic equation. Old syntax: Swap
arguments.

";

%feature("docstring")  casadi::DaeBuilder::make_explicit() "

Transform the implicit DAE or semi-explicit DAE into an explicit ODE.

";

%feature("docstring") casadi::DaeBuilder "

An initial-value problem in differential-algebraic equations.

Independent variables:
======================





::

  t:      time
  



Time-continuous variables:
==========================





::

  x:      states defined by ODE
  s:      implicitly defined states
  z:      algebraic variables
  u:      control signals
  q:      quadrature states
  y:      outputs
  



Time-constant variables:
========================





::

  p:      free parameters
  d:      dependent parameters
  



Dynamic constraints (imposed everywhere):
=========================================





::

  ODE                    \\\\dot{x} ==  ode(t, x, s, z, u, p, d)
  DAE or implicit ODE:         0 ==  dae(t, x, s, z, u, p, d, sdot)
  algebraic equations:         0 ==  alg(t, x, s, z, u, p, d)
  quadrature equations:  \\\\dot{q} == quad(t, x, s, z, u, p, d)
  dependent parameters:        d == ddef(t, x, s, z, u, p, d)
  output equations:            y == ydef(t, x, s, z, u, p, d)
  



Point constraints (imposed pointwise):
======================================





::

  Initial equations:           0 == init(t, x, s, z, u, p, d, sdot)
  



Joel Andersson

C++ includes: dae_builder.hpp ";

%feature("docstring")  casadi::DaeBuilder::add_q(const std::string
&name=std::string(), int n=1) "

Add a new quadrature state.

";

%feature("docstring")  casadi::DaeBuilder::add_p(const std::string
&name=std::string(), int n=1) "

Add a new parameter

";

%feature("docstring")  casadi::DaeBuilder::var(const std::string &name)
const  "

Get variable expression by name.

";

%feature("docstring")  casadi::DaeBuilder::add_u(const std::string
&name=std::string(), int n=1) "

Add a new control.

";

%feature("docstring")  casadi::DaeBuilder::has_fun(const std::string &name)
const  "

Does a particular function already exist?

";

%feature("docstring")  casadi::DaeBuilder::add_z(const std::string
&name=std::string(), int n=1) "

Add a new algebraic variable.

";

%feature("docstring")  casadi::DaeBuilder::add_y(const std::string &name,
const MX &new_ydef) "

Add a new output.

";

%feature("docstring")  casadi::DaeBuilder::add_y(const MX &new_ydef, const
std::string &name=std::string()) "

[INTERNAL]  Add a new output. Old syntax: Swap arguments.

";

%feature("docstring")  casadi::DaeBuilder::add_x(const std::string
&name=std::string(), int n=1) "

Add a new differential state.

";

%feature("docstring")  casadi::DaeBuilder::eliminate_quad() "

Eliminate quadrature states and turn them into ODE states.

";

%feature("docstring")  casadi::DaeBuilder::derivative_start(const
std::string &name, bool normalized=false) const  "

Get the (optionally normalized) derivative value at time 0 by name.

";

%feature("docstring")  casadi::DaeBuilder::derivative_start(const MX &var,
bool normalized=false) const  "

Get the (optionally normalized) derivative value(s) at time 0 by expression.

";

%feature("docstring")  casadi::DaeBuilder::set_nominal(const std::string
&name, double val) "

Set the nominal value by name.

";

%feature("docstring")  casadi::DaeBuilder::set_nominal(const MX &var, const
std::vector< double > &val) "

Set the nominal value(s) by expression.

";

%feature("docstring")  casadi::DaeBuilder::parse_fmi(const std::string
&filename) "

Import existing problem from FMI/XML

";

%feature("docstring")  casadi::DaeBuilder::add_variable(const std::string
&name, const Variable &var) "

Add a variable.

";

%feature("docstring")  casadi::DaeBuilder::add_variable(const std::string
&name, int n=1) "

Add a new variable: returns corresponding symbolic expression.

";

%feature("docstring")  casadi::DaeBuilder::add_variable(const std::string
&name, const Sparsity &sp) "

Add a new variable: returns corresponding symbolic expression.

";

%feature("docstring")  casadi::DaeBuilder::add_d(const std::string &name,
const MX &new_ddef) "

Add a new dependent parameter.

";

%feature("docstring")  casadi::DaeBuilder::add_d(const MX &new_ddef, const
std::string &name=std::string()) "

[INTERNAL]  Add a new dependent parameter. Old syntax: Swap arguments.

";

%feature("docstring")  casadi::DaeBuilder::split_dae() "

Identify and separate the algebraic variables and equations in the DAE.

";

%feature("docstring")  casadi::DaeBuilder::set_guess(const std::string
&name, double val, bool normalized=false) "

Set the initial guess by name.

";

%feature("docstring")  casadi::DaeBuilder::set_guess(const MX &var, const
std::vector< double > &val, bool normalized=false) "

Set the initial guess(es) by expression.

";

%feature("docstring")  casadi::DaeBuilder::add_alg(const std::string &name,
const MX &new_alg) "

Add an algebraic equation.

";

%feature("docstring")  casadi::DaeBuilder::add_alg(const MX &new_alg, const
std::string &name=std::string()) "

[INTERNAL]  Add an algebraic equation. Old syntax: Swap arguments.

";

%feature("docstring")  casadi::DaeBuilder::create(const std::string &fname,
const std::vector< std::string > &s_in, const std::vector< std::string >
&s_out) const  "

Construct a function object.

";

%feature("docstring")  casadi::DaeBuilder::guess(const std::string &name,
bool normalized=false) const  "

Get the initial guess by name.

";

%feature("docstring")  casadi::DaeBuilder::guess(const MX &var, bool
normalized=false) const  "

Get the initial guess(es) by expression.

";

%feature("docstring")  casadi::DaeBuilder::variable(const std::string &name)
"

Access a variable by name

";

%feature("docstring")  casadi::DaeBuilder::variable(const std::string &name)
const  "

Access a variable by name

";

%feature("docstring")  casadi::DaeBuilder::set_max(const std::string &name,
double val, bool normalized=false) "

Set the upper bound by name.

";

%feature("docstring")  casadi::DaeBuilder::set_max(const MX &var, const
std::vector< double > &val, bool normalized=false) "

Set the upper bound(s) by expression.

";

%feature("docstring")  casadi::DaeBuilder::eliminate_alg() "

Eliminate algebraic variables and equations transforming them into outputs.

";

%feature("docstring")  casadi::DaeBuilder::set_min(const std::string &name,
double val, bool normalized=false) "

Set the lower bound by name.

";

%feature("docstring")  casadi::DaeBuilder::set_min(const MX &var, const
std::vector< double > &val, bool normalized=false) "

Set the lower bound(s) by expression.

";

%feature("docstring")  casadi::DaeBuilder::set_start(const std::string
&name, double val, bool normalized=false) "

Set the (optionally normalized) value at time 0 by name.

";

%feature("docstring")  casadi::DaeBuilder::set_start(const MX &var, const
std::vector< double > &val, bool normalized=false) "

Set the (optionally normalized) value(s) at time 0 by expression.

";

%feature("docstring")  casadi::DaeBuilder::unit(const std::string &name)
const  "

Get the unit for a component.

";

%feature("docstring")  casadi::DaeBuilder::unit(const MX &var) const  "

Get the unit given a vector of symbolic variables (all units must be
identical)

";

%feature("docstring")  casadi::DaeBuilder::scale_variables() "

Scale the variables.

";

%feature("docstring")  casadi::DaeBuilder::split_d() "

Eliminate interdependencies amongst dependent parameters.

";

%feature("docstring")  casadi::DaeBuilder::eliminate_d() "

Eliminate dependent parameters.

";

%feature("docstring")  casadi::DaeBuilder::disp(std::ostream &stream, bool
more=false) const  "

Print representation.

";

%feature("docstring")  casadi::DaeBuilder::der(const std::string &name)
const  "

Get a derivative expression by name.

";

%feature("docstring")  casadi::DaeBuilder::der(const MX &var) const  "

Get a derivative expression by non-differentiated expression.

";

%feature("docstring")  casadi::DaeBuilder::type_name() const  "

Readable name of the class.

";

%feature("docstring")  casadi::DaeBuilder::scale_equations() "

Scale the implicit equations.

";

%feature("docstring")  casadi::DaeBuilder::get_str(bool more=false) const  "

Get string representation.

";

%feature("docstring")  casadi::DaeBuilder::add_ode(const std::string &name,
const MX &new_ode) "

Add an ordinary differential equation.

";

%feature("docstring")  casadi::DaeBuilder::add_ode(const MX &new_ode, const
std::string &name=std::string()) "

[INTERNAL]  Add an ordinary differential equation. Old syntax: Swap
arguments.

";


// File: classcasadi_1_1DenseMultiplication.xml


// File: classcasadi_1_1DenseTranspose.xml


// File: classcasadi_1_1Determinant.xml


// File: classcasadi_1_1Diagcat.xml


// File: classcasadi_1_1Diagsplit.xml


// File: classcasadi_1_1DllLibrary.xml
%feature("docstring")  casadi::ImporterInternal::construct(const Dict &opts)
"

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::DllLibrary::DllLibrary(const std::string
&bin_name) "

[INTERNAL] ";

%feature("docstring")  casadi::ImporterInternal::disp(std::ostream &stream,
bool more) const override "

[INTERNAL]  Print.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring") casadi::DllLibrary "

Dynamically linked library.

Joel Andersson

>List of available options

+---------+---------+---------------------------------+--------------------+
|   Id    |  Type   |           Description           |      Used in       |
+=========+=========+=================================+====================+
| verbose | OT_BOOL | Verbose evaluation  for         | casadi::DllLibrary |
|         |         | debugging                       |                    |
+---------+---------+---------------------------------+--------------------+

Diagrams
--------



C++ includes: importer_internal.hpp ";

%feature("docstring")  casadi::DllLibrary::get_function(const std::string
&symname) override "

[INTERNAL]  Get a function pointer for numerical evaluation.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::DllLibrary::can_have_meta() const override "

[INTERNAL]  Can meta information be read?

";

%feature("docstring")  casadi::ImporterInternal::read_meta(std::istream
&file, int &offset) "

[INTERNAL]  Get meta information.

";

%feature("docstring")  casadi::ImporterInternal::get_options() const  "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::ImporterInternal::plugin_name() const
override "

[INTERNAL]  Queery plugin name.

";

%feature("docstring")  casadi::ImporterInternal::to_text(const std::string
&cmd, int ind=-1) const  "

[INTERNAL]  Get entry as a text.

";

%feature("docstring")  casadi::ImporterInternal::get_meta(const std::string
&cmd, int ind=-1) const  "

[INTERNAL]  Get entry as a text.

";

%feature("docstring")  casadi::ImporterInternal::read_external(const
std::string &sym, bool inlined, std::istream &file, int &offset) "

[INTERNAL]  Get an external function declaration.

";

%feature("docstring")  casadi::DllLibrary::class_name() const override "

[INTERNAL]  Get type name.

";

%feature("docstring")  casadi::ImporterInternal::init(const Dict &opts) "

[INTERNAL]  Initialize.

";

%feature("docstring") casadi::DllLibrary::~DllLibrary "

[INTERNAL] ";

%feature("docstring")  casadi::ImporterInternal::body(const std::string
&symname) const  "

[INTERNAL]  Get the function body, if inlined.

";

%feature("docstring")  casadi::ImporterInternal::inlined(const std::string
&symname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::ImporterInternal::has_function(const
std::string &symname) const  "

[INTERNAL]  Get a function pointer for numerical evaluation.

";

%feature("docstring")  casadi::ImporterInternal::has_meta(const std::string
&cmd, int ind=-1) const  "

[INTERNAL]  Does an entry exist?

";


// File: classcasadi_1_1Dot.xml


// File: classcasadi_1_1Dple.xml
%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::eval(const double **arg,
double **res, int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(int nfwd) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::sx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::get_function() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")  casadi::FunctionInternal::replace_res(const
std::vector< M > &res) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::set_temp(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(int iind, int
oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::forward(int nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(int iind,
int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::jit_dependencies(const
std::string &fname) "

[INTERNAL]  Jit dependencies.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::symbolic_output(const
std::vector< MX > &arg) const  "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::Dple "

Internal class.

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| const_dim        | OT_BOOL         | Assume constant  | casadi::Dple     |
|                  |                 | dimension of P   |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| enable_fd        | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation by   |                  |
|                  |                 | finite           |                  |
|                  |                 | differencing.    |                  |
|                  |                 | [default:        |                  |
|                  |                 | false]]          |                  |
+------------------+-----------------+------------------+------------------+
| enable_forward   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using forward    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_jacobian  | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobians of all |                  |
|                  |                 | differentiable   |                  |
|                  |                 | outputs with     |                  |
|                  |                 | respect to all   |                  |
|                  |                 | differentiable   |                  |
|                  |                 | inputs - if      |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_reverse   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | transposed       |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using reverse    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| eps_unstable     | OT_DOUBLE       | A margin for     | casadi::Dple     |
|                  |                 | unstability      |                  |
|                  |                 | detection        |                  |
+------------------+-----------------+------------------+------------------+
| error_unstable   | OT_BOOL         | Throw an         | casadi::Dple     |
|                  |                 | exception when   |                  |
|                  |                 | it is detected   |                  |
|                  |                 | that             |                  |
|                  |                 | Product(A_i,     |                  |
|                  |                 | i=N..1)has       |                  |
|                  |                 | eigenvalues      |                  |
|                  |                 | greater than     |                  |
|                  |                 | 1-eps_unstable   |                  |
+------------------+-----------------+------------------+------------------+
| fd_method        | OT_STRING       | Method for       | casadi::Function |
|                  |                 | finite           | Internal         |
|                  |                 | differencing     |                  |
|                  |                 | [default         |                  |
|                  |                 | 'central']       |                  |
+------------------+-----------------+------------------+------------------+
| fd_options       | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | finite           |                  |
|                  |                 | difference       |                  |
|                  |                 | instance         |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| pos_def          | OT_BOOL         | Assume P         | casadi::Dple     |
|                  |                 | positive         |                  |
|                  |                 | definite         |                  |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: dple_impl.hpp ";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M > > &fseed) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::get_stats(void *mem) const
"

[INTERNAL]  Get all statistics.

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::get_reltol() const  "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring")
casadi::FunctionInternal::codegen_declarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::instruction_id(int k) const
"

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(int nadj,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, int order, bool
tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::eval_dm(const std::vector<
DM > &arg) const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::Dple::get_reverse(int nadj, const std::string
&name, const std::vector< std::string > &inames, const std::vector<
std::string > &onames, const Dict &opts) const override "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::FunctionInternal::instruction_MX(int k) const
"

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::get_max_in(int ind) const
"

[INTERNAL]  Get largest input value.

";

%feature("docstring")  casadi::ProtoFunction::alloc_mem() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::Dple::get_options() const override "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::FunctionInternal::definition() const  "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::Dple::get_forward(int nfwd, const std::string
&name, const std::vector< std::string > &inames, const std::vector<
std::string > &onames, const Dict &opts) const override "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::PluginInterface< Dple  >::plugin_name() const
"

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(int nadj) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring") casadi::Dple::Dple(const std::string &name, const
SpDict &st) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::size2_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const double
**arg, double **res, int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const SXElem
**arg, SXElem **res, int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const bvec_t
**arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian(const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::FunctionInternal::size_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::check_res(const
std::vector< M > &res) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

";

%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::info() const  "

[INTERNAL]  Obtain information about function

";

%feature("docstring")  casadi::Dple::get_sparsity_in(int i) override "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::FunctionInternal::get_default_in(int ind)
const  "

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::Dple::get_name_in(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::Dple::has_reverse(int nadj) const override "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::ProtoFunction::free_mem(void *mem) const  "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::get_free() const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::FunctionInternal::sp_forward(const bvec_t
**arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::FunctionInternal::get_min_in(int ind) const
"

[INTERNAL]  Get smallest input value.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::size_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< int > &order_in, const std::vector< int >
&order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::FunctionInternal::codegen_meta(CodeGenerator
&g) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FunctionInternal::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::instruction_output(int k)
const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::Dple::has_forward(int nfwd) const override "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::has_derivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::sx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::n_instructions() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInput(int k) const
"

[DEPRECATED] Renamed instruction_index

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::codegen_body(CodeGenerator
&g) const  "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring") casadi::Dple::~Dple "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::get_abstol() const  "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring")  casadi::FunctionInternal::check_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::uses_output() const  "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring")  casadi::Dple::get_sparsity_out(int i) override "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::ProtoFunction::init_mem(void *mem) const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M > > &aseed) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FunctionInternal::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::instruction_input(int k)
const  "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::reverse(int nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::FunctionInternal::instruction_constant(int k)
const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::matching_res(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

";

%feature("docstring")  casadi::Dple::get_name_out(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::codegen(CodeGenerator &g,
const std::string &fname) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOutput(int k)
const  "

[DEPRECATED] Renamed instruction_output

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::finalize(const Dict &opts)
override "

[INTERNAL]  Finalize the object creation.

";

%feature("docstring")  casadi::FunctionInternal::get_partition(int iind, int
oind, Sparsity &D1, Sparsity &D2, bool compact, bool symmetric, bool
allow_forward, bool allow_reverse) const  "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::Dple::init(const Dict &opts) override "

[INTERNAL]  Initialize Initialize and make the object ready for setting
arguments and evaluation. This method is typically called after setting
options but before evaluating. If passed to another class (in the
constructor), this class should invoke this function when initialized.

";

%feature("docstring")  casadi::Dple::get_n_out() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::disp(std::ostream &stream,
bool more) const override "

[INTERNAL]  Display object.

";

%feature("docstring")
casadi::FunctionInternal::codegen_sparsities(CodeGenerator &g) const  "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring")  casadi::FunctionInternal::replace_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::FunctionInternal::export_code(const
std::string &lang, std::ostream &stream, const Dict &options) const  "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring")  casadi::FunctionInternal::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::fwd_seed(int nfwd) const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::SharedObjectInternal::class_name() const  "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring")  casadi::FunctionInternal::matching_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

";

%feature("docstring")  casadi::FunctionInternal::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsityGen(int iind,
int oind, bool symmetric, int gr_i=1, int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FunctionInternal::disp_more(std::ostream
&stream) const  "

[INTERNAL]  Print more.

";

%feature("docstring")  casadi::FunctionInternal::jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::Dple::get_n_in() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::sp_reverse(bvec_t **arg,
bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::all_scalar() const  "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const std::vector<
Matrix< D > > &arg, std::vector< Matrix< D > > &res, bool always_inline,
bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";


// File: classcasadi_1_1Einstein.xml


// File: classcasadi_1_1Expm.xml
%feature("docstring")  casadi::FunctionInternal::get_min_in(int ind) const
"

[INTERNAL]  Get smallest input value.

";

%feature("docstring")  casadi::ProtoFunction::free_mem(void *mem) const  "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::FunctionInternal::symbolic_output(const
std::vector< MX > &arg) const  "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::finalize(const Dict &opts)
override "

[INTERNAL]  Finalize the object creation.

";

%feature("docstring")  casadi::FunctionInternal::get_reltol() const  "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring")  casadi::FunctionInternal::replace_res(const
std::vector< M > &res) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::info() const  "

[INTERNAL]  Obtain information about function

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOutput(int k)
const  "

[DEPRECATED] Renamed instruction_output

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::FunctionInternal::codegen_body(CodeGenerator
&g) const  "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring")  casadi::FunctionInternal::disp_more(std::ostream
&stream) const  "

[INTERNAL]  Print more.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(int nfwd) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::get_name_in(int i) "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::uses_output() const  "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::jit_dependencies(const
std::string &fname) "

[INTERNAL]  Jit dependencies.

";

%feature("docstring") casadi::Expm::Expm(const std::string &name, const
Sparsity &A) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")
casadi::FunctionInternal::codegen_sparsities(CodeGenerator &g) const  "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring")  casadi::Expm::get_n_in() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::get_function() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::init_mem(void *mem) const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::Expm::get_options() const override "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::FunctionInternal::replace_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const double
**arg, double **res, int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const SXElem
**arg, SXElem **res, int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const bvec_t
**arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::forward(int nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::get_abstol() const  "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::matching_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::set_temp(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::eval_dm(const std::vector<
DM > &arg) const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::FunctionInternal::export_code(const
std::string &lang, std::ostream &stream, const Dict &options) const  "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(int nadj) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::sx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::Expm::get_sparsity_in(int i) override "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::Expm::init(const Dict &opts) override "

[INTERNAL]  Initialize Initialize and make the object ready for setting
arguments and evaluation. This method is typically called after setting
options but before evaluating. If passed to another class (in the
constructor), this class should invoke this function when initialized.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::Expm::get_n_out() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::instruction_output(int k)
const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::PluginInterface< Expm  >::plugin_name() const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_partition(int iind, int
oind, Sparsity &D1, Sparsity &D2, bool compact, bool symmetric, bool
allow_forward, bool allow_reverse) const  "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::get_stats(void *mem) const
"

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::FunctionInternal::codegen_meta(CodeGenerator
&g) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::ProtoFunction::alloc_mem() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, int order, bool
tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInput(int k) const
"

[DEPRECATED] Renamed instruction_index

";

%feature("docstring")  casadi::FunctionInternal::fwd_seed(int nfwd) const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::Expm::get_sparsity_out(int i) override "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::instruction_id(int k) const
"

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M > > &aseed) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::size_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::matching_res(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M > > &fseed) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::FunctionInternal::instruction_constant(int k)
const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::codegen(CodeGenerator &g,
const std::string &fname) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::FunctionInternal::reverse(int nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::check_res(const
std::vector< M > &res) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::all_scalar() const  "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsityGen(int iind,
int oind, bool symmetric, int gr_i=1, int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::Expm::get_forward(int nfwd, const std::string
&name, const std::vector< std::string > &inames, const std::vector<
std::string > &onames, const Dict &opts) const override "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")
casadi::FunctionInternal::codegen_declarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::get_default_in(int ind)
const  "

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::instruction_input(int k)
const  "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::size_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::instruction_MX(int k) const
"

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring")  casadi::FunctionInternal::disp(std::ostream &stream,
bool more) const override "

[INTERNAL]  Display object.

";

%feature("docstring")  casadi::FunctionInternal::n_instructions() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring") casadi::Expm "

Internal class.

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| const_A          | OT_BOOL         | Assume A is      | casadi::Expm     |
|                  |                 | constant.        |                  |
|                  |                 | Default: false.  |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| enable_fd        | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation by   |                  |
|                  |                 | finite           |                  |
|                  |                 | differencing.    |                  |
|                  |                 | [default:        |                  |
|                  |                 | false]]          |                  |
+------------------+-----------------+------------------+------------------+
| enable_forward   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using forward    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_jacobian  | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobians of all |                  |
|                  |                 | differentiable   |                  |
|                  |                 | outputs with     |                  |
|                  |                 | respect to all   |                  |
|                  |                 | differentiable   |                  |
|                  |                 | inputs - if      |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_reverse   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | transposed       |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using reverse    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| fd_method        | OT_STRING       | Method for       | casadi::Function |
|                  |                 | finite           | Internal         |
|                  |                 | differencing     |                  |
|                  |                 | [default         |                  |
|                  |                 | 'central']       |                  |
+------------------+-----------------+------------------+------------------+
| fd_options       | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | finite           |                  |
|                  |                 | difference       |                  |
|                  |                 | instance         |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: expm_impl.hpp ";

%feature("docstring")  casadi::FunctionInternal::size1_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const std::vector<
Matrix< D > > &arg, std::vector< Matrix< D > > &res, bool always_inline,
bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian(const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::FunctionInternal::has_derivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(int nadj,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::check_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::Expm::has_reverse(int nadj) const override "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::Expm::getJacSparsity(int iind, int oind, bool
symmetric) const override "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::get_name_out(int i) "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::Expm::get_reverse(int nadj, const std::string
&name, const std::vector< std::string > &inames, const std::vector<
std::string > &onames, const Dict &opts) const override "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::FunctionInternal::get_free() const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::FunctionInternal::definition() const  "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring")  casadi::Expm::has_forward(int nfwd) const override "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::FunctionInternal::sp_forward(const bvec_t
**arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::eval(const double **arg,
double **res, int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::sp_reverse(bvec_t **arg,
bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring") casadi::Expm::~Expm "

[INTERNAL] ";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::get_max_in(int ind) const
"

[INTERNAL]  Get largest input value.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< int > &order_in, const std::vector< int >
&order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::SharedObjectInternal::class_name() const  "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(int iind, int
oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";


// File: classcasadi_1_1External.xml
%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::check_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

";

%feature("docstring")  casadi::FunctionInternal::get_default_in(int ind)
const  "

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::FunctionInternal::has_derivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::ProtoFunction::init_mem(void *mem) const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::External::get_name_in(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::External::has_forward(int nfwd) const
override "

[INTERNAL]  Forward mode derivatives.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::FunctionInternal::instruction_output(int k)
const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::External::class_name() const override "

[INTERNAL]  Get type name.

";

%feature("docstring")  casadi::FunctionInternal::disp_more(std::ostream
&stream) const  "

[INTERNAL]  Print more.

";

%feature("docstring")  casadi::FunctionInternal::instruction_input(int k)
const  "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::sx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::FunctionInternal::info() const  "

[INTERNAL]  Obtain information about function

";

%feature("docstring")  casadi::FunctionInternal::size_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::replace_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring")  casadi::FunctionInternal::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring")  casadi::FunctionInternal::get_free() const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::FunctionInternal::export_code(const
std::string &lang, std::ostream &stream, const Dict &options) const  "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::set_temp(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInput(int k) const
"

[DEPRECATED] Renamed instruction_index

";

%feature("docstring")  casadi::FunctionInternal::disp(std::ostream &stream,
bool more) const override "

[INTERNAL]  Display object.

";

%feature("docstring")  casadi::FunctionInternal::matching_res(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::replace_res(const
std::vector< M > &res) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::all_scalar() const  "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")  casadi::FunctionInternal::get_sparsity_out(int i) "

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::External::get_reverse(int nadj, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const override "

[INTERNAL]  Reverse mode derivatives.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M > > &fseed) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")  casadi::External::factory(const std::string &name,
const std::vector< std::string > &s_in, const std::vector< std::string >
&s_out, const Function::AuxOut &aux, const Dict &opts) const override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::ProtoFunction::free_mem(void *mem) const  "

[INTERNAL]  Free memory block.

";

%feature("docstring") casadi::External "

[INTERNAL] C++ includes: external_impl.hpp ";

%feature("docstring")
casadi::FunctionInternal::codegen_sparsities(CodeGenerator &g) const  "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::FunctionInternal::get_reltol() const  "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::External::External(const std::string &name,
const Importer &li) "

[INTERNAL]  Constructor.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::get_function() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::fwd_seed(int nfwd) const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::reverse(int nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::External::codegen_declarations(CodeGenerator
&g) const override "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::FunctionInternal::size1_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::FunctionInternal::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_stats(void *mem) const
"

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::FunctionInternal::sp_forward(const bvec_t
**arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::External::init(const Dict &opts) override "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::FunctionInternal::symbolic_output(const
std::vector< MX > &arg) const  "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::forward(int nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::External::get_n_out() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::External::~External "

[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< int > &order_in, const std::vector< int >
&order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(int iind, int
oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::instruction_constant(int k)
const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::instruction_id(int k) const
"

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const std::vector<
Matrix< D > > &arg, std::vector< Matrix< D > > &res, bool always_inline,
bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::External::get_name_out(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(int iind,
int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::instruction_MX(int k) const
"

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::get_options() const
override "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::ProtoFunction::alloc_mem() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::FunctionInternal::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::definition() const  "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring")  casadi::FunctionInternal::uses_output() const  "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsityGen(int iind,
int oind, bool symmetric, int gr_i=1, int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FunctionInternal::size_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::External::get_n_in() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::External::has_reverse(int nadj) const
override "

[INTERNAL]  Reverse mode derivatives.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::External::has_jacobian() const override "

[INTERNAL]  Full Jacobian.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const double
**arg, double **res, int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const SXElem
**arg, SXElem **res, int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const bvec_t
**arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::External::codegen_body(CodeGenerator &g)
const override "

[INTERNAL]  Generate code for the body of the C function.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M > > &aseed) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::get_max_in(int ind) const
"

[INTERNAL]  Get largest input value.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::FunctionInternal::get_min_in(int ind) const
"

[INTERNAL]  Get smallest input value.

";

%feature("docstring")  casadi::FunctionInternal::jit_dependencies(const
std::string &fname) "

[INTERNAL]  Jit dependencies.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::eval(const double **arg,
double **res, int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::External::get_jacobian(const std::string
&name, const std::vector< std::string > &inames, const std::vector<
std::string > &onames, const Dict &opts) const override "

[INTERNAL]  Full Jacobian.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::get_partition(int iind, int
oind, Sparsity &D1, Sparsity &D2, bool compact, bool symmetric, bool
allow_forward, bool allow_reverse) const  "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::finalize(const Dict &opts)
override "

[INTERNAL]  Finalize the object creation.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(int nadj) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::External::get_forward(int nfwd, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const override "

[INTERNAL]  Forward mode derivatives.

";

%feature("docstring")  casadi::FunctionInternal::sp_reverse(bvec_t **arg,
bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FunctionInternal::check_res(const
std::vector< M > &res) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

";

%feature("docstring")  casadi::FunctionInternal::eval_dm(const std::vector<
DM > &arg) const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::FunctionInternal::matching_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::FunctionInternal::codegen_meta(CodeGenerator
&g) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, int order, bool
tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::get_abstol() const  "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring")  casadi::FunctionInternal::codegen(CodeGenerator &g,
const std::string &fname) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::FunctionInternal::n_instructions() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOutput(int k)
const  "

[DEPRECATED] Renamed instruction_output

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::get_sparsity_in(int i) "

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(int nfwd) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(int nadj,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FunctionInternal::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the dependency function.

";


// File: classcasadi_1_1Factory.xml
%feature("docstring")  casadi::Factory< MatType >::has_in(const std::string
&s) const  "

[INTERNAL] ";

%feature("docstring")  casadi::Factory< MatType >::add_output(const
std::string &s, const MatType &e) "

[INTERNAL] ";

%feature("docstring")  casadi::Factory< MatType >::calculate() "

[INTERNAL] ";

%feature("docstring")  casadi::Factory< MatType >::get_output(const
std::string &s) "

[INTERNAL] ";

%feature("docstring") casadi::Factory "

[INTERNAL] C++ includes: factory.hpp ";

%feature("docstring")  casadi::Factory< MatType >::request_output(const
std::string &s) "

[INTERNAL] ";

%feature("docstring")  casadi::Factory< MatType >::get_input(const
std::string &s) "

[INTERNAL] ";

%feature("docstring")  casadi::Factory< MatType >::add_input(const
std::string &s, const MatType &e) "

[INTERNAL] ";

%feature("docstring")  casadi::Factory< MatType >::has_out(const std::string
&s) const  "

[INTERNAL] ";

%feature("docstring")  casadi::Factory< MatType >::request_input(const
std::string &s) "

[INTERNAL] ";

%feature("docstring")  casadi::Factory< MatType >::name_out() const  "

[INTERNAL] ";

%feature("docstring") casadi::Factory< MatType >::Factory(const
Function::AuxOut &aux) "

[INTERNAL] ";

%feature("docstring")  casadi::Factory< MatType >::name_in() const  "

[INTERNAL] ";


// File: classcasadi_1_1Find.xml


// File: classcasadi_1_1FiniteDiff.xml
%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::FunctionInternal::get_min_in(int ind) const
"

[INTERNAL]  Get smallest input value.

";

%feature("docstring")  casadi::FunctionInternal::get_max_in(int ind) const
"

[INTERNAL]  Get largest input value.

";

%feature("docstring")  casadi::FunctionInternal::sp_forward(const bvec_t
**arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::FiniteDiff::get_default_in(int ind) const
override "

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::FunctionInternal::instruction_input(int k)
const  "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FiniteDiff::eval(const double **arg, double
**res, int *iw, double *w, void *mem) const override "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::FunctionInternal::get_abstol() const  "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::n_instructions() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(int nadj) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::definition() const  "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring")  casadi::ProtoFunction::init_mem(void *mem) const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FiniteDiff::init(const Dict &opts) override "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::matching_res(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring") casadi::FiniteDiff::FiniteDiff(const std::string
&name, int n) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring")  casadi::FunctionInternal::sp_reverse(bvec_t **arg,
bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const double
**arg, double **res, int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const SXElem
**arg, SXElem **res, int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const bvec_t
**arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::FunctionInternal::forward(int nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")
casadi::FiniteDiff::codegen_declarations(CodeGenerator &g) const override "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::eval_dm(const std::vector<
DM > &arg) const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::jit_dependencies(const
std::string &fname) "

[INTERNAL]  Jit dependencies.

";

%feature("docstring")  casadi::ProtoFunction::alloc_mem() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::instruction_MX(int k) const
"

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::all_scalar() const  "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")  casadi::FunctionInternal::finalize(const Dict &opts)
override "

[INTERNAL]  Finalize the object creation.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::SharedObjectInternal::class_name() const  "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsityGen(int iind,
int oind, bool symmetric, int gr_i=1, int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FiniteDiff::get_sparsity_in(int i) override "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::sx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::get_partition(int iind, int
oind, Sparsity &D1, Sparsity &D2, bool compact, bool symmetric, bool
allow_forward, bool allow_reverse) const  "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::disp(std::ostream &stream,
bool more) const override "

[INTERNAL]  Display object.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::matching_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FiniteDiff::get_n_in() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M > > &aseed) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(int iind,
int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::check_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::symbolic_output(const
std::vector< MX > &arg) const  "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring")  casadi::FiniteDiff::uses_output() const override "

[INTERNAL]  Is the scheme using the (nondifferentiated) output?

";

%feature("docstring")  casadi::FiniteDiff::get_options() const override "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M > > &fseed) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(int nfwd) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::get_free() const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const std::vector<
Matrix< D > > &arg, std::vector< Matrix< D > > &res, bool always_inline,
bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::replace_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian(const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::get_reverse(int nadj, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::instruction_constant(int k)
const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FiniteDiff::codegen_body(CodeGenerator &g)
const override "

[INTERNAL]  Generate code for the body of the C function.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::get_reltol() const  "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring")  casadi::FunctionInternal::size_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::get_stats(void *mem) const
"

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FiniteDiff::has_codegen() const override "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::ProtoFunction::free_mem(void *mem) const  "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::codegen(CodeGenerator &g,
const std::string &fname) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::FunctionInternal::replace_res(const
std::vector< M > &res) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FiniteDiff::get_name_out(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, int order, bool
tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::size_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::has_forward(int nfwd) const
"

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::FunctionInternal::has_derivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::codegen_meta(CodeGenerator
&g) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInput(int k) const
"

[DEPRECATED] Renamed instruction_index

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")
casadi::FunctionInternal::codegen_sparsities(CodeGenerator &g) const  "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring")  casadi::FunctionInternal::export_code(const
std::string &lang, std::ostream &stream, const Dict &options) const  "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOutput(int k)
const  "

[DEPRECATED] Renamed instruction_output

";

%feature("docstring")  casadi::FunctionInternal::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring") casadi::FiniteDiff "

[INTERNAL]  Calculate derivative using finite differences Joel Andersson

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| abstol           | OT_DOUBLE       | Accuracy of      | casadi::FiniteDi |
|                  |                 | function outputs | ff               |
|                  |                 | [default: query  |                  |
|                  |                 | object]          |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| enable_fd        | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation by   |                  |
|                  |                 | finite           |                  |
|                  |                 | differencing.    |                  |
|                  |                 | [default:        |                  |
|                  |                 | false]]          |                  |
+------------------+-----------------+------------------+------------------+
| enable_forward   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using forward    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_jacobian  | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobians of all |                  |
|                  |                 | differentiable   |                  |
|                  |                 | outputs with     |                  |
|                  |                 | respect to all   |                  |
|                  |                 | differentiable   |                  |
|                  |                 | inputs - if      |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_reverse   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | transposed       |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using reverse    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| fd_method        | OT_STRING       | Method for       | casadi::Function |
|                  |                 | finite           | Internal         |
|                  |                 | differencing     |                  |
|                  |                 | [default         |                  |
|                  |                 | 'central']       |                  |
+------------------+-----------------+------------------+------------------+
| fd_options       | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | finite           |                  |
|                  |                 | difference       |                  |
|                  |                 | instance         |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| h_iter           | OT_INT          | Number of        | casadi::FiniteDi |
|                  |                 | iterations to    | ff               |
|                  |                 | improve on the   |                  |
|                  |                 | step-size        |                  |
|                  |                 | [default: 1 if   |                  |
|                  |                 | error estimate   |                  |
|                  |                 | available,       |                  |
|                  |                 | otherwise 0]     |                  |
+------------------+-----------------+------------------+------------------+
| h_max            | OT_DOUBLE       | Maximum step     | casadi::FiniteDi |
|                  |                 | size [default 0] | ff               |
+------------------+-----------------+------------------+------------------+
| h_min            | OT_DOUBLE       | Minimum step     | casadi::FiniteDi |
|                  |                 | size [default    | ff               |
|                  |                 | inf]             |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| reltol           | OT_DOUBLE       | Accuracy of      | casadi::FiniteDi |
|                  |                 | function inputs  | ff               |
|                  |                 | [default: query  |                  |
|                  |                 | object]          |                  |
+------------------+-----------------+------------------+------------------+
| second_order_ste | OT_DOUBLE       | Second order     | casadi::FiniteDi |
| psize            |                 | perturbation     | ff               |
|                  |                 | size [default:   |                  |
|                  |                 | 1e-3]            |                  |
+------------------+-----------------+------------------+------------------+
| smoothing        | OT_DOUBLE       | Smoothing        | casadi::FiniteDi |
|                  |                 | regularization   | ff               |
|                  |                 | [default:        |                  |
|                  |                 | machine          |                  |
|                  |                 | precision]       |                  |
+------------------+-----------------+------------------+------------------+
| u_aim            | OT_DOUBLE       | Target ratio of  | casadi::FiniteDi |
|                  |                 | roundoff error   | ff               |
|                  |                 | to truncation    |                  |
|                  |                 | error [default:  |                  |
|                  |                 | 100.]            |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: finite_differences.hpp ";

%feature("docstring")  casadi::FunctionInternal::reverse(int nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< int > &order_in, const std::vector< int >
&order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::FunctionInternal::instruction_output(int k)
const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::disp_more(std::ostream
&stream) const  "

[INTERNAL]  Print more.

";

%feature("docstring")  casadi::FunctionInternal::jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::FiniteDiff::~FiniteDiff "

[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(int nadj,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FunctionInternal::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FiniteDiff::get_sparsity_out(int i) override
"

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::instruction_id(int k) const
"

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::fwd_seed(int nfwd) const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::has_reverse(int nadj) const
"

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::set_temp(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::check_res(const
std::vector< M > &res) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

";

%feature("docstring")  casadi::FiniteDiff::get_name_in(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FiniteDiff::get_n_out() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::get_function() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(int iind, int
oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::FunctionInternal::get_forward(int nfwd, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::info() const  "

[INTERNAL]  Obtain information about function

";


// File: classcasadi_1_1FixedStepIntegrator.xml
%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::OracleFunction::calc_function(OracleMemory
*m, const std::string &fcn, const double *const *arg=0) const  "

[INTERNAL] ";

%feature("docstring")  casadi::OracleFunction::jit_dependencies(const
std::string &fname) override "

[INTERNAL]  JIT for dependencies.

";

%feature("docstring")  casadi::Integrator::aug_fwd(int nfwd) const  "

[INTERNAL]  Generate a augmented DAE system with nfwd forward sensitivities.

";

%feature("docstring")  casadi::FunctionInternal::codegen(CodeGenerator &g,
const std::string &fname) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::Integrator::z() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::x() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::all_scalar() const  "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")  casadi::Integrator::sp_reverse(bvec_t **arg, bvec_t
**res, int *iw, bvec_t *w, void *mem) const override "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::Integrator::p() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::q() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FixedStepIntegrator::init_mem(void *mem)
const override "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::Integrator::t() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_max_in(int ind) const
"

[INTERNAL]  Get largest input value.

";

%feature("docstring")  casadi::Integrator::get_name_in(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::matching_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::instruction_constant(int k)
const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const double
**arg, double **res, int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const SXElem
**arg, SXElem **res, int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const bvec_t
**arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::get_partition(int iind, int
oind, Sparsity &D1, Sparsity &D2, bool compact, bool symmetric, bool
allow_forward, bool allow_reverse) const  "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::OracleFunction::expand() "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::n_instructions() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(int iind,
int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::uses_output() const  "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring")  casadi::FunctionInternal::get_free() const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::FunctionInternal::disp_more(std::ostream
&stream) const  "

[INTERNAL]  Print more.

";

%feature("docstring")  casadi::Integrator::get_reverse(int nadj, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const override "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::FunctionInternal::info() const  "

[INTERNAL]  Obtain information about function

";

%feature("docstring")  casadi::FunctionInternal::export_code(const
std::string &lang, std::ostream &stream, const Dict &options) const  "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring")  casadi::FixedStepIntegrator::get_options() const
override "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::FunctionInternal::matching_res(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::Integrator::get_sparsity_out(int i) override
"

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::replace_res(const
std::vector< M > &res) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::Integrator::setStopTime(IntegratorMemory
*mem, double tf) const  "

[INTERNAL]  Set stop time for the integration.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(int nfwd) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOutput(int k)
const  "

[DEPRECATED] Renamed instruction_output

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::FunctionInternal::check_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::eval_dm(const std::vector<
DM > &arg) const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::FixedStepIntegrator::resetB(IntegratorMemory
*mem, double t, const double *rx, const double *rz, const double *rp) const
override "

[INTERNAL]  Reset the backward problem and take time to tf.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M > > &aseed) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn, const std::string &fname, bool jit=false) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< int > &order_in, const std::vector< int >
&order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::instruction_MX(int k) const
"

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring") casadi::FixedStepIntegrator::~FixedStepIntegrator "

[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInput(int k) const
"

[DEPRECATED] Renamed instruction_index

";

%feature("docstring")  casadi::FunctionInternal::instruction_input(int k)
const  "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FixedStepIntegrator::advance(IntegratorMemory
*mem, double t, double *x, double *z, double *q) const override "

[INTERNAL]  Advance solution in time.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::reverse(int nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::size_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::Integrator::get_name_out(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::OracleFunction::create_function(const
std::string &fname, const std::vector< std::string > &s_in, const
std::vector< std::string > &s_out, const Function::AuxOut
&aux=Function::AuxOut()) "

[INTERNAL]  Create an oracle function

";

%feature("docstring")  casadi::FunctionInternal::numel_out(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::OracleFunction::monitored(const std::string
&name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::FixedStepIntegrator::retreat(IntegratorMemory
*mem, double t, double *rx, double *rz, double *rq) const override "

[INTERNAL]  Retreat solution in time.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::sx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::OracleFunction::finalize(const Dict &opts)
override "

[INTERNAL]  Finalize initialization.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::SharedObjectInternal::class_name() const  "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FixedStepIntegrator::setupFG() "

[INTERNAL]  Setup F and G.

";

%feature("docstring")  casadi::FunctionInternal::forward(int nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::OracleFunction::generate_dependencies(const
std::string &fname, const Dict &opts) const override "

[INTERNAL]  Export / Generate C code for the generated functions.

";

%feature("docstring")  casadi::FunctionInternal::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::FixedStepIntegrator::init(const Dict &opts)
override "

[INTERNAL]  Initialize stage.

";

%feature("docstring")  casadi::Integrator::sp_jac_rdae() "

[INTERNAL]  Create sparsity pattern of the extended Jacobian (backward
problem)

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring") casadi::FixedStepIntegrator::FixedStepIntegrator(const
std::string &name, const Function &dae) "

[INTERNAL]  Constructor.

";

%feature("docstring")  casadi::OracleFunction::get_stats(void *mem) const
override "

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::Integrator::get_sparsity_in(int i) override "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, int order, bool
tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring") casadi::FixedStepIntegrator "



>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| augmented_option | OT_DICT         | Options to be    | casadi::FixedSte |
| s                |                 | passed down to   | pIntegrator      |
|                  |                 | the augmented    |                  |
|                  |                 | integrator, if   |                  |
|                  |                 | one is           |                  |
|                  |                 | constructed.     |                  |
+------------------+-----------------+------------------+------------------+
| common_options   | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | auto-generated   | nction           |
|                  |                 | functions        |                  |
+------------------+-----------------+------------------+------------------+
| expand           | OT_BOOL         | Replace MX with  | casadi::FixedSte |
|                  |                 | SX expressions   | pIntegrator      |
|                  |                 | in problem       |                  |
|                  |                 | formulation      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| grid             | OT_DOUBLEVECTOR | Time grid        | casadi::FixedSte |
|                  |                 |                  | pIntegrator      |
+------------------+-----------------+------------------+------------------+
| monitor          | OT_STRINGVECTOR | Set of user      | casadi::OracleFu |
|                  |                 | problem          | nction           |
|                  |                 | functions to be  |                  |
|                  |                 | monitored        |                  |
+------------------+-----------------+------------------+------------------+
| number_of_finite | OT_INT          | Number of finite | casadi::FixedSte |
| _elements        |                 | elements         | pIntegrator      |
+------------------+-----------------+------------------+------------------+
| output_t0        | OT_BOOL         | Output the state | casadi::FixedSte |
|                  |                 | at the initial   | pIntegrator      |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| print_stats      | OT_BOOL         | Print out        | casadi::FixedSte |
|                  |                 | statistics after | pIntegrator      |
|                  |                 | integration      |                  |
+------------------+-----------------+------------------+------------------+
| rootfinder       | OT_STRING       | An implicit      | casadi::FixedSte |
|                  |                 | function solver  | pIntegrator      |
+------------------+-----------------+------------------+------------------+
| rootfinder_optio | OT_DICT         | Options to be    | casadi::FixedSte |
| ns               |                 | passed to the    | pIntegrator      |
|                  |                 | NLP Solver       |                  |
+------------------+-----------------+------------------+------------------+
| specific_options | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | specific auto-   | nction           |
|                  |                 | generated        |                  |
|                  |                 | functions,       |                  |
|                  |                 | overwriting the  |                  |
|                  |                 | defaults from    |                  |
|                  |                 | common_options.  |                  |
|                  |                 | Nested           |                  |
|                  |                 | dictionary.      |                  |
+------------------+-----------------+------------------+------------------+
| t0               | OT_DOUBLE       | Beginning of the | casadi::FixedSte |
|                  |                 | time horizon     | pIntegrator      |
+------------------+-----------------+------------------+------------------+
| tf               | OT_DOUBLE       | End of the time  | casadi::FixedSte |
|                  |                 | horizon          | pIntegrator      |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: integrator_impl.hpp ";

%feature("docstring")  casadi::Integrator::aug_adj(int nadj) const  "

[INTERNAL]  Generate a augmented DAE system with nadj adjoint sensitivities.

";

%feature("docstring")  casadi::FunctionInternal::instruction_id(int k) const
"

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")
casadi::FunctionInternal::codegen_sparsities(CodeGenerator &g) const  "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring")  casadi::FixedStepIntegrator::free_mem(void *mem)
const override "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::Integrator::has_forward(int nfwd) const
override "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::Integrator::eval(const double **arg, double
**res, int *iw, double *w, void *mem) const override "

[INTERNAL]  evaluate

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian(const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::get_reltol() const  "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(int nadj,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FunctionInternal::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const std::vector<
Matrix< D > > &arg, std::vector< Matrix< D > > &res, bool always_inline,
bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::Integrator::get_forward(int nfwd, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const override "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::Integrator::sp_jac_dae() "

[INTERNAL]  Create sparsity pattern of the extended Jacobian (forward
problem)

";

%feature("docstring")  casadi::FunctionInternal::get_default_in(int ind)
const  "

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::check_res(const
std::vector< M > &res) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

";

%feature("docstring")  casadi::FunctionInternal::replace_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsityGen(int iind,
int oind, bool symmetric, int gr_i=1, int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FixedStepIntegrator::getExplicitB() const  "

[INTERNAL]  Get explicit dynamics (backward problem)

";

%feature("docstring")  casadi::FixedStepIntegrator::getExplicit() const  "

[INTERNAL]  Get explicit dynamics.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::symbolic_output(const
std::vector< MX > &arg) const  "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::OracleFunction::oracle() const override "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::codegen_meta(CodeGenerator
&g) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FunctionInternal::codegen_body(CodeGenerator
&g) const  "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(int nadj) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::get_min_in(int ind) const
"

[INTERNAL]  Get smallest input value.

";

%feature("docstring")  casadi::FixedStepIntegrator::reset(IntegratorMemory
*mem, double t, const double *x, const double *z, const double *p) const
override "

[INTERNAL]  Reset the forward problem.

";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::OracleFunction::print_fstats(const
OracleMemory *m) const  "

[INTERNAL]  Print statistics.

";

%feature("docstring")  casadi::FunctionInternal::fwd_seed(int nfwd) const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring")  casadi::FunctionInternal::instruction_output(int k)
const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::definition() const  "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring")  casadi::OracleFunction::set_temp(void *mem, const
double **arg, double **res, int *iw, double *w) const override "

[INTERNAL]  Set the work vectors.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::Integrator::has_reverse(int nadj) const
override "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::Integrator::print_stats(IntegratorMemory
*mem) const  "

[INTERNAL]  Print solver statistics.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(int iind, int
oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::Integrator::sp_forward(const bvec_t **arg,
bvec_t **res, int *iw, bvec_t *w, void *mem) const override "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::FunctionInternal::size_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::Integrator::has_sprev() const override "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::mx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::OracleFunction::get_function() const override
"

[INTERNAL] ";

%feature("docstring")  casadi::OracleFunction::get_function(const
std::string &name) const override "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::has_spfwd() const override "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M > > &fseed) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::Integrator::get_n_in() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::has_derivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::OracleFunction::has_function(const
std::string &fname) const override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_abstol() const  "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FixedStepIntegrator::alloc_mem() const
override "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")
casadi::FunctionInternal::codegen_declarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::PluginInterface< Integrator  >::plugin_name()
const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::get_n_out() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::Integrator::rx() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::rz() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::disp(std::ostream &stream,
bool more) const override "

[INTERNAL]  Display object.

";

%feature("docstring")  casadi::Integrator::getDerivativeOptions(bool fwd)
const  "

[INTERNAL]  Set solver specific options to generated augmented integrators.

";

%feature("docstring")  casadi::Integrator::rq() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::rp() const  "

[INTERNAL] ";


// File: classcasadi_1_1ForwardDiff.xml
%feature("docstring")  casadi::FunctionInternal::fwdViaJac(int nfwd) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FiniteDiff::get_sparsity_out(int i) override
"

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FunctionInternal::fwd_seed(int nfwd) const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::ForwardDiff::calc_stepsize(double abstol)
const override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::numel_out(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::get_max_in(int ind) const
"

[INTERNAL]  Get largest input value.

";

%feature("docstring")  casadi::FunctionInternal::codegen(CodeGenerator &g,
const std::string &fname) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::FunctionInternal::size_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::get_reltol() const  "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring")  casadi::FunctionInternal::instruction_constant(int k)
const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::all_scalar() const  "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")  casadi::FunctionInternal::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::ForwardDiff::get_forward(int nfwd, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const override "

[INTERNAL]  Second order derivatives.

";

%feature("docstring")  casadi::FiniteDiff::get_n_out() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::has_derivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::check_res(const
std::vector< M > &res) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

";

%feature("docstring")  casadi::FunctionInternal::matching_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M > > &fseed) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::instruction_MX(int k) const
"

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::get_free() const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::get_stats(void *mem) const
"

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::ProtoFunction::init_mem(void *mem) const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::call_gen(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const std::vector<
Matrix< D > > &arg, std::vector< Matrix< D > > &res, bool always_inline,
bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::replace_res(const
std::vector< M > &res) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::has_reverse(int nadj) const
"

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const double
**arg, double **res, int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const SXElem
**arg, SXElem **res, int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const bvec_t
**arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::get_partition(int iind, int
oind, Sparsity &D1, Sparsity &D2, bool compact, bool symmetric, bool
allow_forward, bool allow_reverse) const  "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::ForwardDiff::class_name() const override "

[INTERNAL]  Get type name.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::ForwardDiff "

[INTERNAL]  Calculate derivative using forward differences Joel Andersson

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| abstol           | OT_DOUBLE       | Accuracy of      | casadi::ForwardD |
|                  |                 | function outputs | iff              |
|                  |                 | [default: query  |                  |
|                  |                 | object]          |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| enable_fd        | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation by   |                  |
|                  |                 | finite           |                  |
|                  |                 | differencing.    |                  |
|                  |                 | [default:        |                  |
|                  |                 | false]]          |                  |
+------------------+-----------------+------------------+------------------+
| enable_forward   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using forward    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_jacobian  | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobians of all |                  |
|                  |                 | differentiable   |                  |
|                  |                 | outputs with     |                  |
|                  |                 | respect to all   |                  |
|                  |                 | differentiable   |                  |
|                  |                 | inputs - if      |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_reverse   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | transposed       |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using reverse    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| fd_method        | OT_STRING       | Method for       | casadi::Function |
|                  |                 | finite           | Internal         |
|                  |                 | differencing     |                  |
|                  |                 | [default         |                  |
|                  |                 | 'central']       |                  |
+------------------+-----------------+------------------+------------------+
| fd_options       | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | finite           |                  |
|                  |                 | difference       |                  |
|                  |                 | instance         |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| h_iter           | OT_INT          | Number of        | casadi::ForwardD |
|                  |                 | iterations to    | iff              |
|                  |                 | improve on the   |                  |
|                  |                 | step-size        |                  |
|                  |                 | [default: 1 if   |                  |
|                  |                 | error estimate   |                  |
|                  |                 | available,       |                  |
|                  |                 | otherwise 0]     |                  |
+------------------+-----------------+------------------+------------------+
| h_max            | OT_DOUBLE       | Maximum step     | casadi::ForwardD |
|                  |                 | size [default 0] | iff              |
+------------------+-----------------+------------------+------------------+
| h_min            | OT_DOUBLE       | Minimum step     | casadi::ForwardD |
|                  |                 | size [default    | iff              |
|                  |                 | inf]             |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| reltol           | OT_DOUBLE       | Accuracy of      | casadi::ForwardD |
|                  |                 | function inputs  | iff              |
|                  |                 | [default: query  |                  |
|                  |                 | object]          |                  |
+------------------+-----------------+------------------+------------------+
| second_order_ste | OT_DOUBLE       | Second order     | casadi::ForwardD |
| psize            |                 | perturbation     | iff              |
|                  |                 | size [default:   |                  |
|                  |                 | 1e-3]            |                  |
+------------------+-----------------+------------------+------------------+
| smoothing        | OT_DOUBLE       | Smoothing        | casadi::ForwardD |
|                  |                 | regularization   | iff              |
|                  |                 | [default:        |                  |
|                  |                 | machine          |                  |
|                  |                 | precision]       |                  |
+------------------+-----------------+------------------+------------------+
| u_aim            | OT_DOUBLE       | Target ratio of  | casadi::ForwardD |
|                  |                 | roundoff error   | iff              |
|                  |                 | to truncation    |                  |
|                  |                 | error [default:  |                  |
|                  |                 | 100.]            |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: finite_differences.hpp ";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< int > &order_in, const std::vector< int >
&order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::FunctionInternal::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInput(int k) const
"

[DEPRECATED] Renamed instruction_index

";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::ForwardDiff::calc_fd(double **yk, double *y0,
double *J, double h) const override "

[INTERNAL] ";

%feature("docstring")  casadi::ForwardDiff::calc_fd() const override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::export_code(const
std::string &lang, std::ostream &stream, const Dict &options) const  "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, int order, bool
tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(int nadj,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::ForwardDiff::get_abstol() const override "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOutput(int k)
const  "

[DEPRECATED] Renamed instruction_output

";

%feature("docstring")  casadi::FunctionInternal::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")  casadi::FunctionInternal::get_function() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::check_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::FiniteDiff::has_codegen() const override "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::FiniteDiff::get_name_in(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::instruction_id(int k) const
"

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::info() const  "

[INTERNAL]  Obtain information about function

";

%feature("docstring")  casadi::FunctionInternal::symbolic_output(const
std::vector< MX > &arg) const  "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::disp_more(std::ostream
&stream) const  "

[INTERNAL]  Print more.

";

%feature("docstring")  casadi::FunctionInternal::eval_dm(const std::vector<
DM > &arg) const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::ForwardDiff::~ForwardDiff "

[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::get_reverse(int nadj, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::ProtoFunction::free_mem(void *mem) const  "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::ForwardDiff::pert(const std::string &k) const
override "

[INTERNAL] ";

%feature("docstring")  casadi::ForwardDiff::pert(int k, double h) const
override "

[INTERNAL] ";

%feature("docstring")  casadi::FiniteDiff::eval(const double **arg, double
**res, int *iw, double *w, void *mem) const override "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::instruction_input(int k)
const  "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::ForwardDiff::ForwardDiff(const std::string
&name, int n) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::FiniteDiff::get_sparsity_in(int i) override "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::replace_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring")  casadi::FunctionInternal::matching_res(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

";

%feature("docstring")  casadi::FunctionInternal::jit_dependencies(const
std::string &fname) "

[INTERNAL]  Jit dependencies.

";

%feature("docstring")  casadi::FunctionInternal::sp_forward(const bvec_t
**arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian(const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::FunctionInternal::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::ForwardDiff::has_err() const override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::reverse(int nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::ForwardDiff::has_forward(int nfwd) const
override "

[INTERNAL]  Second order derivatives.

";

%feature("docstring")
casadi::FiniteDiff::codegen_declarations(CodeGenerator &g) const override "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::finalize(const Dict &opts)
override "

[INTERNAL]  Finalize the object creation.

";

%feature("docstring")  casadi::FunctionInternal::sx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FiniteDiff::uses_output() const override "

[INTERNAL]  Is the scheme using the (nondifferentiated) output?

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::FunctionInternal::n_instructions() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::FunctionInternal::sp_reverse(bvec_t **arg,
bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::forward(int nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::instruction_output(int k)
const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(int iind, int
oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::disp(std::ostream &stream,
bool more) const override "

[INTERNAL]  Display object.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::FiniteDiff::init(const Dict &opts) override "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")
casadi::FunctionInternal::codegen_sparsities(CodeGenerator &g) const  "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::FiniteDiff::get_n_in() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(int iind,
int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsityGen(int iind,
int oind, bool symmetric, int gr_i=1, int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::ProtoFunction::alloc_mem() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::FiniteDiff::codegen_body(CodeGenerator &g)
const override "

[INTERNAL]  Generate code for the body of the C function.

";

%feature("docstring")  casadi::FiniteDiff::get_name_out(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FiniteDiff::get_options() const override "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::FunctionInternal::set_temp(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::codegen_meta(CodeGenerator
&g) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FunctionInternal::size_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::FunctionInternal::definition() const  "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring")  casadi::FunctionInternal::get_min_in(int ind) const
"

[INTERNAL]  Get smallest input value.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(int nadj) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::ForwardDiff::n_pert() const override "

[INTERNAL] ";

%feature("docstring")  casadi::FiniteDiff::get_default_in(int ind) const
override "

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M > > &aseed) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";


// File: classcasadi_1_1FStats.xml
%feature("docstring")  casadi::FStats::tic() "

[INTERNAL]  Start timing.

";

%feature("docstring")  casadi::FStats::reset() "

[INTERNAL]  Reset the statistics.

";

%feature("docstring") casadi::FStats::FStats() "

[INTERNAL]  Constructor.

";

%feature("docstring") casadi::FStats "

[INTERNAL]  Timer class

FStats hack; hack.tic(); .... hack.toc();

C++ includes: timing.hpp ";

%feature("docstring")  casadi::FStats::toc() "

[INTERNAL]  Stop timing.

";


// File: classcasadi_1_1Function.xml
%feature("docstring")  casadi::Function::n_instructions() const  "

Number of instruction in the algorithm (SXFunction/MXFunction)

";

%feature("docstring")  casadi::Function::nnz_in() const  "

Get number of input nonzeros.

For a particular input or for all of the inputs

";

%feature("docstring")  casadi::Function::nnz_in(int ind) const  "

Get number of input nonzeros.

For a particular input or for all of the inputs

";

%feature("docstring")  casadi::Function::nnz_in(const std::string &iname)
const  "

Get number of input nonzeros.

For a particular input or for all of the inputs

";

%feature("docstring")  casadi::Function::has_spfwd() const  "

Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::Function::name() const  "

Name of the function.

";

%feature("docstring")  casadi::Function::has_function(const std::string
&fname) const  "

";

%feature("docstring")  casadi::Function::jacobian() const  "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring")  casadi::Function::stats(int mem=0) const  "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::Function::sparsity_out(int ind) const  "

Get sparsity of a given output.

";

%feature("docstring")  casadi::Function::sparsity_out(const std::string
&iname) const  "

Get sparsity of a given output.

";

%feature("docstring")  casadi::Function::oracle() const  "

Get oracle.

";

%feature("docstring")  casadi::Function::instruction_id(int k) const  "

Identifier index of the instruction (SXFunction/MXFunction)

";

%feature("docstring")  casadi::Function::instruction_output(int k) const  "

Location in the work vector for the output of the instruction
(SXFunction/MXFunction)

";

%feature("docstring")  casadi::Function::wrap() const  "

Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::Function::getAtomicOperation(int k) const  "

[DEPRECATED] Renamed instruction_id

";

%feature("docstring")  casadi::Function::getAlgorithmSize() const  "

[DEPRECATED] Renamed n_instructions

";

%feature("docstring")  casadi::Function::numel_out() const  "

Get number of output elements.

For a particular output or for all of the outputs

";

%feature("docstring")  casadi::Function::numel_out(int ind) const  "

Get number of output elements.

For a particular output or for all of the outputs

";

%feature("docstring")  casadi::Function::numel_out(const std::string &oname)
const  "

Get number of output elements.

For a particular output or for all of the outputs

";

%feature("docstring")  casadi::Function::print_dimensions(std::ostream
&stream=casadi::uout()) const  "

Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::SharedObject::get_str(bool more=false) const
"

Get string representation.

";

%feature("docstring")  casadi::Function::get_free() const  "

Get free variables as a string.

";

%feature("docstring")  casadi::SharedObject::disp(std::ostream &stream, bool
more=false) const  "

Print a description of the object.

";

%feature("docstring")  casadi::Function::name_out() const  "

Get output scheme.

";

%feature("docstring")  casadi::Function::name_out(int ind) const  "

Get output scheme name by index.

";

%feature("docstring")  casadi::Function::n_in() const  "

Get the number of function inputs.

";

%feature("docstring")  casadi::Function::mx_out(int ind) const  "

Get symbolic primitives equivalent to the output expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring")  casadi::Function::mx_out(const std::string &oname)
const  "

Get symbolic primitives equivalent to the output expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring")  casadi::Function::mx_out() const  "

Get symbolic primitives equivalent to the output expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring")  casadi::Function::max_in(int ind) const  "

Get largest input value.

";

%feature("docstring")  casadi::Function::generate_dependencies(const
std::string &fname, const Dict &opts=Dict()) const  "

Export / Generate C code for the dependency function.

";

%feature("docstring")  casadi::Function::free_sx() const  "

Get all the free variables of the function.

";

%feature("docstring")  casadi::Function::mapaccum(const std::string &name,
int n, const Dict &opts=Dict()) const  "

Create a mapaccumulated version of this function.

Suppose the function has a signature of:

::

     f: (x, u) -> (x_next , y )
  



The the mapaccumulated version has the signature:

::

     F: (x0, U) -> (X , Y )
  
      with
          U: horzcat([u0, u1, ..., u_(N-1)])
          X: horzcat([x1, x2, ..., x_N])
          Y: horzcat([y0, y1, ..., y_(N-1)])
  
      and
          x1, y0 <- f(x0, u0)
          x2, y1 <- f(x1, u1)
          ...
          x_N, y_(N-1) <- f(x_(N-1), u_(N-1))
  



Mapaccum has the following benefits over writing an equivalent for- loop:
much faster at construction time

potentially much faster compilation times (for codegen)

offers a trade-off between memory and evaluation time

The base (settable through the options dictionary, default 10), is used to
create a tower of function calls, containing unrolled for- loops of length
maximum base.

This technique is much more scalable in terms of memory-usage, but slightly
slower at evaluation, than a plain for-loop. The effect is similar to that
of a for-loop with a check-pointing instruction after each chunk of
iterations with size base.

Set base to -1 to unroll all the way; no gains in memory efficiency here.

";

%feature("docstring")  casadi::Function::mapaccum(const std::string &name,
int n, int n_accum, const Dict &opts=Dict()) const  "

Create a mapaccumulated version of this function.

Suppose the function has a signature of:

::

     f: (x, u) -> (x_next , y )
  



The the mapaccumulated version has the signature:

::

     F: (x0, U) -> (X , Y )
  
      with
          U: horzcat([u0, u1, ..., u_(N-1)])
          X: horzcat([x1, x2, ..., x_N])
          Y: horzcat([y0, y1, ..., y_(N-1)])
  
      and
          x1, y0 <- f(x0, u0)
          x2, y1 <- f(x1, u1)
          ...
          x_N, y_(N-1) <- f(x_(N-1), u_(N-1))
  



Mapaccum has the following benefits over writing an equivalent for- loop:
much faster at construction time

potentially much faster compilation times (for codegen)

offers a trade-off between memory and evaluation time

The base (settable through the options dictionary, default 10), is used to
create a tower of function calls, containing unrolled for- loops of length
maximum base.

This technique is much more scalable in terms of memory-usage, but slightly
slower at evaluation, than a plain for-loop. The effect is similar to that
of a for-loop with a check-pointing instruction after each chunk of
iterations with size base.

Set base to -1 to unroll all the way; no gains in memory efficiency here.

";

%feature("docstring")  casadi::Function::mapaccum(const std::string &name,
int n, const std::vector< int > &accum_in, const std::vector< int >
&accum_out, const Dict &opts=Dict()) const  "

Create a mapaccumulated version of this function.

Suppose the function has a signature of:

::

     f: (x, u) -> (x_next , y )
  



The the mapaccumulated version has the signature:

::

     F: (x0, U) -> (X , Y )
  
      with
          U: horzcat([u0, u1, ..., u_(N-1)])
          X: horzcat([x1, x2, ..., x_N])
          Y: horzcat([y0, y1, ..., y_(N-1)])
  
      and
          x1, y0 <- f(x0, u0)
          x2, y1 <- f(x1, u1)
          ...
          x_N, y_(N-1) <- f(x_(N-1), u_(N-1))
  



Mapaccum has the following benefits over writing an equivalent for- loop:
much faster at construction time

potentially much faster compilation times (for codegen)

offers a trade-off between memory and evaluation time

The base (settable through the options dictionary, default 10), is used to
create a tower of function calls, containing unrolled for- loops of length
maximum base.

This technique is much more scalable in terms of memory-usage, but slightly
slower at evaluation, than a plain for-loop. The effect is similar to that
of a for-loop with a check-pointing instruction after each chunk of
iterations with size base.

Set base to -1 to unroll all the way; no gains in memory efficiency here.

";

%feature("docstring")  casadi::Function::mapaccum(const std::string &name,
int n, const std::vector< std::string > &accum_in, const std::vector<
std::string > &accum_out, const Dict &opts=Dict()) const  "

Create a mapaccumulated version of this function.

Suppose the function has a signature of:

::

     f: (x, u) -> (x_next , y )
  



The the mapaccumulated version has the signature:

::

     F: (x0, U) -> (X , Y )
  
      with
          U: horzcat([u0, u1, ..., u_(N-1)])
          X: horzcat([x1, x2, ..., x_N])
          Y: horzcat([y0, y1, ..., y_(N-1)])
  
      and
          x1, y0 <- f(x0, u0)
          x2, y1 <- f(x1, u1)
          ...
          x_N, y_(N-1) <- f(x_(N-1), u_(N-1))
  



Mapaccum has the following benefits over writing an equivalent for- loop:
much faster at construction time

potentially much faster compilation times (for codegen)

offers a trade-off between memory and evaluation time

The base (settable through the options dictionary, default 10), is used to
create a tower of function calls, containing unrolled for- loops of length
maximum base.

This technique is much more scalable in terms of memory-usage, but slightly
slower at evaluation, than a plain for-loop. The effect is similar to that
of a for-loop with a check-pointing instruction after each chunk of
iterations with size base.

Set base to -1 to unroll all the way; no gains in memory efficiency here.

";

%feature("docstring") casadi::Function::Function(const std::string &name,
const std::vector< SX > &ex_in, const std::vector< SX > &ex_out, const Dict
&opts=Dict()) "

Construct an SX function.

";

%feature("docstring") casadi::Function::Function(const std::string &name,
const std::vector< SX > &ex_in, const std::vector< SX > &ex_out, const
std::vector< std::string > &name_in, const std::vector< std::string >
&name_out, const Dict &opts=Dict()) "

Construct an SX function.

";

%feature("docstring") casadi::Function::Function(const std::string &name,
const std::map< std::string, SX > &dict, const std::vector< std::string >
&name_in, const std::vector< std::string > &name_out, const Dict
&opts=Dict()) "

Construct an SX function.

";

%feature("docstring") casadi::Function::Function(const std::string &name,
const std::vector< MX > &ex_in, const std::vector< MX > &ex_out, const Dict
&opts=Dict()) "

Construct an MX function.

";

%feature("docstring") casadi::Function::Function(const std::string &name,
const std::vector< MX > &ex_in, const std::vector< MX > &ex_out, const
std::vector< std::string > &name_in, const std::vector< std::string >
&name_out, const Dict &opts=Dict()) "

Construct an MX function.

";

%feature("docstring") casadi::Function::Function(const std::string &name,
const std::map< std::string, MX > &dict, const std::vector< std::string >
&name_in, const std::vector< std::string > &name_out, const Dict
&opts=Dict()) "

Construct an MX function.

";

%feature("docstring") casadi::Function::Function() "

Default constructor, null pointer.

";

%feature("docstring") casadi::Function::Function(const std::string &fname) "

Construct from a file.

";

%feature("docstring")  casadi::Function::numel_in() const  "

Get number of input elements.

For a particular input or for all of the inputs

";

%feature("docstring")  casadi::Function::numel_in(int ind) const  "

Get number of input elements.

For a particular input or for all of the inputs

";

%feature("docstring")  casadi::Function::numel_in(const std::string &iname)
const  "

Get number of input elements.

For a particular input or for all of the inputs

";

%feature("docstring")  casadi::Function::get_function() const  "

";

%feature("docstring")  casadi::Function::get_function(const std::string
&name) const  "

";

%feature("docstring")  casadi::Function::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::SharedObject::is_null() const  "

Is a null pointer?

";

%feature("docstring")  casadi::Function::forward(int nfwd) const  "

Get a function that calculates nfwd forward derivatives.

Returns a function with n_in + n_out + n_in inputs and nfwd outputs. The
first n_in inputs correspond to nondifferentiated inputs. The next n_out
inputs correspond to nondifferentiated outputs. and the last n_in inputs
correspond to forward seeds, stacked horizontally The n_out outputs
correspond to forward sensitivities, stacked horizontally. * (n_in = n_in(),
n_out = n_out())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring")  casadi::Function::n_out() const  "

Get the number of function outputs.

";

%feature("docstring")  casadi::Function::getAtomicInput(int k) const  "

[DEPRECATED] Renamed instruction_index

";

%feature("docstring")  casadi::Function::uses_output() const  "

Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring")  casadi::SharedObject::print_ptr(std::ostream
&stream=casadi::uout()) const  "

[INTERNAL]  Print the pointer to the internal class

";

%feature("docstring")  casadi::Function::min_in(int ind) const  "

Get smallest input value.

";

%feature("docstring")  casadi::Function::assert_size_out(int i, int nrow,
int ncol) const  "

Assert that an output dimension is equal so some given value.

";

%feature("docstring") casadi::Function::~Function "

Destructor.

";

%feature("docstring") casadi::Function::__hash__ "

Returns a number that is unique for a given Node. If the Object does not
point to any node, \"0\" is returned.

";

%feature("docstring")  casadi::Function::index_out(const std::string &name)
const  "

Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLPSOL_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::free_mx() const  "

Get all the free variables of the function.

";

%feature("docstring")  casadi::Function::export_code(const std::string
&lang, const std::string &fname, const Dict &options=Dict()) const  "

Export function in specific language.

Only allowed for (a subset of) SX/MX Functions

";

%feature("docstring")  casadi::Function::export_code(const std::string
&lang, const Dict &options=Dict()) const  "

Export function in specific language.

Only allowed for (a subset of) SX/MX Functions

";

%feature("docstring")  casadi::Function::size_out(int ind) const  "

Get output dimension.

";

%feature("docstring")  casadi::Function::size_out(const std::string &oname)
const  "

Get output dimension.

";

%feature("docstring")  casadi::SharedObject::class_name() const  "

Get class name.

";

%feature("docstring")  casadi::Function::instruction_input(int k) const  "

Locations in the work vector for the inputs of the instruction
(SXFunction/MXFunction)

";

%feature("docstring")  casadi::Function::info() const  "

Obtain information about function

";

%feature("docstring")  casadi::Function::slice(const std::string &name,
const std::vector< int > &order_in, const std::vector< int > &order_out,
const Dict &opts=Dict()) const  "

returns a new function with a selection of inputs/outputs of the original

";

%feature("docstring")  casadi::Function::mapsum(const std::vector< MX >
&arg, const std::string &parallelization="serial") const  "

Evaluate symbolically in parallel and sum (matrix graph)

Parameters:
-----------

parallelization:  Type of parallelization used: unroll|serial|openmp

";

%feature("docstring")  casadi::Function::nnz_out() const  "

Get number of output nonzeros.

For a particular output or for all of the outputs

";

%feature("docstring")  casadi::Function::nnz_out(int ind) const  "

Get number of output nonzeros.

For a particular output or for all of the outputs

";

%feature("docstring")  casadi::Function::nnz_out(const std::string &oname)
const  "

Get number of output nonzeros.

For a particular output or for all of the outputs

";

%feature("docstring")  casadi::Function::sparsity_jac(int iind, int oind,
bool compact=false, bool symmetric=false) const  "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::sparsity_jac(const std::string
&iind, int oind=0, bool compact=false, bool symmetric=false) const  "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::sparsity_jac(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) const  "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::sparsity_jac(const std::string
&iind, const std::string &oind, bool compact=false, bool symmetric=false)
const  "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::index_in(const std::string &name)
const  "

Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLPSOL_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::factory(const std::string &name,
const std::vector< std::string > &s_in, const std::vector< std::string >
&s_out, const AuxOut &aux=AuxOut(), const Dict &opts=Dict()) const  "

";

%feature("docstring")  casadi::Function::checkout() const  "

Checkout a memory object.

";

%feature("docstring")  casadi::Function::print_option(const std::string
&name, std::ostream &stream=casadi::uout()) const  "

Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::Function::fullJacobian() const  "

[DEPRECATED] Alias of Function::jacobian

";

%feature("docstring")  casadi::Function::hessian_old(int iind, int oind)
const  "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output Legacy function: To be deprecated in a future
version of CasADi. Exists only for compatibility with Function::hessian pre-
CasADi 3.2

";

%feature("docstring")  casadi::Function::map(const std::string &name, const
std::string &parallelization, int n, const std::vector< int > &reduce_in,
const std::vector< int > &reduce_out, const Dict &opts=Dict()) const  "

Map with reduction A subset of the inputs are non-repeated and a subset of
the outputs summed up.

";

%feature("docstring")  casadi::Function::map(const std::string &name, const
std::string &parallelization, int n, const std::vector< std::string >
&reduce_in, const std::vector< std::string > &reduce_out, const Dict
&opts=Dict()) const  "

Map with reduction A subset of the inputs are non-repeated and a subset of
the outputs summed up.

";

%feature("docstring")  casadi::Function::map(int n, const std::string
&parallelization="serial") const  "

Create a mapped version of this function.

Suppose the function has a signature of:

::

     f: (a, p) -> ( s )
  



The the mapped version has the signature:

::

     F: (A, P) -> (S )
  
      with
          A: horzcat([a0, a1, ..., a_(N-1)])
          P: horzcat([p0, p1, ..., p_(N-1)])
          S: horzcat([s0, s1, ..., s_(N-1)])
      and
          s0 <- f(a0, p0)
          s1 <- f(a1, p1)
          ...
          s_(N-1) <- f(a_(N-1), p_(N-1))
  



Parameters:
-----------

parallelization:  Type of parallelization used: unroll|serial|openmp

";

%feature("docstring")  casadi::Function::sx_in(int iind) const  "

Get symbolic primitives equivalent to the input expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring")  casadi::Function::sx_in(const std::string &iname)
const  "

Get symbolic primitives equivalent to the input expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring")  casadi::Function::sx_in() const  "

Get symbolic primitives equivalent to the input expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring")  casadi::Function::size1_in(int ind) const  "

Get input dimension.

";

%feature("docstring")  casadi::Function::size1_in(const std::string &iname)
const  "

Get input dimension.

";

%feature("docstring")  casadi::Function::getAtomicOutput(int k) const  "

[DEPRECATED] Renamed instruction_output

";

%feature("docstring")  casadi::Function::conic_debug(const std::string
&filename) const  "

[INTERNAL]  Generate native code in the interfaced language for debugging

";

%feature("docstring")  casadi::Function::conic_debug(std::ostream &file)
const  "

[INTERNAL]  Generate native code in the interfaced language for debugging

";

%feature("docstring")  casadi::Function::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::Function::is_a(const std::string &type, bool
recursive=true) const  "

Check if the function is of a particular type Optionally check if name
matches one of the base classes (default true)

";

%feature("docstring")  casadi::Function::name_in() const  "

Get input scheme.

";

%feature("docstring")  casadi::Function::name_in(int ind) const  "

Get input scheme name by index.

";

%feature("docstring")  casadi::Function::mx_in(int ind) const  "

Get symbolic primitives equivalent to the input expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring")  casadi::Function::mx_in(const std::string &iname)
const  "

Get symbolic primitives equivalent to the input expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring")  casadi::Function::mx_in() const  "

Get symbolic primitives equivalent to the input expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring")  casadi::Function::reverse(int nadj) const  "

Get a function that calculates nadj adjoint derivatives.

Returns a function with n_in + n_out + n_out inputs and n_in outputs. The
first n_in inputs correspond to nondifferentiated inputs. The next n_out
inputs correspond to nondifferentiated outputs. and the last n_out inputs
correspond to adjoint seeds, stacked horizontally The n_in outputs
correspond to adjoint sensitivities, stacked horizontally. * (n_in = n_in(),
n_out = n_out())

(n_in = n_in(), n_out = n_out())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::Function "

Function object A Function instance is a general multiple-input, multiple-
output function where each input and output can be a sparse matrix. .

For an introduction to this class, see the CasADi user guide. Function is a
reference counted and immutable class; copying a class instance is very
cheap and its behavior (with some exceptions) is not affected by calling its
member functions. Joel Andersson >List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| enable_fd        | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation by   |                  |
|                  |                 | finite           |                  |
|                  |                 | differencing.    |                  |
|                  |                 | [default:        |                  |
|                  |                 | false]]          |                  |
+------------------+-----------------+------------------+------------------+
| enable_forward   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using forward    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_jacobian  | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobians of all |                  |
|                  |                 | differentiable   |                  |
|                  |                 | outputs with     |                  |
|                  |                 | respect to all   |                  |
|                  |                 | differentiable   |                  |
|                  |                 | inputs - if      |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_reverse   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | transposed       |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using reverse    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| fd_method        | OT_STRING       | Method for       | casadi::Function |
|                  |                 | finite           | Internal         |
|                  |                 | differencing     |                  |
|                  |                 | [default         |                  |
|                  |                 | 'central']       |                  |
+------------------+-----------------+------------------+------------------+
| fd_options       | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | finite           |                  |
|                  |                 | difference       |                  |
|                  |                 | instance         |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

C++ includes: function.hpp ";

%feature("docstring")  casadi::Function::instruction_MX(int k) const  "

";

%feature("docstring")  casadi::Function::print_free(std::ostream
&stream=casadi::uout()) const  "

[DEPRECATED] Use get_free instead

";

%feature("docstring")  casadi::Function::getAtomicInputReal(int k) const  "

[DEPRECATED] Renamed instruction_constant

";

%feature("docstring")  casadi::Function::generate(const std::string &fname,
const Dict &opts=Dict()) const  "

Export / Generate C code for the function.

";

%feature("docstring")  casadi::Function::generate(const Dict &opts=Dict())
const  "

Export / Generate C code for the function.

";

%feature("docstring")  casadi::Function::has_free() const  "

Does the function have free variables.

";

%feature("docstring")  casadi::Function::assert_size_in(int i, int nrow, int
ncol) const  "

Assert that an input dimension is equal so some given value.

";

%feature("docstring")  casadi::Function::n_nodes() const  "

Number of nodes in the algorithm.

";

%feature("docstring")  casadi::Function::release(int mem) const  "

Release a memory object.

";

%feature("docstring")  casadi::Function::size_in(int ind) const  "

Get input dimension.

";

%feature("docstring")  casadi::Function::size_in(const std::string &iname)
const  "

Get input dimension.

";

%feature("docstring")  casadi::Function::jit(const std::string &name, const
std::string &body, const std::vector< std::string > &name_in, const
std::vector< std::string > &name_out, const Dict &opts=Dict()) "

To resolve ambiguity on some compilers.

Create a just-in-time compiled function from a C language string The names
and sparsity patterns of all the inputs and outputs must be provided. If
sparsities are not provided, all inputs and outputs are assumed to be
scalar. Only specify the function body, assuming that input and output
nonzeros are stored in arrays with the specified naming convension. The data
type used is 'casadi_real', which is typically equal to 'double` or another
data type with the same API as 'double'.

Inputs may be null pointers. This means that the all entries are zero.
Outputs may be null points. This means that the corresponding result can be
ignored.

If an error occurs in the evaluation, issue \"return 1;\";

The final generated function will have a structure similar to:

int fname(const casadi_real** arg, casadi_real** res, int* iw, casadi_real*
w, void* mem) { const casadi_real *x1, *x2; casadi_real *r1, *r2; x1 =
*arg++; x2 = *arg++; r1 = *res++; r2 = *res++; <FUNCTION_BODY> return 0; }

";

%feature("docstring")  casadi::Function::jit(const std::string &name, const
std::string &body, const std::vector< std::string > &name_in, const
std::vector< std::string > &name_out, const std::vector< Sparsity >
&sparsity_in, const std::vector< Sparsity > &sparsity_out, const Dict
&opts=Dict()) "

To resolve ambiguity on some compilers.

Create a just-in-time compiled function from a C language string The names
and sparsity patterns of all the inputs and outputs must be provided. If
sparsities are not provided, all inputs and outputs are assumed to be
scalar. Only specify the function body, assuming that input and output
nonzeros are stored in arrays with the specified naming convension. The data
type used is 'casadi_real', which is typically equal to 'double` or another
data type with the same API as 'double'.

Inputs may be null pointers. This means that the all entries are zero.
Outputs may be null points. This means that the corresponding result can be
ignored.

If an error occurs in the evaluation, issue \"return 1;\";

The final generated function will have a structure similar to:

int fname(const casadi_real** arg, casadi_real** res, int* iw, casadi_real*
w, void* mem) { const casadi_real *x1, *x2; casadi_real *r1, *r2; x1 =
*arg++; x2 = *arg++; r1 = *res++; r2 = *res++; <FUNCTION_BODY> return 0; }

";

%feature("docstring")  casadi::Function::size2_out(int ind) const  "

Get output dimension.

";

%feature("docstring")  casadi::Function::size2_out(const std::string &oname)
const  "

Get output dimension.

";

%feature("docstring")  casadi::Function::size1_out(int ind) const  "

Get output dimension.

";

%feature("docstring")  casadi::Function::size1_out(const std::string &oname)
const  "

Get output dimension.

";

%feature("docstring")  casadi::Function::generate_lifted(Function
&output_vdef_fcn, Function &output_vinit_fcn) const  "

Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::Function::sparsity_in(int ind) const  "

Get sparsity of a given input.

";

%feature("docstring")  casadi::Function::sparsity_in(const std::string
&iname) const  "

Get sparsity of a given input.

";

%feature("docstring")  casadi::Function::which_depends(const std::string
&s_in, const std::vector< std::string > &s_out, int order=1, bool tr=false)
const  "

Which variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::Function::getWorkSize() const  "

[DEPRECATED] Use sz_w instead

";

%feature("docstring")  casadi::Function::call(const std::vector< DM > &arg,
std::vector< DM > &output_res, bool always_inline=false, bool
never_inline=false) const  "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< SX > &arg,
std::vector< SX > &output_res, bool always_inline=false, bool
never_inline=false) const  "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output Legacy function: To be deprecated in a future
version of CasADi. Exists only for compatibility with Function::jacobian
pre-CasADi 3.2

";

%feature("docstring")  casadi::Function::call(const std::vector< MX > &arg,
std::vector< MX > &output_res, bool always_inline=false, bool
never_inline=false) const  "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output Legacy function: To be deprecated in a future
version of CasADi. Exists only for compatibility with Function::jacobian
pre-CasADi 3.2

";

%feature("docstring")  casadi::Function::call(const DMDict &arg, DMDict
&output_res, bool always_inline=false, bool never_inline=false) const  "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output Legacy function: To be deprecated in a future
version of CasADi. Exists only for compatibility with Function::jacobian
pre-CasADi 3.2

";

%feature("docstring")  casadi::Function::call(const SXDict &arg, SXDict
&output_res, bool always_inline=false, bool never_inline=false) const  "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output Legacy function: To be deprecated in a future
version of CasADi. Exists only for compatibility with Function::jacobian
pre-CasADi 3.2

";

%feature("docstring")  casadi::Function::call(const MXDict &arg, MXDict
&output_res, bool always_inline=false, bool never_inline=false) const  "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output Legacy function: To be deprecated in a future
version of CasADi. Exists only for compatibility with Function::jacobian
pre-CasADi 3.2

";

%feature("docstring")  casadi::Function::jacobian_old(int iind, int oind)
const  "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output Legacy function: To be deprecated in a future
version of CasADi. Exists only for compatibility with Function::jacobian
pre-CasADi 3.2

";

%feature("docstring")  casadi::Function::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::Function::print_options(std::ostream
&stream=casadi::uout()) const  "

Print options to a stream.

";

%feature("docstring")  casadi::Function::size2_in(int ind) const  "

Get input dimension.

";

%feature("docstring")  casadi::Function::size2_in(const std::string &iname)
const  "

Get input dimension.

";

%feature("docstring")  casadi::Function::has_sprev() const  "

Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::Function::instruction_constant(int k) const
"

Get the floating point output argument of an instruction ( SXFunction)

";

%feature("docstring")  casadi::Function::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::Function::expand() const  "

Expand a function to SX.

";

%feature("docstring")  casadi::Function::expand(const std::string &name,
const Dict &opts=Dict()) const  "

Expand a function to SX.

";

%feature("docstring")  casadi::Function::spCanEvaluate(bool fwd) const  "

[DEPRECATED] Use has_spfwd, has_sprev

";

%feature("docstring")  casadi::Function::sx_out(int oind) const  "

Get symbolic primitives equivalent to the output expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring")  casadi::Function::sx_out(const std::string &oname)
const  "

Get symbolic primitives equivalent to the output expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring")  casadi::Function::sx_out() const  "

Get symbolic primitives equivalent to the output expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring")  casadi::Function::default_in(int ind) const  "

Get default input value.

";


// File: classcasadi_1_1GenericExternal.xml
%feature("docstring")  casadi::FunctionInternal::size_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::matching_res(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const std::vector<
Matrix< D > > &arg, std::vector< Matrix< D > > &res, bool always_inline,
bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::GenericExternal::get_sparsity_out(int i)
override "

[INTERNAL]  Retreive sparsities.

";

%feature("docstring")  casadi::FunctionInternal::get_reltol() const  "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring") casadi::GenericExternal::~GenericExternal "

[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::External::codegen_declarations(CodeGenerator
&g) const override "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(int nadj,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")
casadi::FunctionInternal::codegen_sparsities(CodeGenerator &g) const  "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring")  casadi::FunctionInternal::symbolic_output(const
std::vector< MX > &arg) const  "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::External::class_name() const override "

[INTERNAL]  Get type name.

";

%feature("docstring")  casadi::FunctionInternal::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::has_derivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::export_code(const
std::string &lang, std::ostream &stream, const Dict &options) const  "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::all_scalar() const  "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::External::has_jacobian() const override "

[INTERNAL]  Full Jacobian.

";

%feature("docstring")  casadi::GenericExternal::alloc_mem() const override "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::External::has_forward(int nfwd) const
override "

[INTERNAL]  Forward mode derivatives.

";

%feature("docstring")  casadi::FunctionInternal::disp(std::ostream &stream,
bool more) const override "

[INTERNAL]  Display object.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(int iind,
int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const double
**arg, double **res, int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const SXElem
**arg, SXElem **res, int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const bvec_t
**arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M > > &fseed) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::FunctionInternal::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::FunctionInternal::get_min_in(int ind) const
"

[INTERNAL]  Get smallest input value.

";

%feature("docstring")  casadi::FunctionInternal::size_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::get_default_in(int ind)
const  "

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::check_res(const
std::vector< M > &res) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOutput(int k)
const  "

[DEPRECATED] Renamed instruction_output

";

%feature("docstring")  casadi::FunctionInternal::get_function() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::External::get_reverse(int nadj, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const override "

[INTERNAL]  Reverse mode derivatives.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::info() const  "

[INTERNAL]  Obtain information about function

";

%feature("docstring") casadi::GenericExternal::GenericExternal(const
std::string &name, const Importer &li) "

[INTERNAL]  Constructor.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::sp_reverse(bvec_t **arg,
bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::jit_dependencies(const
std::string &fname) "

[INTERNAL]  Jit dependencies.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::forward(int nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::FunctionInternal::codegen_meta(CodeGenerator
&g) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::instruction_MX(int k) const
"

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::instruction_id(int k) const
"

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::definition() const  "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring")  casadi::External::get_name_out(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::eval_dm(const std::vector<
DM > &arg) const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::External::get_jacobian(const std::string
&name, const std::vector< std::string > &inames, const std::vector<
std::string > &onames, const Dict &opts) const override "

[INTERNAL]  Full Jacobian.

";

%feature("docstring")  casadi::FunctionInternal::replace_res(const
std::vector< M > &res) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(int nfwd) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::finalize(const Dict &opts)
override "

[INTERNAL]  Finalize the object creation.

";

%feature("docstring")  casadi::FunctionInternal::get_max_in(int ind) const
"

[INTERNAL]  Get largest input value.

";

%feature("docstring")  casadi::External::factory(const std::string &name,
const std::vector< std::string > &s_in, const std::vector< std::string >
&s_out, const Function::AuxOut &aux, const Dict &opts) const override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< int > &order_in, const std::vector< int >
&order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::fwd_seed(int nfwd) const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring")  casadi::FunctionInternal::instruction_input(int k)
const  "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::FunctionInternal::reverse(int nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::get_partition(int iind, int
oind, Sparsity &D1, Sparsity &D2, bool compact, bool symmetric, bool
allow_forward, bool allow_reverse) const  "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::get_abstol() const  "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring")  casadi::FunctionInternal::n_instructions() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring")  casadi::FunctionInternal::get_options() const
override "

[INTERNAL]  Options.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(int nadj) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::check_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

";

%feature("docstring")  casadi::External::get_forward(int nfwd, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const override "

[INTERNAL]  Forward mode derivatives.

";

%feature("docstring")  casadi::External::codegen_body(CodeGenerator &g)
const override "

[INTERNAL]  Generate code for the body of the C function.

";

%feature("docstring")  casadi::FunctionInternal::matching_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInput(int k) const
"

[DEPRECATED] Renamed instruction_index

";

%feature("docstring")  casadi::FunctionInternal::get_stats(void *mem) const
"

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::GenericExternal::init_mem(void *mem) const
override "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::sx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::External::has_reverse(int nadj) const
override "

[INTERNAL]  Reverse mode derivatives.

";

%feature("docstring")  casadi::FunctionInternal::disp_more(std::ostream
&stream) const  "

[INTERNAL]  Print more.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::External::get_n_out() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, int order, bool
tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::codegen(CodeGenerator &g,
const std::string &fname) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M > > &aseed) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::External::get_name_in(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::GenericExternal::get_sparsity_in(int i)
override "

[INTERNAL]  Retreive sparsities.

";

%feature("docstring")  casadi::FunctionInternal::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::GenericExternal "

[INTERNAL] C++ includes: external_impl.hpp ";

%feature("docstring")  casadi::FunctionInternal::get_free() const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(int iind, int
oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::set_temp(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::External::get_n_in() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::eval(const double **arg,
double **res, int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::uses_output() const  "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring")  casadi::FunctionInternal::instruction_output(int k)
const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::sp_forward(const bvec_t
**arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsityGen(int iind,
int oind, bool symmetric, int gr_i=1, int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")  casadi::GenericExternal::free_mem(void *mem) const
override "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::instruction_constant(int k)
const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::GenericExternal::init(const Dict &opts)
override "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::replace_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Replace 0-by-0 inputs.

";


// File: classcasadi_1_1GenericMatrix.xml


/*  Construct symbolic primitives  */

/* The \"sym\" function is intended to work in a similar way as \"sym\" used
in the Symbolic Toolbox for Matlab but instead creating a CasADi symbolic
primitive.

*/ %feature("docstring")  sum2(const MatType &x) "

Return a column-wise summation of elements.

";

%feature("docstring")  sum1(const MatType &x) "

Return a row-wise summation of elements.

";

%feature("docstring")  mrdivide(const MatType &x, const MatType &n) "

Matrix divide (cf. slash '/' in MATLAB)

";

%feature("docstring")  if_else(const MatType &cond, const MatType &if_true,
const MatType &if_false, bool short_circuit=false) "

Branching on MX nodes Ternary operator, \"cond ? if_true : if_false\".

";

%feature("docstring")  casadi::GenericMatrix< MatType >::tril2symm(const
MatType &a) "

Convert a lower triangular matrix to a symmetric one.

";

%feature("docstring")  det(const MatType &A) "

Matrix determinant (experimental)

";

%feature("docstring")  casadi::GenericMatrix< MatType >::nnz_diag() const  "

Get get the number of non-zeros on the diagonal.

";

%feature("docstring")  conditional(const MatType &ind, const std::vector<
MatType > &x, const MatType &x_default, bool short_circuit=false) "

Create a switch.

If the condition

Parameters:
-----------

ind:  evaluates to the integer k, where 0<=k<f.size(), then x[k] will be
returned, otherwise

x_default:  will be returned.

";

%feature("docstring")  pinv(const MatType &A) "

Computes the Moore-Penrose pseudo-inverse.

If the matrix A is fat (size1<size2), mul(A, pinv(A)) is unity.

pinv(A)' = (AA')^(-1) A

If the matrix A is slender (size1>size2), mul(pinv(A), A) is unity.

pinv(A) = (A'A)^(-1) A'

";

%feature("docstring")  pinv(const MatType &A, const std::string &lsolver,
const Dict &dict=Dict()) "

Computes the Moore-Penrose pseudo-inverse.

If the matrix A is fat (size1>size2), mul(A, pinv(A)) is unity. If the
matrix A is slender (size2<size1), mul(pinv(A), A) is unity.

";

%feature("docstring")  solve(const MatType &A, const MatType &b) "

Solve a system of equations: A*x = b The solve routine works similar to
Matlab's backslash when A is square and nonsingular. The algorithm used is
the following:

A simple forward or backward substitution if A is upper or lower triangular

If the linear system is at most 3-by-3, form the inverse via minor expansion
and multiply

Permute the variables and equations as to get a (structurally) nonzero
diagonal, then perform a QR factorization without pivoting and solve the
factorized system.

Note 1: If there are entries of the linear system known to be zero, these
will be removed. Elements that are very small, or will evaluate to be zero,
can still cause numerical errors, due to the lack of pivoting (which is not
possible since cannot compare the size of entries)

Note 2: When permuting the linear system, a BLT (block lower triangular)
transformation is formed. Only the permutation part of this is however used.
An improvement would be to solve block-by-block if there are multiple BLT
blocks.

";

%feature("docstring")  solve(const MatType &A, const MatType &b, const
std::string &lsolver, const Dict &dict=Dict()) "

Solve a system of equations: A*x = b.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::interp1d(const
std::vector< double > &x, const MatType &v, const std::vector< double > &xq,
const std::string &mode, bool equidistant=false) "

Performs 1d linear interpolation.

The data-points to be interpolated are given as (x[i], v[i]). xq[j] is used
as interplating value

";

%feature("docstring")  casadi::GenericMatrix< MatType >::get_row() const  "

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring")  print_operator(const MatType &xb, const std::vector<
std::string > &args) "

Get a string representation for a binary MatType, using custom arguments.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::linearize(const
MatType &f, const MatType &x, const MatType &x0) "

Linearize an expression.

";

%feature("docstring")  jacobian(const MatType &ex, const MatType &arg, const
Dict &opts=Dict()) "

Calculate Jacobian.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::is_dense() const  "

Check if the matrix expression is dense.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::nnz_lower() const
"

Get the number of non-zeros in the lower triangular half.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::rank1(const MatType
&A, const MatType &alpha, const MatType &x, const MatType &y) "

Make a rank-1 update to a matrix A Calculates A + 1/2 * alpha * x*y'.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::gradient(const
MatType &ex, const MatType &arg) "

Functions called by friend functions defined here

";

%feature("docstring")  n_nodes(const MatType &A) "

Count number of nodes

";

%feature("docstring")  hessian(const MatType &ex, const MatType &arg) "

";

%feature("docstring")  hessian(const MatType &ex, const MatType &arg,
MatType &output_g) "

";

%feature("docstring")  nullspace(const MatType &A) "

Computes the nullspace of a matrix A.

Finds Z m-by-(m-n) such that AZ = 0 with A n-by-m with m > n

Assumes A is full rank

Inspired by Numerical Methods in Scientific Computing by Ake Bjorck

";

%feature("docstring")  substitute_inplace(const std::vector< MatType > &v,
std::vector< MatType > &inout_vdef, std::vector< MatType > &inout_ex, bool
reverse=false) "

Inplace substitution with piggyback expressions Substitute variables v out
of the expressions vdef sequentially, as well as out of a number of other
expressions piggyback.

";

%feature("docstring")  mmax(const MatType &x) "

Largest element in a matrix.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::is_scalar(bool
scalar_and_dense=false) const  "

Check if the matrix expression is scalar.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::columns() const  "

Get the number of columns, Octave-style syntax.

";

%feature("docstring")  mmin(const MatType &x) "

Smallest element in a matrix.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::is_column() const
"

Check if the matrix is a column vector (i.e. size2()==1)

";

%feature("docstring")  casadi::GenericMatrix< MatType >::skew(const MatType
&a) "

Generate a skew symmetric matrix from a 3-vector.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::is_tril() const  "

Check if the matrix is lower triangular.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::colind(int col)
const  "

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::is_triu() const  "

Check if the matrix is upper triangular.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::gradient(const
MatType &ex, const MatType &arg) "

Calculate Jacobian.

";

%feature("docstring")  unite(const MatType &A, const MatType &B) "

Unite two matrices no overlapping sparsity.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::dim(bool
with_nz=false) const  "

Get string representation of dimensions. The representation is e.g. \"4x5\"
or \"4x5,10nz\".

";

%feature("docstring")  sum_square(const MatType &x) "

[DEPRECATED] Renamed sumsqr

";

%feature("docstring")  inv(const MatType &A) "

Matrix inverse.

";

%feature("docstring")  inv(const MatType &A, const std::string &lsolver,
const Dict &options=Dict()) "

Matrix inverse.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::size1() const  "

Get the first dimension (i.e. number of rows)

";

%feature("docstring")  casadi::GenericMatrix< MatType >::size2() const  "

Get the second dimension (i.e. number of columns)

";

%feature("docstring")  norm_1(const MatType &x) "

1-norm

";

%feature("docstring")  norm_2(const MatType &x) "

2-norm

";

%feature("docstring")  forward(const std::vector< MatType > &ex, const
std::vector< MatType > &arg, const std::vector< std::vector< MatType > > &v,
const Dict &opts=Dict()) "

Forward directional derivative.

";

%feature("docstring")  diag(const MatType &A) "

Get the diagonal of a matrix or construct a diagonal When the input is
square, the diagonal elements are returned. If the input is vector- like, a
diagonal matrix is constructed with it.

";

%feature("docstring")  project(const MatType &A, const Sparsity &sp, bool
intersect=false) "

Create a new matrix with a given sparsity pattern but with the nonzeros
taken from an existing matrix.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::jtimes(const
MatType &ex, const MatType &arg, const MatType &v, bool tr=false) "

Calculate the Jacobian and multiply by a vector from the right This is
equivalent to mul(jacobian(ex, arg), v) or mul(jacobian(ex, arg).T, v) for
tr set to false and true respectively. If contrast to these expressions, it
will use directional derivatives which is typically (but not necessarily)
more efficient if the complete Jacobian is not needed and v has few rows.

";

%feature("docstring")  substitute(const MatType &ex, const MatType &v, const
MatType &vdef) "

Substitute variable v with expression vdef in an expression ex.

";

%feature("docstring")  substitute(const std::vector< MatType > &ex, const
std::vector< MatType > &v, const std::vector< MatType > &vdef) "

Substitute variable var with expression expr in multiple expressions.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::bilin(const MatType
&A, const MatType &x, const MatType &y) "

Calculate bilinear form x^T A y.

";

%feature("docstring")  mldivide(const MatType &x, const MatType &n) "

Matrix divide (cf. backslash '\\\\' in MATLAB)

";

%feature("docstring")  casadi::GenericMatrix< MatType >::get_colind() const
"

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::cross(const MatType
&a, const MatType &b, int dim=-1) "

Matlab's cross command.

";

%feature("docstring")  shared(std::vector< MatType > &ex, std::vector<
MatType > &v, std::vector< MatType > &vdef, const std::string
&v_prefix="v_", const std::string &v_suffix="") "

Extract shared subexpressions from an set of expressions.

";

%feature("docstring")  shared(const std::vector< MatType > &ex, std::vector<
MatType > &ex_output, std::vector< MatType > &v, std::vector< MatType >
&vdef, const std::string &v_prefix="v_", const std::string &v_suffix="") "

Extract shared subexpressions from an set of expressions.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::is_empty(bool
both=false) const  "

Check if the sparsity is empty, i.e. if one of the dimensions is zero (or
optionally both dimensions)

";

%feature("docstring")  casadi::GenericMatrix< MatType >::is_row() const  "

Check if the matrix is a row vector (i.e. size1()==1)

";

%feature("docstring")  casadi::GenericMatrix< MatType >::rank1(const MatType
&A, const MatType &alpha, const MatType &x, const MatType &y) "

Make a rank-1 update to a matrix A Calculates A + 1/2 * alpha * x*y'.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::inv_skew(const
MatType &a) "

Generate the 3-vector progenitor of a skew symmetric matrix.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::tangent(const
MatType &ex, const MatType &arg) "

Calculate Jacobian.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::is_square() const
"

Check if the matrix expression is square.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::bilin(const MatType
&A, const MatType &x, const MatType &y) "

Calculate bilinear form x^T A y.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::jtimes(const
MatType &ex, const MatType &arg, const MatType &v, bool tr=false) "

Functions called by friend functions defined here

";

%feature("docstring")  simplify(const MatType &x) "

Simplify an expression.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::numel() const  "

Get the number of elements.

";

%feature("docstring")  which_depends(const MatType &expr, const MatType
&var, int order, bool tr) "

Find out which variables enter with some order.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::linspace(const
MatType &a, const MatType &b, int nsteps) "

Matlab's linspace command.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::nnz() const  "

Get the number of (structural) non-zero elements.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::sym(const
std::string &name, int nrow=1, int ncol=1) "

Create an nrow-by-ncol symbolic primitive.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::sym(const
std::string &name, const std::pair< int, int > &rc) "

Construct a symbolic primitive with given dimensions.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::sym(const
std::string &name, const Sparsity &sp) "

Create symbolic primitive with a given sparsity pattern.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::sym(const
std::string &name, const Sparsity &sp, int p) "

Create a vector of length p with with matrices with symbolic primitives of
given sparsity.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::sym(const
std::string &name, int nrow, int ncol, int p) "

Create a vector of length p with nrow-by-ncol symbolic primitives.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::sym(const
std::string &name, const Sparsity &sp, int p, int r) "

Create a vector of length r of vectors of length p with symbolic primitives
with given sparsity.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::sym(const
std::string &name, int nrow, int ncol, int p, int r) "

Create a vector of length r of vectors of length p with nrow-by-ncol
symbolic primitives.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::row(int el) const
"

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring")  inv_minor(const MatType &A) "

Matrix inverse (experimental)

";

%feature("docstring")  casadi::GenericMatrix< MatType >::nnz_upper() const
"

Get the number of non-zeros in the upper triangular half.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::sparsity() const  "

Get the sparsity pattern.

";

%feature("docstring")  norm_inf(const MatType &x) "

Infinity-norm.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::mpower(const
MatType &x, const MatType &y) "

Functions called by friend functions defined here

";

%feature("docstring")  trace(const MatType &x) "

Matrix trace.

";

%feature("docstring")  einstein(const MatType &A, const MatType &B, const
MatType &C, const std::vector< int > &dim_a, const std::vector< int >
&dim_b, const std::vector< int > &dim_c, const std::vector< int > &a, const
std::vector< int > &b, const std::vector< int > &c) "

Compute any contraction of two dense tensors, using index/einstein notation
einstein(A, B, a, b, c) -> C.

Given two tensors, A and B, computes a third tensor C such that:

C_c = A_a * B_b

With a, b, c representing einstein indices. Instead of the classical index
labels i,j,k,... we employ -1,-2,-3,...

A, B, C are represented as CasADi vectors, with dim_a, dim_b, dim_c
indictating theire tensorial dimensions.

";

%feature("docstring")  einstein(const MatType &A, const MatType &B, const
std::vector< int > &dim_a, const std::vector< int > &dim_b, const
std::vector< int > &dim_c, const std::vector< int > &a, const std::vector<
int > &b, const std::vector< int > &c) "

Performs 1d linear interpolation.

The data-points to be interpolated are given as (x[i], v[i]). xq[j] is used
as interplating value

";

%feature("docstring")  casadi::GenericMatrix< MatType >::repsum(const
MatType &A, int n, int m=1) "

Given a repeated matrix, computes the sum of repeated parts.

";

%feature("docstring")  dot(const MatType &x, const MatType &y) "

Inner product of two matrices with x and y matrices of the same dimension.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::size() const  "

Get the shape.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::size(int axis)
const  "

Get the size along a particular dimensions.

";

%feature("docstring") casadi::GenericMatrix "

Matrix base class.

This is a common base class for MX and Matrix<>, introducing a uniform
syntax and implementing common functionality using the curiously recurring
template pattern (CRTP) idiom.  The class is designed with the idea that
\"everything is a matrix\", that is, also scalars and vectors. This
philosophy makes it easy to use and to interface in particularly with Python
and Matlab/Octave.  The syntax tries to stay as close as possible to the
ublas syntax when it comes to vector/matrix operations.  Index starts with
0. Index vec happens as follows: (rr, cc) -> k = rr+cc*size1() Vectors are
column vectors.  The storage format is Compressed Column Storage (CCS),
similar to that used for sparse matrices in Matlab, but unlike this format,
we do allow for elements to be structurally non-zero but numerically zero.
The sparsity pattern, which is reference counted and cached, can be accessed
with Sparsity& sparsity() Joel Andersson

C++ includes: generic_matrix.hpp ";

%feature("docstring")  casadi::GenericMatrix< MatType >::tangent(const
MatType &ex, const MatType &arg) "

Functions called by friend functions defined here

";

%feature("docstring")  polyval(const MatType &p, const MatType &x) "

Evaluate a polynomial with coefficients p in x.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::triu2symm(const
MatType &a) "

Convert a upper triangular matrix to a symmetric one.

";

%feature("docstring")  depends_on(const MatType &f, const MatType &arg) "

Check if expression depends on the argument The argument must be symbolic.

";

%feature("docstring")  symvar(const MatType &x) "

Get all symbols contained in the supplied expression Get all symbols on
which the supplied expression depends.

See:  SXFunction::getFree(), MXFunction::getFree()

";

%feature("docstring")  casadi::GenericMatrix< MatType >::is_vector() const
"

Check if the matrix is a row or column vector.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::mpower(const
MatType &x, const MatType &n) "

Matrix power x^n.

";

%feature("docstring")  norm_fro(const MatType &x) "

Frobenius norm.

";

%feature("docstring")  sumsqr(const MatType &x) "

Calculate sum of squares: sum_ij X_ij^2.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::zeros(int nrow=1,
int ncol=1) "

Create a dense matrix or a matrix with specified sparsity with all entries
zero.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::zeros(const
Sparsity &sp) "

Create a dense matrix or a matrix with specified sparsity with all entries
zero.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::zeros(const
std::pair< int, int > &rc) "

Create a dense matrix or a matrix with specified sparsity with all entries
zero.

";

%feature("docstring")  reverse(const std::vector< MatType > &ex, const
std::vector< MatType > &arg, const std::vector< std::vector< MatType > > &v,
const Dict &opts=Dict()) "

Reverse directional derivative.

";

%feature("docstring")  expm_const(const MatType &A, const MatType &t) "

";

%feature("docstring")  expm(const MatType &A) "

";

%feature("docstring")  casadi::GenericMatrix< MatType >::rows() const  "

Get the number of rows, Octave-style syntax.

";

%feature("docstring")  densify(const MatType &x) "

Make the matrix dense if not already.

";

%feature("docstring")  densify(const MatType &x, const MatType &val) "

Make the matrix dense and assign nonzeros to a value.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::linearize(const
MatType &f, const MatType &x, const MatType &x0) "

Functions called by friend functions defined here

";

%feature("docstring")  casadi::GenericMatrix< MatType >::ones(int nrow=1,
int ncol=1) "

Create a dense matrix or a matrix with specified sparsity with all entries
one.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::ones(const Sparsity
&sp) "

Create a dense matrix or a matrix with specified sparsity with all entries
one.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::ones(const
std::pair< int, int > &rc) "

Create a dense matrix or a matrix with specified sparsity with all entries
one.

";


// File: classcasadi_1_1GenericType.xml
%feature("docstring") casadi::GenericType "

Generic data type, can hold different types such as bool, int, string etc.

Joel Andersson

C++ includes: generic_type.hpp ";


// File: classcasadi_1_1GenericTypeBase.xml
%feature("docstring") casadi::GenericTypeBase::~GenericTypeBase "

[INTERNAL] ";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::SharedObjectInternal::class_name() const  "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring")  casadi::GenericTypeBase::getType() const  "

[INTERNAL] ";

%feature("docstring")  casadi::SharedObjectInternal::disp(std::ostream
&stream, bool more) const  "

[INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring") casadi::GenericTypeBase "

[INTERNAL] C++ includes: generic_type_internal.hpp ";


// File: classcasadi_1_1GetElements.xml


// File: classcasadi_1_1GetNonzeros.xml


// File: classcasadi_1_1GetNonzerosSlice.xml


// File: classcasadi_1_1GetNonzerosSlice2.xml


// File: classcasadi_1_1GetNonzerosVector.xml


// File: classcasadi_1_1GlobalOptions.xml
%feature("docstring") casadi::GlobalOptions "

Collects global CasADi options.

Note to developers: use sparingly. Global options are - in general - a
rather bad idea

this class must never be instantiated. Access its static members directly
Joris Gillis

C++ includes: global_options.hpp ";


// File: classcasadi_1_1Horzcat.xml


// File: classcasadi_1_1HorzRepmat.xml


// File: classcasadi_1_1HorzRepsum.xml


// File: classcasadi_1_1Horzsplit.xml


// File: classcasadi_1_1ImplicitFixedStepIntegrator.xml
%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::disp_more(std::ostream
&stream) const  "

[INTERNAL]  Print more.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const std::vector<
Matrix< D > > &arg, std::vector< Matrix< D > > &res, bool always_inline,
bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::SharedObjectInternal::class_name() const  "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(int nfwd) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::ImplicitFixedStepIntegrator::init(const Dict
&opts) override "

[INTERNAL]  Initialize stage.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::instruction_input(int k)
const  "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::Integrator::setStopTime(IntegratorMemory
*mem, double tf) const  "

[INTERNAL]  Set stop time for the integration.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::FunctionInternal::has_derivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::codegen_meta(CodeGenerator
&g) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::Integrator::has_sprev() const override "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M > > &fseed) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::Integrator::getDerivativeOptions(bool fwd)
const  "

[INTERNAL]  Set solver specific options to generated augmented integrators.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::export_code(const
std::string &lang, std::ostream &stream, const Dict &options) const  "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::FunctionInternal::matching_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

";

%feature("docstring")  casadi::OracleFunction::jit_dependencies(const
std::string &fname) override "

[INTERNAL]  JIT for dependencies.

";

%feature("docstring")  casadi::FixedStepIntegrator::advance(IntegratorMemory
*mem, double t, double *x, double *z, double *q) const override "

[INTERNAL]  Advance solution in time.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::OracleFunction::print_fstats(const
OracleMemory *m) const  "

[INTERNAL]  Print statistics.

";

%feature("docstring")  casadi::Integrator::get_sparsity_in(int i) override "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::Integrator::sp_forward(const bvec_t **arg,
bvec_t **res, int *iw, bvec_t *w, void *mem) const override "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::forward(int nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::OracleFunction::get_stats(void *mem) const
override "

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::get_free() const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::instruction_constant(int k)
const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FixedStepIntegrator::alloc_mem() const
override "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::FunctionInternal::get_partition(int iind, int
oind, Sparsity &D1, Sparsity &D2, bool compact, bool symmetric, bool
allow_forward, bool allow_reverse) const  "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::Integrator::sp_reverse(bvec_t **arg, bvec_t
**res, int *iw, bvec_t *w, void *mem) const override "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::matching_res(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn, const std::string &fname, bool jit=false) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::FunctionInternal::codegen_body(CodeGenerator
&g) const  "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator "



>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| augmented_option | OT_DICT         | Options to be    | casadi::Implicit |
| s                |                 | passed down to   | FixedStepIntegra |
|                  |                 | the augmented    | tor              |
|                  |                 | integrator, if   |                  |
|                  |                 | one is           |                  |
|                  |                 | constructed.     |                  |
+------------------+-----------------+------------------+------------------+
| common_options   | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | auto-generated   | nction           |
|                  |                 | functions        |                  |
+------------------+-----------------+------------------+------------------+
| expand           | OT_BOOL         | Replace MX with  | casadi::Implicit |
|                  |                 | SX expressions   | FixedStepIntegra |
|                  |                 | in problem       | tor              |
|                  |                 | formulation      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| grid             | OT_DOUBLEVECTOR | Time grid        | casadi::Implicit |
|                  |                 |                  | FixedStepIntegra |
|                  |                 |                  | tor              |
+------------------+-----------------+------------------+------------------+
| monitor          | OT_STRINGVECTOR | Set of user      | casadi::OracleFu |
|                  |                 | problem          | nction           |
|                  |                 | functions to be  |                  |
|                  |                 | monitored        |                  |
+------------------+-----------------+------------------+------------------+
| number_of_finite | OT_INT          | Number of finite | casadi::Implicit |
| _elements        |                 | elements         | FixedStepIntegra |
|                  |                 |                  | tor              |
+------------------+-----------------+------------------+------------------+
| output_t0        | OT_BOOL         | Output the state | casadi::Implicit |
|                  |                 | at the initial   | FixedStepIntegra |
|                  |                 | time             | tor              |
+------------------+-----------------+------------------+------------------+
| print_stats      | OT_BOOL         | Print out        | casadi::Implicit |
|                  |                 | statistics after | FixedStepIntegra |
|                  |                 | integration      | tor              |
+------------------+-----------------+------------------+------------------+
| rootfinder       | OT_STRING       | An implicit      | casadi::Implicit |
|                  |                 | function solver  | FixedStepIntegra |
|                  |                 |                  | tor              |
+------------------+-----------------+------------------+------------------+
| rootfinder_optio | OT_DICT         | Options to be    | casadi::Implicit |
| ns               |                 | passed to the    | FixedStepIntegra |
|                  |                 | NLP Solver       | tor              |
+------------------+-----------------+------------------+------------------+
| specific_options | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | specific auto-   | nction           |
|                  |                 | generated        |                  |
|                  |                 | functions,       |                  |
|                  |                 | overwriting the  |                  |
|                  |                 | defaults from    |                  |
|                  |                 | common_options.  |                  |
|                  |                 | Nested           |                  |
|                  |                 | dictionary.      |                  |
+------------------+-----------------+------------------+------------------+
| t0               | OT_DOUBLE       | Beginning of the | casadi::Implicit |
|                  |                 | time horizon     | FixedStepIntegra |
|                  |                 |                  | tor              |
+------------------+-----------------+------------------+------------------+
| tf               | OT_DOUBLE       | End of the time  | casadi::Implicit |
|                  |                 | horizon          | FixedStepIntegra |
|                  |                 |                  | tor              |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: integrator_impl.hpp ";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::get_reltol() const  "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring")  casadi::Integrator::q() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::p() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::size2_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::Integrator::t() const  "

[INTERNAL] ";

%feature("docstring")
casadi::ImplicitFixedStepIntegrator::~ImplicitFixedStepIntegrator "

[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::Integrator::z() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::x() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::disp(std::ostream &stream,
bool more) const override "

[INTERNAL]  Display object.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::all_scalar() const  "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")  casadi::FixedStepIntegrator::reset(IntegratorMemory
*mem, double t, const double *x, const double *z, const double *p) const
override "

[INTERNAL]  Reset the forward problem.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< int > &order_in, const std::vector< int >
&order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::FunctionInternal::check_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::instruction_output(int k)
const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsityGen(int iind,
int oind, bool symmetric, int gr_i=1, int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FunctionInternal::sx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::info() const  "

[INTERNAL]  Obtain information about function

";

%feature("docstring")  casadi::Integrator::get_n_out() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::Integrator::print_stats(IntegratorMemory
*mem) const  "

[INTERNAL]  Print solver statistics.

";

%feature("docstring")  casadi::OracleFunction::finalize(const Dict &opts)
override "

[INTERNAL]  Finalize initialization.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(int iind, int
oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::OracleFunction::get_function() const override
"

[INTERNAL] ";

%feature("docstring")  casadi::OracleFunction::get_function(const
std::string &name) const override "

[INTERNAL] ";

%feature("docstring")  casadi::FixedStepIntegrator::free_mem(void *mem)
const override "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const double
**arg, double **res, int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const SXElem
**arg, SXElem **res, int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const bvec_t
**arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::ImplicitFixedStepIntegrator::getExplicitB()
const override "

[INTERNAL]  Get explicit dynamics (backward problem)

";

%feature("docstring")  casadi::FunctionInternal::n_instructions() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::Integrator::get_sparsity_out(int i) override
"

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")
casadi::FunctionInternal::codegen_sparsities(CodeGenerator &g) const  "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring")  casadi::FunctionInternal::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")  casadi::Integrator::has_forward(int nfwd) const
override "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::FunctionInternal::instruction_MX(int k) const
"

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::ImplicitFixedStepIntegrator::get_options()
const override "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::FunctionInternal::fwd_seed(int nfwd) const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(int iind,
int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOutput(int k)
const  "

[DEPRECATED] Renamed instruction_output

";

%feature("docstring")  casadi::FunctionInternal::codegen(CodeGenerator &g,
const std::string &fname) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::size1_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FixedStepIntegrator::setupFG() "

[INTERNAL]  Setup F and G.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::OracleFunction::monitored(const std::string
&name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::ImplicitFixedStepIntegrator::getExplicit()
const override "

[INTERNAL]  Get explicit dynamics.

";

%feature("docstring")  casadi::Integrator::get_name_out(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::Integrator::aug_fwd(int nfwd) const  "

[INTERNAL]  Generate a augmented DAE system with nfwd forward sensitivities.

";

%feature("docstring")
casadi::FunctionInternal::codegen_declarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, int order, bool
tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::OracleFunction::oracle() const override "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FunctionInternal::get_max_in(int ind) const
"

[INTERNAL]  Get largest input value.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(int nadj) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::OracleFunction::generate_dependencies(const
std::string &fname, const Dict &opts) const override "

[INTERNAL]  Export / Generate C code for the generated functions.

";

%feature("docstring")  casadi::FunctionInternal::definition() const  "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M > > &aseed) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::FunctionInternal::check_res(const
std::vector< M > &res) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::OracleFunction::expand() "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::PluginInterface< Integrator  >::plugin_name()
const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_min_in(int ind) const
"

[INTERNAL]  Get smallest input value.

";

%feature("docstring")  casadi::Integrator::eval(const double **arg, double
**res, int *iw, double *w, void *mem) const override "

[INTERNAL]  evaluate

";

%feature("docstring")  casadi::FunctionInternal::symbolic_output(const
std::vector< MX > &arg) const  "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::OracleFunction::has_function(const
std::string &fname) const override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_abstol() const  "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::get_default_in(int ind)
const  "

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInput(int k) const
"

[DEPRECATED] Renamed instruction_index

";

%feature("docstring")  casadi::FixedStepIntegrator::init_mem(void *mem)
const override "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian(const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::FunctionInternal::reverse(int nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FixedStepIntegrator::retreat(IntegratorMemory
*mem, double t, double *rx, double *rz, double *rq) const override "

[INTERNAL]  Retreat solution in time.

";

%feature("docstring")  casadi::FunctionInternal::replace_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::OracleFunction::set_temp(void *mem, const
double **arg, double **res, int *iw, double *w) const override "

[INTERNAL]  Set the work vectors.

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring")  casadi::Integrator::get_reverse(int nadj, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const override "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::Integrator::rp() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::rq() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::has_reverse(int nadj) const
override "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::Integrator::get_forward(int nfwd, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const override "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::Integrator::rz() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::get_n_in() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::Integrator::rx() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::instruction_id(int k) const
"

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::size_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::Integrator::sp_jac_dae() "

[INTERNAL]  Create sparsity pattern of the extended Jacobian (forward
problem)

";

%feature("docstring")  casadi::FunctionInternal::uses_output() const  "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring")  casadi::Integrator::sp_jac_rdae() "

[INTERNAL]  Create sparsity pattern of the extended Jacobian (backward
problem)

";

%feature("docstring")  casadi::Integrator::get_name_in(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::OracleFunction::calc_function(OracleMemory
*m, const std::string &fcn, const double *const *arg=0) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::mx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::Integrator::aug_adj(int nadj) const  "

[INTERNAL]  Generate a augmented DAE system with nadj adjoint sensitivities.

";

%feature("docstring")  casadi::FunctionInternal::size_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(int nadj,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FixedStepIntegrator::resetB(IntegratorMemory
*mem, double t, const double *rx, const double *rz, const double *rp) const
override "

[INTERNAL]  Reset the backward problem and take time to tf.

";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::Integrator::has_spfwd() const override "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::eval_dm(const std::vector<
DM > &arg) const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::FunctionInternal::jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::replace_res(const
std::vector< M > &res) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::OracleFunction::create_function(const
std::string &fname, const std::vector< std::string > &s_in, const
std::vector< std::string > &s_out, const Function::AuxOut
&aux=Function::AuxOut()) "

[INTERNAL]  Create an oracle function

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")
casadi::ImplicitFixedStepIntegrator::ImplicitFixedStepIntegrator(const
std::string &name, const Function &dae) "

[INTERNAL]  Constructor.

";


// File: classcasadi_1_1ImplicitToNlp.xml
%feature("docstring")  casadi::OracleFunction::create_function(const
std::string &fname, const std::vector< std::string > &s_in, const
std::vector< std::string > &s_out, const Function::AuxOut
&aux=Function::AuxOut()) "

[INTERNAL]  Create an oracle function

";

%feature("docstring")  casadi::OracleFunction::print_fstats(const
OracleMemory *m) const  "

[INTERNAL]  Print statistics.

";

%feature("docstring") casadi::ImplicitToNlp::ImplicitToNlp(const std::string
&name, const Function &f) "

[INTERNAL]  Constructor.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::matching_res(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

";

%feature("docstring")  casadi::FunctionInternal::sx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::get_default_in(int ind)
const  "

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::Rootfinder::has_spfwd() const override "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M > > &fseed) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::ImplicitToNlp::solve(void *mem) const
override "

[INTERNAL]   Solve the system of equations and calculate derivatives.

";

%feature("docstring")  casadi::ImplicitToNlp::get_options() const override "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const std::vector<
Matrix< D > > &arg, std::vector< Matrix< D > > &res, bool always_inline,
bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::replace_res(const
std::vector< M > &res) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::has_derivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn, const std::string &fname, bool jit=false) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::Rootfinder::sp_forward(const bvec_t **arg,
bvec_t **res, int *iw, bvec_t *w, void *mem) const override "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::disp(std::ostream &stream,
bool more) const override "

[INTERNAL]  Display object.

";

%feature("docstring")  casadi::Rootfinder::ad_forward(const std::vector< MX
> &arg, const std::vector< MX > &res, const std::vector< std::vector< MX > >
&fseed, std::vector< std::vector< MX > > &fsens, bool always_inline, bool
never_inline) const  "

[INTERNAL]  Create call to (cached) derivative function, forward mode.

";

%feature("docstring") casadi::ImplicitToNlp "

'nlp' plugin for Rootfinder

Use an Nlpsol as Rootfinder solver

>List of available options

+----------------+-----------+---------------------------------+
|       Id       |   Type    |           Description           |
+================+===========+=================================+
| nlpsol         | OT_STRING | Name of solver.                 |
+----------------+-----------+---------------------------------+
| nlpsol_options | OT_DICT   | Options to be passed to solver. |
+----------------+-----------+---------------------------------+

Joris Gillis

>List of available options

+-------------------+--------------+-------------------+-------------------+
|        Id         |     Type     |    Description    |      Used in      |
+===================+==============+===================+===================+
| constraints       | OT_INTVECTOR | Constrain the     | casadi::Rootfinde |
|                   |              | unknowns. 0       | r                 |
|                   |              | (default): no     |                   |
|                   |              | constraint on ui, |                   |
|                   |              | 1: ui >= 0.0, -1: |                   |
|                   |              | ui <= 0.0, 2: ui  |                   |
|                   |              | > 0.0, -2: ui <   |                   |
|                   |              | 0.0.              |                   |
+-------------------+--------------+-------------------+-------------------+
| implicit_input    | OT_INT       | Index of the      | casadi::Rootfinde |
|                   |              | input that        | r                 |
|                   |              | corresponds to    |                   |
|                   |              | the actual root-  |                   |
|                   |              | finding           |                   |
+-------------------+--------------+-------------------+-------------------+
| implicit_output   | OT_INT       | Index of the      | casadi::Rootfinde |
|                   |              | output that       | r                 |
|                   |              | corresponds to    |                   |
|                   |              | the actual root-  |                   |
|                   |              | finding           |                   |
+-------------------+--------------+-------------------+-------------------+
| jacobian_function | OT_FUNCTION  | Function object   | casadi::Rootfinde |
|                   |              | for calculating   | r                 |
|                   |              | the Jacobian      |                   |
|                   |              | (autogenerated by |                   |
|                   |              | default)          |                   |
+-------------------+--------------+-------------------+-------------------+
| linear_solver     | OT_STRING    | User-defined      | casadi::Rootfinde |
|                   |              | linear solver     | r                 |
|                   |              | class. Needed for |                   |
|                   |              | sensitivities.    |                   |
+-------------------+--------------+-------------------+-------------------+
| linear_solver_opt | OT_DICT      | Options to be     | casadi::Rootfinde |
| ions              |              | passed to the     | r                 |
|                   |              | linear solver.    |                   |
+-------------------+--------------+-------------------+-------------------+
| nlpsol            | OT_STRING    | Name of solver.   | casadi::ImplicitT |
|                   |              |                   | oNlp              |
+-------------------+--------------+-------------------+-------------------+
| nlpsol_options    | OT_DICT      | Options to be     | casadi::ImplicitT |
|                   |              | passed to solver. | oNlp              |
+-------------------+--------------+-------------------+-------------------+

Diagrams
--------



C++ includes: implicit_to_nlp.hpp ";

%feature("docstring")  casadi::Rootfinder::has_reverse(int nadj) const
override "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::FunctionInternal::codegen_body(CodeGenerator
&g) const  "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring")  casadi::FunctionInternal::get_reltol() const  "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring")  casadi::FunctionInternal::check_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

";

%feature("docstring")  casadi::OracleFunction::jit_dependencies(const
std::string &fname) override "

[INTERNAL]  JIT for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::FunctionInternal::get_free() const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(int iind, int
oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::Rootfinder::get_name_in(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::Rootfinder::init_mem(void *mem) const
override "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::FunctionInternal::info() const  "

[INTERNAL]  Obtain information about function

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::replace_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring")  casadi::ImplicitToNlp::init(const Dict &opts)
override "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const double
**arg, double **res, int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const SXElem
**arg, SXElem **res, int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const bvec_t
**arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::ImplicitToNlp::class_name() const override "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(int nadj,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::ImplicitToNlp::~ImplicitToNlp "

[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::size_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::Rootfinder::get_n_out() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::Rootfinder::get_forward(int nfwd, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const override "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInput(int k) const
"

[DEPRECATED] Renamed instruction_index

";

%feature("docstring")  casadi::FunctionInternal::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::size_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::Rootfinder::has_forward(int nfwd) const
override "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::FunctionInternal::check_res(const
std::vector< M > &res) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

";

%feature("docstring")  casadi::OracleFunction::calc_function(OracleMemory
*m, const std::string &fcn, const double *const *arg=0) const  "

[INTERNAL] ";

%feature("docstring")  casadi::ImplicitToNlp::set_work(void *mem, const
double **&arg, double **&res, int *&iw, double *&w) const override "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::get_abstol() const  "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring")  casadi::FunctionInternal::definition() const  "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring")  casadi::ImplicitToNlp::plugin_name() const override "

[INTERNAL] ";

%feature("docstring")
casadi::FunctionInternal::codegen_declarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::Rootfinder::has_sprev() const override "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::size1_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::Rootfinder::sp_reverse(bvec_t **arg, bvec_t
**res, int *iw, bvec_t *w, void *mem) const override "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::disp_more(std::ostream
&stream) const  "

[INTERNAL]  Print more.

";

%feature("docstring")  casadi::Rootfinder::get_reverse(int nadj, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const override "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::OracleFunction::set_temp(void *mem, const
double **arg, double **res, int *iw, double *w) const override "

[INTERNAL]  Set the work vectors.

";

%feature("docstring")  casadi::FunctionInternal::instruction_id(int k) const
"

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::Rootfinder::eval(const double **arg, double
**res, int *iw, double *w, void *mem) const override "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::eval_dm(const std::vector<
DM > &arg) const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< int > &order_in, const std::vector< int >
&order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::FunctionInternal::get_max_in(int ind) const
"

[INTERNAL]  Get largest input value.

";

%feature("docstring")  casadi::FunctionInternal::all_scalar() const  "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")  casadi::FunctionInternal::fwd_seed(int nfwd) const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M > > &aseed) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOutput(int k)
const  "

[DEPRECATED] Renamed instruction_output

";

%feature("docstring")  casadi::FunctionInternal::matching_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::instruction_input(int k)
const  "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::OracleFunction::has_function(const
std::string &fname) const override "

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::Rootfinder::get_sparsity_in(int i) override "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::OracleFunction::monitored(const std::string
&name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian(const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::codegen_meta(CodeGenerator
&g) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::symbolic_output(const
std::vector< MX > &arg) const  "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(int iind,
int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::OracleFunction::get_function() const override
"

[INTERNAL] ";

%feature("docstring")  casadi::OracleFunction::get_function(const
std::string &name) const override "

[INTERNAL] ";

%feature("docstring")  casadi::OracleFunction::finalize(const Dict &opts)
override "

[INTERNAL]  Finalize initialization.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::Rootfinder::ad_reverse(const std::vector< MX
> &arg, const std::vector< MX > &res, const std::vector< std::vector< MX > >
&aseed, std::vector< std::vector< MX > > &asens, bool always_inline, bool
never_inline) const  "

[INTERNAL]  Create call to (cached) derivative function, reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::get_min_in(int ind) const
"

[INTERNAL]  Get smallest input value.

";

%feature("docstring")  casadi::ImplicitToNlp::alloc_mem() const override "

[INTERNAL]  Create memory block.

";

%feature("docstring")
casadi::FunctionInternal::codegen_sparsities(CodeGenerator &g) const  "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(int nfwd) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::reverse(int nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::instruction_MX(int k) const
"

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring")  casadi::FunctionInternal::size2_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::get_partition(int iind, int
oind, Sparsity &D1, Sparsity &D2, bool compact, bool symmetric, bool
allow_forward, bool allow_reverse) const  "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::codegen(CodeGenerator &g,
const std::string &fname) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::Rootfinder::get_sparsity_out(int i) override
"

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::forward(int nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::export_code(const
std::string &lang, std::ostream &stream, const Dict &options) const  "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, int order, bool
tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::n_instructions() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::OracleFunction::generate_dependencies(const
std::string &fname, const Dict &opts) const override "

[INTERNAL]  Export / Generate C code for the generated functions.

";

%feature("docstring")  casadi::Rootfinder::get_name_out(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::OracleFunction::expand() "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::instruction_constant(int k)
const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::OracleFunction::get_stats(void *mem) const
override "

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(int nadj) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::instruction_output(int k)
const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::Rootfinder::get_n_in() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::OracleFunction::oracle() const override "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::Rootfinder::uses_output() const override "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::ImplicitToNlp::free_mem(void *mem) const
override "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsityGen(int iind,
int oind, bool symmetric, int gr_i=1, int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";


// File: classcasadi_1_1Importer.xml
%feature("docstring")  casadi::SharedObject::get_str(bool more=false) const
"

Get string representation.

";

%feature("docstring")  casadi::Importer::body(const std::string &symname)
const  "

Get the function body, if inlined.

";

%feature("docstring")  casadi::SharedObject::class_name() const  "

Get class name.

";

%feature("docstring")  casadi::SharedObject::print_ptr(std::ostream
&stream=casadi::uout()) const  "

[INTERNAL]  Print the pointer to the internal class

";

%feature("docstring")  casadi::Importer::has_meta(const std::string &cmd,
int ind=-1) const  "

Does a meta entry exist?

";

%feature("docstring")  casadi::SharedObject::disp(std::ostream &stream, bool
more=false) const  "

Print a description of the object.

";

%feature("docstring") casadi::Importer "

Importer.

Just-in-time compilation of code

General information
===================



List of plugins
===============



- clang

- shell

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
Importer.doc(\"myextraplugin\")



--------------------------------------------------------------------------------

clang
-----



Interface to the JIT compiler CLANG

>List of available options

+--------------+-----------------+-----------------------------------------+
|      Id      |      Type       |               Description               |
+==============+=================+=========================================+
| flags        | OT_STRINGVECTOR | Compile flags for the JIT compiler.     |
|              |                 | Default: None                           |
+--------------+-----------------+-----------------------------------------+
| include_path | OT_STRING       | Include paths for the JIT compiler. The |
|              |                 | include directory shipped with CasADi   |
|              |                 | will be automatically appended.         |
+--------------+-----------------+-----------------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

shell
-----



Interface to the JIT compiler SHELL

>List of available options

+----------------------+-----------------+---------------------------------+
|          Id          |      Type       |           Description           |
+======================+=================+=================================+
| cleanup              | OT_BOOL         | Cleanup temporary files when    |
|                      |                 | unloading. Default: true        |
+----------------------+-----------------+---------------------------------+
| compiler             | OT_STRING       | Compiler command                |
+----------------------+-----------------+---------------------------------+
| compiler_flags       | OT_STRINGVECTOR | Alias for 'compiler_flags'      |
+----------------------+-----------------+---------------------------------+
| compiler_output_flag | OT_STRING       | Compiler flag to denote object  |
|                      |                 | output. Default: '-o '          |
+----------------------+-----------------+---------------------------------+
| compiler_setup       | OT_STRING       | Compiler setup command.         |
|                      |                 | Intended to be fixed. The       |
|                      |                 | 'flag' option is the prefered   |
|                      |                 | way to set custom flags.        |
+----------------------+-----------------+---------------------------------+
| flags                | OT_STRINGVECTOR | Compile flags for the JIT       |
|                      |                 | compiler. Default: None         |
+----------------------+-----------------+---------------------------------+
| folder               | OT_STRING       | Folder to put temporary objects |
|                      |                 | in.                             |
+----------------------+-----------------+---------------------------------+
| linker               | OT_STRING       | Linker command                  |
+----------------------+-----------------+---------------------------------+
| linker_flags         | OT_STRINGVECTOR | Linker flags for the JIT        |
|                      |                 | compiler. Default: None         |
+----------------------+-----------------+---------------------------------+
| linker_output_flag   | OT_STRING       | Linker flag to denote shared    |
|                      |                 | library output. Default: '-o '  |
+----------------------+-----------------+---------------------------------+
| linker_setup         | OT_STRING       | Linker setup command. Intended  |
|                      |                 | to be fixed. The 'flag' option  |
|                      |                 | is the prefered way to set      |
|                      |                 | custom flags.                   |
+----------------------+-----------------+---------------------------------+

--------------------------------------------------------------------------------



Joris Gillis

C++ includes: importer.hpp ";

%feature("docstring")  casadi::Importer::plugin_name() const  "

Query plugin name.

";

%feature("docstring")  casadi::Importer::has_function(const std::string
&symname) const  "

";

%feature("docstring") casadi::Importer::Importer() "

Default constructor.

";

%feature("docstring") casadi::Importer::Importer(const std::string &name,
const std::string &compiler, const Dict &opts=Dict()) "

Importer factory.

";

%feature("docstring")  casadi::SharedObject::is_null() const  "

Is a null pointer?

";

%feature("docstring")  casadi::Importer::get_meta(const std::string &cmd,
int ind=-1) const  "

Get entry as a text.

";

%feature("docstring") casadi::Importer::__hash__ "

Returns a number that is unique for a given Node. If the Object does not
point to any node, \"0\" is returned.

";

%feature("docstring")  casadi::Importer::inlined(const std::string &symname)
const  "

Check if a function is inlined.

";


// File: classcasadi_1_1InfSX.xml


// File: classcasadi_1_1Input.xml


// File: classcasadi_1_1IntegerSX.xml


// File: classcasadi_1_1Integrator.xml
%feature("docstring")  casadi::OracleFunction::has_function(const
std::string &fname) const override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::matching_res(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::size_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring")  casadi::FunctionInternal::symbolic_output(const
std::vector< MX > &arg) const  "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn, const std::string &fname, bool jit=false) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M > > &aseed) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::Integrator::aug_fwd(int nfwd) const  "

[INTERNAL]  Generate a augmented DAE system with nfwd forward sensitivities.

";

%feature("docstring")
casadi::FunctionInternal::codegen_declarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::Integrator::z() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::x() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::Integrator::q() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::p() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::t() const  "

[INTERNAL] ";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(int nadj) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::OracleFunction::calc_function(OracleMemory
*m, const std::string &fcn, const double *const *arg=0) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::codegen(CodeGenerator &g,
const std::string &fname) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::Integrator::sp_jac_dae() "

[INTERNAL]  Create sparsity pattern of the extended Jacobian (forward
problem)

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::n_instructions() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::reverse(int nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(int iind, int
oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")
casadi::FunctionInternal::codegen_sparsities(CodeGenerator &g) const  "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::OracleFunction::generate_dependencies(const
std::string &fname, const Dict &opts) const override "

[INTERNAL]  Export / Generate C code for the generated functions.

";

%feature("docstring")  casadi::OracleFunction::create_function(const
std::string &fname, const std::vector< std::string > &s_in, const
std::vector< std::string > &s_out, const Function::AuxOut
&aux=Function::AuxOut()) "

[INTERNAL]  Create an oracle function

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsityGen(int iind,
int oind, bool symmetric, int gr_i=1, int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::Integrator::resetB(IntegratorMemory *mem,
double t, const double *rx, const double *rz, const double *rp) const  "

[INTERNAL]  Reset the backward problem.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::Integrator::init_mem(void *mem) const
override "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::Integrator::get_n_out() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::check_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

";

%feature("docstring")  casadi::FunctionInternal::instruction_id(int k) const
"

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::get_abstol() const  "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring")  casadi::FunctionInternal::get_free() const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::Integrator::sp_reverse(bvec_t **arg, bvec_t
**res, int *iw, bvec_t *w, void *mem) const override "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::FunctionInternal::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")  casadi::FunctionInternal::eval_dm(const std::vector<
DM > &arg) const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::Integrator::Integrator(const std::string
&name, const Function &oracle) "

[INTERNAL]  Constructor.

";

%feature("docstring")  casadi::OracleFunction::jit_dependencies(const
std::string &fname) override "

[INTERNAL]  JIT for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::Integrator::has_sprev() const override "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(int iind,
int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::codegen_body(CodeGenerator
&g) const  "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian(const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInput(int k) const
"

[DEPRECATED] Renamed instruction_index

";

%feature("docstring")  casadi::Integrator::advance(IntegratorMemory *mem,
double t, double *x, double *z, double *q) const  "

[INTERNAL]  Advance solution in time.

";

%feature("docstring")  casadi::Integrator::retreat(IntegratorMemory *mem,
double t, double *rx, double *rz, double *rq) const  "

[INTERNAL]  Retreat solution in time.

";

%feature("docstring")  casadi::Integrator::has_reverse(int nadj) const
override "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::FunctionInternal::matching_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

";

%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::get_default_in(int ind)
const  "

[INTERNAL]  Get default input value.

";

%feature("docstring") casadi::Integrator "

Internal storage for integrator related data.

Joel Andersson

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| augmented_option | OT_DICT         | Options to be    | casadi::Integrat |
| s                |                 | passed down to   | or               |
|                  |                 | the augmented    |                  |
|                  |                 | integrator, if   |                  |
|                  |                 | one is           |                  |
|                  |                 | constructed.     |                  |
+------------------+-----------------+------------------+------------------+
| common_options   | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | auto-generated   | nction           |
|                  |                 | functions        |                  |
+------------------+-----------------+------------------+------------------+
| expand           | OT_BOOL         | Replace MX with  | casadi::Integrat |
|                  |                 | SX expressions   | or               |
|                  |                 | in problem       |                  |
|                  |                 | formulation      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| grid             | OT_DOUBLEVECTOR | Time grid        | casadi::Integrat |
|                  |                 |                  | or               |
+------------------+-----------------+------------------+------------------+
| monitor          | OT_STRINGVECTOR | Set of user      | casadi::OracleFu |
|                  |                 | problem          | nction           |
|                  |                 | functions to be  |                  |
|                  |                 | monitored        |                  |
+------------------+-----------------+------------------+------------------+
| number_of_finite | OT_INT          | Number of finite | casadi::Integrat |
| _elements        |                 | elements         | or               |
+------------------+-----------------+------------------+------------------+
| output_t0        | OT_BOOL         | Output the state | casadi::Integrat |
|                  |                 | at the initial   | or               |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| print_stats      | OT_BOOL         | Print out        | casadi::Integrat |
|                  |                 | statistics after | or               |
|                  |                 | integration      |                  |
+------------------+-----------------+------------------+------------------+
| rootfinder       | OT_STRING       | An implicit      | casadi::Integrat |
|                  |                 | function solver  | or               |
+------------------+-----------------+------------------+------------------+
| rootfinder_optio | OT_DICT         | Options to be    | casadi::Integrat |
| ns               |                 | passed to the    | or               |
|                  |                 | NLP Solver       |                  |
+------------------+-----------------+------------------+------------------+
| specific_options | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | specific auto-   | nction           |
|                  |                 | generated        |                  |
|                  |                 | functions,       |                  |
|                  |                 | overwriting the  |                  |
|                  |                 | defaults from    |                  |
|                  |                 | common_options.  |                  |
|                  |                 | Nested           |                  |
|                  |                 | dictionary.      |                  |
+------------------+-----------------+------------------+------------------+
| t0               | OT_DOUBLE       | Beginning of the | casadi::Integrat |
|                  |                 | time horizon     | or               |
+------------------+-----------------+------------------+------------------+
| tf               | OT_DOUBLE       | End of the time  | casadi::Integrat |
|                  |                 | horizon          | or               |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: integrator_impl.hpp ";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(int nadj,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::Integrator::setStopTime(IntegratorMemory
*mem, double tf) const  "

[INTERNAL]  Set stop time for the integration.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::all_scalar() const  "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")  casadi::Integrator::has_spfwd() const override "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::OracleFunction::print_fstats(const
OracleMemory *m) const  "

[INTERNAL]  Print statistics.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOutput(int k)
const  "

[DEPRECATED] Renamed instruction_output

";

%feature("docstring")  casadi::OracleFunction::set_temp(void *mem, const
double **arg, double **res, int *iw, double *w) const override "

[INTERNAL]  Set the work vectors.

";

%feature("docstring")  casadi::FunctionInternal::instruction_output(int k)
const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::instruction_constant(int k)
const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::has_derivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::size_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::Integrator::getDerivativeOptions(bool fwd)
const  "

[INTERNAL]  Set solver specific options to generated augmented integrators.

";

%feature("docstring")  casadi::FunctionInternal::instruction_MX(int k) const
"

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring")  casadi::SharedObjectInternal::class_name() const  "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::Integrator::sp_jac_rdae() "

[INTERNAL]  Create sparsity pattern of the extended Jacobian (backward
problem)

";

%feature("docstring")  casadi::FunctionInternal::numel_out(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::get_max_in(int ind) const
"

[INTERNAL]  Get largest input value.

";

%feature("docstring")  casadi::FunctionInternal::codegen_meta(CodeGenerator
&g) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::Integrator::get_name_in(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::Integrator::get_n_in() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::forward(int nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::fwd_seed(int nfwd) const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const double
**arg, double **res, int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const SXElem
**arg, SXElem **res, int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const bvec_t
**arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::replace_res(const
std::vector< M > &res) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::Integrator::aug_adj(int nadj) const  "

[INTERNAL]  Generate a augmented DAE system with nadj adjoint sensitivities.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::instruction_input(int k)
const  "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M > > &fseed) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::OracleFunction::alloc_mem() const override "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::FunctionInternal::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::FunctionInternal::get_partition(int iind, int
oind, Sparsity &D1, Sparsity &D2, bool compact, bool symmetric, bool
allow_forward, bool allow_reverse) const  "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::Integrator::get_sparsity_out(int i) override
"

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::disp(std::ostream &stream,
bool more) const override "

[INTERNAL]  Display object.

";

%feature("docstring") casadi::Integrator::~Integrator "

[INTERNAL]  Destructor.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::Integrator::print_stats(IntegratorMemory
*mem) const  "

[INTERNAL]  Print solver statistics.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::export_code(const
std::string &lang, std::ostream &stream, const Dict &options) const  "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring")  casadi::Integrator::eval(const double **arg, double
**res, int *iw, double *w, void *mem) const override "

[INTERNAL]  evaluate

";

%feature("docstring")  casadi::FunctionInternal::size2_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::PluginInterface< Integrator  >::plugin_name()
const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::get_sparsity_in(int i) override "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::OracleFunction::oracle() const override "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::Integrator::has_forward(int nfwd) const
override "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const std::vector<
Matrix< D > > &arg, std::vector< Matrix< D > > &res, bool always_inline,
bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::info() const  "

[INTERNAL]  Obtain information about function

";

%feature("docstring")  casadi::FunctionInternal::check_res(const
std::vector< M > &res) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< int > &order_in, const std::vector< int >
&order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::OracleFunction::finalize(const Dict &opts)
override "

[INTERNAL]  Finalize initialization.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::definition() const  "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::OracleFunction::free_mem(void *mem) const
override "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::sx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::uses_output() const  "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring")  casadi::Integrator::get_options() const override "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::FunctionInternal::get_reltol() const  "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::OracleFunction::get_function() const override
"

[INTERNAL] ";

%feature("docstring")  casadi::OracleFunction::get_function(const
std::string &name) const override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::Integrator::get_forward(int nfwd, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const override "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(int nfwd) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, int order, bool
tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::Integrator::get_name_out(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::Integrator::reset(IntegratorMemory *mem,
double t, const double *x, const double *z, const double *p) const  "

[INTERNAL]  Reset the forward problem.

";

%feature("docstring")  casadi::OracleFunction::expand() "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::get_reverse(int nadj, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const override "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::FunctionInternal::disp_more(std::ostream
&stream) const  "

[INTERNAL]  Print more.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::Integrator::rp() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::rq() const  "

[INTERNAL] ";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::OracleFunction::monitored(const std::string
&name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::rz() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::rx() const  "

[INTERNAL] ";

%feature("docstring")  casadi::OracleFunction::get_stats(void *mem) const
override "

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::FunctionInternal::get_min_in(int ind) const
"

[INTERNAL]  Get smallest input value.

";

%feature("docstring")  casadi::Integrator::init(const Dict &opts) override "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::FunctionInternal::replace_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::Integrator::sp_forward(const bvec_t **arg,
bvec_t **res, int *iw, bvec_t *w, void *mem) const override "

[INTERNAL]  Propagate sparsity forward.

";


// File: classcasadi_1_1Interpolant.xml
%feature("docstring")  casadi::FunctionInternal::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")
casadi::FunctionInternal::codegen_declarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::get_reltol() const  "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian(const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::get_function() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::matching_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::instruction_input(int k)
const  "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::Interpolant::get_sparsity_in(int i) override
"

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::codegen_meta(CodeGenerator
&g) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::ProtoFunction::alloc_mem() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::FunctionInternal::disp_more(std::ostream
&stream) const  "

[INTERNAL]  Print more.

";

%feature("docstring")  casadi::FunctionInternal::get_options() const
override "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::FunctionInternal::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::symbolic_output(const
std::vector< MX > &arg) const  "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")
casadi::FunctionInternal::codegen_sparsities(CodeGenerator &g) const  "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring")  casadi::FunctionInternal::get_min_in(int ind) const
"

[INTERNAL]  Get smallest input value.

";

%feature("docstring")  casadi::FunctionInternal::instruction_MX(int k) const
"

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::finalize(const Dict &opts)
override "

[INTERNAL]  Finalize the object creation.

";

%feature("docstring")  casadi::FunctionInternal::get_reverse(int nadj, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::replace_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring")  casadi::Interpolant::get_sparsity_out(int i) override
"

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::FunctionInternal::all_scalar() const  "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(int iind,
int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::reverse(int nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::get_forward(int nfwd, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInput(int k) const
"

[DEPRECATED] Renamed instruction_index

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::check_res(const
std::vector< M > &res) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOutput(int k)
const  "

[DEPRECATED] Renamed instruction_output

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(int nadj) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::Interpolant::get_n_in() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::Interpolant::get_name_in(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_default_in(int ind)
const  "

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::export_code(const
std::string &lang, std::ostream &stream, const Dict &options) const  "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring")  casadi::FunctionInternal::n_instructions() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::sp_forward(const bvec_t
**arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::FunctionInternal::info() const  "

[INTERNAL]  Obtain information about function

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::get_max_in(int ind) const
"

[INTERNAL]  Get largest input value.

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::set_temp(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsityGen(int iind,
int oind, bool symmetric, int gr_i=1, int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M > > &fseed) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::instruction_output(int k)
const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::codegen(CodeGenerator &g,
const std::string &fname) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(int nfwd) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::Interpolant::get_n_out() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::has_reverse(int nadj) const
"

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(int iind, int
oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::instruction_constant(int k)
const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::size_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::has_forward(int nfwd) const
"

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::matching_res(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

";

%feature("docstring")  casadi::FunctionInternal::jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::ProtoFunction::init_mem(void *mem) const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::ProtoFunction::free_mem(void *mem) const  "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::eval(const double **arg,
double **res, int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::fwd_seed(int nfwd) const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FunctionInternal::check_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

";

%feature("docstring") casadi::Interpolant "

[INTERNAL]  Internal class

C++ includes: interpolant_impl.hpp ";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::sx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< int > &order_in, const std::vector< int >
&order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::FunctionInternal::size_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::forward(int nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, int order, bool
tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::replace_res(const
std::vector< M > &res) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::eval_dm(const std::vector<
DM > &arg) const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::FunctionInternal::sp_reverse(bvec_t **arg,
bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring") casadi::Interpolant::Interpolant(const std::string
&name, const std::vector< double > &grid, const std::vector< int > &offset,
const std::vector< double > &values) "

[INTERNAL]  Constructor.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const std::vector<
Matrix< D > > &arg, std::vector< Matrix< D > > &res, bool always_inline,
bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring") casadi::Interpolant::~Interpolant "

[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::FunctionInternal::codegen_body(CodeGenerator
&g) const  "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring")  casadi::SharedObjectInternal::class_name() const  "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(int nadj,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FunctionInternal::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")  casadi::FunctionInternal::definition() const  "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::get_abstol() const  "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring")  casadi::FunctionInternal::jit_dependencies(const
std::string &fname) "

[INTERNAL]  Jit dependencies.

";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::FunctionInternal::get_stats(void *mem) const
"

[INTERNAL]  Get all statistics.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::init(const Dict &opts)
override "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::FunctionInternal::get_partition(int iind, int
oind, Sparsity &D1, Sparsity &D2, bool compact, bool symmetric, bool
allow_forward, bool allow_reverse) const  "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::FunctionInternal::get_free() const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::FunctionInternal::instruction_id(int k) const
"

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring")  casadi::FunctionInternal::uses_output() const  "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring")  casadi::FunctionInternal::has_derivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::disp(std::ostream &stream,
bool more) const override "

[INTERNAL]  Display object.

";

%feature("docstring")  casadi::Interpolant::get_name_out(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::PluginInterface< Interpolant
>::plugin_name() const  "

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const double
**arg, double **res, int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const SXElem
**arg, SXElem **res, int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const bvec_t
**arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M > > &aseed) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";


// File: classcasadi_1_1InterruptHandler.xml
%feature("docstring") casadi::InterruptHandler "

[INTERNAL]  Takes care of user interrupts (Ctrl+C)

This is an internal class.

Joris Gillis

C++ includes: casadi_interrupt.hpp ";


// File: classcasadi_1_1Inverse.xml


// File: classcasadi_1_1IOInstruction.xml


// File: classcasadi_1_1IpoptUserClass.xml
%feature("docstring")  casadi::IpoptUserClass::get_starting_point(Index n,
bool init_x, Number *x, bool init_z, Number *z_L, Number *z_U, Index m, bool
init_lambda, Number *lambda) override "

[INTERNAL]  Method to return the starting point for the algorithm

";

%feature("docstring")
casadi::IpoptUserClass::finalize_solution(SolverReturn status, Index n,
const Number *x, const Number *z_L, const Number *z_U, Index m, const Number
*g, const Number *lambda, Number obj_value, const IpoptData *ip_data,
IpoptCalculatedQuantities *ip_cq) override "

[INTERNAL]  This method is called when the algorithm is complete so the TNLP
can store/write the solution

";

%feature("docstring") casadi::IpoptUserClass "

[INTERNAL] C++ includes: ipopt_nlp.hpp ";

%feature("docstring")
casadi::IpoptUserClass::get_list_of_nonlinear_variables(Index
num_nonlin_vars, Index *pos_nonlin_vars) override "

[INTERNAL]  Specify which variables that appear in the Hessian

";

%feature("docstring")  casadi::IpoptUserClass::eval_grad_f(Index n, const
Number *x, bool new_x, Number *grad_f) override "

[INTERNAL]  Method to return the gradient of the objective

";

%feature("docstring")  casadi::IpoptUserClass::get_var_con_metadata(Index n,
StringMetaDataMapType &var_string_md, IntegerMetaDataMapType
&var_integer_md, NumericMetaDataMapType &var_numeric_md, Index m,
StringMetaDataMapType &con_string_md, IntegerMetaDataMapType
&con_integer_md, NumericMetaDataMapType &con_numeric_md) override "

[INTERNAL]  Allows setting information about variables and constraints

";

%feature("docstring") casadi::IpoptUserClass::~IpoptUserClass "

[INTERNAL] ";

%feature("docstring")  casadi::IpoptUserClass::eval_g(Index n, const Number
*x, bool new_x, Index m, Number *g) override "

[INTERNAL]  Method to return the constraint residuals

";

%feature("docstring")  casadi::IpoptUserClass::get_nlp_info(Index &n, Index
&m, Index &nnz_jac_g, Index &nnz_h_lag, IndexStyleEnum &index_style)
override "

[INTERNAL]  Method to return some info about the nlp

";

%feature("docstring")  casadi::IpoptUserClass::eval_f(Index n, const Number
*x, bool new_x, Number &obj_value) override "

[INTERNAL]  Method to return the objective value

";

%feature("docstring")
casadi::IpoptUserClass::get_number_of_nonlinear_variables() override "

[INTERNAL]  Specify the number of variables that appear in the Hessian

";

%feature("docstring")  casadi::IpoptUserClass::eval_jac_g(Index n, const
Number *x, bool new_x, Index m, Index nele_jac, Index *iRow, Index *jCol,
Number *values) override "

[INTERNAL]  Method to return: 1) The structure of the Jacobian (if
\"values\" is NULL) 2) The values of the Jacobian (if \"values\" is not
NULL)

";

%feature("docstring")  casadi::IpoptUserClass::finalize_metadata(Index n,
const StringMetaDataMapType &var_string_md, const IntegerMetaDataMapType
&var_integer_md, const NumericMetaDataMapType &var_numeric_md, Index m,
const StringMetaDataMapType &con_string_md, const IntegerMetaDataMapType
&con_integer_md, const NumericMetaDataMapType &con_numeric_md) override "

[INTERNAL]  Retrieve information about variables and constraints

";

%feature("docstring")  casadi::IpoptUserClass::get_bounds_info(Index n,
Number *x_l, Number *x_u, Index m, Number *g_l, Number *g_u) override "

[INTERNAL]  Method to return the bounds for my problem

";

%feature("docstring")  casadi::IpoptUserClass::eval_h(Index n, const Number
*x, bool new_x, Number obj_factor, Index m, const Number *lambda, bool
new_lambda, Index nele_hess, Index *iRow, Index *jCol, Number *values)
override "

[INTERNAL]  Method to return: 1) The structure of the hessian of the
Lagrangian (if \"values\" is NULL) 2) The values of the hessian of the
Lagrangian (if \"values\" is not NULL)

";

%feature("docstring")
casadi::IpoptUserClass::intermediate_callback(AlgorithmMode mode, Index
iter, Number obj_value, Number inf_pr, Number inf_du, Number mu, Number
d_norm, Number regularization_size, Number alpha_du, Number alpha_pr, Index
ls_trials, const IpoptData *ip_data, IpoptCalculatedQuantities *ip_cq)
override "

[INTERNAL]  This method is called at every iteration

";

%feature("docstring") casadi::IpoptUserClass::IpoptUserClass(const
IpoptInterface &ipoptInterface, IpoptMemory *mem) "

[INTERNAL] ";


// File: classcasadi_1_1JitFunction.xml
%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::instruction_MX(int k) const
"

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring")  casadi::FunctionInternal::get_name_out(int i) "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::sp_forward(const bvec_t
**arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::FunctionInternal::eval_dm(const std::vector<
DM > &arg) const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::JitFunction::get_n_in() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::check_res(const
std::vector< M > &res) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

";

%feature("docstring")  casadi::JitFunction::get_options() const override "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::FunctionInternal::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FunctionInternal::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::codegen(CodeGenerator &g,
const std::string &fname) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::FunctionInternal::symbolic_output(const
std::vector< MX > &arg) const  "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::FunctionInternal::fwd_seed(int nfwd) const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::eval(const double **arg,
double **res, int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring") casadi::JitFunction "

[INTERNAL]

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
+------------------+-----------------+------------------+------------------+
| buffered         | OT_BOOL         | Buffer the       | casadi::JitFunct |
|                  |                 | calls, user does | ion              |
|                  |                 | not need to      |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| enable_fd        | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation by   |                  |
|                  |                 | finite           |                  |
|                  |                 | differencing.    |                  |
|                  |                 | [default:        |                  |
|                  |                 | false]]          |                  |
+------------------+-----------------+------------------+------------------+
| enable_forward   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using forward    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_jacobian  | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobians of all |                  |
|                  |                 | differentiable   |                  |
|                  |                 | outputs with     |                  |
|                  |                 | respect to all   |                  |
|                  |                 | differentiable   |                  |
|                  |                 | inputs - if      |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_reverse   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | transposed       |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using reverse    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| fd_method        | OT_STRING       | Method for       | casadi::Function |
|                  |                 | finite           | Internal         |
|                  |                 | differencing     |                  |
|                  |                 | [default         |                  |
|                  |                 | 'central']       |                  |
+------------------+-----------------+------------------+------------------+
| fd_options       | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | finite           |                  |
|                  |                 | difference       |                  |
|                  |                 | instance         |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| hess             | OT_STRING       | Function body    | casadi::JitFunct |
|                  |                 | for Hessian      | ion              |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| jac              | OT_STRING       | Function body    | casadi::JitFunct |
|                  |                 | for Jacobian     | ion              |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: jit_function.hpp ";

%feature("docstring")  casadi::FunctionInternal::instruction_output(int k)
const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::JitFunction::has_codegen() const override "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::FunctionInternal::numel_out(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::get_free() const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::FunctionInternal::get_reltol() const  "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::FunctionInternal::has_derivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::get_stats(void *mem) const
"

[INTERNAL]  Get all statistics.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::FunctionInternal::jit_dependencies(const
std::string &fname) "

[INTERNAL]  Jit dependencies.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring") casadi::JitFunction::JitFunction(const std::string
&name, const std::string &body, const std::vector< std::string > &name_in,
const std::vector< std::string > &name_out, const std::vector< Sparsity >
&sparsity_in, const std::vector< Sparsity > &sparsity_out) "

[INTERNAL]  Constructor.

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::FunctionInternal::size_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::get_max_in(int ind) const
"

[INTERNAL]  Get largest input value.

";

%feature("docstring")  casadi::JitFunction::init(const Dict &opts) override
"

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::FunctionInternal::get_default_in(int ind)
const  "

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::ProtoFunction::alloc_mem() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::instruction_constant(int k)
const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::JitFunction::codegen_body(CodeGenerator &g)
const override "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring")  casadi::FunctionInternal::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::forward(int nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::uses_output() const  "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::has_reverse(int nadj) const
"

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::replace_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const std::vector<
Matrix< D > > &arg, std::vector< Matrix< D > > &res, bool always_inline,
bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(int nadj) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(int nadj,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(int nfwd) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const double
**arg, double **res, int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const SXElem
**arg, SXElem **res, int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const bvec_t
**arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::all_scalar() const  "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")  casadi::JitFunction::get_n_out() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::FunctionInternal::get_reverse(int nadj, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::disp(std::ostream &stream,
bool more) const override "

[INTERNAL]  Display object.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(int iind,
int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::JitFunction::has_jacobian() const override "

[INTERNAL]  Jacobian of all outputs with respect to all inputs.

";

%feature("docstring")  casadi::FunctionInternal::reverse(int nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::get_function() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::disp_more(std::ostream
&stream) const  "

[INTERNAL]  Print more.

";

%feature("docstring")
casadi::FunctionInternal::codegen_sparsities(CodeGenerator &g) const  "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::instruction_input(int k)
const  "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::JitFunction::class_name() const override "

[INTERNAL]  Get type name.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::get_partition(int iind, int
oind, Sparsity &D1, Sparsity &D2, bool compact, bool symmetric, bool
allow_forward, bool allow_reverse) const  "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(int iind, int
oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOutput(int k)
const  "

[DEPRECATED] Renamed instruction_output

";

%feature("docstring")  casadi::FunctionInternal::sx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::matching_res(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

";

%feature("docstring")  casadi::FunctionInternal::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")  casadi::ProtoFunction::init_mem(void *mem) const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::instruction_id(int k) const
"

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< int > &order_in, const std::vector< int >
&order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::FunctionInternal::n_instructions() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::has_forward(int nfwd) const
"

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::sp_reverse(bvec_t **arg,
bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::size_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, int order, bool
tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInput(int k) const
"

[DEPRECATED] Renamed instruction_index

";

%feature("docstring")  casadi::FunctionInternal::get_forward(int nfwd, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::codegen_meta(CodeGenerator
&g) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::get_name_in(int i) "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::definition() const  "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M > > &fseed) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::ProtoFunction::free_mem(void *mem) const  "

[INTERNAL]  Free memory block.

";

%feature("docstring") casadi::JitFunction::~JitFunction "

[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::FunctionInternal::get_abstol() const  "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring")
casadi::FunctionInternal::codegen_declarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::matching_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

";

%feature("docstring")  casadi::FunctionInternal::jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::replace_res(const
std::vector< M > &res) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::check_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

";

%feature("docstring")  casadi::FunctionInternal::set_temp(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::FunctionInternal::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::get_min_in(int ind) const
"

[INTERNAL]  Get smallest input value.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M > > &aseed) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::get_sparsity_in(int i) "

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::get_sparsity_out(int i) "

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::JitFunction::get_jacobian(const std::string
&name, const std::vector< std::string > &inames, const std::vector<
std::string > &onames, const Dict &opts) const override "

[INTERNAL]  Jacobian of all outputs with respect to all inputs.

";

%feature("docstring")  casadi::FunctionInternal::finalize(const Dict &opts)
override "

[INTERNAL]  Finalize the object creation.

";

%feature("docstring")  casadi::FunctionInternal::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsityGen(int iind,
int oind, bool symmetric, int gr_i=1, int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::info() const  "

[INTERNAL]  Obtain information about function

";

%feature("docstring")  casadi::FunctionInternal::export_code(const
std::string &lang, std::ostream &stream, const Dict &options) const  "

[INTERNAL]  Export function in a specific language.

";


// File: classcasadi_1_1KeyboardInterruptException.xml
%feature("docstring")  casadi::CasadiException::what() const override "

throw () Display error.

";

%feature("docstring")
casadi::KeyboardInterruptException::~KeyboardInterruptException "

throw () Destructor.

";

%feature("docstring")
casadi::KeyboardInterruptException::KeyboardInterruptException() "

Default constructor.

";

%feature("docstring") casadi::KeyboardInterruptException "

C++ includes: exception.hpp ";


// File: classcasadi_1_1LapackLu.xml
%feature("docstring")  casadi::LapackLu::nfact(void *mem, const double *A)
const override "

[INTERNAL]  Numeric factorization.

";

%feature("docstring")  casadi::LinsolInternal::nrow() const  "

[INTERNAL]  Get sparsity pattern.

";

%feature("docstring")  casadi::LapackLu::solve(void *mem, const double *A,
double *x, int nrhs, bool tr) const override "

[INTERNAL] ";

%feature("docstring")  casadi::LapackLu::init(const Dict &opts) override "

[INTERNAL]  Initialize the solver.

";

%feature("docstring") casadi::LapackLu::~LapackLu "

[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::LapackLu::init_mem(void *mem) const override
"

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::LinsolInternal::sfact(void *mem, const double
*A) const  "

[INTERNAL] ";

%feature("docstring")  casadi::LinsolInternal::generate(CodeGenerator &g,
const std::string &A, const std::string &x, int nrhs, bool tr) const  "

[INTERNAL]  Generate C code.

";

%feature("docstring")  casadi::LinsolInternal::linsol_eval_sx(const SXElem
**arg, SXElem **res, int *iw, SXElem *w, void *mem, bool tr, int nrhs) const
"

[INTERNAL]  Evaluate SX, possibly transposed.

";

%feature("docstring")  casadi::LinsolInternal::ncol() const  "

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring") casadi::LapackLu::LapackLu(const std::string &name,
const Sparsity &sp) "

[INTERNAL] ";

%feature("docstring")  casadi::LinsolInternal::disp(std::ostream &stream,
bool more) const override "

[INTERNAL]  Display object.

";

%feature("docstring")  casadi::LapackLu::free_mem(void *mem) const override
"

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::ProtoFunction::finalize(const Dict &opts) "

[INTERNAL]  Finalize the object creation This function, which visits the
class hierarchy in reverse order is run after init() has been completed.

";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::LinsolInternal::rank(void *mem, const double
*A) const  "

[INTERNAL]   Matrix rank.

";

%feature("docstring")  casadi::LinsolInternal::colind() const  "

[INTERNAL] ";

%feature("docstring")  casadi::LapackLu::alloc_mem() const override "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::LinsolInternal::nnz() const  "

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring") casadi::LapackLu "

'lapacklu' plugin for Linsol

This class solves the linear system A.x=b by making an LU factorization of
A: A = L.U, with L lower and U upper triangular

>List of available options

+-----------------------------+---------+----------------------------------+
|             Id              |  Type   |           Description            |
+=============================+=========+==================================+
| allow_equilibration_failure | OT_BOOL | Non-fatal error when             |
|                             |         | equilibration fails              |
+-----------------------------+---------+----------------------------------+
| equilibration               | OT_BOOL | Equilibrate the matrix           |
+-----------------------------+---------+----------------------------------+

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
+------------------+-----------------+------------------+------------------+
| allow_equilibrat | OT_BOOL         | Non-fatal error  | casadi::LapackLu |
| ion_failure      |                 | when             |                  |
|                  |                 | equilibration    |                  |
|                  |                 | fails            |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| enable_fd        | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation by   |                  |
|                  |                 | finite           |                  |
|                  |                 | differencing.    |                  |
|                  |                 | [default:        |                  |
|                  |                 | false]]          |                  |
+------------------+-----------------+------------------+------------------+
| enable_forward   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using forward    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_jacobian  | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobians of all |                  |
|                  |                 | differentiable   |                  |
|                  |                 | outputs with     |                  |
|                  |                 | respect to all   |                  |
|                  |                 | differentiable   |                  |
|                  |                 | inputs - if      |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_reverse   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | transposed       |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using reverse    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| equilibration    | OT_BOOL         | Equilibrate the  | casadi::LapackLu |
|                  |                 | matrix           |                  |
+------------------+-----------------+------------------+------------------+
| fd_method        | OT_STRING       | Method for       | casadi::Function |
|                  |                 | finite           | Internal         |
|                  |                 | differencing     |                  |
|                  |                 | [default         |                  |
|                  |                 | 'central']       |                  |
+------------------+-----------------+------------------+------------------+
| fd_options       | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | finite           |                  |
|                  |                 | difference       |                  |
|                  |                 | instance         |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: lapack_lu.hpp ";

%feature("docstring")  casadi::LinsolInternal::row() const  "

[INTERNAL] ";

%feature("docstring")  casadi::LapackLu::get_options() const override "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::LinsolInternal::disp_more(std::ostream
&stream) const  "

[INTERNAL]  Print more.

";

%feature("docstring")  casadi::LinsolInternal::neig(void *mem, const double
*A) const  "

[INTERNAL]  Number of negative eigenvalues.

";


// File: classcasadi_1_1LapackQr.xml
%feature("docstring")  casadi::LapackQr::get_options() const override "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::LapackQr::free_mem(void *mem) const override
"

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::LinsolInternal::sfact(void *mem, const double
*A) const  "

[INTERNAL] ";

%feature("docstring")  casadi::LapackQr::alloc_mem() const override "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::LinsolInternal::disp_more(std::ostream
&stream) const  "

[INTERNAL]  Print more.

";

%feature("docstring")  casadi::LinsolInternal::ncol() const  "

[INTERNAL] ";

%feature("docstring")  casadi::LinsolInternal::disp(std::ostream &stream,
bool more) const override "

[INTERNAL]  Display object.

";

%feature("docstring")  casadi::ProtoFunction::finalize(const Dict &opts) "

[INTERNAL]  Finalize the object creation This function, which visits the
class hierarchy in reverse order is run after init() has been completed.

";

%feature("docstring")  casadi::LapackQr::solve_batch(void *mem, const double
*A, double *x, int nrhs, bool tr) const  "

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::LinsolInternal::rank(void *mem, const double
*A) const  "

[INTERNAL]   Matrix rank.

";

%feature("docstring")  casadi::LinsolInternal::colind() const  "

[INTERNAL] ";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::LinsolInternal::nnz() const  "

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring") casadi::LapackQr "

'lapackqr' plugin for Linsol

This class solves the linear system A.x=b by making an QR factorization of
A: A = Q.R, with Q orthogonal and R upper triangular

>List of available options

+----------+--------+------------------------------------------------------+
|    Id    |  Type  |                     Description                      |
+==========+========+======================================================+
| max_nrhs | OT_INT | Maximum number of right-hand-sides that get          |
|          |        | processed in a single pass [default:10].             |
+----------+--------+------------------------------------------------------+

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| enable_fd        | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation by   |                  |
|                  |                 | finite           |                  |
|                  |                 | differencing.    |                  |
|                  |                 | [default:        |                  |
|                  |                 | false]]          |                  |
+------------------+-----------------+------------------+------------------+
| enable_forward   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using forward    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_jacobian  | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobians of all |                  |
|                  |                 | differentiable   |                  |
|                  |                 | outputs with     |                  |
|                  |                 | respect to all   |                  |
|                  |                 | differentiable   |                  |
|                  |                 | inputs - if      |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_reverse   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | transposed       |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using reverse    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| fd_method        | OT_STRING       | Method for       | casadi::Function |
|                  |                 | finite           | Internal         |
|                  |                 | differencing     |                  |
|                  |                 | [default         |                  |
|                  |                 | 'central']       |                  |
+------------------+-----------------+------------------+------------------+
| fd_options       | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | finite           |                  |
|                  |                 | difference       |                  |
|                  |                 | instance         |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| max_nrhs         | OT_INT          | Maximum number   | casadi::LapackQr |
|                  |                 | of right-hand-   |                  |
|                  |                 | sides that get   |                  |
|                  |                 | processed in a   |                  |
|                  |                 | single pass      |                  |
|                  |                 | [default:10].    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: lapack_qr.hpp ";

%feature("docstring")  casadi::LinsolInternal::row() const  "

[INTERNAL] ";

%feature("docstring")  casadi::LapackQr::init_mem(void *mem) const override
"

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::LinsolInternal::linsol_eval_sx(const SXElem
**arg, SXElem **res, int *iw, SXElem *w, void *mem, bool tr, int nrhs) const
"

[INTERNAL]  Evaluate SX, possibly transposed.

";

%feature("docstring")  casadi::LinsolInternal::neig(void *mem, const double
*A) const  "

[INTERNAL]  Number of negative eigenvalues.

";

%feature("docstring")  casadi::LinsolInternal::generate(CodeGenerator &g,
const std::string &A, const std::string &x, int nrhs, bool tr) const  "

[INTERNAL]  Generate C code.

";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring") casadi::LapackQr::LapackQr(const std::string &name,
const Sparsity &sp) "

[INTERNAL] ";

%feature("docstring")  casadi::LapackQr::class_name() const override "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring")  casadi::LapackQr::nfact(void *mem, const double *A)
const override "

[INTERNAL]  Numeric factorization.

";

%feature("docstring")  casadi::LinsolInternal::nrow() const  "

[INTERNAL]  Get sparsity pattern.

";

%feature("docstring")  casadi::LapackQr::solve(void *mem, const double *A,
double *x, int nrhs, bool tr) const override "

[INTERNAL] ";

%feature("docstring") casadi::LapackQr::~LapackQr "

[INTERNAL] ";

%feature("docstring")  casadi::LapackQr::init(const Dict &opts) override "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::LapackQr::plugin_name() const override "

[INTERNAL] ";


// File: classcasadi_1_1LinearInterpolant.xml
%feature("docstring")  casadi::Interpolant::get_sparsity_out(int i) override
"

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::replace_res(const
std::vector< M > &res) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< int > &order_in, const std::vector< int >
&order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::FunctionInternal::n_instructions() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::check_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::get_abstol() const  "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")
casadi::FunctionInternal::codegen_sparsities(CodeGenerator &g) const  "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::LinearInterpolant::get_jacobian(const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const override "

[INTERNAL]  Full Jacobian.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M > > &fseed) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::instruction_id(int k) const
"

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::symbolic_output(const
std::vector< MX > &arg) const  "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::LinearInterpolant::has_jacobian() const
override "

[INTERNAL]  Full Jacobian.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::sx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::ProtoFunction::alloc_mem() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::FunctionInternal::instruction_output(int k)
const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::get_forward(int nfwd, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::get_function() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::get_partition(int iind, int
oind, Sparsity &D1, Sparsity &D2, bool compact, bool symmetric, bool
allow_forward, bool allow_reverse) const  "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::size_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::Interpolant::get_n_in() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::has_derivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::ProtoFunction::free_mem(void *mem) const  "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, int order, bool
tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::size_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::FunctionInternal::forward(int nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(int nadj,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FunctionInternal::codegen(CodeGenerator &g,
const std::string &fname) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::FunctionInternal::instruction_input(int k)
const  "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const double
**arg, double **res, int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const SXElem
**arg, SXElem **res, int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const bvec_t
**arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::disp_more(std::ostream
&stream) const  "

[INTERNAL]  Print more.

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::matching_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::LinearInterpolant::init(const Dict &opts)
override "

[INTERNAL]  Initialize.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::all_scalar() const  "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::jit_dependencies(const
std::string &fname) "

[INTERNAL]  Jit dependencies.

";

%feature("docstring")  casadi::FunctionInternal::get_max_in(int ind) const
"

[INTERNAL]  Get largest input value.

";

%feature("docstring")  casadi::Interpolant::get_name_out(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::get_default_in(int ind)
const  "

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring") casadi::LinearInterpolant::LinearInterpolant(const
std::string &name, const std::vector< double > &grid, const std::vector< int
> &offset, const std::vector< double > &values) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::definition() const  "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring")  casadi::FunctionInternal::instruction_MX(int k) const
"

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsityGen(int iind,
int oind, bool symmetric, int gr_i=1, int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FunctionInternal::instruction_constant(int k)
const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M > > &aseed) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::LinearInterpolant::has_codegen() const
override "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")
casadi::FunctionInternal::codegen_declarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::get_free() const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::FunctionInternal::reverse(int nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::Interpolant::get_name_in(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::export_code(const
std::string &lang, std::ostream &stream, const Dict &options) const  "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring")  casadi::FunctionInternal::sp_forward(const bvec_t
**arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::has_reverse(int nadj) const
"

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInput(int k) const
"

[DEPRECATED] Renamed instruction_index

";

%feature("docstring")  casadi::FunctionInternal::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring")  casadi::FunctionInternal::uses_output() const  "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring")  casadi::LinearInterpolant::plugin_name() const
override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::info() const  "

[INTERNAL]  Obtain information about function

";

%feature("docstring")  casadi::FunctionInternal::get_min_in(int ind) const
"

[INTERNAL]  Get smallest input value.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::Interpolant::get_n_out() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::get_reverse(int nadj, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::LinearInterpolant "

'linear' plugin for Interpolant Implements a multilinear interpolant: For
1D, the interpolating polynomial will be linear. For 2D, the interpolating
polynomial will be bilinear, etc.

>List of available options

+-------------+-----------------+------------------------------------------+
|     Id      |      Type       |               Description                |
+=============+=================+==========================================+
| lookup_mode | OT_STRINGVECTOR | Sets, for each grid dimenion, the lookup |
|             |                 | algorithm used to find the correct       |
|             |                 | index. 'linear' uses a for-loop + break; |
|             |                 | 'exact' uses floored division (only for  |
|             |                 | uniform grids).                          |
+-------------+-----------------+------------------------------------------+

Joel Andersson

>List of available options

+-------------+-----------------+---------------------+--------------------+
|     Id      |      Type       |     Description     |      Used in       |
+=============+=================+=====================+====================+
| lookup_mode | OT_STRINGVECTOR | Sets, for each grid | casadi::LinearInte |
|             |                 | dimenion, the       | rpolant            |
|             |                 | lookup algorithm    |                    |
|             |                 | used to find the    |                    |
|             |                 | correct index.      |                    |
|             |                 | 'linear' uses a     |                    |
|             |                 | for-loop + break;   |                    |
|             |                 | 'exact' uses        |                    |
|             |                 | floored division    |                    |
|             |                 | (only for uniform   |                    |
|             |                 | grids).             |                    |
+-------------+-----------------+---------------------+--------------------+

Diagrams
--------



C++ includes: linear_interpolant.hpp ";

%feature("docstring")  casadi::FunctionInternal::sp_reverse(bvec_t **arg,
bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::eval_dm(const std::vector<
DM > &arg) const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::has_forward(int nfwd) const
"

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::disp(std::ostream &stream,
bool more) const override "

[INTERNAL]  Display object.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::finalize(const Dict &opts)
override "

[INTERNAL]  Finalize the object creation.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::LinearInterpolant::class_name() const
override "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(int iind, int
oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const std::vector<
Matrix< D > > &arg, std::vector< Matrix< D > > &res, bool always_inline,
bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::get_stats(void *mem) const
"

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::LinearInterpolant::eval(const double **arg,
double **res, int *iw, double *w, void *mem) const override "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::ProtoFunction::init_mem(void *mem) const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::codegen_meta(CodeGenerator
&g) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FunctionInternal::check_res(const
std::vector< M > &res) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::Interpolant::get_sparsity_in(int i) override
"

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::replace_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring")  casadi::FunctionInternal::jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(int nfwd) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::LinearInterpolant::codegen_body(CodeGenerator
&g) const override "

[INTERNAL]  Generate code for the body of the C function.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(int iind,
int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::fwd_seed(int nfwd) const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::LinearInterpolant::get_options() const
override "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring") casadi::LinearInterpolant::~LinearInterpolant "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::getAtomicOutput(int k)
const  "

[DEPRECATED] Renamed instruction_output

";

%feature("docstring")  casadi::FunctionInternal::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::set_temp(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::get_reltol() const  "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(int nadj) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::matching_res(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

";


// File: classcasadi_1_1LinearInterpolantJac.xml
%feature("docstring")  casadi::FunctionInternal::get_options() const
override "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::FunctionInternal::size_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian(const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::LinearInterpolantJac::init(const Dict &opts)
override "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::FunctionInternal::codegen(CodeGenerator &g,
const std::string &fname) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::FunctionInternal::get_name_out(int i) "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::check_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::set_temp(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(int nadj,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::FunctionInternal::get_partition(int iind, int
oind, Sparsity &D1, Sparsity &D2, bool compact, bool symmetric, bool
allow_forward, bool allow_reverse) const  "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::uses_output() const  "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring")  casadi::FunctionInternal::instruction_output(int k)
const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const std::vector<
Matrix< D > > &arg, std::vector< Matrix< D > > &res, bool always_inline,
bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::get_stats(void *mem) const
"

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::LinearInterpolantJac::class_name() const
override "

[INTERNAL]  Get type name.

";

%feature("docstring")  casadi::FunctionInternal::jit_dependencies(const
std::string &fname) "

[INTERNAL]  Jit dependencies.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M > > &fseed) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::sx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::get_default_in(int ind)
const  "

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::export_code(const
std::string &lang, std::ostream &stream, const Dict &options) const  "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::disp_more(std::ostream
&stream) const  "

[INTERNAL]  Print more.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(int nadj) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::get_reltol() const  "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring")  casadi::FunctionInternal::reverse(int nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::get_name_in(int i) "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::info() const  "

[INTERNAL]  Obtain information about function

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::LinearInterpolantJac::eval(const double
**arg, double **res, int *iw, double *w, void *mem) const override "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")
casadi::LinearInterpolantJac::codegen_body(CodeGenerator &g) const override
"

[INTERNAL]  Generate code for the body of the C function.

";

%feature("docstring")  casadi::FunctionInternal::instruction_input(int k)
const  "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::has_derivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::disp(std::ostream &stream,
bool more) const override "

[INTERNAL]  Display object.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsityGen(int iind,
int oind, bool symmetric, int gr_i=1, int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FunctionInternal::get_abstol() const  "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring")
casadi::FunctionInternal::codegen_declarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::get_sparsity_out(int i) "

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::FunctionInternal::forward(int nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::get_sparsity_in(int i) "

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")
casadi::FunctionInternal::codegen_sparsities(CodeGenerator &g) const  "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::ProtoFunction::alloc_mem() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::FunctionInternal::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, int order, bool
tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::ProtoFunction::free_mem(void *mem) const  "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::matching_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::sp_reverse(bvec_t **arg,
bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::FunctionInternal::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")  casadi::FunctionInternal::replace_res(const
std::vector< M > &res) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::get_reverse(int nadj, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::instruction_id(int k) const
"

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")
casadi::LinearInterpolantJac::LinearInterpolantJac(const std::string &name)
"

[INTERNAL]  Constructor.

";

%feature("docstring")  casadi::FunctionInternal::get_free() const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::definition() const  "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring")  casadi::FunctionInternal::n_instructions() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(int nfwd) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const double
**arg, double **res, int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const SXElem
**arg, SXElem **res, int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const bvec_t
**arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::codegen_meta(CodeGenerator
&g) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FunctionInternal::sp_forward(const bvec_t
**arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::FunctionInternal::instruction_MX(int k) const
"

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring")  casadi::FunctionInternal::get_forward(int nfwd, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(int iind, int
oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::eval_dm(const std::vector<
DM > &arg) const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::replace_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInput(int k) const
"

[DEPRECATED] Renamed instruction_index

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring") casadi::LinearInterpolantJac::~LinearInterpolantJac "

[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::has_reverse(int nadj) const
"

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring") casadi::LinearInterpolantJac "

[INTERNAL]  First order derivatives

>List of available options

+-------------+-----------------+---------------------+--------------------+
|     Id      |      Type       |     Description     |      Used in       |
+=============+=================+=====================+====================+
| lookup_mode | OT_STRINGVECTOR | Sets, for each grid | casadi::LinearInte |
|             |                 | dimenion, the       | rpolantJac         |
|             |                 | lookup algorithm    |                    |
|             |                 | used to find the    |                    |
|             |                 | correct index.      |                    |
|             |                 | 'linear' uses a     |                    |
|             |                 | for-loop + break;   |                    |
|             |                 | 'exact' uses        |                    |
|             |                 | floored division    |                    |
|             |                 | (only for uniform   |                    |
|             |                 | grids).             |                    |
+-------------+-----------------+---------------------+--------------------+

Diagrams
--------



C++ includes: linear_interpolant.hpp ";

%feature("docstring")  casadi::FunctionInternal::check_res(const
std::vector< M > &res) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

";

%feature("docstring")  casadi::FunctionInternal::get_function() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::instruction_constant(int k)
const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::has_forward(int nfwd) const
"

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::matching_res(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< int > &order_in, const std::vector< int >
&order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::get_min_in(int ind) const
"

[INTERNAL]  Get smallest input value.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::FunctionInternal::symbolic_output(const
std::vector< MX > &arg) const  "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::FunctionInternal::get_n_out() "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")  casadi::FunctionInternal::size_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::fwd_seed(int nfwd) const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOutput(int k)
const  "

[DEPRECATED] Renamed instruction_output

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::ProtoFunction::init_mem(void *mem) const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::finalize(const Dict &opts)
override "

[INTERNAL]  Finalize the object creation.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(int iind,
int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::get_n_in() "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M > > &aseed) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::get_max_in(int ind) const
"

[INTERNAL]  Get largest input value.

";

%feature("docstring")  casadi::LinearInterpolantJac::has_codegen() const
override "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::all_scalar() const  "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";


// File: classcasadi_1_1Linsol.xml
%feature("docstring")  casadi::Linsol::neig(const DM &A) const  "

Number of negative eigenvalues Not available for all solvers.

";

%feature("docstring")  casadi::SharedObject::class_name() const  "

Get class name.

";

%feature("docstring")  casadi::SharedObject::is_null() const  "

Is a null pointer?

";

%feature("docstring")  casadi::Linsol::nfact(const DM &A) const  "

Numeric factorization of the linear system.

";

%feature("docstring")  casadi::Linsol::solve(const DM &A, const DM &B, bool
tr=false) const  "

Solve linear system of equations

";

%feature("docstring")  casadi::Linsol::solve(const MX &A, const MX &B, bool
tr=false) const  "

Solve linear system of equations

";

%feature("docstring") casadi::Linsol::Linsol() "

Default constructor.

";

%feature("docstring") casadi::Linsol::Linsol(const std::string &name, const
std::string &solver, const Sparsity &sp, const Dict &opts=Dict()) "

Constructor.

";

%feature("docstring") casadi::Linsol::__hash__ "

Returns a number that is unique for a given Node. If the Object does not
point to any node, \"0\" is returned.

";

%feature("docstring") casadi::Linsol "

Linear solver Create a solver for linear systems of equations Solves the
linear system A*X = B or A^T*X = B for X with A square and non- singular.

If A is structurally singular, an error will be thrown during init. If A is
numerically singular, the prepare step will fail.

General information
===================



List of plugins
===============



- csparsecholesky

- csparse

- ma27

- lapacklu

- lapackqr

- ldl

- qr

- symbolicqr

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
Linsol.doc(\"myextraplugin\")



--------------------------------------------------------------------------------

csparsecholesky
---------------



Linsol with CSparseCholesky Interface

--------------------------------------------------------------------------------





--------------------------------------------------------------------------------

csparse
-------



Linsol with CSparse Interface

--------------------------------------------------------------------------------





--------------------------------------------------------------------------------

ma27
----



Interface to the sparse direct linear solver MA27 Works for symmetric
indefinite systems Partly adopted from qpOASES 3.2 Joel Andersson

--------------------------------------------------------------------------------

lapacklu
--------



This class solves the linear system A.x=b by making an LU factorization of
A: A = L.U, with L lower and U upper triangular

>List of available options

+-----------------------------+---------+----------------------------------+
|             Id              |  Type   |           Description            |
+=============================+=========+==================================+
| allow_equilibration_failure | OT_BOOL | Non-fatal error when             |
|                             |         | equilibration fails              |
+-----------------------------+---------+----------------------------------+
| equilibration               | OT_BOOL | Equilibrate the matrix           |
+-----------------------------+---------+----------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

lapackqr
--------



This class solves the linear system A.x=b by making an QR factorization of
A: A = Q.R, with Q orthogonal and R upper triangular

>List of available options

+----------+--------+------------------------------------------------------+
|    Id    |  Type  |                     Description                      |
+==========+========+======================================================+
| max_nrhs | OT_INT | Maximum number of right-hand-sides that get          |
|          |        | processed in a single pass [default:10].             |
+----------+--------+------------------------------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

ldl
---



Linear solver using sparse direct LDL factorization

--------------------------------------------------------------------------------





--------------------------------------------------------------------------------

qr --



Linear solver using sparse direct QR factorization

--------------------------------------------------------------------------------





--------------------------------------------------------------------------------

symbolicqr
----------



Linear solver for sparse least-squares problems Inspired
fromhttps://github.com/scipy/scipy/blob/v0.14.0/scipy/sparse/linalg/isolve/lsqr.py#L96

Linsol based on QR factorization with sparsity pattern based reordering
without partial pivoting

>List of available options

+-------+---------+----------------------------------------------------+
|  Id   |  Type   |                    Description                     |
+=======+=========+====================================================+
| fopts | OT_DICT | Options to be passed to generated function objects |
+-------+---------+----------------------------------------------------+

--------------------------------------------------------------------------------



Joel Andersson

C++ includes: linsol.hpp ";

%feature("docstring")  casadi::Linsol::sfact(const DM &A) const  "

Symbolic factorization of the linear system, e.g. selecting pivots.

";

%feature("docstring")  casadi::Linsol::rank(const DM &A) const  "

Matrix rank Not available for all solvers.

";

%feature("docstring")  casadi::SharedObject::disp(std::ostream &stream, bool
more=false) const  "

Print a description of the object.

";

%feature("docstring")  casadi::SharedObject::get_str(bool more=false) const
"

Get string representation.

";

%feature("docstring")  casadi::Linsol::plugin_name() const  "

Query plugin name.

";

%feature("docstring")  casadi::SharedObject::print_ptr(std::ostream
&stream=casadi::uout()) const  "

[INTERNAL]  Print the pointer to the internal class

";

%feature("docstring")  casadi::Linsol::sparsity() const  "

Get linear system sparsity.

";


// File: classcasadi_1_1LinsolLdl.xml
%feature("docstring")  casadi::LinsolInternal::nnz() const  "

[INTERNAL] ";

%feature("docstring")  casadi::LinsolInternal::ncol() const  "

[INTERNAL] ";

%feature("docstring")  casadi::LinsolInternal::row() const  "

[INTERNAL] ";

%feature("docstring")  casadi::LinsolInternal::disp(std::ostream &stream,
bool more) const override "

[INTERNAL]  Display object.

";

%feature("docstring")  casadi::ProtoFunction::get_options() const  "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::LinsolInternal::disp_more(std::ostream
&stream) const  "

[INTERNAL]  Print more.

";

%feature("docstring")  casadi::LinsolLdl::neig(void *mem, const double *A)
const override "

[INTERNAL]  Number of negative eigenvalues.

";

%feature("docstring")  casadi::LinsolLdl::rank(void *mem, const double *A)
const override "

[INTERNAL]   Matrix rank.

";

%feature("docstring")  casadi::LinsolLdl::class_name() const override "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring") casadi::LinsolLdl::~LinsolLdl "

[INTERNAL] ";

%feature("docstring")  casadi::LinsolLdl::init(const Dict &opts) override "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::LinsolLdl::alloc_mem() const override "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring") casadi::LinsolLdl::LinsolLdl(const std::string &name,
const Sparsity &sp) "

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::LinsolLdl "

[INTERNAL]  'ldl' plugin for LinsolInternal

C++ includes: linsol_ldl.hpp ";

%feature("docstring")  casadi::LinsolLdl::nfact(void *mem, const double *A)
const override "

[INTERNAL]  Numeric factorization.

";

%feature("docstring")  casadi::LinsolLdl::sfact(void *mem, const double *A)
const override "

[INTERNAL] ";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::LinsolInternal::linsol_eval_sx(const SXElem
**arg, SXElem **res, int *iw, SXElem *w, void *mem, bool tr, int nrhs) const
"

[INTERNAL]  Evaluate SX, possibly transposed.

";

%feature("docstring")  casadi::LinsolInternal::generate(CodeGenerator &g,
const std::string &A, const std::string &x, int nrhs, bool tr) const  "

[INTERNAL]  Generate C code.

";

%feature("docstring")  casadi::ProtoFunction::finalize(const Dict &opts) "

[INTERNAL]  Finalize the object creation This function, which visits the
class hierarchy in reverse order is run after init() has been completed.

";

%feature("docstring")  casadi::LinsolLdl::plugin_name() const override "

[INTERNAL] ";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::LinsolLdl::solve(void *mem, const double *A,
double *x, int nrhs, bool tr) const override "

[INTERNAL] ";

%feature("docstring")  casadi::LinsolInternal::nrow() const  "

[INTERNAL]  Get sparsity pattern.

";

%feature("docstring")  casadi::LinsolLdl::init_mem(void *mem) const override
"

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::LinsolInternal::colind() const  "

[INTERNAL] ";

%feature("docstring")  casadi::LinsolLdl::free_mem(void *mem) const override
"

[INTERNAL]  Free memory block.

";


// File: classcasadi_1_1LinsolQr.xml
%feature("docstring")  casadi::LinsolInternal::disp(std::ostream &stream,
bool more) const override "

[INTERNAL]  Display object.

";

%feature("docstring")  casadi::LinsolInternal::neig(void *mem, const double
*A) const  "

[INTERNAL]  Number of negative eigenvalues.

";

%feature("docstring")  casadi::LinsolQr::solve(void *mem, const double *A,
double *x, int nrhs, bool tr) const override "

[INTERNAL] ";

%feature("docstring") casadi::LinsolQr "

[INTERNAL]  'qr' plugin for LinsolInternal

C++ includes: linsol_qr.hpp ";

%feature("docstring")  casadi::LinsolQr::class_name() const override "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::LinsolQr::plugin_name() const override "

[INTERNAL] ";

%feature("docstring") casadi::LinsolQr::~LinsolQr "

[INTERNAL] ";

%feature("docstring")  casadi::LinsolInternal::ncol() const  "

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::LinsolQr::free_mem(void *mem) const override
"

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::ProtoFunction::finalize(const Dict &opts) "

[INTERNAL]  Finalize the object creation This function, which visits the
class hierarchy in reverse order is run after init() has been completed.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::LinsolQr::init(const Dict &opts) override "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::LinsolInternal::colind() const  "

[INTERNAL] ";

%feature("docstring")  casadi::LinsolInternal::disp_more(std::ostream
&stream) const  "

[INTERNAL]  Print more.

";

%feature("docstring")  casadi::LinsolQr::alloc_mem() const override "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::LinsolInternal::nnz() const  "

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::LinsolInternal::linsol_eval_sx(const SXElem
**arg, SXElem **res, int *iw, SXElem *w, void *mem, bool tr, int nrhs) const
"

[INTERNAL]  Evaluate SX, possibly transposed.

";

%feature("docstring")  casadi::LinsolInternal::nrow() const  "

[INTERNAL]  Get sparsity pattern.

";

%feature("docstring")  casadi::LinsolInternal::rank(void *mem, const double
*A) const  "

[INTERNAL]   Matrix rank.

";

%feature("docstring")  casadi::LinsolInternal::row() const  "

[INTERNAL] ";

%feature("docstring")  casadi::LinsolQr::nfact(void *mem, const double *A)
const override "

[INTERNAL]  Numeric factorization.

";

%feature("docstring")  casadi::LinsolQr::init_mem(void *mem) const override
"

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::LinsolQr::sfact(void *mem, const double *A)
const override "

[INTERNAL] ";

%feature("docstring")  casadi::LinsolQr::generate(CodeGenerator &g, const
std::string &A, const std::string &x, int nrhs, bool tr) const override "

[INTERNAL]  Generate C code.

";

%feature("docstring")  casadi::ProtoFunction::get_options() const  "

[INTERNAL]  Options.

";

%feature("docstring") casadi::LinsolQr::LinsolQr(const std::string &name,
const Sparsity &sp) "

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";


// File: classcasadi_1_1Logger.xml
%feature("docstring") casadi::Logger "

Keeps track of logging output to screen and/or files. All printout from
CasADi routines should go through this files.

Joel Andersson

C++ includes: casadi_logger.hpp ";


// File: classcasadi_1_1Lsqr.xml
%feature("docstring")  casadi::LinsolInternal::row() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Lsqr::nfact(void *mem, const double *A) const
override "

[INTERNAL]  Numeric factorization.

";

%feature("docstring")  casadi::LinsolInternal::sfact(void *mem, const double
*A) const  "

[INTERNAL] ";

%feature("docstring")  casadi::LinsolInternal::generate(CodeGenerator &g,
const std::string &A, const std::string &x, int nrhs, bool tr) const  "

[INTERNAL]  Generate C code.

";

%feature("docstring")  casadi::Lsqr::solve(void *mem, const double *A,
double *x, int nrhs, bool tr) const override "

[INTERNAL] ";

%feature("docstring")  casadi::LinsolInternal::nnz() const  "

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::LinsolInternal::init(const Dict &opts)
override "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::LinsolInternal::neig(void *mem, const double
*A) const  "

[INTERNAL]  Number of negative eigenvalues.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::LinsolInternal::colind() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Lsqr::class_name() const override "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::ProtoFunction::get_options() const  "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::LinsolInternal::rank(void *mem, const double
*A) const  "

[INTERNAL]   Matrix rank.

";

%feature("docstring") casadi::Lsqr::~Lsqr "

[INTERNAL] ";

%feature("docstring")  casadi::LinsolInternal::linsol_eval_sx(const SXElem
**arg, SXElem **res, int *iw, SXElem *w, void *mem, bool tr, int nrhs) const
"

[INTERNAL]  Evaluate SX, possibly transposed.

";

%feature("docstring")  casadi::Lsqr::plugin_name() const override "

[INTERNAL] ";

%feature("docstring")  casadi::Lsqr::alloc_mem() const override "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::ProtoFunction::finalize(const Dict &opts) "

[INTERNAL]  Finalize the object creation This function, which visits the
class hierarchy in reverse order is run after init() has been completed.

";

%feature("docstring")  casadi::LinsolInternal::disp(std::ostream &stream,
bool more) const override "

[INTERNAL]  Display object.

";

%feature("docstring") casadi::Lsqr "

[INTERNAL]  'symbolicqr' plugin for Linsol

Linear solver for sparse least-squares problems Inspired
fromhttps://github.com/scipy/scipy/blob/v0.14.0/scipy/sparse/linalg/isolve/lsqr.py#L96

Linsol based on QR factorization with sparsity pattern based reordering
without partial pivoting

>List of available options

+-------+---------+----------------------------------------------------+
|  Id   |  Type   |                    Description                     |
+=======+=========+====================================================+
| fopts | OT_DICT | Options to be passed to generated function objects |
+-------+---------+----------------------------------------------------+

Joel Andersson

C++ includes: lsqr.hpp ";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::Lsqr::init_mem(void *mem) const override "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::LinsolInternal::disp_more(std::ostream
&stream) const  "

[INTERNAL]  Print more.

";

%feature("docstring")  casadi::LinsolInternal::nrow() const  "

[INTERNAL]  Get sparsity pattern.

";

%feature("docstring")  casadi::Lsqr::free_mem(void *mem) const override "

[INTERNAL]  Free memory block.

";

%feature("docstring") casadi::Lsqr::Lsqr(const std::string &name, const
Sparsity &sp) "

[INTERNAL] ";

%feature("docstring")  casadi::LinsolInternal::ncol() const  "

[INTERNAL] ";


// File: classcasadi_1_1Map.xml
%feature("docstring")  casadi::FunctionInternal::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(int nfwd) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::Map::get_n_out() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::FunctionInternal::instruction_constant(int k)
const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::size_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::Map::has_forward(int nfwd) const override "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::FunctionInternal::matching_res(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::Map::has_reverse(int nadj) const override "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::ProtoFunction::free_mem(void *mem) const  "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(int iind, int
oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::get_min_in(int ind) const
"

[INTERNAL]  Get smallest input value.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::FunctionInternal::disp(std::ostream &stream,
bool more) const override "

[INTERNAL]  Display object.

";

%feature("docstring")  casadi::FunctionInternal::replace_res(const
std::vector< M > &res) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Map "

[INTERNAL]  Evaluate in parallel Joel Andersson

C++ includes: map.hpp ";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, int order, bool
tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::sx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< int > &order_in, const std::vector< int >
&order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::FunctionInternal::check_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::forward(int nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::codegen_meta(CodeGenerator
&g) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::size_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::Map::get_n_in() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::eval_dm(const std::vector<
DM > &arg) const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::Map::has_sprev() const override "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::get_max_in(int ind) const
"

[INTERNAL]  Get largest input value.

";

%feature("docstring")  casadi::FunctionInternal::jit_dependencies(const
std::string &fname) "

[INTERNAL]  Jit dependencies.

";

%feature("docstring")  casadi::Map::sp_reverse(bvec_t **arg, bvec_t **res,
int *iw, bvec_t *w, void *mem) const override "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M > > &aseed) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::get_abstol() const  "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring")  casadi::Map::codegen_body(CodeGenerator &g) const
override "

[INTERNAL]  Generate code for the body of the C function.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const std::vector<
Matrix< D > > &arg, std::vector< Matrix< D > > &res, bool always_inline,
bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(int nadj,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::definition() const  "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInput(int k) const
"

[DEPRECATED] Renamed instruction_index

";

%feature("docstring")  casadi::Map::class_name() const override "

[INTERNAL]  Get type name.

";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::FunctionInternal::get_stats(void *mem) const
"

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::FunctionInternal::has_derivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::Map::get_default_in(int ind) const override "

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::Map::eval_sx(const SXElem **arg, SXElem
**res, int *iw, SXElem *w, void *mem) const override "

[INTERNAL]  evaluate symbolically while also propagating directional
derivatives

";

%feature("docstring")  casadi::FunctionInternal::get_free() const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::FunctionInternal::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::Map::get_name_out(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::FunctionInternal::fwd_seed(int nfwd) const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const double
**arg, double **res, int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const SXElem
**arg, SXElem **res, int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const bvec_t
**arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::Map::eval_gen(const T **arg, T **res, int
*iw, T *w) const  "

[INTERNAL]  Evaluate or propagate sparsities.

";

%feature("docstring")  casadi::Map::init(const Dict &opts) override "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::get_partition(int iind, int
oind, Sparsity &D1, Sparsity &D2, bool compact, bool symmetric, bool
allow_forward, bool allow_reverse) const  "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::get_reltol() const  "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::get_options() const
override "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::Map::codegen_declarations(CodeGenerator &g)
const override "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::instruction_input(int k)
const  "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::Map::get_sparsity_in(int i) override "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::get_function() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::matching_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

";

%feature("docstring")  casadi::ProtoFunction::init_mem(void *mem) const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian(const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::Map::parallelization() const  "

[INTERNAL]  Type of parallellization.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Map::~Map "

[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::ProtoFunction::alloc_mem() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::FunctionInternal::disp_more(std::ostream
&stream) const  "

[INTERNAL]  Print more.

";

%feature("docstring")  casadi::Map::has_spfwd() const override "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::Map::eval(const double **arg, double **res,
int *iw, double *w, void *mem) const override "

[INTERNAL]  Evaluate the function numerically.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(int iind,
int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::Map::has_codegen() const override "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::Map::get_reverse(int nadj, const std::string
&name, const std::vector< std::string > &inames, const std::vector<
std::string > &onames, const Dict &opts) const override "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::FunctionInternal::replace_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring")  casadi::Map::get_sparsity_out(int i) override "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::instruction_MX(int k) const
"

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::all_scalar() const  "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::finalize(const Dict &opts)
override "

[INTERNAL]  Finalize the object creation.

";

%feature("docstring")
casadi::FunctionInternal::codegen_sparsities(CodeGenerator &g) const  "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::FunctionInternal::uses_output() const  "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::reverse(int nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::export_code(const
std::string &lang, std::ostream &stream, const Dict &options) const  "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring")  casadi::FunctionInternal::n_instructions() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::check_res(const
std::vector< M > &res) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

";

%feature("docstring")  casadi::Map::get_name_in(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOutput(int k)
const  "

[DEPRECATED] Renamed instruction_output

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(int nadj) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::instruction_id(int k) const
"

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::set_temp(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::Map::sp_forward(const bvec_t **arg, bvec_t
**res, int *iw, bvec_t *w, void *mem) const override "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::Map::get_forward(int nfwd, const std::string
&name, const std::vector< std::string > &inames, const std::vector<
std::string > &onames, const Dict &opts) const override "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::FunctionInternal::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::Map::info() const override "

[INTERNAL]  Obtain information about node

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M > > &fseed) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::instruction_output(int k)
const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsityGen(int iind,
int oind, bool symmetric, int gr_i=1, int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::symbolic_output(const
std::vector< MX > &arg) const  "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::FunctionInternal::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::codegen(CodeGenerator &g,
const std::string &fname) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";


// File: classcasadi_1_1MapOmp.xml
%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::symbolic_output(const
std::vector< MX > &arg) const  "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::FunctionInternal::disp(std::ostream &stream,
bool more) const override "

[INTERNAL]  Display object.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsityGen(int iind,
int oind, bool symmetric, int gr_i=1, int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::Map::has_reverse(int nadj) const override "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::FunctionInternal::codegen_meta(CodeGenerator
&g) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< int > &order_in, const std::vector< int >
&order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const double
**arg, double **res, int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const SXElem
**arg, SXElem **res, int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const bvec_t
**arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::Map::eval_gen(const T **arg, T **res, int
*iw, T *w) const  "

[INTERNAL]  Evaluate or propagate sparsities.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::matching_res(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::Map::get_forward(int nfwd, const std::string
&name, const std::vector< std::string > &inames, const std::vector<
std::string > &onames, const Dict &opts) const override "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::numel_out(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::check_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::FunctionInternal::instruction_input(int k)
const  "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M > > &fseed) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOutput(int k)
const  "

[DEPRECATED] Renamed instruction_output

";

%feature("docstring")  casadi::Map::sp_reverse(bvec_t **arg, bvec_t **res,
int *iw, bvec_t *w, void *mem) const override "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::get_free() const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M > > &aseed) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInput(int k) const
"

[DEPRECATED] Renamed instruction_index

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::Map::get_n_in() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring")  casadi::FunctionInternal::get_abstol() const  "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring")  casadi::Map::get_n_out() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const std::vector<
Matrix< D > > &arg, std::vector< Matrix< D > > &res, bool always_inline,
bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::Map::get_default_in(int ind) const override "

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::finalize(const Dict &opts)
override "

[INTERNAL]  Finalize the object creation.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(int nadj,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FunctionInternal::instruction_id(int k) const
"

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::FunctionInternal::instruction_MX(int k) const
"

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring")  casadi::FunctionInternal::disp_more(std::ostream
&stream) const  "

[INTERNAL]  Print more.

";

%feature("docstring")  casadi::FunctionInternal::instruction_output(int k)
const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::get_partition(int iind, int
oind, Sparsity &D1, Sparsity &D2, bool compact, bool symmetric, bool
allow_forward, bool allow_reverse) const  "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::check_res(const
std::vector< M > &res) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, int order, bool
tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::jit_dependencies(const
std::string &fname) "

[INTERNAL]  Jit dependencies.

";

%feature("docstring")  casadi::FunctionInternal::get_max_in(int ind) const
"

[INTERNAL]  Get largest input value.

";

%feature("docstring")  casadi::FunctionInternal::matching_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

";

%feature("docstring")  casadi::FunctionInternal::sx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(int nadj) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::fwd_seed(int nfwd) const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::Map::codegen_declarations(CodeGenerator &g)
const override "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::codegen(CodeGenerator &g,
const std::string &fname) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::uses_output() const  "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::forward(int nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::Map::has_codegen() const override "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::FunctionInternal::all_scalar() const  "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")  casadi::Map::get_sparsity_out(int i) override "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::MapOmp "

[INTERNAL]  A map Evaluate in parallel using OpenMP Note: Do not use this
class with much more than the intended number of threads for the parallel
evaluation as it will cause excessive memory use.

Joel Andersson

C++ includes: map.hpp ";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(int iind,
int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::size1_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::size_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::definition() const  "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::Map::get_sparsity_in(int i) override "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::Map::get_name_in(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::get_min_in(int ind) const
"

[INTERNAL]  Get smallest input value.

";

%feature("docstring")  casadi::FunctionInternal::get_stats(void *mem) const
"

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::FunctionInternal::instruction_constant(int k)
const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")
casadi::FunctionInternal::codegen_sparsities(CodeGenerator &g) const  "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring")  casadi::ProtoFunction::init_mem(void *mem) const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::ProtoFunction::free_mem(void *mem) const  "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::size_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::set_temp(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::replace_res(const
std::vector< M > &res) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::n_instructions() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::Map::info() const override "

[INTERNAL]  Obtain information about node

";

%feature("docstring")  casadi::FunctionInternal::size2_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::Map::has_sprev() const override "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian(const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::Map::get_name_out(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(int iind, int
oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::reverse(int nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(int nfwd) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::Map::has_spfwd() const override "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::get_function() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::FunctionInternal::export_code(const
std::string &lang, std::ostream &stream, const Dict &options) const  "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring")  casadi::ProtoFunction::alloc_mem() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::Map::has_forward(int nfwd) const override "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::Map::get_reverse(int nadj, const std::string
&name, const std::vector< std::string > &inames, const std::vector<
std::string > &onames, const Dict &opts) const override "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::FunctionInternal::eval_dm(const std::vector<
DM > &arg) const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::FunctionInternal::get_options() const
override "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::FunctionInternal::replace_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring")  casadi::FunctionInternal::has_derivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::Map::sp_forward(const bvec_t **arg, bvec_t
**res, int *iw, bvec_t *w, void *mem) const override "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FunctionInternal::jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::Map::eval_sx(const SXElem **arg, SXElem
**res, int *iw, SXElem *w, void *mem) const override "

[INTERNAL]  evaluate symbolically while also propagating directional
derivatives

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::FunctionInternal::get_reltol() const  "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring")  casadi::FunctionInternal::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";


// File: classcasadi_1_1Matrix.xml


/*  Construct symbolic primitives  */

/* The \"sym\" function is intended to work in a similar way as \"sym\" used
in the Symbolic Toolbox for Matlab but instead creating a CasADi symbolic
primitive.

*/ %feature("docstring")  casadi::Matrix< T >::print_scalar(std::ostream
&stream) const  "

Print scalar.

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >
>::nnz_upper() const "

Get the number of non-zeros in the upper triangular half.

";

%feature("docstring")  minor(const Matrix< Scalar > &x, int i, int j) "

Get the (i,j) minor matrix.

";

%feature("docstring")  expand(const Matrix< Scalar > &ex, Matrix< Scalar >
&weights, Matrix< Scalar > &terms) "

Expand the expression as a weighted sum (with constant weights)

";

%feature("docstring")  casadi::Matrix< T >::is_constant() const  "

Check if the matrix is constant (note that false negative answers are
possible)

";

%feature("docstring")  mtaylor(const Matrix< Scalar > &ex, const Matrix<
Scalar > &x, const Matrix< Scalar > &a, int order=1) "

multivariate Taylor series expansion

Do Taylor expansions until the aggregated order of a term is equal to
'order'. The aggregated order of $x^n y^m$ equals $n+m$.

";

%feature("docstring")  mtaylor(const Matrix< Scalar > &ex, const Matrix<
Scalar > &x, const Matrix< Scalar > &a, int order, const std::vector< int >
&order_contributions) "

multivariate Taylor series expansion

Do Taylor expansions until the aggregated order of a term is equal to
'order'. The aggregated order of $x^n y^m$ equals $n+m$.

The argument order_contributions can denote how match each variable
contributes to the aggregated order. If x=[x, y] and order_contributions=[1,
2], then the aggregated order of $x^n y^m$ equals $1n+2m$.

Example usage

$ \\\\sin(b+a)+\\\\cos(b+a)(x-a)+\\\\cos(b+a)(y-b) $ $ y+x-(x^3+3y x^2+3 y^2
x+y^3)/6 $ $ (-3 x^2 y-x^3)/6+y+x $

";

%feature("docstring")  casadi::Matrix< T >::get_elements() const  "

Get all elements.

";

%feature("docstring")  casadi::Matrix< T >::set(const Matrix< Scalar > &m,
bool ind1, const Slice &rr) "

Set a submatrix, single argument

";

%feature("docstring")  casadi::Matrix< T >::set(const Matrix< Scalar > &m,
bool ind1, const Matrix< int > &rr) "

Set a submatrix, single argument

";

%feature("docstring")  casadi::Matrix< T >::set(const Matrix< Scalar > &m,
bool ind1, const Sparsity &sp) "

Set a submatrix, single argument

";

%feature("docstring")  casadi::Matrix< T >::set(const Matrix< Scalar > &m,
bool ind1, const Slice &rr, const Slice &cc) "

Set a submatrix, two arguments

";

%feature("docstring")  casadi::Matrix< T >::set(const Matrix< Scalar > &m,
bool ind1, const Slice &rr, const Matrix< int > &cc) "

Set a submatrix, two arguments

";

%feature("docstring")  casadi::Matrix< T >::set(const Matrix< Scalar > &m,
bool ind1, const Matrix< int > &rr, const Slice &cc) "

Set a submatrix, two arguments

";

%feature("docstring")  casadi::Matrix< T >::set(const Matrix< Scalar > &m,
bool ind1, const Matrix< int > &rr, const Matrix< int > &cc) "

Set a submatrix, two arguments

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >  >::nnz()
const "

Get the number of (structural) non-zero elements.

";

%feature("docstring")  casadi::Matrix< T >::remove(const std::vector< int >
&rr, const std::vector< int > &cc) "

Remove columns and rows Remove/delete rows and/or columns of a matrix.

";

%feature("docstring")  casadi::Matrix< T >::get(Matrix< Scalar > &output_m,
bool ind1, const Slice &rr) const  "

Get a submatrix, single argument

";

%feature("docstring")  casadi::Matrix< T >::get(Matrix< Scalar > &output_m,
bool ind1, const Matrix< int > &rr) const  "

Get a submatrix, single argument

";

%feature("docstring")  casadi::Matrix< T >::get(Matrix< Scalar > &output_m,
bool ind1, const Sparsity &sp) const  "

Get a submatrix, single argument

";

%feature("docstring")  casadi::Matrix< T >::get(Matrix< Scalar > &output_m,
bool ind1, const Slice &rr, const Slice &cc) const  "

Get a submatrix, two arguments

";

%feature("docstring")  casadi::Matrix< T >::get(Matrix< Scalar > &output_m,
bool ind1, const Slice &rr, const Matrix< int > &cc) const  "

Get a submatrix, two arguments

";

%feature("docstring")  casadi::Matrix< T >::get(Matrix< Scalar > &output_m,
bool ind1, const Matrix< int > &rr, const Slice &cc) const  "

Get a submatrix, two arguments

";

%feature("docstring")  casadi::Matrix< T >::get(Matrix< Scalar > &output_m,
bool ind1, const Matrix< int > &rr, const Matrix< int > &cc) const  "

Get a submatrix, two arguments

";

%feature("docstring")  triangle(const Matrix< Scalar > &x) "

triangle function

\\\\[ \\\\begin {cases} \\\\Lambda(x) = 0 & |x| >= 1 \\\\\\\\ \\\\Lambda(x)
= 1-|x| & |x| < 1 \\\\end {cases} \\\\]

";

%feature("docstring")  casadi::Matrix< T >::export_code(const std::string
&lang, std::ostream &stream=casadi::uout(), const Dict &options=Dict())
const  "

Export matrix in specific language.

lang: only 'matlab' supported for now

::

  * options:
  *   inline: Indicates if you want everything on a single line (default: False)
  *   name: Name of exported variable (default: 'm')
  *   indent_level: Level of indentation (default: 0)
  *   spoof_zero: Replace numerical zero by a 1e-200 (default: false)
  *               might be needed for matlab sparse construct,
  *               which doesn't allow numerical zero
  * 



";

%feature("docstring")  adj(const Matrix< Scalar > &A) "

Matrix adjoint.

";

%feature("docstring")  casadi::Matrix< T >::triplet(const std::vector< int >
&row, const std::vector< int > &col, const Matrix< Scalar > &d) "

";

%feature("docstring")  casadi::Matrix< T >::triplet(const std::vector< int >
&row, const std::vector< int > &col, const Matrix< Scalar > &d, int nrow,
int ncol) "

";

%feature("docstring")  casadi::Matrix< T >::triplet(const std::vector< int >
&row, const std::vector< int > &col, const Matrix< Scalar > &d, const
std::pair< int, int > &rc) "

";

%feature("docstring")  qr(const Matrix< Scalar > &A, Matrix< Scalar > &Q,
Matrix< Scalar > &R) "

QR factorization using the modified Gram-Schmidt algorithm More stable than
the classical Gram-Schmidt, but may break down if the rows of A are nearly
linearly dependent See J. Demmel: Applied Numerical Linear Algebra
(algorithm 3.1.). Note that in SWIG, Q and R are returned by value.

";

%feature("docstring")  casadi::Matrix< T >::set_width(int width) "

Set the 'precision, width & scientific' used in printing and serializing to
streams.

";

%feature("docstring")  casadi::Matrix< T >::sanity_check(bool
complete=false) const  "

Check if the dimensions and colind, row vectors are compatible.

Parameters:
-----------

complete:  set to true to also check elementwise throws an error as possible
result

";

%feature("docstring")  casadi::SX::print_split(std::vector< std::string >
&output_nz, std::vector< std::string > &output_inter) const  "

[INTERNAL]  Get strings corresponding to the nonzeros and the
interdependencies.

";

%feature("docstring")  casadi::Matrix< T >::unary(int op, const Matrix<
Scalar > &x) "

[INTERNAL]  Create nodes by their ID.

";

%feature("docstring")  qr_solve(const Matrix< Scalar > &b, const Matrix<
Scalar > &v, const Matrix< Scalar > &r, const Matrix< Scalar > &beta, const
std::vector< int > &pinv, bool tr=false) "

Matrix adjoint.

";

%feature("docstring")  casadi::Matrix< T >::set_precision(int precision) "

Set the 'precision, width & scientific' used in printing and serializing to
streams.

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >  >::is_tril()
const "

Check if the matrix is lower triangular.

";

%feature("docstring")  norm_inf_mul(const Matrix< Scalar > &x, const Matrix<
Scalar > &y) "

Inf-norm of a Matrix-Matrix product.

";

%feature("docstring")  casadi::Matrix< T >::is_integer() const  "

Check if the matrix is integer-valued (note that false negative answers are
possible)

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >  >::numel()
const "

Get the number of elements.

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >  >::is_triu()
const "

Check if the matrix is upper triangular.

";

%feature("docstring")  all(const Matrix< Scalar > &x) "

Returns true only if every element in the matrix is true.

";

%feature("docstring")  casadi::SX::is_regular() const  "

[INTERNAL]  Checks if expression does not contain NaN or Inf.

";

%feature("docstring")  casadi::Matrix< T >::set_nz(const Matrix< Scalar >
&m, bool ind1, const Slice &k) "

Set a set of nonzeros

";

%feature("docstring")  casadi::Matrix< T >::set_nz(const Matrix< Scalar >
&m, bool ind1, const Matrix< int > &k) "

Set a set of nonzeros

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >
>::nnz_diag() const "

Get get the number of non-zeros on the diagonal.

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >
>::gradient(const Matrix< Scalar > &ex, const Matrix< Scalar > &arg) "

Functions called by friend functions defined here

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >
>::sparsity() const "

Get the sparsity pattern.

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >  >::get_row()
const "

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring")  casadi::Matrix< T >::get_sparsity() const  "

Get an owning reference to the sparsity pattern.

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >
>::bilin(const Matrix< Scalar > &A, const Matrix< Scalar > &x, const Matrix<
Scalar > &y) "

Calculate bilinear form x^T A y.

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >
>::jtimes(const Matrix< Scalar > &ex, const Matrix< Scalar > &arg, const
Matrix< Scalar > &v, bool tr=false) "

Functions called by friend functions defined here

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >  >::dim(bool
with_nz=false) const "

Get string representation of dimensions. The representation is e.g. \"4x5\"
or \"4x5,10nz\".

";

%feature("docstring")  casadi::Matrix< T >::get_nz(Matrix< Scalar >
&output_m, bool ind1, const Slice &k) const  "

Get a set of nonzeros

";

%feature("docstring")  casadi::Matrix< T >::get_nz(Matrix< Scalar >
&output_m, bool ind1, const Matrix< int > &k) const  "

Get a set of nonzeros

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >  >::columns()
const "

Get the number of columns, Octave-style syntax.

";

%feature("docstring")  casadi::Matrix< T >::T() const  "

Transpose the matrix.

";

%feature("docstring")  any(const Matrix< Scalar > &x) "

Returns true only if any element in the matrix is true.

";

%feature("docstring")  casadi::SX::is_smooth() const  "

[INTERNAL]  Check if smooth.

";

%feature("docstring")  casadi::Matrix< T >::clear() "

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >  >::rows()
const "

Get the number of rows, Octave-style syntax.

";

%feature("docstring")  casadi::Matrix< T >::is_minus_one() const  "

check if the matrix is -1 (note that false negative answers are possible)

";

%feature("docstring")  poly_roots(const Matrix< Scalar > &p) "

Attempts to find the roots of a polynomial.

This will only work for polynomials up to order 3 It is assumed that the
roots are real.

";

%feature("docstring")  casadi::Matrix< T >::info() const  "

Obtain information about sparsity

";

%feature("docstring")  casadi::SX::n_dep() const  "

[INTERNAL]  Get the number of dependencies of a binary SXElem Only defined
if symbolic scalar.

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >
>::is_dense() const "

Check if the matrix expression is dense.

";

%feature("docstring")  casadi::Matrix< T >::print_sparse(std::ostream
&stream, bool truncate=true) const  "

Print sparse matrix style.

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >
>::nnz_lower() const "

Get the number of non-zeros in the lower triangular half.

";

%feature("docstring")  casadi::Matrix< T >::reserve(int nnz) "

";

%feature("docstring")  casadi::Matrix< T >::reserve(int nnz, int ncol) "

";

%feature("docstring")  casadi::Matrix< T >::erase(const std::vector< int >
&rr, const std::vector< int > &cc, bool ind1=false) "

Erase a submatrix (leaving structural zeros in its place) Erase rows and/or
columns of a matrix.

";

%feature("docstring")  casadi::Matrix< T >::erase(const std::vector< int >
&rr, bool ind1=false) "

Erase a submatrix (leaving structural zeros in its place) Erase elements of
a matrix.

";

%feature("docstring")  casadi::Matrix< T >::inf(const Sparsity &sp) "

create a matrix with all inf

";

%feature("docstring")  casadi::Matrix< T >::inf(int nrow=1, int ncol=1) "

create a matrix with all inf

";

%feature("docstring")  casadi::Matrix< T >::inf(const std::pair< int, int >
&rc) "

create a matrix with all inf

";

%feature("docstring")  casadi::SX::element_hash() const  "

[INTERNAL]  Returns a number that is unique for a given symbolic scalar.

Only defined if symbolic scalar.

";

%feature("docstring")  casadi::Matrix< T >::scalar_matrix(int op, const
Matrix< Scalar > &x, const Matrix< Scalar > &y) "

[INTERNAL]  Create nodes by their ID.

";

%feature("docstring")  ramp(const Matrix< Scalar > &x) "

ramp function

\\\\[ \\\\begin {cases} R(x) = 0 & x <= 1 \\\\\\\\ R(x) = x & x > 1 \\\\\\\\
\\\\end {cases} \\\\]

Also called: slope function

";

%feature("docstring")  casadi::Matrix< T >::print_vector(std::ostream
&stream, bool truncate=true) const  "

Print vector-style.

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >  >::ones(int
nrow=1, int ncol=1) "

Create a dense matrix or a matrix with specified sparsity with all entries
one.

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >
>::ones(const Sparsity &sp) "

Create a dense matrix or a matrix with specified sparsity with all entries
one.

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >
>::ones(const std::pair< int, int > &rc) "

Create a dense matrix or a matrix with specified sparsity with all entries
one.

";

%feature("docstring")  casadi::Matrix< T >::resize(int nrow, int ncol) "

";

%feature("docstring")  casadi::Matrix< T >::rand(int nrow=1, int ncol=1) "

Create a matrix with uniformly distributed random numbers.

";

%feature("docstring")  casadi::Matrix< T >::rand(const Sparsity &sp) "

Create a matrix with uniformly distributed random numbers.

";

%feature("docstring")  casadi::Matrix< T >::rand(const std::pair< int, int >
&rc) "

Create a matrix with uniformly distributed random numbers.

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >  >::row(int
el) const "

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >  >::zeros(int
nrow=1, int ncol=1) "

Create a dense matrix or a matrix with specified sparsity with all entries
zero.

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >
>::zeros(const Sparsity &sp) "

Create a dense matrix or a matrix with specified sparsity with all entries
zero.

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >
>::zeros(const std::pair< int, int > &rc) "

Create a dense matrix or a matrix with specified sparsity with all entries
zero.

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >
>::rank1(const Matrix< Scalar > &A, const Matrix< Scalar > &alpha, const
Matrix< Scalar > &x, const Matrix< Scalar > &y) "

Make a rank-1 update to a matrix A Calculates A + 1/2 * alpha * x*y'.

";

%feature("docstring") casadi::Matrix "

Sparse matrix class. SX and DM are specializations.

General sparse matrix class that is designed with the idea that \"everything
is a matrix\", that is, also scalars and vectors. This philosophy makes it
easy to use and to interface in particularly with Python and Matlab/Octave.
Index starts with 0. Index vec happens as follows: (rr, cc) -> k =
rr+cc*size1() Vectors are column vectors.  The storage format is Compressed
Column Storage (CCS), similar to that used for sparse matrices in Matlab,
but unlike this format, we do allow for elements to be structurally non-zero
but numerically zero.  Matrix<Scalar> is polymorphic with a
std::vector<Scalar> that contain all non-identical-zero elements. The
sparsity can be accessed with Sparsity& sparsity() Joel Andersson

C++ includes: casadi_common.hpp ";

%feature("docstring")  casadi::SX::dep(int ch=0) const  "

[INTERNAL]  Get expressions of the children of the expression Only defined
if symbolic scalar. Wraps SXElem SXElem::dep(int ch=0) const.

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >  >::sym(const
std::string &name, int nrow=1, int ncol=1) "

Create an nrow-by-ncol symbolic primitive.

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >  >::sym(const
std::string &name, const std::pair< int, int > &rc) "

Construct a symbolic primitive with given dimensions.

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >  >::sym(const
std::string &name, const Sparsity &sp) "

Create symbolic primitive with a given sparsity pattern.

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >  >::sym(const
std::string &name, const Sparsity &sp, int p) "

Create a vector of length p with with matrices with symbolic primitives of
given sparsity.

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >  >::sym(const
std::string &name, int nrow, int ncol, int p) "

Create a vector of length p with nrow-by-ncol symbolic primitives.

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >  >::sym(const
std::string &name, const Sparsity &sp, int p, int r) "

Create a vector of length r of vectors of length p with symbolic primitives
with given sparsity.

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >  >::sym(const
std::string &name, int nrow, int ncol, int p, int r) "

Create a vector of length r of vectors of length p with nrow-by-ncol
symbolic primitives.

";

%feature("docstring")  eig_symbolic(const Matrix< Scalar > &m) "

Attempts to find the eigenvalues of a symbolic matrix This will only work
for up to 3x3 matrices.

";

%feature("docstring")  casadi::SX::is_leaf() const  "

[INTERNAL]  Check if SX is a leaf of the SX graph.

Only defined if symbolic scalar.

";

%feature("docstring")  sparsify(const Matrix< Scalar > &A, double tol=0) "

Make a matrix sparse by removing numerical zeros.

";

%feature("docstring")  cofactor(const Matrix< Scalar > &x, int i, int j) "

Get the (i,j) cofactor matrix.

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >
>::colind(int col) const "

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring")  casadi::Matrix< T >::print_dense(std::ostream
&stream, bool truncate=true) const  "

Print dense matrix-stype.

";

%feature("docstring")  ldl(const Matrix< Scalar > &A, Matrix< Scalar > &L,
Matrix< Scalar > &D) "

Sparse LDL factorization Only guarenteed to work for positive definite
matrices.

";

%feature("docstring")  casadi::Matrix< T >::matrix_scalar(int op, const
Matrix< Scalar > &x, const Matrix< Scalar > &y) "

[INTERNAL]  Create nodes by their ID.

";

%feature("docstring")  casadi::Matrix< T >::nan(const Sparsity &sp) "

create a matrix with all nan

";

%feature("docstring")  casadi::Matrix< T >::nan(int nrow=1, int ncol=1) "

create a matrix with all nan

";

%feature("docstring")  casadi::Matrix< T >::nan(const std::pair< int, int >
&rc) "

create a matrix with all nan

";

%feature("docstring")  casadi::SX::is_commutative() const  "

[INTERNAL]  Check whether a binary SX is commutative.

Only defined if symbolic scalar.

";

%feature("docstring")  casadi::SX::is_valid_input() const  "

[INTERNAL]  Check if matrix can be used to define function inputs. Sparse
matrices can return true if all non-zero elements are symbolic.

";

%feature("docstring")  heaviside(const Matrix< Scalar > &x) "

Heaviside function.

\\\\[ \\\\begin {cases} H(x) = 0 & x<0 \\\\\\\\ H(x) = 1/2 & x=0 \\\\\\\\
H(x) = 1 & x>0 \\\\\\\\ \\\\end {cases} \\\\]

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >  >::size()
const "

Get the shape.

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >  >::size(int
axis) const "

Get the size along a particular dimensions.

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >
>::mpower(const Matrix< Scalar > &x, const Matrix< Scalar > &y) "

Functions called by friend functions defined here

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >  >::size1()
const "

Get the first dimension (i.e. number of rows)

";

%feature("docstring")  casadi::Matrix< T >::is_one() const  "

check if the matrix is 1 (note that false negative answers are possible)

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >  >::is_row()
const "

Check if the matrix is a row vector (i.e. size1()==1)

";

%feature("docstring") casadi::Matrix::__nonzero__ "

Returns the truth value of a Matrix.

";

%feature("docstring") casadi::Matrix::__nonzero__ "

[INTERNAL] ";

%feature("docstring")  taylor(const Matrix< Scalar > &ex, const Matrix<
Scalar > &x, const Matrix< Scalar > &a, int order=1) "

univariate Taylor series expansion

Calculate the Taylor expansion of expression 'ex' up to order 'order' with
respect to variable 'x' around the point 'a'

$(x)=f(a)+f'(a)(x-a)+f''(a)\\\\frac
{(x-a)^2}{2!}+f'''(a)\\\\frac{(x-a)^3}{3!}+\\\\ldots$

Example usage:

::

>>   x



";

%feature("docstring")  taylor(const Matrix< Scalar > &ex, const Matrix<
Scalar > &x) "

univariate Taylor series expansion

Calculate the Taylor expansion of expression 'ex' up to order 'order' with
respect to variable 'x' around the point 'a'

$(x)=f(a)+f'(a)(x-a)+f''(a)\\\\frac
{(x-a)^2}{2!}+f'''(a)\\\\frac{(x-a)^3}{3!}+\\\\ldots$

Example usage:

::

>>   x



";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >  >::size2()
const "

Get the second dimension (i.e. number of columns)

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >
>::is_square() const "

Check if the matrix expression is square.

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >
>::tangent(const Matrix< Scalar > &ex, const Matrix< Scalar > &arg) "

Functions called by friend functions defined here

";

%feature("docstring")  casadi::Matrix< T >::has_nz(int rr, int cc) const  "

Returns true if the matrix has a non-zero at location rr, cc.

";

%feature("docstring")  casadi::Matrix< T >::is_eye() const  "

check if the matrix is an identity matrix (note that false negative answers
are possible)

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >
>::is_empty(bool both=false) const "

Check if the sparsity is empty, i.e. if one of the dimensions is zero (or
optionally both dimensions)

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >
>::linearize(const Matrix< Scalar > &f, const Matrix< Scalar > &x, const
Matrix< Scalar > &x0) "

Functions called by friend functions defined here

";

%feature("docstring")  casadi::SX::reset_input() const  "

[INTERNAL]  Reset the marker for an input expression.

";

%feature("docstring")  poly_coeff(const Matrix< Scalar > &f, const Matrix<
Scalar > &x) "

extracts polynomial coefficients from an expression

Parameters:
-----------

ex:  Scalar expression that represents a polynomial

x:  Scalar symbol that the polynomial is build up with

";

%feature("docstring")  casadi::Matrix< T >::printme(const Matrix< Scalar >
&y) const  "

";

%feature("docstring")  gauss_quadrature(const Matrix< Scalar > &f, const
Matrix< Scalar > &x, const Matrix< Scalar > &a, const Matrix< Scalar > &b,
int order=5) "

Integrate f from a to b using Gaussian quadrature with n points.

";

%feature("docstring")  gauss_quadrature(const Matrix< Scalar > &f, const
Matrix< Scalar > &x, const Matrix< Scalar > &a, const Matrix< Scalar > &b,
int order, const Matrix< Scalar > &w) "

Matrix adjoint.

";

%feature("docstring")  casadi::Matrix< T >::set_scientific(bool scientific)
"

Set the 'precision, width & scientific' used in printing and serializing to
streams.

";

%feature("docstring")  qr_sparse(const Matrix< Scalar > &A, Matrix< Scalar >
&V, Matrix< Scalar > &R, Matrix< Scalar > &beta, std::vector< int > &pinv) "

Sparse direct QR factorization See T. Davis: Direct Methods for Sparse
Linear Systems.

";

%feature("docstring")  pw_const(const Matrix< Scalar > &t, const Matrix<
Scalar > &tval, const Matrix< Scalar > &val) "

Create a piecewise constant function Create a piecewise constant function
with n=val.size() intervals.

Inputs:

Parameters:
-----------

t:  a scalar variable (e.g. time)

tval:  vector with the discrete values of t at the interval transitions
(length n-1)

val:  vector with the value of the function for each interval (length n)

";

%feature("docstring")  casadi::Matrix< T >::enlarge(int nrow, int ncol,
const std::vector< int > &rr, const std::vector< int > &cc, bool ind1=false)
"

Enlarge matrix Make the matrix larger by inserting empty rows and columns,
keeping the existing non-zeros.

";

%feature("docstring")  casadi::Matrix< T >::get_str(bool more=false) const
"

Get string representation.

";

%feature("docstring")  casadi::SX::is_symbolic() const  "

[INTERNAL]  Check if symbolic (Dense) Sparse matrices invariable return
false.

";

%feature("docstring")  pw_lin(const Matrix< Scalar > &t, const Matrix<
Scalar > &tval, const Matrix< Scalar > &val) "

t a scalar variable (e.g. time)

Create a piecewise linear function Create a piecewise linear function:

Inputs: tval vector with the the discrete values of t (monotonically
increasing) val vector with the corresponding function values (same length
as tval)

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >
>::is_column() const "

Check if the matrix is a column vector (i.e. size2()==1)

";

%feature("docstring") casadi::Matrix< T >::Matrix() "

constructors

empty 0-by-0 matrix constructor

";

%feature("docstring") casadi::Matrix< T >::Matrix(const Matrix< Scalar > &m)
"

Copy constructor.

";

%feature("docstring") casadi::Matrix< T >::Matrix(int nrow, int ncol) "

Create a sparse matrix with all structural zeros.

";

%feature("docstring") casadi::Matrix< T >::Matrix(const Sparsity &sp) "

Create a sparse matrix from a sparsity pattern. Same as
Matrix::ones(sparsity)

";

%feature("docstring") casadi::Matrix< T >::Matrix(const Sparsity &sp, const
Matrix< Scalar > &d) "

Construct matrix with a given sparsity and nonzeros.

";

%feature("docstring") casadi::Matrix< T >::Matrix(double val) "

This constructor enables implicit type conversion from a numeric type.

";

%feature("docstring") casadi::Matrix< T >::Matrix(const std::vector<
std::vector< double > > &m) "

Dense matrix constructor with data given as vector of vectors.

";

%feature("docstring") casadi::Matrix< T >::Matrix(const std::vector< A > &x)
"

Create an expression from a vector.

";

%feature("docstring") casadi::Matrix< T >::Matrix(const Matrix< A > &x) "

Create a matrix from another matrix with a different entry type Assumes that
the scalar conversion is valid.

";

%feature("docstring")  chol(const Matrix< Scalar > &A) "

Obtain a Cholesky factorisation of a matrix Performs and LDL transformation
[L,D] = ldl(A) and returns diag(sqrt(D))*L'.

";

%feature("docstring")  rectangle(const Matrix< Scalar > &x) "

rectangle function

\\\\[ \\\\begin {cases} \\\\Pi(x) = 1 & |x| < 1/2 \\\\\\\\ \\\\Pi(x) = 1/2 &
|x| = 1/2 \\\\\\\\ \\\\Pi(x) = 0 & |x| > 1/2 \\\\\\\\ \\\\end {cases} \\\\]

Also called: gate function, block function, band function, pulse function,
window function

";

%feature("docstring")  casadi::Matrix< T >::is_zero() const  "

check if the matrix is 0 (note that false negative answers are possible)

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >
>::is_vector() const "

Check if the matrix is a row or column vector.

";

%feature("docstring")  casadi::Matrix< T >::matrix_matrix(int op, const
Matrix< Scalar > &x, const Matrix< Scalar > &y) "

[INTERNAL]  Create nodes by their ID.

";

%feature("docstring")  casadi::Matrix< T >::binary(int op, const Matrix<
Scalar > &x, const Matrix< Scalar > &y) "

[INTERNAL]  Create nodes by their ID.

";

%feature("docstring")  casadi::Matrix< Scalar >::get_nonzeros() const  "

Get all nonzeros.

Implementation of Matrix::get_nonzeros (in public API)

";

%feature("docstring")  casadi::Matrix< T >::disp(std::ostream &stream, bool
more=false) const  "

Print a representation of the object.

";

%feature("docstring")  casadi::SX::has_duplicates() const  "

[INTERNAL]  Detect duplicate symbolic expressions If there are symbolic
primitives appearing more than once, the function will return true and the
names of the duplicate expressions will be passed to casadi_warning. Note:
Will mark the node using SXElem::set_temp. Make sure to call reset_input()
after usage.

";

%feature("docstring")  casadi::SX::name() const  "

[INTERNAL]  Get name (only if symbolic scalar)

";

%feature("docstring")  casadi::Matrix< T >::has_zeros() const  "

Check if the matrix has any zero entries which are not structural zeros.

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >
>::is_scalar(bool scalar_and_dense=false) const "

Check if the matrix expression is scalar.

";

%feature("docstring")  casadi::GenericMatrix< Matrix< Scalar >
>::get_colind() const "

Get the sparsity pattern. See the Sparsity class for details.

";


// File: classcasadi_1_1MinusInfSX.xml


// File: classcasadi_1_1MinusOneSX.xml


// File: classcasadi_1_1MMax.xml


// File: classcasadi_1_1MMin.xml


// File: classcasadi_1_1Monitor.xml


// File: classcasadi_1_1MultipleOutput.xml


// File: classcasadi_1_1Multiplication.xml


// File: classcasadi_1_1MX.xml


/*  Construct symbolic primitives  */

/* The \"sym\" function is intended to work in a similar way as \"sym\" used
in the Symbolic Toolbox for Matlab but instead creating a CasADi symbolic
primitive.

*/ %feature("docstring")  casadi::MX::get_output(int oind) const  "

Get an output.

";

%feature("docstring")  casadi::SharedObject::disp(std::ostream &stream, bool
more=false) const  "

Print a description of the object.

";

%feature("docstring")  casadi::MX::attachAssert(const MX &y, const
std::string &fail_message="") const  "

returns itself, but with an assertion attached

If y does not evaluate to 1, a runtime error is raised

";

%feature("docstring")  casadi::GenericMatrix< MX  >::jtimes(const MX &ex,
const MX &arg, const MX &v, bool tr=false) "

Functions called by friend functions defined here

";

%feature("docstring")  inv_node(const MX &x) "

Inverse node.

";

%feature("docstring") casadi::MX "

MX - Matrix expression.

The MX class is used to build up trees made up from MXNodes. It is a more
general graph representation than the scalar expression, SX, and much less
efficient for small objects. On the other hand, the class allows much more
general operations than does SX, in particular matrix valued operations and
calls to arbitrary differentiable functions.

The MX class is designed to have identical syntax with the Matrix<> template
class, and uses DM (i.e. Matrix<double>) as its internal representation of
the values at a node. By keeping the syntaxes identical, it is possible to
switch from one class to the other, as well as inlining MX functions to
SXElem functions.

Note that an operation is always \"lazy\", making a matrix multiplication
will create a matrix multiplication node, not perform the actual
multiplication.

Joel Andersson

C++ includes: mx.hpp ";

%feature("docstring")  casadi::GenericMatrix< MX  >::is_scalar(bool
scalar_and_dense=false) const "

Check if the matrix expression is scalar.

";

%feature("docstring")  casadi::MX::erase(const std::vector< int > &rr, const
std::vector< int > &cc, bool ind1=false) "

Erase a submatrix (leaving structural zeros in its place) Erase rows and/or
columns of a matrix.

";

%feature("docstring")  casadi::MX::erase(const std::vector< int > &rr, bool
ind1=false) "

Erase a submatrix (leaving structural zeros in its place) Erase elements of
a matrix.

";

%feature("docstring")  casadi::MX::monitor(const std::string &comment) const
"

Monitor an expression Returns itself, but with the side effect of printing
the nonzeros along with a comment.

";

%feature("docstring")  casadi::MX::primitives() const  "

Get primitives.

";

%feature("docstring")  casadi::SharedObject::print_ptr(std::ostream
&stream=casadi::uout()) const  "

[INTERNAL]  Print the pointer to the internal class

";

%feature("docstring")  casadi::GenericMatrix< MX  >::columns() const "

Get the number of columns, Octave-style syntax.

";

%feature("docstring")  casadi::MX::is_constant() const  "

Check if constant.

";

%feature("docstring")  casadi::MX::is_output() const  "

Check if evaluation output.

";

%feature("docstring")  casadi::MX::set(const MX &m, bool ind1, const Slice
&rr) "

Set a submatrix, single argument

";

%feature("docstring")  casadi::MX::set(const MX &m, bool ind1, const Matrix<
int > &rr) "

Set a submatrix, single argument

";

%feature("docstring")  casadi::MX::set(const MX &m, bool ind1, const
Sparsity &sp) "

Set a submatrix, single argument

";

%feature("docstring")  casadi::MX::set(const MX &m, bool ind1, const Slice
&rr, const Slice &cc) "

";

%feature("docstring")  casadi::MX::set(const MX &m, bool ind1, const Slice
&rr, const Matrix< int > &cc) "

";

%feature("docstring")  casadi::MX::set(const MX &m, bool ind1, const Matrix<
int > &rr, const Slice &cc) "

";

%feature("docstring")  casadi::MX::set(const MX &m, bool ind1, const Matrix<
int > &rr, const Matrix< int > &cc) "

";

%feature("docstring")  casadi::MX::is_valid_input() const  "

Check if matrix can be used to define function inputs. Valid inputs for
MXFunctions are combinations of Reshape, concatenations and SymbolicMX.

";

%feature("docstring")  casadi::MX::binary(int op, const MX &x, const MX &y)
"

Create nodes by their ID.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::sparsity() const "

Get the sparsity pattern.

";

%feature("docstring")  lift(const MX &x, const MX &x_guess) "

Lift the expression Experimental feature.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::gradient(const MX &ex,
const MX &arg) "

Functions called by friend functions defined here

";

%feature("docstring")  casadi::GenericMatrix< MX  >::is_tril() const "

Check if the matrix is lower triangular.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::size2() const "

Get the second dimension (i.e. number of columns)

";

%feature("docstring")  casadi::GenericMatrix< MX  >::size1() const "

Get the first dimension (i.e. number of rows)

";

%feature("docstring")  casadi::GenericMatrix< MX  >::linearize(const MX &f,
const MX &x, const MX &x0) "

Functions called by friend functions defined here

";

%feature("docstring")  casadi::MX::is_op(int op) const  "

Is it a certain operation.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::is_triu() const "

Check if the matrix is upper triangular.

";

%feature("docstring") casadi::MX::~MX "

[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::MX::set_nz(const MX &m, bool ind1, const
Slice &kk) "

Set a set of nonzeros

";

%feature("docstring")  casadi::MX::set_nz(const MX &m, bool ind1, const
Matrix< int > &kk) "

Set a set of nonzeros

";

%feature("docstring")  casadi::MX::n_out() const  "

Number of outputs.

";

%feature("docstring")  casadi::MX::set_temp(int t) const  "

[INTERNAL]  Set the temporary variable.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::rows() const "

Get the number of rows, Octave-style syntax.

";

%feature("docstring")  casadi::MX::is_one() const  "

check if zero (note that false negative answers are possible)

";

%feature("docstring")  casadi::GenericMatrix< MX  >::is_empty(bool
both=false) const "

Check if the sparsity is empty, i.e. if one of the dimensions is zero (or
optionally both dimensions)

";

%feature("docstring")  casadi::MX::get_nz(MX &output_m, bool ind1, const
Slice &kk) const  "

Get a set of nonzeros

";

%feature("docstring")  casadi::MX::get_nz(MX &output_m, bool ind1, const
Matrix< int > &kk) const  "

Get a set of nonzeros

";

%feature("docstring")  casadi::GenericMatrix< MX  >::ones(int nrow=1, int
ncol=1) "

Create a dense matrix or a matrix with specified sparsity with all entries
one.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::ones(const Sparsity
&sp) "

Create a dense matrix or a matrix with specified sparsity with all entries
one.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::ones(const std::pair<
int, int > &rc) "

Create a dense matrix or a matrix with specified sparsity with all entries
one.

";

%feature("docstring")  casadi::MX::is_transpose() const  "

Is the expression a transpose?

";

%feature("docstring")  casadi::MX::is_binary() const  "

Is binary operation.

";

%feature("docstring")  casadi::MX::inf(const Sparsity &sp) "

create a matrix with all inf

";

%feature("docstring")  casadi::MX::inf(int nrow=1, int ncol=1) "

create a matrix with all inf

";

%feature("docstring")  casadi::MX::inf(const std::pair< int, int > &rc) "

create a matrix with all inf

";

%feature("docstring")  matrix_expand(const MX &e, const std::vector< MX >
&boundary=std::vector< MX >(), const Dict &options=Dict()) "

Expand MX graph to SXFunction call.

Expand the given expression e, optionally supplying expressions contained in
it at which expansion should stop.

";

%feature("docstring")  matrix_expand(const std::vector< MX > &e, const
std::vector< MX > &boundary=std::vector< MX >(), const Dict &options=Dict())
"

Expand MX graph to SXFunction call.

Expand the given expression e, optionally supplying expressions contained in
it at which expansion should stop.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::colind(int col) const "

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring")  casadi::MX::is_symbolic() const  "

Check if symbolic.

";

%feature("docstring")  casadi::MX::is_eye() const  "

check if identity

";

%feature("docstring")  casadi::MX::join_primitives(const std::vector< MX >
&v) const  "

Join an expression along symbolic primitives.

";

%feature("docstring")  casadi::MX::reset_input() const  "

[INTERNAL]  Reset the marker for an input expression.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::get_colind() const "

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring")  casadi::SharedObject::is_null() const  "

Is a null pointer?

";

%feature("docstring")  casadi::MX::is_multiplication() const  "

Check if multiplication.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::nnz() const "

Get the number of (structural) non-zero elements.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::dim(bool with_nz=false)
const "

Get string representation of dimensions. The representation is e.g. \"4x5\"
or \"4x5,10nz\".

";

%feature("docstring")  find(const MX &x) "

Find first nonzero If failed, returns the number of rows.

";

%feature("docstring")  casadi::MX::is_minus_one() const  "

check if zero (note that false negative answers are possible)

";

%feature("docstring")  graph_substitute(const MX &ex, const std::vector< MX
> &v, const std::vector< MX > &vdef) "

Substitute single expression in graph Substitute variable v with expression
vdef in an expression ex, preserving nodes.

";

%feature("docstring")  graph_substitute(const std::vector< MX > &ex, const
std::vector< MX > &v, const std::vector< MX > &vdef) "

Substitute multiple expressions in graph Substitute variable var with
expression expr in multiple expressions, preserving nodes.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::get_row() const "

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring")  casadi::MX::is_call() const  "

Check if evaluation.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::nnz_upper() const "

Get the number of non-zeros in the upper triangular half.

";

%feature("docstring")  casadi::MX::get_temp() const  "

[INTERNAL]  Get the temporary variable

";

%feature("docstring") casadi::MX::__hash__ "

Returns a number that is unique for a given Node. If the Object does not
point to any node, \"0\" is returned.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::zeros(int nrow=1, int
ncol=1) "

Create a dense matrix or a matrix with specified sparsity with all entries
zero.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::zeros(const Sparsity
&sp) "

Create a dense matrix or a matrix with specified sparsity with all entries
zero.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::zeros(const std::pair<
int, int > &rc) "

Create a dense matrix or a matrix with specified sparsity with all entries
zero.

";

%feature("docstring")  casadi::MX::is_zero() const  "

check if zero (note that false negative answers are possible)

";

%feature("docstring")  casadi::SharedObject::get_str(bool more=false) const
"

Get string representation.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::size() const "

Get the shape.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::size(int axis) const "

Get the size along a particular dimensions.

";

%feature("docstring")  casadi::MX::T() const  "

Transpose the matrix.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::is_vector() const "

Check if the matrix is a row or column vector.

";

%feature("docstring")  casadi::MX::printme(const MX &y) const  "

";

%feature("docstring")  casadi::MX::nan(const Sparsity &sp) "

create a matrix with all nan

";

%feature("docstring")  casadi::MX::nan(int nrow=1, int ncol=1) "

create a matrix with all nan

";

%feature("docstring")  casadi::MX::nan(const std::pair< int, int > &rc) "

create a matrix with all nan

";

%feature("docstring")  casadi::GenericMatrix< MX  >::row(int el) const "

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring")  casadi::MX::n_dep() const  "

Get the number of dependencies of a binary SXElem.

";

%feature("docstring")  casadi::MX::has_duplicates() const  "

[INTERNAL]  Detect duplicate symbolic expressions If there are symbolic
primitives appearing more than once, the function will return true and the
names of the duplicate expressions will be passed to casadi_warning. Note:
Will mark the node using MX::set_temp. Make sure to call reset_input() after
usage.

";

%feature("docstring")  casadi::SharedObject::class_name() const  "

Get class name.

";

%feature("docstring")  casadi::MX::is_norm() const  "

Check if norm.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::mpower(const MX &x,
const MX &y) "

Functions called by friend functions defined here

";

%feature("docstring")  casadi::GenericMatrix< MX  >::numel() const "

Get the number of elements.

";

%feature("docstring")  casadi::MX::enlarge(int nrow, int ncol, const
std::vector< int > &rr, const std::vector< int > &cc, bool ind1=false) "

Enlarge matrix Make the matrix larger by inserting empty rows and columns,
keeping the existing non-zeros.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::sym(const std::string
&name, int nrow=1, int ncol=1) "

Create an nrow-by-ncol symbolic primitive.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::sym(const std::string
&name, const std::pair< int, int > &rc) "

Construct a symbolic primitive with given dimensions.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::sym(const std::string
&name, const Sparsity &sp) "

Create symbolic primitive with a given sparsity pattern.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::sym(const std::string
&name, const Sparsity &sp, int p) "

Create a vector of length p with with matrices with symbolic primitives of
given sparsity.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::sym(const std::string
&name, int nrow, int ncol, int p) "

Create a vector of length p with nrow-by-ncol symbolic primitives.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::sym(const std::string
&name, const Sparsity &sp, int p, int r) "

Create a vector of length r of vectors of length p with symbolic primitives
with given sparsity.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::sym(const std::string
&name, int nrow, int ncol, int p, int r) "

Create a vector of length r of vectors of length p with nrow-by-ncol
symbolic primitives.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::tangent(const MX &ex,
const MX &arg) "

Functions called by friend functions defined here

";

%feature("docstring")  casadi::GenericMatrix< MX  >::is_square() const "

Check if the matrix expression is square.

";

%feature("docstring")  casadi::MX::get(MX &output_m, bool ind1, const Slice
&rr) const  "

Get a submatrix, single argument

";

%feature("docstring")  casadi::MX::get(MX &output_m, bool ind1, const
Matrix< int > &rr) const  "

Get a submatrix, single argument

";

%feature("docstring")  casadi::MX::get(MX &output_m, bool ind1, const
Sparsity &sp) const  "

Get a submatrix, single argument

";

%feature("docstring")  casadi::MX::get(MX &output_m, bool ind1, const Slice
&rr, const Slice &cc) const  "

Get a submatrix, two arguments

";

%feature("docstring")  casadi::MX::get(MX &output_m, bool ind1, const Slice
&rr, const Matrix< int > &cc) const  "

Get a submatrix, two arguments

";

%feature("docstring")  casadi::MX::get(MX &output_m, bool ind1, const
Matrix< int > &rr, const Slice &cc) const  "

Get a submatrix, two arguments

";

%feature("docstring")  casadi::MX::get(MX &output_m, bool ind1, const
Matrix< int > &rr, const Matrix< int > &cc) const  "

Get a submatrix, two arguments

";

%feature("docstring")  casadi::MX::einstein(const MX &A, const MX &B, const
MX &C, const std::vector< int > &dim_a, const std::vector< int > &dim_b,
const std::vector< int > &dim_c, const std::vector< int > &a, const
std::vector< int > &b, const std::vector< int > &c) "

Computes an einstein dense tensor contraction.

Computes the product: C_c = A_a + B_b where a b c are index/einstein
notation in an encoded form

For example, an matrix-matrix product may be written as: C_ij = A_ik B_kj

The encoded form uses strictly negative numbers to indicate labels. For the
above example, we would have: a {-1, -3} b {-3, -2} c {-1 -2}

";

%feature("docstring")  casadi::MX::einstein(const MX &A, const MX &B, const
std::vector< int > &dim_a, const std::vector< int > &dim_b, const
std::vector< int > &dim_c, const std::vector< int > &a, const std::vector<
int > &b, const std::vector< int > &c) "

Computes an einstein dense tensor contraction.

Computes the product: C_c = A_a + B_b where a b c are index/einstein
notation in an encoded form

For example, an matrix-matrix product may be written as: C_ij = A_ik B_kj

The encoded form uses strictly negative numbers to indicate labels. For the
above example, we would have: a {-1, -3} b {-3, -2} c {-1 -2}

";

%feature("docstring")  casadi::GenericMatrix< MX  >::is_column() const "

Check if the matrix is a column vector (i.e. size2()==1)

";

%feature("docstring") casadi::MX::__nonzero__ "

Returns the truth value of an MX expression.

";

%feature("docstring")  casadi::MX::name() const  "

Get the name.

";

%feature("docstring")  casadi::MX::info() const  "

Obtain information about node

";

%feature("docstring")  casadi::MX::which_function() const  "

Get function - only valid when is_call() is true.

";

%feature("docstring") casadi::MX::MX() "

Default constructor.

";

%feature("docstring") casadi::MX::MX(int nrow, int ncol) "

Create a sparse matrix with all structural zeros.

";

%feature("docstring") casadi::MX::MX(const Sparsity &sp) "

Create a sparse matrix from a sparsity pattern. Same as MX::ones(sparsity)

";

%feature("docstring") casadi::MX::MX(const Sparsity &sp, const MX &val) "

Construct matrix with a given sparsity and nonzeros.

";

%feature("docstring") casadi::MX::MX(double x) "

Create scalar constant (also implicit type conversion)

";

%feature("docstring") casadi::MX::MX(const MX &x) "

Copy constructor.

";

%feature("docstring") casadi::MX::MX(const std::vector< double > &x) "

Create vector constant (also implicit type conversion)

";

%feature("docstring") casadi::MX::MX(const Matrix< double > &x) "

Create sparse matrix constant (also implicit type conversion)

";

%feature("docstring")  casadi::GenericMatrix< MX  >::rank1(const MX &A,
const MX &alpha, const MX &x, const MX &y) "

Make a rank-1 update to a matrix A Calculates A + 1/2 * alpha * x*y'.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::bilin(const MX &A,
const MX &x, const MX &y) "

Calculate bilinear form x^T A y.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::nnz_lower() const "

Get the number of non-zeros in the lower triangular half.

";

%feature("docstring")  casadi::MX::is_unary() const  "

Is unary operation.

";

%feature("docstring")  casadi::MX::is_commutative() const  "

Check if commutative operation.

";

%feature("docstring")  casadi::MX::mapping() const  "

Get an IM representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring")  casadi::MX::split_primitives(const MX &x) const  "

Split up an expression along symbolic primitives.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::is_dense() const "

Check if the matrix expression is dense.

";

%feature("docstring")  casadi::MX::op() const  "

Get operation type.

";

%feature("docstring")  casadi::MX::n_primitives() const  "

Get the number of primitives for MXFunction inputs/outputs.

";

%feature("docstring")  casadi::MX::dep(int ch=0) const  "

Get the nth dependency as MX.

";

%feature("docstring")  casadi::MX::get_sparsity() const  "

Get an owning reference to the sparsity pattern.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::nnz_diag() const "

Get get the number of non-zeros on the diagonal.

";

%feature("docstring")  casadi::MX::unary(int op, const MX &x) "

Create nodes by their ID.

";

%feature("docstring")  casadi::MX::which_output() const  "

Get the index of evaluation output - only valid when is_output() is true.

";

%feature("docstring")  casadi::MX::is_regular() const  "

Checks if expression does not contain NaN or Inf.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::is_row() const "

Check if the matrix is a row vector (i.e. size1()==1)

";


// File: classcasadi_1_1MXFunction.xml


// File: classcasadi_1_1NanSX.xml


// File: classcasadi_1_1Newton.xml
%feature("docstring")  casadi::FunctionInternal::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")  casadi::FunctionInternal::get_max_in(int ind) const
"

[INTERNAL]  Get largest input value.

";

%feature("docstring")  casadi::OracleFunction::jit_dependencies(const
std::string &fname) override "

[INTERNAL]  JIT for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::definition() const  "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring")  casadi::FunctionInternal::symbolic_output(const
std::vector< MX > &arg) const  "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M > > &fseed) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring") casadi::Newton::Newton(const std::string &name, const
Function &f) "

[INTERNAL]  Constructor.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(int nadj) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::OracleFunction::expand() "

[INTERNAL] ";

%feature("docstring")  casadi::Rootfinder::get_sparsity_in(int i) override "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::Rootfinder::get_reverse(int nadj, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const override "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::FunctionInternal::get_default_in(int ind)
const  "

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::OracleFunction::get_function() const override
"

[INTERNAL] ";

%feature("docstring")  casadi::OracleFunction::get_function(const
std::string &name) const override "

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::FunctionInternal::jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOutput(int k)
const  "

[DEPRECATED] Renamed instruction_output

";

%feature("docstring")  casadi::FunctionInternal::get_free() const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(int iind, int
oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::Newton::class_name() const override "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring")
casadi::FunctionInternal::codegen_sparsities(CodeGenerator &g) const  "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring")  casadi::FunctionInternal::get_partition(int iind, int
oind, Sparsity &D1, Sparsity &D2, bool compact, bool symmetric, bool
allow_forward, bool allow_reverse) const  "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::export_code(const
std::string &lang, std::ostream &stream, const Dict &options) const  "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring")  casadi::FunctionInternal::instruction_input(int k)
const  "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(int iind,
int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::get_abstol() const  "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring")  casadi::FunctionInternal::matching_res(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

";

%feature("docstring")  casadi::OracleFunction::set_temp(void *mem, const
double **arg, double **res, int *iw, double *w) const override "

[INTERNAL]  Set the work vectors.

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< int > &order_in, const std::vector< int >
&order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::Rootfinder::get_n_out() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::Rootfinder::get_sparsity_out(int i) override
"

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::Newton::plugin_name() const override "

[INTERNAL] ";

%feature("docstring")  casadi::Rootfinder::sp_forward(const bvec_t **arg,
bvec_t **res, int *iw, bvec_t *w, void *mem) const override "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, int order, bool
tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::OracleFunction::has_function(const
std::string &fname) const override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::reverse(int nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::instruction_constant(int k)
const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::fwd_seed(int nfwd) const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")
casadi::FunctionInternal::codegen_declarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::Newton::init(const Dict &opts) override "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::FunctionInternal::codegen_body(CodeGenerator
&g) const  "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring")  casadi::FunctionInternal::size_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::OracleFunction::calc_function(OracleMemory
*m, const std::string &fcn, const double *const *arg=0) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::sx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Newton::~Newton "

[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::OracleFunction::oracle() const override "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FunctionInternal::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::Rootfinder::ad_forward(const std::vector< MX
> &arg, const std::vector< MX > &res, const std::vector< std::vector< MX > >
&fseed, std::vector< std::vector< MX > > &fsens, bool always_inline, bool
never_inline) const  "

[INTERNAL]  Create call to (cached) derivative function, forward mode.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M > > &aseed) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::FunctionInternal::info() const  "

[INTERNAL]  Obtain information about function

";

%feature("docstring")  casadi::FunctionInternal::size1_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::Rootfinder::sp_reverse(bvec_t **arg, bvec_t
**res, int *iw, bvec_t *w, void *mem) const override "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::instruction_id(int k) const
"

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::Rootfinder::has_spfwd() const override "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::Rootfinder::ad_reverse(const std::vector< MX
> &arg, const std::vector< MX > &res, const std::vector< std::vector< MX > >
&aseed, std::vector< std::vector< MX > > &asens, bool always_inline, bool
never_inline) const  "

[INTERNAL]  Create call to (cached) derivative function, reverse mode.

";

%feature("docstring")  casadi::Rootfinder::has_reverse(int nadj) const
override "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::FunctionInternal::check_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

";

%feature("docstring") casadi::Newton "

'newton' plugin for Rootfinder

Implements simple newton iterations to solve an implicit function.

>List of available options

+-----------------+-----------+--------------------------------------------+
|       Id        |   Type    |                Description                 |
+=================+===========+============================================+
| abstol          | OT_DOUBLE | Stopping criterion tolerance on max(|F|)   |
+-----------------+-----------+--------------------------------------------+
| abstolStep      | OT_DOUBLE | Stopping criterion tolerance on step size  |
+-----------------+-----------+--------------------------------------------+
| max_iter        | OT_INT    | Maximum number of Newton iterations to     |
|                 |           | perform before returning.                  |
+-----------------+-----------+--------------------------------------------+
| print_iteration | OT_BOOL   | Print information about each iteration     |
+-----------------+-----------+--------------------------------------------+

Joris Gillis

>List of available options

+-------------------+--------------+-------------------+-------------------+
|        Id         |     Type     |    Description    |      Used in      |
+===================+==============+===================+===================+
| abstol            | OT_DOUBLE    | Stopping          | casadi::Newton    |
|                   |              | criterion         |                   |
|                   |              | tolerance on      |                   |
|                   |              | max(|F|)          |                   |
+-------------------+--------------+-------------------+-------------------+
| abstolStep        | OT_DOUBLE    | Stopping          | casadi::Newton    |
|                   |              | criterion         |                   |
|                   |              | tolerance on step |                   |
|                   |              | size              |                   |
+-------------------+--------------+-------------------+-------------------+
| constraints       | OT_INTVECTOR | Constrain the     | casadi::Rootfinde |
|                   |              | unknowns. 0       | r                 |
|                   |              | (default): no     |                   |
|                   |              | constraint on ui, |                   |
|                   |              | 1: ui >= 0.0, -1: |                   |
|                   |              | ui <= 0.0, 2: ui  |                   |
|                   |              | > 0.0, -2: ui <   |                   |
|                   |              | 0.0.              |                   |
+-------------------+--------------+-------------------+-------------------+
| implicit_input    | OT_INT       | Index of the      | casadi::Rootfinde |
|                   |              | input that        | r                 |
|                   |              | corresponds to    |                   |
|                   |              | the actual root-  |                   |
|                   |              | finding           |                   |
+-------------------+--------------+-------------------+-------------------+
| implicit_output   | OT_INT       | Index of the      | casadi::Rootfinde |
|                   |              | output that       | r                 |
|                   |              | corresponds to    |                   |
|                   |              | the actual root-  |                   |
|                   |              | finding           |                   |
+-------------------+--------------+-------------------+-------------------+
| jacobian_function | OT_FUNCTION  | Function object   | casadi::Rootfinde |
|                   |              | for calculating   | r                 |
|                   |              | the Jacobian      |                   |
|                   |              | (autogenerated by |                   |
|                   |              | default)          |                   |
+-------------------+--------------+-------------------+-------------------+
| linear_solver     | OT_STRING    | User-defined      | casadi::Rootfinde |
|                   |              | linear solver     | r                 |
|                   |              | class. Needed for |                   |
|                   |              | sensitivities.    |                   |
+-------------------+--------------+-------------------+-------------------+
| linear_solver_opt | OT_DICT      | Options to be     | casadi::Rootfinde |
| ions              |              | passed to the     | r                 |
|                   |              | linear solver.    |                   |
+-------------------+--------------+-------------------+-------------------+
| max_iter          | OT_INT       | Maximum number of | casadi::Newton    |
|                   |              | Newton iterations |                   |
|                   |              | to perform before |                   |
|                   |              | returning.        |                   |
+-------------------+--------------+-------------------+-------------------+
| print_iteration   | OT_BOOL      | Print information | casadi::Newton    |
|                   |              | about each        |                   |
|                   |              | iteration         |                   |
+-------------------+--------------+-------------------+-------------------+

Diagrams
--------



C++ includes: newton.hpp ";

%feature("docstring")  casadi::FunctionInternal::check_res(const
std::vector< M > &res) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

";

%feature("docstring")  casadi::FunctionInternal::codegen_meta(CodeGenerator
&g) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::OracleFunction::print_fstats(const
OracleMemory *m) const  "

[INTERNAL]  Print statistics.

";

%feature("docstring")  casadi::OracleFunction::monitored(const std::string
&name) const  "

[INTERNAL] ";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::get_reltol() const  "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(int nadj,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::Newton::free_mem(void *mem) const override "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::disp_more(std::ostream
&stream) const  "

[INTERNAL]  Print more.

";

%feature("docstring")  casadi::Rootfinder::get_name_in(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian(const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::instruction_MX(int k) const
"

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::Rootfinder::has_sprev() const override "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::n_instructions() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(int nfwd) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::Newton::get_options() const override "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::OracleFunction::generate_dependencies(const
std::string &fname, const Dict &opts) const override "

[INTERNAL]  Export / Generate C code for the generated functions.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::all_scalar() const  "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::Rootfinder::get_forward(int nfwd, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const override "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::Rootfinder::uses_output() const override "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring")  casadi::Newton::alloc_mem() const override "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::FunctionInternal::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::forward(int nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::OracleFunction::create_function(const
std::string &fname, const std::vector< std::string > &s_in, const
std::vector< std::string > &s_out, const Function::AuxOut
&aux=Function::AuxOut()) "

[INTERNAL]  Create an oracle function

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::OracleFunction::get_stats(void *mem) const
override "

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::codegen(CodeGenerator &g,
const std::string &fname) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsityGen(int iind,
int oind, bool symmetric, int gr_i=1, int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::Rootfinder::get_name_out(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::Rootfinder::get_n_in() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const double
**arg, double **res, int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const SXElem
**arg, SXElem **res, int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const bvec_t
**arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::instruction_output(int k)
const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn, const std::string &fname, bool jit=false) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::FunctionInternal::matching_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

";

%feature("docstring")  casadi::FunctionInternal::disp(std::ostream &stream,
bool more) const override "

[INTERNAL]  Display object.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::Newton::set_work(void *mem, const double
**&arg, double **&res, int *&iw, double *&w) const override "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::get_min_in(int ind) const
"

[INTERNAL]  Get smallest input value.

";

%feature("docstring")  casadi::FunctionInternal::replace_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring")  casadi::FunctionInternal::replace_res(const
std::vector< M > &res) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::has_derivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::Newton::init_mem(void *mem) const override "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::eval_dm(const std::vector<
DM > &arg) const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::size_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::Rootfinder::has_forward(int nfwd) const
override "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::Rootfinder::eval(const double **arg, double
**res, int *iw, double *w, void *mem) const override "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const std::vector<
Matrix< D > > &arg, std::vector< Matrix< D > > &res, bool always_inline,
bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInput(int k) const
"

[DEPRECATED] Renamed instruction_index

";

%feature("docstring")  casadi::Newton::solve(void *mem) const override "

[INTERNAL]   Solve the system of equations and calculate derivatives.

";

%feature("docstring")  casadi::OracleFunction::finalize(const Dict &opts)
override "

[INTERNAL]  Finalize initialization.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";


// File: classcasadi_1_1NlpBuilder.xml


/*  Symbolic representation of the NLP  */

/* Data members

*/ %feature("docstring") casadi::NlpBuilder "

A symbolic NLP representation.

Joel Andersson

C++ includes: nlp_builder.hpp ";

%feature("docstring")  casadi::NlpBuilder::type_name() const  "

Readable name of the class.

";

%feature("docstring")  casadi::NlpBuilder::import_nl(const std::string
&filename, const Dict &opts=Dict()) "

Import an .nl file.

";

%feature("docstring")  casadi::NlpBuilder::get_str(bool more=false) const  "

Get string representation.

";

%feature("docstring")  casadi::NlpBuilder::disp(std::ostream &stream, bool
more=false) const  "

Print a description of the object.

";


// File: classcasadi_1_1Nlpsol.xml
%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")
casadi::FunctionInternal::codegen_declarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::OracleFunction::oracle() const override "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::get_reltol() const  "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::Nlpsol::get_sparsity_in(int i) override "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::matching_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::OracleFunction::get_function() const override
"

[INTERNAL] ";

%feature("docstring")  casadi::OracleFunction::get_function(const
std::string &name) const override "

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::instruction_MX(int k) const
"

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring")  casadi::Nlpsol::init_mem(void *mem) const override "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::replace_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring")  casadi::FunctionInternal::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring") casadi::Nlpsol::Nlpsol(const std::string &name, const
Function &oracle) "

[INTERNAL]  Constructor.

";

%feature("docstring")  casadi::Nlpsol::disp_more(std::ostream &stream) const
override "

[INTERNAL]  Print description.

";

%feature("docstring")  casadi::Nlpsol::alloc_mem() const override "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::Nlpsol::getReducedHessian() "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(int iind,
int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::Nlpsol::get_sparsity_out(int i) override "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::OracleFunction::create_function(const
std::string &fname, const std::vector< std::string > &s_in, const
std::vector< std::string > &s_out, const Function::AuxOut
&aux=Function::AuxOut()) "

[INTERNAL]  Create an oracle function

";

%feature("docstring")
casadi::FunctionInternal::codegen_sparsities(CodeGenerator &g) const  "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::FunctionInternal::get_min_in(int ind) const
"

[INTERNAL]  Get smallest input value.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::Nlpsol::get_options() const override "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian(const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::get_reverse(int nadj, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::OracleFunction::print_fstats(const
OracleMemory *m) const  "

[INTERNAL]  Print statistics.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::OracleFunction::finalize(const Dict &opts)
override "

[INTERNAL]  Finalize initialization.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::Nlpsol::eval(const double **arg, double
**res, int *iw, double *w, void *mem) const override "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::all_scalar() const  "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")  casadi::OracleFunction::monitored(const std::string
&name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::symbolic_output(const
std::vector< MX > &arg) const  "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::FunctionInternal::reverse(int nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::n_instructions() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::export_code(const
std::string &lang, std::ostream &stream, const Dict &options) const  "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::Nlpsol::setOptionsFromFile(const std::string
&file) "

[INTERNAL]  Read options from parameter xml.

";

%feature("docstring")  casadi::Nlpsol::get_name_in(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::check_res(const
std::vector< M > &res) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOutput(int k)
const  "

[DEPRECATED] Renamed instruction_output

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(int nadj) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn, const std::string &fname, bool jit=false) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::Nlpsol::get_n_in() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::sp_forward(const bvec_t
**arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::FunctionInternal::uses_output() const  "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring")  casadi::OracleFunction::set_temp(void *mem, const
double **arg, double **res, int *iw, double *w) const override "

[INTERNAL]  Set the work vectors.

";

%feature("docstring")  casadi::FunctionInternal::get_forward(int nfwd, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::get_max_in(int ind) const
"

[INTERNAL]  Get largest input value.

";

%feature("docstring")  casadi::FunctionInternal::info() const  "

[INTERNAL]  Obtain information about function

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M > > &fseed) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::OracleFunction::has_function(const
std::string &fname) const override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::getJacSparsityGen(int iind,
int oind, bool symmetric, int gr_i=1, int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FunctionInternal::codegen(CodeGenerator &g,
const std::string &fname) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::instruction_output(int k)
const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::Nlpsol::set_work(void *mem, const double
**&arg, double **&res, int *&iw, double *&w) const override "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::PluginInterface< Nlpsol  >::plugin_name()
const  "

[INTERNAL] ";

%feature("docstring")  casadi::Nlpsol::get_n_out() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(int nfwd) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::Nlpsol::solve(void *mem) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::instruction_input(int k)
const  "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::size_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::has_forward(int nfwd) const
"

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::OracleFunction::expand() "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::matching_res(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

";

%feature("docstring")  casadi::OracleFunction::calc_function(OracleMemory
*m, const std::string &fcn, const double *const *arg=0) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::has_reverse(int nadj) const
"

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::Nlpsol::free_mem(void *mem) const override "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::Nlpsol::get_default_in(int ind) const
override "

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::replace_res(const
std::vector< M > &res) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(int iind, int
oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Nlpsol "

NLP solver storage class.

Joel Andersson

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| calc_multipliers | OT_BOOL         | Calculate        | casadi::Nlpsol   |
|                  |                 | Lagrange         |                  |
|                  |                 | multipliers in   |                  |
|                  |                 | the Nlpsol base  |                  |
|                  |                 | class            |                  |
+------------------+-----------------+------------------+------------------+
| common_options   | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | auto-generated   | nction           |
|                  |                 | functions        |                  |
+------------------+-----------------+------------------+------------------+
| discrete         | OT_BOOLVECTOR   | Indicates which  | casadi::Nlpsol   |
|                  |                 | of the variables |                  |
|                  |                 | are discrete,    |                  |
|                  |                 | i.e. integer-    |                  |
|                  |                 | valued           |                  |
+------------------+-----------------+------------------+------------------+
| eval_errors_fata | OT_BOOL         | When errors      | casadi::Nlpsol   |
| l                |                 | occur during     |                  |
|                  |                 | evaluation of    |                  |
|                  |                 | f,g,...,stop the |                  |
|                  |                 | iterations       |                  |
+------------------+-----------------+------------------+------------------+
| expand           | OT_BOOL         | Replace MX with  | casadi::Nlpsol   |
|                  |                 | SX expressions   |                  |
|                  |                 | in problem       |                  |
|                  |                 | formulation      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| ignore_check_vec | OT_BOOL         | If set to true,  | casadi::Nlpsol   |
|                  |                 | the input shape  |                  |
|                  |                 | of F will not be |                  |
|                  |                 | checked.         |                  |
+------------------+-----------------+------------------+------------------+
| iteration_callba | OT_FUNCTION     | A function that  | casadi::Nlpsol   |
| ck               |                 | will be called   |                  |
|                  |                 | at each          |                  |
|                  |                 | iteration with   |                  |
|                  |                 | the solver as    |                  |
|                  |                 | input. Check     |                  |
|                  |                 | documentation of |                  |
|                  |                 | Callback .       |                  |
+------------------+-----------------+------------------+------------------+
| iteration_callba | OT_BOOL         | If set to true,  | casadi::Nlpsol   |
| ck_ignore_errors |                 | errors thrown by |                  |
|                  |                 | iteration_callba |                  |
|                  |                 | ck will be       |                  |
|                  |                 | ignored.         |                  |
+------------------+-----------------+------------------+------------------+
| iteration_callba | OT_INT          | Only call the    | casadi::Nlpsol   |
| ck_step          |                 | callback         |                  |
|                  |                 | function every   |                  |
|                  |                 | few iterations.  |                  |
+------------------+-----------------+------------------+------------------+
| monitor          | OT_STRINGVECTOR | Set of user      | casadi::OracleFu |
|                  |                 | problem          | nction           |
|                  |                 | functions to be  |                  |
|                  |                 | monitored        |                  |
+------------------+-----------------+------------------+------------------+
| oracle_options   | OT_DICT         | Options to be    | casadi::Nlpsol   |
|                  |                 | passed to the    |                  |
|                  |                 | oracle function  |                  |
+------------------+-----------------+------------------+------------------+
| specific_options | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | specific auto-   | nction           |
|                  |                 | generated        |                  |
|                  |                 | functions,       |                  |
|                  |                 | overwriting the  |                  |
|                  |                 | defaults from    |                  |
|                  |                 | common_options.  |                  |
|                  |                 | Nested           |                  |
|                  |                 | dictionary.      |                  |
+------------------+-----------------+------------------+------------------+
| verbose_init     | OT_BOOL         | Print out timing | casadi::Nlpsol   |
|                  |                 | information      |                  |
|                  |                 | about the        |                  |
|                  |                 | different stages |                  |
|                  |                 | of               |                  |
|                  |                 | initialization   |                  |
+------------------+-----------------+------------------+------------------+
| warn_initial_bou | OT_BOOL         | Warn if the      | casadi::Nlpsol   |
| nds              |                 | initial guess    |                  |
|                  |                 | does not satisfy |                  |
|                  |                 | LBX and UBX      |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: nlpsol_impl.hpp ";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< int > &order_in, const std::vector< int >
&order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::FunctionInternal::sx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, int order, bool
tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::check_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

";

%feature("docstring")  casadi::FunctionInternal::codegen_meta(CodeGenerator
&g) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FunctionInternal::forward(int nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::disp(std::ostream &stream,
bool more) const override "

[INTERNAL]  Display object.

";

%feature("docstring")  casadi::FunctionInternal::size_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::Nlpsol::check_inputs(void *mem) const  "

[INTERNAL]  Check if the inputs correspond to a well-posed problem.

";

%feature("docstring")  casadi::FunctionInternal::eval_dm(const std::vector<
DM > &arg) const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::FunctionInternal::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::FunctionInternal::sp_reverse(bvec_t **arg,
bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const std::vector<
Matrix< D > > &arg, std::vector< Matrix< D > > &res, bool always_inline,
bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(int nadj,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FunctionInternal::codegen_body(CodeGenerator
&g) const  "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring")  casadi::SharedObjectInternal::class_name() const  "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring") casadi::Nlpsol::~Nlpsol "

[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::FunctionInternal::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")  casadi::FunctionInternal::definition() const  "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInput(int k) const
"

[DEPRECATED] Renamed instruction_index

";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::OracleFunction::get_stats(void *mem) const
override "

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::OracleFunction::jit_dependencies(const
std::string &fname) override "

[INTERNAL]  JIT for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::get_free() const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::Nlpsol::integer_support() const  "

[INTERNAL]  Can discrete variables be treated.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M > > &aseed) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::has_derivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::FunctionInternal::instruction_id(int k) const
"

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::get_abstol() const  "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::instruction_constant(int k)
const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::OracleFunction::generate_dependencies(const
std::string &fname, const Dict &opts) const override "

[INTERNAL]  Export / Generate C code for the generated functions.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::FunctionInternal::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::Nlpsol::get_name_out(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::fwd_seed(int nfwd) const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::Nlpsol::init(const Dict &opts) override "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const double
**arg, double **res, int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const SXElem
**arg, SXElem **res, int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const bvec_t
**arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::get_partition(int iind, int
oind, Sparsity &D1, Sparsity &D2, bool compact, bool symmetric, bool
allow_forward, bool allow_reverse) const  "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";


// File: classcasadi_1_1NonZeros.xml
%feature("docstring") casadi::NonZeros< M, K >::NonZeros(M &mat, const K &k)
"

Constructor.

";

%feature("docstring") casadi::NonZeros "

Access to a set of nonzeros.

NonZeros class for Matrix NonZeros is the return type for operator[] of the
Matrix class, it allows access to the value as well as changing the parent
object Joel Andersson

C++ includes: nonzeros.hpp ";


// File: classcasadi_1_1Norm.xml


// File: classcasadi_1_1Norm1.xml


// File: classcasadi_1_1Norm2.xml


// File: classcasadi_1_1NormF.xml


// File: classcasadi_1_1NormInf.xml


// File: classcasadi_1_1OneSX.xml


// File: classcasadi_1_1Opti.xml
%feature("docstring")  casadi::Opti::stats() const  "

Get statistics.

nlpsol stats are passed as-is. No stability can be guaranteed about this
part of the API

";

%feature("docstring")  casadi::Opti::f() const  "

Get objective expression.

";

%feature("docstring")  casadi::Opti::g() const  "

Get all (scalarised) constraint expressions as a column vector.

";

%feature("docstring")  casadi::Opti::debug() const  "

Get a copy with advanced functionality.

You get access to more methods, but you have no guarantees about API
stability

The copy is effectively a deep copy: Updating the state of the copy does not
update the original.

";

%feature("docstring") casadi::Opti::__hash__ "

Returns a number that is unique for a given Node. If the Object does not
point to any node, \"0\" is returned.

";

%feature("docstring")  casadi::Opti::parameter(int n=1, int m=1, const
std::string &attribute="full") "

Create a parameter (symbol); fixed during optimization.

The order of creation does not matter. It is not required for parameter to
actualy appear in the optimization problem. Parameters that do appear, must
be given a value before the problem can be solved.

Parameters:
-----------

n:  number of rows (default 1)

m:  number of columnss (default 1)

attribute:  'full' (default) or 'symmetric'

";

%feature("docstring")  casadi::Opti::p() const  "

Get all (scalarised) parameters as a symbolic column vector.

";

%feature("docstring")  casadi::Opti::set_value(const MX &x, const DM &v) "

Set value of parameter.

Each parameter must be given a value before 'solve' can be called

";

%feature("docstring")  casadi::Opti::set_value(const std::vector< MX >
&assignments) "

Set value of parameter.

Each parameter must be given a value before 'solve' can be called

";

%feature("docstring")  casadi::Opti::lam_g() const  "

Get all (scalarised) dual variables as a symbolic column vector.

Useful for obtaining the Lagrange Hessian:

::

  * sol.value(hessian(opti.f+opti.lam_g'*opti.g,opti.x)) % MATLAB
  * sol.value(hessian(opti.f+dot(opti.lam_g,opti.g),opti.x)[0]) # Python
  * 



";

%feature("docstring")  casadi::Opti::solve() "

Crunch the numbers; solve the problem.

";

%feature("docstring")  casadi::Opti::x() const  "

Get all (scalarised) decision variables as a symbolic column vector.

";

%feature("docstring")  casadi::Opti::initial() const  "

get assignment expressions for initial values

";

%feature("docstring")  casadi::Opti::get_str(bool more=false) const  "

Get string representation.

";

%feature("docstring")  casadi::Opti::np() const  "

Number of (scalarised) parameters.

";

%feature("docstring")  casadi::Opti::set_initial(const MX &x, const DM &v) "

Set initial guess for decision variables

::

  * opti.set_initial(x, 2)
  * opti.set_initial(10*x(1), 2)
  * 



";

%feature("docstring")  casadi::Opti::set_initial(const std::vector< MX >
&assignments) "

Set initial guess for decision variables

::

  * opti.set_initial(x, 2)
  * opti.set_initial(10*x(1), 2)
  * 



";

%feature("docstring")  casadi::Opti::callback_class(OptiCallback *callback)
"

Helper methods for callback()

Do not use directly.

";

%feature("docstring")  casadi::Opti::callback_class() "

Helper methods for callback()

Do not use directly.

";

%feature("docstring")  casadi::Opti::nx() const  "

Number of (scalarised) decision variables.

";

%feature("docstring")  casadi::SharedObject::is_null() const  "

Is a null pointer?

";

%feature("docstring")  casadi::Opti::ng() const  "

Number of (scalarised) constraints.

";

%feature("docstring") casadi::Opti::Opti() "

Create Opti Context.

";

%feature("docstring")  casadi::Opti::value_parameters() const  "

";

%feature("docstring")  casadi::Opti::type_name() const  "

Readable name of the class.

";

%feature("docstring")  casadi::Opti::value(const MX &x, const std::vector<
MX > &values=std::vector< MX >()) const  "

Obtain value of expression at the current value

In regular mode, teh current value is the converged solution In debug mode,
the value can be non-converged

Parameters:
-----------

values:  Optional assignment expressions (e.g. x==3) to overrule the current
value

";

%feature("docstring")  casadi::Opti::value(const DM &x, const std::vector<
MX > &values=std::vector< MX >()) const  "

Obtain value of expression at the current value

In regular mode, teh current value is the converged solution In debug mode,
the value can be non-converged

Parameters:
-----------

values:  Optional assignment expressions (e.g. x==3) to overrule the current
value

";

%feature("docstring")  casadi::Opti::value(const SX &x, const std::vector<
MX > &values=std::vector< MX >()) const  "

Obtain value of expression at the current value

In regular mode, teh current value is the converged solution In debug mode,
the value can be non-converged

Parameters:
-----------

values:  Optional assignment expressions (e.g. x==3) to overrule the current
value

";

%feature("docstring")  casadi::Opti::variable(int n=1, int m=1, const
std::string &attribute="full") "

Create a decision variable (symbol)

The order of creation matters. The order will be reflected in the
optimization problem. It is not required for decision variables to actualy
appear in the optimization problem.

Parameters:
-----------

n:  number of rows (default 1)

m:  number of columnss (default 1)

attribute:  'full' (default) or 'symmetric'

";

%feature("docstring") casadi::Opti "

A simplified interface for NLP modeling/solving.

This class offers a view with model description facilities The API is
guaranteed to be stable.

Example NLP:

::

    opti = casadi.Opti();
  
    x = opti.variable();
    y = opti.variable();
  
    opti.minimize(  (y-x^2)^2   );
    opti.subject_to( x^2+y^2==1 );
    opti.subject_to(     x+y>=1 );
  
    opti.solver('ipopt');
    sol = opti.solve();
  
    sol.value(x)
    sol.value(y)



Example parametric NLP:

::

    opti = casadi.Opti();
  
    x = opti.variable(2,1);
    p = opti.parameter();
  
    opti.minimize(  (p*x(2)-x(1)^2)^2   );
    opti.subject_to( 1<=sum(x)<=2 );
  
    opti.solver('ipopt');
  
    opti.set_value(p, 3);
    sol = opti.solve();
    sol.value(x)
  
    opti.set_value(p, 5);
    sol = opti.solve();
    sol.value(x)



Joris Gillis, Erik Lambrechts, Joel Andersson

C++ includes: optistack.hpp ";

%feature("docstring")  casadi::Opti::return_status() const  "

Get return status of solver passed as-is from nlpsol No stability can be
guaranteed about this part of the API.

";

%feature("docstring")  casadi::Opti::copy() const  "

Get a copy of the.

The copy is effectively a deep copy: Updating the state of the copy does not
update the original.

";

%feature("docstring")  casadi::SharedObject::class_name() const  "

Get class name.

";

%feature("docstring")  casadi::Opti::subject_to(const MX &g) "

Add constraints.

Examples:

::

  * \\\\begin{itemize}
  * opti.subject_to( sqrt(x+y) >= 1);
  * opti.subject_to( sqrt(x+y) > 1)}: same as above
  * opti.subject_to( 1<= sqrt(x+y) )}: same as above
  * opti.subject_to( 5*x+y==1 )}: equality
  *
  * Python
  * opti.subject_to([x*y>=1,x==3])
  * opti.subject_to(opti.bounded(0,x,1))
  *
  * MATLAB
  * opti.subject_to({x*y>=1,x==3})
  * opti.subject_to( 0<=x<=1 )
  * 



";

%feature("docstring")  casadi::Opti::subject_to(const std::vector< MX > &g)
"

Add constraints.

Examples:

::

  * \\\\begin{itemize}
  * opti.subject_to( sqrt(x+y) >= 1);
  * opti.subject_to( sqrt(x+y) > 1)}: same as above
  * opti.subject_to( 1<= sqrt(x+y) )}: same as above
  * opti.subject_to( 5*x+y==1 )}: equality
  *
  * Python
  * opti.subject_to([x*y>=1,x==3])
  * opti.subject_to(opti.bounded(0,x,1))
  *
  * MATLAB
  * opti.subject_to({x*y>=1,x==3})
  * opti.subject_to( 0<=x<=1 )
  * 



";

%feature("docstring")  casadi::Opti::subject_to() "

Clear constraints.

";

%feature("docstring")  casadi::Opti::minimize(const MX &f) "

Set objective.

Objective must be a scalar. Default objective: 0 When method is called
multiple times, the last call takes effect

";

%feature("docstring")  casadi::Opti::value_variables() const  "

get assignment expressions for latest values

";

%feature("docstring")  casadi::Opti::user_dict(const MX &m) const  "

Get user data.

";

%feature("docstring")  casadi::Opti::advanced() const  "

Get a copy with advanced functionality.

You get access to more methods, but you have no guarantees about API
stability

The copy is effectively a deep copy: Updating the state of the copy does not
update the original.

";

%feature("docstring")  casadi::Opti::solver(const std::string &solver, const
Dict &plugin_options=Dict(), const Dict &solver_options=Dict()) "

Set a solver.

Parameters:
-----------

solver:  any of the nlpsol plugins can be used here In practice, not all
nlpsol plugins may be supported yet

options:  passed on to nlpsol plugin No stability can be guaranteed about
this part of the API

options:  to be passed to nlpsol solver No stability can be guaranteed about
this part of the API

";

%feature("docstring")  casadi::Opti::dual(const MX &m) const  "

get the dual variable

m must be a constraint expression. The returned value is still a symbolic
expression. Use value on it to obtain the numerical value.

";

%feature("docstring")  casadi::SharedObject::print_ptr(std::ostream
&stream=casadi::uout()) const  "

[INTERNAL]  Print the pointer to the internal class

";

%feature("docstring")  casadi::Opti::disp(std::ostream &stream, bool
more=false) const  "

Print representation.

";

%feature("docstring")  casadi::Opti::update_user_dict(const MX &m, const
Dict &meta) "

add user data Add arbitrary data in the form of a dictionary to symbols or
constraints

";

%feature("docstring")  casadi::Opti::update_user_dict(const std::vector< MX
> &m, const Dict &meta) "

";


// File: classcasadi_1_1OptiAdvanced.xml
%feature("docstring")  casadi::OptiAdvanced::assert_empty() const  "

";

%feature("docstring")  casadi::Opti::dual(const MX &m) const  "

get the dual variable

m must be a constraint expression. The returned value is still a symbolic
expression. Use value on it to obtain the numerical value.

";

%feature("docstring")  casadi::Opti::parameter(int n=1, int m=1, const
std::string &attribute="full") "

Create a parameter (symbol); fixed during optimization.

The order of creation does not matter. It is not required for parameter to
actualy appear in the optimization problem. Parameters that do appear, must
be given a value before the problem can be solved.

Parameters:
-----------

n:  number of rows (default 1)

m:  number of columnss (default 1)

attribute:  'full' (default) or 'symmetric'

";

%feature("docstring")  casadi::OptiAdvanced::mark_problem_dirty(bool
flag=true) "

";

%feature("docstring")  casadi::Opti::lam_g() const  "

Get all (scalarised) dual variables as a symbolic column vector.

Useful for obtaining the Lagrange Hessian:

::

  * sol.value(hessian(opti.f+opti.lam_g'*opti.g,opti.x)) % MATLAB
  * sol.value(hessian(opti.f+dot(opti.lam_g,opti.g),opti.x)[0]) # Python
  * 



";

%feature("docstring")  casadi::OptiAdvanced::assert_solved() const  "

";

%feature("docstring")  casadi::SharedObject::class_name() const  "

Get class name.

";

%feature("docstring")  casadi::OptiAdvanced::canon_expr(const MX &expr)
const  "

Interpret an expression (for internal use only)

";

%feature("docstring")  casadi::OptiAdvanced::get_meta_con(const MX &m) const
"

Get meta-data of symbol (for internal use only)

";

%feature("docstring")  casadi::OptiAdvanced::set_meta(const MX &m, const
MetaVar &meta) "

Set meta-data of an expression.

";

%feature("docstring")  casadi::OptiAdvanced::instance_number() const  "

";

%feature("docstring")  casadi::Opti::user_dict(const MX &m) const  "

Get user data.

";

%feature("docstring") casadi::OptiAdvanced::__hash__ "

Returns a number that is unique for a given Node. If the Object does not
point to any node, \"0\" is returned.

";

%feature("docstring")  casadi::OptiAdvanced::x_lookup(int i) const  "

";

%feature("docstring")  casadi::Opti::disp(std::ostream &stream, bool
more=false) const  "

Print representation.

";

%feature("docstring")  casadi::OptiAdvanced::describe(const MX &x, int
indent=0) const  "

";

%feature("docstring")  casadi::OptiAdvanced::solve_actual(const DMDict
&args) "

";

%feature("docstring")  casadi::OptiAdvanced::set_meta_con(const MX &m, const
MetaCon &meta) "

Set meta-data of an expression.

";

%feature("docstring")  casadi::Opti::variable(int n=1, int m=1, const
std::string &attribute="full") "

Create a decision variable (symbol)

The order of creation matters. The order will be reflected in the
optimization problem. It is not required for decision variables to actualy
appear in the optimization problem.

Parameters:
-----------

n:  number of rows (default 1)

m:  number of columnss (default 1)

attribute:  'full' (default) or 'symmetric'

";

%feature("docstring")  casadi::OptiAdvanced::g_describe(int i) const  "

";

%feature("docstring")  casadi::OptiAdvanced::problem_dirty() const  "

";

%feature("docstring")  casadi::OptiAdvanced::arg() const  "

";

%feature("docstring")  casadi::Opti::value_variables() const  "

get assignment expressions for latest values

";

%feature("docstring")  casadi::Opti::solve() "

Crunch the numbers; solve the problem.

";

%feature("docstring")  casadi::Opti::copy() const  "

Get a copy of the.

The copy is effectively a deep copy: Updating the state of the copy does not
update the original.

";

%feature("docstring") casadi::OptiAdvanced "

C++ includes: optistack.hpp ";

%feature("docstring")  casadi::OptiAdvanced::solved() const  "

";

%feature("docstring")  casadi::Opti::value(const MX &x, const std::vector<
MX > &values=std::vector< MX >()) const  "

Obtain value of expression at the current value

In regular mode, teh current value is the converged solution In debug mode,
the value can be non-converged

Parameters:
-----------

values:  Optional assignment expressions (e.g. x==3) to overrule the current
value

";

%feature("docstring")  casadi::Opti::value(const DM &x, const std::vector<
MX > &values=std::vector< MX >()) const  "

Obtain value of expression at the current value

In regular mode, teh current value is the converged solution In debug mode,
the value can be non-converged

Parameters:
-----------

values:  Optional assignment expressions (e.g. x==3) to overrule the current
value

";

%feature("docstring")  casadi::Opti::value(const SX &x, const std::vector<
MX > &values=std::vector< MX >()) const  "

Obtain value of expression at the current value

In regular mode, teh current value is the converged solution In debug mode,
the value can be non-converged

Parameters:
-----------

values:  Optional assignment expressions (e.g. x==3) to overrule the current
value

";

%feature("docstring")  casadi::OptiAdvanced::casadi_solver() const  "

Get the underlying CasADi solver of the Opti stack.

";

%feature("docstring")  casadi::Opti::set_initial(const MX &x, const DM &v) "

Set initial guess for decision variables

::

  * opti.set_initial(x, 2)
  * opti.set_initial(10*x(1), 2)
  * 



";

%feature("docstring")  casadi::Opti::set_initial(const std::vector< MX >
&assignments) "

Set initial guess for decision variables

::

  * opti.set_initial(x, 2)
  * opti.set_initial(10*x(1), 2)
  * 



";

%feature("docstring") casadi::OptiAdvanced::~OptiAdvanced "

Destructor.

";

%feature("docstring")  casadi::Opti::callback_class(OptiCallback *callback)
"

Helper methods for callback()

Do not use directly.

";

%feature("docstring")  casadi::Opti::callback_class() "

Helper methods for callback()

Do not use directly.

";

%feature("docstring")  casadi::Opti::get_str(bool more=false) const  "

Get string representation.

";

%feature("docstring")  casadi::Opti::value_parameters() const  "

";

%feature("docstring")  casadi::OptiAdvanced::solver_dirty() const  "

";

%feature("docstring")  casadi::OptiAdvanced::mark_solver_dirty(bool
flag=true) "

";

%feature("docstring")  casadi::Opti::update_user_dict(const MX &m, const
Dict &meta) "

add user data Add arbitrary data in the form of a dictionary to symbols or
constraints

";

%feature("docstring")  casadi::Opti::update_user_dict(const std::vector< MX
> &m, const Dict &meta) "

";

%feature("docstring")  casadi::Opti::ng() const  "

Number of (scalarised) constraints.

";

%feature("docstring")  casadi::OptiAdvanced::objective() const  "

";

%feature("docstring")  casadi::OptiAdvanced::get_meta(const MX &m) const  "

Get meta-data of symbol (for internal use only)

";

%feature("docstring")  casadi::Opti::subject_to(const MX &g) "

Add constraints.

Examples:

::

  * \\\\begin{itemize}
  * opti.subject_to( sqrt(x+y) >= 1);
  * opti.subject_to( sqrt(x+y) > 1)}: same as above
  * opti.subject_to( 1<= sqrt(x+y) )}: same as above
  * opti.subject_to( 5*x+y==1 )}: equality
  *
  * Python
  * opti.subject_to([x*y>=1,x==3])
  * opti.subject_to(opti.bounded(0,x,1))
  *
  * MATLAB
  * opti.subject_to({x*y>=1,x==3})
  * opti.subject_to( 0<=x<=1 )
  * 



";

%feature("docstring")  casadi::Opti::subject_to(const std::vector< MX > &g)
"

Add constraints.

Examples:

::

  * \\\\begin{itemize}
  * opti.subject_to( sqrt(x+y) >= 1);
  * opti.subject_to( sqrt(x+y) > 1)}: same as above
  * opti.subject_to( 1<= sqrt(x+y) )}: same as above
  * opti.subject_to( 5*x+y==1 )}: equality
  *
  * Python
  * opti.subject_to([x*y>=1,x==3])
  * opti.subject_to(opti.bounded(0,x,1))
  *
  * MATLAB
  * opti.subject_to({x*y>=1,x==3})
  * opti.subject_to( 0<=x<=1 )
  * 



";

%feature("docstring")  casadi::Opti::subject_to() "

Clear constraints.

";

%feature("docstring")  casadi::Opti::initial() const  "

get assignment expressions for initial values

";

%feature("docstring")  casadi::Opti::type_name() const  "

Readable name of the class.

";

%feature("docstring")  casadi::Opti::nx() const  "

Number of (scalarised) decision variables.

";

%feature("docstring") casadi::OptiAdvanced::OptiAdvanced(const Opti &x) "

";

%feature("docstring")  casadi::Opti::set_value(const MX &x, const DM &v) "

Set value of parameter.

Each parameter must be given a value before 'solve' can be called

";

%feature("docstring")  casadi::Opti::set_value(const std::vector< MX >
&assignments) "

Set value of parameter.

Each parameter must be given a value before 'solve' can be called

";

%feature("docstring")  casadi::OptiAdvanced::res(const DMDict &res) "

";

%feature("docstring")  casadi::OptiAdvanced::res() const  "

";

%feature("docstring")  casadi::Opti::debug() const  "

Get a copy with advanced functionality.

You get access to more methods, but you have no guarantees about API
stability

The copy is effectively a deep copy: Updating the state of the copy does not
update the original.

";

%feature("docstring")  casadi::SharedObject::print_ptr(std::ostream
&stream=casadi::uout()) const  "

[INTERNAL]  Print the pointer to the internal class

";

%feature("docstring")  casadi::OptiAdvanced::solve_prepare() "

";

%feature("docstring")  casadi::OptiAdvanced::baked_copy() const  "

";

%feature("docstring")  casadi::Opti::np() const  "

Number of (scalarised) parameters.

";

%feature("docstring")  casadi::OptiAdvanced::symvar() const  "

Get symbols present in expression.

Returned vector is ordered according to the order of variable()/parameter()
calls used to create the variables

";

%feature("docstring")  casadi::OptiAdvanced::symvar(const MX &expr) const  "

Get symbols present in expression.

Returned vector is ordered according to the order of variable()/parameter()
calls used to create the variables

";

%feature("docstring")  casadi::OptiAdvanced::symvar(const MX &expr,
VariableType type) const  "

Get symbols present in expression.

Returned vector is ordered according to the order of variable()/parameter()
calls used to create the variables

";

%feature("docstring")  casadi::Opti::advanced() const  "

Get a copy with advanced functionality.

You get access to more methods, but you have no guarantees about API
stability

The copy is effectively a deep copy: Updating the state of the copy does not
update the original.

";

%feature("docstring")  casadi::OptiAdvanced::active_values(VariableType
type) const  "

";

%feature("docstring")  casadi::OptiAdvanced::x_describe(int i) const  "

";

%feature("docstring")  casadi::Opti::f() const  "

Get objective expression.

";

%feature("docstring")  casadi::Opti::g() const  "

Get all (scalarised) constraint expressions as a column vector.

";

%feature("docstring")  casadi::Opti::stats() const  "

Get statistics.

nlpsol stats are passed as-is. No stability can be guaranteed about this
part of the API

";

%feature("docstring")  casadi::SharedObject::is_null() const  "

Is a null pointer?

";

%feature("docstring")  casadi::Opti::return_status() const  "

Get return status of solver passed as-is from nlpsol No stability can be
guaranteed about this part of the API.

";

%feature("docstring")  casadi::OptiAdvanced::constraints() const  "

";

%feature("docstring")  casadi::OptiAdvanced::bake() "

Fix the structure of the optimization problem.

";

%feature("docstring")  casadi::OptiAdvanced::assert_active_symbol(const MX
&m) const  "

";

%feature("docstring")  casadi::OptiAdvanced::mark_solved(bool flag=true) "

";

%feature("docstring")  casadi::OptiAdvanced::assert_baked() const  "

";

%feature("docstring")  casadi::OptiAdvanced::is_parametric(const MX &expr)
const  "

return true if expression is only dependant on Opti parameters, not
variables

";

%feature("docstring")  casadi::OptiAdvanced::g_lookup(int i) const  "

";

%feature("docstring")  casadi::Opti::p() const  "

Get all (scalarised) parameters as a symbolic column vector.

";

%feature("docstring")  casadi::Opti::solver(const std::string &solver, const
Dict &plugin_options=Dict(), const Dict &solver_options=Dict()) "

Set a solver.

Parameters:
-----------

solver:  any of the nlpsol plugins can be used here In practice, not all
nlpsol plugins may be supported yet

options:  passed on to nlpsol plugin No stability can be guaranteed about
this part of the API

options:  to be passed to nlpsol solver No stability can be guaranteed about
this part of the API

";

%feature("docstring")  casadi::OptiAdvanced::active_symvar(VariableType
type) const  "

";

%feature("docstring")  casadi::Opti::minimize(const MX &f) "

Set objective.

Objective must be a scalar. Default objective: 0 When method is called
multiple times, the last call takes effect

";

%feature("docstring")  casadi::Opti::x() const  "

Get all (scalarised) decision variables as a symbolic column vector.

";


// File: classcasadi_1_1OptiCallback.xml
%feature("docstring") casadi::OptiCallback::~OptiCallback "

";

%feature("docstring") casadi::OptiCallback "

C++ includes: optistack.hpp ";

%feature("docstring")  casadi::OptiCallback::call(int i) "

";

%feature("docstring") casadi::OptiCallback::OptiCallback() "

";

%feature("docstring") casadi::OptiCallback::OptiCallback(const OptiCallback
&obj) "

";


// File: classcasadi_1_1OptiSol.xml
%feature("docstring")  casadi::OptiSol::value_variables() const  "

get assignment expressions for the optimal solution

";

%feature("docstring")  casadi::OptiSol::get_str(bool more=false) const  "

";

%feature("docstring")  casadi::OptiSol::stats() const  "

Get statistics.

nlpsol stats are passed as-is. No stability can be guaranteed about this
part of the API

";

%feature("docstring")  casadi::OptiSol::type_name() const  "

";

%feature("docstring")  casadi::OptiSol::disp(std::ostream &stream, bool
more=false) const  "

";

%feature("docstring")  casadi::OptiSol::value(const MX &x, const
std::vector< MX > &values=std::vector< MX >()) const  "

Obtain value of expression at the current value

In regular mode, teh current value is the converged solution In debug mode,
the value can be non-converged

Parameters:
-----------

values:  Optional assignment expressions (e.g. x==3) to overrule the current
value

";

%feature("docstring")  casadi::OptiSol::value(const DM &x, const
std::vector< MX > &values=std::vector< MX >()) const  "

Obtain value of expression at the current value

In regular mode, teh current value is the converged solution In debug mode,
the value can be non-converged

Parameters:
-----------

values:  Optional assignment expressions (e.g. x==3) to overrule the current
value

";

%feature("docstring")  casadi::OptiSol::value(const SX &x, const
std::vector< MX > &values=std::vector< MX >()) const  "

Obtain value of expression at the current value

In regular mode, teh current value is the converged solution In debug mode,
the value can be non-converged

Parameters:
-----------

values:  Optional assignment expressions (e.g. x==3) to overrule the current
value

";

%feature("docstring")  casadi::OptiSol::value_parameters() const  "

";

%feature("docstring")  casadi::OptiSol::opti() const  "

";

%feature("docstring") casadi::OptiSol "

A simplified interface for NLP modeling/solving.

This class offers a view with solution retrieval facilities The API is
guaranteed to be stable.

Joris Gillis, Erik Lambrechts

C++ includes: optistack.hpp ";


// File: classcasadi_1_1OracleFunction.xml
%feature("docstring")  casadi::FunctionInternal::get_reverse(int nadj, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::FunctionInternal::n_instructions() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::get_partition(int iind, int
oind, Sparsity &D1, Sparsity &D2, bool compact, bool symmetric, bool
allow_forward, bool allow_reverse) const  "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::has_forward(int nfwd) const
"

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::instruction_MX(int k) const
"

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::symbolic_output(const
std::vector< MX > &arg) const  "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::FunctionInternal::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::FunctionInternal::codegen_body(CodeGenerator
&g) const  "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring") casadi::OracleFunction::~OracleFunction "

[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::OracleFunction::has_function(const
std::string &fname) const override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(int nadj,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::OracleFunction::oracle() const override "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::instruction_input(int k)
const  "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::instruction_output(int k)
const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::SharedObjectInternal::class_name() const  "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::OracleFunction::get_options() const override
"

[INTERNAL]  Options.

";

%feature("docstring")
casadi::FunctionInternal::codegen_sparsities(CodeGenerator &g) const  "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::get_name_out(int i) "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FunctionInternal::all_scalar() const  "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")  casadi::FunctionInternal::info() const  "

[INTERNAL]  Obtain information about function

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::get_abstol() const  "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::OracleFunction::get_stats(void *mem) const
override "

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::OracleFunction::generate_dependencies(const
std::string &fname, const Dict &opts) const override "

[INTERNAL]  Export / Generate C code for the generated functions.

";

%feature("docstring")  casadi::FunctionInternal::has_reverse(int nadj) const
"

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::size_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(int iind,
int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::size_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::replace_res(const
std::vector< M > &res) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::eval(const double **arg,
double **res, int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::codegen(CodeGenerator &g,
const std::string &fname) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::FunctionInternal::get_sparsity_in(int i) "

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInput(int k) const
"

[DEPRECATED] Renamed instruction_index

";

%feature("docstring")  casadi::FunctionInternal::sp_reverse(bvec_t **arg,
bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::export_code(const
std::string &lang, std::ostream &stream, const Dict &options) const  "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring")  casadi::FunctionInternal::definition() const  "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring")  casadi::FunctionInternal::disp(std::ostream &stream,
bool more) const override "

[INTERNAL]  Display object.

";

%feature("docstring")  casadi::OracleFunction::get_function() const override
"

[INTERNAL] ";

%feature("docstring")  casadi::OracleFunction::get_function(const
std::string &name) const override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::getAtomicOutput(int k)
const  "

[DEPRECATED] Renamed instruction_output

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(int nfwd) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::OracleFunction::expand() "

[INTERNAL] ";

%feature("docstring")  casadi::OracleFunction::create_function(const
std::string &fname, const std::vector< std::string > &s_in, const
std::vector< std::string > &s_out, const Function::AuxOut
&aux=Function::AuxOut()) "

[INTERNAL]  Create an oracle function

";

%feature("docstring")
casadi::FunctionInternal::codegen_declarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M > > &aseed) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::get_n_in() "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::forward(int nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::codegen_meta(CodeGenerator
&g) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FunctionInternal::reverse(int nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::has_derivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian(const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::get_default_in(int ind)
const  "

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::get_max_in(int ind) const
"

[INTERNAL]  Get largest input value.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< int > &order_in, const std::vector< int >
&order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::FunctionInternal::check_res(const
std::vector< M > &res) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::OracleFunction::set_temp(void *mem, const
double **arg, double **res, int *iw, double *w) const override "

[INTERNAL]  Set the work vectors.

";

%feature("docstring")  casadi::OracleFunction::calc_function(OracleMemory
*m, const std::string &fcn, const double *const *arg=0) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_min_in(int ind) const
"

[INTERNAL]  Get smallest input value.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::get_forward(int nfwd, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::sp_forward(const bvec_t
**arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::FunctionInternal::matching_res(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(int iind, int
oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::instruction_id(int k) const
"

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::OracleFunction::finalize(const Dict &opts)
override "

[INTERNAL]  Finalize initialization.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::OracleFunction::monitored(const std::string
&name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring") casadi::OracleFunction "

[INTERNAL]  Base class for functions that perform calculation with an
oracle.

Joel Andersson

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
+------------------+-----------------+------------------+------------------+
| common_options   | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | auto-generated   | nction           |
|                  |                 | functions        |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| enable_fd        | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation by   |                  |
|                  |                 | finite           |                  |
|                  |                 | differencing.    |                  |
|                  |                 | [default:        |                  |
|                  |                 | false]]          |                  |
+------------------+-----------------+------------------+------------------+
| enable_forward   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using forward    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_jacobian  | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobians of all |                  |
|                  |                 | differentiable   |                  |
|                  |                 | outputs with     |                  |
|                  |                 | respect to all   |                  |
|                  |                 | differentiable   |                  |
|                  |                 | inputs - if      |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_reverse   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | transposed       |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using reverse    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| fd_method        | OT_STRING       | Method for       | casadi::Function |
|                  |                 | finite           | Internal         |
|                  |                 | differencing     |                  |
|                  |                 | [default         |                  |
|                  |                 | 'central']       |                  |
+------------------+-----------------+------------------+------------------+
| fd_options       | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | finite           |                  |
|                  |                 | difference       |                  |
|                  |                 | instance         |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| monitor          | OT_STRINGVECTOR | Set of user      | casadi::OracleFu |
|                  |                 | problem          | nction           |
|                  |                 | functions to be  |                  |
|                  |                 | monitored        |                  |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| specific_options | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | specific auto-   | nction           |
|                  |                 | generated        |                  |
|                  |                 | functions,       |                  |
|                  |                 | overwriting the  |                  |
|                  |                 | defaults from    |                  |
|                  |                 | common_options.  |                  |
|                  |                 | Nested           |                  |
|                  |                 | dictionary.      |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: oracle_function.hpp ";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn, const std::string &fname, bool jit=false) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::FunctionInternal::get_free() const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::FunctionInternal::get_sparsity_out(int i) "

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::sx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, int order, bool
tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::OracleFunction::print_fstats(const
OracleMemory *m) const  "

[INTERNAL]  Print statistics.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const double
**arg, double **res, int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const SXElem
**arg, SXElem **res, int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const bvec_t
**arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsityGen(int iind,
int oind, bool symmetric, int gr_i=1, int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(int nadj) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::matching_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

";

%feature("docstring")  casadi::OracleFunction::init(const Dict &opts)
override "

[INTERNAL]  Initialize

";

%feature("docstring")  casadi::OracleFunction::free_mem(void *mem) const
override "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M > > &fseed) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::get_reltol() const  "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::eval_dm(const std::vector<
DM > &arg) const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::FunctionInternal::get_n_out() "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")  casadi::FunctionInternal::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")  casadi::FunctionInternal::disp_more(std::ostream
&stream) const  "

[INTERNAL]  Print more.

";

%feature("docstring")  casadi::FunctionInternal::uses_output() const  "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring")  casadi::OracleFunction::jit_dependencies(const
std::string &fname) override "

[INTERNAL]  JIT for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::get_name_in(int i) "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::FunctionInternal::replace_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring")  casadi::OracleFunction::init_mem(void *mem) const
override "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::instruction_constant(int k)
const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::FunctionInternal::check_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::OracleFunction::alloc_mem() const override "

[INTERNAL]  Create memory block.

";

%feature("docstring") casadi::OracleFunction::OracleFunction(const
std::string &name, const Function &oracle) "

[INTERNAL]  Constructor.

";

%feature("docstring")  casadi::FunctionInternal::fwd_seed(int nfwd) const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const std::vector<
Matrix< D > > &arg, std::vector< Matrix< D > > &res, bool always_inline,
bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";


// File: classcasadi_1_1Output.xml


// File: classcasadi_1_1Polynomial.xml
%feature("docstring") casadi::Polynomial "

Helper class for differentiating and integrating polynomials.

Joel Andersson

C++ includes: polynomial.hpp ";

%feature("docstring")  casadi::Polynomial::derivative() const  "

Create a new polynomial for the derivative.

";

%feature("docstring") casadi::Polynomial::Polynomial(casadi_real scalar=1) "

Construct a constant polynomial.

";

%feature("docstring") casadi::Polynomial::Polynomial(casadi_real p0,
casadi_real p1) "

Construct a linear polynomial.

";

%feature("docstring") casadi::Polynomial::Polynomial(casadi_real p0,
casadi_real p1, casadi_real p2) "

Construct a quadratic polynomial.

";

%feature("docstring") casadi::Polynomial::Polynomial(casadi_real p0,
casadi_real p1, casadi_real p2, casadi_real p3) "

Construct a cubic polynomial.

";

%feature("docstring") casadi::Polynomial::Polynomial(const std::vector< T >
&coeff) "

Construct from a vector of polynomial coefficients.

";

%feature("docstring")  casadi::Polynomial::type_name() const  "

Readable name of the class.

";

%feature("docstring")  casadi::Polynomial::anti_derivative() const  "

Create a new polynomial for the anti-derivative (primitive function)

";

%feature("docstring")  casadi::Polynomial::scalar() const  "

Get scalar value (error if degree()!=0)

";

%feature("docstring")  casadi::Polynomial::degree() const  "

Degree of the polynomial.

";

%feature("docstring")  casadi::Polynomial::disp(std::ostream &stream, bool
more=false) const  "

Print a description of the object.

";

%feature("docstring")  casadi::Polynomial::trim() "

Remove excess zeros.

";


// File: classcasadi_1_1Project.xml


// File: classcasadi_1_1ProtoFunction.xml


// File: classcasadi_1_1QpToNlp.xml
%feature("docstring")  casadi::Conic::get_name_out(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::sp_reverse(bvec_t **arg,
bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::FunctionInternal::info() const  "

[INTERNAL]  Obtain information about function

";

%feature("docstring")  casadi::FunctionInternal::size2_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(int nfwd) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::get_reltol() const  "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring")  casadi::FunctionInternal::get_stats(void *mem) const
"

[INTERNAL]  Get all statistics.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::matching_res(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::Conic::get_n_out() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::ProtoFunction::alloc_mem() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::FunctionInternal::instruction_constant(int k)
const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOutput(int k)
const  "

[DEPRECATED] Renamed instruction_output

";

%feature("docstring")  casadi::FunctionInternal::sp_forward(const bvec_t
**arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian(const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::has_derivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::sx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::ProtoFunction::init_mem(void *mem) const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring")  casadi::FunctionInternal::matching_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::jit_dependencies(const
std::string &fname) "

[INTERNAL]  Jit dependencies.

";

%feature("docstring")  casadi::FunctionInternal::set_temp(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::FunctionInternal::size_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::symbolic_output(const
std::vector< MX > &arg) const  "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::size_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::QpToNlp::eval(const double **arg, double
**res, int *iw, double *w, void *mem) const override "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring") casadi::QpToNlp::~QpToNlp "

[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::FunctionInternal::instruction_id(int k) const
"

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsityGen(int iind,
int oind, bool symmetric, int gr_i=1, int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::get_abstol() const  "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring")  casadi::FunctionInternal::get_free() const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::FunctionInternal::definition() const  "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::Conic::get_sparsity_out(int i) override "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M > > &aseed) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::Conic::get_default_in(int ind) const override
"

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::uses_output() const  "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::reverse(int nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring") casadi::QpToNlp "

'nlpsol' plugin for Conic

Solve QPs using an Nlpsol Use the 'nlpsol' option to specify the NLP solver
to use.

>List of available options

+----------------+-----------+---------------------------------+
|       Id       |   Type    |           Description           |
+================+===========+=================================+
| nlpsol         | OT_STRING | Name of solver.                 |
+----------------+-----------+---------------------------------+
| nlpsol_options | OT_DICT   | Options to be passed to solver. |
+----------------+-----------+---------------------------------+

Joris Gillis

>List of available options

+----------------+---------------+-----------------------+-----------------+
|       Id       |     Type      |      Description      |     Used in     |
+================+===============+=======================+=================+
| discrete       | OT_BOOLVECTOR | Indicates which of    | casadi::Conic   |
|                |               | the variables are     |                 |
|                |               | discrete, i.e.        |                 |
|                |               | integer-valued        |                 |
+----------------+---------------+-----------------------+-----------------+
| nlpsol         | OT_STRING     | Name of solver.       | casadi::QpToNlp |
+----------------+---------------+-----------------------+-----------------+
| nlpsol_options | OT_DICT       | Options to be passed  | casadi::QpToNlp |
|                |               | to solver.            |                 |
+----------------+---------------+-----------------------+-----------------+

Diagrams
--------



C++ includes: qp_to_nlp.hpp ";

%feature("docstring")  casadi::FunctionInternal::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::Conic::get_sparsity_in(int i) override "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::Conic::check_inputs(const double *lbx, const
double *ubx, const double *lba, const double *uba) const  "

[INTERNAL]  Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< int > &order_in, const std::vector< int >
&order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::codegen_meta(CodeGenerator
&g) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FunctionInternal::instruction_MX(int k) const
"

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring")  casadi::FunctionInternal::codegen(CodeGenerator &g,
const std::string &fname) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::FunctionInternal::instruction_output(int k)
const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::n_instructions() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInput(int k) const
"

[DEPRECATED] Renamed instruction_index

";

%feature("docstring")  casadi::FunctionInternal::replace_res(const
std::vector< M > &res) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::instruction_input(int k)
const  "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::check_res(const
std::vector< M > &res) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

";

%feature("docstring")  casadi::FunctionInternal::forward(int nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::get_function() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::QpToNlp::class_name() const override "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring")  casadi::FunctionInternal::get_forward(int nfwd, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::Conic::print_fstats(const ConicMemory *m)
const  "

[INTERNAL]  Print statistics.

";

%feature("docstring")  casadi::QpToNlp::plugin_name() const override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::all_scalar() const  "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, int order, bool
tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::QpToNlp::get_options() const override "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::FunctionInternal::has_reverse(int nadj) const
"

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::Conic::integer_support() const  "

[INTERNAL]  Can discrete variables be treated.

";

%feature("docstring")  casadi::QpToNlp::init(const Dict &opts) override "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FunctionInternal::fwd_seed(int nfwd) const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring") casadi::QpToNlp::QpToNlp(const std::string &name,
const std::map< std::string, Sparsity > &st) "

[INTERNAL]  Create a new Solver.

";

%feature("docstring")  casadi::FunctionInternal::get_max_in(int ind) const
"

[INTERNAL]  Get largest input value.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::FunctionInternal::get_partition(int iind, int
oind, Sparsity &D1, Sparsity &D2, bool compact, bool symmetric, bool
allow_forward, bool allow_reverse) const  "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::Conic::get_name_in(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::codegen_body(CodeGenerator
&g) const  "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring")  casadi::ProtoFunction::free_mem(void *mem) const  "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::replace_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const double
**arg, double **res, int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const SXElem
**arg, SXElem **res, int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const bvec_t
**arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const std::vector<
Matrix< D > > &arg, std::vector< Matrix< D > > &res, bool always_inline,
bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(int iind, int
oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(int nadj,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FunctionInternal::disp(std::ostream &stream,
bool more) const override "

[INTERNAL]  Display object.

";

%feature("docstring")  casadi::Conic::get_n_in() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::FunctionInternal::has_forward(int nfwd) const
"

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")
casadi::FunctionInternal::codegen_sparsities(CodeGenerator &g) const  "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring")  casadi::Conic::generateNativeCode(std::ostream &file)
const  "

[INTERNAL]  Generate native code in the interfaced language for debugging

";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")
casadi::FunctionInternal::codegen_declarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::disp_more(std::ostream
&stream) const  "

[INTERNAL]  Print more.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M > > &fseed) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::get_min_in(int ind) const
"

[INTERNAL]  Get smallest input value.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::finalize(const Dict &opts)
override "

[INTERNAL]  Finalize the object creation.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(int iind,
int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::get_reverse(int nadj, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::export_code(const
std::string &lang, std::ostream &stream, const Dict &options) const  "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring")  casadi::FunctionInternal::check_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(int nadj) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::eval_dm(const std::vector<
DM > &arg) const  "

[INTERNAL]  Evaluate with DM matrices.

";


// File: classcasadi_1_1Rank1.xml


// File: classcasadi_1_1RealtypeSX.xml


// File: classcasadi_1_1Reshape.xml


// File: classcasadi_1_1Rootfinder.xml
%feature("docstring")  casadi::FunctionInternal::definition() const  "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring")  casadi::FunctionInternal::has_derivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< int > &order_in, const std::vector< int >
&order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::OracleFunction::expand() "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::replace_res(const
std::vector< M > &res) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::FunctionInternal::get_default_in(int ind)
const  "

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::matching_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

";

%feature("docstring")  casadi::OracleFunction::calc_function(OracleMemory
*m, const std::string &fcn, const double *const *arg=0) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M > > &fseed) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::size_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::Rootfinder::get_options() const override "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::OracleFunction::monitored(const std::string
&name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::check_res(const
std::vector< M > &res) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

";

%feature("docstring")  casadi::Rootfinder::has_spfwd() const override "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::FunctionInternal::instruction_MX(int k) const
"

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring")  casadi::FunctionInternal::get_min_in(int ind) const
"

[INTERNAL]  Get smallest input value.

";

%feature("docstring")  casadi::Rootfinder::has_reverse(int nadj) const
override "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(int nfwd) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::forward(int nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::fwd_seed(int nfwd) const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::info() const  "

[INTERNAL]  Obtain information about function

";

%feature("docstring")  casadi::FunctionInternal::sx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::get_abstol() const  "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring")  casadi::FunctionInternal::jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::reverse(int nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::Rootfinder::get_sparsity_out(int i) override
"

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::replace_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn, const std::string &fname, bool jit=false) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M > > &aseed) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(int iind, int
oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(int nadj,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::PluginInterface< Rootfinder  >::plugin_name()
const  "

[INTERNAL] ";

%feature("docstring")  casadi::Rootfinder::get_name_out(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::Rootfinder::init(const Dict &opts) override "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::OracleFunction::free_mem(void *mem) const
override "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::all_scalar() const  "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring") casadi::Rootfinder::Rootfinder(const std::string
&name, const Function &oracle) "

[INTERNAL]  Constructor.

Parameters:
-----------

f:   Function mapping from (n+1) inputs to 1 output.

";

%feature("docstring")  casadi::Rootfinder::get_forward(int nfwd, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const override "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::Rootfinder::get_n_in() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::OracleFunction::get_function() const override
"

[INTERNAL] ";

%feature("docstring")  casadi::OracleFunction::get_function(const
std::string &name) const override "

[INTERNAL] ";

%feature("docstring")  casadi::Rootfinder::has_forward(int nfwd) const
override "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::Rootfinder::solve(void *mem) const  "

[INTERNAL] ";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::Rootfinder::get_name_in(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::disp_more(std::ostream
&stream) const  "

[INTERNAL]  Print more.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::OracleFunction::oracle() const override "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::instruction_id(int k) const
"

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::get_free() const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::Rootfinder::ad_forward(const std::vector< MX
> &arg, const std::vector< MX > &res, const std::vector< std::vector< MX > >
&fseed, std::vector< std::vector< MX > > &fsens, bool always_inline, bool
never_inline) const  "

[INTERNAL]  Create call to (cached) derivative function, forward mode.

";

%feature("docstring") casadi::Rootfinder::~Rootfinder "

[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::Rootfinder::has_sprev() const override "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FunctionInternal::symbolic_output(const
std::vector< MX > &arg) const  "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::FunctionInternal::instruction_input(int k)
const  "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring") casadi::Rootfinder "

Internal class.

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| common_options   | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | auto-generated   | nction           |
|                  |                 | functions        |                  |
+------------------+-----------------+------------------+------------------+
| constraints      | OT_INTVECTOR    | Constrain the    | casadi::Rootfind |
|                  |                 | unknowns. 0      | er               |
|                  |                 | (default): no    |                  |
|                  |                 | constraint on    |                  |
|                  |                 | ui, 1: ui >=     |                  |
|                  |                 | 0.0, -1: ui <=   |                  |
|                  |                 | 0.0, 2: ui >     |                  |
|                  |                 | 0.0, -2: ui <    |                  |
|                  |                 | 0.0.             |                  |
+------------------+-----------------+------------------+------------------+
| implicit_input   | OT_INT          | Index of the     | casadi::Rootfind |
|                  |                 | input that       | er               |
|                  |                 | corresponds to   |                  |
|                  |                 | the actual root- |                  |
|                  |                 | finding          |                  |
+------------------+-----------------+------------------+------------------+
| implicit_output  | OT_INT          | Index of the     | casadi::Rootfind |
|                  |                 | output that      | er               |
|                  |                 | corresponds to   |                  |
|                  |                 | the actual root- |                  |
|                  |                 | finding          |                  |
+------------------+-----------------+------------------+------------------+
| jacobian_functio | OT_FUNCTION     | Function object  | casadi::Rootfind |
| n                |                 | for calculating  | er               |
|                  |                 | the Jacobian     |                  |
|                  |                 | (autogenerated   |                  |
|                  |                 | by default)      |                  |
+------------------+-----------------+------------------+------------------+
| linear_solver    | OT_STRING       | User-defined     | casadi::Rootfind |
|                  |                 | linear solver    | er               |
|                  |                 | class. Needed    |                  |
|                  |                 | for              |                  |
|                  |                 | sensitivities.   |                  |
+------------------+-----------------+------------------+------------------+
| linear_solver_op | OT_DICT         | Options to be    | casadi::Rootfind |
| tions            |                 | passed to the    | er               |
|                  |                 | linear solver.   |                  |
+------------------+-----------------+------------------+------------------+
| monitor          | OT_STRINGVECTOR | Set of user      | casadi::OracleFu |
|                  |                 | problem          | nction           |
|                  |                 | functions to be  |                  |
|                  |                 | monitored        |                  |
+------------------+-----------------+------------------+------------------+
| specific_options | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | specific auto-   | nction           |
|                  |                 | generated        |                  |
|                  |                 | functions,       |                  |
|                  |                 | overwriting the  |                  |
|                  |                 | defaults from    |                  |
|                  |                 | common_options.  |                  |
|                  |                 | Nested           |                  |
|                  |                 | dictionary.      |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: rootfinder_impl.hpp ";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::codegen_meta(CodeGenerator
&g) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FunctionInternal::sx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const std::vector<
Matrix< D > > &arg, std::vector< Matrix< D > > &res, bool always_inline,
bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::OracleFunction::finalize(const Dict &opts)
override "

[INTERNAL]  Finalize initialization.

";

%feature("docstring")  casadi::Rootfinder::get_n_out() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, int order, bool
tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::Rootfinder::sp_forward(const bvec_t **arg,
bvec_t **res, int *iw, bvec_t *w, void *mem) const override "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::OracleFunction::alloc_mem() const override "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::SharedObjectInternal::class_name() const  "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsityGen(int iind,
int oind, bool symmetric, int gr_i=1, int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian(const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInput(int k) const
"

[DEPRECATED] Renamed instruction_index

";

%feature("docstring")
casadi::FunctionInternal::codegen_sparsities(CodeGenerator &g) const  "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring")  casadi::Rootfinder::sp_reverse(bvec_t **arg, bvec_t
**res, int *iw, bvec_t *w, void *mem) const override "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::export_code(const
std::string &lang, std::ostream &stream, const Dict &options) const  "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring")  casadi::FunctionInternal::eval_dm(const std::vector<
DM > &arg) const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::OracleFunction::jit_dependencies(const
std::string &fname) override "

[INTERNAL]  JIT for dependencies.

";

%feature("docstring")  casadi::Rootfinder::init_mem(void *mem) const
override "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(int iind,
int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::get_partition(int iind, int
oind, Sparsity &D1, Sparsity &D2, bool compact, bool symmetric, bool
allow_forward, bool allow_reverse) const  "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::Rootfinder::ad_reverse(const std::vector< MX
> &arg, const std::vector< MX > &res, const std::vector< std::vector< MX > >
&aseed, std::vector< std::vector< MX > > &asens, bool always_inline, bool
never_inline) const  "

[INTERNAL]  Create call to (cached) derivative function, reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::n_instructions() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::OracleFunction::print_fstats(const
OracleMemory *m) const  "

[INTERNAL]  Print statistics.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::OracleFunction::create_function(const
std::string &fname, const std::vector< std::string > &s_in, const
std::vector< std::string > &s_out, const Function::AuxOut
&aux=Function::AuxOut()) "

[INTERNAL]  Create an oracle function

";

%feature("docstring")  casadi::FunctionInternal::size2_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::Rootfinder::get_sparsity_in(int i) override "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::check_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::OracleFunction::has_function(const
std::string &fname) const override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::mx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::instruction_output(int k)
const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::OracleFunction::get_stats(void *mem) const
override "

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOutput(int k)
const  "

[DEPRECATED] Renamed instruction_output

";

%feature("docstring")  casadi::FunctionInternal::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::FunctionInternal::size_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::instruction_constant(int k)
const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::get_reltol() const  "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(int nadj) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::codegen_body(CodeGenerator
&g) const  "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const double
**arg, double **res, int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const SXElem
**arg, SXElem **res, int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const bvec_t
**arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::Rootfinder::set_work(void *mem, const double
**&arg, double **&res, int *&iw, double *&w) const override "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::OracleFunction::set_temp(void *mem, const
double **arg, double **res, int *iw, double *w) const override "

[INTERNAL]  Set the work vectors.

";

%feature("docstring")  casadi::FunctionInternal::disp(std::ostream &stream,
bool more) const override "

[INTERNAL]  Display object.

";

%feature("docstring")  casadi::FunctionInternal::matching_res(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

";

%feature("docstring")  casadi::Rootfinder::uses_output() const override "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::get_max_in(int ind) const
"

[INTERNAL]  Get largest input value.

";

%feature("docstring")  casadi::FunctionInternal::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring")  casadi::Rootfinder::eval(const double **arg, double
**res, int *iw, double *w, void *mem) const override "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::codegen(CodeGenerator &g,
const std::string &fname) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")
casadi::FunctionInternal::codegen_declarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::OracleFunction::generate_dependencies(const
std::string &fname, const Dict &opts) const override "

[INTERNAL]  Export / Generate C code for the generated functions.

";

%feature("docstring")  casadi::Rootfinder::get_reverse(int nadj, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const override "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::mx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";


// File: classcasadi_1_1RungeKutta.xml
%feature("docstring")  casadi::Integrator::rx() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::rz() const  "

[INTERNAL] ";

%feature("docstring") casadi::RungeKutta::~RungeKutta "

[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::OracleFunction::generate_dependencies(const
std::string &fname, const Dict &opts) const override "

[INTERNAL]  Export / Generate C code for the generated functions.

";

%feature("docstring")  casadi::Integrator::rq() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::rp() const  "

[INTERNAL] ";

%feature("docstring")  casadi::OracleFunction::jit_dependencies(const
std::string &fname) override "

[INTERNAL]  JIT for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::Integrator::has_forward(int nfwd) const
override "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::Integrator::aug_fwd(int nfwd) const  "

[INTERNAL]  Generate a augmented DAE system with nfwd forward sensitivities.

";

%feature("docstring")  casadi::FunctionInternal::instruction_MX(int k) const
"

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::all_scalar() const  "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")  casadi::OracleFunction::finalize(const Dict &opts)
override "

[INTERNAL]  Finalize initialization.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::export_code(const
std::string &lang, std::ostream &stream, const Dict &options) const  "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOutput(int k)
const  "

[DEPRECATED] Renamed instruction_output

";

%feature("docstring")  casadi::Integrator::has_spfwd() const override "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::size2_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::RungeKutta::class_name() const override "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::OracleFunction::expand() "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::disp(std::ostream &stream,
bool more) const override "

[INTERNAL]  Display object.

";

%feature("docstring")  casadi::Integrator::print_stats(IntegratorMemory
*mem) const  "

[INTERNAL]  Print solver statistics.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(int nadj,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::Integrator::setStopTime(IntegratorMemory
*mem, double tf) const  "

[INTERNAL]  Set stop time for the integration.

";

%feature("docstring")  casadi::FunctionInternal::matching_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::Integrator::get_n_in() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const std::vector<
Matrix< D > > &arg, std::vector< Matrix< D > > &res, bool always_inline,
bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FixedStepIntegrator::getExplicit() const  "

[INTERNAL]  Get explicit dynamics.

";

%feature("docstring")  casadi::FunctionInternal::check_res(const
std::vector< M > &res) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

";

%feature("docstring")  casadi::Integrator::get_name_in(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::reverse(int nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::Integrator::sp_jac_rdae() "

[INTERNAL]  Create sparsity pattern of the extended Jacobian (backward
problem)

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::Integrator::p() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::q() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::t() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::z() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::mx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::Integrator::x() const  "

[INTERNAL] ";

%feature("docstring")  casadi::OracleFunction::get_function() const override
"

[INTERNAL] ";

%feature("docstring")  casadi::OracleFunction::get_function(const
std::string &name) const override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::size1_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::size_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::Integrator::sp_forward(const bvec_t **arg,
bvec_t **res, int *iw, bvec_t *w, void *mem) const override "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::get_free() const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::OracleFunction::create_function(const
std::string &fname, const std::vector< std::string > &s_in, const
std::vector< std::string > &s_out, const Function::AuxOut
&aux=Function::AuxOut()) "

[INTERNAL]  Create an oracle function

";

%feature("docstring")  casadi::Integrator::get_forward(int nfwd, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const override "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::FunctionInternal::instruction_input(int k)
const  "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian(const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::codegen_body(CodeGenerator
&g) const  "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::instruction_constant(int k)
const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(int nadj) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(int iind,
int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::get_reltol() const  "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::Integrator::sp_jac_dae() "

[INTERNAL]  Create sparsity pattern of the extended Jacobian (forward
problem)

";

%feature("docstring")  casadi::OracleFunction::print_fstats(const
OracleMemory *m) const  "

[INTERNAL]  Print statistics.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::RungeKutta::setupFG() override "

[INTERNAL]  Setup F and G.

";

%feature("docstring")  casadi::FunctionInternal::forward(int nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::eval_dm(const std::vector<
DM > &arg) const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FixedStepIntegrator::retreat(IntegratorMemory
*mem, double t, double *rx, double *rz, double *rq) const override "

[INTERNAL]  Retreat solution in time.

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::FixedStepIntegrator::alloc_mem() const
override "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::has_derivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::codegen_meta(CodeGenerator
&g) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FixedStepIntegrator::advance(IntegratorMemory
*mem, double t, double *x, double *z, double *q) const override "

[INTERNAL]  Advance solution in time.

";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInput(int k) const
"

[DEPRECATED] Renamed instruction_index

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")
casadi::FunctionInternal::codegen_sparsities(CodeGenerator &g) const  "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, int order, bool
tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(int iind, int
oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring") casadi::RungeKutta "

[INTERNAL]  'rk' plugin for Integrator

Fixed-step explicit Runge-Kutta integrator for ODEs Currently implements
RK4.

The method is still under development

Joel Andersson

C++ includes: runge_kutta.hpp ";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsityGen(int iind,
int oind, bool symmetric, int gr_i=1, int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::Integrator::get_sparsity_in(int i) override "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::sx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::get_partition(int iind, int
oind, Sparsity &D1, Sparsity &D2, bool compact, bool symmetric, bool
allow_forward, bool allow_reverse) const  "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::FunctionInternal::instruction_output(int k)
const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::Integrator::sp_reverse(bvec_t **arg, bvec_t
**res, int *iw, bvec_t *w, void *mem) const override "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::OracleFunction::oracle() const override "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::Integrator::get_sparsity_out(int i) override
"

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::Integrator::has_reverse(int nadj) const
override "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::FunctionInternal::instruction_id(int k) const
"

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::fwd_seed(int nfwd) const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn, const std::string &fname, bool jit=false) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::FixedStepIntegrator::getExplicitB() const  "

[INTERNAL]  Get explicit dynamics (backward problem)

";

%feature("docstring")  casadi::OracleFunction::set_temp(void *mem, const
double **arg, double **res, int *iw, double *w) const override "

[INTERNAL]  Set the work vectors.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M > > &aseed) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")  casadi::Integrator::get_name_out(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::RungeKutta::RungeKutta(const std::string
&name, const Function &dae) "

[INTERNAL]  Constructor.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< int > &order_in, const std::vector< int >
&order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::FunctionInternal::info() const  "

[INTERNAL]  Obtain information about function

";

%feature("docstring")  casadi::FunctionInternal::check_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

";

%feature("docstring")  casadi::Integrator::get_n_out() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::OracleFunction::monitored(const std::string
&name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::symbolic_output(const
std::vector< MX > &arg) const  "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::uses_output() const  "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::get_min_in(int ind) const
"

[INTERNAL]  Get smallest input value.

";

%feature("docstring")  casadi::FunctionInternal::get_max_in(int ind) const
"

[INTERNAL]  Get largest input value.

";

%feature("docstring")  casadi::FixedStepIntegrator::get_options() const
override "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::FunctionInternal::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M > > &fseed) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(int nfwd) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::get_default_in(int ind)
const  "

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::Integrator::has_sprev() const override "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FixedStepIntegrator::resetB(IntegratorMemory
*mem, double t, const double *rx, const double *rz, const double *rp) const
override "

[INTERNAL]  Reset the backward problem and take time to tf.

";

%feature("docstring")  casadi::FunctionInternal::replace_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::Integrator::eval(const double **arg, double
**res, int *iw, double *w, void *mem) const override "

[INTERNAL]  evaluate

";

%feature("docstring")  casadi::OracleFunction::calc_function(OracleMemory
*m, const std::string &fcn, const double *const *arg=0) const  "

[INTERNAL] ";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::FunctionInternal::get_abstol() const  "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring")  casadi::Integrator::get_reverse(int nadj, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const override "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::FunctionInternal::n_instructions() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::disp_more(std::ostream
&stream) const  "

[INTERNAL]  Print more.

";

%feature("docstring")  casadi::FixedStepIntegrator::reset(IntegratorMemory
*mem, double t, const double *x, const double *z, const double *p) const
override "

[INTERNAL]  Reset the forward problem.

";

%feature("docstring")  casadi::FunctionInternal::definition() const  "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring")  casadi::FixedStepIntegrator::init_mem(void *mem)
const override "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::RungeKutta::init(const Dict &opts) override "

[INTERNAL]  Initialize stage.

";

%feature("docstring")  casadi::Integrator::getDerivativeOptions(bool fwd)
const  "

[INTERNAL]  Set solver specific options to generated augmented integrators.

";

%feature("docstring")  casadi::OracleFunction::has_function(const
std::string &fname) const override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::size_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::OracleFunction::get_stats(void *mem) const
override "

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::Integrator::aug_adj(int nadj) const  "

[INTERNAL]  Generate a augmented DAE system with nadj adjoint sensitivities.

";

%feature("docstring")  casadi::FunctionInternal::matching_res(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::RungeKutta::plugin_name() const override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const double
**arg, double **res, int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const SXElem
**arg, SXElem **res, int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const bvec_t
**arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FixedStepIntegrator::free_mem(void *mem)
const override "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::codegen(CodeGenerator &g,
const std::string &fname) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::replace_res(const
std::vector< M > &res) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")
casadi::FunctionInternal::codegen_declarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";


// File: classcasadi_1_1Scpgen.xml
%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M > > &aseed) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::instruction_id(int k) const
"

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::Nlpsol::get_name_in(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::OracleFunction::create_function(const
std::string &fname, const std::vector< std::string > &s_in, const
std::vector< std::string > &s_out, const Function::AuxOut
&aux=Function::AuxOut()) "

[INTERNAL]  Create an oracle function

";

%feature("docstring")  casadi::FunctionInternal::get_abstol() const  "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::Scpgen::eval_vec(ScpgenMemory *m) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::size1_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::Scpgen::eval_res(ScpgenMemory *m) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(int nadj,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M > > &fseed) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::codegen_body(CodeGenerator
&g) const  "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring")  casadi::FunctionInternal::export_code(const
std::string &lang, std::ostream &stream, const Dict &options) const  "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring")  casadi::Scpgen::eval_mat(ScpgenMemory *m) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(int nfwd) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::Nlpsol::disp_more(std::ostream &stream) const
override "

[INTERNAL]  Print description.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::fwd_seed(int nfwd) const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::OracleFunction::expand() "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_reverse(int nadj, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::OracleFunction::oracle() const override "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FunctionInternal::get_max_in(int ind) const
"

[INTERNAL]  Get largest input value.

";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring") casadi::Scpgen::Scpgen(const std::string &name, const
Function &nlp) "

[INTERNAL] ";

%feature("docstring")  casadi::Scpgen::free_mem(void *mem) const override "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::instruction_constant(int k)
const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::OracleFunction::finalize(const Dict &opts)
override "

[INTERNAL]  Finalize initialization.

";

%feature("docstring")  casadi::FunctionInternal::all_scalar() const  "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")  casadi::FunctionInternal::uses_output() const  "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring")  casadi::FunctionInternal::check_res(const
std::vector< M > &res) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

";

%feature("docstring")  casadi::FunctionInternal::instruction_input(int k)
const  "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::Nlpsol::get_n_out() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::Scpgen::alloc_mem() const override "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::Nlpsol::integer_support() const  "

[INTERNAL]  Can discrete variables be treated.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::get_min_in(int ind) const
"

[INTERNAL]  Get smallest input value.

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FunctionInternal::reverse(int nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::Scpgen::set_work(void *mem, const double
**&arg, double **&res, int *&iw, double *&w) const override "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::get_free() const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::Scpgen::primalInfeasibility(ScpgenMemory *m)
const  "

[INTERNAL] ";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn, const std::string &fname, bool jit=false) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::sx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::get_forward(int nfwd, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::Scpgen::init_mem(void *mem) const override "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInput(int k) const
"

[DEPRECATED] Renamed instruction_index

";

%feature("docstring")  casadi::FunctionInternal::instruction_output(int k)
const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(int iind,
int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const std::vector<
Matrix< D > > &arg, std::vector< Matrix< D > > &res, bool always_inline,
bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::size_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const double
**arg, double **res, int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const SXElem
**arg, SXElem **res, int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const bvec_t
**arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::disp(std::ostream &stream,
bool more) const override "

[INTERNAL]  Display object.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::FunctionInternal::get_partition(int iind, int
oind, Sparsity &D1, Sparsity &D2, bool compact, bool symmetric, bool
allow_forward, bool allow_reverse) const  "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::mx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::has_reverse(int nadj) const
"

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::get_reltol() const  "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring")  casadi::Scpgen::dualInfeasibility(ScpgenMemory *m)
const  "

[INTERNAL] ";

%feature("docstring")  casadi::Scpgen::class_name() const override "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::FunctionInternal::replace_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring")  casadi::FunctionInternal::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< int > &order_in, const std::vector< int >
&order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::Scpgen::solve_qp(ScpgenMemory *m) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::Scpgen::eval_exp(ScpgenMemory *m) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::check_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::Nlpsol::get_default_in(int ind) const
override "

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::Scpgen::regularize(ScpgenMemory *m) const  "

[INTERNAL] ";

%feature("docstring")  casadi::OracleFunction::set_temp(void *mem, const
double **arg, double **res, int *iw, double *w) const override "

[INTERNAL]  Set the work vectors.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::codegen_meta(CodeGenerator
&g) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::forward(int nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::Scpgen::get_options() const override "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, int order, bool
tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::Nlpsol::get_name_out(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(int nadj) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::definition() const  "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring")  casadi::FunctionInternal::sx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::Nlpsol::check_inputs(void *mem) const  "

[INTERNAL]  Check if the inputs correspond to a well-posed problem.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::Nlpsol::get_sparsity_in(int i) override "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::Nlpsol::get_sparsity_out(int i) override "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::OracleFunction::generate_dependencies(const
std::string &fname, const Dict &opts) const override "

[INTERNAL]  Export / Generate C code for the generated functions.

";

%feature("docstring")  casadi::FunctionInternal::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")  casadi::OracleFunction::monitored(const std::string
&name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::eval_dm(const std::vector<
DM > &arg) const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::OracleFunction::get_function() const override
"

[INTERNAL] ";

%feature("docstring")  casadi::OracleFunction::get_function(const
std::string &name) const override "

[INTERNAL] ";

%feature("docstring")  casadi::OracleFunction::print_fstats(const
OracleMemory *m) const  "

[INTERNAL]  Print statistics.

";

%feature("docstring")  casadi::Nlpsol::getReducedHessian() "

[INTERNAL] ";

%feature("docstring")  casadi::Nlpsol::eval(const double **arg, double
**res, int *iw, double *w, void *mem) const override "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::Nlpsol::setOptionsFromFile(const std::string
&file) "

[INTERNAL]  Read options from parameter xml.

";

%feature("docstring")  casadi::FunctionInternal::info() const  "

[INTERNAL]  Obtain information about function

";

%feature("docstring")  casadi::FunctionInternal::symbolic_output(const
std::vector< MX > &arg) const  "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::codegen(CodeGenerator &g,
const std::string &fname) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::OracleFunction::jit_dependencies(const
std::string &fname) override "

[INTERNAL]  JIT for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::size_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOutput(int k)
const  "

[DEPRECATED] Renamed instruction_output

";

%feature("docstring")  casadi::FunctionInternal::sp_forward(const bvec_t
**arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::Scpgen::solve(void *mem) const override "

[INTERNAL] ";

%feature("docstring")  casadi::Scpgen::line_search(ScpgenMemory *m, int
&ls_iter, bool &ls_success) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::matching_res(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::has_forward(int nfwd) const
"

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(int iind, int
oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::instruction_MX(int k) const
"

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring")  casadi::Scpgen::get_stats(void *mem) const override "

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::OracleFunction::calc_function(OracleMemory
*m, const std::string &fcn, const double *const *arg=0) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::n_instructions() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::matching_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian(const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")
casadi::FunctionInternal::codegen_declarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::Scpgen::plugin_name() const override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::has_derivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::FunctionInternal::sp_reverse(bvec_t **arg,
bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::Scpgen::init(const Dict &opts) override "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::Scpgen "

'scpgen' plugin for Nlpsol

A structure-exploiting sequential quadratic programming (to be come
sequential convex programming) method for nonlinear programming.

>List of available options

+-----------------------+-----------------+--------------------------------+
|          Id           |      Type       |          Description           |
+=======================+=================+================================+
| beta                  | OT_DOUBLE       | Line-search parameter,         |
|                       |                 | restoration factor of stepsize |
+-----------------------+-----------------+--------------------------------+
| c1                    | OT_DOUBLE       | Armijo condition, coefficient  |
|                       |                 | of decrease in merit           |
+-----------------------+-----------------+--------------------------------+
| codegen               | OT_BOOL         | C-code generation              |
+-----------------------+-----------------+--------------------------------+
| hessian_approximation | OT_STRING       | gauss-newton|exact             |
+-----------------------+-----------------+--------------------------------+
| lbfgs_memory          | OT_INT          | Size of L-BFGS memory.         |
+-----------------------+-----------------+--------------------------------+
| max_iter              | OT_INT          | Maximum number of SQP          |
|                       |                 | iterations                     |
+-----------------------+-----------------+--------------------------------+
| max_iter_ls           | OT_INT          | Maximum number of linesearch   |
|                       |                 | iterations                     |
+-----------------------+-----------------+--------------------------------+
| merit_memsize         | OT_INT          | Size of memory to store        |
|                       |                 | history of merit function      |
|                       |                 | values                         |
+-----------------------+-----------------+--------------------------------+
| merit_start           | OT_DOUBLE       | Lower bound for the merit      |
|                       |                 | function parameter             |
+-----------------------+-----------------+--------------------------------+
| name_x                | OT_STRINGVECTOR | Names of the variables.        |
+-----------------------+-----------------+--------------------------------+
| print_header          | OT_BOOL         | Print the header with problem  |
|                       |                 | statistics                     |
+-----------------------+-----------------+--------------------------------+
| print_x               | OT_INTVECTOR    | Which variables to print.      |
+-----------------------+-----------------+--------------------------------+
| qpsol                 | OT_STRING       | The QP solver to be used by    |
|                       |                 | the SQP method                 |
+-----------------------+-----------------+--------------------------------+
| qpsol_options         | OT_DICT         | Options to be passed to the QP |
|                       |                 | solver                         |
+-----------------------+-----------------+--------------------------------+
| reg_threshold         | OT_DOUBLE       | Threshold for the              |
|                       |                 | regularization.                |
+-----------------------+-----------------+--------------------------------+
| regularize            | OT_BOOL         | Automatic regularization of    |
|                       |                 | Lagrange Hessian.              |
+-----------------------+-----------------+--------------------------------+
| tol_du                | OT_DOUBLE       | Stopping criterion for dual    |
|                       |                 | infeasability                  |
+-----------------------+-----------------+--------------------------------+
| tol_pr                | OT_DOUBLE       | Stopping criterion for primal  |
|                       |                 | infeasibility                  |
+-----------------------+-----------------+--------------------------------+
| tol_pr_step           | OT_DOUBLE       | Stopping criterion for the     |
|                       |                 | step size                      |
+-----------------------+-----------------+--------------------------------+
| tol_reg               | OT_DOUBLE       | Stopping criterion for         |
|                       |                 | regularization                 |
+-----------------------+-----------------+--------------------------------+

Joel Andersson, Attila Kozma and Joris Gillis

>List of available options

+-------------------+-----------------+-------------------+----------------+
|        Id         |      Type       |    Description    |    Used in     |
+===================+=================+===================+================+
| beta              | OT_DOUBLE       | Line-search       | casadi::Scpgen |
|                   |                 | parameter,        |                |
|                   |                 | restoration       |                |
|                   |                 | factor of         |                |
|                   |                 | stepsize          |                |
+-------------------+-----------------+-------------------+----------------+
| c1                | OT_DOUBLE       | Armijo condition, | casadi::Scpgen |
|                   |                 | coefficient of    |                |
|                   |                 | decrease in merit |                |
+-------------------+-----------------+-------------------+----------------+
| calc_multipliers  | OT_BOOL         | Calculate         | casadi::Nlpsol |
|                   |                 | Lagrange          |                |
|                   |                 | multipliers in    |                |
|                   |                 | the Nlpsol base   |                |
|                   |                 | class             |                |
+-------------------+-----------------+-------------------+----------------+
| codegen           | OT_BOOL         | C-code generation | casadi::Scpgen |
+-------------------+-----------------+-------------------+----------------+
| discrete          | OT_BOOLVECTOR   | Indicates which   | casadi::Nlpsol |
|                   |                 | of the variables  |                |
|                   |                 | are discrete,     |                |
|                   |                 | i.e. integer-     |                |
|                   |                 | valued            |                |
+-------------------+-----------------+-------------------+----------------+
| eval_errors_fatal | OT_BOOL         | When errors occur | casadi::Nlpsol |
|                   |                 | during evaluation |                |
|                   |                 | of f,g,...,stop   |                |
|                   |                 | the iterations    |                |
+-------------------+-----------------+-------------------+----------------+
| expand            | OT_BOOL         | Replace MX with   | casadi::Nlpsol |
|                   |                 | SX expressions in |                |
|                   |                 | problem           |                |
|                   |                 | formulation       |                |
|                   |                 | [false]           |                |
+-------------------+-----------------+-------------------+----------------+
| hessian_approxima | OT_STRING       | gauss-            | casadi::Scpgen |
| tion              |                 | newton|exact      |                |
+-------------------+-----------------+-------------------+----------------+
| ignore_check_vec  | OT_BOOL         | If set to true,   | casadi::Nlpsol |
|                   |                 | the input shape   |                |
|                   |                 | of F will not be  |                |
|                   |                 | checked.          |                |
+-------------------+-----------------+-------------------+----------------+
| iteration_callbac | OT_FUNCTION     | A function that   | casadi::Nlpsol |
| k                 |                 | will be called at |                |
|                   |                 | each iteration    |                |
|                   |                 | with the solver   |                |
|                   |                 | as input. Check   |                |
|                   |                 | documentation of  |                |
|                   |                 | Callback .        |                |
+-------------------+-----------------+-------------------+----------------+
| iteration_callbac | OT_BOOL         | If set to true,   | casadi::Nlpsol |
| k_ignore_errors   |                 | errors thrown by  |                |
|                   |                 | iteration_callbac |                |
|                   |                 | k will be         |                |
|                   |                 | ignored.          |                |
+-------------------+-----------------+-------------------+----------------+
| iteration_callbac | OT_INT          | Only call the     | casadi::Nlpsol |
| k_step            |                 | callback function |                |
|                   |                 | every few         |                |
|                   |                 | iterations.       |                |
+-------------------+-----------------+-------------------+----------------+
| lbfgs_memory      | OT_INT          | Size of L-BFGS    | casadi::Scpgen |
|                   |                 | memory.           |                |
+-------------------+-----------------+-------------------+----------------+
| max_iter          | OT_INT          | Maximum number of | casadi::Scpgen |
|                   |                 | SQP iterations    |                |
+-------------------+-----------------+-------------------+----------------+
| max_iter_ls       | OT_INT          | Maximum number of | casadi::Scpgen |
|                   |                 | linesearch        |                |
|                   |                 | iterations        |                |
+-------------------+-----------------+-------------------+----------------+
| merit_memsize     | OT_INT          | Size of memory to | casadi::Scpgen |
|                   |                 | store history of  |                |
|                   |                 | merit function    |                |
|                   |                 | values            |                |
+-------------------+-----------------+-------------------+----------------+
| merit_start       | OT_DOUBLE       | Lower bound for   | casadi::Scpgen |
|                   |                 | the merit         |                |
|                   |                 | function          |                |
|                   |                 | parameter         |                |
+-------------------+-----------------+-------------------+----------------+
| name_x            | OT_STRINGVECTOR | Names of the      | casadi::Scpgen |
|                   |                 | variables.        |                |
+-------------------+-----------------+-------------------+----------------+
| oracle_options    | OT_DICT         | Options to be     | casadi::Nlpsol |
|                   |                 | passed to the     |                |
|                   |                 | oracle function   |                |
+-------------------+-----------------+-------------------+----------------+
| print_header      | OT_BOOL         | Print the header  | casadi::Scpgen |
|                   |                 | with problem      |                |
|                   |                 | statistics        |                |
+-------------------+-----------------+-------------------+----------------+
| print_x           | OT_INTVECTOR    | Which variables   | casadi::Scpgen |
|                   |                 | to print.         |                |
+-------------------+-----------------+-------------------+----------------+
| qpsol             | OT_STRING       | The QP solver to  | casadi::Scpgen |
|                   |                 | be used by the    |                |
|                   |                 | SQP method        |                |
+-------------------+-----------------+-------------------+----------------+
| qpsol_options     | OT_DICT         | Options to be     | casadi::Scpgen |
|                   |                 | passed to the QP  |                |
|                   |                 | solver            |                |
+-------------------+-----------------+-------------------+----------------+
| reg_threshold     | OT_DOUBLE       | Threshold for the | casadi::Scpgen |
|                   |                 | regularization.   |                |
+-------------------+-----------------+-------------------+----------------+
| regularize        | OT_BOOL         | Automatic         | casadi::Scpgen |
|                   |                 | regularization of |                |
|                   |                 | Lagrange Hessian. |                |
+-------------------+-----------------+-------------------+----------------+
| tol_du            | OT_DOUBLE       | Stopping          | casadi::Scpgen |
|                   |                 | criterion for     |                |
|                   |                 | dual              |                |
|                   |                 | infeasability     |                |
+-------------------+-----------------+-------------------+----------------+
| tol_pr            | OT_DOUBLE       | Stopping          | casadi::Scpgen |
|                   |                 | criterion for     |                |
|                   |                 | primal            |                |
|                   |                 | infeasibility     |                |
+-------------------+-----------------+-------------------+----------------+
| tol_pr_step       | OT_DOUBLE       | Stopping          | casadi::Scpgen |
|                   |                 | criterion for the |                |
|                   |                 | step size         |                |
+-------------------+-----------------+-------------------+----------------+
| tol_reg           | OT_DOUBLE       | Stopping          | casadi::Scpgen |
|                   |                 | criterion for     |                |
|                   |                 | regularization    |                |
+-------------------+-----------------+-------------------+----------------+
| verbose_init      | OT_BOOL         | Print out timing  | casadi::Nlpsol |
|                   |                 | information about |                |
|                   |                 | the different     |                |
|                   |                 | stages of         |                |
|                   |                 | initialization    |                |
+-------------------+-----------------+-------------------+----------------+
| warn_initial_boun | OT_BOOL         | Warn if the       | casadi::Nlpsol |
| ds                |                 | initial guess     |                |
|                   |                 | does not satisfy  |                |
|                   |                 | LBX and UBX       |                |
+-------------------+-----------------+-------------------+----------------+

Diagrams
--------



C++ includes: scpgen.hpp ";

%feature("docstring")  casadi::Nlpsol::get_n_in() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::replace_res(const
std::vector< M > &res) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")
casadi::FunctionInternal::codegen_sparsities(CodeGenerator &g) const  "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring") casadi::Scpgen::~Scpgen "

[INTERNAL] ";

%feature("docstring")  casadi::Scpgen::getConic() const  "

[INTERNAL]  Access qpsol.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsityGen(int iind,
int oind, bool symmetric, int gr_i=1, int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::OracleFunction::has_function(const
std::string &fname) const override "

[INTERNAL] ";

%feature("docstring")  casadi::Scpgen::printIteration(ScpgenMemory *m,
std::ostream &stream) const  "

[INTERNAL] ";

%feature("docstring")  casadi::Scpgen::printIteration(ScpgenMemory *m,
std::ostream &stream, int iter, double obj, double pr_inf, double du_inf,
double reg, int ls_trials, bool ls_success) const  "

[INTERNAL] ";


// File: classcasadi_1_1SetNonzeros.xml


// File: classcasadi_1_1SetNonzerosSlice.xml


// File: classcasadi_1_1SetNonzerosSlice2.xml


// File: classcasadi_1_1SetNonzerosVector.xml


// File: classcasadi_1_1SharedObject.xml
%feature("docstring")  casadi::SharedObject::class_name() const  "

Get class name.

";

%feature("docstring")  casadi::SharedObject::is_null() const  "

Is a null pointer?

";

%feature("docstring")  casadi::SharedObject::print_ptr(std::ostream
&stream=casadi::uout()) const  "

[INTERNAL]  Print the pointer to the internal class

";

%feature("docstring")  casadi::SharedObject::disp(std::ostream &stream, bool
more=false) const  "

Print a description of the object.

";

%feature("docstring")  casadi::SharedObject::get_str(bool more=false) const
"

Get string representation.

";

%feature("docstring") casadi::SharedObject "

SharedObject implements a reference counting framework similar for efficient
and easily-maintained memory management.

To use the class, both the SharedObject class (the public class), and the
SharedObjectInternal class (the internal class) must be inherited from. It
can be done in two different files and together with memory management, this
approach provides a clear distinction of which methods of the class are to
be considered \"public\", i.e. methods for public use that can be considered
to remain over time with small changes, and the internal memory.

When interfacing a software, which typically includes including some header
file, this is best done only in the file where the internal class is
defined, to avoid polluting the global namespace and other side effects.

The default constructor always means creating a null pointer to an internal
class only. To allocate an internal class (this works only when the internal
class isn't abstract), use the constructor with arguments.

The copy constructor and the assignment operator perform shallow copies
only, to make a deep copy you must use the clone method explicitly. This
will give a shared pointer instance.

In an inheritance hierarchy, you can cast down automatically, e.g. (
SXFunction is a child class of Function): SXFunction derived(...); Function
base = derived;

To cast up, use the shared_cast template function, which works analogously
to dynamic_cast, static_cast, const_cast etc, e.g.: SXFunction derived(...);
Function base = derived; SXFunction derived_from_base =
shared_cast<SXFunction>(base);

A failed shared_cast will result in a null pointer (cf. dynamic_cast)

Joel Andersson

C++ includes: shared_object.hpp ";

%feature("docstring") casadi::SharedObject::__hash__ "

Returns a number that is unique for a given Node. If the Object does not
point to any node, \"0\" is returned.

";


// File: classcasadi_1_1ShellCompiler.xml
%feature("docstring")  casadi::ImporterInternal::read_external(const
std::string &sym, bool inlined, std::istream &file, int &offset) "

[INTERNAL]  Get an external function declaration.

";

%feature("docstring")  casadi::ImporterInternal::construct(const Dict &opts)
"

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::ImporterInternal::to_text(const std::string
&cmd, int ind=-1) const  "

[INTERNAL]  Get entry as a text.

";

%feature("docstring")  casadi::ShellCompiler::class_name() const override "

[INTERNAL]  Get type name.

";

%feature("docstring")  casadi::ShellCompiler::get_options() const override "

[INTERNAL]  Options.

";

%feature("docstring") casadi::ShellCompiler::~ShellCompiler "

[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::ShellCompiler::get_function(const std::string
&symname) override "

[INTERNAL]  Get a function pointer for numerical evaluation.

";

%feature("docstring")  casadi::ShellCompiler::init(const Dict &opts)
override "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::ImporterInternal::get_meta(const std::string
&cmd, int ind=-1) const  "

[INTERNAL]  Get entry as a text.

";

%feature("docstring")  casadi::ImporterInternal::has_function(const
std::string &symname) const  "

[INTERNAL]  Get a function pointer for numerical evaluation.

";

%feature("docstring")  casadi::ImporterInternal::inlined(const std::string
&symname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::ImporterInternal::read_meta(std::istream
&file, int &offset) "

[INTERNAL]  Get meta information.

";

%feature("docstring") casadi::ShellCompiler "

'shell' plugin for Importer

Joel Andersson  Interface to the JIT compiler SHELL

>List of available options

+----------------------+-----------------+---------------------------------+
|          Id          |      Type       |           Description           |
+======================+=================+=================================+
| cleanup              | OT_BOOL         | Cleanup temporary files when    |
|                      |                 | unloading. Default: true        |
+----------------------+-----------------+---------------------------------+
| compiler             | OT_STRING       | Compiler command                |
+----------------------+-----------------+---------------------------------+
| compiler_flags       | OT_STRINGVECTOR | Alias for 'compiler_flags'      |
+----------------------+-----------------+---------------------------------+
| compiler_output_flag | OT_STRING       | Compiler flag to denote object  |
|                      |                 | output. Default: '-o '          |
+----------------------+-----------------+---------------------------------+
| compiler_setup       | OT_STRING       | Compiler setup command.         |
|                      |                 | Intended to be fixed. The       |
|                      |                 | 'flag' option is the prefered   |
|                      |                 | way to set custom flags.        |
+----------------------+-----------------+---------------------------------+
| flags                | OT_STRINGVECTOR | Compile flags for the JIT       |
|                      |                 | compiler. Default: None         |
+----------------------+-----------------+---------------------------------+
| folder               | OT_STRING       | Folder to put temporary objects |
|                      |                 | in.                             |
+----------------------+-----------------+---------------------------------+
| linker               | OT_STRING       | Linker command                  |
+----------------------+-----------------+---------------------------------+
| linker_flags         | OT_STRINGVECTOR | Linker flags for the JIT        |
|                      |                 | compiler. Default: None         |
+----------------------+-----------------+---------------------------------+
| linker_output_flag   | OT_STRING       | Linker flag to denote shared    |
|                      |                 | library output. Default: '-o '  |
+----------------------+-----------------+---------------------------------+
| linker_setup         | OT_STRING       | Linker setup command. Intended  |
|                      |                 | to be fixed. The 'flag' option  |
|                      |                 | is the prefered way to set      |
|                      |                 | custom flags.                   |
+----------------------+-----------------+---------------------------------+

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| cleanup          | OT_BOOL         | Cleanup          | casadi::ShellCom |
|                  |                 | temporary files  | piler            |
|                  |                 | when unloading.  |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Compiler command | casadi::ShellCom |
|                  |                 |                  | piler            |
+------------------+-----------------+------------------+------------------+
| compiler_flags   | OT_STRINGVECTOR | Alias for        | casadi::ShellCom |
|                  |                 | 'compiler_flags' | piler            |
+------------------+-----------------+------------------+------------------+
| compiler_output_ | OT_STRING       | Compiler flag to | casadi::ShellCom |
| flag             |                 | denote object    | piler            |
|                  |                 | output. Default: |                  |
|                  |                 | '-o '            |                  |
+------------------+-----------------+------------------+------------------+
| compiler_setup   | OT_STRING       | Compiler setup   | casadi::ShellCom |
|                  |                 | command.         | piler            |
|                  |                 | Intended to be   |                  |
|                  |                 | fixed. The       |                  |
|                  |                 | 'flag' option is |                  |
|                  |                 | the prefered way |                  |
|                  |                 | to set custom    |                  |
|                  |                 | flags.           |                  |
+------------------+-----------------+------------------+------------------+
| flags            | OT_STRINGVECTOR | Compile flags    | casadi::ShellCom |
|                  |                 | for the JIT      | piler            |
|                  |                 | compiler.        |                  |
|                  |                 | Default: None    |                  |
+------------------+-----------------+------------------+------------------+
| folder           | OT_STRING       | Folder to put    | casadi::ShellCom |
|                  |                 | temporary        | piler            |
|                  |                 | objects in.      |                  |
+------------------+-----------------+------------------+------------------+
| linker           | OT_STRING       | Linker command   | casadi::ShellCom |
|                  |                 |                  | piler            |
+------------------+-----------------+------------------+------------------+
| linker_flags     | OT_STRINGVECTOR | Linker flags for | casadi::ShellCom |
|                  |                 | the JIT          | piler            |
|                  |                 | compiler.        |                  |
|                  |                 | Default: None    |                  |
+------------------+-----------------+------------------+------------------+
| linker_output_fl | OT_STRING       | Linker flag to   | casadi::ShellCom |
| ag               |                 | denote shared    | piler            |
|                  |                 | library output.  |                  |
|                  |                 | Default: '-o '   |                  |
+------------------+-----------------+------------------+------------------+
| linker_setup     | OT_STRING       | Linker setup     | casadi::ShellCom |
|                  |                 | command.         | piler            |
|                  |                 | Intended to be   |                  |
|                  |                 | fixed. The       |                  |
|                  |                 | 'flag' option is |                  |
|                  |                 | the prefered way |                  |
|                  |                 | to set custom    |                  |
|                  |                 | flags.           |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Importer |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: shell_compiler.hpp ";

%feature("docstring")  casadi::ImporterInternal::disp(std::ostream &stream,
bool more) const override "

[INTERNAL]  Print.

";

%feature("docstring")  casadi::ImporterInternal::body(const std::string
&symname) const  "

[INTERNAL]  Get the function body, if inlined.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::ImporterInternal::can_have_meta() const  "

[INTERNAL]  Can meta information be read?

";

%feature("docstring")  casadi::ImporterInternal::has_meta(const std::string
&cmd, int ind=-1) const  "

[INTERNAL]  Does an entry exist?

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::ShellCompiler::plugin_name() const override "

[INTERNAL]  Get name of plugin.

";

%feature("docstring") casadi::ShellCompiler::ShellCompiler(const std::string
&name) "

[INTERNAL]  Constructor.

";


// File: classcasadi_1_1Slice.xml
%feature("docstring")  casadi::Slice::is_scalar(int len) const  "

Is the slice a scalar.

";

%feature("docstring")  casadi::Slice::disp(std::ostream &stream, bool
more=false) const  "

Print a description of the object.

";

%feature("docstring")  casadi::Slice::scalar(int len) const  "

Get scalar (if is_scalar)

";

%feature("docstring")  casadi::Slice::type_name() const  "

Get name of the class.

";

%feature("docstring") casadi::Slice "

Class representing a Slice.

Note that Python or Octave do not need to use this class. They can just use
slicing utility from the host language ( M[0:6] in Python, M(1:7) )

C++ includes: slice.hpp ";

%feature("docstring")  casadi::Slice::info() const  "

Obtain information

";

%feature("docstring")  casadi::Slice::all(int len, bool ind1=false) const  "

Get a vector of indices.

";

%feature("docstring")  casadi::Slice::all(const Slice &outer, int len) const
"

Get a vector of indices (nested slice)

";

%feature("docstring") casadi::Slice::Slice() "

Default constructor - all elements.

";

%feature("docstring") casadi::Slice::Slice(int i, bool ind1=false) "

A single element (explicit to avoid ambiguity with IM overload.

";

%feature("docstring") casadi::Slice::Slice(int start, int stop, int step=1)
"

A slice.

";

%feature("docstring")  casadi::Slice::get_str(bool more=false) const  "

Get string representation.

";


// File: classcasadi_1_1SlicotDple.xml
%feature("docstring")  casadi::Dple::get_name_out(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::export_code(const
std::string &lang, std::ostream &stream, const Dict &options) const  "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring")  casadi::SlicotDple::init(const Dict &opts) override "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::get_min_in(int ind) const
"

[INTERNAL]  Get smallest input value.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(int nadj) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::eval_dm(const std::vector<
DM > &arg) const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::FunctionInternal::replace_res(const
std::vector< M > &res) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInput(int k) const
"

[DEPRECATED] Renamed instruction_index

";

%feature("docstring")  casadi::FunctionInternal::get_partition(int iind, int
oind, Sparsity &D1, Sparsity &D2, bool compact, bool symmetric, bool
allow_forward, bool allow_reverse) const  "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M > > &fseed) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::codegen(CodeGenerator &g,
const std::string &fname) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const std::vector<
Matrix< D > > &arg, std::vector< Matrix< D > > &res, bool always_inline,
bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::SlicotDple::plugin_name() const override "

[INTERNAL] ";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::Dple::get_forward(int nfwd, const std::string
&name, const std::vector< std::string > &inames, const std::vector<
std::string > &onames, const Dict &opts) const override "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::instruction_output(int k)
const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::fwd_seed(int nfwd) const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::Dple::get_n_in() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian(const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::SlicotDple::eval(const double **arg, double
**res, int *iw, double *w, void *mem) const override "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::Dple::get_n_out() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::size_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, int order, bool
tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::SlicotDple::SlicotDple() "

[INTERNAL]  Constructor.

";

%feature("docstring") casadi::SlicotDple::SlicotDple(const std::string
&name, const SpDict &st) "

[INTERNAL]  Constructor.

Parameters:
-----------

st:

Problem structure.

";

%feature("docstring") casadi::SlicotDple::SlicotDple(const SpDict &st) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring") casadi::SlicotDple "

'slicot' plugin for Dple

An efficient solver for Discrete Periodic Lyapunov Equations using SLICOT

An efficient solver for Discrete Periodic Lyapunov Equations using SLICOT

Uses Periodic Schur Decomposition ('psd') and does not assume positive
definiteness. Based on Periodic Lyapunov equations: some applications and
new algorithms. Int. J. Control, vol. 67, pp. 69-87, 1997.

Overview of the method: J. Gillis Practical Methods for Approximate Robust
Periodic Optimal Control ofNonlinear Mechanical Systems, PhD Thesis,
KULeuven, 2015

>List of available options

+-----------------------+-----------+--------------------------------------+
|          Id           |   Type    |             Description              |
+=======================+===========+======================================+
| linear_solver         | OT_STRING | User-defined linear solver class.    |
|                       |           | Needed for sensitivities.            |
+-----------------------+-----------+--------------------------------------+
| linear_solver_options | OT_DICT   | Options to be passed to the linear   |
|                       |           | solver.                              |
+-----------------------+-----------+--------------------------------------+
| psd_num_zero          | OT_DOUBLE | Numerical zero used in Periodic      |
|                       |           | Schur decomposition with slicot.This |
|                       |           | option is needed when your systems   |
|                       |           | has Floquet multiplierszero or close |
|                       |           | to zero                              |
+-----------------------+-----------+--------------------------------------+

Joris Gillis

>List of available options

+--------------------+-----------+--------------------+--------------------+
|         Id         |   Type    |    Description     |      Used in       |
+====================+===========+====================+====================+
| const_dim          | OT_BOOL   | Assume constant    | casadi::Dple       |
|                    |           | dimension of P     |                    |
+--------------------+-----------+--------------------+--------------------+
| eps_unstable       | OT_DOUBLE | A margin for       | casadi::Dple       |
|                    |           | unstability        |                    |
|                    |           | detection          |                    |
+--------------------+-----------+--------------------+--------------------+
| error_unstable     | OT_BOOL   | Throw an exception | casadi::Dple       |
|                    |           | when it is         |                    |
|                    |           | detected that      |                    |
|                    |           | Product(A_i,       |                    |
|                    |           | i=N..1)has         |                    |
|                    |           | eigenvalues        |                    |
|                    |           | greater than       |                    |
|                    |           | 1-eps_unstable     |                    |
+--------------------+-----------+--------------------+--------------------+
| linear_solver      | OT_STRING | User-defined       | casadi::SlicotDple |
|                    |           | linear solver      |                    |
|                    |           | class. Needed for  |                    |
|                    |           | sensitivities.     |                    |
+--------------------+-----------+--------------------+--------------------+
| linear_solver_opti | OT_DICT   | Options to be      | casadi::SlicotDple |
| ons                |           | passed to the      |                    |
|                    |           | linear solver.     |                    |
+--------------------+-----------+--------------------+--------------------+
| pos_def            | OT_BOOL   | Assume P positive  | casadi::Dple       |
|                    |           | definite           |                    |
+--------------------+-----------+--------------------+--------------------+
| psd_num_zero       | OT_DOUBLE | Numerical zero     | casadi::SlicotDple |
|                    |           | used in Periodic   |                    |
|                    |           | Schur              |                    |
|                    |           | decomposition with |                    |
|                    |           | slicot.This option |                    |
|                    |           | is needed when     |                    |
|                    |           | your systems has   |                    |
|                    |           | Floquet            |                    |
|                    |           | multiplierszero or |                    |
|                    |           | close to zero      |                    |
+--------------------+-----------+--------------------+--------------------+

Diagrams
--------



C++ includes: slicot_dple.hpp ";

%feature("docstring")  casadi::FunctionInternal::sx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::get_free() const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::FunctionInternal::symbolic_output(const
std::vector< MX > &arg) const  "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::FunctionInternal::get_stats(void *mem) const
"

[INTERNAL]  Get all statistics.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::has_derivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::get_max_in(int ind) const
"

[INTERNAL]  Get largest input value.

";

%feature("docstring")  casadi::SlicotDple::init_mem(void *mem) const
override "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::matching_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

";

%feature("docstring")  casadi::FunctionInternal::definition() const  "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::FunctionInternal::n_instructions() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::FunctionInternal::get_reltol() const  "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring")  casadi::FunctionInternal::set_temp(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::codegen_body(CodeGenerator
&g) const  "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(int iind,
int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M > > &aseed) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::instruction_input(int k)
const  "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOutput(int k)
const  "

[DEPRECATED] Renamed instruction_output

";

%feature("docstring") casadi::SlicotDple::~SlicotDple "

[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::FunctionInternal::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")  casadi::Dple::get_sparsity_in(int i) override "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::SlicotDple::class_name() const override "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::replace_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring")  casadi::FunctionInternal::instruction_constant(int k)
const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::matching_res(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

";

%feature("docstring")  casadi::Dple::get_name_in(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::jit_dependencies(const
std::string &fname) "

[INTERNAL]  Jit dependencies.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::SlicotDple::get_options() const override "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(int iind, int
oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::Dple::get_sparsity_out(int i) override "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::size_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::get_function() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::sx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")
casadi::FunctionInternal::codegen_sparsities(CodeGenerator &g) const  "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(int nfwd) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring")  casadi::FunctionInternal::disp_more(std::ostream
&stream) const  "

[INTERNAL]  Print more.

";

%feature("docstring")  casadi::SlicotDple::free_mem(void *mem) const
override "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< int > &order_in, const std::vector< int >
&order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::FunctionInternal::instruction_id(int k) const
"

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::codegen_meta(CodeGenerator
&g) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FunctionInternal::reverse(int nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::get_default_in(int ind)
const  "

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const double
**arg, double **res, int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const SXElem
**arg, SXElem **res, int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const bvec_t
**arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring")
casadi::FunctionInternal::codegen_declarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::get_abstol() const  "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring")  casadi::FunctionInternal::info() const  "

[INTERNAL]  Obtain information about function

";

%feature("docstring")  casadi::FunctionInternal::finalize(const Dict &opts)
override "

[INTERNAL]  Finalize the object creation.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::forward(int nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(int nadj,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::sp_reverse(bvec_t **arg,
bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::SlicotDple::set_work(void *mem, const double
**&arg, double **&res, int *&iw, double *&w) const override "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::Dple::has_reverse(int nadj) const override "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsityGen(int iind,
int oind, bool symmetric, int gr_i=1, int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FunctionInternal::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::check_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

";

%feature("docstring")  casadi::Dple::has_forward(int nfwd) const override "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::all_scalar() const  "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::uses_output() const  "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::FunctionInternal::check_res(const
std::vector< M > &res) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

";

%feature("docstring")  casadi::SlicotDple::alloc_mem() const override "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::FunctionInternal::sp_forward(const bvec_t
**arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::disp(std::ostream &stream,
bool more) const override "

[INTERNAL]  Display object.

";

%feature("docstring")  casadi::FunctionInternal::instruction_MX(int k) const
"

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring")  casadi::FunctionInternal::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::Dple::get_reverse(int nadj, const std::string
&name, const std::vector< std::string > &inames, const std::vector<
std::string > &onames, const Dict &opts) const override "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";


// File: classcasadi_1_1SlicotExpm.xml
%feature("docstring")  casadi::SlicotExpm::plugin_name() const override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::getAtomicInput(int k) const
"

[DEPRECATED] Renamed instruction_index

";

%feature("docstring")  casadi::FunctionInternal::get_abstol() const  "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring")  casadi::FunctionInternal::instruction_constant(int k)
const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring")  casadi::FunctionInternal::fwd_seed(int nfwd) const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(int nadj) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")
casadi::FunctionInternal::codegen_sparsities(CodeGenerator &g) const  "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::Expm::get_n_out() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::FunctionInternal::codegen_body(CodeGenerator
&g) const  "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring")  casadi::FunctionInternal::get_max_in(int ind) const
"

[INTERNAL]  Get largest input value.

";

%feature("docstring") casadi::SlicotExpm::SlicotExpm() "

[INTERNAL]  Constructor.

";

%feature("docstring") casadi::SlicotExpm::SlicotExpm(const std::string
&name, const Sparsity &A) "

[INTERNAL]  Constructor.

Parameters:
-----------

st:

Problem structure.

";

%feature("docstring")  casadi::FunctionInternal::check_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

";

%feature("docstring")  casadi::Expm::get_reverse(int nadj, const std::string
&name, const std::vector< std::string > &inames, const std::vector<
std::string > &onames, const Dict &opts) const override "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::disp_more(std::ostream
&stream) const  "

[INTERNAL]  Print more.

";

%feature("docstring")  casadi::FunctionInternal::replace_res(const
std::vector< M > &res) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::sp_reverse(bvec_t **arg,
bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::Expm::get_options() const override "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::FunctionInternal::instruction_id(int k) const
"

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::matching_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const std::vector<
Matrix< D > > &arg, std::vector< Matrix< D > > &res, bool always_inline,
bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::export_code(const
std::string &lang, std::ostream &stream, const Dict &options) const  "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian(const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::symbolic_output(const
std::vector< MX > &arg) const  "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::Expm::getJacSparsity(int iind, int oind, bool
symmetric) const override "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::finalize(const Dict &opts)
override "

[INTERNAL]  Finalize the object creation.

";

%feature("docstring")  casadi::FunctionInternal::sp_forward(const bvec_t
**arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::FunctionInternal::instruction_input(int k)
const  "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::SlicotExpm "

[INTERNAL]  'slicot' plugin for Expm

An efficient solver for Discrete Periodic Lyapunov Equations using SLICOT

Joris Gillis

C++ includes: slicot_expm.hpp ";

%feature("docstring")  casadi::FunctionInternal::size1_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::get_free() const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::SlicotExpm::class_name() const override "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::SlicotExpm::init_mem(void *mem) const
override "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::info() const  "

[INTERNAL]  Obtain information about function

";

%feature("docstring")  casadi::FunctionInternal::uses_output() const  "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring")  casadi::SlicotExpm::init(const Dict &opts) override "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::Expm::get_sparsity_out(int i) override "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::replace_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const double
**arg, double **res, int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const SXElem
**arg, SXElem **res, int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const bvec_t
**arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::FunctionInternal::forward(int nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::SlicotExpm::~SlicotExpm "

[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(int nadj,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(int nfwd) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::size_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::definition() const  "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring")  casadi::FunctionInternal::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring")  casadi::FunctionInternal::get_name_out(int i) "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::get_stats(void *mem) const
"

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::FunctionInternal::instruction_output(int k)
const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::FunctionInternal::check_res(const
std::vector< M > &res) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::FunctionInternal::size_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::Expm::get_n_in() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::Expm::has_forward(int nfwd) const override "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::SlicotExpm::set_work(void *mem, const double
**&arg, double **&res, int *&iw, double *&w) const override "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::Expm::get_forward(int nfwd, const std::string
&name, const std::vector< std::string > &inames, const std::vector<
std::string > &onames, const Dict &opts) const override "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::FunctionInternal::get_reltol() const  "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsityGen(int iind,
int oind, bool symmetric, int gr_i=1, int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::matching_res(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::eval_dm(const std::vector<
DM > &arg) const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::FunctionInternal::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< int > &order_in, const std::vector< int >
&order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::FunctionInternal::all_scalar() const  "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")  casadi::FunctionInternal::get_default_in(int ind)
const  "

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOutput(int k)
const  "

[DEPRECATED] Renamed instruction_output

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M > > &fseed) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M > > &aseed) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::FunctionInternal::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::Expm::get_sparsity_in(int i) override "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::SlicotExpm::free_mem(void *mem) const
override "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::SlicotExpm::alloc_mem() const override "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::FunctionInternal::get_min_in(int ind) const
"

[INTERNAL]  Get smallest input value.

";

%feature("docstring")  casadi::Expm::has_reverse(int nadj) const override "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::FunctionInternal::codegen_meta(CodeGenerator
&g) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::get_function() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::size2_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::FunctionInternal::has_derivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::disp(std::ostream &stream,
bool more) const override "

[INTERNAL]  Display object.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::jit_dependencies(const
std::string &fname) "

[INTERNAL]  Jit dependencies.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::reverse(int nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::instruction_MX(int k) const
"

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(int iind, int
oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::get_partition(int iind, int
oind, Sparsity &D1, Sparsity &D2, bool compact, bool symmetric, bool
allow_forward, bool allow_reverse) const  "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::codegen(CodeGenerator &g,
const std::string &fname) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")
casadi::FunctionInternal::codegen_declarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, int order, bool
tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::set_temp(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::FunctionInternal::get_name_in(int i) "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::n_instructions() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::SlicotExpm::eval(const double **arg, double
**res, int *iw, double *w, void *mem) const override "

[INTERNAL]  Evaluate numerically.

";


// File: classcasadi_1_1Smoothing.xml
%feature("docstring") casadi::Smoothing "

[INTERNAL]  Calculate derivative using 3th order smoothing scheme Joel
Andersson

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| abstol           | OT_DOUBLE       | Accuracy of      | casadi::Smoothin |
|                  |                 | function outputs | g                |
|                  |                 | [default: query  |                  |
|                  |                 | object]          |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| enable_fd        | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation by   |                  |
|                  |                 | finite           |                  |
|                  |                 | differencing.    |                  |
|                  |                 | [default:        |                  |
|                  |                 | false]]          |                  |
+------------------+-----------------+------------------+------------------+
| enable_forward   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using forward    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_jacobian  | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobians of all |                  |
|                  |                 | differentiable   |                  |
|                  |                 | outputs with     |                  |
|                  |                 | respect to all   |                  |
|                  |                 | differentiable   |                  |
|                  |                 | inputs - if      |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_reverse   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | transposed       |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using reverse    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| fd_method        | OT_STRING       | Method for       | casadi::Function |
|                  |                 | finite           | Internal         |
|                  |                 | differencing     |                  |
|                  |                 | [default         |                  |
|                  |                 | 'central']       |                  |
+------------------+-----------------+------------------+------------------+
| fd_options       | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | finite           |                  |
|                  |                 | difference       |                  |
|                  |                 | instance         |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| h_iter           | OT_INT          | Number of        | casadi::Smoothin |
|                  |                 | iterations to    | g                |
|                  |                 | improve on the   |                  |
|                  |                 | step-size        |                  |
|                  |                 | [default: 1 if   |                  |
|                  |                 | error estimate   |                  |
|                  |                 | available,       |                  |
|                  |                 | otherwise 0]     |                  |
+------------------+-----------------+------------------+------------------+
| h_max            | OT_DOUBLE       | Maximum step     | casadi::Smoothin |
|                  |                 | size [default 0] | g                |
+------------------+-----------------+------------------+------------------+
| h_min            | OT_DOUBLE       | Minimum step     | casadi::Smoothin |
|                  |                 | size [default    | g                |
|                  |                 | inf]             |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| reltol           | OT_DOUBLE       | Accuracy of      | casadi::Smoothin |
|                  |                 | function inputs  | g                |
|                  |                 | [default: query  |                  |
|                  |                 | object]          |                  |
+------------------+-----------------+------------------+------------------+
| second_order_ste | OT_DOUBLE       | Second order     | casadi::Smoothin |
| psize            |                 | perturbation     | g                |
|                  |                 | size [default:   |                  |
|                  |                 | 1e-3]            |                  |
+------------------+-----------------+------------------+------------------+
| smoothing        | OT_DOUBLE       | Smoothing        | casadi::Smoothin |
|                  |                 | regularization   | g                |
|                  |                 | [default:        |                  |
|                  |                 | machine          |                  |
|                  |                 | precision]       |                  |
+------------------+-----------------+------------------+------------------+
| u_aim            | OT_DOUBLE       | Target ratio of  | casadi::Smoothin |
|                  |                 | roundoff error   | g                |
|                  |                 | to truncation    |                  |
|                  |                 | error [default:  |                  |
|                  |                 | 100.]            |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: finite_differences.hpp ";

%feature("docstring")  casadi::FunctionInternal::call_gen(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const std::vector<
Matrix< D > > &arg, std::vector< Matrix< D > > &res, bool always_inline,
bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::get_reverse(int nadj, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M > > &fseed) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::Smoothing::has_err() const override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::size2_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::Smoothing::calc_fd(double **yk, double *y0,
double *J, double h) const override "

[INTERNAL] ";

%feature("docstring")  casadi::Smoothing::calc_fd() const override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::reverse(int nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::fwd_seed(int nfwd) const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::size1_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FiniteDiff::get_options() const override "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::FiniteDiff::get_n_out() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FiniteDiff::get_default_in(int ind) const
override "

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, int order, bool
tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::forward(int nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::get_max_in(int ind) const
"

[INTERNAL]  Get largest input value.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(int nadj) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::FunctionInternal::get_partition(int iind, int
oind, Sparsity &D1, Sparsity &D2, bool compact, bool symmetric, bool
allow_forward, bool allow_reverse) const  "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::sp_reverse(bvec_t **arg,
bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::symbolic_output(const
std::vector< MX > &arg) const  "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::FunctionInternal::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring")  casadi::FunctionInternal::check_res(const
std::vector< M > &res) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::get_function() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::sx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(int iind, int
oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::jit_dependencies(const
std::string &fname) "

[INTERNAL]  Jit dependencies.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::size_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::get_reltol() const  "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring")  casadi::FunctionInternal::check_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::size_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::FunctionInternal::instruction_constant(int k)
const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::disp(std::ostream &stream,
bool more) const override "

[INTERNAL]  Display object.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInput(int k) const
"

[DEPRECATED] Renamed instruction_index

";

%feature("docstring")  casadi::FunctionInternal::instruction_MX(int k) const
"

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring")  casadi::ProtoFunction::alloc_mem() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::FiniteDiff::init(const Dict &opts) override "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::FiniteDiff::has_codegen() const override "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::Smoothing::pert(const std::string &k) const
override "

[INTERNAL] ";

%feature("docstring")  casadi::Smoothing::pert(int k, double h) const
override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::codegen_meta(CodeGenerator
&g) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FiniteDiff::get_name_out(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::ProtoFunction::init_mem(void *mem) const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::instruction_input(int k)
const  "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::eval_dm(const std::vector<
DM > &arg) const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M > > &aseed) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_res(const
std::vector< M > &res) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring") casadi::Smoothing::Smoothing(const std::string &name,
int n) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::has_derivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::finalize(const Dict &opts)
override "

[INTERNAL]  Finalize the object creation.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian(const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::disp_more(std::ostream
&stream) const  "

[INTERNAL]  Print more.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::instruction_id(int k) const
"

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOutput(int k)
const  "

[DEPRECATED] Renamed instruction_output

";

%feature("docstring")  casadi::FiniteDiff::codegen_body(CodeGenerator &g)
const override "

[INTERNAL]  Generate code for the body of the C function.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::ProtoFunction::free_mem(void *mem) const  "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::Smoothing::class_name() const override "

[INTERNAL]  Get type name.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(int iind,
int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::definition() const  "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring")  casadi::FunctionInternal::n_instructions() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::replace_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::get_stats(void *mem) const
"

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::Smoothing::get_forward(int nfwd, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const override "

[INTERNAL]  Second order derivatives.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(int nadj,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FunctionInternal::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")  casadi::FunctionInternal::get_free() const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const double
**arg, double **res, int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const SXElem
**arg, SXElem **res, int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const bvec_t
**arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FiniteDiff::get_sparsity_out(int i) override
"

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FiniteDiff::get_sparsity_in(int i) override "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::set_temp(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FiniteDiff::uses_output() const override "

[INTERNAL]  Is the scheme using the (nondifferentiated) output?

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")
casadi::FiniteDiff::codegen_declarations(CodeGenerator &g) const override "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::FunctionInternal::sp_forward(const bvec_t
**arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::matching_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

";

%feature("docstring")  casadi::FunctionInternal::codegen(CodeGenerator &g,
const std::string &fname) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::FunctionInternal::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::has_reverse(int nadj) const
"

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(int nfwd) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FiniteDiff::get_n_in() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::info() const  "

[INTERNAL]  Obtain information about function

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::matching_res(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

";

%feature("docstring")  casadi::FiniteDiff::eval(const double **arg, double
**res, int *iw, double *w, void *mem) const override "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::all_scalar() const  "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::Smoothing::n_pert() const override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::export_code(const
std::string &lang, std::ostream &stream, const Dict &options) const  "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< int > &order_in, const std::vector< int >
&order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")
casadi::FunctionInternal::codegen_sparsities(CodeGenerator &g) const  "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring") casadi::Smoothing::~Smoothing "

[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::Smoothing::get_abstol() const override "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring")  casadi::Smoothing::has_forward(int nfwd) const
override "

[INTERNAL]  Second order derivatives.

";

%feature("docstring")  casadi::Smoothing::calc_stepsize(double abstol) const
override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::FiniteDiff::get_name_in(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::instruction_output(int k)
const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsityGen(int iind,
int oind, bool symmetric, int gr_i=1, int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::FunctionInternal::get_min_in(int ind) const
"

[INTERNAL]  Get smallest input value.

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";


// File: classcasadi_1_1Solve.xml


// File: classcasadi_1_1SparseStorage.xml
%feature("docstring")  casadi::SparseStorage< DataType >::has_nz(int rr, int
cc) const  "

[INTERNAL]  Returns true if the matrix has a non-zero at location rr, cc.

";

%feature("docstring")  casadi::SparseStorage< DataType >::elem(int rr, int
cc) "

[INTERNAL]  get a reference to an element

";

%feature("docstring")  casadi::SparseStorage< DataType >::clear() "

[INTERNAL] ";

%feature("docstring")  casadi::SparseStorage< DataType >::reserve(int nnz) "

[INTERNAL] ";

%feature("docstring")  casadi::SparseStorage< DataType >::reserve(int nnz,
int ncol) "

[INTERNAL] ";

%feature("docstring")  casadi::SparseStorage< DataType >::resize(int nrow,
int ncol) "

[INTERNAL] ";

%feature("docstring") casadi::SparseStorage "

[INTERNAL] C++ includes: sparse_storage.hpp ";

%feature("docstring")  casadi::SparseStorage< DataType >::sparsity() const
"

[INTERNAL]  Const access the sparsity - reference to data member.

";

%feature("docstring") casadi::SparseStorage< DataType >::SparseStorage(const
Sparsity &sparsity, const DataType &val=DataType(0)) "

[INTERNAL]  Sparse matrix with a given sparsity

";

%feature("docstring") casadi::SparseStorage< DataType >::SparseStorage() "

[INTERNAL]  constructors

empty 0-by-0 matrix constructor

";

%feature("docstring") casadi::SparseStorage< DataType >::SparseStorage(const
SparseStorage< DataType > &m) "

[INTERNAL]  Copy constructor.

";

%feature("docstring")  casadi::SparseStorage< DataType >::nonzeros() "

[INTERNAL]  Access the non-zero elements.

";

%feature("docstring")  casadi::SparseStorage< DataType >::nonzeros() const
"

[INTERNAL]  Const access the non-zero elements.

";


// File: classcasadi_1_1Sparsity.xml


/*  Check if two sparsity patterns are identical  */

/*  Size and element counting  */ %feature("docstring")
casadi::Sparsity::enlargeRows(int nrow, const std::vector< int > &rr, bool
ind1=false) "

Enlarge the matrix along the first dimension (i.e. insert rows)

";

%feature("docstring") casadi::Sparsity "

General sparsity class.

The storage format is a compressed column storage (CCS) format.  In this
format, the structural non-zero elements are stored in column-major order,
starting from the upper left corner of the matrix and ending in the lower
right corner.

In addition to the dimension ( size1(), size2()), (i.e. the number of rows
and the number of columns respectively), there are also two vectors of
integers:

\"colind\" [length size2()+1], which contains the index to the first non-
zero element on or after the corresponding column. All the non-zero elements
of a particular i are thus the elements with index el that fulfills:
colind[i] <= el < colind[i+1].

\"row\" [same length as the number of non-zero elements, nnz()] The rows for
each of the structural non-zeros.

Note that with this format, it is cheap to loop over all the non-zero
elements of a particular column, at constant time per element, but expensive
to jump to access a location (i, j).

If the matrix is dense, i.e. length(row) == size1()*size2(), the format
reduces to standard dense column major format, which allows access to an
arbitrary element in constant time.

Since the object is reference counted (it inherits from SharedObject),
several matrices are allowed to share the same sparsity pattern.

The implementations of some methods of this class has been taken from the
CSparse package and modified to use C++ standard library and CasADi data
structures.

See:   Matrix

Joel Andersson

C++ includes: sparsity.hpp ";

%feature("docstring")  casadi::Sparsity::largest_first() const  "

Order the columns by decreasing degree.

";

%feature("docstring")  casadi::Sparsity::dim(bool with_nz=false) const  "

Get the dimension as a string.

";

%feature("docstring")  casadi::Sparsity::is_reshape(const Sparsity &y) const
"

Check if the sparsity is a reshape of another.

";

%feature("docstring")  casadi::Sparsity::add_nz(int rr, int cc) "

Get the index of a non-zero element Add the element if it does not exist and
copy object if it's not unique.

";

%feature("docstring")  casadi::Sparsity::is_scalar(bool
scalar_and_dense=false) const  "

Is scalar?

";

%feature("docstring")  casadi::Sparsity::rowsSequential(bool strictly=true)
const  "

Do the rows appear sequentially on each column.

Parameters:
-----------

strictly:  if true, then do not allow multiple entries

";

%feature("docstring")  casadi::Sparsity::get_diag(std::vector< int >
&output_mapping) const  "

Get the diagonal of the matrix/create a diagonal matrix (mapping will
contain the nonzero mapping) When the input is square, the diagonal elements
are returned. If the input is vector-like, a diagonal matrix is constructed
with it.

";

%feature("docstring")  casadi::Sparsity::btf(std::vector< int >
&output_rowperm, std::vector< int > &output_colperm, std::vector< int >
&output_rowblock, std::vector< int > &output_colblock, std::vector< int >
&output_coarse_rowblock, std::vector< int > &output_coarse_colblock) const
"

Calculate the block triangular form (BTF) See Direct Methods for Sparse
Linear Systems by Davis (2006).

The function computes the Dulmage-Mendelsohn decomposition, which allows you
to reorder the rows and columns of a matrix to bring it into block
triangular form (BTF).

It will not consider the distance of off-diagonal elements to the diagonal:
there is no guarantee you will get a block-diagonal matrix if you supply a
randomly permuted block-diagonal matrix.

If your matrix is symmetrical, this method is of limited use; permutation
can make it non-symmetric.

See:   scc

";

%feature("docstring")  casadi::Sparsity::is_triu() const  "

Is upper triangular?

";

%feature("docstring")  casadi::Sparsity::qr_sparse(Sparsity &output_V,
Sparsity &output_R, std::vector< int > &output_pinv, std::vector< int >
&output_leftmost, std::vector< int > &output_parent) const  "

Symbolic QR factorization Returns the sparsity pattern of V (compact
representation of Q) and R as well as vectors needed for the numerical
factorization and solution.

";

%feature("docstring")  casadi::Sparsity::is_vector() const  "

Check if the pattern is a row or column vector.

";

%feature("docstring")  casadi::Sparsity::hash() const  "

";

%feature("docstring")  casadi::Sparsity::resize(int nrow, int ncol) "

Resize.

";

%feature("docstring")  casadi::SharedObject::disp(std::ostream &stream, bool
more=false) const  "

Print a description of the object.

";

%feature("docstring")  casadi::Sparsity::find(bool ind1=false) const  "

Get the location of all non-zero elements as they would appear in a Dense
matrix A : DenseMatrix 4 x 3 B : SparseMatrix 4 x 3 , 5 structural non-
zeros.

k = A.find() A[k] will contain the elements of A that are non-zero in B

Inverse of nonzeros.

";

%feature("docstring")  casadi::Sparsity::repr_el(int k) const  "

Describe the nonzero location k as a string.

";

%feature("docstring")  casadi::Sparsity::bw_lower() const  "

Lower half-bandwidth.

";

%feature("docstring")  casadi::Sparsity::T() const  "

Transpose the matrix.

";

%feature("docstring")  casadi::Sparsity::nnz_diag() const  "

Number of non-zeros on the diagonal, i.e. the number of elements (i, j) with
j==i.

";

%feature("docstring") casadi::Sparsity::Sparsity(int dummy=0) "

Default constructor.

";

%feature("docstring") casadi::Sparsity::Sparsity(int nrow, int ncol) "

Pattern with all structural zeros.

";

%feature("docstring") casadi::Sparsity::Sparsity(int nrow, int ncol, const
std::vector< int > &colind, const std::vector< int > &row) "

Construct from sparsity pattern vectors given in compressed column storage
format.

";

%feature("docstring") casadi::Sparsity::Sparsity(const std::pair< int, int >
&rc) "

Create a sparse matrix with all structural zeros.

";

%feature("docstring")  casadi::Sparsity::colind(int cc) const  "

Get a reference to the colindex of column cc (see class description)

";

%feature("docstring")  casadi::Sparsity::is_row() const  "

Check if the pattern is a row vector (i.e. size1()==1)

";

%feature("docstring")  casadi::Sparsity::numel() const  "

The total number of elements, including structural zeros, i.e.
size2()*size1() Beware of overflow.

See:   nnz()

";

%feature("docstring")  casadi::Sparsity::columns() const  "

Get the number of columns, Octave-style syntax.

";

%feature("docstring")  casadi::Sparsity::unite(const Sparsity &y) const  "

Union of two sparsity patterns.

";

%feature("docstring")  casadi::Sparsity::is_transpose(const Sparsity &y)
const  "

Check if the sparsity is the transpose of another.

";

%feature("docstring")  casadi::Sparsity::get_triplet(std::vector< int >
&output_row, std::vector< int > &output_col) const  "

Get the sparsity in sparse triplet format.

";

%feature("docstring")  casadi::Sparsity::is_square() const  "

Is square?

";

%feature("docstring")  casadi::Sparsity::appendColumns(const Sparsity &sp) "

Append another sparsity patten horizontally.

";

%feature("docstring")  casadi::Sparsity::ldl(std::vector< int >
&output_parent) const  "

Symbolic LDL factorization Returns the sparsity pattern of L as well as the
elimination tree.

";

%feature("docstring")  casadi::Sparsity::get_ccs(std::vector< int >
&output_colind, std::vector< int > &output_row) const  "

Get the sparsity in compressed column storage (CCS) format.

";

%feature("docstring")  casadi::Sparsity::removeDuplicates(std::vector< int >
&INOUT) "

Remove duplicate entries.

The same indices will be removed from the mapping vector, which must have
the same length as the number of nonzeros

";

%feature("docstring")  casadi::Sparsity::is_empty(bool both=false) const  "

Check if the sparsity is empty.

A sparsity is considered empty if one of the dimensions is zero (or
optionally both dimensions)

";

%feature("docstring")  casadi::Sparsity::export_code(const std::string
&lang, std::ostream &stream=casadi::uout(), const Dict &options=Dict())
const  "

Export matrix in specific language.

lang: only 'matlab' supported for now

::

   * options:
   *   inline: Indicates if you want everything on a single line (default: False)
   *   name: Name of exported variable (default: 'sp')
   *   as_matrix: Matlab does not have a sparsity object. (default: false)
  *               With this option true, a numeric matrix will be constructed
   * 



";

%feature("docstring")  casadi::SharedObject::get_str(bool more=false) const
"

Get string representation.

";

%feature("docstring")  casadi::Sparsity::makeDense(std::vector< int >
&output_mapping) const  "

Make a patten dense.

";

%feature("docstring")  casadi::Sparsity::pattern_inverse() const  "

Take the inverse of a sparsity pattern; flip zeros and non-zeros.

";

%feature("docstring")  casadi::Sparsity::dense(int nrow, int ncol=1) "

Create a dense rectangular sparsity pattern.

";

%feature("docstring")  casadi::Sparsity::dense(const std::pair< int, int >
&rc) "

Create a dense rectangular sparsity pattern.

";

%feature("docstring")  casadi::Sparsity::spy_matlab(const std::string
&mfile) const  "

Generate a script for Matlab or Octave which visualizes the sparsity using
the spy command.

";

%feature("docstring")  casadi::Sparsity::diag(int nrow) "

Create diagonal sparsity pattern.

";

%feature("docstring")  casadi::Sparsity::diag(int nrow, int ncol) "

Create diagonal sparsity pattern.

";

%feature("docstring")  casadi::Sparsity::diag(const std::pair< int, int >
&rc) "

Create diagonal sparsity pattern.

";

%feature("docstring")  casadi::SharedObject::print_ptr(std::ostream
&stream=casadi::uout()) const  "

[INTERNAL]  Print the pointer to the internal class

";

%feature("docstring")  casadi::Sparsity::get_crs(std::vector< int >
&output_rowind, std::vector< int > &output_col) const  "

Get the sparsity in compressed row storage (CRS) format.

";

%feature("docstring")  casadi::Sparsity::sub(const std::vector< int > &rr,
const std::vector< int > &cc, std::vector< int > &output_mapping, bool
ind1=false) const  "

Get a submatrix.

Returns the sparsity of the submatrix, with a mapping such that submatrix[k]
= originalmatrix[mapping[k]]

";

%feature("docstring")  casadi::Sparsity::sub(const std::vector< int > &rr,
const Sparsity &sp, std::vector< int > &output_mapping, bool ind1=false)
const  "

Get a set of elements.

Returns the sparsity of the corresponding elements, with a mapping such that
submatrix[k] = originalmatrix[mapping[k]]

";

%feature("docstring")  casadi::Sparsity::unit(int n, int el) "

Create the sparsity pattern for a unit vector of length n and a nonzero on
position el.

";

%feature("docstring")  casadi::Sparsity::symbfact(std::vector< int >
&output_count, std::vector< int > &output_parent, std::vector< int >
&output_post, Sparsity &output_L, bool ata=false) const  "

Symbolic factorization analysis See Direct Methods for Sparse Linear Systems
by Davis (2006).

";

%feature("docstring")  casadi::SharedObject::is_null() const  "

Is a null pointer?

";

%feature("docstring")  casadi::Sparsity::append(const Sparsity &sp) "

Append another sparsity patten vertically (NOTE: only efficient if vector)

";

%feature("docstring")  casadi::Sparsity::combine(const Sparsity &y, bool
f0x_is_zero, bool fx0_is_zero) const  "

Combine two sparsity patterns Returns the new sparsity pattern as well as a
mapping with the same length as the number of non-zero elements The mapping
matrix contains the arguments for each nonzero, the first bit indicates if
the first argument is nonzero, the second bit indicates if the second
argument is nonzero (note that none of, one of or both of the arguments can
be nonzero)

";

%feature("docstring")  casadi::Sparsity::nnz() const  "

Get the number of (structural) non-zeros.

See:   numel()

";

%feature("docstring")  casadi::Sparsity::intersect(const Sparsity &y) const
"

Intersection of two sparsity patterns Returns the new sparsity pattern as
well as a mapping with the same length as the number of non-zero elements
The value is 1 if the non-zero comes from the first (i.e. this) object, 2 if
it is from the second and 3 (i.e. 1 | 2) if from both.

";

%feature("docstring")  casadi::Sparsity::row(int el) const  "

Get the row of a non-zero element.

";

%feature("docstring")  casadi::Sparsity::is_column() const  "

Check if the pattern is a column vector (i.e. size2()==1)

";

%feature("docstring")  casadi::Sparsity::get_colind() const  "

Get the column index for each column Together with the row-vector, one
obtains the sparsity pattern in the column compressed format.

";

%feature("docstring")  casadi::Sparsity::get_row() const  "

Get the row for each non-zero entry Together with the column-vector, this
vector gives the sparsity of the matrix in sparse triplet format, and
together with the colind vector, one obtains the sparsity in column
compressed format.

";

%feature("docstring")  casadi::Sparsity::is_symmetric() const  "

Is symmetric?

";

%feature("docstring")  casadi::Sparsity::info() const  "

Obtain information about sparsity

";

%feature("docstring")  casadi::Sparsity::has_nz(int rr, int cc) const  "

Returns true if the pattern has a non-zero at location rr, cc.

";

%feature("docstring")  casadi::Sparsity::transpose(std::vector< int >
&output_mapping, bool invert_mapping=false) const  "

Transpose the matrix and get the reordering of the non-zero entries.

Parameters:
-----------

mapping:  the non-zeros of the original matrix for each non-zero of the new
matrix

";

%feature("docstring")  casadi::Sparsity::pmult(const std::vector< int > &p,
bool permute_rows=true, bool permute_columns=true, bool
invert_permutation=false) const  "

Permute rows and/or columns Multiply the sparsity with a permutation matrix
from the left and/or from the right P * A * trans(P), A * trans(P) or A *
trans(P) with P defined by an index vector containing the row for each col.
As an alternative, P can be transposed (inverted).

";

%feature("docstring")  casadi::Sparsity::is_diag() const  "

Is diagonal?

";

%feature("docstring")  casadi::SharedObject::class_name() const  "

Get class name.

";

%feature("docstring")  casadi::Sparsity::is_equal(const Sparsity &y) const
"

";

%feature("docstring")  casadi::Sparsity::is_equal(int nrow, int ncol, const
std::vector< int > &colind, const std::vector< int > &row) const  "

";

%feature("docstring")  casadi::Sparsity::nnz_lower(bool strictly=false)
const  "

Number of non-zeros in the lower triangular half, i.e. the number of
elements (i, j) with j<=i.

";

%feature("docstring")  casadi::Sparsity::get_lower() const  "

Get nonzeros in lower triangular part.

";

%feature("docstring")  casadi::Sparsity::is_singular() const  "

Check whether the sparsity-pattern indicates structural singularity.

";

%feature("docstring")  casadi::Sparsity::print_compact(std::ostream
&stream=casadi::uout()) const  "

[DEPRECATED] Alias for disp

";

%feature("docstring")  casadi::Sparsity::is_dense() const  "

Is dense?

";

%feature("docstring")  casadi::Sparsity::sanity_check(bool complete=false)
const  "

Check if the dimensions and colind, row vectors are compatible.

Parameters:
-----------

complete:  set to true to also check elementwise throws an error as possible
result

";

%feature("docstring")  casadi::Sparsity::compressed(const std::vector< int >
&v) "

Create from a single vector containing the pattern in compressed column
storage format: The format: The first two entries are the number of rows
(nrow) and columns (ncol) The next ncol+1 entries are the column offsets
(colind). Note that the last element, colind[ncol], gives the number of
nonzeros The last colind[ncol] entries are the row indices

";

%feature("docstring")  casadi::Sparsity::uni_coloring(const Sparsity
&AT=Sparsity(), int cutoff=std::numeric_limits< int >::max()) const  "

Perform a unidirectional coloring: A greedy distance-2 coloring algorithm
(Algorithm 3.1 in A. H. GEBREMEDHIN, F. MANNE, A. POTHEN)

";

%feature("docstring")  casadi::Sparsity::star_coloring(int ordering=1, int
cutoff=std::numeric_limits< int >::max()) const  "

Perform a star coloring of a symmetric matrix: A greedy distance-2 coloring
algorithm Algorithm 4.1 in What Color Is Your Jacobian? Graph Coloring for
Computing Derivatives A. H. GEBREMEDHIN, F. MANNE, A. POTHEN SIAM Rev.,
47(4), 629705 (2006)

Ordering options: None (0), largest first (1)

";

%feature("docstring")  casadi::Sparsity::density() const  "

The percentage of nonzero Equivalent to (100.0 * nnz())/numel(), but avoids
overflow.

";

%feature("docstring")  casadi::Sparsity::enlarge(int nrow, int ncol, const
std::vector< int > &rr, const std::vector< int > &cc, bool ind1=false) "

Enlarge matrix Make the matrix larger by inserting empty rows and columns,
keeping the existing non-zeros.

For the matrices A to B A(m, n) length(jj)=m , length(ii)=n B(nrow, ncol)

A=enlarge(m, n, ii, jj) makes sure that

B[jj, ii] == A

";

%feature("docstring")  casadi::Sparsity::compress() const  "

Compress a sparsity pattern.

";

%feature("docstring")  casadi::Sparsity::scc(std::vector< int >
&output_index, std::vector< int > &output_offset) const  "

Find the strongly connected components of the bigraph defined by the
sparsity pattern of a square matrix.

See Direct Methods for Sparse Linear Systems by Davis (2006). Returns:
Number of components

Offset for each components (length: 1 + number of components)

Indices for each components, component i has indices index[offset[i]], ...,
index[offset[i+1]]

In the case that the matrix is symmetric, the result has a particular
interpretation: Given a symmetric matrix A and n = A.scc(p, r)

=> A[p, p] will appear block-diagonal with n blocks and with the indices of
the block boundaries to be found in r.

";

%feature("docstring")  casadi::Sparsity::get_upper() const  "

Get nonzeros in upper triangular part.

";

%feature("docstring")  casadi::Sparsity::dfs(int j, int top, std::vector<
int > &INOUT, std::vector< int > &INOUT, const std::vector< int > &pinv,
std::vector< bool > &INOUT) const  "

Depth-first search on the adjacency graph of the sparsity See Direct Methods
for Sparse Linear Systems by Davis (2006).

";

%feature("docstring")  casadi::Sparsity::is_tril() const  "

Is lower triangular?

";

%feature("docstring")  casadi::Sparsity::size2() const  "

Get the number of columns.

";

%feature("docstring")  casadi::Sparsity::get_col() const  "

Get the column for each non-zero entry Together with the row-vector, this
vector gives the sparsity of the matrix in sparse triplet format, i.e. the
column and row for each non-zero elements.

";

%feature("docstring")  casadi::Sparsity::size1() const  "

Get the number of rows.

";

%feature("docstring")  casadi::Sparsity::star_coloring2(int ordering=1, int
cutoff=std::numeric_limits< int >::max()) const  "

Perform a star coloring of a symmetric matrix: A new greedy distance-2
coloring algorithm Algorithm 4.1 in NEW ACYCLIC AND STAR COLORING ALGORITHMS
WITH APPLICATION TO COMPUTING HESSIANS A. H. GEBREMEDHIN, A. TARAFDAR, F.
MANNE, A. POTHEN SIAM J. SCI. COMPUT. Vol. 29, No. 3, pp. 10421072 (2007)

Ordering options: None (0), largest first (1)

";

%feature("docstring")  casadi::Sparsity::spy(std::ostream
&stream=casadi::uout()) const  "

Print a textual representation of sparsity.

";

%feature("docstring")  casadi::Sparsity::postfix_dim() const  "

Dimension string as a postfix to a name Rules:

Dense and scalar: \"\"

0-by-0: \"[]\"

Dense column vector: \"[5]\"

Dense matrix: \"[5x10]\"

Otherwise: \"[5x10,3nz]\"

";

%feature("docstring")  casadi::Sparsity::enlargeColumns(int ncol, const
std::vector< int > &cc, bool ind1=false) "

Enlarge the matrix along the second dimension (i.e. insert columns)

";

%feature("docstring")  casadi::Sparsity::rows() const  "

Get the number of rows, Octave-style syntax.

";

%feature("docstring") casadi::Sparsity::__hash__ "

Returns a number that is unique for a given Node. If the Object does not
point to any node, \"0\" is returned.

";

%feature("docstring")  casadi::Sparsity::size() const  "

Get the shape.

";

%feature("docstring")  casadi::Sparsity::size(int axis) const  "

Get the size along a particular dimensions.

";

%feature("docstring")  casadi::Sparsity::etree(bool ata=false) const  "

Calculate the elimination tree See Direct Methods for Sparse Linear Systems
by Davis (2006). If the parameter ata is false, the algorithm is equivalent
to MATLAB's etree(A), except that the indices are zero- based. If ata is
true, the algorithm is equivalent to MATLAB's etree(A, 'col').

";

%feature("docstring")  casadi::Sparsity::get_nz(int rr, int cc) const  "

Get the index of an existing non-zero element return -1 if the element does
not exist.

";

%feature("docstring")  casadi::Sparsity::get_nz(const std::vector< int >
&rr, const std::vector< int > &cc) const  "

Get a set of non-zero element return -1 if the element does not exist.

";

%feature("docstring")  casadi::Sparsity::get_nz(std::vector< int > &INOUT)
const  "

Get the nonzero index for a set of elements The index vector is used both
for input and outputs and must be sorted by increasing nonzero index, i.e.
column-wise. Elements not found in the sparsity pattern are set to -1.

";

%feature("docstring")  casadi::Sparsity::erase(const std::vector< int > &rr,
const std::vector< int > &cc, bool ind1=false) "

Erase rows and/or columns of a matrix.

";

%feature("docstring")  casadi::Sparsity::erase(const std::vector< int > &rr,
bool ind1=false) "

Erase elements of a matrix.

";

%feature("docstring")  casadi::Sparsity::bw_upper() const  "

Upper half-bandwidth.

";

%feature("docstring")  casadi::Sparsity::scalar(bool dense_scalar=true) "

Create a scalar sparsity pattern.

";

%feature("docstring")  casadi::Sparsity::nnz_upper(bool strictly=false)
const  "

Number of non-zeros in the upper triangular half, i.e. the number of
elements (i, j) with j>=i.

";


// File: classcasadi_1_1Split.xml


// File: classcasadi_1_1Sqpmethod.xml
%feature("docstring")  casadi::FunctionInternal::get_reltol() const  "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::Nlpsol::get_sparsity_out(int i) override "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::Sqpmethod::free_mem(void *mem) const override
"

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const std::vector<
Matrix< D > > &arg, std::vector< Matrix< D > > &res, bool always_inline,
bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::Sqpmethod::init(const Dict &opts) override "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::FunctionInternal::disp(std::ostream &stream,
bool more) const override "

[INTERNAL]  Display object.

";

%feature("docstring")  casadi::FunctionInternal::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::FunctionInternal::fwd_seed(int nfwd) const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::OracleFunction::set_temp(void *mem, const
double **arg, double **res, int *iw, double *w) const override "

[INTERNAL]  Set the work vectors.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsityGen(int iind,
int oind, bool symmetric, int gr_i=1, int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const double
**arg, double **res, int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const SXElem
**arg, SXElem **res, int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const bvec_t
**arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian(const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::check_res(const
std::vector< M > &res) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::codegen(CodeGenerator &g,
const std::string &fname) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::Nlpsol::check_inputs(void *mem) const  "

[INTERNAL]  Check if the inputs correspond to a well-posed problem.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::FunctionInternal::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::FunctionInternal::size2_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::OracleFunction::jit_dependencies(const
std::string &fname) override "

[INTERNAL]  JIT for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(int nadj) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::FunctionInternal::has_reverse(int nadj) const
"

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::get_reverse(int nadj, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::OracleFunction::expand() "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring") casadi::Sqpmethod "

'sqpmethod' plugin for Nlpsol

A textbook SQPMethod

>List of available options

+-----------------------+-----------+--------------------------------------+
|          Id           |   Type    |             Description              |
+=======================+===========+======================================+
| beta                  | OT_DOUBLE | Line-search parameter, restoration   |
|                       |           | factor of stepsize                   |
+-----------------------+-----------+--------------------------------------+
| c1                    | OT_DOUBLE | Armijo condition, coefficient of     |
|                       |           | decrease in merit                    |
+-----------------------+-----------+--------------------------------------+
| hessian_approximation | OT_STRING | limited-memory|exact                 |
+-----------------------+-----------+--------------------------------------+
| lbfgs_memory          | OT_INT    | Size of L-BFGS memory.               |
+-----------------------+-----------+--------------------------------------+
| max_iter              | OT_INT    | Maximum number of SQP iterations     |
+-----------------------+-----------+--------------------------------------+
| max_iter_ls           | OT_INT    | Maximum number of linesearch         |
|                       |           | iterations                           |
+-----------------------+-----------+--------------------------------------+
| merit_memory          | OT_INT    | Size of memory to store history of   |
|                       |           | merit function values                |
+-----------------------+-----------+--------------------------------------+
| min_step_size         | OT_DOUBLE | The size (inf-norm) of the step size |
|                       |           | should not become smaller than this. |
+-----------------------+-----------+--------------------------------------+
| print_header          | OT_BOOL   | Print the header with problem        |
|                       |           | statistics                           |
+-----------------------+-----------+--------------------------------------+
| print_iteration       | OT_BOOL   | Print the iterations                 |
+-----------------------+-----------+--------------------------------------+
| qpsol                 | OT_STRING | The QP solver to be used by the SQP  |
|                       |           | method                               |
+-----------------------+-----------+--------------------------------------+
| qpsol_options         | OT_DICT   | Options to be passed to the QP       |
|                       |           | solver                               |
+-----------------------+-----------+--------------------------------------+
| regularize            | OT_BOOL   | Automatic regularization of Lagrange |
|                       |           | Hessian.                             |
+-----------------------+-----------+--------------------------------------+
| tol_du                | OT_DOUBLE | Stopping criterion for dual          |
|                       |           | infeasability                        |
+-----------------------+-----------+--------------------------------------+
| tol_pr                | OT_DOUBLE | Stopping criterion for primal        |
|                       |           | infeasibility                        |
+-----------------------+-----------+--------------------------------------+

>List of available options

+-------------------+---------------+-------------------+------------------+
|        Id         |     Type      |    Description    |     Used in      |
+===================+===============+===================+==================+
| beta              | OT_DOUBLE     | Line-search       | casadi::Sqpmetho |
|                   |               | parameter,        | d                |
|                   |               | restoration       |                  |
|                   |               | factor of         |                  |
|                   |               | stepsize          |                  |
+-------------------+---------------+-------------------+------------------+
| c1                | OT_DOUBLE     | Armijo condition, | casadi::Sqpmetho |
|                   |               | coefficient of    | d                |
|                   |               | decrease in merit |                  |
+-------------------+---------------+-------------------+------------------+
| calc_multipliers  | OT_BOOL       | Calculate         | casadi::Nlpsol   |
|                   |               | Lagrange          |                  |
|                   |               | multipliers in    |                  |
|                   |               | the Nlpsol base   |                  |
|                   |               | class             |                  |
+-------------------+---------------+-------------------+------------------+
| discrete          | OT_BOOLVECTOR | Indicates which   | casadi::Nlpsol   |
|                   |               | of the variables  |                  |
|                   |               | are discrete,     |                  |
|                   |               | i.e. integer-     |                  |
|                   |               | valued            |                  |
+-------------------+---------------+-------------------+------------------+
| eval_errors_fatal | OT_BOOL       | When errors occur | casadi::Nlpsol   |
|                   |               | during evaluation |                  |
|                   |               | of f,g,...,stop   |                  |
|                   |               | the iterations    |                  |
+-------------------+---------------+-------------------+------------------+
| expand            | OT_BOOL       | Replace MX with   | casadi::Nlpsol   |
|                   |               | SX expressions in |                  |
|                   |               | problem           |                  |
|                   |               | formulation       |                  |
|                   |               | [false]           |                  |
+-------------------+---------------+-------------------+------------------+
| hessian_approxima | OT_STRING     | limited-          | casadi::Sqpmetho |
| tion              |               | memory|exact      | d                |
+-------------------+---------------+-------------------+------------------+
| ignore_check_vec  | OT_BOOL       | If set to true,   | casadi::Nlpsol   |
|                   |               | the input shape   |                  |
|                   |               | of F will not be  |                  |
|                   |               | checked.          |                  |
+-------------------+---------------+-------------------+------------------+
| iteration_callbac | OT_FUNCTION   | A function that   | casadi::Nlpsol   |
| k                 |               | will be called at |                  |
|                   |               | each iteration    |                  |
|                   |               | with the solver   |                  |
|                   |               | as input. Check   |                  |
|                   |               | documentation of  |                  |
|                   |               | Callback .        |                  |
+-------------------+---------------+-------------------+------------------+
| iteration_callbac | OT_BOOL       | If set to true,   | casadi::Nlpsol   |
| k_ignore_errors   |               | errors thrown by  |                  |
|                   |               | iteration_callbac |                  |
|                   |               | k will be         |                  |
|                   |               | ignored.          |                  |
+-------------------+---------------+-------------------+------------------+
| iteration_callbac | OT_INT        | Only call the     | casadi::Nlpsol   |
| k_step            |               | callback function |                  |
|                   |               | every few         |                  |
|                   |               | iterations.       |                  |
+-------------------+---------------+-------------------+------------------+
| lbfgs_memory      | OT_INT        | Size of L-BFGS    | casadi::Sqpmetho |
|                   |               | memory.           | d                |
+-------------------+---------------+-------------------+------------------+
| max_iter          | OT_INT        | Maximum number of | casadi::Sqpmetho |
|                   |               | SQP iterations    | d                |
+-------------------+---------------+-------------------+------------------+
| max_iter_ls       | OT_INT        | Maximum number of | casadi::Sqpmetho |
|                   |               | linesearch        | d                |
|                   |               | iterations        |                  |
+-------------------+---------------+-------------------+------------------+
| merit_memory      | OT_INT        | Size of memory to | casadi::Sqpmetho |
|                   |               | store history of  | d                |
|                   |               | merit function    |                  |
|                   |               | values            |                  |
+-------------------+---------------+-------------------+------------------+
| min_step_size     | OT_DOUBLE     | The size (inf-    | casadi::Sqpmetho |
|                   |               | norm) of the step | d                |
|                   |               | size should not   |                  |
|                   |               | become smaller    |                  |
|                   |               | than this.        |                  |
+-------------------+---------------+-------------------+------------------+
| oracle_options    | OT_DICT       | Options to be     | casadi::Nlpsol   |
|                   |               | passed to the     |                  |
|                   |               | oracle function   |                  |
+-------------------+---------------+-------------------+------------------+
| print_header      | OT_BOOL       | Print the header  | casadi::Sqpmetho |
|                   |               | with problem      | d                |
|                   |               | statistics        |                  |
+-------------------+---------------+-------------------+------------------+
| print_iteration   | OT_BOOL       | Print the         | casadi::Sqpmetho |
|                   |               | iterations        | d                |
+-------------------+---------------+-------------------+------------------+
| qpsol             | OT_STRING     | The QP solver to  | casadi::Sqpmetho |
|                   |               | be used by the    | d                |
|                   |               | SQP method        |                  |
+-------------------+---------------+-------------------+------------------+
| qpsol_options     | OT_DICT       | Options to be     | casadi::Sqpmetho |
|                   |               | passed to the QP  | d                |
|                   |               | solver            |                  |
+-------------------+---------------+-------------------+------------------+
| regularize        | OT_BOOL       | Automatic         | casadi::Sqpmetho |
|                   |               | regularization of | d                |
|                   |               | Lagrange Hessian. |                  |
+-------------------+---------------+-------------------+------------------+
| tol_du            | OT_DOUBLE     | Stopping          | casadi::Sqpmetho |
|                   |               | criterion for     | d                |
|                   |               | dual              |                  |
|                   |               | infeasability     |                  |
+-------------------+---------------+-------------------+------------------+
| tol_pr            | OT_DOUBLE     | Stopping          | casadi::Sqpmetho |
|                   |               | criterion for     | d                |
|                   |               | primal            |                  |
|                   |               | infeasibility     |                  |
+-------------------+---------------+-------------------+------------------+
| verbose_init      | OT_BOOL       | Print out timing  | casadi::Nlpsol   |
|                   |               | information about |                  |
|                   |               | the different     |                  |
|                   |               | stages of         |                  |
|                   |               | initialization    |                  |
+-------------------+---------------+-------------------+------------------+
| warn_initial_boun | OT_BOOL       | Warn if the       | casadi::Nlpsol   |
| ds                |               | initial guess     |                  |
|                   |               | does not satisfy  |                  |
|                   |               | LBX and UBX       |                  |
+-------------------+---------------+-------------------+------------------+

Diagrams
--------



C++ includes: sqpmethod.hpp ";

%feature("docstring")  casadi::FunctionInternal::get_free() const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::FunctionInternal::eval_dm(const std::vector<
DM > &arg) const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::sp_reverse(bvec_t **arg,
bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::Sqpmethod::get_options() const override "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::FunctionInternal::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(int nadj,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FunctionInternal::get_forward(int nfwd, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::Sqpmethod::alloc_mem() const override "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOutput(int k)
const  "

[DEPRECATED] Renamed instruction_output

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::Sqpmethod::print_iteration() const  "

[INTERNAL]  Print iteration header.

";

%feature("docstring")  casadi::Sqpmethod::print_iteration(int iter, double
obj, double pr_inf, double du_inf, double dx_norm, double reg, int
ls_trials, bool ls_success) const  "

[INTERNAL]  Print iteration.

";

%feature("docstring")  casadi::OracleFunction::get_function() const override
"

[INTERNAL] ";

%feature("docstring")  casadi::OracleFunction::get_function(const
std::string &name) const override "

[INTERNAL] ";

%feature("docstring")  casadi::Nlpsol::get_sparsity_in(int i) override "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::instruction_output(int k)
const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn, const std::string &fname, bool jit=false) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::FunctionInternal::has_forward(int nfwd) const
"

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::replace_res(const
std::vector< M > &res) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::Sqpmethod::regularize(double *H, double reg)
const  "

[INTERNAL] ";

%feature("docstring")  casadi::Sqpmethod::primalInfeasibility(const double
*x, const double *lbx, const double *ubx, const double *g, const double
*lbg, const double *ubg) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::size_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(int nfwd) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::check_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

";

%feature("docstring")  casadi::Nlpsol::setOptionsFromFile(const std::string
&file) "

[INTERNAL]  Read options from parameter xml.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M > > &fseed) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::symbolic_output(const
std::vector< MX > &arg) const  "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::OracleFunction::finalize(const Dict &opts)
override "

[INTERNAL]  Finalize initialization.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::OracleFunction::has_function(const
std::string &fname) const override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::matching_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::forward(int nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")
casadi::FunctionInternal::codegen_sparsities(CodeGenerator &g) const  "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring")  casadi::Sqpmethod::solve(void *mem) const override "

[INTERNAL] ";

%feature("docstring")  casadi::Nlpsol::get_n_out() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::codegen_body(CodeGenerator
&g) const  "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring")  casadi::FunctionInternal::instruction_input(int k)
const  "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, int order, bool
tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInput(int k) const
"

[DEPRECATED] Renamed instruction_index

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::Sqpmethod::solve_QP(SqpmethodMemory *m, const
double *H, const double *g, const double *lbx, const double *ubx, const
double *A, const double *lbA, const double *ubA, double *x_opt, double
*lambda_x_opt, double *lambda_A_opt) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::instruction_MX(int k) const
"

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring")
casadi::FunctionInternal::codegen_declarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::info() const  "

[INTERNAL]  Obtain information about function

";

%feature("docstring")  casadi::Nlpsol::get_default_in(int ind) const
override "

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(int iind,
int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M > > &aseed) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::get_min_in(int ind) const
"

[INTERNAL]  Get smallest input value.

";

%feature("docstring")  casadi::OracleFunction::create_function(const
std::string &fname, const std::vector< std::string > &s_in, const
std::vector< std::string > &s_out, const Function::AuxOut
&aux=Function::AuxOut()) "

[INTERNAL]  Create an oracle function

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::Nlpsol::getReducedHessian() "

[INTERNAL] ";

%feature("docstring")  casadi::Nlpsol::disp_more(std::ostream &stream) const
override "

[INTERNAL]  Print description.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::Sqpmethod::get_stats(void *mem) const
override "

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::OracleFunction::monitored(const std::string
&name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::Sqpmethod::reset_h(SqpmethodMemory *m) const
"

[INTERNAL] ";

%feature("docstring")  casadi::Nlpsol::integer_support() const  "

[INTERNAL]  Can discrete variables be treated.

";

%feature("docstring")  casadi::FunctionInternal::get_max_in(int ind) const
"

[INTERNAL]  Get largest input value.

";

%feature("docstring")  casadi::OracleFunction::oracle() const override "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::Sqpmethod::getConic() const  "

[INTERNAL]  Access Conic.

";

%feature("docstring")  casadi::Nlpsol::eval(const double **arg, double
**res, int *iw, double *w, void *mem) const override "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::replace_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring")  casadi::Nlpsol::get_name_out(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::FunctionInternal::reverse(int nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::FunctionInternal::definition() const  "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring")  casadi::Nlpsol::init_mem(void *mem) const override "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::has_derivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::uses_output() const  "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring")  casadi::FunctionInternal::n_instructions() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::export_code(const
std::string &lang, std::ostream &stream, const Dict &options) const  "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring")  casadi::Sqpmethod::getRegularization(const double *H)
const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::all_scalar() const  "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::get_abstol() const  "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring")  casadi::OracleFunction::print_fstats(const
OracleMemory *m) const  "

[INTERNAL]  Print statistics.

";

%feature("docstring")  casadi::FunctionInternal::size_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::OracleFunction::calc_function(OracleMemory
*m, const std::string &fcn, const double *const *arg=0) const  "

[INTERNAL] ";

%feature("docstring")  casadi::Sqpmethod::plugin_name() const override "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(int iind, int
oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::sp_forward(const bvec_t
**arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::OracleFunction::generate_dependencies(const
std::string &fname, const Dict &opts) const override "

[INTERNAL]  Export / Generate C code for the generated functions.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::Nlpsol::get_n_in() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::Sqpmethod::set_work(void *mem, const double
**&arg, double **&res, int *&iw, double *&w) const override "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::Nlpsol::get_name_in(int i) override "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::sx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< int > &order_in, const std::vector< int >
&order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring") casadi::Sqpmethod::Sqpmethod(const std::string &name,
const Function &nlp) "

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::instruction_id(int k) const
"

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::Sqpmethod::class_name() const override "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring")  casadi::FunctionInternal::instruction_constant(int k)
const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Sqpmethod::~Sqpmethod "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::codegen_meta(CodeGenerator
&g) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FunctionInternal::matching_res(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

";

%feature("docstring")  casadi::FunctionInternal::get_partition(int iind, int
oind, Sparsity &D1, Sparsity &D2, bool compact, bool symmetric, bool
allow_forward, bool allow_reverse) const  "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";


// File: classcasadi_1_1Logger_1_1Stream.xml
%feature("docstring") casadi::Logger::Stream "

C++ includes: casadi_logger.hpp ";

%feature("docstring") casadi::Logger::Stream< Err >::Stream() "

";


// File: classcasadi_1_1Logger_1_1Streambuf.xml
%feature("docstring") casadi::Logger::Streambuf "

C++ includes: casadi_logger.hpp ";

%feature("docstring") casadi::Logger::Streambuf< Err >::Streambuf() "

";


// File: classcasadi_1_1SubAssign.xml


// File: classcasadi_1_1SubIndex.xml
%feature("docstring") casadi::SubIndex "

SubIndex class for Matrix Same as the above class but for single argument
return for operator() Joel Andersson

C++ includes: submatrix.hpp ";

%feature("docstring") casadi::SubIndex< M, I >::SubIndex(M &mat, const I &i)
"

Constructor.

";


// File: classcasadi_1_1SubMatrix.xml
%feature("docstring") casadi::SubMatrix "

SubMatrix class for Matrix SubMatrix is the return type for operator() of
the Matrix class, it allows access to the value as well as changing the
parent object Joel Andersson

C++ includes: submatrix.hpp ";

%feature("docstring") casadi::SubMatrix< M, I, J >::SubMatrix(M &mat, const
I &i, const J &j) "

Constructor.

";


// File: classcasadi_1_1SubRef.xml


// File: classcasadi_1_1Switch.xml
%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< int > &order_in, const std::vector< int >
&order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::symbolic_output(const
std::vector< MX > &arg) const  "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(int nadj,
const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FunctionInternal::check_res(const
std::vector< M > &res) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::Switch::eval(const double **arg, double
**res, int *iw, double *w, void *mem) const override "

[INTERNAL]  Evaluate numerically, work vectors given.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M > > &aseed) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(int nfwd) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(int iind,
int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::Switch::disp_more(std::ostream &stream) const
override "

[INTERNAL]  Print description.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const double
**arg, double **res, int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const SXElem
**arg, SXElem **res, int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const bvec_t
**arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::Switch::get_forward(int nfwd, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const override "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::has_derivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::get_max_in(int ind) const
"

[INTERNAL]  Get largest input value.

";

%feature("docstring")
casadi::FunctionInternal::codegen_sparsities(CodeGenerator &g) const  "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::get_name_in(int i) "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::jit_dependencies(const
std::string &fname) "

[INTERNAL]  Jit dependencies.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::finalize(const Dict &opts)
override "

[INTERNAL]  Finalize the object creation.

";

%feature("docstring")  casadi::FunctionInternal::set_temp(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::get_partition(int iind, int
oind, Sparsity &D1, Sparsity &D2, bool compact, bool symmetric, bool
allow_forward, bool allow_reverse) const  "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::Switch::has_forward(int nfwd) const override
"

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(int nadj) const
"

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::get_min_in(int ind) const
"

[INTERNAL]  Get smallest input value.

";

%feature("docstring")  casadi::Switch::has_codegen() const override "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::FunctionInternal::check_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

";

%feature("docstring")  casadi::FunctionInternal::matching_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

";

%feature("docstring")  casadi::FunctionInternal::instruction_output(int k)
const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring") casadi::Switch::~Switch "

[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::ProtoFunction::free_mem(void *mem) const  "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::Switch::info() const override "

[INTERNAL]  Obtain information about node

";

%feature("docstring")  casadi::FunctionInternal::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::sx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::Switch::init(const Dict &opts) override "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::FunctionInternal::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")  casadi::Switch::codegen_body(CodeGenerator &g) const
override "

[INTERNAL]  Generate code for the body of the C function.

";

%feature("docstring")  casadi::FunctionInternal::n_instructions() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::ProtoFunction::init_mem(void *mem) const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::get_name_out(int i) "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::size_out(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::codegen(CodeGenerator &g,
const std::string &fname) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::FunctionInternal::get_stats(void *mem) const
"

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::matching_res(const
std::vector< M > &arg) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::FunctionInternal::get_default_in(int ind)
const  "

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, int order, bool
tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::sp_forward(const bvec_t
**arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::FunctionInternal::replace_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsityGen(int iind,
int oind, bool symmetric, int gr_i=1, int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(int iind, int
oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::Switch::get_sparsity_in(int i) override "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(int ind) const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::FunctionInternal::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring")  casadi::FunctionInternal::instruction_constant(int k)
const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::size_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::codegen_meta(CodeGenerator
&g) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(int ind) const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::Switch::codegen_declarations(CodeGenerator
&g) const override "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::Switch::class_name() const override "

[INTERNAL]  Get type name.

";

%feature("docstring")  casadi::FunctionInternal::export_code(const
std::string &lang, std::ostream &stream, const Dict &options) const  "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::getAtomicInput(int k) const
"

[DEPRECATED] Renamed instruction_index

";

%feature("docstring")  casadi::FunctionInternal::get_options() const
override "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::FunctionInternal::disp(std::ostream &stream,
bool more) const override "

[INTERNAL]  Display object.

";

%feature("docstring")  casadi::FunctionInternal::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::instruction_MX(int k) const
"

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring")  casadi::FunctionInternal::get_free() const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::Switch::get_sparsity_out(int i) override "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::getAtomicOutput(int k)
const  "

[DEPRECATED] Renamed instruction_output

";

%feature("docstring")  casadi::FunctionInternal::get_function() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::Switch::eval_sx(const SXElem **arg, SXElem
**res, int *iw, SXElem *w, void *mem) const override "

[INTERNAL]  evaluate symbolically while also propagating directional
derivatives

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M > > &fseed) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::instruction_id(int k) const
"

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::Switch::get_n_out() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::Switch::Switch(const std::string &name, const
std::vector< Function > &f, const Function &f_def) "

[INTERNAL]  Constructor (generic switch)

";

%feature("docstring")  casadi::FunctionInternal::fwd_seed(int nfwd) const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::reverse(int nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(int ind) const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::Switch::has_reverse(int nadj) const override
"

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::FunctionInternal::eval_dm(const std::vector<
DM > &arg) const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::Switch "

[INTERNAL]   Switch statement Joel Andersson

C++ includes: switch.hpp ";

%feature("docstring")  casadi::FunctionInternal::get_jacobian(const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::uses_output() const  "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const std::vector<
Matrix< D > > &arg, std::vector< Matrix< D > > &res, bool always_inline,
bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::ProtoFunction::alloc_mem() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(int iind, int oind)
const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::Switch::get_n_in() override "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::replace_res(const
std::vector< M > &res) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FunctionInternal::definition() const  "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring")  casadi::FunctionInternal::get_abstol() const  "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::sp_reverse(bvec_t **arg,
bvec_t **res, int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::forward(int nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(int ind) const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::Switch::get_reverse(int nadj, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const override "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::FunctionInternal::all_scalar() const  "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")  casadi::FunctionInternal::get_reltol() const  "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring")  casadi::FunctionInternal::instruction_input(int k)
const  "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";


// File: classcasadi_1_1SXFunction.xml


// File: classcasadi_1_1SymbolicMX.xml


// File: classcasadi_1_1SymbolicQr.xml
%feature("docstring")  casadi::LinsolInternal::neig(void *mem, const double
*A) const  "

[INTERNAL]  Number of negative eigenvalues.

";

%feature("docstring")  casadi::SymbolicQr::class_name() const override "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring") casadi::SymbolicQr::SymbolicQr(const std::string
&name, const Sparsity &sp) "

[INTERNAL] ";

%feature("docstring")  casadi::SymbolicQr::alloc_mem() const override "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::SymbolicQr::linsol_eval_sx(const SXElem
**arg, SXElem **res, int *iw, SXElem *w, void *mem, bool tr, int nrhs) const
override "

[INTERNAL]  Evaluate symbolically (SX)

";

%feature("docstring") casadi::SymbolicQr::~SymbolicQr "

[INTERNAL] ";

%feature("docstring")  casadi::LinsolInternal::rank(void *mem, const double
*A) const  "

[INTERNAL]   Matrix rank.

";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::LinsolInternal::disp_more(std::ostream
&stream) const  "

[INTERNAL]  Print more.

";

%feature("docstring")  casadi::LinsolInternal::nrow() const  "

[INTERNAL]  Get sparsity pattern.

";

%feature("docstring") casadi::SymbolicQr "

'symbolicqr' plugin for Linsol

Linear solver for sparse least-squares problems Inspired
fromhttps://github.com/scipy/scipy/blob/v0.14.0/scipy/sparse/linalg/isolve/lsqr.py#L96

Linsol based on QR factorization with sparsity pattern based reordering
without partial pivoting

>List of available options

+-------+---------+----------------------------------------------------+
|  Id   |  Type   |                    Description                     |
+=======+=========+====================================================+
| fopts | OT_DICT | Options to be passed to generated function objects |
+-------+---------+----------------------------------------------------+

Joel Andersson

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| enable_fd        | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation by   |                  |
|                  |                 | finite           |                  |
|                  |                 | differencing.    |                  |
|                  |                 | [default:        |                  |
|                  |                 | false]]          |                  |
+------------------+-----------------+------------------+------------------+
| enable_forward   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using forward    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_jacobian  | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobians of all |                  |
|                  |                 | differentiable   |                  |
|                  |                 | outputs with     |                  |
|                  |                 | respect to all   |                  |
|                  |                 | differentiable   |                  |
|                  |                 | inputs - if      |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_reverse   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | transposed       |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using reverse    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| fd_method        | OT_STRING       | Method for       | casadi::Function |
|                  |                 | finite           | Internal         |
|                  |                 | differencing     |                  |
|                  |                 | [default         |                  |
|                  |                 | 'central']       |                  |
+------------------+-----------------+------------------+------------------+
| fd_options       | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | finite           |                  |
|                  |                 | difference       |                  |
|                  |                 | instance         |                  |
+------------------+-----------------+------------------+------------------+
| fopts            | OT_DICT         | Options to be    | casadi::Symbolic |
|                  |                 | passed to        | Qr               |
|                  |                 | generated        |                  |
|                  |                 | function objects |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: symbolic_qr.hpp ";

%feature("docstring")  casadi::LinsolInternal::nnz() const  "

[INTERNAL] ";

%feature("docstring")  casadi::LinsolInternal::ncol() const  "

[INTERNAL] ";

%feature("docstring")  casadi::LinsolInternal::generate(CodeGenerator &g,
const std::string &A, const std::string &x, int nrhs, bool tr) const  "

[INTERNAL]  Generate C code.

";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::SymbolicQr::init(const Dict &opts) override "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::SymbolicQr::get_options() const override "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::SymbolicQr::plugin_name() const override "

[INTERNAL] ";

%feature("docstring")  casadi::LinsolInternal::disp(std::ostream &stream,
bool more) const override "

[INTERNAL]  Display object.

";

%feature("docstring")  casadi::ProtoFunction::finalize(const Dict &opts) "

[INTERNAL]  Finalize the object creation This function, which visits the
class hierarchy in reverse order is run after init() has been completed.

";

%feature("docstring")  casadi::SymbolicQr::solve(void *mem, const double *A,
double *x, int nrhs, bool tr) const override "

[INTERNAL] ";

%feature("docstring")  casadi::SymbolicQr::nfact(void *mem, const double *A)
const override "

[INTERNAL]  Numeric factorization.

";

%feature("docstring")  casadi::LinsolInternal::sfact(void *mem, const double
*A) const  "

[INTERNAL] ";

%feature("docstring")  casadi::LinsolInternal::row() const  "

[INTERNAL] ";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::SymbolicQr::init_mem(void *mem) const
override "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::LinsolInternal::colind() const  "

[INTERNAL] ";

%feature("docstring")  casadi::SymbolicQr::free_mem(void *mem) const
override "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";


// File: classcasadi_1_1SymbolicSX.xml


// File: classcasadi_1_1Transpose.xml


// File: classcasadi_1_1UnaryMX.xml


// File: classcasadi_1_1UnarySX.xml


// File: classcasadi_1_1Vertcat.xml


// File: classcasadi_1_1Vertsplit.xml


// File: classcasadi_1_1WeakRef.xml
%feature("docstring") casadi::WeakRef "

Weak reference type A weak reference to a SharedObject.

Joel Andersson

C++ includes: shared_object.hpp ";

%feature("docstring")  casadi::WeakRef::shared() "

Get a shared (owning) reference.

";

%feature("docstring") casadi::WeakRef::__hash__ "

Returns a number that is unique for a given Node. If the Object does not
point to any node, \"0\" is returned.

";

%feature("docstring")  casadi::SharedObject::is_null() const  "

Is a null pointer?

";

%feature("docstring")  casadi::SharedObject::print_ptr(std::ostream
&stream=casadi::uout()) const  "

[INTERNAL]  Print the pointer to the internal class

";

%feature("docstring") casadi::WeakRef::WeakRef(int dummy=0) "

Default constructor.

";

%feature("docstring") casadi::WeakRef::WeakRef(SharedObject shared) "

Construct from a shared object (also implicit type conversion)

";

%feature("docstring")  casadi::SharedObject::disp(std::ostream &stream, bool
more=false) const  "

Print a description of the object.

";

%feature("docstring")  casadi::SharedObject::get_str(bool more=false) const
"

Get string representation.

";

%feature("docstring")  casadi::SharedObject::class_name() const  "

Get class name.

";

%feature("docstring")  casadi::WeakRef::alive() const  "

Check if alive.

";


// File: classcasadi_1_1XFunction.xml


// File: classcasadi_1_1XmlFile.xml
%feature("docstring") casadi::XmlFile "

XML parser Can be used for parsing XML files into CasADi data structures.

Joel Andersson

C++ includes: xml_file.hpp ";

%feature("docstring")  casadi::SharedObject::get_str(bool more=false) const
"

Get string representation.

";

%feature("docstring") casadi::XmlFile::XmlFile() "

";

%feature("docstring") casadi::XmlFile::XmlFile(const std::string &name) "

";

%feature("docstring") casadi::XmlFile::__hash__ "

Returns a number that is unique for a given Node. If the Object does not
point to any node, \"0\" is returned.

";

%feature("docstring")  casadi::SharedObject::class_name() const  "

Get class name.

";

%feature("docstring")  casadi::SharedObject::is_null() const  "

Is a null pointer?

";

%feature("docstring")  casadi::SharedObject::disp(std::ostream &stream, bool
more=false) const  "

Print a description of the object.

";

%feature("docstring") casadi::XmlFile::~XmlFile "

";

%feature("docstring")  casadi::SharedObject::print_ptr(std::ostream
&stream=casadi::uout()) const  "

[INTERNAL]  Print the pointer to the internal class

";


// File: classcasadi_1_1ZeroByZero.xml


// File: classcasadi_1_1ZeroSX.xml


// File: namespaceBonmin.xml


// File: namespacecasadi.xml
%feature("docstring")  casadi::is_nondecreasing(const std::vector< T > &v) "
Check if the vector is non-decreasing.

";

%feature("docstring")  casadi::matrixName< double >() "

Get typename.

";

%feature("docstring")  casadi::complement(const std::vector< int > &v, int
size) "

Returns the list of all i in [0, size[ not found in supplied list.

The supplied vector may contain duplicates and may be non-monotonous The
supplied vector will be checked for bounds The result vector is guaranteed
to be monotonously increasing

";

%feature("docstring")  casadi::conic_option_type(const std::string &name,
const std::string &op) "

Get type info for a particular option.

";

%feature("docstring")  casadi::temporary_file(const std::string &prefix,
const std::string &suffix) "

";

%feature("docstring")  casadi::load_expm(const std::string &name) "

Explicitly load a plugin dynamically.

";

%feature("docstring")  casadi::casadi_rank1(T1 *A, const int *sp_A, T1
alpha, const T1 *x) "

[INTERNAL]  Adds a multiple alpha/2 of the outer product mul(x, trans(x)) to
A.

";

%feature("docstring")  casadi::casadi_rank1(T1 *A, const int *sp_A, T1
alpha, const T1 *x, const T1 *y) "

[INTERNAL] ";

%feature("docstring")  casadi::dense_mul_nt_stride(int n, int m, int l,
const double *A, const double *B, double *C, int strideA, int strideB, int
strideC) "

[INTERNAL] ";

%feature("docstring")  casadi::dense_mul_tn(int n, int m, int l, const
double *A, const double *B, double *C) "

[INTERNAL] ";

%feature("docstring")  casadi::dense_mul_nn_stride(int n, int m, int l,
const double *A, const double *B, double *C, int strideA, int strideB, int
strideC) "

[INTERNAL] ";

%feature("docstring")  casadi::is_zero(const T &x) "

";

%feature("docstring")  casadi::dple_out() "

Get output scheme of DPLE solvers.

";

%feature("docstring")  casadi::dple_out(int ind) "

Get DPLE output scheme name by index.

";

%feature("docstring")  casadi::casadi_norm_1(int n, const T1 *x) "

[INTERNAL]  NORM_1: ||x||_1 -> return.

";

%feature("docstring")  casadi::expmsol(const std::string &name, const
std::string &solver, const Sparsity &A, const Dict &opts=Dict()) "

Performs a matrix exponentiation expm(A)

General information
===================



>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| const_A          | OT_BOOL         | Assume A is      | casadi::Expm     |
|                  |                 | constant.        |                  |
|                  |                 | Default: false.  |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| enable_fd        | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation by   |                  |
|                  |                 | finite           |                  |
|                  |                 | differencing.    |                  |
|                  |                 | [default:        |                  |
|                  |                 | false]]          |                  |
+------------------+-----------------+------------------+------------------+
| enable_forward   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using forward    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_jacobian  | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobians of all |                  |
|                  |                 | differentiable   |                  |
|                  |                 | outputs with     |                  |
|                  |                 | respect to all   |                  |
|                  |                 | differentiable   |                  |
|                  |                 | inputs - if      |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_reverse   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | transposed       |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using reverse    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| fd_method        | OT_STRING       | Method for       | casadi::Function |
|                  |                 | finite           | Internal         |
|                  |                 | differencing     |                  |
|                  |                 | [default         |                  |
|                  |                 | 'central']       |                  |
+------------------+-----------------+------------------+------------------+
| fd_options       | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | finite           |                  |
|                  |                 | difference       |                  |
|                  |                 | instance         |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

List of plugins
===============



- slicot

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
Expm.doc(\"myextraplugin\")



--------------------------------------------------------------------------------

slicot
------





--------------------------------------------------------------------------------



Joris Gillis

";

%feature("docstring")  casadi::casadi_mtimes(const T1 *x, const int *sp_x,
const T1 *y, const int *sp_y, T1 *z, const int *sp_z, T1 *w, int tr) "

[INTERNAL]  Sparse matrix-matrix multiplication: z <- z + x*y.

";

%feature("docstring")  casadi::integrator_n_out() "

Get the number of integrator outputs.

";

%feature("docstring")  casadi::slicot_periodic_schur(int n, int K, const
double *a, double *t, double *z, double *dwork, double *eig_real, double
*eig_imag, double num_zero=0) "

[INTERNAL] ";

%feature("docstring")  casadi::external(const std::string &name, const Dict
&opts=Dict()) "

Load an external function File name is assumed to be ./<f_name>.so.

";

%feature("docstring")  casadi::external(const std::string &name, const
std::string &bin_name, const Dict &opts=Dict()) "

Load an external function File name given.

";

%feature("docstring")  casadi::external(const std::string &name, const
Importer &compiler, const Dict &opts=Dict()) "

Load a just-in-time compiled external function File name given.

";

%feature("docstring")  casadi::nlpsol_n_out() "

Number of NLP solver outputs.

";

%feature("docstring")  casadi::casadi_forward_diff(T1 **yk, T1 *y0, T1 *J,
T1 h, int n_y, const casadi_finite_diff_mem< T1 > *m) "

[INTERNAL] ";

%feature("docstring")  casadi::to_slice2(const std::vector< int > &v) "

Construct nested slices from an index vector (requires is_slice2(v) to be
true)

";

%feature("docstring")  casadi::in_range(const std::vector< T > &v, int
upper) "

Check if for each element of v holds: v_i < upper.

";

%feature("docstring")  casadi::in_range(const std::vector< T > &v, int
lower, int upper) "

Check if for each element of v holds: lower <= v_i < upper.

";

%feature("docstring")  casadi::load_integrator(const std::string &name) "

Explicitly load a plugin dynamically.

";

%feature("docstring")  casadi::expm_n_out() "

Get the number of expm solver outputs.

";

%feature("docstring")  casadi::casadi_sum_viol(int n, const T1 *x, const T1
*lb, const T1 *ub) "

[INTERNAL]  Sum of bound violations.

";

%feature("docstring")  casadi::load_nlpsol(const std::string &name) "

Explicitly load a plugin dynamically.

";

%feature("docstring")  casadi::is_increasing(const std::vector< T > &v) "

Check if the vector is strictly increasing.

";

%feature("docstring")  casadi::casadi_scal(int n, T1 alpha, T1 *x) "

[INTERNAL]  SCAL: x <- alpha*x.

";

%feature("docstring")  casadi::casadi_qr_init(const int *sp, const int
*sp_tr, int *leftmost, int *parent, int *pinv, int *nrow_ext, int *v_nnz,
int *r_nnz, int *w) "

[INTERNAL] ";

%feature("docstring")  casadi::Contraction(const T &a, const T &b, T &r) "

";

%feature("docstring")  casadi::Contraction(const bvec_t &a, const bvec_t &b,
bvec_t &r) "

";

%feature("docstring")  casadi::casadi_ldl_row(const int *sp, const int
*parent, int *l_colind, int *l_row, int *w) "

[INTERNAL] ";

%feature("docstring")  casadi::conic_options(const std::string &name) "

Get all options for a plugin.

";

%feature("docstring")  casadi::load_linsol(const std::string &name) "

Explicitly load a plugin dynamically.

";

%feature("docstring")  casadi::casadi_interpn_grad(T1 *grad, int ndim, const
T1 *grid, const int *offset, const T1 *values, const T1 *x, int *iw, T1 *w)
"

[INTERNAL] ";

%feature("docstring")  casadi::casadi_interpn_grad(T1 *grad, int ndim, const
T1 *grid, const int *offset, const T1 *values, const T1 *x, const int
*lookup_mode, int *iw, T1 *w) "

[INTERNAL] ";

%feature("docstring")  casadi::has_interpolant(const std::string &name) "

Check if a particular plugin is available.

";

%feature("docstring")  casadi::conic_debug(const Function &f, const
std::string &filename) "

Generate native code in the interfaced language for debugging

";

%feature("docstring")  casadi::conic_debug(const Function &f, std::ostream
&file) "

Generate native code in the interfaced language for debugging

";

%feature("docstring")  casadi::casadi_swap(int n, T1 *x, int inc_x, T1 *y,
int inc_y) "

[INTERNAL]  SWAP: x <-> y.

";

%feature("docstring")  casadi::nlpsol_options(const std::string &name) "

Get all options for a plugin.

";

%feature("docstring")  casadi::einstein_eval(int n_iter, const std::vector<
int > &iter_dims, const std::vector< int > &strides_a, const std::vector<
int > &strides_b, const std::vector< int > &strides_c, const T *a_in, const
T *b_in, T *c_in) "

";

%feature("docstring")  casadi::uerr() "

";

%feature("docstring")  casadi::conic_option_info(const std::string &name,
const std::string &op) "

Get documentation for a particular option.

";

%feature("docstring")  casadi::check_exposed(T t) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_interpn(int ndim, const T1 *grid,
const int *offset, const T1 *values, const T1 *x, int *iw, T1 *w) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_interpn(int ndim, const T1 *grid,
const int *offset, const T1 *values, const T1 *x, const int *lookup_mode,
int *iw, T1 *w) "

[INTERNAL] ";

%feature("docstring")  casadi::read_matlab(std::istream &stream,
std::vector< T > &v) "

Read vector, matlab style.

";

%feature("docstring")  casadi::read_matlab(std::ifstream &file, std::vector<
std::vector< T > > &v) "

Read matrix, matlab style.

";

%feature("docstring")  casadi::casadi_iamax(int n, const T1 *x, int inc_x) "

[INTERNAL]  IAMAX: index corresponding to the entry with the largest
absolute value.

";

%feature("docstring")  casadi::has_expm(const std::string &name) "

Check if a particular plugin is available.

";

%feature("docstring")  casadi::write_matlab(std::ostream &stream, const
std::vector< T > &v) "

Print vector, matlab style.

";

%feature("docstring")  casadi::write_matlab(std::ostream &stream, const
std::vector< std::vector< T > > &v) "

Print matrix, matlab style.

";

%feature("docstring")  casadi::casadi_sparsify(const T1 *x, T2 *y, const int
*sp_y, int tr) "

[INTERNAL]  Convert dense to sparse.

";

%feature("docstring")  casadi::hash_sparsity(int nrow, int ncol, const
std::vector< int > &colind, const std::vector< int > &row) "

Hash a sparsity pattern.

";

%feature("docstring")  casadi::hash_sparsity(int nrow, int ncol, const int
*colind, const int *row) "

";

%feature("docstring")  casadi::is_slice2(const std::vector< int > &v) "

Check if an index vector can be represented more efficiently as two nested
slices.

";

%feature("docstring")  casadi::rootfinder(const std::string &name, const
std::string &solver, const Function &f, const Dict &opts=Dict()) "

Create a solver for rootfinding problems Takes a function where one of the
inputs is unknown and one of the outputs is a residual function that is
always zero, defines a new function where the the unknown input has been
replaced by a guess for the unknown and the residual output has been
replaced by the calculated value for the input.

For a function [y0, y1, ...,yi, .., yn] = F(x0, x1, ..., xj, ..., xm), where
xj is unknown and yi=0, defines a new function [y0, y1, ...,xj, .., yn] =
G(x0, x1, ..., xj_guess, ..., xm),

xj and yi must have the same dimension and d(yi)/d(xj) must be invertable.

By default, the first input is unknown and the first output is the residual.

General information
===================



>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| common_options   | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | auto-generated   | nction           |
|                  |                 | functions        |                  |
+------------------+-----------------+------------------+------------------+
| constraints      | OT_INTVECTOR    | Constrain the    | casadi::Rootfind |
|                  |                 | unknowns. 0      | er               |
|                  |                 | (default): no    |                  |
|                  |                 | constraint on    |                  |
|                  |                 | ui, 1: ui >=     |                  |
|                  |                 | 0.0, -1: ui <=   |                  |
|                  |                 | 0.0, 2: ui >     |                  |
|                  |                 | 0.0, -2: ui <    |                  |
|                  |                 | 0.0.             |                  |
+------------------+-----------------+------------------+------------------+
| implicit_input   | OT_INT          | Index of the     | casadi::Rootfind |
|                  |                 | input that       | er               |
|                  |                 | corresponds to   |                  |
|                  |                 | the actual root- |                  |
|                  |                 | finding          |                  |
+------------------+-----------------+------------------+------------------+
| implicit_output  | OT_INT          | Index of the     | casadi::Rootfind |
|                  |                 | output that      | er               |
|                  |                 | corresponds to   |                  |
|                  |                 | the actual root- |                  |
|                  |                 | finding          |                  |
+------------------+-----------------+------------------+------------------+
| jacobian_functio | OT_FUNCTION     | Function object  | casadi::Rootfind |
| n                |                 | for calculating  | er               |
|                  |                 | the Jacobian     |                  |
|                  |                 | (autogenerated   |                  |
|                  |                 | by default)      |                  |
+------------------+-----------------+------------------+------------------+
| linear_solver    | OT_STRING       | User-defined     | casadi::Rootfind |
|                  |                 | linear solver    | er               |
|                  |                 | class. Needed    |                  |
|                  |                 | for              |                  |
|                  |                 | sensitivities.   |                  |
+------------------+-----------------+------------------+------------------+
| linear_solver_op | OT_DICT         | Options to be    | casadi::Rootfind |
| tions            |                 | passed to the    | er               |
|                  |                 | linear solver.   |                  |
+------------------+-----------------+------------------+------------------+
| monitor          | OT_STRINGVECTOR | Set of user      | casadi::OracleFu |
|                  |                 | problem          | nction           |
|                  |                 | functions to be  |                  |
|                  |                 | monitored        |                  |
+------------------+-----------------+------------------+------------------+
| specific_options | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | specific auto-   | nction           |
|                  |                 | generated        |                  |
|                  |                 | functions,       |                  |
|                  |                 | overwriting the  |                  |
|                  |                 | defaults from    |                  |
|                  |                 | common_options.  |                  |
|                  |                 | Nested           |                  |
|                  |                 | dictionary.      |                  |
+------------------+-----------------+------------------+------------------+

List of plugins
===============



- kinsol

- nlpsol

- newton

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
Rootfinder.doc(\"myextraplugin\")



--------------------------------------------------------------------------------

kinsol
------



KINSOL interface from the Sundials suite

>List of available options

+---------------------------+-----------------+----------------------------+
|            Id             |      Type       |        Description         |
+===========================+=================+============================+
| abstol                    | OT_DOUBLE       | Stopping criterion         |
|                           |                 | tolerance                  |
+---------------------------+-----------------+----------------------------+
| disable_internal_warnings | OT_BOOL         | Disable KINSOL internal    |
|                           |                 | warning messages           |
+---------------------------+-----------------+----------------------------+
| exact_jacobian            | OT_BOOL         | Use exact Jacobian         |
|                           |                 | information                |
+---------------------------+-----------------+----------------------------+
| f_scale                   | OT_DOUBLEVECTOR | Equation scaling factors   |
+---------------------------+-----------------+----------------------------+
| iterative_solver          | OT_STRING       | gmres|bcgstab|tfqmr        |
+---------------------------+-----------------+----------------------------+
| linear_solver_type        | OT_STRING       | dense|banded|iterative|use |
|                           |                 | r_defined                  |
+---------------------------+-----------------+----------------------------+
| lower_bandwidth           | OT_INT          | Lower bandwidth for banded |
|                           |                 | linear solvers             |
+---------------------------+-----------------+----------------------------+
| max_iter                  | OT_INT          | Maximum number of Newton   |
|                           |                 | iterations. Putting 0 sets |
|                           |                 | the default value of       |
|                           |                 | KinSol.                    |
+---------------------------+-----------------+----------------------------+
| max_krylov                | OT_INT          | Maximum Krylov space       |
|                           |                 | dimension                  |
+---------------------------+-----------------+----------------------------+
| pretype                   | OT_STRING       | Type of preconditioner     |
+---------------------------+-----------------+----------------------------+
| strategy                  | OT_STRING       | Globalization strategy     |
+---------------------------+-----------------+----------------------------+
| u_scale                   | OT_DOUBLEVECTOR | Variable scaling factors   |
+---------------------------+-----------------+----------------------------+
| upper_bandwidth           | OT_INT          | Upper bandwidth for banded |
|                           |                 | linear solvers             |
+---------------------------+-----------------+----------------------------+
| use_preconditioner        | OT_BOOL         | Precondition an iterative  |
|                           |                 | solver                     |
+---------------------------+-----------------+----------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

nlpsol
------





--------------------------------------------------------------------------------





--------------------------------------------------------------------------------

newton
------



Implements simple newton iterations to solve an implicit function.

>List of available options

+-----------------+-----------+--------------------------------------------+
|       Id        |   Type    |                Description                 |
+=================+===========+============================================+
| abstol          | OT_DOUBLE | Stopping criterion tolerance on max(|F|)   |
+-----------------+-----------+--------------------------------------------+
| abstolStep      | OT_DOUBLE | Stopping criterion tolerance on step size  |
+-----------------+-----------+--------------------------------------------+
| max_iter        | OT_INT    | Maximum number of Newton iterations to     |
|                 |           | perform before returning.                  |
+-----------------+-----------+--------------------------------------------+
| print_iteration | OT_BOOL   | Print information about each iteration     |
+-----------------+-----------+--------------------------------------------+

--------------------------------------------------------------------------------



Joel Andersson

";

%feature("docstring")  casadi::casadi_qr_sparsities(const int *sp_a, int
nrow_ext, int *sp_v, int *sp_r, const int *leftmost, const int *parent,
const int *pinv, int *iw) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_ldl(const int *sp_a, const int
*parent, const int *sp_l, const T1 *a, T1 *l, T1 *d, int *iw, T1 *w) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_imax(int a, int b) "

[INTERNAL] ";

%feature("docstring")  casadi::dple_n_in() "

Get the number of QP solver inputs.

";

%feature("docstring")  casadi::has_negative(const std::vector< T > &v) "

Check if the vector has negative entries.

";

%feature("docstring")  casadi::to_slice(const IM &x, bool ind1=false) "

Convert IM to Slice.

";

%feature("docstring")  casadi::to_slice(const std::vector< int > &v, bool
ind1=false) "

Construct from an index vector (requires is_slice(v) to be true)

";

%feature("docstring")  casadi::dense_copy_stride(int n, int m, const double
*A, double *B, int strideA, int strideB) "

[INTERNAL] ";

%feature("docstring")  casadi::doc_linsol(const std::string &name) "

Get the documentation string for a plugin.

";

%feature("docstring")  casadi::expm_n_in() "

Get the number of expm solver inputs.

";

%feature("docstring")  casadi::conic_in() "

Get input scheme of QP solvers.

";

%feature("docstring")  casadi::conic_in(int ind) "

Get QP solver input scheme name by index.

";

%feature("docstring")  casadi::doc_expm(const std::string &name) "

Get the documentation string for a plugin.

";

%feature("docstring")  casadi::lookupvector(const std::vector< int > &v, int
size) "

Returns a vector for quickly looking up entries of supplied list.

lookupvector[i]!=-1 <=> v contains i v[lookupvector[i]] == i <=> v contains
i

Duplicates are treated by looking up last occurrence

";

%feature("docstring")  casadi::lookupvector(const std::vector< int > &v) "

";

%feature("docstring")  casadi::slicot_mb03vy(int n, int p, int ilo, int ihi,
double *a, int lda1, int lda2, const double *tau, int ldtau, double
*dwork=0, int ldwork=0) "

";

%feature("docstring")  casadi::doc_dple(const std::string &name) "

Get the documentation string for a plugin.

";

%feature("docstring")  casadi::casadi_imin(int a, int b) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_copy_int(const int *x, int n, int *y)
"

[INTERNAL] ";

%feature("docstring")  casadi::trim_path(const std::string &full_path) "

";

%feature("docstring")  casadi::uout() "

";

%feature("docstring")  casadi::has_integrator(const std::string &name) "

Check if a particular plugin is available.

";

%feature("docstring")  casadi::casadi_central_diff(T1 **yk, T1 *y0, T1 *J,
T1 h, int n_y, const casadi_finite_diff_mem< T1 > *m) "

[INTERNAL] ";

%feature("docstring")  casadi::integrator(const std::string &name, const
std::string &solver, const SXDict &dae, const Dict &opts=Dict()) "

Create an ODE/DAE integrator Solves an initial value problem (IVP) coupled
to a terminal value problem with differential equation given as an implicit
ODE coupled to an algebraic equation and a set of quadratures:



::

  Initial conditions at t=t0
  x(t0)  = x0
  q(t0)  = 0
  
  Forward integration from t=t0 to t=tf
  der(x) = function(x, z, p, t)                  Forward ODE
  0 = fz(x, z, p, t)                  Forward algebraic equations
  der(q) = fq(x, z, p, t)                  Forward quadratures
  
  Terminal conditions at t=tf
  rx(tf)  = rx0
  rq(tf)  = 0
  
  Backward integration from t=tf to t=t0
  der(rx) = gx(rx, rz, rp, x, z, p, t)        Backward ODE
  0 = gz(rx, rz, rp, x, z, p, t)        Backward algebraic equations
  der(rq) = gq(rx, rz, rp, x, z, p, t)        Backward quadratures
  
  where we assume that both the forward and backwards integrations are index-1
  (i.e. dfz/dz, dgz/drz are invertible) and furthermore that
  gx, gz and gq have a linear dependency on rx, rz and rp.



General information
===================



>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| augmented_option | OT_DICT         | Options to be    | casadi::Integrat |
| s                |                 | passed down to   | or               |
|                  |                 | the augmented    |                  |
|                  |                 | integrator, if   |                  |
|                  |                 | one is           |                  |
|                  |                 | constructed.     |                  |
+------------------+-----------------+------------------+------------------+
| common_options   | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | auto-generated   | nction           |
|                  |                 | functions        |                  |
+------------------+-----------------+------------------+------------------+
| expand           | OT_BOOL         | Replace MX with  | casadi::Integrat |
|                  |                 | SX expressions   | or               |
|                  |                 | in problem       |                  |
|                  |                 | formulation      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| grid             | OT_DOUBLEVECTOR | Time grid        | casadi::Integrat |
|                  |                 |                  | or               |
+------------------+-----------------+------------------+------------------+
| monitor          | OT_STRINGVECTOR | Set of user      | casadi::OracleFu |
|                  |                 | problem          | nction           |
|                  |                 | functions to be  |                  |
|                  |                 | monitored        |                  |
+------------------+-----------------+------------------+------------------+
| number_of_finite | OT_INT          | Number of finite | casadi::Integrat |
| _elements        |                 | elements         | or               |
+------------------+-----------------+------------------+------------------+
| output_t0        | OT_BOOL         | Output the state | casadi::Integrat |
|                  |                 | at the initial   | or               |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| print_stats      | OT_BOOL         | Print out        | casadi::Integrat |
|                  |                 | statistics after | or               |
|                  |                 | integration      |                  |
+------------------+-----------------+------------------+------------------+
| rootfinder       | OT_STRING       | An implicit      | casadi::Integrat |
|                  |                 | function solver  | or               |
+------------------+-----------------+------------------+------------------+
| rootfinder_optio | OT_DICT         | Options to be    | casadi::Integrat |
| ns               |                 | passed to the    | or               |
|                  |                 | NLP Solver       |                  |
+------------------+-----------------+------------------+------------------+
| specific_options | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | specific auto-   | nction           |
|                  |                 | generated        |                  |
|                  |                 | functions,       |                  |
|                  |                 | overwriting the  |                  |
|                  |                 | defaults from    |                  |
|                  |                 | common_options.  |                  |
|                  |                 | Nested           |                  |
|                  |                 | dictionary.      |                  |
+------------------+-----------------+------------------+------------------+
| t0               | OT_DOUBLE       | Beginning of the | casadi::Integrat |
|                  |                 | time horizon     | or               |
+------------------+-----------------+------------------+------------------+
| tf               | OT_DOUBLE       | End of the time  | casadi::Integrat |
|                  |                 | horizon          | or               |
+------------------+-----------------+------------------+------------------+

>Input scheme: casadi::IntegratorInput (INTEGRATOR_NUM_IN = 6)

+----------------+-------+-------------------------------------------------+
|   Full name    | Short |                   Description                   |
+================+=======+=================================================+
| INTEGRATOR_X0  | x0    | Differential state at the initial time.         |
+----------------+-------+-------------------------------------------------+
| INTEGRATOR_P   | p     | Parameters.                                     |
+----------------+-------+-------------------------------------------------+
| INTEGRATOR_Z0  | z0    | Initial guess for the algebraic variable.       |
+----------------+-------+-------------------------------------------------+
| INTEGRATOR_RX0 | rx0   | Backward differential state at the final time.  |
+----------------+-------+-------------------------------------------------+
| INTEGRATOR_RP  | rp    | Backward parameter vector.                      |
+----------------+-------+-------------------------------------------------+
| INTEGRATOR_RZ0 | rz0   | Initial guess for the backwards algebraic       |
|                |       | variable.                                       |
+----------------+-------+-------------------------------------------------+

>Output scheme: casadi::IntegratorOutput (INTEGRATOR_NUM_OUT = 6)

+----------------+-------+-------------------------------------------------+
|   Full name    | Short |                   Description                   |
+================+=======+=================================================+
| INTEGRATOR_XF  | xf    | Differential state at the final time.           |
+----------------+-------+-------------------------------------------------+
| INTEGRATOR_QF  | qf    | Quadrature state at the final time.             |
+----------------+-------+-------------------------------------------------+
| INTEGRATOR_ZF  | zf    | Algebraic variable at the final time.           |
+----------------+-------+-------------------------------------------------+
| INTEGRATOR_RXF | rxf   | Backward differential state at the initial      |
|                |       | time.                                           |
+----------------+-------+-------------------------------------------------+
| INTEGRATOR_RQF | rqf   | Backward quadrature state at the initial time.  |
+----------------+-------+-------------------------------------------------+
| INTEGRATOR_RZF | rzf   | Backward algebraic variable at the initial      |
|                |       | time.                                           |
+----------------+-------+-------------------------------------------------+

List of plugins
===============



- cvodes

- idas

- collocation

- rk

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
Integrator.doc(\"myextraplugin\")



--------------------------------------------------------------------------------

cvodes
------



Interface to CVodes from the Sundials suite.

A call to evaluate will integrate to the end.

You can retrieve the entire state trajectory as follows, after the evaluate
call: Call reset. Then call integrate(t_i) and getOuput for a series of
times t_i.

>List of available options

+----------------------------+-----------+---------------------------------+
|             Id             |   Type    |           Description           |
+============================+===========+=================================+
| abstol                     | OT_DOUBLE | Absolute tolerence for the IVP  |
|                            |           | solution                        |
+----------------------------+-----------+---------------------------------+
| disable_internal_warnings  | OT_BOOL   | Disable SUNDIALS internal       |
|                            |           | warning messages                |
+----------------------------+-----------+---------------------------------+
| fsens_all_at_once          | OT_BOOL   | Calculate all right hand sides  |
|                            |           | of the sensitivity equations at |
|                            |           | once                            |
+----------------------------+-----------+---------------------------------+
| fsens_err_con              | OT_BOOL   | include the forward             |
|                            |           | sensitivities in all error      |
|                            |           | controls                        |
+----------------------------+-----------+---------------------------------+
| interpolation_type         | OT_STRING | Type of interpolation for the   |
|                            |           | adjoint sensitivities           |
+----------------------------+-----------+---------------------------------+
| linear_multistep_method    | OT_STRING | Integrator scheme: BDF|adams    |
+----------------------------+-----------+---------------------------------+
| linear_solver              | OT_STRING | A custom linear solver creator  |
|                            |           | function [default: csparse]     |
+----------------------------+-----------+---------------------------------+
| linear_solver_options      | OT_DICT   | Options to be passed to the     |
|                            |           | linear solver                   |
+----------------------------+-----------+---------------------------------+
| max_krylov                 | OT_INT    | Maximum Krylov subspace size    |
+----------------------------+-----------+---------------------------------+
| max_multistep_order        | OT_INT    | Maximum order for the           |
|                            |           | (variable-order) multistep      |
|                            |           | method                          |
+----------------------------+-----------+---------------------------------+
| max_num_steps              | OT_INT    | Maximum number of integrator    |
|                            |           | steps                           |
+----------------------------+-----------+---------------------------------+
| max_order                  | OT_DOUBLE | Maximum order                   |
+----------------------------+-----------+---------------------------------+
| newton_scheme              | OT_STRING | Linear solver scheme in the     |
|                            |           | Newton method:                  |
|                            |           | DIRECT|gmres|bcgstab|tfqmr      |
+----------------------------+-----------+---------------------------------+
| nonlin_conv_coeff          | OT_DOUBLE | Coefficient in the nonlinear    |
|                            |           | convergence test                |
+----------------------------+-----------+---------------------------------+
| nonlinear_solver_iteration | OT_STRING | Nonlinear solver type:          |
|                            |           | NEWTON|functional               |
+----------------------------+-----------+---------------------------------+
| quad_err_con               | OT_BOOL   | Should the quadratures affect   |
|                            |           | the step size control           |
+----------------------------+-----------+---------------------------------+
| reltol                     | OT_DOUBLE | Relative tolerence for the IVP  |
|                            |           | solution                        |
+----------------------------+-----------+---------------------------------+
| second_order_correction    | OT_BOOL   | Second order correction in the  |
|                            |           | augmented system Jacobian       |
|                            |           | [true]                          |
+----------------------------+-----------+---------------------------------+
| sensitivity_method         | OT_STRING | Sensitivity method:             |
|                            |           | SIMULTANEOUS|staggered          |
+----------------------------+-----------+---------------------------------+
| step0                      | OT_DOUBLE | initial step size [default:     |
|                            |           | 0/estimated]                    |
+----------------------------+-----------+---------------------------------+
| steps_per_checkpoint       | OT_INT    | Number of steps between two     |
|                            |           | consecutive checkpoints         |
+----------------------------+-----------+---------------------------------+
| stop_at_end                | OT_BOOL   | Stop the integrator at the end  |
|                            |           | of the interval                 |
+----------------------------+-----------+---------------------------------+
| use_preconditioner         | OT_BOOL   | Precondition the iterative      |
|                            |           | solver [default: true]          |
+----------------------------+-----------+---------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

idas
----



Interface to IDAS from the Sundials suite.

>List of available options

+---------------------------+-----------------+----------------------------+
|            Id             |      Type       |        Description         |
+===========================+=================+============================+
| abstol                    | OT_DOUBLE       | Absolute tolerence for the |
|                           |                 | IVP solution               |
+---------------------------+-----------------+----------------------------+
| abstolv                   | OT_DOUBLEVECTOR | Absolute tolerarance for   |
|                           |                 | each component             |
+---------------------------+-----------------+----------------------------+
| calc_ic                   | OT_BOOL         | Use IDACalcIC to get       |
|                           |                 | consistent initial         |
|                           |                 | conditions.                |
+---------------------------+-----------------+----------------------------+
| calc_icB                  | OT_BOOL         | Use IDACalcIC to get       |
|                           |                 | consistent initial         |
|                           |                 | conditions for backwards   |
|                           |                 | system [default: equal to  |
|                           |                 | calc_ic].                  |
+---------------------------+-----------------+----------------------------+
| cj_scaling                | OT_BOOL         | IDAS scaling on cj for the |
|                           |                 | user-defined linear solver |
|                           |                 | module                     |
+---------------------------+-----------------+----------------------------+
| disable_internal_warnings | OT_BOOL         | Disable SUNDIALS internal  |
|                           |                 | warning messages           |
+---------------------------+-----------------+----------------------------+
| first_time                | OT_DOUBLE       | First requested time as a  |
|                           |                 | fraction of the time       |
|                           |                 | interval                   |
+---------------------------+-----------------+----------------------------+
| fsens_err_con             | OT_BOOL         | include the forward        |
|                           |                 | sensitivities in all error |
|                           |                 | controls                   |
+---------------------------+-----------------+----------------------------+
| init_xdot                 | OT_DOUBLEVECTOR | Initial values for the     |
|                           |                 | state derivatives          |
+---------------------------+-----------------+----------------------------+
| interpolation_type        | OT_STRING       | Type of interpolation for  |
|                           |                 | the adjoint sensitivities  |
+---------------------------+-----------------+----------------------------+
| linear_solver             | OT_STRING       | A custom linear solver     |
|                           |                 | creator function [default: |
|                           |                 | csparse]                   |
+---------------------------+-----------------+----------------------------+
| linear_solver_options     | OT_DICT         | Options to be passed to    |
|                           |                 | the linear solver          |
+---------------------------+-----------------+----------------------------+
| max_krylov                | OT_INT          | Maximum Krylov subspace    |
|                           |                 | size                       |
+---------------------------+-----------------+----------------------------+
| max_multistep_order       | OT_INT          | Maximum order for the      |
|                           |                 | (variable-order) multistep |
|                           |                 | method                     |
+---------------------------+-----------------+----------------------------+
| max_num_steps             | OT_INT          | Maximum number of          |
|                           |                 | integrator steps           |
+---------------------------+-----------------+----------------------------+
| max_order                 | OT_DOUBLE       | Maximum order              |
+---------------------------+-----------------+----------------------------+
| max_step_size             | OT_DOUBLE       | Maximim step size          |
+---------------------------+-----------------+----------------------------+
| newton_scheme             | OT_STRING       | Linear solver scheme in    |
|                           |                 | the Newton method:         |
|                           |                 | DIRECT|gmres|bcgstab|tfqmr |
+---------------------------+-----------------+----------------------------+
| nonlin_conv_coeff         | OT_DOUBLE       | Coefficient in the         |
|                           |                 | nonlinear convergence test |
+---------------------------+-----------------+----------------------------+
| quad_err_con              | OT_BOOL         | Should the quadratures     |
|                           |                 | affect the step size       |
|                           |                 | control                    |
+---------------------------+-----------------+----------------------------+
| reltol                    | OT_DOUBLE       | Relative tolerence for the |
|                           |                 | IVP solution               |
+---------------------------+-----------------+----------------------------+
| second_order_correction   | OT_BOOL         | Second order correction in |
|                           |                 | the augmented system       |
|                           |                 | Jacobian [true]            |
+---------------------------+-----------------+----------------------------+
| sensitivity_method        | OT_STRING       | Sensitivity method:        |
|                           |                 | SIMULTANEOUS|staggered     |
+---------------------------+-----------------+----------------------------+
| step0                     | OT_DOUBLE       | initial step size          |
|                           |                 | [default: 0/estimated]     |
+---------------------------+-----------------+----------------------------+
| steps_per_checkpoint      | OT_INT          | Number of steps between    |
|                           |                 | two consecutive            |
|                           |                 | checkpoints                |
+---------------------------+-----------------+----------------------------+
| stop_at_end               | OT_BOOL         | Stop the integrator at the |
|                           |                 | end of the interval        |
+---------------------------+-----------------+----------------------------+
| suppress_algebraic        | OT_BOOL         | Suppress algebraic         |
|                           |                 | variables in the error     |
|                           |                 | testing                    |
+---------------------------+-----------------+----------------------------+
| use_preconditioner        | OT_BOOL         | Precondition the iterative |
|                           |                 | solver [default: true]     |
+---------------------------+-----------------+----------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

collocation
-----------



Fixed-step implicit Runge-Kutta integrator ODE/DAE integrator based on
collocation schemes

The method is still under development

>List of available options

+---------------------------+-----------------+----------------------------+
|            Id             |      Type       |        Description         |
+===========================+=================+============================+
| augmented_options         | OT_DICT         | Options to be passed down  |
|                           |                 | to the augmented           |
|                           |                 | integrator, if one is      |
|                           |                 | constructed.               |
+---------------------------+-----------------+----------------------------+
| collocation_scheme        | OT_STRING       | Collocation scheme:        |
|                           |                 | radau|legendre             |
+---------------------------+-----------------+----------------------------+
| expand                    | OT_BOOL         | Replace MX with SX         |
|                           |                 | expressions in problem     |
|                           |                 | formulation [false]        |
+---------------------------+-----------------+----------------------------+
| grid                      | OT_DOUBLEVECTOR | Time grid                  |
+---------------------------+-----------------+----------------------------+
| interpolation_order       | OT_INT          | Order of the interpolating |
|                           |                 | polynomials                |
+---------------------------+-----------------+----------------------------+
| number_of_finite_elements | OT_INT          | Number of finite elements  |
+---------------------------+-----------------+----------------------------+
| output_t0                 | OT_BOOL         | Output the state at the    |
|                           |                 | initial time               |
+---------------------------+-----------------+----------------------------+
| print_stats               | OT_BOOL         | Print out statistics after |
|                           |                 | integration                |
+---------------------------+-----------------+----------------------------+
| rootfinder                | OT_STRING       | An implicit function       |
|                           |                 | solver                     |
+---------------------------+-----------------+----------------------------+
| rootfinder_options        | OT_DICT         | Options to be passed to    |
|                           |                 | the NLP Solver             |
+---------------------------+-----------------+----------------------------+
| t0                        | OT_DOUBLE       | Beginning of the time      |
|                           |                 | horizon                    |
+---------------------------+-----------------+----------------------------+
| tf                        | OT_DOUBLE       | End of the time horizon    |
+---------------------------+-----------------+----------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

rk --



Fixed-step explicit Runge-Kutta integrator for ODEs Currently implements
RK4.

The method is still under development

--------------------------------------------------------------------------------



Joel Andersson

";

%feature("docstring")  casadi::integrator(const std::string &name, const
std::string &solver, const MXDict &dae, const Dict &opts=Dict()) "

";

%feature("docstring")  casadi::integrator_out() "

Get integrator output scheme of integrators.

";

%feature("docstring")  casadi::integrator_out(int ind) "

Get output scheme name by index.

";

%feature("docstring")  casadi::has_dple(const std::string &name) "

Check if a particular plugin is available.

";

%feature("docstring")  casadi::replace_mat(const M &arg, const Sparsity
&inp) "

[INTERNAL] ";

%feature("docstring")  casadi::dense_mul_nn(int n, int m, int l, const
double *A, const double *B, double *C) "

[INTERNAL] ";

%feature("docstring")  casadi::load_interpolant(const std::string &name) "

Explicitly load a plugin dynamically.

";

%feature("docstring")  casadi::integrator_n_in() "

Get the number of integrator inputs.

";

%feature("docstring")  casadi::collocation_points(int order, const
std::string &scheme="radau") "

Obtain collocation points of specific order and scheme.

Parameters:
-----------

order:  Which order (1 to 9 supported)

scheme:  'radau' or 'legendre'

";

%feature("docstring")  casadi::conic(const std::string &name, const
std::string &solver, const SpDict &qp, const Dict &opts=Dict()) "

Create a QP solver Solves the following strictly convex problem:



::

  min          1/2 x' H x + g' x
  x
  
  subject to
  LBA <= A x <= UBA
  LBX <= x   <= UBX
  
  with :
  H sparse (n x n) positive definite
  g dense  (n x 1)
  
  n: number of decision variables (x)
  nc: number of constraints (A)



If H is not positive-definite, the solver should throw an error.

General information
===================



>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| discrete         | OT_BOOLVECTOR   | Indicates which  | casadi::Conic    |
|                  |                 | of the variables |                  |
|                  |                 | are discrete,    |                  |
|                  |                 | i.e. integer-    |                  |
|                  |                 | valued           |                  |
+------------------+-----------------+------------------+------------------+
| enable_fd        | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation by   |                  |
|                  |                 | finite           |                  |
|                  |                 | differencing.    |                  |
|                  |                 | [default:        |                  |
|                  |                 | false]]          |                  |
+------------------+-----------------+------------------+------------------+
| enable_forward   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using forward    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_jacobian  | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobians of all |                  |
|                  |                 | differentiable   |                  |
|                  |                 | outputs with     |                  |
|                  |                 | respect to all   |                  |
|                  |                 | differentiable   |                  |
|                  |                 | inputs - if      |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_reverse   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | transposed       |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using reverse    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| fd_method        | OT_STRING       | Method for       | casadi::Function |
|                  |                 | finite           | Internal         |
|                  |                 | differencing     |                  |
|                  |                 | [default         |                  |
|                  |                 | 'central']       |                  |
+------------------+-----------------+------------------+------------------+
| fd_options       | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | finite           |                  |
|                  |                 | difference       |                  |
|                  |                 | instance         |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

>Input scheme: casadi::ConicInput (CONIC_NUM_IN = 10)

+--------------+--------+--------------------------------------------------+
|  Full name   | Short  |                   Description                    |
+==============+========+==================================================+
| CONIC_H      | h      | The square matrix H: sparse, (n x n). Only the   |
|              |        | lower triangular part is actually used. The      |
|              |        | matrix is assumed to be symmetrical.             |
+--------------+--------+--------------------------------------------------+
| CONIC_G      | g      | The vector g: dense, (n x 1)                     |
+--------------+--------+--------------------------------------------------+
| CONIC_A      | a      | The matrix A: sparse, (nc x n) - product with x  |
|              |        | must be dense.                                   |
+--------------+--------+--------------------------------------------------+
| CONIC_LBA    | lba    | dense, (nc x 1)                                  |
+--------------+--------+--------------------------------------------------+
| CONIC_UBA    | uba    | dense, (nc x 1)                                  |
+--------------+--------+--------------------------------------------------+
| CONIC_LBX    | lbx    | dense, (n x 1)                                   |
+--------------+--------+--------------------------------------------------+
| CONIC_UBX    | ubx    | dense, (n x 1)                                   |
+--------------+--------+--------------------------------------------------+
| CONIC_X0     | x0     | dense, (n x 1)                                   |
+--------------+--------+--------------------------------------------------+
| CONIC_LAM_X0 | lam_x0 | dense                                            |
+--------------+--------+--------------------------------------------------+
| CONIC_LAM_A0 | lam_a0 | dense                                            |
+--------------+--------+--------------------------------------------------+

>Output scheme: casadi::ConicOutput (CONIC_NUM_OUT = 4)

+-------------+-------+---------------------------------------------------+
|  Full name  | Short |                    Description                    |
+=============+=======+===================================================+
| CONIC_X     | x     | The primal solution.                              |
+-------------+-------+---------------------------------------------------+
| CONIC_COST  | cost  | The optimal cost.                                 |
+-------------+-------+---------------------------------------------------+
| CONIC_LAM_A | lam_a | The dual solution corresponding to linear bounds. |
+-------------+-------+---------------------------------------------------+
| CONIC_LAM_X | lam_x | The dual solution corresponding to simple bounds. |
+-------------+-------+---------------------------------------------------+

List of plugins
===============



- clp

- cplex

- gurobi

- hpmpc

- ooqp

- qpoases

- sqic

- nlpsol

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
Conic.doc(\"myextraplugin\")



--------------------------------------------------------------------------------

clp
---



Interface to Clp solver for sparse Quadratic Programs

--------------------------------------------------------------------------------





--------------------------------------------------------------------------------

cplex
-----



Interface to Cplex solver for sparse Quadratic Programs

>List of available options

+---------------+-----------+----------------------------------------------+
|      Id       |   Type    |                 Description                  |
+===============+===========+==============================================+
| cplex         | OT_DICT   | Options to be passed to CPLEX                |
+---------------+-----------+----------------------------------------------+
| dep_check     | OT_INT    | Detect redundant constraints.                |
+---------------+-----------+----------------------------------------------+
| dump_filename | OT_STRING | The filename to dump to.                     |
+---------------+-----------+----------------------------------------------+
| dump_to_file  | OT_BOOL   | Dumps QP to file in CPLEX format.            |
+---------------+-----------+----------------------------------------------+
| qp_method     | OT_INT    | Determines which CPLEX algorithm to use.     |
+---------------+-----------+----------------------------------------------+
| tol           | OT_DOUBLE | Tolerance of solver                          |
+---------------+-----------+----------------------------------------------+
| warm_start    | OT_BOOL   | Use warm start with simplex methods (affects |
|               |           | only the simplex methods).                   |
+---------------+-----------+----------------------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

gurobi
------



Interface to the GUROBI Solver for quadratic programming

>List of available options

+-------+-----------------+------------------------------------------------+
|  Id   |      Type       |                  Description                   |
+=======+=================+================================================+
| vtype | OT_STRINGVECTOR | Type of variables:                             |
|       |                 | [CONTINUOUS|binary|integer|semicont|semiint]   |
+-------+-----------------+------------------------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

hpmpc
-----



Interface to HMPC Solver

In order to use this interface, you must:

Decision variables must only by state and control, and the variable ordering
must be [x0 u0 x1 u1 ...]

The constraints must be in order: [ gap0 lincon0 gap1 lincon1 ]

gap: Ak+1 = Ak xk + Bk uk lincon: yk= Ck xk + Dk uk



::

         A0 B0 -I
         C0 D0
                A1 B1 -I
                C1 D1



where I must be a diagonal sparse matrix Either supply all of N, nx, ng, nu
options or rely on automatic detection

>List of available options

+----------------+--------------+------------------------------------------+
|       Id       |     Type     |               Description                |
+================+==============+==========================================+
| N              | OT_INT       | OCP horizon                              |
+----------------+--------------+------------------------------------------+
| blasfeo_target | OT_STRING    | hpmpc target                             |
+----------------+--------------+------------------------------------------+
| inf            | OT_DOUBLE    | HPMPC cannot handle infinities.          |
|                |              | Infinities will be replaced by this      |
|                |              | option's value.                          |
+----------------+--------------+------------------------------------------+
| max_iter       | OT_INT       | Max number of iterations                 |
+----------------+--------------+------------------------------------------+
| mu0            | OT_DOUBLE    | Max element in cost function as estimate |
|                |              | of max multiplier                        |
+----------------+--------------+------------------------------------------+
| ng             | OT_INTVECTOR | Number of non-dynamic constraints,       |
|                |              | length N+1                               |
+----------------+--------------+------------------------------------------+
| nu             | OT_INTVECTOR | Number of controls, length N             |
+----------------+--------------+------------------------------------------+
| nx             | OT_INTVECTOR | Number of states, length N+1             |
+----------------+--------------+------------------------------------------+
| target         | OT_STRING    | hpmpc target                             |
+----------------+--------------+------------------------------------------+
| tol            | OT_DOUBLE    | Tolerance in the duality measure         |
+----------------+--------------+------------------------------------------+
| warm_start     | OT_BOOL      | Use warm-starting                        |
+----------------+--------------+------------------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

ooqp
----



Interface to the OOQP Solver for quadratic programming The current
implementation assumes that OOQP is configured with the MA27 sparse linear
solver.

NOTE: when doing multiple calls to evaluate(), check if you need to
reInit();

>List of available options

+-------------+-----------+------------------------------------------------+
|     Id      |   Type    |                  Description                   |
+=============+===========+================================================+
| artol       | OT_DOUBLE | tolerance as provided with setArTol to OOQP    |
+-------------+-----------+------------------------------------------------+
| mutol       | OT_DOUBLE | tolerance as provided with setMuTol to OOQP    |
+-------------+-----------+------------------------------------------------+
| print_level | OT_INT    | Print level. OOQP listens to print_level 0, 10 |
|             |           | and 100                                        |
+-------------+-----------+------------------------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

qpoases
-------



Interface to QPOases Solver for quadratic programming

>List of available options

+-------------------------------+-----------+------------------------------+
|              Id               |   Type    |         Description          |
+===============================+===========+==============================+
| CPUtime                       | OT_DOUBLE | The maximum allowed CPU time |
|                               |           | in seconds for the whole     |
|                               |           | initialisation (and the      |
|                               |           | actually required one on     |
|                               |           | output). Disabled if unset.  |
+-------------------------------+-----------+------------------------------+
| boundRelaxation               | OT_DOUBLE | Initial relaxation of bounds |
|                               |           | to start homotopy and        |
|                               |           | initial value for far        |
|                               |           | bounds.                      |
+-------------------------------+-----------+------------------------------+
| boundTolerance                | OT_DOUBLE | If upper and lower bounds    |
|                               |           | differ less than this        |
|                               |           | tolerance, they are regarded |
|                               |           | equal, i.e. as equality      |
|                               |           | constraint.                  |
+-------------------------------+-----------+------------------------------+
| enableCholeskyRefactorisation | OT_INT    | Specifies the frequency of a |
|                               |           | full re-factorisation of     |
|                               |           | projected Hessian matrix: 0: |
|                               |           | turns them off, 1: uses them |
|                               |           | at each iteration etc.       |
+-------------------------------+-----------+------------------------------+
| enableDriftCorrection         | OT_INT    | Specifies the frequency of   |
|                               |           | drift corrections: 0: turns  |
|                               |           | them off.                    |
+-------------------------------+-----------+------------------------------+
| enableEqualities              | OT_BOOL   | Specifies whether equalities |
|                               |           | should be treated as always  |
|                               |           | active (True) or not (False) |
+-------------------------------+-----------+------------------------------+
| enableFarBounds               | OT_BOOL   | Enables the use of far       |
|                               |           | bounds.                      |
+-------------------------------+-----------+------------------------------+
| enableFlippingBounds          | OT_BOOL   | Enables the use of flipping  |
|                               |           | bounds.                      |
+-------------------------------+-----------+------------------------------+
| enableFullLITests             | OT_BOOL   | Enables condition-hardened   |
|                               |           | (but more expensive) LI      |
|                               |           | test.                        |
+-------------------------------+-----------+------------------------------+
| enableInertiaCorrection       | OT_BOOL   | Should working set be        |
|                               |           | repaired when negative       |
|                               |           | curvature is discovered      |
|                               |           | during hotstart.             |
+-------------------------------+-----------+------------------------------+
| enableNZCTests                | OT_BOOL   | Enables nonzero curvature    |
|                               |           | tests.                       |
+-------------------------------+-----------+------------------------------+
| enableRamping                 | OT_BOOL   | Enables ramping.             |
+-------------------------------+-----------+------------------------------+
| enableRegularisation          | OT_BOOL   | Enables automatic Hessian    |
|                               |           | regularisation.              |
+-------------------------------+-----------+------------------------------+
| epsDen                        | OT_DOUBLE | Denominator tolerance for    |
|                               |           | ratio tests.                 |
+-------------------------------+-----------+------------------------------+
| epsFlipping                   | OT_DOUBLE | Tolerance of squared         |
|                               |           | Cholesky diagonal factor     |
|                               |           | which triggers flipping      |
|                               |           | bound.                       |
+-------------------------------+-----------+------------------------------+
| epsIterRef                    | OT_DOUBLE | Early termination tolerance  |
|                               |           | for iterative refinement.    |
+-------------------------------+-----------+------------------------------+
| epsLITests                    | OT_DOUBLE | Tolerance for linear         |
|                               |           | independence tests.          |
+-------------------------------+-----------+------------------------------+
| epsNZCTests                   | OT_DOUBLE | Tolerance for nonzero        |
|                               |           | curvature tests.             |
+-------------------------------+-----------+------------------------------+
| epsNum                        | OT_DOUBLE | Numerator tolerance for      |
|                               |           | ratio tests.                 |
+-------------------------------+-----------+------------------------------+
| epsRegularisation             | OT_DOUBLE | Scaling factor of identity   |
|                               |           | matrix used for Hessian      |
|                               |           | regularisation.              |
+-------------------------------+-----------+------------------------------+
| finalRamping                  | OT_DOUBLE | Final value for ramping      |
|                               |           | strategy.                    |
+-------------------------------+-----------+------------------------------+
| growFarBounds                 | OT_DOUBLE | Factor to grow far bounds.   |
+-------------------------------+-----------+------------------------------+
| hessian_type                  | OT_STRING | Type of Hessian - see        |
|                               |           | qpOASES documentation [UNKNO |
|                               |           | WN|posdef|semidef|indef|zero |
|                               |           | |identity]]                  |
+-------------------------------+-----------+------------------------------+
| initialFarBounds              | OT_DOUBLE | Initial size for far bounds. |
+-------------------------------+-----------+------------------------------+
| initialRamping                | OT_DOUBLE | Start value for ramping      |
|                               |           | strategy.                    |
+-------------------------------+-----------+------------------------------+
| initialStatusBounds           | OT_STRING | Initial status of bounds at  |
|                               |           | first iteration.             |
+-------------------------------+-----------+------------------------------+
| linsol_plugin                 | OT_STRING | Linear solver plugin         |
+-------------------------------+-----------+------------------------------+
| maxDualJump                   | OT_DOUBLE | Maximum allowed jump in dual |
|                               |           | variables in linear          |
|                               |           | independence tests.          |
+-------------------------------+-----------+------------------------------+
| maxPrimalJump                 | OT_DOUBLE | Maximum allowed jump in      |
|                               |           | primal variables in nonzero  |
|                               |           | curvature tests.             |
+-------------------------------+-----------+------------------------------+
| max_schur                     | OT_INT    | Maximal number of Schur      |
|                               |           | updates [75]                 |
+-------------------------------+-----------+------------------------------+
| nWSR                          | OT_INT    | The maximum number of        |
|                               |           | working set recalculations   |
|                               |           | to be performed during the   |
|                               |           | initial homotopy. Default is |
|                               |           | 5(nx + nc)                   |
+-------------------------------+-----------+------------------------------+
| numRefinementSteps            | OT_INT    | Maximum number of iterative  |
|                               |           | refinement steps.            |
+-------------------------------+-----------+------------------------------+
| numRegularisationSteps        | OT_INT    | Maximum number of successive |
|                               |           | regularisation steps.        |
+-------------------------------+-----------+------------------------------+
| printLevel                    | OT_STRING | Defines the amount of text   |
|                               |           | output during QP solution,   |
|                               |           | see Section 5.7              |
+-------------------------------+-----------+------------------------------+
| schur                         | OT_BOOL   | Use Schur Complement         |
|                               |           | Approach [false]             |
+-------------------------------+-----------+------------------------------+
| sparse                        | OT_BOOL   | Formulate the QP using       |
|                               |           | sparse matrices. [false]     |
+-------------------------------+-----------+------------------------------+
| terminationTolerance          | OT_DOUBLE | Relative termination         |
|                               |           | tolerance to stop homotopy.  |
+-------------------------------+-----------+------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

sqic
----



Interface to the SQIC solver for quadratic programming

--------------------------------------------------------------------------------





--------------------------------------------------------------------------------

nlpsol
------



Solve QPs using an Nlpsol Use the 'nlpsol' option to specify the NLP solver
to use.

>List of available options

+----------------+-----------+---------------------------------+
|       Id       |   Type    |           Description           |
+================+===========+=================================+
| nlpsol         | OT_STRING | Name of solver.                 |
+----------------+-----------+---------------------------------+
| nlpsol_options | OT_DICT   | Options to be passed to solver. |
+----------------+-----------+---------------------------------+

--------------------------------------------------------------------------------



Joel Andersson

";

%feature("docstring")  casadi::doc_conic(const std::string &name) "

Get the documentation string for a plugin.

";

%feature("docstring")  casadi::simpleIRK(Function f, int N=10, int order=4,
const std::string &scheme="radau", const std::string &solver="newton", const
Dict &solver_options=Dict()) "

Construct an implicit Runge-Kutta integrator using a collocation scheme The
constructed function has three inputs, corresponding to initial state (x0),
parameter (p) and integration time (h) and one output, corresponding to
final state (xf).

Parameters:
-----------

f:  ODE function with two inputs (x and p) and one output (xdot)

N:  Number of integrator steps

order:  Order of interpolating polynomials

scheme:   Collocation scheme, as excepted by collocationPoints function.

solver:  Solver plugin

solver_options:  Options to be passed to the solver plugin

";

%feature("docstring")  casadi::nlpsol_option_type(const std::string &name,
const std::string &op) "

Get type info for a particular option.

";

%feature("docstring")  casadi::casadi_axpy(int n, T1 alpha, const T1 *x, T1
*y) "

[INTERNAL]  AXPY: y <- a*x + y.

";

%feature("docstring")  casadi::has_nlpsol(const std::string &name) "

Check if a particular plugin is available.

";

%feature("docstring")  casadi::casadi_getu(const T1 *x, const int *sp_x, T1
*v) "

[INTERNAL]  Get the nonzeros for the upper triangular half.

";

%feature("docstring")  casadi::doc_nlpsol(const std::string &name) "

Get the documentation string for a plugin.

";

%feature("docstring")  casadi::casadi_ldl_colind(const int *sp, int *parent,
int *l_colind, int *w) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_densify(const T1 *x, const int *sp_x,
T2 *y, int tr) "

[INTERNAL]  Convert sparse to dense.

";

%feature("docstring")  casadi::zip(const std::vector< std::string > &id,
const std::vector< T > &mat) "

[INTERNAL] ";

%feature("docstring")  casadi::slicot_mb03wd(char job, char compz, int n,
int p, int ilo, int ihi, int iloz, int ihiz, double *h, int ldh1, int ldh2,
double *z, int ldz1, int ldz2, double *wr, double *wi, double *dwork=0, int
ldwork=0) "

";

%feature("docstring")  casadi::casadi_max_viol(int n, const T1 *x, const T1
*lb, const T1 *ub) "

[INTERNAL]  Largest bound violation.

";

%feature("docstring")  casadi::casadi_etree(const int *sp, int *parent, int
*w, int ata) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_qr_counts(const int *tr_sp, const int
*parent, const int *post, int *counts, int *w) "

[INTERNAL] ";

%feature("docstring")  casadi::collocation_interpolators(const std::vector<
double > &tau_root, std::vector< std::vector< double > > &output_C,
std::vector< double > &output_D) "

Obtain collocation interpolating matrices.

Parameters:
-----------

tau_root:  location of collocation points, as obtained from
collocation_points

output_C:  interpolating coefficients to obtain derivatives Length: order+1,
order + 1



::

dX/dt @collPoint(j) ~ Sum_i C[j][i]*X@collPoint(i)



Parameters:
-----------

output_D:  interpolating coefficients to obtain end state Length: order+1

";

%feature("docstring")  casadi::is_nonincreasing(const std::vector< T > &v) "

Check if the vector is non-increasing.

";

%feature("docstring")  casadi::nlpsol_n_in() "

Number of NLP solver inputs.

";

%feature("docstring")  casadi::matrixName() "

Get typename.

";

%feature("docstring")  casadi::load_dple(const std::string &name) "

Explicitly load a plugin dynamically.

";

%feature("docstring")  casadi::integrator_in() "

Get input scheme of integrators.

";

%feature("docstring")  casadi::integrator_in(int ind) "

Get integrator input scheme name by index.

";

%feature("docstring")  casadi::is_regular(const std::vector< T > &v) "

Checks if array does not contain NaN or Inf.

";

%feature("docstring")  casadi::is_regular(N_Vector v) "

[INTERNAL] ";

%feature("docstring")  casadi::getcopy(const A &a, std::map<
SharedObjectInternal *, SharedObject > &already_copied) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_ldl_solve(T1 *x, int nrhs, const int
*sp_l, const T1 *l, const T1 *d) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_qr_solve(T1 *x, int nrhs, int tr,
const int *sp_v, const T1 *v, const int *sp_r, const T1 *r, const T1 *beta,
const int *pinv, T1 *w) "

[INTERNAL] ";

%feature("docstring")  casadi::nlpsol_option_info(const std::string &name,
const std::string &op) "

Get documentation for a particular option.

";

%feature("docstring")  casadi::hash_value(T v) "

Hash value of an integer.

";

%feature("docstring")  casadi::casadi_polyval(const T1 *p, int n, T1 x) "

[INTERNAL]  Evaluate a polynomial.

";

%feature("docstring")  casadi::casadi_fill_int(int *x, int n, int alpha) "

[INTERNAL] ";

%feature("docstring")  casadi::dense_mul_nt(int n, int m, int l, const
double *A, const double *B, double *C) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_flip(int *corner, int ndim) "

[INTERNAL] ";

%feature("docstring")  casadi::simpleIntegrator(Function f, const
std::string &integrator="cvodes", const Dict &integrator_options=Dict()) "

Simplified wrapper for the Integrator class Constructs an integrator using
the same syntax as simpleRK and simpleIRK. The constructed function has
three inputs, corresponding to initial state (x0), parameter (p) and
integration time (h) and one output, corresponding to final state (xf).

Parameters:
-----------

f:  ODE function with two inputs (x and p) and one output (xdot)

N:  Number of integrator steps

order:  Order of interpolating polynomials

scheme:   Collocation scheme, as excepted by collocationPoints function.

";

%feature("docstring")  casadi::casadi_interpn_interpolate(int ndim, const
int *offset, const T1 *values, const T1 *alpha, const int *index, const int
*corner, T1 *coeff) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_copy(const T1 *x, int n, T1 *y) "

[INTERNAL]  COPY: y <-x.

";

%feature("docstring")  casadi::slicot_mb03vd(int n, int p, int ilo, int ihi,
double *a, int lda1, int lda2, double *tau, int ldtau, double *dwork=0) "

";

%feature("docstring")  casadi::nlpsol_default_in(int ind) "

Default input for an NLP solver.

";

%feature("docstring")  casadi::nlpsol_default_in() "

Default input for an NLP solver.

";

%feature("docstring")  casadi::einstein_process(const T &A, const T &B,
const T &C, const std::vector< int > &dim_a, const std::vector< int >
&dim_b, const std::vector< int > &dim_c, const std::vector< int > &a, const
std::vector< int > &b, const std::vector< int > &c, std::vector< int >
&iter_dims, std::vector< int > &strides_a, std::vector< int > &strides_b,
std::vector< int > &strides_c) "

";

%feature("docstring")  casadi::casadi_interpn_weights(int ndim, const T1
*grid, const int *offset, const T1 *x, T1 *alpha, int *index) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_interpn_weights(int ndim, const T1
*grid, const int *offset, const T1 *x, T1 *alpha, int *index, const int
*lookup_mode) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_norm_inf(int n, const T1 *x) "

[INTERNAL]  Inf-norm of a vector * Returns the largest element in absolute
value

";

%feature("docstring")  casadi::slicot_mb05nd(int n, double delta, const
double *a, int lda, double *ex, int ldex, double *exint, int ldexin, double
tol, int *iwork, double *dwork, int ldwork) "

";

%feature("docstring")  casadi::casadi_ldl_trs(const int *sp_l, const T1
*nz_l, T1 *x, int tr) "

[INTERNAL] ";

%feature("docstring")  casadi::has_rootfinder(const std::string &name) "

Check if a particular plugin is available.

";

%feature("docstring")  casadi::index_interp1d(const std::vector< double >
&x, double xq, bool equidistant=false) "

";

%feature("docstring")  casadi::conic_n_out() "

Get the number of QP solver outputs.

";

%feature("docstring")  casadi::doc_interpolant(const std::string &name) "

Get the documentation string for a plugin.

";

%feature("docstring")  casadi::hash_combine(std::size_t &seed, T v) "

Generate a hash value incrementally (function taken from boost)

";

%feature("docstring")  casadi::hash_combine(std::size_t &seed, const int *v,
int sz) "

Generate a hash value incrementally, array.

";

%feature("docstring")  casadi::hash_combine(std::size_t &seed, const
std::vector< int > &v) "

Generate a hash value incrementally (function taken from boost)

";

%feature("docstring")  casadi::casadi_project(const T1 *x, const int *sp_x,
T1 *y, const int *sp_y, T1 *w) "

[INTERNAL]  Sparse copy: y <- x, w work vector (length >= number of rows)

";

%feature("docstring")  casadi::matrixName< int >() "

Get typename.

";

%feature("docstring")  casadi::interpolant(const std::string &name, const
std::string &solver, const std::vector< std::vector< double > > &grid, const
std::vector< double > &values, const Dict &opts=Dict()) "

An interpolant function for lookup table data

Parameters:
-----------

name:  label for the resulting Function

solver:  name of the plugin

grid:  collection of 1D grids whose outer product defines the full N-D
rectangular grid

values:  flattened vector of all values for all gridpoints

Syntax 1D

::

  * # Python
  * xgrid = np.linspace(1,6,6)
  * V = [-1,-1,-2,-3,0,2]
  * LUT = casadi.interpolant(\"LUT\",\"bspline\",[xgrid],V)
  * print(LUT(2.5))
  * 



::

  * % Matlab
  * xgrid = 1:6;
  * V = [-1 -1 -2 -3 0 2];
  * LUT = casadi.interpolant('LUT','bspline',{xgrid},V);
  * LUT(2.5)
  * 



Syntax 2D

::

  * # Python
  * xgrid = np.linspace(-5,5,11)
  * ygrid = np.linspace(-4,4,9)
  * X,Y = np.meshgrid(xgrid,ygrid,indexing='ij')
  * R = np.sqrt(5*X**2 + Y**2)+ 1
  * data = np.sin(R)/R
  * data_flat = data.ravel(order='F')
  * LUT = casadi.interpolant('name','bspline',[xgrid,ygrid],data_flat)
  * print(LUT([0.5,1]))
  * \\\\enverbatim
  * \\\\verbatim
  * % Matlab
  * xgrid = -5:1:5;
  * ygrid = -4:1:4;
  * R = sqrt(5*X.^2 + Y.^2)+ 1;
  * V = sin(R)./(R);
  * LUT = interpolant('LUT','bspline',{xgrid, ygrid},V(:));
  * LUT([0.5 1])
  * 



General information
===================



List of plugins
===============



- bspline

- linear

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
Interpolant.doc(\"myextraplugin\")



--------------------------------------------------------------------------------

bspline
-------



>List of available options

+---------------+--------------+-------------------------------------------+
|      Id       |     Type     |                Description                |
+===============+==============+===========================================+
| degree        | OT_INTVECTOR | Sets, for each grid dimenion, the degree  |
|               |              | of the spline.                            |
+---------------+--------------+-------------------------------------------+
| linear_solver | OT_STRING    | Solver used for constructing the          |
|               |              | coefficient tensor.                       |
+---------------+--------------+-------------------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

linear
------



>List of available options

+-------------+-----------------+------------------------------------------+
|     Id      |      Type       |               Description                |
+=============+=================+==========================================+
| lookup_mode | OT_STRINGVECTOR | Sets, for each grid dimenion, the lookup |
|             |                 | algorithm used to find the correct       |
|             |                 | index. 'linear' uses a for-loop + break; |
|             |                 | 'exact' uses floored division (only for  |
|             |                 | uniform grids).                          |
+-------------+-----------------+------------------------------------------+

--------------------------------------------------------------------------------



Joel Andersson

";

%feature("docstring")  casadi::casadi_qr_nnz(const int *sp, int *pinv, int
*leftmost, const int *parent, int *nrow_ext, int *w) "

[INTERNAL] ";

%feature("docstring")  casadi::dplesol(const std::string &name, const
std::string &solver, const SpDict &qp, const Dict &opts=Dict()) "

Discrete periodic Lyapunov Equation solver Given matrices $A_k$ and
symmetric $V_k, k = 0..K-1$

::

  A_k in R^(n x n)
  V_k in R^n
  

provides all of $P_k$ that satisfy:

::

  P_0 = A_(K-1)*P_(K-1)*A_(K-1)' + V_k
  P_k+1 = A_k*P_k*A_k' + V_k  for k = 1..K-1
  



General information
===================



>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| const_dim        | OT_BOOL         | Assume constant  | casadi::Dple     |
|                  |                 | dimension of P   |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| enable_fd        | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation by   |                  |
|                  |                 | finite           |                  |
|                  |                 | differencing.    |                  |
|                  |                 | [default:        |                  |
|                  |                 | false]]          |                  |
+------------------+-----------------+------------------+------------------+
| enable_forward   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using forward    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_jacobian  | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobians of all |                  |
|                  |                 | differentiable   |                  |
|                  |                 | outputs with     |                  |
|                  |                 | respect to all   |                  |
|                  |                 | differentiable   |                  |
|                  |                 | inputs - if      |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_reverse   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | transposed       |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using reverse    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| eps_unstable     | OT_DOUBLE       | A margin for     | casadi::Dple     |
|                  |                 | unstability      |                  |
|                  |                 | detection        |                  |
+------------------+-----------------+------------------+------------------+
| error_unstable   | OT_BOOL         | Throw an         | casadi::Dple     |
|                  |                 | exception when   |                  |
|                  |                 | it is detected   |                  |
|                  |                 | that             |                  |
|                  |                 | Product(A_i,     |                  |
|                  |                 | i=N..1)has       |                  |
|                  |                 | eigenvalues      |                  |
|                  |                 | greater than     |                  |
|                  |                 | 1-eps_unstable   |                  |
+------------------+-----------------+------------------+------------------+
| fd_method        | OT_STRING       | Method for       | casadi::Function |
|                  |                 | finite           | Internal         |
|                  |                 | differencing     |                  |
|                  |                 | [default         |                  |
|                  |                 | 'central']       |                  |
+------------------+-----------------+------------------+------------------+
| fd_options       | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | finite           |                  |
|                  |                 | difference       |                  |
|                  |                 | instance         |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| pos_def          | OT_BOOL         | Assume P         | casadi::Dple     |
|                  |                 | positive         |                  |
|                  |                 | definite         |                  |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

>Input scheme: casadi::DpleInput (DPLE_NUM_IN = 2)

+-----------+-------+------------------------------------------------------+
| Full name | Short |                     Description                      |
+===========+=======+======================================================+
| DPLE_A    | a     | A matrices (horzcat when const_dim, diagcat          |
|           |       | otherwise) [a].                                      |
+-----------+-------+------------------------------------------------------+
| DPLE_V    | v     | V matrices (horzcat when const_dim, diagcat          |
|           |       | otherwise) [v].                                      |
+-----------+-------+------------------------------------------------------+

>Output scheme: casadi::DpleOutput (DPLE_NUM_OUT = 1)

+-----------+-------+------------------------------------------------------+
| Full name | Short |                     Description                      |
+===========+=======+======================================================+
| DPLE_P    | p     | Lyapunov matrix (horzcat when const_dim, diagcat     |
|           |       | otherwise) (Cholesky of P if pos_def) [p].           |
+-----------+-------+------------------------------------------------------+

List of plugins
===============



- slicot

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
Dple.doc(\"myextraplugin\")



--------------------------------------------------------------------------------

slicot
------



An efficient solver for Discrete Periodic Lyapunov Equations using SLICOT

Uses Periodic Schur Decomposition ('psd') and does not assume positive
definiteness. Based on Periodic Lyapunov equations: some applications and
new algorithms. Int. J. Control, vol. 67, pp. 69-87, 1997.

Overview of the method: J. Gillis Practical Methods for Approximate Robust
Periodic Optimal Control ofNonlinear Mechanical Systems, PhD Thesis,
KULeuven, 2015

>List of available options

+-----------------------+-----------+--------------------------------------+
|          Id           |   Type    |             Description              |
+=======================+===========+======================================+
| linear_solver         | OT_STRING | User-defined linear solver class.    |
|                       |           | Needed for sensitivities.            |
+-----------------------+-----------+--------------------------------------+
| linear_solver_options | OT_DICT   | Options to be passed to the linear   |
|                       |           | solver.                              |
+-----------------------+-----------+--------------------------------------+
| psd_num_zero          | OT_DOUBLE | Numerical zero used in Periodic      |
|                       |           | Schur decomposition with slicot.This |
|                       |           | option is needed when your systems   |
|                       |           | has Floquet multiplierszero or close |
|                       |           | to zero                              |
+-----------------------+-----------+--------------------------------------+

--------------------------------------------------------------------------------



Joris Gillis

";

%feature("docstring")  casadi::dplesol(const MX &A, const MX &V, const
std::string &solver, const Dict &opts=Dict()) "

";

%feature("docstring")  casadi::dplesol(const MXVector &A, const MXVector &V,
const std::string &solver, const Dict &opts=Dict()) "

";

%feature("docstring")  casadi::dplesol(const DMVector &A, const DMVector &V,
const std::string &solver, const Dict &opts=Dict()) "

";

%feature("docstring")  casadi::is_slice(const IM &x, bool ind1=false) "

Is the IM a Slice.

";

%feature("docstring")  casadi::is_slice(const std::vector< int > &v, bool
ind1=false) "

Check if an index vector can be represented more efficiently as a slice.

";

%feature("docstring")  casadi::is_decreasing(const std::vector< T > &v) "

Check if the vector is strictly decreasing.

";

%feature("docstring")  casadi::casadi_qr(const int *sp_a, const T1 *nz_a,
int *iw, T1 *x, const int *sp_v, T1 *nz_v, const int *sp_r, T1 *nz_r, T1
*beta, const int *leftmost, const int *parent, const int *pinv) "

[INTERNAL] ";

%feature("docstring")  casadi::doc_integrator(const std::string &name) "

Get the documentation string for a plugin.

";

%feature("docstring")  casadi::casadi_dot(int n, const T1 *x, const T1 *y) "

[INTERNAL]  Inner product.

";

%feature("docstring")  casadi::message_prefix(std::ostream &stream) "

";

%feature("docstring")  casadi::casadi_de_boor(T1 x, const T1 *knots, int
n_knots, int degree, T1 *boor) "

[INTERNAL] ";

%feature("docstring")  casadi::has_conic(const std::string &name) "

Check if a particular plugin is available.

";

%feature("docstring")  casadi::load_conic(const std::string &name) "

Explicitly load a plugin dynamically.

";

%feature("docstring")  casadi::casadi_smoothing_diff(T1 **yk, T1 *y0, T1 *J,
T1 h, int n_y, const casadi_finite_diff_mem< T1 > *m) "

[INTERNAL] ";

%feature("docstring")  casadi::combine(const Dict &first, const Dict
&second) "

[INTERNAL]  Combine two dictionaries, giving priority to first one.

";

%feature("docstring")  casadi::dple_n_out() "

Get the number of QP solver outputs.

";

%feature("docstring")  casadi::casadi_low(T1 x, const double *grid, int ng,
int lookup_mode) "

[INTERNAL] ";

%feature("docstring")  casadi::load_rootfinder(const std::string &name) "

Explicitly load a plugin dynamically.

";

%feature("docstring")  casadi::casadi_mv(const T1 *x, const int *sp_x, const
T1 *y, T1 *z, int tr) "

[INTERNAL]  Sparse matrix-vector multiplication: z <- z + x*y.

";

%feature("docstring")  casadi::casadi_norm_2(int n, const T1 *x) "

[INTERNAL]  NORM_2: ||x||_2 -> return.

";

%feature("docstring")  casadi::dense_kron_stride(int n, int m, const double
*A, const double *B, double *C, int strideA, int strideB, int strideC) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_qr_trs(const int *sp_r, const T1
*nz_r, T1 *x, int tr) "

[INTERNAL] ";

%feature("docstring") casadi::_which_depends "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_bilin(const T1 *A, const int *sp_A,
const T1 *x, const T1 *y) "

[INTERNAL]  Calculates dot(x, mul(A, y))

";

%feature("docstring")  casadi::casadi_trans(const T1 *x, const int *sp_x, T1
*y, const int *sp_y, int *tmp) "

[INTERNAL]  TRANS: y <- trans(x) , w work vector (length >= rows x)

";

%feature("docstring")  casadi::casadi_nd_boor_eval(T1 *ret, int n_dims,
const T1 *knots, const int *offset, const int *degree, const int *strides,
const T1 *c, int m, const T1 *x, const int *lookup_mode, int reverse, int
*iw, T1 *w) "

[INTERNAL] ";

%feature("docstring")  casadi::nlpsol_out() "

Get NLP solver output scheme of NLP solvers.

>Output scheme: casadi::NlpsolOutput (NLPSOL_NUM_OUT = 6)

+--------------+-------+---------------------------------------------------+
|  Full name   | Short |                    Description                    |
+==============+=======+===================================================+
| NLPSOL_X     | x     | Decision variables at the optimal solution (nx x  |
|              |       | 1)                                                |
+--------------+-------+---------------------------------------------------+
| NLPSOL_F     | f     | Cost function value at the optimal solution (1 x  |
|              |       | 1)                                                |
+--------------+-------+---------------------------------------------------+
| NLPSOL_G     | g     | Constraints function at the optimal solution (ng  |
|              |       | x 1)                                              |
+--------------+-------+---------------------------------------------------+
| NLPSOL_LAM_X | lam_x | Lagrange multipliers for bounds on X at the       |
|              |       | solution (nx x 1)                                 |
+--------------+-------+---------------------------------------------------+
| NLPSOL_LAM_G | lam_g | Lagrange multipliers for bounds on G at the       |
|              |       | solution (ng x 1)                                 |
+--------------+-------+---------------------------------------------------+
| NLPSOL_LAM_P | lam_p | Lagrange multipliers for bounds on P at the       |
|              |       | solution (np x 1)                                 |
+--------------+-------+---------------------------------------------------+

";

%feature("docstring")  casadi::nlpsol_out(int ind) "

Get output scheme name by index.

>Output scheme: casadi::NlpsolOutput (NLPSOL_NUM_OUT = 6)

+--------------+-------+---------------------------------------------------+
|  Full name   | Short |                    Description                    |
+==============+=======+===================================================+
| NLPSOL_X     | x     | Decision variables at the optimal solution (nx x  |
|              |       | 1)                                                |
+--------------+-------+---------------------------------------------------+
| NLPSOL_F     | f     | Cost function value at the optimal solution (1 x  |
|              |       | 1)                                                |
+--------------+-------+---------------------------------------------------+
| NLPSOL_G     | g     | Constraints function at the optimal solution (ng  |
|              |       | x 1)                                              |
+--------------+-------+---------------------------------------------------+
| NLPSOL_LAM_X | lam_x | Lagrange multipliers for bounds on X at the       |
|              |       | solution (nx x 1)                                 |
+--------------+-------+---------------------------------------------------+
| NLPSOL_LAM_G | lam_g | Lagrange multipliers for bounds on G at the       |
|              |       | solution (ng x 1)                                 |
+--------------+-------+---------------------------------------------------+
| NLPSOL_LAM_P | lam_p | Lagrange multipliers for bounds on P at the       |
|              |       | solution (np x 1)                                 |
+--------------+-------+---------------------------------------------------+

";

%feature("docstring")  casadi::is_strictly_monotone(const std::vector< T >
&v) "

Check if the vector is strictly monotone.

";

%feature("docstring")  casadi::has_linsol(const std::string &name) "

Check if a particular plugin is available.

";

%feature("docstring")  casadi::simpleRK(Function f, int N=10, int order=4) "

Construct an explicit Runge-Kutta integrator The constructed function has
three inputs, corresponding to initial state (x0), parameter (p) and
integration time (h) and one output, corresponding to final state (xf).

Parameters:
-----------

f:  ODE function with two inputs (x and p) and one output (xdot)

N:  Number of integrator steps

order:  Order of interpolating polynomials

";

%feature("docstring")  casadi::casadi_house(T1 *x, T1 *beta, int n) "

[INTERNAL] ";

%feature("docstring")  casadi::nlpsol_in() "

Get input scheme of NLP solvers.

>Input scheme: casadi::NlpsolInput (NLPSOL_NUM_IN = 8)

+---------------+--------+-------------------------------------------------+
|   Full name   | Short  |                   Description                   |
+===============+========+=================================================+
| NLPSOL_X0     | x0     | Decision variables, initial guess (nx x 1)      |
+---------------+--------+-------------------------------------------------+
| NLPSOL_P      | p      | Value of fixed parameters (np x 1)              |
+---------------+--------+-------------------------------------------------+
| NLPSOL_LBX    | lbx    | Decision variables lower bound (nx x 1),        |
|               |        | default -inf.                                   |
+---------------+--------+-------------------------------------------------+
| NLPSOL_UBX    | ubx    | Decision variables upper bound (nx x 1),        |
|               |        | default +inf.                                   |
+---------------+--------+-------------------------------------------------+
| NLPSOL_LBG    | lbg    | Constraints lower bound (ng x 1), default -inf. |
+---------------+--------+-------------------------------------------------+
| NLPSOL_UBG    | ubg    | Constraints upper bound (ng x 1), default +inf. |
+---------------+--------+-------------------------------------------------+
| NLPSOL_LAM_X0 | lam_x0 | Lagrange multipliers for bounds on X, initial   |
|               |        | guess (nx x 1)                                  |
+---------------+--------+-------------------------------------------------+
| NLPSOL_LAM_G0 | lam_g0 | Lagrange multipliers for bounds on G, initial   |
|               |        | guess (ng x 1)                                  |
+---------------+--------+-------------------------------------------------+

";

%feature("docstring")  casadi::nlpsol_in(int ind) "

Get NLP solver input scheme name by index.

>Input scheme: casadi::NlpsolInput (NLPSOL_NUM_IN = 8)

+---------------+--------+-------------------------------------------------+
|   Full name   | Short  |                   Description                   |
+===============+========+=================================================+
| NLPSOL_X0     | x0     | Decision variables, initial guess (nx x 1)      |
+---------------+--------+-------------------------------------------------+
| NLPSOL_P      | p      | Value of fixed parameters (np x 1)              |
+---------------+--------+-------------------------------------------------+
| NLPSOL_LBX    | lbx    | Decision variables lower bound (nx x 1),        |
|               |        | default -inf.                                   |
+---------------+--------+-------------------------------------------------+
| NLPSOL_UBX    | ubx    | Decision variables upper bound (nx x 1),        |
|               |        | default +inf.                                   |
+---------------+--------+-------------------------------------------------+
| NLPSOL_LBG    | lbg    | Constraints lower bound (ng x 1), default -inf. |
+---------------+--------+-------------------------------------------------+
| NLPSOL_UBG    | ubg    | Constraints upper bound (ng x 1), default +inf. |
+---------------+--------+-------------------------------------------------+
| NLPSOL_LAM_X0 | lam_x0 | Lagrange multipliers for bounds on X, initial   |
|               |        | guess (nx x 1)                                  |
+---------------+--------+-------------------------------------------------+
| NLPSOL_LAM_G0 | lam_g0 | Lagrange multipliers for bounds on G, initial   |
|               |        | guess (ng x 1)                                  |
+---------------+--------+-------------------------------------------------+

";

%feature("docstring")  casadi::matrixName< SXElem >() "

[INTERNAL] ";

%feature("docstring")  casadi::conic_n_in() "

Get the number of QP solver inputs.

";

%feature("docstring")  casadi::qpsol(const std::string &name, const
std::string &solver, const SXDict &qp, const Dict &opts=Dict()) "

";

%feature("docstring")  casadi::qpsol(const std::string &name, const
std::string &solver, const MXDict &qp, const Dict &opts=Dict()) "

";

%feature("docstring")  casadi::doc_rootfinder(const std::string &name) "

Get the documentation string for a plugin.

";

%feature("docstring")  casadi::casadi_leaf(int i, int j, const int *first,
int *maxfirst, int *prevleaf, int *ancestor, int *jleaf) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_postorder(const int *parent, int n,
int *post, int *w) "

[INTERNAL] ";

%feature("docstring")  casadi::dple_in() "

Get input scheme of DPLE solvers.

";

%feature("docstring")  casadi::dple_in(int ind) "

Get DPLE input scheme name by index.

";

%feature("docstring")  casadi::dense_copy_t_stride(int n, int m, const
double *A, double *B, int strideA, int strideB) "

[INTERNAL] ";

%feature("docstring")  casadi::dense_mul_nn2(int n, int m, int l, const
double *A, const double *B, double *C) "

[INTERNAL] ";

%feature("docstring")  casadi::nlpsol(const std::string &name, const
std::string &solver, const SXDict &nlp, const Dict &opts=Dict()) "

Create an NLP solver Creates a solver for the following parametric nonlinear
program (NLP):

::

  min          F(x, p)
  x
  
  subject to
  LBX <=   x    <= UBX
  LBG <= G(x, p) <= UBG
  p  == P
  
  nx: number of decision variables
  ng: number of constraints
  np: number of parameters



General information
===================



>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| calc_multipliers | OT_BOOL         | Calculate        | casadi::Nlpsol   |
|                  |                 | Lagrange         |                  |
|                  |                 | multipliers in   |                  |
|                  |                 | the Nlpsol base  |                  |
|                  |                 | class            |                  |
+------------------+-----------------+------------------+------------------+
| common_options   | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | auto-generated   | nction           |
|                  |                 | functions        |                  |
+------------------+-----------------+------------------+------------------+
| discrete         | OT_BOOLVECTOR   | Indicates which  | casadi::Nlpsol   |
|                  |                 | of the variables |                  |
|                  |                 | are discrete,    |                  |
|                  |                 | i.e. integer-    |                  |
|                  |                 | valued           |                  |
+------------------+-----------------+------------------+------------------+
| eval_errors_fata | OT_BOOL         | When errors      | casadi::Nlpsol   |
| l                |                 | occur during     |                  |
|                  |                 | evaluation of    |                  |
|                  |                 | f,g,...,stop the |                  |
|                  |                 | iterations       |                  |
+------------------+-----------------+------------------+------------------+
| expand           | OT_BOOL         | Replace MX with  | casadi::Nlpsol   |
|                  |                 | SX expressions   |                  |
|                  |                 | in problem       |                  |
|                  |                 | formulation      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| ignore_check_vec | OT_BOOL         | If set to true,  | casadi::Nlpsol   |
|                  |                 | the input shape  |                  |
|                  |                 | of F will not be |                  |
|                  |                 | checked.         |                  |
+------------------+-----------------+------------------+------------------+
| iteration_callba | OT_FUNCTION     | A function that  | casadi::Nlpsol   |
| ck               |                 | will be called   |                  |
|                  |                 | at each          |                  |
|                  |                 | iteration with   |                  |
|                  |                 | the solver as    |                  |
|                  |                 | input. Check     |                  |
|                  |                 | documentation of |                  |
|                  |                 | Callback .       |                  |
+------------------+-----------------+------------------+------------------+
| iteration_callba | OT_BOOL         | If set to true,  | casadi::Nlpsol   |
| ck_ignore_errors |                 | errors thrown by |                  |
|                  |                 | iteration_callba |                  |
|                  |                 | ck will be       |                  |
|                  |                 | ignored.         |                  |
+------------------+-----------------+------------------+------------------+
| iteration_callba | OT_INT          | Only call the    | casadi::Nlpsol   |
| ck_step          |                 | callback         |                  |
|                  |                 | function every   |                  |
|                  |                 | few iterations.  |                  |
+------------------+-----------------+------------------+------------------+
| monitor          | OT_STRINGVECTOR | Set of user      | casadi::OracleFu |
|                  |                 | problem          | nction           |
|                  |                 | functions to be  |                  |
|                  |                 | monitored        |                  |
+------------------+-----------------+------------------+------------------+
| oracle_options   | OT_DICT         | Options to be    | casadi::Nlpsol   |
|                  |                 | passed to the    |                  |
|                  |                 | oracle function  |                  |
+------------------+-----------------+------------------+------------------+
| specific_options | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | specific auto-   | nction           |
|                  |                 | generated        |                  |
|                  |                 | functions,       |                  |
|                  |                 | overwriting the  |                  |
|                  |                 | defaults from    |                  |
|                  |                 | common_options.  |                  |
|                  |                 | Nested           |                  |
|                  |                 | dictionary.      |                  |
+------------------+-----------------+------------------+------------------+
| verbose_init     | OT_BOOL         | Print out timing | casadi::Nlpsol   |
|                  |                 | information      |                  |
|                  |                 | about the        |                  |
|                  |                 | different stages |                  |
|                  |                 | of               |                  |
|                  |                 | initialization   |                  |
+------------------+-----------------+------------------+------------------+
| warn_initial_bou | OT_BOOL         | Warn if the      | casadi::Nlpsol   |
| nds              |                 | initial guess    |                  |
|                  |                 | does not satisfy |                  |
|                  |                 | LBX and UBX      |                  |
+------------------+-----------------+------------------+------------------+

>Input scheme: casadi::NlpsolInput (NLPSOL_NUM_IN = 8)

+---------------+--------+-------------------------------------------------+
|   Full name   | Short  |                   Description                   |
+===============+========+=================================================+
| NLPSOL_X0     | x0     | Decision variables, initial guess (nx x 1)      |
+---------------+--------+-------------------------------------------------+
| NLPSOL_P      | p      | Value of fixed parameters (np x 1)              |
+---------------+--------+-------------------------------------------------+
| NLPSOL_LBX    | lbx    | Decision variables lower bound (nx x 1),        |
|               |        | default -inf.                                   |
+---------------+--------+-------------------------------------------------+
| NLPSOL_UBX    | ubx    | Decision variables upper bound (nx x 1),        |
|               |        | default +inf.                                   |
+---------------+--------+-------------------------------------------------+
| NLPSOL_LBG    | lbg    | Constraints lower bound (ng x 1), default -inf. |
+---------------+--------+-------------------------------------------------+
| NLPSOL_UBG    | ubg    | Constraints upper bound (ng x 1), default +inf. |
+---------------+--------+-------------------------------------------------+
| NLPSOL_LAM_X0 | lam_x0 | Lagrange multipliers for bounds on X, initial   |
|               |        | guess (nx x 1)                                  |
+---------------+--------+-------------------------------------------------+
| NLPSOL_LAM_G0 | lam_g0 | Lagrange multipliers for bounds on G, initial   |
|               |        | guess (ng x 1)                                  |
+---------------+--------+-------------------------------------------------+

>Output scheme: casadi::NlpsolOutput (NLPSOL_NUM_OUT = 6)

+--------------+-------+---------------------------------------------------+
|  Full name   | Short |                    Description                    |
+==============+=======+===================================================+
| NLPSOL_X     | x     | Decision variables at the optimal solution (nx x  |
|              |       | 1)                                                |
+--------------+-------+---------------------------------------------------+
| NLPSOL_F     | f     | Cost function value at the optimal solution (1 x  |
|              |       | 1)                                                |
+--------------+-------+---------------------------------------------------+
| NLPSOL_G     | g     | Constraints function at the optimal solution (ng  |
|              |       | x 1)                                              |
+--------------+-------+---------------------------------------------------+
| NLPSOL_LAM_X | lam_x | Lagrange multipliers for bounds on X at the       |
|              |       | solution (nx x 1)                                 |
+--------------+-------+---------------------------------------------------+
| NLPSOL_LAM_G | lam_g | Lagrange multipliers for bounds on G at the       |
|              |       | solution (ng x 1)                                 |
+--------------+-------+---------------------------------------------------+
| NLPSOL_LAM_P | lam_p | Lagrange multipliers for bounds on P at the       |
|              |       | solution (np x 1)                                 |
+--------------+-------+---------------------------------------------------+

List of plugins
===============



- AmplInterface

- blocksqp

- bonmin

- ipopt

- knitro

- snopt

- worhp

- scpgen

- sqpmethod

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
Nlpsol.doc(\"myextraplugin\")



--------------------------------------------------------------------------------

AmplInterface
-------------



>List of available options

+--------+-----------+--------------------+
|   Id   |   Type    |    Description     |
+========+===========+====================+
| solver | OT_STRING | AMPL solver binary |
+--------+-----------+--------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

blocksqp
--------



This is a modified version of blockSQP by Janka et al.

Dennis Janka, Joel Andersson

>List of available options

+----------------------------+-----------+---------------------------------+
|             Id             |   Type    |           Description           |
+============================+===========+=================================+
| block_hess                 | OT_INT    | Blockwise Hessian               |
|                            |           | approximation?                  |
+----------------------------+-----------+---------------------------------+
| col_eps                    | OT_DOUBLE | Epsilon for COL scaling         |
|                            |           | strategy                        |
+----------------------------+-----------+---------------------------------+
| col_tau1                   | OT_DOUBLE | tau1 for COL scaling strategy   |
+----------------------------+-----------+---------------------------------+
| col_tau2                   | OT_DOUBLE | tau2 for COL scaling strategy   |
+----------------------------+-----------+---------------------------------+
| conv_strategy              | OT_INT    | Convexification strategy        |
+----------------------------+-----------+---------------------------------+
| delta                      | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| delta_h0                   | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| eps                        | OT_DOUBLE | Values smaller than this are    |
|                            |           | regarded as numerically zero    |
+----------------------------+-----------+---------------------------------+
| eta                        | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| fallback_scaling           | OT_INT    | If indefinite update is used,   |
|                            |           | the type of fallback strategy   |
+----------------------------+-----------+---------------------------------+
| fallback_update            | OT_INT    | If indefinite update is used,   |
|                            |           | the type of fallback strategy   |
+----------------------------+-----------+---------------------------------+
| gamma_f                    | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| gamma_theta                | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| globalization              | OT_BOOL   | Enable globalization            |
+----------------------------+-----------+---------------------------------+
| hess_damp                  | OT_INT    | Activate Powell damping for     |
|                            |           | BFGS                            |
+----------------------------+-----------+---------------------------------+
| hess_damp_fac              | OT_DOUBLE | Damping factor for BFGS Powell  |
|                            |           | modification                    |
+----------------------------+-----------+---------------------------------+
| hess_lim_mem               | OT_INT    | Full or limited memory          |
+----------------------------+-----------+---------------------------------+
| hess_memsize               | OT_INT    | Memory size for L-BFGS updates  |
+----------------------------+-----------+---------------------------------+
| hess_scaling               | OT_INT    | Scaling strategy for Hessian    |
|                            |           | approximation                   |
+----------------------------+-----------+---------------------------------+
| hess_update                | OT_INT    | Type of Hessian approximation   |
+----------------------------+-----------+---------------------------------+
| ini_hess_diag              | OT_DOUBLE | Initial Hessian guess: diagonal |
|                            |           | matrix diag(iniHessDiag)        |
+----------------------------+-----------+---------------------------------+
| kappa_f                    | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| kappa_minus                | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| kappa_plus                 | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| kappa_plus_max             | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| kappa_soc                  | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| linsol                     | OT_STRING | The linear solver to be used by |
|                            |           | the QP method                   |
+----------------------------+-----------+---------------------------------+
| max_consec_reduced_steps   | OT_INT    | Maximum number of consecutive   |
|                            |           | reduced steps                   |
+----------------------------+-----------+---------------------------------+
| max_consec_skipped_updates | OT_INT    | Maximum number of consecutive   |
|                            |           | skipped updates                 |
+----------------------------+-----------+---------------------------------+
| max_conv_qp                | OT_INT    | How many additional QPs may be  |
|                            |           | solved for convexification per  |
|                            |           | iteration?                      |
+----------------------------+-----------+---------------------------------+
| max_it_qp                  | OT_INT    | Maximum number of QP iterations |
|                            |           | per SQP iteration               |
+----------------------------+-----------+---------------------------------+
| max_iter                   | OT_INT    | Maximum number of SQP           |
|                            |           | iterations                      |
+----------------------------+-----------+---------------------------------+
| max_line_search            | OT_INT    | Maximum number of steps in line |
|                            |           | search                          |
+----------------------------+-----------+---------------------------------+
| max_soc_iter               | OT_INT    | Maximum number of SOC line      |
|                            |           | search iterations               |
+----------------------------+-----------+---------------------------------+
| max_time_qp                | OT_DOUBLE | Maximum number of time in       |
|                            |           | seconds per QP solve per SQP    |
|                            |           | iteration                       |
+----------------------------+-----------+---------------------------------+
| nlinfeastol                | OT_DOUBLE | Nonlinear feasibility tolerance |
+----------------------------+-----------+---------------------------------+
| obj_lo                     | OT_DOUBLE | Lower bound on objective        |
|                            |           | function [-inf]                 |
+----------------------------+-----------+---------------------------------+
| obj_up                     | OT_DOUBLE | Upper bound on objective        |
|                            |           | function [inf]                  |
+----------------------------+-----------+---------------------------------+
| opttol                     | OT_DOUBLE | Optimality tolerance            |
+----------------------------+-----------+---------------------------------+
| print_header               | OT_BOOL   | Print solver header at startup  |
+----------------------------+-----------+---------------------------------+
| print_iteration            | OT_BOOL   | Print SQP iterations            |
+----------------------------+-----------+---------------------------------+
| qpsol                      | OT_STRING | The QP solver to be used by the |
|                            |           | SQP method                      |
+----------------------------+-----------+---------------------------------+
| qpsol_options              | OT_DICT   | Options to be passed to the QP  |
|                            |           | solver                          |
+----------------------------+-----------+---------------------------------+
| restore_feas               | OT_BOOL   | Use feasibility restoration     |
|                            |           | phase                           |
+----------------------------+-----------+---------------------------------+
| s_f                        | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| s_theta                    | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| schur                      | OT_BOOL   | Use qpOASES Schur compliment    |
|                            |           | approach                        |
+----------------------------+-----------+---------------------------------+
| skip_first_globalization   | OT_BOOL   | No globalization strategy in    |
|                            |           | first iteration                 |
+----------------------------+-----------+---------------------------------+
| theta_max                  | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| theta_min                  | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| warmstart                  | OT_BOOL   | Use warmstarting                |
+----------------------------+-----------+---------------------------------+
| which_second_derv          | OT_INT    | For which block should second   |
|                            |           | derivatives be provided by the  |
|                            |           | user                            |
+----------------------------+-----------+---------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

bonmin
------



When in warmstart mode, output NLPSOL_LAM_X may be used as input

NOTE: Even when max_iter == 0, it is not guaranteed that input(NLPSOL_X0) ==
output(NLPSOL_X). Indeed if bounds on X or constraints are unmet, they will
differ.

For a good tutorial on BONMIN,
seehttp://drops.dagstuhl.de/volltexte/2009/2089/pdf/09061.WaechterAndreas.Paper.2089.pdf

A good resource about the algorithms in BONMIN is: Wachter and L. T.
Biegler, On the Implementation of an Interior-Point Filter Line-Search
Algorithm for Large-Scale Nonlinear Programming, Mathematical Programming
106(1), pp. 25-57, 2006 (As Research Report RC 23149, IBM T. J. Watson
Research Center, Yorktown, USA

Caveats: with default options, multipliers for the decision variables are
wrong for equality constraints. Change the 'fixed_variable_treatment' to
'make_constraint' or 'relax_bounds' to obtain correct results.

>List of available options

+--------------------------+-------------+---------------------------------+
|            Id            |    Type     |           Description           |
+==========================+=============+=================================+
| bonmin                   | OT_DICT     | Options to be passed to BONMIN  |
+--------------------------+-------------+---------------------------------+
| con_integer_md           | OT_DICT     | Integer metadata (a dictionary  |
|                          |             | with lists of integers) about   |
|                          |             | constraints to be passed to     |
|                          |             | BONMIN                          |
+--------------------------+-------------+---------------------------------+
| con_numeric_md           | OT_DICT     | Numeric metadata (a dictionary  |
|                          |             | with lists of reals) about      |
|                          |             | constraints to be passed to     |
|                          |             | BONMIN                          |
+--------------------------+-------------+---------------------------------+
| con_string_md            | OT_DICT     | String metadata (a dictionary   |
|                          |             | with lists of strings) about    |
|                          |             | constraints to be passed to     |
|                          |             | BONMIN                          |
+--------------------------+-------------+---------------------------------+
| grad_f                   | OT_FUNCTION | Function for calculating the    |
|                          |             | gradient of the objective       |
|                          |             | (column, autogenerated by       |
|                          |             | default)                        |
+--------------------------+-------------+---------------------------------+
| grad_f_options           | OT_DICT     | Options for the autogenerated   |
|                          |             | gradient of the objective.      |
+--------------------------+-------------+---------------------------------+
| hess_lag                 | OT_FUNCTION | Function for calculating the    |
|                          |             | Hessian of the Lagrangian       |
|                          |             | (autogenerated by default)      |
+--------------------------+-------------+---------------------------------+
| hess_lag_options         | OT_DICT     | Options for the autogenerated   |
|                          |             | Hessian of the Lagrangian.      |
+--------------------------+-------------+---------------------------------+
| jac_g                    | OT_FUNCTION | Function for calculating the    |
|                          |             | Jacobian of the constraints     |
|                          |             | (autogenerated by default)      |
+--------------------------+-------------+---------------------------------+
| jac_g_options            | OT_DICT     | Options for the autogenerated   |
|                          |             | Jacobian of the constraints.    |
+--------------------------+-------------+---------------------------------+
| pass_nonlinear_variables | OT_BOOL     | Pass list of variables entering |
|                          |             | nonlinearly to BONMIN           |
+--------------------------+-------------+---------------------------------+
| var_integer_md           | OT_DICT     | Integer metadata (a dictionary  |
|                          |             | with lists of integers) about   |
|                          |             | variables to be passed to       |
|                          |             | BONMIN                          |
+--------------------------+-------------+---------------------------------+
| var_numeric_md           | OT_DICT     | Numeric metadata (a dictionary  |
|                          |             | with lists of reals) about      |
|                          |             | variables to be passed to       |
|                          |             | BONMIN                          |
+--------------------------+-------------+---------------------------------+
| var_string_md            | OT_DICT     | String metadata (a dictionary   |
|                          |             | with lists of strings) about    |
|                          |             | variables to be passed to       |
|                          |             | BONMIN                          |
+--------------------------+-------------+---------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

ipopt
-----



When in warmstart mode, output NLPSOL_LAM_X may be used as input

NOTE: Even when max_iter == 0, it is not guaranteed that input(NLPSOL_X0) ==
output(NLPSOL_X). Indeed if bounds on X or constraints are unmet, they will
differ.

For a good tutorial on IPOPT,
seehttp://drops.dagstuhl.de/volltexte/2009/2089/pdf/09061.WaechterAndreas.Paper.2089.pdf

A good resource about the algorithms in IPOPT is: Wachter and L. T. Biegler,
On the Implementation of an Interior-Point Filter Line-Search Algorithm for
Large-Scale Nonlinear Programming, Mathematical Programming 106(1), pp.
25-57, 2006 (As Research Report RC 23149, IBM T. J. Watson Research Center,
Yorktown, USA

Caveats: with default options, multipliers for the decision variables are
wrong for equality constraints. Change the 'fixed_variable_treatment' to
'make_constraint' or 'relax_bounds' to obtain correct results.

>List of available options

+--------------------------+-------------+---------------------------------+
|            Id            |    Type     |           Description           |
+==========================+=============+=================================+
| con_integer_md           | OT_DICT     | Integer metadata (a dictionary  |
|                          |             | with lists of integers) about   |
|                          |             | constraints to be passed to     |
|                          |             | IPOPT                           |
+--------------------------+-------------+---------------------------------+
| con_numeric_md           | OT_DICT     | Numeric metadata (a dictionary  |
|                          |             | with lists of reals) about      |
|                          |             | constraints to be passed to     |
|                          |             | IPOPT                           |
+--------------------------+-------------+---------------------------------+
| con_string_md            | OT_DICT     | String metadata (a dictionary   |
|                          |             | with lists of strings) about    |
|                          |             | constraints to be passed to     |
|                          |             | IPOPT                           |
+--------------------------+-------------+---------------------------------+
| grad_f                   | OT_FUNCTION | Function for calculating the    |
|                          |             | gradient of the objective       |
|                          |             | (column, autogenerated by       |
|                          |             | default)                        |
+--------------------------+-------------+---------------------------------+
| hess_lag                 | OT_FUNCTION | Function for calculating the    |
|                          |             | Hessian of the Lagrangian       |
|                          |             | (autogenerated by default)      |
+--------------------------+-------------+---------------------------------+
| ipopt                    | OT_DICT     | Options to be passed to IPOPT   |
+--------------------------+-------------+---------------------------------+
| jac_g                    | OT_FUNCTION | Function for calculating the    |
|                          |             | Jacobian of the constraints     |
|                          |             | (autogenerated by default)      |
+--------------------------+-------------+---------------------------------+
| pass_nonlinear_variables | OT_BOOL     | Pass list of variables entering |
|                          |             | nonlinearly to IPOPT            |
+--------------------------+-------------+---------------------------------+
| var_integer_md           | OT_DICT     | Integer metadata (a dictionary  |
|                          |             | with lists of integers) about   |
|                          |             | variables to be passed to IPOPT |
+--------------------------+-------------+---------------------------------+
| var_numeric_md           | OT_DICT     | Numeric metadata (a dictionary  |
|                          |             | with lists of reals) about      |
|                          |             | variables to be passed to IPOPT |
+--------------------------+-------------+---------------------------------+
| var_string_md            | OT_DICT     | String metadata (a dictionary   |
|                          |             | with lists of strings) about    |
|                          |             | variables to be passed to IPOPT |
+--------------------------+-------------+---------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

knitro
------



KNITRO interface

>List of available options

+---------+--------------+--------------------------------+
|   Id    |     Type     |          Description           |
+=========+==============+================================+
| contype | OT_INTVECTOR | Type of constraint             |
+---------+--------------+--------------------------------+
| knitro  | OT_DICT      | Options to be passed to KNITRO |
+---------+--------------+--------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

snopt
-----



SNOPT interface

>List of available options

+-------+-----------+---------------------------------------------+
|  Id   |   Type    |                 Description                 |
+=======+===========+=============================================+
| snopt | OT_DICT   | Options to be passed to SNOPT               |
+-------+-----------+---------------------------------------------+
| start | OT_STRING | Warm-start options for Worhp: cold|warm|hot |
+-------+-----------+---------------------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

worhp
-----



WORHP interface

Designed for Worhp 1.10

>List of available options

+-------+---------+-------------------------------+
|  Id   |  Type   |          Description          |
+=======+=========+===============================+
| worhp | OT_DICT | Options to be passed to WORHP |
+-------+---------+-------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

scpgen
------



A structure-exploiting sequential quadratic programming (to be come
sequential convex programming) method for nonlinear programming.

>List of available options

+-----------------------+-----------------+--------------------------------+
|          Id           |      Type       |          Description           |
+=======================+=================+================================+
| beta                  | OT_DOUBLE       | Line-search parameter,         |
|                       |                 | restoration factor of stepsize |
+-----------------------+-----------------+--------------------------------+
| c1                    | OT_DOUBLE       | Armijo condition, coefficient  |
|                       |                 | of decrease in merit           |
+-----------------------+-----------------+--------------------------------+
| codegen               | OT_BOOL         | C-code generation              |
+-----------------------+-----------------+--------------------------------+
| hessian_approximation | OT_STRING       | gauss-newton|exact             |
+-----------------------+-----------------+--------------------------------+
| lbfgs_memory          | OT_INT          | Size of L-BFGS memory.         |
+-----------------------+-----------------+--------------------------------+
| max_iter              | OT_INT          | Maximum number of SQP          |
|                       |                 | iterations                     |
+-----------------------+-----------------+--------------------------------+
| max_iter_ls           | OT_INT          | Maximum number of linesearch   |
|                       |                 | iterations                     |
+-----------------------+-----------------+--------------------------------+
| merit_memsize         | OT_INT          | Size of memory to store        |
|                       |                 | history of merit function      |
|                       |                 | values                         |
+-----------------------+-----------------+--------------------------------+
| merit_start           | OT_DOUBLE       | Lower bound for the merit      |
|                       |                 | function parameter             |
+-----------------------+-----------------+--------------------------------+
| name_x                | OT_STRINGVECTOR | Names of the variables.        |
+-----------------------+-----------------+--------------------------------+
| print_header          | OT_BOOL         | Print the header with problem  |
|                       |                 | statistics                     |
+-----------------------+-----------------+--------------------------------+
| print_x               | OT_INTVECTOR    | Which variables to print.      |
+-----------------------+-----------------+--------------------------------+
| qpsol                 | OT_STRING       | The QP solver to be used by    |
|                       |                 | the SQP method                 |
+-----------------------+-----------------+--------------------------------+
| qpsol_options         | OT_DICT         | Options to be passed to the QP |
|                       |                 | solver                         |
+-----------------------+-----------------+--------------------------------+
| reg_threshold         | OT_DOUBLE       | Threshold for the              |
|                       |                 | regularization.                |
+-----------------------+-----------------+--------------------------------+
| regularize            | OT_BOOL         | Automatic regularization of    |
|                       |                 | Lagrange Hessian.              |
+-----------------------+-----------------+--------------------------------+
| tol_du                | OT_DOUBLE       | Stopping criterion for dual    |
|                       |                 | infeasability                  |
+-----------------------+-----------------+--------------------------------+
| tol_pr                | OT_DOUBLE       | Stopping criterion for primal  |
|                       |                 | infeasibility                  |
+-----------------------+-----------------+--------------------------------+
| tol_pr_step           | OT_DOUBLE       | Stopping criterion for the     |
|                       |                 | step size                      |
+-----------------------+-----------------+--------------------------------+
| tol_reg               | OT_DOUBLE       | Stopping criterion for         |
|                       |                 | regularization                 |
+-----------------------+-----------------+--------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

sqpmethod
---------



A textbook SQPMethod

>List of available options

+-----------------------+-----------+--------------------------------------+
|          Id           |   Type    |             Description              |
+=======================+===========+======================================+
| beta                  | OT_DOUBLE | Line-search parameter, restoration   |
|                       |           | factor of stepsize                   |
+-----------------------+-----------+--------------------------------------+
| c1                    | OT_DOUBLE | Armijo condition, coefficient of     |
|                       |           | decrease in merit                    |
+-----------------------+-----------+--------------------------------------+
| hessian_approximation | OT_STRING | limited-memory|exact                 |
+-----------------------+-----------+--------------------------------------+
| lbfgs_memory          | OT_INT    | Size of L-BFGS memory.               |
+-----------------------+-----------+--------------------------------------+
| max_iter              | OT_INT    | Maximum number of SQP iterations     |
+-----------------------+-----------+--------------------------------------+
| max_iter_ls           | OT_INT    | Maximum number of linesearch         |
|                       |           | iterations                           |
+-----------------------+-----------+--------------------------------------+
| merit_memory          | OT_INT    | Size of memory to store history of   |
|                       |           | merit function values                |
+-----------------------+-----------+--------------------------------------+
| min_step_size         | OT_DOUBLE | The size (inf-norm) of the step size |
|                       |           | should not become smaller than this. |
+-----------------------+-----------+--------------------------------------+
| print_header          | OT_BOOL   | Print the header with problem        |
|                       |           | statistics                           |
+-----------------------+-----------+--------------------------------------+
| print_iteration       | OT_BOOL   | Print the iterations                 |
+-----------------------+-----------+--------------------------------------+
| qpsol                 | OT_STRING | The QP solver to be used by the SQP  |
|                       |           | method                               |
+-----------------------+-----------+--------------------------------------+
| qpsol_options         | OT_DICT   | Options to be passed to the QP       |
|                       |           | solver                               |
+-----------------------+-----------+--------------------------------------+
| regularize            | OT_BOOL   | Automatic regularization of Lagrange |
|                       |           | Hessian.                             |
+-----------------------+-----------+--------------------------------------+
| tol_du                | OT_DOUBLE | Stopping criterion for dual          |
|                       |           | infeasability                        |
+-----------------------+-----------+--------------------------------------+
| tol_pr                | OT_DOUBLE | Stopping criterion for primal        |
|                       |           | infeasibility                        |
+-----------------------+-----------+--------------------------------------+

--------------------------------------------------------------------------------



Joel Andersson

";

%feature("docstring")  casadi::nlpsol(const std::string &name, const
std::string &solver, const MXDict &nlp, const Dict &opts=Dict()) "

";

%feature("docstring")  casadi::nlpsol(const std::string &name, const
std::string &solver, const std::string &fname, const Dict &opts=Dict()) "

";

%feature("docstring")  casadi::nlpsol(const std::string &name, const
std::string &solver, const Importer &compiler, const Dict &opts=Dict()) "

";

%feature("docstring")  casadi::nlpsol(const std::string &name, const
std::string &solver, const NlpBuilder &nl, const Dict &opts=Dict()) "

";

%feature("docstring")  casadi::is_monotone(const std::vector< T > &v) "

Check if the vector is monotone.

";

%feature("docstring")  casadi::casadi_postorder_dfs(int j, int k, int *head,
int *next, int *post, int *stack) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_norm_inf_mul(const T1 *x, const int
*sp_x, const T1 *y, const int *sp_y, T1 *dwork, int *iwork) "

[INTERNAL]  Inf-norm of a Matrix-matrix product,*

Parameters:
-----------

dwork:  A real work vector that you must allocate Minimum size: y.size1()

iwork:  A integer work vector that you must allocate Minimum size:
y.size1()+x.size2()+1

";

%feature("docstring")  casadi::casadi_qr_mv(const int *sp_v, const T1 *v,
const T1 *beta, T1 *x, int tr) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_fill(T1 *x, int n, T1 alpha) "

[INTERNAL]  FILL: x <- alpha.

";

%feature("docstring")  casadi::casadi_mv_dense(const T1 *x, int nrow_x, int
ncol_x, const T1 *y, T1 *z, int tr) "

[INTERNAL] ";

%feature("docstring")  casadi::conic_out() "

Get QP solver output scheme of QP solvers.

";

%feature("docstring")  casadi::conic_out(int ind) "

Get output scheme name by index.

";


// File: namespaceIpopt.xml


// File: namespacestd.xml


// File: chapter1.xml


// File: chapter2.xml


// File: chapter3.xml


// File: chapter4.xml


// File: chapter5.xml


// File: chapter6.xml

