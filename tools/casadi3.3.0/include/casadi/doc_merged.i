
// File: index.xml

// File: classcasadi_1_1Assertion.xml


// File: classcasadi_1_1BackwardDiff.xml
%feature("docstring") casadi::BackwardDiff::instruction_constant "[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::BackwardDiff::index_out "[INTERNAL]  Get
output scheme index by name.

";

%feature("docstring") casadi::BackwardDiff::clear_mem "[INTERNAL]  Clear
all memory (called from destructor)

";

%feature("docstring") casadi::BackwardDiff::call_forward "[INTERNAL]
Forward mode AD, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::BackwardDiff::disp_more "[INTERNAL]  Print
more.

";

%feature("docstring") casadi::BackwardDiff::alloc "[INTERNAL]  Ensure work
vectors long enough to evaluate function.

";

%feature("docstring") casadi::BackwardDiff::checkout "[INTERNAL]  Checkout
a memory object.

";

%feature("docstring") casadi::BackwardDiff::replace_res "[INTERNAL]
Replace 0-by-0 outputs.

";

%feature("docstring") casadi::BackwardDiff::slice "[INTERNAL]  returns a
new function with a selection of inputs/outputs of the original

";

%feature("docstring") casadi::BackwardDiff::size1_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::BackwardDiff::wrap "[INTERNAL]  Wrap in an
Function instance consisting of only one MX call.

";

%feature("docstring") casadi::BackwardDiff::codegen_incref "[INTERNAL]
Codegen incref for dependencies.

";

%feature("docstring") casadi::BackwardDiff::getJacSparsity "[INTERNAL]
Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::BackwardDiff::alloc_w "[INTERNAL]  Ensure
required length of w field.

";

%feature("docstring") casadi::BackwardDiff::eval_dm "[INTERNAL]  Evaluate
with DM matrices.

";

%feature("docstring") casadi::BackwardDiff::get_sparsity_out "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::BackwardDiff::get_reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::BackwardDiff::uses_output "[INTERNAL]  Is the
scheme using the (nondifferentiated) output?

";

%feature("docstring") casadi::BackwardDiff::info "[INTERNAL]  Obtain
information about function

";

%feature("docstring") casadi::BackwardDiff::has_sprev "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::BackwardDiff::class_name "[INTERNAL]  Get
type name.

";

%feature("docstring") casadi::BackwardDiff::all_scalar "[INTERNAL]  Are all
inputs and outputs scalar.

";

%feature("docstring") casadi::BackwardDiff::eval_sx "[INTERNAL]  Evaluate
with symbolic scalars.

";

%feature("docstring") casadi::BackwardDiff::alloc_mem "[INTERNAL]  Create
memory block.

";

%feature("docstring") casadi::BackwardDiff::has_jacobian "[INTERNAL]
Return Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::BackwardDiff::symbolic_output "[INTERNAL]
Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::BackwardDiff::index_in "[INTERNAL]  Get input
scheme index by name.

";

%feature("docstring") casadi::BackwardDiff::disp "[INTERNAL]  Display
object.

";

%feature("docstring") casadi::BackwardDiff::mx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::BackwardDiff::jit_dependencies "[INTERNAL]
Jit dependencies.

";

%feature("docstring") casadi::BackwardDiff::init_mem "[INTERNAL]  Initalize
memory block.

";

%feature("docstring") casadi::BackwardDiff::get_jacobian "[INTERNAL]
Return Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::BackwardDiff::release "[INTERNAL]  Release a
memory object.

";

%feature("docstring") casadi::BackwardDiff::sz_arg "[INTERNAL]  Get
required length of arg field.

";

%feature("docstring") casadi::BackwardDiff::get_name_out "[INTERNAL]  Names
of function input and outputs.

";

%feature("docstring") casadi::BackwardDiff::check_res "[INTERNAL]  Check if
output arguments have correct length and dimensions.

";

%feature("docstring") casadi::BackwardDiff::free_sx "[INTERNAL]  Get free
variables (SX)

";

%feature("docstring") casadi::BackwardDiff::has_codegen "[INTERNAL]  Is
codegen supported?

";

%feature("docstring") casadi::BackwardDiff::instruction_output "[INTERNAL]
Get the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::BackwardDiff::size_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::BackwardDiff::get_sparsity_in "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::BackwardDiff::getJacSparsityHierarchicalSymm "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::BackwardDiff::has_function "[INTERNAL] ";

%feature("docstring") casadi::BackwardDiff::sz_iw "[INTERNAL]  Get required
length of iw field.

";

%feature("docstring") casadi::BackwardDiff::replace_arg "[INTERNAL]
Replace 0-by-0 inputs.

";

%feature("docstring") casadi::BackwardDiff::mapsum_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::BackwardDiff::getAtomicInput "

[DEPRECATED] Renamed instruction_index

";

%feature("docstring") casadi::BackwardDiff::codegen "[INTERNAL]  Generate
code the function.

";

%feature("docstring") casadi::BackwardDiff::size2_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::BackwardDiff::getJacSparsityGen "[INTERNAL]
Get the sparsity pattern, forward mode.

";

%feature("docstring") casadi::BackwardDiff::get_name_in "[INTERNAL]  Names
of function input and outputs.

";

%feature("docstring") casadi::BackwardDiff::replace_fseed "[INTERNAL]
Replace 0-by-0 forward seeds.

";

%feature("docstring") casadi::BackwardDiff::factory "[INTERNAL] ";

%feature("docstring") casadi::BackwardDiff::set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::BackwardDiff::has_derivative "[INTERNAL]  Can
derivatives be calculated in any way?

";

%feature("docstring") casadi::BackwardDiff::eval_gen "

>  int casadi::FunctionInternal::eval_gen(const double **arg, double **res, int *iw, double *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate numerically.

>  int casadi::FunctionInternal::eval_gen(const SXElem **arg, SXElem **res, int *iw, SXElem *w, void *mem) const

>  int casadi::FunctionInternal::eval_gen(const bvec_t **arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

%feature("docstring") casadi::BackwardDiff::n_instructions "[INTERNAL]  Get
the number of atomic operations.

";

%feature("docstring") casadi::BackwardDiff::jacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::BackwardDiff::codegen_body "[INTERNAL]
Generate code for the body of the C function.

";

%feature("docstring") casadi::BackwardDiff::sz_work "[INTERNAL]  Get number
of temporary variables needed.

";

%feature("docstring") casadi::BackwardDiff::BackwardDiff "[INTERNAL] ";

%feature("docstring") casadi::BackwardDiff::has_err "[INTERNAL] ";

%feature("docstring") casadi::BackwardDiff::getJacSparsityHierarchical "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::BackwardDiff::oracle "[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::BackwardDiff::sparsity_jac "[INTERNAL]  Get,
if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::BackwardDiff::has_reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::BackwardDiff::n_nodes "[INTERNAL]  Number of
nodes in the algorithm.

";

%feature("docstring") casadi::BackwardDiff::eval_mx "[INTERNAL]  Evaluate
with symbolic matrices.

";

%feature("docstring") casadi::BackwardDiff::check_arg "[INTERNAL]  Check if
input arguments have correct length and dimensions.

";

%feature("docstring") casadi::BackwardDiff::symbolicAdjSeed "[INTERNAL]
Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::BackwardDiff::matching_arg "[INTERNAL]  Check
if input arguments that needs to be replaced.

";

%feature("docstring") casadi::BackwardDiff::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::BackwardDiff::get_abstol "[INTERNAL]  Get
absolute tolerance.

";

%feature("docstring") casadi::BackwardDiff::fwd_seed "[INTERNAL]  Symbolic
expressions for the forward seeds.

";

%feature("docstring") casadi::BackwardDiff::nnz_out "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::BackwardDiff::calc_fd "[INTERNAL] ";

%feature("docstring") casadi::BackwardDiff::free_mx "[INTERNAL]  Get free
variables ( MX)

";

%feature("docstring") casadi::BackwardDiff::get_function "[INTERNAL] ";

%feature("docstring") casadi::BackwardDiff::size1_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::BackwardDiff::matching_res "[INTERNAL]  Check
if output arguments that needs to be replaced.

";

%feature("docstring") casadi::BackwardDiff::definition "[INTERNAL]  Get
function signature: name:(inputs)->(outputs)

";

%feature("docstring") casadi::BackwardDiff::adjViaJac "[INTERNAL]
Calculate derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::BackwardDiff::get_jacobian_sparsity "[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::BackwardDiff::sp_reverse "[INTERNAL]
Propagate sparsity backwards.

";

%feature("docstring") casadi::BackwardDiff::print "[INTERNAL]  C-style
formatted printing during evaluation.

";

%feature("docstring") casadi::BackwardDiff::instruction_id "[INTERNAL]  Get
an atomic operation operator index.

";

%feature("docstring") casadi::BackwardDiff::alloc_arg "[INTERNAL]  Ensure
required length of arg field.

";

%feature("docstring") casadi::BackwardDiff::get_reltol "[INTERNAL]  Get
relative tolerance.

";

%feature("docstring") casadi::BackwardDiff::get_default_in "[INTERNAL]  Get
default input value.

";

%feature("docstring") casadi::BackwardDiff::numel_in "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::BackwardDiff "[INTERNAL]  Calculate
derivative using backward differences Joel Andersson

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| abstol           | OT_DOUBLE       | Accuracy of      | casadi::Backward |
|                  |                 | function outputs | Diff             |
|                  |                 | [default: query  |                  |
|                  |                 | object]          |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| enable_fd        | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation by   |                  |
|                  |                 | finite           |                  |
|                  |                 | differencing.    |                  |
|                  |                 | [default:        |                  |
|                  |                 | false]]          |                  |
+------------------+-----------------+------------------+------------------+
| enable_forward   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using forward    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_jacobian  | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobians of all |                  |
|                  |                 | differentiable   |                  |
|                  |                 | outputs with     |                  |
|                  |                 | respect to all   |                  |
|                  |                 | differentiable   |                  |
|                  |                 | inputs - if      |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_reverse   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | transposed       |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using reverse    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| fd_method        | OT_STRING       | Method for       | casadi::Function |
|                  |                 | finite           | Internal         |
|                  |                 | differencing     |                  |
|                  |                 | [default         |                  |
|                  |                 | 'central']       |                  |
+------------------+-----------------+------------------+------------------+
| fd_options       | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | finite           |                  |
|                  |                 | difference       |                  |
|                  |                 | instance         |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| h_iter           | OT_INT          | Number of        | casadi::Backward |
|                  |                 | iterations to    | Diff             |
|                  |                 | improve on the   |                  |
|                  |                 | step-size        |                  |
|                  |                 | [default: 1 if   |                  |
|                  |                 | error estimate   |                  |
|                  |                 | available,       |                  |
|                  |                 | otherwise 0]     |                  |
+------------------+-----------------+------------------+------------------+
| h_max            | OT_DOUBLE       | Maximum step     | casadi::Backward |
|                  |                 | size [default 0] | Diff             |
+------------------+-----------------+------------------+------------------+
| h_min            | OT_DOUBLE       | Minimum step     | casadi::Backward |
|                  |                 | size [default    | Diff             |
|                  |                 | inf]             |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| reltol           | OT_DOUBLE       | Accuracy of      | casadi::Backward |
|                  |                 | function inputs  | Diff             |
|                  |                 | [default: query  |                  |
|                  |                 | object]          |                  |
+------------------+-----------------+------------------+------------------+
| second_order_ste | OT_DOUBLE       | Second order     | casadi::Backward |
| psize            |                 | perturbation     | Diff             |
|                  |                 | size [default:   |                  |
|                  |                 | 1e-3]            |                  |
+------------------+-----------------+------------------+------------------+
| smoothing        | OT_DOUBLE       | Smoothing        | casadi::Backward |
|                  |                 | regularization   | Diff             |
|                  |                 | [default:        |                  |
|                  |                 | machine          |                  |
|                  |                 | precision]       |                  |
+------------------+-----------------+------------------+------------------+
| u_aim            | OT_DOUBLE       | Target ratio of  | casadi::Backward |
|                  |                 | roundoff error   | Diff             |
|                  |                 | to truncation    |                  |
|                  |                 | error [default:  |                  |
|                  |                 | 100.]            |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: finite_differences.hpp ";

%feature("docstring") casadi::BackwardDiff::call_reverse "[INTERNAL]
Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::BackwardDiff::call "[INTERNAL]   Call a
function, templated.

";

%feature("docstring") casadi::BackwardDiff::call_gen "[INTERNAL]   Call a
function, overloaded.

";

%feature("docstring") casadi::BackwardDiff::init "[INTERNAL]  Initialize.

";

%feature("docstring") casadi::BackwardDiff::which_depends "[INTERNAL]
Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::BackwardDiff::size2_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::BackwardDiff::construct "[INTERNAL]
Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::BackwardDiff::codegen_declarations "[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring") casadi::BackwardDiff::eval "[INTERNAL]  Evaluate
numerically.

";

%feature("docstring") casadi::BackwardDiff::has_free "[INTERNAL]  Does the
function have free variables.

";

%feature("docstring") casadi::BackwardDiff::export_code "[INTERNAL]  Export
function in a specific language.

";

%feature("docstring") casadi::BackwardDiff::instruction_MX "[INTERNAL]  get
MX expression associated with instruction

";

%feature("docstring") casadi::BackwardDiff::set_temp "[INTERNAL]  Set the
(temporary) work vectors.

";

%feature("docstring") casadi::BackwardDiff::has_forward "[INTERNAL]  Second
order derivatives.

";

%feature("docstring") casadi::BackwardDiff::print_options "[INTERNAL]
Print list of options.

";

%feature("docstring") casadi::BackwardDiff::get_n_in "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::BackwardDiff::generate_dependencies "[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring") casadi::BackwardDiff::get_free "[INTERNAL]  Print
free variables.

";

%feature("docstring") casadi::BackwardDiff::free_mem "[INTERNAL]  Free
memory block.

";

%feature("docstring") casadi::BackwardDiff::print_dimensions "[INTERNAL]
Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::BackwardDiff::n_pert "[INTERNAL] ";

%feature("docstring") casadi::BackwardDiff::alloc_res "[INTERNAL]  Ensure
required length of res field.

";

%feature("docstring") casadi::BackwardDiff::finalize "[INTERNAL]  Finalize
the object creation.

";

%feature("docstring") casadi::BackwardDiff::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::BackwardDiff::get_options "[INTERNAL]
Options.

";

%feature("docstring") casadi::BackwardDiff::get_max_in "[INTERNAL]  Get
largest input value.

";

%feature("docstring") casadi::BackwardDiff::print_option "[INTERNAL]  Print
all information there is to know about a certain option.

";

%feature("docstring") casadi::BackwardDiff::reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::BackwardDiff::is_a "[INTERNAL]  Check if the
function is of a particular type.

";

%feature("docstring") casadi::BackwardDiff::memory "[INTERNAL]  Memory
objects.

";

%feature("docstring") casadi::BackwardDiff::mx_out "[INTERNAL]  Get
function input(s) and output(s)

";

%feature("docstring") casadi::BackwardDiff::pert "[INTERNAL] ";

%feature("docstring") casadi::BackwardDiff::size_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::BackwardDiff::nnz_in "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::BackwardDiff::forward "[INTERNAL]  Return
function that calculates forward derivatives forward(nfwd) returns a cached
instance if available, and calls  Function get_forward(int nfwd) if no
cached version is available.

";

%feature("docstring") casadi::BackwardDiff::numel_out "[INTERNAL]  Number
of input/output elements.

";

%feature("docstring") casadi::BackwardDiff::getAdaptorSolverName "[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring") casadi::BackwardDiff::getAtomicOutput "

[DEPRECATED] Renamed instruction_output

";

%feature("docstring") casadi::BackwardDiff::calc_stepsize "[INTERNAL] ";

%feature("docstring") casadi::BackwardDiff::get_forward "[INTERNAL]  Second
order derivatives.

";

%feature("docstring") casadi::BackwardDiff::alloc_iw "[INTERNAL]  Ensure
required length of iw field.

";

%feature("docstring") casadi::BackwardDiff::sx_out "[INTERNAL]  Get
function input(s) and output(s)

";

%feature("docstring") casadi::BackwardDiff::sz_w "[INTERNAL]  Get required
length of w field.

";

%feature("docstring") casadi::BackwardDiff::sp_weight "[INTERNAL]
Weighting factor for chosing forward/reverse mode, sparsity propagation.

";

%feature("docstring") casadi::BackwardDiff::sx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::BackwardDiff::get_stats "[INTERNAL]  Get all
statistics.

";

%feature("docstring") casadi::BackwardDiff::instruction_input "[INTERNAL]
Get the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::BackwardDiff::has_spfwd "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::BackwardDiff::fwdViaJac "[INTERNAL]
Calculate derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::BackwardDiff::codegen_sparsities "[INTERNAL]
Codegen sparsities.

";

%feature("docstring") casadi::BackwardDiff::codegen_name "[INTERNAL]  Get
name in codegen.

";

%feature("docstring") casadi::BackwardDiff::generate_lifted "[INTERNAL]
Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::BackwardDiff::sz_res "[INTERNAL]  Get
required length of res field.

";

%feature("docstring") casadi::BackwardDiff::signature "[INTERNAL]  Code
generate the function.

";

%feature("docstring") casadi::BackwardDiff::ad_weight "[INTERNAL]
Weighting factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::BackwardDiff::sprint "[INTERNAL]  C-style
formatted printing to string.

";

%feature("docstring") casadi::BackwardDiff::replace_aseed "[INTERNAL]
Replace 0-by-0 reverse seeds.

";

%feature("docstring") casadi::BackwardDiff::~BackwardDiff "[INTERNAL]
Destructor.

";

%feature("docstring") casadi::BackwardDiff::codegen_decref "[INTERNAL]
Codegen decref for dependencies.

";

%feature("docstring") casadi::BackwardDiff::sp_forward "[INTERNAL]
Propagate sparsity forward.

";

%feature("docstring") casadi::BackwardDiff::get_partition "[INTERNAL]  Get
the unidirectional or bidirectional partition.

";

%feature("docstring") casadi::BackwardDiff::get_n_out "[INTERNAL]  Number
of function inputs and outputs.

";

%feature("docstring") casadi::BackwardDiff::get_min_in "[INTERNAL]  Get
smallest input value.

";

%feature("docstring") casadi::BackwardDiff::codegen_meta "[INTERNAL]
Generate meta-information allowing a user to evaluate a generated function.

";

%feature("docstring") casadi::BackwardDiff::self "[INTERNAL]  Get a public
class instance.

";

%feature("docstring") casadi::BackwardDiff::setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";


// File: classcasadi_1_1Bilin.xml


// File: classcasadi_1_1BinaryMX.xml


// File: classcasadi_1_1BinarySX.xml


// File: classcasadi_1_1Blocksqp.xml
%feature("docstring") casadi::Blocksqp::sz_work "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") casadi::Blocksqp::get_options "[INTERNAL]  Options.

";

%feature("docstring") casadi::Blocksqp::memory "[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::Blocksqp::matching_res "[INTERNAL]  Check if
output arguments that needs to be replaced.

";

%feature("docstring") casadi::Blocksqp::get_name_out "[INTERNAL]  Names of
function input and outputs.

";

%feature("docstring") casadi::Blocksqp::get_forward "[INTERNAL]  Return
function that calculates forward derivatives forward(nfwd) returns a cached
instance if available, and calls  Function get_forward(int nfwd) if no
cached version is available.

";

%feature("docstring") casadi::Blocksqp::getJacSparsityHierarchical "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::Blocksqp::instruction_constant "[INTERNAL]
Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::Blocksqp::alloc_mem "[INTERNAL]  Create
memory block.

";

%feature("docstring") casadi::Blocksqp::finalize "[INTERNAL]  Finalize
initialization.

";

%feature("docstring") casadi::Blocksqp::adjViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::Blocksqp::plugin_name "[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::mx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Blocksqp::clear_mem "[INTERNAL]  Clear all
memory (called from destructor)

";

%feature("docstring") casadi::Blocksqp::set_function "[INTERNAL]  Register
the function for evaluation and statistics gathering

";

%feature("docstring") casadi::Blocksqp::printProgress "[INTERNAL]  Print
one line of output to stdout about the current iteration.

";

%feature("docstring") casadi::Blocksqp::wrap "[INTERNAL]  Wrap in an
Function instance consisting of only one MX call.

";

%feature("docstring") casadi::Blocksqp::codegen "[INTERNAL]  Generate code
the function.

";

%feature("docstring") casadi::Blocksqp::disp_more "[INTERNAL]  Print
description.

";

%feature("docstring") casadi::Blocksqp::alloc_w "[INTERNAL]  Ensure
required length of w field.

";

%feature("docstring") casadi::Blocksqp::replace_res "[INTERNAL]  Replace
0-by-0 outputs.

";

%feature("docstring") casadi::Blocksqp::replace_fseed "[INTERNAL]  Replace
0-by-0 forward seeds.

";

%feature("docstring") casadi::Blocksqp::init "[INTERNAL]  Initialize.

";

%feature("docstring") casadi::Blocksqp::run "[INTERNAL]  Main Loop of SQP
method.

";

%feature("docstring") casadi::Blocksqp::construct "[INTERNAL]  Construct
Prepares the function for evaluation.

";

%feature("docstring") casadi::Blocksqp::size_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Blocksqp::codegen_sparsities "[INTERNAL]
Codegen sparsities.

";

%feature("docstring") casadi::Blocksqp::disp "[INTERNAL]  Display object.

";

%feature("docstring") casadi::Blocksqp::sprint "[INTERNAL]  C-style
formatted printing to string.

";

%feature("docstring") casadi::Blocksqp::codegen_name "[INTERNAL]  Get name
in codegen.

";

%feature("docstring") casadi::Blocksqp::sizeHessianCOL "[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::has_codegen "[INTERNAL]  Is codegen
supported?

";

%feature("docstring") casadi::Blocksqp::n_instructions "[INTERNAL]  Get the
number of atomic operations.

";

%feature("docstring") casadi::Blocksqp::calcBFGS "[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::n_nodes "[INTERNAL]  Number of
nodes in the algorithm.

";

%feature("docstring") casadi::Blocksqp::pairInFilter "[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::reset_sqp "[INTERNAL]  Reset
variables that any SQP code needs.

";

%feature("docstring") casadi::Blocksqp::resetHessian "[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::has_function "[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::fullstep "[INTERNAL]  No
globalization strategy.

";

%feature("docstring") casadi::Blocksqp::has_reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::Blocksqp::eval_mx "[INTERNAL]  Evaluate with
symbolic matrices.

";

%feature("docstring") casadi::Blocksqp::jacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Blocksqp::call_forward "[INTERNAL]  Forward
mode AD, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Blocksqp::fwd_seed "[INTERNAL]  Symbolic
expressions for the forward seeds.

";

%feature("docstring") casadi::Blocksqp::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::Blocksqp::call_gen "[INTERNAL]   Call a
function, overloaded.

";

%feature("docstring") casadi::Blocksqp::get_n_in "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::Blocksqp::alloc_res "[INTERNAL]  Ensure
required length of res field.

";

%feature("docstring") casadi::Blocksqp::all_scalar "[INTERNAL]  Are all
inputs and outputs scalar.

";

%feature("docstring") casadi::Blocksqp::setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";

%feature("docstring") casadi::Blocksqp::get_sparsity_in "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Blocksqp::sp_reverse "[INTERNAL]  Propagate
sparsity backwards.

";

%feature("docstring") casadi::Blocksqp::~Blocksqp "[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::codegen_decref "[INTERNAL]  Codegen
decref for dependencies.

";

%feature("docstring") casadi::Blocksqp::has_sprev "[INTERNAL]  Is the class
able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Blocksqp::sz_w "[INTERNAL]  Get required
length of w field.

";

%feature("docstring") casadi::Blocksqp::calcHessianUpdate "[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::checkout "[INTERNAL]  Checkout a
memory object.

";

%feature("docstring") casadi::Blocksqp::check_inputs "[INTERNAL]  Check if
the inputs correspond to a well-posed problem.

";

%feature("docstring") casadi::Blocksqp::initializeFilter "[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::getReducedHessian "[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::get_function "[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::sparsity_jac "[INTERNAL]  Get, if
necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Blocksqp::Blocksqp "[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::computeNextHessian "[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::sz_res "[INTERNAL]  Get required
length of res field.

";

%feature("docstring") casadi::Blocksqp::sp_forward "[INTERNAL]  Propagate
sparsity forward.

";

%feature("docstring") casadi::Blocksqp::expand "[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::acceptStep "

>  void casadi::Blocksqp::acceptStep(BlocksqpMemory *m, const double *deltaXi, const double *lambdaQP, double alpha, int nSOCS) const 
------------------------------------------------------------------------
[INTERNAL] 
Set new primal dual iterate.

>  void casadi::Blocksqp::acceptStep(BlocksqpMemory *m, double alpha) const 
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::Blocksqp::has_forward "[INTERNAL]  Return
function that calculates forward derivatives forward(nfwd) returns a cached
instance if available, and calls  Function get_forward(int nfwd) if no
cached version is available.

";

%feature("docstring") casadi::Blocksqp "

'blocksqp' plugin for Nlpsol

This is a modified version of blockSQP by Janka et al.

Dennis Janka, Joel Andersson

>List of available options

+----------------------------+-----------+---------------------------------+
|             Id             |   Type    |           Description           |
+============================+===========+=================================+
| block_hess                 | OT_INT    | Blockwise Hessian               |
|                            |           | approximation?                  |
+----------------------------+-----------+---------------------------------+
| col_eps                    | OT_DOUBLE | Epsilon for COL scaling         |
|                            |           | strategy                        |
+----------------------------+-----------+---------------------------------+
| col_tau1                   | OT_DOUBLE | tau1 for COL scaling strategy   |
+----------------------------+-----------+---------------------------------+
| col_tau2                   | OT_DOUBLE | tau2 for COL scaling strategy   |
+----------------------------+-----------+---------------------------------+
| conv_strategy              | OT_INT    | Convexification strategy        |
+----------------------------+-----------+---------------------------------+
| delta                      | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| delta_h0                   | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| eps                        | OT_DOUBLE | Values smaller than this are    |
|                            |           | regarded as numerically zero    |
+----------------------------+-----------+---------------------------------+
| eta                        | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| fallback_scaling           | OT_INT    | If indefinite update is used,   |
|                            |           | the type of fallback strategy   |
+----------------------------+-----------+---------------------------------+
| fallback_update            | OT_INT    | If indefinite update is used,   |
|                            |           | the type of fallback strategy   |
+----------------------------+-----------+---------------------------------+
| gamma_f                    | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| gamma_theta                | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| globalization              | OT_BOOL   | Enable globalization            |
+----------------------------+-----------+---------------------------------+
| hess_damp                  | OT_INT    | Activate Powell damping for     |
|                            |           | BFGS                            |
+----------------------------+-----------+---------------------------------+
| hess_damp_fac              | OT_DOUBLE | Damping factor for BFGS Powell  |
|                            |           | modification                    |
+----------------------------+-----------+---------------------------------+
| hess_lim_mem               | OT_INT    | Full or limited memory          |
+----------------------------+-----------+---------------------------------+
| hess_memsize               | OT_INT    | Memory size for L-BFGS updates  |
+----------------------------+-----------+---------------------------------+
| hess_scaling               | OT_INT    | Scaling strategy for Hessian    |
|                            |           | approximation                   |
+----------------------------+-----------+---------------------------------+
| hess_update                | OT_INT    | Type of Hessian approximation   |
+----------------------------+-----------+---------------------------------+
| ini_hess_diag              | OT_DOUBLE | Initial Hessian guess: diagonal |
|                            |           | matrix diag(iniHessDiag)        |
+----------------------------+-----------+---------------------------------+
| kappa_f                    | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| kappa_minus                | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| kappa_plus                 | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| kappa_plus_max             | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| kappa_soc                  | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| linsol                     | OT_STRING | The linear solver to be used by |
|                            |           | the QP method                   |
+----------------------------+-----------+---------------------------------+
| max_consec_reduced_steps   | OT_INT    | Maximum number of consecutive   |
|                            |           | reduced steps                   |
+----------------------------+-----------+---------------------------------+
| max_consec_skipped_updates | OT_INT    | Maximum number of consecutive   |
|                            |           | skipped updates                 |
+----------------------------+-----------+---------------------------------+
| max_conv_qp                | OT_INT    | How many additional QPs may be  |
|                            |           | solved for convexification per  |
|                            |           | iteration?                      |
+----------------------------+-----------+---------------------------------+
| max_it_qp                  | OT_INT    | Maximum number of QP iterations |
|                            |           | per SQP iteration               |
+----------------------------+-----------+---------------------------------+
| max_iter                   | OT_INT    | Maximum number of SQP           |
|                            |           | iterations                      |
+----------------------------+-----------+---------------------------------+
| max_line_search            | OT_INT    | Maximum number of steps in line |
|                            |           | search                          |
+----------------------------+-----------+---------------------------------+
| max_soc_iter               | OT_INT    | Maximum number of SOC line      |
|                            |           | search iterations               |
+----------------------------+-----------+---------------------------------+
| max_time_qp                | OT_DOUBLE | Maximum number of time in       |
|                            |           | seconds per QP solve per SQP    |
|                            |           | iteration                       |
+----------------------------+-----------+---------------------------------+
| nlinfeastol                | OT_DOUBLE | Nonlinear feasibility tolerance |
+----------------------------+-----------+---------------------------------+
| obj_lo                     | OT_DOUBLE | Lower bound on objective        |
|                            |           | function [-inf]                 |
+----------------------------+-----------+---------------------------------+
| obj_up                     | OT_DOUBLE | Upper bound on objective        |
|                            |           | function [inf]                  |
+----------------------------+-----------+---------------------------------+
| opttol                     | OT_DOUBLE | Optimality tolerance            |
+----------------------------+-----------+---------------------------------+
| print_header               | OT_BOOL   | Print solver header at startup  |
+----------------------------+-----------+---------------------------------+
| print_iteration            | OT_BOOL   | Print SQP iterations            |
+----------------------------+-----------+---------------------------------+
| qpsol                      | OT_STRING | The QP solver to be used by the |
|                            |           | SQP method                      |
+----------------------------+-----------+---------------------------------+
| qpsol_options              | OT_DICT   | Options to be passed to the QP  |
|                            |           | solver                          |
+----------------------------+-----------+---------------------------------+
| restore_feas               | OT_BOOL   | Use feasibility restoration     |
|                            |           | phase                           |
+----------------------------+-----------+---------------------------------+
| s_f                        | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| s_theta                    | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| schur                      | OT_BOOL   | Use qpOASES Schur compliment    |
|                            |           | approach                        |
+----------------------------+-----------+---------------------------------+
| skip_first_globalization   | OT_BOOL   | No globalization strategy in    |
|                            |           | first iteration                 |
+----------------------------+-----------+---------------------------------+
| theta_max                  | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| theta_min                  | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| warmstart                  | OT_BOOL   | Use warmstarting                |
+----------------------------+-----------+---------------------------------+
| which_second_derv          | OT_INT    | For which block should second   |
|                            |           | derivatives be provided by the  |
|                            |           | user                            |
+----------------------------+-----------+---------------------------------+

>List of available options

+-------------------+---------------+-------------------+------------------+
|        Id         |     Type      |    Description    |     Used in      |
+===================+===============+===================+==================+
| block_hess        | OT_INT        | Blockwise Hessian | casadi::Blocksqp |
|                   |               | approximation?    |                  |
+-------------------+---------------+-------------------+------------------+
| calc_multipliers  | OT_BOOL       | Calculate         | casadi::Nlpsol   |
|                   |               | Lagrange          |                  |
|                   |               | multipliers in    |                  |
|                   |               | the Nlpsol base   |                  |
|                   |               | class             |                  |
+-------------------+---------------+-------------------+------------------+
| col_eps           | OT_DOUBLE     | Epsilon for COL   | casadi::Blocksqp |
|                   |               | scaling strategy  |                  |
+-------------------+---------------+-------------------+------------------+
| col_tau1          | OT_DOUBLE     | tau1 for COL      | casadi::Blocksqp |
|                   |               | scaling strategy  |                  |
+-------------------+---------------+-------------------+------------------+
| col_tau2          | OT_DOUBLE     | tau2 for COL      | casadi::Blocksqp |
|                   |               | scaling strategy  |                  |
+-------------------+---------------+-------------------+------------------+
| conv_strategy     | OT_INT        | Convexification   | casadi::Blocksqp |
|                   |               | strategy          |                  |
+-------------------+---------------+-------------------+------------------+
| delta             | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| delta_h0          | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| discrete          | OT_BOOLVECTOR | Indicates which   | casadi::Nlpsol   |
|                   |               | of the variables  |                  |
|                   |               | are discrete,     |                  |
|                   |               | i.e. integer-     |                  |
|                   |               | valued            |                  |
+-------------------+---------------+-------------------+------------------+
| eps               | OT_DOUBLE     | Values smaller    | casadi::Blocksqp |
|                   |               | than this are     |                  |
|                   |               | regarded as       |                  |
|                   |               | numerically zero  |                  |
+-------------------+---------------+-------------------+------------------+
| eta               | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| eval_errors_fatal | OT_BOOL       | When errors occur | casadi::Nlpsol   |
|                   |               | during evaluation |                  |
|                   |               | of f,g,...,stop   |                  |
|                   |               | the iterations    |                  |
+-------------------+---------------+-------------------+------------------+
| expand            | OT_BOOL       | Replace MX with   | casadi::Nlpsol   |
|                   |               | SX expressions in |                  |
|                   |               | problem           |                  |
|                   |               | formulation       |                  |
|                   |               | [false]           |                  |
+-------------------+---------------+-------------------+------------------+
| fallback_scaling  | OT_INT        | If indefinite     | casadi::Blocksqp |
|                   |               | update is used,   |                  |
|                   |               | the type of       |                  |
|                   |               | fallback strategy |                  |
+-------------------+---------------+-------------------+------------------+
| fallback_update   | OT_INT        | If indefinite     | casadi::Blocksqp |
|                   |               | update is used,   |                  |
|                   |               | the type of       |                  |
|                   |               | fallback strategy |                  |
+-------------------+---------------+-------------------+------------------+
| gamma_f           | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| gamma_theta       | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| globalization     | OT_BOOL       | Enable            | casadi::Blocksqp |
|                   |               | globalization     |                  |
+-------------------+---------------+-------------------+------------------+
| hess_damp         | OT_INT        | Activate Powell   | casadi::Blocksqp |
|                   |               | damping for BFGS  |                  |
+-------------------+---------------+-------------------+------------------+
| hess_damp_fac     | OT_DOUBLE     | Damping factor    | casadi::Blocksqp |
|                   |               | for BFGS Powell   |                  |
|                   |               | modification      |                  |
+-------------------+---------------+-------------------+------------------+
| hess_lim_mem      | OT_INT        | Full or limited   | casadi::Blocksqp |
|                   |               | memory            |                  |
+-------------------+---------------+-------------------+------------------+
| hess_memsize      | OT_INT        | Memory size for   | casadi::Blocksqp |
|                   |               | L-BFGS updates    |                  |
+-------------------+---------------+-------------------+------------------+
| hess_scaling      | OT_INT        | Scaling strategy  | casadi::Blocksqp |
|                   |               | for Hessian       |                  |
|                   |               | approximation     |                  |
+-------------------+---------------+-------------------+------------------+
| hess_update       | OT_INT        | Type of Hessian   | casadi::Blocksqp |
|                   |               | approximation     |                  |
+-------------------+---------------+-------------------+------------------+
| ignore_check_vec  | OT_BOOL       | If set to true,   | casadi::Nlpsol   |
|                   |               | the input shape   |                  |
|                   |               | of F will not be  |                  |
|                   |               | checked.          |                  |
+-------------------+---------------+-------------------+------------------+
| ini_hess_diag     | OT_DOUBLE     | Initial Hessian   | casadi::Blocksqp |
|                   |               | guess: diagonal   |                  |
|                   |               | matrix            |                  |
|                   |               | diag(iniHessDiag) |                  |
+-------------------+---------------+-------------------+------------------+
| iteration_callbac | OT_FUNCTION   | A function that   | casadi::Nlpsol   |
| k                 |               | will be called at |                  |
|                   |               | each iteration    |                  |
|                   |               | with the solver   |                  |
|                   |               | as input. Check   |                  |
|                   |               | documentation of  |                  |
|                   |               | Callback .        |                  |
+-------------------+---------------+-------------------+------------------+
| iteration_callbac | OT_BOOL       | If set to true,   | casadi::Nlpsol   |
| k_ignore_errors   |               | errors thrown by  |                  |
|                   |               | iteration_callbac |                  |
|                   |               | k will be         |                  |
|                   |               | ignored.          |                  |
+-------------------+---------------+-------------------+------------------+
| iteration_callbac | OT_INT        | Only call the     | casadi::Nlpsol   |
| k_step            |               | callback function |                  |
|                   |               | every few         |                  |
|                   |               | iterations.       |                  |
+-------------------+---------------+-------------------+------------------+
| kappa_f           | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| kappa_minus       | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| kappa_plus        | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| kappa_plus_max    | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| kappa_soc         | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| linsol            | OT_STRING     | The linear solver | casadi::Blocksqp |
|                   |               | to be used by the |                  |
|                   |               | QP method         |                  |
+-------------------+---------------+-------------------+------------------+
| max_consec_reduce | OT_INT        | Maximum number of | casadi::Blocksqp |
| d_steps           |               | consecutive       |                  |
|                   |               | reduced steps     |                  |
+-------------------+---------------+-------------------+------------------+
| max_consec_skippe | OT_INT        | Maximum number of | casadi::Blocksqp |
| d_updates         |               | consecutive       |                  |
|                   |               | skipped updates   |                  |
+-------------------+---------------+-------------------+------------------+
| max_conv_qp       | OT_INT        | How many          | casadi::Blocksqp |
|                   |               | additional QPs    |                  |
|                   |               | may be solved for |                  |
|                   |               | convexification   |                  |
|                   |               | per iteration?    |                  |
+-------------------+---------------+-------------------+------------------+
| max_it_qp         | OT_INT        | Maximum number of | casadi::Blocksqp |
|                   |               | QP iterations per |                  |
|                   |               | SQP iteration     |                  |
+-------------------+---------------+-------------------+------------------+
| max_iter          | OT_INT        | Maximum number of | casadi::Blocksqp |
|                   |               | SQP iterations    |                  |
+-------------------+---------------+-------------------+------------------+
| max_line_search   | OT_INT        | Maximum number of | casadi::Blocksqp |
|                   |               | steps in line     |                  |
|                   |               | search            |                  |
+-------------------+---------------+-------------------+------------------+
| max_soc_iter      | OT_INT        | Maximum number of | casadi::Blocksqp |
|                   |               | SOC line search   |                  |
|                   |               | iterations        |                  |
+-------------------+---------------+-------------------+------------------+
| max_time_qp       | OT_DOUBLE     | Maximum number of | casadi::Blocksqp |
|                   |               | time in seconds   |                  |
|                   |               | per QP solve per  |                  |
|                   |               | SQP iteration     |                  |
+-------------------+---------------+-------------------+------------------+
| nlinfeastol       | OT_DOUBLE     | Nonlinear         | casadi::Blocksqp |
|                   |               | feasibility       |                  |
|                   |               | tolerance         |                  |
+-------------------+---------------+-------------------+------------------+
| obj_lo            | OT_DOUBLE     | Lower bound on    | casadi::Blocksqp |
|                   |               | objective         |                  |
|                   |               | function [-inf]   |                  |
+-------------------+---------------+-------------------+------------------+
| obj_up            | OT_DOUBLE     | Upper bound on    | casadi::Blocksqp |
|                   |               | objective         |                  |
|                   |               | function [inf]    |                  |
+-------------------+---------------+-------------------+------------------+
| opttol            | OT_DOUBLE     | Optimality        | casadi::Blocksqp |
|                   |               | tolerance         |                  |
+-------------------+---------------+-------------------+------------------+
| oracle_options    | OT_DICT       | Options to be     | casadi::Nlpsol   |
|                   |               | passed to the     |                  |
|                   |               | oracle function   |                  |
+-------------------+---------------+-------------------+------------------+
| print_header      | OT_BOOL       | Print solver      | casadi::Blocksqp |
|                   |               | header at startup |                  |
+-------------------+---------------+-------------------+------------------+
| print_iteration   | OT_BOOL       | Print SQP         | casadi::Blocksqp |
|                   |               | iterations        |                  |
+-------------------+---------------+-------------------+------------------+
| qpsol             | OT_STRING     | The QP solver to  | casadi::Blocksqp |
|                   |               | be used by the    |                  |
|                   |               | SQP method        |                  |
+-------------------+---------------+-------------------+------------------+
| qpsol_options     | OT_DICT       | Options to be     | casadi::Blocksqp |
|                   |               | passed to the QP  |                  |
|                   |               | solver            |                  |
+-------------------+---------------+-------------------+------------------+
| restore_feas      | OT_BOOL       | Use feasibility   | casadi::Blocksqp |
|                   |               | restoration phase |                  |
+-------------------+---------------+-------------------+------------------+
| s_f               | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| s_theta           | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| schur             | OT_BOOL       | Use qpOASES Schur | casadi::Blocksqp |
|                   |               | compliment        |                  |
|                   |               | approach          |                  |
+-------------------+---------------+-------------------+------------------+
| skip_first_global | OT_BOOL       | No globalization  | casadi::Blocksqp |
| ization           |               | strategy in first |                  |
|                   |               | iteration         |                  |
+-------------------+---------------+-------------------+------------------+
| theta_max         | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| theta_min         | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| verbose_init      | OT_BOOL       | Print out timing  | casadi::Nlpsol   |
|                   |               | information about |                  |
|                   |               | the different     |                  |
|                   |               | stages of         |                  |
|                   |               | initialization    |                  |
+-------------------+---------------+-------------------+------------------+
| warmstart         | OT_BOOL       | Use warmstarting  | casadi::Blocksqp |
+-------------------+---------------+-------------------+------------------+
| warn_initial_boun | OT_BOOL       | Warn if the       | casadi::Nlpsol   |
| ds                |               | initial guess     |                  |
|                   |               | does not satisfy  |                  |
|                   |               | LBX and UBX       |                  |
+-------------------+---------------+-------------------+------------------+
| which_second_derv | OT_INT        | For which block   | casadi::Blocksqp |
|                   |               | should second     |                  |
|                   |               | derivatives be    |                  |
|                   |               | provided by the   |                  |
|                   |               | user              |                  |
+-------------------+---------------+-------------------+------------------+

Diagrams
--------



C++ includes: blocksqp.hpp ";

%feature("docstring") casadi::Blocksqp::alloc_arg "[INTERNAL]  Ensure
required length of arg field.

";

%feature("docstring") casadi::Blocksqp::secondOrderCorrection "[INTERNAL]
";

%feature("docstring") casadi::Blocksqp::solve "[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::kktErrorReduction "[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::codegen_body "[INTERNAL]  Generate
code for the function body.

";

%feature("docstring") casadi::Blocksqp::check_arg "[INTERNAL]  Check if
input arguments have correct length and dimensions.

";

%feature("docstring") casadi::Blocksqp::setOptionsFromFile "[INTERNAL]
Read options from parameter xml.

";

%feature("docstring") casadi::Blocksqp::instruction_input "[INTERNAL]  Get
the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::Blocksqp::class_name "[INTERNAL]  Readable
name of the internal class.

";

%feature("docstring") casadi::Blocksqp::feasibilityRestorationPhase "[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::updateStepBounds "[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::ad_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::Blocksqp::codegen_declarations "[INTERNAL]
Generate code for the declarations of the C function.

";

%feature("docstring") casadi::Blocksqp::filterLineSearch "[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::instruction_MX "[INTERNAL]  get MX
expression associated with instruction

";

%feature("docstring") casadi::Blocksqp::size2_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Blocksqp::mx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Blocksqp::calcOptTol "[INTERNAL]  Update
optimization tolerance (similar to SNOPT) in current iterate.

";

%feature("docstring") casadi::Blocksqp::mapsum_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::Blocksqp::calcInitialHessian "[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::replace_aseed "[INTERNAL]  Replace
0-by-0 reverse seeds.

";

%feature("docstring") casadi::Blocksqp::get_reltol "[INTERNAL]  Get
relative tolerance.

";

%feature("docstring") casadi::Blocksqp::call "[INTERNAL]   Call a function,
templated.

";

%feature("docstring") casadi::Blocksqp::augmentFilter "[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::print_option "[INTERNAL]  Print all
information there is to know about a certain option.

";

%feature("docstring") casadi::Blocksqp::numel_out "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::Blocksqp::getAdaptorSolverName "[INTERNAL]
Obtain solver name from Adaptor.

";

%feature("docstring") casadi::Blocksqp::integer_support "[INTERNAL]  Can
discrete variables be treated.

";

%feature("docstring") casadi::Blocksqp::get_name_in "[INTERNAL]  Names of
function input and outputs.

";

%feature("docstring") casadi::Blocksqp::calcHessianUpdateLimitedMemory "[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::uses_output "[INTERNAL]  Do the
derivative functions need nondifferentiated outputs?

";

%feature("docstring") casadi::Blocksqp::eval "[INTERNAL]  Evaluate
numerically.

";

%feature("docstring") casadi::Blocksqp::sp_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode, sparsity propagation.

";

%feature("docstring") casadi::Blocksqp::instruction_id "[INTERNAL]  Get an
atomic operation operator index.

";

%feature("docstring") casadi::Blocksqp::symbolicAdjSeed "[INTERNAL]
Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::Blocksqp::sz_iw "[INTERNAL]  Get required
length of iw field.

";

%feature("docstring") casadi::Blocksqp::reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::Blocksqp::alloc "[INTERNAL]  Ensure work
vectors long enough to evaluate function.

";

%feature("docstring") casadi::Blocksqp::initIterate "[INTERNAL]  Set
initial filter, objective function, tolerances etc.

";

%feature("docstring") casadi::Blocksqp::evaluate "

>  int casadi::Blocksqp::evaluate(BlocksqpMemory *m, double *f, double *g, double *grad_f, double *jac_g) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate objective and constraints, including derivatives.

>  int casadi::Blocksqp::evaluate(BlocksqpMemory *m, const double *xk, double *f, double *g) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate objective and constraints, no derivatives.

";

%feature("docstring") casadi::Blocksqp::call_reverse "[INTERNAL]  Reverse
mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Blocksqp::get_partition "[INTERNAL]  Get the
unidirectional or bidirectional partition.

";

%feature("docstring") casadi::Blocksqp::size2_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Blocksqp::get_jacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Blocksqp::eval_gen "

>  int casadi::FunctionInternal::eval_gen(const double **arg, double **res, int *iw, double *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate numerically.

>  int casadi::FunctionInternal::eval_gen(const SXElem **arg, SXElem **res, int *iw, SXElem *w, void *mem) const

>  int casadi::FunctionInternal::eval_gen(const bvec_t **arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

%feature("docstring") casadi::Blocksqp::alloc_iw "[INTERNAL]  Ensure
required length of iw field.

";

%feature("docstring") casadi::Blocksqp::set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::Blocksqp::self "[INTERNAL]  Get a public
class instance.

";

%feature("docstring") casadi::Blocksqp::get_n_out "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::Blocksqp::get_jacobian_sparsity "[INTERNAL]
Get Jacobian sparsity.

";

%feature("docstring") casadi::Blocksqp::check_res "[INTERNAL]  Check if
output arguments have correct length and dimensions.

";

%feature("docstring") casadi::Blocksqp::signature "[INTERNAL]  Code
generate the function.

";

%feature("docstring") casadi::Blocksqp::replace_arg "[INTERNAL]  Replace
0-by-0 inputs.

";

%feature("docstring") casadi::Blocksqp::sz_arg "[INTERNAL]  Get required
length of arg field.

";

%feature("docstring") casadi::Blocksqp::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::Blocksqp::has_jacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Blocksqp::slice "[INTERNAL]  returns a new
function with a selection of inputs/outputs of the original

";

%feature("docstring") casadi::Blocksqp::get_default_in "[INTERNAL]  Get
default input value.

";

%feature("docstring") casadi::Blocksqp::codegen_meta "[INTERNAL]  Generate
meta-information allowing a user to evaluate a generated function.

";

%feature("docstring") casadi::Blocksqp::initStats "[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::printInfo "[INTERNAL]  Print
information about the SQP method.

";

%feature("docstring") casadi::Blocksqp::print_dimensions "[INTERNAL]  Print
dimensions of inputs and outputs.

";

%feature("docstring") casadi::Blocksqp::getJacSparsityGen "[INTERNAL]  Get
the sparsity pattern, forward mode.

";

%feature("docstring") casadi::Blocksqp::which_depends "[INTERNAL]  Which
variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::Blocksqp::getJacSparsityHierarchicalSymm "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::Blocksqp::has_spfwd "[INTERNAL]  Is the class
able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Blocksqp::reduceSOCStepsize "[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::nnz_in "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::Blocksqp::get_min_in "[INTERNAL]  Get
smallest input value.

";

%feature("docstring") casadi::Blocksqp::get_free "[INTERNAL]  Print free
variables.

";

%feature("docstring") casadi::Blocksqp::free_mem "[INTERNAL]  Free memory
block.

";

%feature("docstring") casadi::Blocksqp::has_free "[INTERNAL]  Does the
function have free variables.

";

%feature("docstring") casadi::Blocksqp::updateDeltaGamma "[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::free_mx "[INTERNAL]  Get free
variables ( MX)

";

%feature("docstring") casadi::Blocksqp::index_in "[INTERNAL]  Get input
scheme index by name.

";

%feature("docstring") casadi::Blocksqp::instruction_output "[INTERNAL]  Get
the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::Blocksqp::oracle "[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::Blocksqp::release "[INTERNAL]  Release a
memory object.

";

%feature("docstring") casadi::Blocksqp::jit_dependencies "[INTERNAL]  JIT
for dependencies.

";

%feature("docstring") casadi::Blocksqp::print_fstats "[INTERNAL]  Print
statistics.

";

%feature("docstring") casadi::Blocksqp::size_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Blocksqp::getAtomicInput "

[DEPRECATED] Renamed instruction_index

";

%feature("docstring") casadi::Blocksqp::fwdViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::Blocksqp::generate_dependencies "[INTERNAL]
Export / Generate C code for the generated functions.

";

%feature("docstring") casadi::Blocksqp::sx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Blocksqp::calcSR1 "[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::symbolic_output "[INTERNAL]  Get a
vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::Blocksqp::eval_dm "[INTERNAL]  Evaluate with
DM matrices.

";

%feature("docstring") casadi::Blocksqp::definition "[INTERNAL]  Get
function signature: name:(inputs)->(outputs)

";

%feature("docstring") casadi::Blocksqp::has_derivative "[INTERNAL]  Can
derivatives be calculated in any way?

";

%feature("docstring") casadi::Blocksqp::print "[INTERNAL]  C-style
formatted printing during evaluation.

";

%feature("docstring") casadi::Blocksqp::codegen_incref "[INTERNAL]  Codegen
incref for dependencies.

";

%feature("docstring") casadi::Blocksqp::matching_arg "[INTERNAL]  Check if
input arguments that needs to be replaced.

";

%feature("docstring") casadi::Blocksqp::factory "[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::getJacSparsity "[INTERNAL]
Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Blocksqp::forward "[INTERNAL]  Return
function that calculates forward derivatives forward(nfwd) returns a cached
instance if available, and calls  Function get_forward(int nfwd) if no
cached version is available.

";

%feature("docstring") casadi::Blocksqp::solveQP "[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::is_a "[INTERNAL]  Check if the
function is of a particular type.

";

%feature("docstring") casadi::Blocksqp::get_stats "[INTERNAL]  Get all
statistics.

";

%feature("docstring") casadi::Blocksqp::generate_lifted "[INTERNAL]
Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::Blocksqp::reduceStepsize "[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::sx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Blocksqp::lInfConstraintNorm "[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::print_options "[INTERNAL]  Print
list of options.

";

%feature("docstring") casadi::Blocksqp::size1_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Blocksqp::index_out "[INTERNAL]  Get output
scheme index by name.

";

%feature("docstring") casadi::Blocksqp::numel_in "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::Blocksqp::calcLagrangeGradient "

>  void casadi::Blocksqp::calcLagrangeGradient(BlocksqpMemory *m, const double *lam_x, const double *lam_g, const double *grad_f, double *jacNz, double *grad_lag, int flag) const 
------------------------------------------------------------------------
[INTERNAL] 
Compute gradient of Lagrangian function (sparse version)

>  void casadi::Blocksqp::calcLagrangeGradient(BlocksqpMemory *m, double *grad_lag, int flag) const 
------------------------------------------------------------------------
[INTERNAL] 
Overloaded function for convenience, uses current variables of
SQPiterate vars.

";

%feature("docstring") casadi::Blocksqp::eval_sx "[INTERNAL]  Evaluate with
symbolic scalars.

";

%feature("docstring") casadi::Blocksqp::get_abstol "[INTERNAL]  Get
absolute tolerance.

";

%feature("docstring") casadi::Blocksqp::init_mem "[INTERNAL]  Initalize
memory block.

";

%feature("docstring") casadi::Blocksqp::info "[INTERNAL]  Obtain
information about function

";

%feature("docstring") casadi::Blocksqp::sizeInitialHessian "[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::export_code "[INTERNAL]  Export
function in a specific language.

";

%feature("docstring") casadi::Blocksqp::size1_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Blocksqp::nnz_out "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::Blocksqp::get_reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::Blocksqp::get_max_in "[INTERNAL]  Get largest
input value.

";

%feature("docstring") casadi::Blocksqp::set_temp "[INTERNAL]  Set the work
vectors.

";

%feature("docstring") casadi::Blocksqp::free_sx "[INTERNAL]  Get free
variables (SX)

";

%feature("docstring") casadi::Blocksqp::feasibilityRestorationHeuristic "[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::getAtomicOutput "

[DEPRECATED] Renamed instruction_output

";

%feature("docstring") casadi::Blocksqp::get_sparsity_out "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Blocksqp::create_function "[INTERNAL]  Create
an oracle function

";

%feature("docstring") casadi::Blocksqp::calc_function "[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::monitored "[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::convertHessian "[INTERNAL]  Convert
*hess to column compressed sparse format.

";

%feature("docstring") casadi::Blocksqp::updateStats "[INTERNAL] ";


// File: classcasadi_1_1BonMinMessageHandler.xml
%feature("docstring") casadi::BonMinMessageHandler "[INTERNAL]

>List of available options

+-------------------+---------------+-------------------+------------------+
|        Id         |     Type      |    Description    |     Used in      |
+===================+===============+===================+==================+
| bonmin            | OT_DICT       | Options to be     | casadi::BonMinMe |
|                   |               | passed to BONMIN  | ssageHandler     |
+-------------------+---------------+-------------------+------------------+
| calc_multipliers  | OT_BOOL       | Calculate         | casadi::Nlpsol   |
|                   |               | Lagrange          |                  |
|                   |               | multipliers in    |                  |
|                   |               | the Nlpsol base   |                  |
|                   |               | class             |                  |
+-------------------+---------------+-------------------+------------------+
| con_integer_md    | OT_DICT       | Integer metadata  | casadi::BonMinMe |
|                   |               | (a dictionary     | ssageHandler     |
|                   |               | with lists of     |                  |
|                   |               | integers) about   |                  |
|                   |               | constraints to be |                  |
|                   |               | passed to BONMIN  |                  |
+-------------------+---------------+-------------------+------------------+
| con_numeric_md    | OT_DICT       | Numeric metadata  | casadi::BonMinMe |
|                   |               | (a dictionary     | ssageHandler     |
|                   |               | with lists of     |                  |
|                   |               | reals) about      |                  |
|                   |               | constraints to be |                  |
|                   |               | passed to BONMIN  |                  |
+-------------------+---------------+-------------------+------------------+
| con_string_md     | OT_DICT       | String metadata   | casadi::BonMinMe |
|                   |               | (a dictionary     | ssageHandler     |
|                   |               | with lists of     |                  |
|                   |               | strings) about    |                  |
|                   |               | constraints to be |                  |
|                   |               | passed to BONMIN  |                  |
+-------------------+---------------+-------------------+------------------+
| discrete          | OT_BOOLVECTOR | Indicates which   | casadi::Nlpsol   |
|                   |               | of the variables  |                  |
|                   |               | are discrete,     |                  |
|                   |               | i.e. integer-     |                  |
|                   |               | valued            |                  |
+-------------------+---------------+-------------------+------------------+
| eval_errors_fatal | OT_BOOL       | When errors occur | casadi::Nlpsol   |
|                   |               | during evaluation |                  |
|                   |               | of f,g,...,stop   |                  |
|                   |               | the iterations    |                  |
+-------------------+---------------+-------------------+------------------+
| expand            | OT_BOOL       | Replace MX with   | casadi::Nlpsol   |
|                   |               | SX expressions in |                  |
|                   |               | problem           |                  |
|                   |               | formulation       |                  |
|                   |               | [false]           |                  |
+-------------------+---------------+-------------------+------------------+
| grad_f            | OT_FUNCTION   | Function for      | casadi::BonMinMe |
|                   |               | calculating the   | ssageHandler     |
|                   |               | gradient of the   |                  |
|                   |               | objective         |                  |
|                   |               | (column,          |                  |
|                   |               | autogenerated by  |                  |
|                   |               | default)          |                  |
+-------------------+---------------+-------------------+------------------+
| grad_f_options    | OT_DICT       | Options for the   | casadi::BonMinMe |
|                   |               | autogenerated     | ssageHandler     |
|                   |               | gradient of the   |                  |
|                   |               | objective.        |                  |
+-------------------+---------------+-------------------+------------------+
| hess_lag          | OT_FUNCTION   | Function for      | casadi::BonMinMe |
|                   |               | calculating the   | ssageHandler     |
|                   |               | Hessian of the    |                  |
|                   |               | Lagrangian        |                  |
|                   |               | (autogenerated by |                  |
|                   |               | default)          |                  |
+-------------------+---------------+-------------------+------------------+
| hess_lag_options  | OT_DICT       | Options for the   | casadi::BonMinMe |
|                   |               | autogenerated     | ssageHandler     |
|                   |               | Hessian of the    |                  |
|                   |               | Lagrangian.       |                  |
+-------------------+---------------+-------------------+------------------+
| ignore_check_vec  | OT_BOOL       | If set to true,   | casadi::Nlpsol   |
|                   |               | the input shape   |                  |
|                   |               | of F will not be  |                  |
|                   |               | checked.          |                  |
+-------------------+---------------+-------------------+------------------+
| iteration_callbac | OT_FUNCTION   | A function that   | casadi::Nlpsol   |
| k                 |               | will be called at |                  |
|                   |               | each iteration    |                  |
|                   |               | with the solver   |                  |
|                   |               | as input. Check   |                  |
|                   |               | documentation of  |                  |
|                   |               | Callback .        |                  |
+-------------------+---------------+-------------------+------------------+
| iteration_callbac | OT_BOOL       | If set to true,   | casadi::Nlpsol   |
| k_ignore_errors   |               | errors thrown by  |                  |
|                   |               | iteration_callbac |                  |
|                   |               | k will be         |                  |
|                   |               | ignored.          |                  |
+-------------------+---------------+-------------------+------------------+
| iteration_callbac | OT_INT        | Only call the     | casadi::Nlpsol   |
| k_step            |               | callback function |                  |
|                   |               | every few         |                  |
|                   |               | iterations.       |                  |
+-------------------+---------------+-------------------+------------------+
| jac_g             | OT_FUNCTION   | Function for      | casadi::BonMinMe |
|                   |               | calculating the   | ssageHandler     |
|                   |               | Jacobian of the   |                  |
|                   |               | constraints       |                  |
|                   |               | (autogenerated by |                  |
|                   |               | default)          |                  |
+-------------------+---------------+-------------------+------------------+
| jac_g_options     | OT_DICT       | Options for the   | casadi::BonMinMe |
|                   |               | autogenerated     | ssageHandler     |
|                   |               | Jacobian of the   |                  |
|                   |               | constraints.      |                  |
+-------------------+---------------+-------------------+------------------+
| oracle_options    | OT_DICT       | Options to be     | casadi::Nlpsol   |
|                   |               | passed to the     |                  |
|                   |               | oracle function   |                  |
+-------------------+---------------+-------------------+------------------+
| pass_nonlinear_va | OT_BOOL       | Pass list of      | casadi::BonMinMe |
| riables           |               | variables         | ssageHandler     |
|                   |               | entering          |                  |
|                   |               | nonlinearly to    |                  |
|                   |               | BONMIN            |                  |
+-------------------+---------------+-------------------+------------------+
| var_integer_md    | OT_DICT       | Integer metadata  | casadi::BonMinMe |
|                   |               | (a dictionary     | ssageHandler     |
|                   |               | with lists of     |                  |
|                   |               | integers) about   |                  |
|                   |               | variables to be   |                  |
|                   |               | passed to BONMIN  |                  |
+-------------------+---------------+-------------------+------------------+
| var_numeric_md    | OT_DICT       | Numeric metadata  | casadi::BonMinMe |
|                   |               | (a dictionary     | ssageHandler     |
|                   |               | with lists of     |                  |
|                   |               | reals) about      |                  |
|                   |               | variables to be   |                  |
|                   |               | passed to BONMIN  |                  |
+-------------------+---------------+-------------------+------------------+
| var_string_md     | OT_DICT       | String metadata   | casadi::BonMinMe |
|                   |               | (a dictionary     | ssageHandler     |
|                   |               | with lists of     |                  |
|                   |               | strings) about    |                  |
|                   |               | variables to be   |                  |
|                   |               | passed to BONMIN  |                  |
+-------------------+---------------+-------------------+------------------+
| verbose_init      | OT_BOOL       | Print out timing  | casadi::Nlpsol   |
|                   |               | information about |                  |
|                   |               | the different     |                  |
|                   |               | stages of         |                  |
|                   |               | initialization    |                  |
+-------------------+---------------+-------------------+------------------+
| warn_initial_boun | OT_BOOL       | Warn if the       | casadi::Nlpsol   |
| ds                |               | initial guess     |                  |
|                   |               | does not satisfy  |                  |
|                   |               | LBX and UBX       |                  |
+-------------------+---------------+-------------------+------------------+

Diagrams
--------



C++ includes: b0_options.hpp ";


// File: classcasadi_1_1BonminUserClass.xml
%feature("docstring") casadi::BonminUserClass "[INTERNAL] C++ includes:
bonmin_nlp.hpp ";

%feature("docstring") casadi::BonminUserClass::finalize_solution "[INTERNAL]  This method is called when the algorithm is complete so the TNLP
can store/write the solution

";

%feature("docstring") casadi::BonminUserClass::eval_g "[INTERNAL]  Method
to return the constraint residuals

";

%feature("docstring") casadi::BonminUserClass::eval_f "[INTERNAL]  Method
to return the objective value

";

%feature("docstring") casadi::BonminUserClass::get_constraints_linearity "[INTERNAL] ";

%feature("docstring") casadi::BonminUserClass::BonminUserClass "[INTERNAL]
";

%feature("docstring") casadi::BonminUserClass::get_starting_point "[INTERNAL]  Method to return the starting point for the algorithm

";

%feature("docstring")
casadi::BonminUserClass::get_number_of_nonlinear_variables "[INTERNAL]
Specify the number of variables that appear in the Hessian

";

%feature("docstring") casadi::BonminUserClass::eval_jac_g "[INTERNAL]
Method to return: 1) The structure of the Jacobian (if \"values\" is NULL)
2) The values of the Jacobian (if \"values\" is not NULL)

";

%feature("docstring") casadi::BonminUserClass::intermediate_callback "[INTERNAL]  This method is called at every iteration

";

%feature("docstring") casadi::BonminUserClass::eval_h "[INTERNAL]  Method
to return: 1) The structure of the hessian of the Lagrangian (if \"values\"
is NULL) 2) The values of the hessian of the Lagrangian (if \"values\" is
not NULL)

";

%feature("docstring") casadi::BonminUserClass::get_variables_types "[INTERNAL] ";

%feature("docstring") casadi::BonminUserClass::~BonminUserClass "[INTERNAL]
";

%feature("docstring")
casadi::BonminUserClass::get_list_of_nonlinear_variables "[INTERNAL]
Specify which variables that appear in the Hessian

";

%feature("docstring") casadi::BonminUserClass::get_bounds_info "[INTERNAL]
Method to return the bounds for my problem

";

%feature("docstring") casadi::BonminUserClass::sosConstraints "[INTERNAL]
";

%feature("docstring") casadi::BonminUserClass::get_nlp_info "[INTERNAL]
Method to return some info about the nlp

";

%feature("docstring") casadi::BonminUserClass::branchingInfo "[INTERNAL] ";

%feature("docstring") casadi::BonminUserClass::eval_grad_f "[INTERNAL]
Method to return the gradient of the objective

";

%feature("docstring") casadi::BonminUserClass::get_variables_linearity "[INTERNAL] ";


// File: classcasadi_1_1BSpline.xml
%feature("docstring") casadi::BSpline::get_reltol "[INTERNAL]  Get relative
tolerance.

";

%feature("docstring") casadi::BSpline::replace_aseed "[INTERNAL]  Replace
0-by-0 reverse seeds.

";

%feature("docstring") casadi::BSpline::get_sparsity_in "

Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::BSpline::generate_dependencies "[INTERNAL]
Export / Generate C code for the dependency function.

";

%feature("docstring") casadi::BSpline::symbolic_output "[INTERNAL]  Get a
vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::BSpline::has_reverse "

Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::BSpline::replace_arg "[INTERNAL]  Replace
0-by-0 inputs.

";

%feature("docstring") casadi::BSpline::get_name_out "[INTERNAL]  Names of
function input and outputs.

";

%feature("docstring") casadi::BSpline::get_default_in "[INTERNAL]  Get
default input value.

";

%feature("docstring") casadi::BSpline::sx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::BSpline::matching_arg "[INTERNAL]  Check if
input arguments that needs to be replaced.

";

%feature("docstring") casadi::BSpline::has_function "[INTERNAL] ";

%feature("docstring") casadi::BSpline::construct "[INTERNAL]  Construct
Prepares the function for evaluation.

";

%feature("docstring") casadi::BSpline::slice "[INTERNAL]  returns a new
function with a selection of inputs/outputs of the original

";

%feature("docstring") casadi::BSpline::numel_in "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::BSpline::sparsity_jac "[INTERNAL]  Get, if
necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::BSpline::getAtomicInput "

[DEPRECATED] Renamed instruction_index

";

%feature("docstring") casadi::BSpline::self "[INTERNAL]  Get a public class
instance.

";

%feature("docstring") casadi::BSpline::mx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::BSpline::size1_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::BSpline::sp_forward "[INTERNAL]  Propagate
sparsity forward.

";

%feature("docstring") casadi::BSpline::checkout "[INTERNAL]  Checkout a
memory object.

";

%feature("docstring") casadi::BSpline::class_name "

Readable name of the internal class.

";

%feature("docstring") casadi::BSpline::finalize "[INTERNAL]  Finalize the
object creation.

";

%feature("docstring") casadi::BSpline::free_mem "[INTERNAL]  Free memory
block.

";

%feature("docstring") casadi::BSpline::mapsum_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::BSpline::free_mx "[INTERNAL]  Get free
variables ( MX)

";

%feature("docstring") casadi::BSpline::getJacSparsityGen "[INTERNAL]  Get
the sparsity pattern, forward mode.

";

%feature("docstring") casadi::BSpline::getAtomicOutput "

[DEPRECATED] Renamed instruction_output

";

%feature("docstring") casadi::BSpline::get_options "

Options.

";

%feature("docstring") casadi::BSpline::n_nodes "[INTERNAL]  Number of nodes
in the algorithm.

";

%feature("docstring") casadi::BSpline::disp "[INTERNAL]  Display object.

";

%feature("docstring") casadi::BSpline::export_code "[INTERNAL]  Export
function in a specific language.

";

%feature("docstring") casadi::BSpline::get_max_in "[INTERNAL]  Get largest
input value.

";

%feature("docstring") casadi::BSpline::print_options "[INTERNAL]  Print
list of options.

";

%feature("docstring") casadi::BSpline::numel_out "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::BSpline::get_forward "

Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::BSpline::adjViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::BSpline::get_jacobian_sparsity "[INTERNAL]
Get Jacobian sparsity.

";

%feature("docstring") casadi::BSpline::get_jacobian "

Return Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::BSpline::symbolicAdjSeed "[INTERNAL]
Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::BSpline::which_depends "[INTERNAL]  Which
variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::BSpline::all_scalar "[INTERNAL]  Are all
inputs and outputs scalar.

";

%feature("docstring") casadi::BSpline::eval_gen "

>  int casadi::FunctionInternal::eval_gen(const double **arg, double **res, int *iw, double *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate numerically.

>  int casadi::FunctionInternal::eval_gen(const SXElem **arg, SXElem **res, int *iw, SXElem *w, void *mem) const

>  int casadi::FunctionInternal::eval_gen(const bvec_t **arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

%feature("docstring") casadi::BSpline::print_option "[INTERNAL]  Print all
information there is to know about a certain option.

";

%feature("docstring") casadi::BSpline::sp_reverse "[INTERNAL]  Propagate
sparsity backwards.

";

%feature("docstring") casadi::BSpline::n_instructions "[INTERNAL]  Get the
number of atomic operations.

";

%feature("docstring") casadi::BSpline::has_codegen "

Is codegen supported?

";

%feature("docstring") casadi::BSpline::alloc_iw "[INTERNAL]  Ensure
required length of iw field.

";

%feature("docstring") casadi::BSpline::alloc_w "[INTERNAL]  Ensure required
length of w field.

";

%feature("docstring") casadi::BSpline::sx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::BSpline::get_sparsity_out "

Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::BSpline::size_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::BSpline::eval_sx "[INTERNAL]  Evaluate with
symbolic scalars.

";

%feature("docstring") casadi::BSpline::index_in "[INTERNAL]  Get input
scheme index by name.

";

%feature("docstring") casadi::BSpline::size2_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::BSpline::sz_iw "[INTERNAL]  Get required
length of iw field.

";

%feature("docstring") casadi::BSpline::is_a "[INTERNAL]  Check if the
function is of a particular type.

";

%feature("docstring") casadi::BSpline::setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";

%feature("docstring") casadi::BSpline::eval_dm "[INTERNAL]  Evaluate with
DM matrices.

";

%feature("docstring") casadi::BSpline::replace_fseed "[INTERNAL]  Replace
0-by-0 forward seeds.

";

%feature("docstring") casadi::BSpline::has_sprev "[INTERNAL]  Is the class
able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::BSpline::get_function "[INTERNAL] ";

%feature("docstring") casadi::BSpline::instruction_MX "[INTERNAL]  get MX
expression associated with instruction

";

%feature("docstring") casadi::BSpline::get_n_out "

Number of function inputs and outputs.

";

%feature("docstring") casadi::BSpline::set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::BSpline::factory "[INTERNAL] ";

%feature("docstring") casadi::BSpline::clear_mem "[INTERNAL]  Clear all
memory (called from destructor)

";

%feature("docstring") casadi::BSpline::definition "[INTERNAL]  Get function
signature: name:(inputs)->(outputs)

";

%feature("docstring") casadi::BSpline::reverse "[INTERNAL]  Return function
that calculates adjoint derivatives reverse(nadj) returns a cached instance
if available, and calls  Function get_reverse(int nadj) if no cached version
is available.

";

%feature("docstring") casadi::BSpline::init "

Initialize.

";

%feature("docstring") casadi::BSpline::get_reverse "

Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::BSpline::set_temp "[INTERNAL]  Set the
(temporary) work vectors.

";

%feature("docstring") casadi::BSpline::get_free "[INTERNAL]  Print free
variables.

";

%feature("docstring") casadi::BSpline::wrap "[INTERNAL]  Wrap in an
Function instance consisting of only one MX call.

";

%feature("docstring") casadi::BSpline::size_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::BSpline::fwd_seed "[INTERNAL]  Symbolic
expressions for the forward seeds.

";

%feature("docstring") casadi::BSpline::sz_res "[INTERNAL]  Get required
length of res field.

";

%feature("docstring") casadi::BSpline::codegen "[INTERNAL]  Generate code
the function.

";

%feature("docstring") casadi::BSpline::mx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::BSpline::generate_lifted "[INTERNAL]  Extract
the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::BSpline::alloc_arg "[INTERNAL]  Ensure
required length of arg field.

";

%feature("docstring") casadi::BSpline::replace_res "[INTERNAL]  Replace
0-by-0 outputs.

";

%feature("docstring") casadi::BSpline::print "[INTERNAL]  C-style formatted
printing during evaluation.

";

%feature("docstring") casadi::BSpline::ad_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::BSpline::init_mem "[INTERNAL]  Initalize
memory block.

";

%feature("docstring") casadi::BSpline::index_out "[INTERNAL]  Get output
scheme index by name.

";

%feature("docstring") casadi::BSpline::get_name_in "[INTERNAL]  Names of
function input and outputs.

";

%feature("docstring") casadi::BSpline::jacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::BSpline::nnz_out "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::BSpline::codegen_declarations "

Generate code for the declarations of the C function.

";

%feature("docstring") casadi::BSpline::sz_work "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") casadi::BSpline::disp_more "[INTERNAL]  Print more.

";

%feature("docstring") casadi::BSpline::get_min_in "[INTERNAL]  Get smallest
input value.

";

%feature("docstring") casadi::BSpline::get_partition "[INTERNAL]  Get the
unidirectional or bidirectional partition.

";

%feature("docstring") casadi::BSpline::codegen_body "

Generate code for the body of the C function.

";

%feature("docstring") casadi::BSpline::alloc_mem "[INTERNAL]  Create memory
block.

";

%feature("docstring") casadi::BSpline::call_reverse "[INTERNAL]  Reverse
mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::BSpline::fwdViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::BSpline::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::BSpline::sp_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode, sparsity propagation.

";

%feature("docstring") casadi::BSpline::call "[INTERNAL]   Call a function,
templated.

";

%feature("docstring") casadi::BSpline::memory "[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::BSpline::get_abstol "[INTERNAL]  Get absolute
tolerance.

";

%feature("docstring") casadi::BSpline::has_derivative "[INTERNAL]  Can
derivatives be calculated in any way?

";

%feature("docstring") casadi::BSpline::oracle "[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::BSpline::has_jacobian "

Return Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::BSpline::getAdaptorSolverName "[INTERNAL]
Obtain solver name from Adaptor.

";

%feature("docstring") casadi::BSpline::codegen_name "[INTERNAL]  Get name
in codegen.

";

%feature("docstring") casadi::BSpline::print_dimensions "[INTERNAL]  Print
dimensions of inputs and outputs.

";

%feature("docstring") casadi::BSpline::codegen_decref "[INTERNAL]  Codegen
decref for dependencies.

";

%feature("docstring") casadi::BSpline::codegen_meta "[INTERNAL]  Generate
meta-information allowing a user to evaluate a generated function.

";

%feature("docstring") casadi::BSpline::check_res "[INTERNAL]  Check if
output arguments have correct length and dimensions.

";

%feature("docstring") casadi::BSpline::get_n_in "

Number of function inputs and outputs.

";

%feature("docstring") casadi::BSpline::forward "[INTERNAL]  Return function
that calculates forward derivatives forward(nfwd) returns a cached instance
if available, and calls  Function get_forward(int nfwd) if no cached version
is available.

";

%feature("docstring") casadi::BSpline::size1_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::BSpline::get_stats "[INTERNAL]  Get all
statistics.

";

%feature("docstring") casadi::BSpline::has_free "[INTERNAL]  Does the
function have free variables.

";

%feature("docstring") casadi::BSpline::getJacSparsityHierarchicalSymm "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::BSpline::has_forward "

Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::BSpline::call_forward "[INTERNAL]  Forward
mode AD, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::BSpline::eval "

Evaluate numerically, work vectors given.

";

%feature("docstring") casadi::BSpline::signature "[INTERNAL]  Code generate
the function.

";

%feature("docstring") casadi::BSpline::instruction_id "[INTERNAL]  Get an
atomic operation operator index.

";

%feature("docstring") casadi::BSpline::instruction_constant "[INTERNAL]
Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::BSpline::instruction_output "[INTERNAL]  Get
the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::BSpline::getJacSparsity "[INTERNAL]  Generate
the sparsity of a Jacobian block.

";

%feature("docstring") casadi::BSpline::release "[INTERNAL]  Release a
memory object.

";

%feature("docstring") casadi::BSpline::uses_output "[INTERNAL]  Do the
derivative functions need nondifferentiated outputs?

";

%feature("docstring") casadi::BSpline::nnz_in "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::BSpline::getJacSparsityHierarchical "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::BSpline::sprint "[INTERNAL]  C-style
formatted printing to string.

";

%feature("docstring") casadi::BSpline "

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| enable_fd        | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation by   |                  |
|                  |                 | finite           |                  |
|                  |                 | differencing.    |                  |
|                  |                 | [default:        |                  |
|                  |                 | false]]          |                  |
+------------------+-----------------+------------------+------------------+
| enable_forward   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using forward    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_jacobian  | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobians of all |                  |
|                  |                 | differentiable   |                  |
|                  |                 | outputs with     |                  |
|                  |                 | respect to all   |                  |
|                  |                 | differentiable   |                  |
|                  |                 | inputs - if      |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_reverse   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | transposed       |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using reverse    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| fd_method        | OT_STRING       | Method for       | casadi::Function |
|                  |                 | finite           | Internal         |
|                  |                 | differencing     |                  |
|                  |                 | [default         |                  |
|                  |                 | 'central']       |                  |
+------------------+-----------------+------------------+------------------+
| fd_options       | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | finite           |                  |
|                  |                 | difference       |                  |
|                  |                 | instance         |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| lookup_mode      | OT_STRINGVECTOR | Sets, for each   | casadi::BSpline  |
|                  |                 | grid dimenion,   |                  |
|                  |                 | the lookup       |                  |
|                  |                 | algorithm used   |                  |
|                  |                 | to find the      |                  |
|                  |                 | correct index.   |                  |
|                  |                 | 'linear' uses a  |                  |
|                  |                 | for-loop +       |                  |
|                  |                 | break; 'exact'   |                  |
|                  |                 | uses floored     |                  |
|                  |                 | division (only   |                  |
|                  |                 | for uniform      |                  |
|                  |                 | grids).          |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: bspline.hpp ";

%feature("docstring") casadi::BSpline::alloc_res "[INTERNAL]  Ensure
required length of res field.

";

%feature("docstring") casadi::BSpline::free_sx "[INTERNAL]  Get free
variables (SX)

";

%feature("docstring") casadi::BSpline::jit_dependencies "[INTERNAL]  Jit
dependencies.

";

%feature("docstring") casadi::BSpline::matching_res "[INTERNAL]  Check if
output arguments that needs to be replaced.

";

%feature("docstring") casadi::BSpline::sz_w "[INTERNAL]  Get required
length of w field.

";

%feature("docstring") casadi::BSpline::sz_arg "[INTERNAL]  Get required
length of arg field.

";

%feature("docstring") casadi::BSpline::codegen_incref "[INTERNAL]  Codegen
incref for dependencies.

";

%feature("docstring") casadi::BSpline::alloc "[INTERNAL]  Ensure work
vectors long enough to evaluate function.

";

%feature("docstring") casadi::BSpline::~BSpline "

Destructor.

";

%feature("docstring") casadi::BSpline::instruction_input "[INTERNAL]  Get
the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::BSpline::size2_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::BSpline::info "[INTERNAL]  Obtain information
about function

";

%feature("docstring") casadi::BSpline::eval_mx "[INTERNAL]  Evaluate with
symbolic matrices.

";

%feature("docstring") casadi::BSpline::check_arg "[INTERNAL]  Check if
input arguments have correct length and dimensions.

";

%feature("docstring") casadi::BSpline::codegen_sparsities "[INTERNAL]
Codegen sparsities.

";

%feature("docstring") casadi::BSpline::BSpline "";

%feature("docstring") casadi::BSpline::call_gen "[INTERNAL]   Call a
function, overloaded.

";

%feature("docstring") casadi::BSpline::has_spfwd "[INTERNAL]  Is the class
able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::BSpline::getCount "[INTERNAL]  Get the
reference count.

";


// File: classcasadi_1_1BSplineCommon.xml
%feature("docstring") casadi::BSplineCommon::eval_gen "

>  int casadi::FunctionInternal::eval_gen(const double **arg, double **res, int *iw, double *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate numerically.

>  int casadi::FunctionInternal::eval_gen(const SXElem **arg, SXElem **res, int *iw, SXElem *w, void *mem) const

>  int casadi::FunctionInternal::eval_gen(const bvec_t **arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

%feature("docstring") casadi::BSplineCommon::instruction_id "[INTERNAL]
Get an atomic operation operator index.

";

%feature("docstring") casadi::BSplineCommon::set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::BSplineCommon::eval_mx "[INTERNAL]  Evaluate
with symbolic matrices.

";

%feature("docstring") casadi::BSplineCommon::sz_w "[INTERNAL]  Get required
length of w field.

";

%feature("docstring") casadi::BSplineCommon::get_reverse "[INTERNAL]
Return function that calculates adjoint derivatives reverse(nadj) returns a
cached instance if available, and calls  Function get_reverse(int nadj) if
no cached version is available.

";

%feature("docstring") casadi::BSplineCommon::get_free "[INTERNAL]  Print
free variables.

";

%feature("docstring") casadi::BSplineCommon::set_temp "[INTERNAL]  Set the
(temporary) work vectors.

";

%feature("docstring") casadi::BSplineCommon::symbolic_output "[INTERNAL]
Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::BSplineCommon::print_options "[INTERNAL]
Print list of options.

";

%feature("docstring") casadi::BSplineCommon::release "[INTERNAL]  Release a
memory object.

";

%feature("docstring") casadi::BSplineCommon::get_max_in "[INTERNAL]  Get
largest input value.

";

%feature("docstring") casadi::BSplineCommon::init_mem "[INTERNAL]
Initalize memory block.

";

%feature("docstring") casadi::BSplineCommon::eval "[INTERNAL]  Evaluate
numerically.

";

%feature("docstring") casadi::BSplineCommon::uses_output "[INTERNAL]  Do
the derivative functions need nondifferentiated outputs?

";

%feature("docstring") casadi::BSplineCommon::has_sprev "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::BSplineCommon::instruction_input "[INTERNAL]
Get the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::BSplineCommon::getAdaptorSolverName "[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring") casadi::BSplineCommon "

Base class for BSpline evaluators

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| enable_fd        | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation by   |                  |
|                  |                 | finite           |                  |
|                  |                 | differencing.    |                  |
|                  |                 | [default:        |                  |
|                  |                 | false]]          |                  |
+------------------+-----------------+------------------+------------------+
| enable_forward   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using forward    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_jacobian  | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobians of all |                  |
|                  |                 | differentiable   |                  |
|                  |                 | outputs with     |                  |
|                  |                 | respect to all   |                  |
|                  |                 | differentiable   |                  |
|                  |                 | inputs - if      |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_reverse   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | transposed       |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using reverse    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| fd_method        | OT_STRING       | Method for       | casadi::Function |
|                  |                 | finite           | Internal         |
|                  |                 | differencing     |                  |
|                  |                 | [default         |                  |
|                  |                 | 'central']       |                  |
+------------------+-----------------+------------------+------------------+
| fd_options       | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | finite           |                  |
|                  |                 | difference       |                  |
|                  |                 | instance         |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| lookup_mode      | OT_STRINGVECTOR | Sets, for each   | casadi::BSplineC |
|                  |                 | grid dimenion,   | ommon            |
|                  |                 | the lookup       |                  |
|                  |                 | algorithm used   |                  |
|                  |                 | to find the      |                  |
|                  |                 | correct index.   |                  |
|                  |                 | 'linear' uses a  |                  |
|                  |                 | for-loop +       |                  |
|                  |                 | break; 'exact'   |                  |
|                  |                 | uses floored     |                  |
|                  |                 | division (only   |                  |
|                  |                 | for uniform      |                  |
|                  |                 | grids).          |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: bspline.hpp ";

%feature("docstring") casadi::BSplineCommon::clear_mem "[INTERNAL]  Clear
all memory (called from destructor)

";

%feature("docstring") casadi::BSplineCommon::codegen_name "[INTERNAL]  Get
name in codegen.

";

%feature("docstring") casadi::BSplineCommon::get_forward "[INTERNAL]
Return function that calculates forward derivatives forward(nfwd) returns a
cached instance if available, and calls  Function get_forward(int nfwd) if
no cached version is available.

";

%feature("docstring") casadi::BSplineCommon::construct "[INTERNAL]
Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::BSplineCommon::slice "[INTERNAL]  returns a
new function with a selection of inputs/outputs of the original

";

%feature("docstring") casadi::BSplineCommon::sx_in "[INTERNAL]  Get
function input(s) and output(s)

";

%feature("docstring") casadi::BSplineCommon::self "[INTERNAL]  Get a public
class instance.

";

%feature("docstring") casadi::BSplineCommon::alloc_arg "[INTERNAL]  Ensure
required length of arg field.

";

%feature("docstring") casadi::BSplineCommon::has_free "[INTERNAL]  Does the
function have free variables.

";

%feature("docstring") casadi::BSplineCommon::check_res "[INTERNAL]  Check
if output arguments have correct length and dimensions.

";

%feature("docstring") casadi::BSplineCommon::export_code "[INTERNAL]
Export function in a specific language.

";

%feature("docstring") casadi::BSplineCommon::which_depends "[INTERNAL]
Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::BSplineCommon::print_option "[INTERNAL]
Print all information there is to know about a certain option.

";

%feature("docstring") casadi::BSplineCommon::size2_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::BSplineCommon::matching_arg "[INTERNAL]
Check if input arguments that needs to be replaced.

";

%feature("docstring") casadi::BSplineCommon::codegen_sparsities "[INTERNAL]
Codegen sparsities.

";

%feature("docstring") casadi::BSplineCommon::has_jacobian "[INTERNAL]
Return Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::BSplineCommon::getJacSparsityHierarchical "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::BSplineCommon::get_jacobian "[INTERNAL]
Return Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::BSplineCommon::sp_forward "[INTERNAL]
Propagate sparsity forward.

";

%feature("docstring") casadi::BSplineCommon::memory "[INTERNAL]  Memory
objects.

";

%feature("docstring") casadi::BSplineCommon::size_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::BSplineCommon::replace_fseed "[INTERNAL]
Replace 0-by-0 forward seeds.

";

%feature("docstring") casadi::BSplineCommon::get_n_out "

Number of function inputs and outputs.

";

%feature("docstring") casadi::BSplineCommon::setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";

%feature("docstring") casadi::BSplineCommon::eval_dm "[INTERNAL]  Evaluate
with DM matrices.

";

%feature("docstring") casadi::BSplineCommon::print "[INTERNAL]  C-style
formatted printing during evaluation.

";

%feature("docstring") casadi::BSplineCommon::jit_dependencies "[INTERNAL]
Jit dependencies.

";

%feature("docstring") casadi::BSplineCommon::forward "[INTERNAL]  Return
function that calculates forward derivatives forward(nfwd) returns a cached
instance if available, and calls  Function get_forward(int nfwd) if no
cached version is available.

";

%feature("docstring") casadi::BSplineCommon::info "[INTERNAL]  Obtain
information about function

";

%feature("docstring") casadi::BSplineCommon::sx_out "[INTERNAL]  Get
function input(s) and output(s)

";

%feature("docstring") casadi::BSplineCommon::getJacSparsity "[INTERNAL]
Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::BSplineCommon::n_instructions "[INTERNAL]
Get the number of atomic operations.

";

%feature("docstring") casadi::BSplineCommon::call_forward "[INTERNAL]
Forward mode AD, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::BSplineCommon::check_arg "[INTERNAL]  Check
if input arguments have correct length and dimensions.

";

%feature("docstring") casadi::BSplineCommon::eval_sx "[INTERNAL]  Evaluate
with symbolic scalars.

";

%feature("docstring") casadi::BSplineCommon::get_sparsity_out "[INTERNAL]
Get sparsity of a given output.

";

%feature("docstring") casadi::BSplineCommon::reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::BSplineCommon::sparsity_jac "[INTERNAL]  Get,
if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::BSplineCommon::index_out "[INTERNAL]  Get
output scheme index by name.

";

%feature("docstring") casadi::BSplineCommon::get_name_out "[INTERNAL]
Names of function input and outputs.

";

%feature("docstring") casadi::BSplineCommon::symbolicAdjSeed "[INTERNAL]
Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::BSplineCommon::get_name_in "[INTERNAL]  Names
of function input and outputs.

";

%feature("docstring") casadi::BSplineCommon::free_mem "[INTERNAL]  Free
memory block.

";

%feature("docstring") casadi::BSplineCommon::disp_more "[INTERNAL]  Print
more.

";

%feature("docstring") casadi::BSplineCommon::has_spfwd "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::BSplineCommon::fwdViaJac "[INTERNAL]
Calculate derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::BSplineCommon::size_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::BSplineCommon::instruction_constant "[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::BSplineCommon::getJacSparsityHierarchicalSymm
"[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::BSplineCommon::has_forward "[INTERNAL]
Return function that calculates forward derivatives forward(nfwd) returns a
cached instance if available, and calls  Function get_forward(int nfwd) if
no cached version is available.

";

%feature("docstring") casadi::BSplineCommon::n_nodes "[INTERNAL]  Number of
nodes in the algorithm.

";

%feature("docstring") casadi::BSplineCommon::adjViaJac "[INTERNAL]
Calculate derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::BSplineCommon::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::BSplineCommon::index_in "[INTERNAL]  Get
input scheme index by name.

";

%feature("docstring") casadi::BSplineCommon::get_stats "[INTERNAL]  Get all
statistics.

";

%feature("docstring") casadi::BSplineCommon::call "[INTERNAL]   Call a
function, templated.

";

%feature("docstring") casadi::BSplineCommon::getAtomicOutput "

[DEPRECATED] Renamed instruction_output

";

%feature("docstring") casadi::BSplineCommon::get_n_in "

Number of function inputs and outputs.

";

%feature("docstring") casadi::BSplineCommon::generate_lifted "[INTERNAL]
Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::BSplineCommon::call_reverse "[INTERNAL]
Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::BSplineCommon::matching_res "[INTERNAL]
Check if output arguments that needs to be replaced.

";

%feature("docstring") casadi::BSplineCommon::disp "[INTERNAL]  Display
object.

";

%feature("docstring") casadi::BSplineCommon::factory "[INTERNAL] ";

%feature("docstring") casadi::BSplineCommon::codegen_declarations "[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring") casadi::BSplineCommon::alloc_w "[INTERNAL]  Ensure
required length of w field.

";

%feature("docstring") casadi::BSplineCommon::generate_dependencies "[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring") casadi::BSplineCommon::alloc "[INTERNAL]  Ensure work
vectors long enough to evaluate function.

";

%feature("docstring") casadi::BSplineCommon::free_mx "[INTERNAL]  Get free
variables ( MX)

";

%feature("docstring") casadi::BSplineCommon::codegen_incref "[INTERNAL]
Codegen incref for dependencies.

";

%feature("docstring") casadi::BSplineCommon::has_reverse "[INTERNAL]
Return function that calculates adjoint derivatives reverse(nadj) returns a
cached instance if available, and calls  Function get_reverse(int nadj) if
no cached version is available.

";

%feature("docstring") casadi::BSplineCommon::sprint "[INTERNAL]  C-style
formatted printing to string.

";

%feature("docstring") casadi::BSplineCommon::has_derivative "[INTERNAL]
Can derivatives be calculated in any way?

";

%feature("docstring") casadi::BSplineCommon::codegen_meta "[INTERNAL]
Generate meta-information allowing a user to evaluate a generated function.

";

%feature("docstring") casadi::BSplineCommon::numel_out "[INTERNAL]  Number
of input/output elements.

";

%feature("docstring") casadi::BSplineCommon::size1_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::BSplineCommon::codegen "[INTERNAL]  Generate
code the function.

";

%feature("docstring") casadi::BSplineCommon::size1_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::BSplineCommon::mx_in "[INTERNAL]  Get
function input(s) and output(s)

";

%feature("docstring") casadi::BSplineCommon::sp_reverse "[INTERNAL]
Propagate sparsity backwards.

";

%feature("docstring") casadi::BSplineCommon::mapsum_mx "[INTERNAL]
Parallel evaluation.

";

%feature("docstring") casadi::BSplineCommon::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::BSplineCommon::get_jacobian_sparsity "[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::BSplineCommon::wrap "[INTERNAL]  Wrap in an
Function instance consisting of only one MX call.

";

%feature("docstring") casadi::BSplineCommon::class_name "[INTERNAL]
Readable name of the internal class.

";

%feature("docstring") casadi::BSplineCommon::alloc_iw "[INTERNAL]  Ensure
required length of iw field.

";

%feature("docstring") casadi::BSplineCommon::alloc_mem "[INTERNAL]  Create
memory block.

";

%feature("docstring") casadi::BSplineCommon::getJacSparsityGen "[INTERNAL]
Get the sparsity pattern, forward mode.

";

%feature("docstring") casadi::BSplineCommon::getAtomicInput "

[DEPRECATED] Renamed instruction_index

";

%feature("docstring") casadi::BSplineCommon::codegen_decref "[INTERNAL]
Codegen decref for dependencies.

";

%feature("docstring") casadi::BSplineCommon::nnz_out "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::BSplineCommon::replace_res "[INTERNAL]
Replace 0-by-0 outputs.

";

%feature("docstring") casadi::BSplineCommon::alloc_res "[INTERNAL]  Ensure
required length of res field.

";

%feature("docstring") casadi::BSplineCommon::definition "[INTERNAL]  Get
function signature: name:(inputs)->(outputs)

";

%feature("docstring") casadi::BSplineCommon::BSplineCommon "";

%feature("docstring") casadi::BSplineCommon::get_min_in "[INTERNAL]  Get
smallest input value.

";

%feature("docstring") casadi::BSplineCommon::fwd_seed "[INTERNAL]  Symbolic
expressions for the forward seeds.

";

%feature("docstring") casadi::BSplineCommon::get_partition "[INTERNAL]  Get
the unidirectional or bidirectional partition.

";

%feature("docstring") casadi::BSplineCommon::jacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::BSplineCommon::checkout "[INTERNAL]  Checkout
a memory object.

";

%feature("docstring") casadi::BSplineCommon::nnz_in "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::BSplineCommon::replace_arg "[INTERNAL]
Replace 0-by-0 inputs.

";

%feature("docstring") casadi::BSplineCommon::sz_res "[INTERNAL]  Get
required length of res field.

";

%feature("docstring") casadi::BSplineCommon::free_sx "[INTERNAL]  Get free
variables (SX)

";

%feature("docstring") casadi::BSplineCommon::print_dimensions "[INTERNAL]
Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::BSplineCommon::numel_in "[INTERNAL]  Number
of input/output elements.

";

%feature("docstring") casadi::BSplineCommon::get_abstol "[INTERNAL]  Get
absolute tolerance.

";

%feature("docstring") casadi::BSplineCommon::finalize "[INTERNAL]  Finalize
the object creation.

";

%feature("docstring") casadi::BSplineCommon::replace_aseed "[INTERNAL]
Replace 0-by-0 reverse seeds.

";

%feature("docstring") casadi::BSplineCommon::call_gen "[INTERNAL]   Call a
function, overloaded.

";

%feature("docstring") casadi::BSplineCommon::sz_work "[INTERNAL]  Get
number of temporary variables needed.

";

%feature("docstring") casadi::BSplineCommon::signature "[INTERNAL]  Code
generate the function.

";

%feature("docstring") casadi::BSplineCommon::init "

Initialize.

";

%feature("docstring") casadi::BSplineCommon::sz_iw "[INTERNAL]  Get
required length of iw field.

";

%feature("docstring") casadi::BSplineCommon::instruction_output "[INTERNAL]
Get the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::BSplineCommon::has_function "[INTERNAL] ";

%feature("docstring") casadi::BSplineCommon::is_a "[INTERNAL]  Check if the
function is of a particular type.

";

%feature("docstring") casadi::BSplineCommon::get_sparsity_in "[INTERNAL]
Get sparsity of a given input.

";

%feature("docstring") casadi::BSplineCommon::mx_out "[INTERNAL]  Get
function input(s) and output(s)

";

%feature("docstring") casadi::BSplineCommon::codegen_body "[INTERNAL]
Generate code for the function body.

";

%feature("docstring") casadi::BSplineCommon::get_function "[INTERNAL] ";

%feature("docstring") casadi::BSplineCommon::sz_arg "[INTERNAL]  Get
required length of arg field.

";

%feature("docstring") casadi::BSplineCommon::get_reltol "[INTERNAL]  Get
relative tolerance.

";

%feature("docstring") casadi::BSplineCommon::get_options "

Options.

";

%feature("docstring") casadi::BSplineCommon::instruction_MX "[INTERNAL]
get MX expression associated with instruction

";

%feature("docstring") casadi::BSplineCommon::has_codegen "[INTERNAL]  Is
codegen supported?

";

%feature("docstring") casadi::BSplineCommon::get_default_in "[INTERNAL]
Get default input value.

";

%feature("docstring") casadi::BSplineCommon::ad_weight "[INTERNAL]
Weighting factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::BSplineCommon::sp_weight "[INTERNAL]
Weighting factor for chosing forward/reverse mode, sparsity propagation.

";

%feature("docstring") casadi::BSplineCommon::all_scalar "[INTERNAL]  Are
all inputs and outputs scalar.

";

%feature("docstring") casadi::BSplineCommon::size2_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::BSplineCommon::oracle "[INTERNAL]  Get
oracle.

";


// File: classcasadi_1_1BSplineDual.xml
%feature("docstring") casadi::BSplineDual::construct "[INTERNAL]  Construct
Prepares the function for evaluation.

";

%feature("docstring") casadi::BSplineDual::codegen_name "[INTERNAL]  Get
name in codegen.

";

%feature("docstring") casadi::BSplineDual::get_default_in "[INTERNAL]  Get
default input value.

";

%feature("docstring") casadi::BSplineDual::eval_gen "

>  int casadi::FunctionInternal::eval_gen(const double **arg, double **res, int *iw, double *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate numerically.

>  int casadi::FunctionInternal::eval_gen(const SXElem **arg, SXElem **res, int *iw, SXElem *w, void *mem) const

>  int casadi::FunctionInternal::eval_gen(const bvec_t **arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

%feature("docstring") casadi::BSplineDual::sx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::BSplineDual::symbolic_output "[INTERNAL]  Get
a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::BSplineDual::codegen_declarations "

Generate code for the declarations of the C function.

";

%feature("docstring") casadi::BSplineDual::get_abstol "[INTERNAL]  Get
absolute tolerance.

";

%feature("docstring") casadi::BSplineDual::finalize "[INTERNAL]  Finalize
the object creation.

";

%feature("docstring") casadi::BSplineDual::set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::BSplineDual::has_forward "

Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::BSplineDual::signature "[INTERNAL]  Code
generate the function.

";

%feature("docstring") casadi::BSplineDual::sp_reverse "

Propagate sparsity backwards.

";

%feature("docstring") casadi::BSplineDual::get_jacobian_sparsity "[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::BSplineDual::alloc_res "[INTERNAL]  Ensure
required length of res field.

";

%feature("docstring") casadi::BSplineDual::sz_work "[INTERNAL]  Get number
of temporary variables needed.

";

%feature("docstring") casadi::BSplineDual::jacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::BSplineDual::self "[INTERNAL]  Get a public
class instance.

";

%feature("docstring") casadi::BSplineDual::all_scalar "[INTERNAL]  Are all
inputs and outputs scalar.

";

%feature("docstring") casadi::BSplineDual::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::BSplineDual::getJacSparsityHierarchicalSymm "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::BSplineDual::eval_sx "[INTERNAL]  Evaluate
with symbolic scalars.

";

%feature("docstring") casadi::BSplineDual::alloc "[INTERNAL]  Ensure work
vectors long enough to evaluate function.

";

%feature("docstring") casadi::BSplineDual::call_forward "[INTERNAL]
Forward mode AD, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::BSplineDual::disp "[INTERNAL]  Display
object.

";

%feature("docstring") casadi::BSplineDual::replace_aseed "[INTERNAL]
Replace 0-by-0 reverse seeds.

";

%feature("docstring") casadi::BSplineDual::instruction_id "[INTERNAL]  Get
an atomic operation operator index.

";

%feature("docstring") casadi::BSplineDual::getAtomicOutput "

[DEPRECATED] Renamed instruction_output

";

%feature("docstring") casadi::BSplineDual::has_function "[INTERNAL] ";

%feature("docstring") casadi::BSplineDual::index_in "[INTERNAL]  Get input
scheme index by name.

";

%feature("docstring") casadi::BSplineDual::sz_w "[INTERNAL]  Get required
length of w field.

";

%feature("docstring") casadi::BSplineDual::get_name_out "[INTERNAL]  Names
of function input and outputs.

";

%feature("docstring") casadi::BSplineDual::alloc_iw "[INTERNAL]  Ensure
required length of iw field.

";

%feature("docstring") casadi::BSplineDual::get_sparsity_in "

Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::BSplineDual::get_options "

Options.

";

%feature("docstring") casadi::BSplineDual::init "

Initialize.

";

%feature("docstring") casadi::BSplineDual::size2_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::BSplineDual::get_name_in "[INTERNAL]  Names
of function input and outputs.

";

%feature("docstring") casadi::BSplineDual::set_temp "[INTERNAL]  Set the
(temporary) work vectors.

";

%feature("docstring") casadi::BSplineDual::replace_arg "[INTERNAL]  Replace
0-by-0 inputs.

";

%feature("docstring") casadi::BSplineDual::nnz_in "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::BSplineDual::getAtomicInput "

[DEPRECATED] Renamed instruction_index

";

%feature("docstring") casadi::BSplineDual::size1_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::BSplineDual::is_a "[INTERNAL]  Check if the
function is of a particular type.

";

%feature("docstring") casadi::BSplineDual::print "[INTERNAL]  C-style
formatted printing during evaluation.

";

%feature("docstring") casadi::BSplineDual::numel_in "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::BSplineDual::nnz_out "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::BSplineDual::call_gen "[INTERNAL]   Call a
function, overloaded.

";

%feature("docstring") casadi::BSplineDual::~BSplineDual "

Destructor.

";

%feature("docstring") casadi::BSplineDual::instruction_output "[INTERNAL]
Get the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::BSplineDual::fwd_seed "[INTERNAL]  Symbolic
expressions for the forward seeds.

";

%feature("docstring") casadi::BSplineDual::get_n_in "

Number of function inputs and outputs.

";

%feature("docstring") casadi::BSplineDual::get_jacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::BSplineDual::instruction_MX "[INTERNAL]  get
MX expression associated with instruction

";

%feature("docstring") casadi::BSplineDual::codegen_incref "[INTERNAL]
Codegen incref for dependencies.

";

%feature("docstring") casadi::BSplineDual::symbolicAdjSeed "[INTERNAL]
Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::BSplineDual::mx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::BSplineDual::fwdViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::BSplineDual::disp_more "[INTERNAL]  Print
more.

";

%feature("docstring") casadi::BSplineDual::slice "[INTERNAL]  returns a new
function with a selection of inputs/outputs of the original

";

%feature("docstring") casadi::BSplineDual::has_jacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::BSplineDual::alloc_arg "[INTERNAL]  Ensure
required length of arg field.

";

%feature("docstring") casadi::BSplineDual::get_stats "[INTERNAL]  Get all
statistics.

";

%feature("docstring") casadi::BSplineDual::has_codegen "

Is codegen supported?

";

%feature("docstring") casadi::BSplineDual::eval "

Evaluate numerically, work vectors given.

";

%feature("docstring") casadi::BSplineDual::clear_mem "[INTERNAL]  Clear all
memory (called from destructor)

";

%feature("docstring") casadi::BSplineDual::release "[INTERNAL]  Release a
memory object.

";

%feature("docstring") casadi::BSplineDual::memory "[INTERNAL]  Memory
objects.

";

%feature("docstring") casadi::BSplineDual::numel_out "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::BSplineDual::sz_arg "[INTERNAL]  Get required
length of arg field.

";

%feature("docstring") casadi::BSplineDual::reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::BSplineDual "

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| enable_fd        | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation by   |                  |
|                  |                 | finite           |                  |
|                  |                 | differencing.    |                  |
|                  |                 | [default:        |                  |
|                  |                 | false]]          |                  |
+------------------+-----------------+------------------+------------------+
| enable_forward   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using forward    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_jacobian  | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobians of all |                  |
|                  |                 | differentiable   |                  |
|                  |                 | outputs with     |                  |
|                  |                 | respect to all   |                  |
|                  |                 | differentiable   |                  |
|                  |                 | inputs - if      |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_reverse   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | transposed       |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using reverse    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| fd_method        | OT_STRING       | Method for       | casadi::Function |
|                  |                 | finite           | Internal         |
|                  |                 | differencing     |                  |
|                  |                 | [default         |                  |
|                  |                 | 'central']       |                  |
+------------------+-----------------+------------------+------------------+
| fd_options       | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | finite           |                  |
|                  |                 | difference       |                  |
|                  |                 | instance         |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| lookup_mode      | OT_STRINGVECTOR | Sets, for each   | casadi::BSplineD |
|                  |                 | grid dimenion,   | ual              |
|                  |                 | the lookup       |                  |
|                  |                 | algorithm used   |                  |
|                  |                 | to find the      |                  |
|                  |                 | correct index.   |                  |
|                  |                 | 'linear' uses a  |                  |
|                  |                 | for-loop +       |                  |
|                  |                 | break; 'exact'   |                  |
|                  |                 | uses floored     |                  |
|                  |                 | division (only   |                  |
|                  |                 | for uniform      |                  |
|                  |                 | grids).          |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: bspline.hpp ";

%feature("docstring") casadi::BSplineDual::get_free "[INTERNAL]  Print free
variables.

";

%feature("docstring") casadi::BSplineDual::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::BSplineDual::generate_dependencies "[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring") casadi::BSplineDual::has_reverse "

Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::BSplineDual::size_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::BSplineDual::getJacSparsityHierarchical "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::BSplineDual::instruction_input "[INTERNAL]
Get the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::BSplineDual::size1_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::BSplineDual::n_nodes "[INTERNAL]  Number of
nodes in the algorithm.

";

%feature("docstring") casadi::BSplineDual::forward "[INTERNAL]  Return
function that calculates forward derivatives forward(nfwd) returns a cached
instance if available, and calls  Function get_forward(int nfwd) if no
cached version is available.

";

%feature("docstring") casadi::BSplineDual::free_sx "[INTERNAL]  Get free
variables (SX)

";

%feature("docstring") casadi::BSplineDual::wrap "[INTERNAL]  Wrap in an
Function instance consisting of only one MX call.

";

%feature("docstring") casadi::BSplineDual::get_max_in "[INTERNAL]  Get
largest input value.

";

%feature("docstring") casadi::BSplineDual::checkout "[INTERNAL]  Checkout a
memory object.

";

%feature("docstring") casadi::BSplineDual::init_mem "[INTERNAL]  Initalize
memory block.

";

%feature("docstring") casadi::BSplineDual::definition "[INTERNAL]  Get
function signature: name:(inputs)->(outputs)

";

%feature("docstring") casadi::BSplineDual::matching_arg "[INTERNAL]  Check
if input arguments that needs to be replaced.

";

%feature("docstring") casadi::BSplineDual::oracle "[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::BSplineDual::getJacSparsityGen "[INTERNAL]
Get the sparsity pattern, forward mode.

";

%feature("docstring") casadi::BSplineDual::adjViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::BSplineDual::n_instructions "[INTERNAL]  Get
the number of atomic operations.

";

%feature("docstring") casadi::BSplineDual::has_spfwd "

Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::BSplineDual::check_arg "[INTERNAL]  Check if
input arguments have correct length and dimensions.

";

%feature("docstring") casadi::BSplineDual::alloc_w "[INTERNAL]  Ensure
required length of w field.

";

%feature("docstring") casadi::BSplineDual::call "[INTERNAL]   Call a
function, templated.

";

%feature("docstring") casadi::BSplineDual::get_reltol "[INTERNAL]  Get
relative tolerance.

";

%feature("docstring") casadi::BSplineDual::get_reverse "

Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::BSplineDual::check_res "[INTERNAL]  Check if
output arguments have correct length and dimensions.

";

%feature("docstring") casadi::BSplineDual::free_mx "[INTERNAL]  Get free
variables ( MX)

";

%feature("docstring") casadi::BSplineDual::print_option "[INTERNAL]  Print
all information there is to know about a certain option.

";

%feature("docstring") casadi::BSplineDual::codegen_body "

Generate code for the body of the C function.

";

%feature("docstring") casadi::BSplineDual::print_options "[INTERNAL]  Print
list of options.

";

%feature("docstring") casadi::BSplineDual::get_min_in "[INTERNAL]  Get
smallest input value.

";

%feature("docstring") casadi::BSplineDual::free_mem "[INTERNAL]  Free
memory block.

";

%feature("docstring") casadi::BSplineDual::getJacSparsity "[INTERNAL]
Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::BSplineDual::sz_res "[INTERNAL]  Get required
length of res field.

";

%feature("docstring") casadi::BSplineDual::codegen_decref "[INTERNAL]
Codegen decref for dependencies.

";

%feature("docstring") casadi::BSplineDual::has_sprev "

Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::BSplineDual::uses_output "[INTERNAL]  Do the
derivative functions need nondifferentiated outputs?

";

%feature("docstring") casadi::BSplineDual::factory "[INTERNAL] ";

%feature("docstring") casadi::BSplineDual::BSplineDual "";

%feature("docstring") casadi::BSplineDual::print_dimensions "[INTERNAL]
Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::BSplineDual::sz_iw "[INTERNAL]  Get required
length of iw field.

";

%feature("docstring") casadi::BSplineDual::class_name "

Readable name of the internal class.

";

%feature("docstring") casadi::BSplineDual::call_reverse "[INTERNAL]
Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::BSplineDual::generate_lifted "[INTERNAL]
Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::BSplineDual::has_derivative "[INTERNAL]  Can
derivatives be calculated in any way?

";

%feature("docstring") casadi::BSplineDual::instruction_constant "[INTERNAL]
Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::BSplineDual::matching_res "[INTERNAL]  Check
if output arguments that needs to be replaced.

";

%feature("docstring") casadi::BSplineDual::size2_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::BSplineDual::jit_dependencies "[INTERNAL]
Jit dependencies.

";

%feature("docstring") casadi::BSplineDual::codegen "[INTERNAL]  Generate
code the function.

";

%feature("docstring") casadi::BSplineDual::get_partition "[INTERNAL]  Get
the unidirectional or bidirectional partition.

";

%feature("docstring") casadi::BSplineDual::export_code "[INTERNAL]  Export
function in a specific language.

";

%feature("docstring") casadi::BSplineDual::replace_fseed "[INTERNAL]
Replace 0-by-0 forward seeds.

";

%feature("docstring") casadi::BSplineDual::sparsity_jac "[INTERNAL]  Get,
if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::BSplineDual::get_sparsity_out "

Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::BSplineDual::has_free "[INTERNAL]  Does the
function have free variables.

";

%feature("docstring") casadi::BSplineDual::size_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::BSplineDual::sp_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode, sparsity propagation.

";

%feature("docstring") casadi::BSplineDual::get_function "[INTERNAL] ";

%feature("docstring") casadi::BSplineDual::sx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::BSplineDual::sp_forward "

Propagate sparsity forward.

";

%feature("docstring") casadi::BSplineDual::eval_mx "[INTERNAL]  Evaluate
with symbolic matrices.

";

%feature("docstring") casadi::BSplineDual::mx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::BSplineDual::codegen_sparsities "[INTERNAL]
Codegen sparsities.

";

%feature("docstring") casadi::BSplineDual::eval_dm "[INTERNAL]  Evaluate
with DM matrices.

";

%feature("docstring") casadi::BSplineDual::alloc_mem "[INTERNAL]  Create
memory block.

";

%feature("docstring") casadi::BSplineDual::sprint "[INTERNAL]  C-style
formatted printing to string.

";

%feature("docstring") casadi::BSplineDual::info "[INTERNAL]  Obtain
information about function

";

%feature("docstring") casadi::BSplineDual::index_out "[INTERNAL]  Get
output scheme index by name.

";

%feature("docstring") casadi::BSplineDual::getAdaptorSolverName "[INTERNAL]
Obtain solver name from Adaptor.

";

%feature("docstring") casadi::BSplineDual::get_n_out "

Number of function inputs and outputs.

";

%feature("docstring") casadi::BSplineDual::mapsum_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::BSplineDual::ad_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::BSplineDual::which_depends "[INTERNAL]  Which
variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::BSplineDual::codegen_meta "[INTERNAL]
Generate meta-information allowing a user to evaluate a generated function.

";

%feature("docstring") casadi::BSplineDual::get_forward "

Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::BSplineDual::replace_res "[INTERNAL]  Replace
0-by-0 outputs.

";

%feature("docstring") casadi::BSplineDual::setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";


// File: classcasadi_1_1BSplineInterpolant.xml
%feature("docstring") casadi::BSplineInterpolant::check_arg "[INTERNAL]
Check if input arguments have correct length and dimensions.

";

%feature("docstring") casadi::BSplineInterpolant::sparsity_jac "[INTERNAL]
Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::BSplineInterpolant::weak "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring") casadi::BSplineInterpolant::set_temp "[INTERNAL]  Set
the (temporary) work vectors.

";

%feature("docstring") casadi::BSplineInterpolant::index_in "[INTERNAL]  Get
input scheme index by name.

";

%feature("docstring") casadi::BSplineInterpolant::size2_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::BSplineInterpolant::codegen "[INTERNAL]
Generate code the function.

";

%feature("docstring") casadi::BSplineInterpolant::codegen_sparsities "[INTERNAL]  Codegen sparsities.

";

%feature("docstring") casadi::BSplineInterpolant::init "[INTERNAL]
Initialize.

";

%feature("docstring") casadi::BSplineInterpolant::get_sparsity_in "[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::BSplineInterpolant::instruction_input "[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::BSplineInterpolant::jacobian "[INTERNAL]
Return Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::BSplineInterpolant::size_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::BSplineInterpolant::alloc "[INTERNAL]  Ensure
work vectors long enough to evaluate function.

";

%feature("docstring") casadi::BSplineInterpolant::get_function "[INTERNAL]
";

%feature("docstring") casadi::BSplineInterpolant::is_a "[INTERNAL]  Check
if the function is of a particular type.

";

%feature("docstring") casadi::BSplineInterpolant::instruction_constant "[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::BSplineInterpolant::mx_in "[INTERNAL]  Get
function input(s) and output(s)

";

%feature("docstring") casadi::BSplineInterpolant::clear_mem "[INTERNAL]
Clear all memory (called from destructor)

";

%feature("docstring") casadi::BSplineInterpolant::codegen_incref "[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring") casadi::BSplineInterpolant::eval_sx "[INTERNAL]
Evaluate with symbolic scalars.

";

%feature("docstring") casadi::BSplineInterpolant::instruction_id "[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring") casadi::BSplineInterpolant::oracle "[INTERNAL]  Get
oracle.

";

%feature("docstring") casadi::BSplineInterpolant::get_free "[INTERNAL]
Print free variables.

";

%feature("docstring") casadi::BSplineInterpolant::check_res "[INTERNAL]
Check if output arguments have correct length and dimensions.

";

%feature("docstring") casadi::BSplineInterpolant::sz_iw "[INTERNAL]  Get
required length of iw field.

";

%feature("docstring") casadi::BSplineInterpolant::call_gen "[INTERNAL]
Call a function, overloaded.

";

%feature("docstring") casadi::BSplineInterpolant::forward "[INTERNAL]
Return function that calculates forward derivatives forward(nfwd) returns a
cached instance if available, and calls  Function get_forward(int nfwd) if
no cached version is available.

";

%feature("docstring") casadi::BSplineInterpolant::getJacSparsity "[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::BSplineInterpolant::self "[INTERNAL]  Get a
public class instance.

";

%feature("docstring") casadi::BSplineInterpolant::print_options "[INTERNAL]
Print list of options.

";

%feature("docstring") casadi::BSplineInterpolant::construct "[INTERNAL]
Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::BSplineInterpolant::sprint "[INTERNAL]
C-style formatted printing to string.

";

%feature("docstring") casadi::BSplineInterpolant::definition "[INTERNAL]
Get function signature: name:(inputs)->(outputs)

";

%feature("docstring") casadi::BSplineInterpolant::alloc_iw "[INTERNAL]
Ensure required length of iw field.

";

%feature("docstring") casadi::BSplineInterpolant::~BSplineInterpolant "[INTERNAL] ";

%feature("docstring") casadi::BSplineInterpolant::replace_fseed "[INTERNAL]
Replace 0-by-0 forward seeds.

";

%feature("docstring") casadi::BSplineInterpolant::free_mem "[INTERNAL]
Free memory block.

";

%feature("docstring") casadi::BSplineInterpolant::index_out "[INTERNAL]
Get output scheme index by name.

";

%feature("docstring") casadi::BSplineInterpolant::free_sx "[INTERNAL]  Get
free variables (SX)

";

%feature("docstring") casadi::BSplineInterpolant::getJacSparsityHierarchical
"[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::BSplineInterpolant::get_n_out "[INTERNAL]
Number of function inputs and outputs.

";

%feature("docstring") casadi::BSplineInterpolant::get_options "[INTERNAL]
Options.

";

%feature("docstring") casadi::BSplineInterpolant::get_n_in "[INTERNAL]
Number of function inputs and outputs.

";

%feature("docstring") casadi::BSplineInterpolant::finalize "[INTERNAL]
Finalize the object creation.

";

%feature("docstring") casadi::BSplineInterpolant::mapsum_mx "[INTERNAL]
Parallel evaluation.

";

%feature("docstring") casadi::BSplineInterpolant::setup "[INTERNAL]  Set
the (persistent and temporary) work vectors.

";

%feature("docstring") casadi::BSplineInterpolant::export_code "[INTERNAL]
Export function in a specific language.

";

%feature("docstring") casadi::BSplineInterpolant::codegen_declarations "[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring") casadi::BSplineInterpolant::slice "[INTERNAL]
returns a new function with a selection of inputs/outputs of the original

";

%feature("docstring") casadi::BSplineInterpolant::adjViaJac "[INTERNAL]
Calculate derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::BSplineInterpolant::replace_arg "[INTERNAL]
Replace 0-by-0 inputs.

";

%feature("docstring") casadi::BSplineInterpolant::print "[INTERNAL]
C-style formatted printing during evaluation.

";

%feature("docstring") casadi::BSplineInterpolant::memory "[INTERNAL]
Memory objects.

";

%feature("docstring") casadi::BSplineInterpolant "

'bspline' plugin for Interpolant

N-dimensional BSpline interpolator

Uses not-a-knot conditions. For 1D and 2D cases, this code is equivalent to
fitpack

>List of available options

+---------------+--------------+-------------------------------------------+
|      Id       |     Type     |                Description                |
+===============+==============+===========================================+
| degree        | OT_INTVECTOR | Sets, for each grid dimenion, the degree  |
|               |              | of the spline.                            |
+---------------+--------------+-------------------------------------------+
| linear_solver | OT_STRING    | Solver used for constructing the          |
|               |              | coefficient tensor.                       |
+---------------+--------------+-------------------------------------------+

Joris Gillis

>List of available options

+---------------+--------------+---------------------+---------------------+
|      Id       |     Type     |     Description     |       Used in       |
+===============+==============+=====================+=====================+
| degree        | OT_INTVECTOR | Sets, for each grid | casadi::BSplineInte |
|               |              | dimenion, the       | rpolant             |
|               |              | degree of the       |                     |
|               |              | spline.             |                     |
+---------------+--------------+---------------------+---------------------+
| linear_solver | OT_STRING    | Solver used for     | casadi::BSplineInte |
|               |              | constructing the    | rpolant             |
|               |              | coefficient tensor. |                     |
+---------------+--------------+---------------------+---------------------+

Diagrams
--------



C++ includes: bspline_interpolant.hpp ";

%feature("docstring") casadi::BSplineInterpolant::set_work "[INTERNAL]  Set
the (persistent) work vectors.

";

%feature("docstring") casadi::BSplineInterpolant::alloc_res "[INTERNAL]
Ensure required length of res field.

";

%feature("docstring") casadi::BSplineInterpolant::n_instructions "[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring") casadi::BSplineInterpolant::get_partition "[INTERNAL]
Get the unidirectional or bidirectional partition.

";

%feature("docstring") casadi::BSplineInterpolant::disp_more "[INTERNAL]
Print more.

";

%feature("docstring") casadi::BSplineInterpolant::matching_arg "[INTERNAL]
Check if input arguments that needs to be replaced.

";

%feature("docstring") casadi::BSplineInterpolant::numel_out "[INTERNAL]
Number of input/output elements.

";

%feature("docstring") casadi::BSplineInterpolant::getCount "[INTERNAL]  Get
the reference count.

";

%feature("docstring") casadi::BSplineInterpolant::eval_dm "[INTERNAL]
Evaluate with DM matrices.

";

%feature("docstring") casadi::BSplineInterpolant::sp_forward "[INTERNAL]
Propagate sparsity forward.

";

%feature("docstring") casadi::BSplineInterpolant::call "[INTERNAL]   Call a
function, templated.

";

%feature("docstring") casadi::BSplineInterpolant::has_forward "[INTERNAL]
Return function that calculates forward derivatives forward(nfwd) returns a
cached instance if available, and calls  Function get_forward(int nfwd) if
no cached version is available.

";

%feature("docstring") casadi::BSplineInterpolant::uses_output "[INTERNAL]
Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring") casadi::BSplineInterpolant::all_scalar "[INTERNAL]
Are all inputs and outputs scalar.

";

%feature("docstring") casadi::BSplineInterpolant::instruction_MX "[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring") casadi::BSplineInterpolant::release "[INTERNAL]
Release a memory object.

";

%feature("docstring") casadi::BSplineInterpolant::ad_weight "[INTERNAL]
Weighting factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::BSplineInterpolant::sx_out "[INTERNAL]  Get
function input(s) and output(s)

";

%feature("docstring") casadi::BSplineInterpolant::disp "[INTERNAL]  Display
object.

";

%feature("docstring") casadi::BSplineInterpolant::has_jacobian "[INTERNAL]
Full Jacobian.

";

%feature("docstring") casadi::BSplineInterpolant::sz_res "[INTERNAL]  Get
required length of res field.

";

%feature("docstring") casadi::BSplineInterpolant::get_default_in "[INTERNAL]  Get default input value.

";

%feature("docstring") casadi::BSplineInterpolant::has_function "[INTERNAL]
";

%feature("docstring") casadi::BSplineInterpolant::checkout "[INTERNAL]
Checkout a memory object.

";

%feature("docstring") casadi::BSplineInterpolant::get_stats "[INTERNAL]
Get all statistics.

";

%feature("docstring") casadi::BSplineInterpolant::call_reverse "[INTERNAL]
Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::BSplineInterpolant::symbolicAdjSeed "[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::BSplineInterpolant::has_spfwd "[INTERNAL]  Is
the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::BSplineInterpolant::factory "[INTERNAL] ";

%feature("docstring") casadi::BSplineInterpolant::getJacSparsityGen "[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring") casadi::BSplineInterpolant::replace_res "[INTERNAL]
Replace 0-by-0 outputs.

";

%feature("docstring") casadi::BSplineInterpolant::init_mem "[INTERNAL]
Initalize memory block.

";

%feature("docstring") casadi::BSplineInterpolant::get_jacobian_sparsity "[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::BSplineInterpolant::wrap "[INTERNAL]  Wrap in
an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::BSplineInterpolant::getAtomicInput "

[DEPRECATED] Renamed instruction_index

";

%feature("docstring") casadi::BSplineInterpolant::sz_w "[INTERNAL]  Get
required length of w field.

";

%feature("docstring") casadi::BSplineInterpolant::nnz_in "[INTERNAL]
Number of input/output nonzeros.

";

%feature("docstring") casadi::BSplineInterpolant::size_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::BSplineInterpolant::instruction_output "[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::BSplineInterpolant::matching_res "[INTERNAL]
Check if output arguments that needs to be replaced.

";

%feature("docstring") casadi::BSplineInterpolant::alloc_mem "[INTERNAL]
Create memory block.

";

%feature("docstring") casadi::BSplineInterpolant::get_forward "[INTERNAL]
Return function that calculates forward derivatives forward(nfwd) returns a
cached instance if available, and calls  Function get_forward(int nfwd) if
no cached version is available.

";

%feature("docstring") casadi::BSplineInterpolant::get_sparsity_out "[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::BSplineInterpolant::fwd_seed "[INTERNAL]
Symbolic expressions for the forward seeds.

";

%feature("docstring") casadi::BSplineInterpolant::sz_work "[INTERNAL]  Get
number of temporary variables needed.

";

%feature("docstring") casadi::BSplineInterpolant::codegen_decref "[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring") casadi::BSplineInterpolant::sz_arg "[INTERNAL]  Get
required length of arg field.

";

%feature("docstring") casadi::BSplineInterpolant::replace_aseed "[INTERNAL]
Replace 0-by-0 reverse seeds.

";

%feature("docstring") casadi::BSplineInterpolant::get_min_in "[INTERNAL]
Get smallest input value.

";

%feature("docstring") casadi::BSplineInterpolant::get_name_out "[INTERNAL]
Names of function input and outputs.

";

%feature("docstring") casadi::BSplineInterpolant::which_depends "[INTERNAL]
Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::BSplineInterpolant::eval_gen "

>  int casadi::FunctionInternal::eval_gen(const double **arg, double **res, int *iw, double *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate numerically.

>  int casadi::FunctionInternal::eval_gen(const SXElem **arg, SXElem **res, int *iw, SXElem *w, void *mem) const

>  int casadi::FunctionInternal::eval_gen(const bvec_t **arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

%feature("docstring") casadi::BSplineInterpolant::sx_in "[INTERNAL]  Get
function input(s) and output(s)

";

%feature("docstring") casadi::BSplineInterpolant::codegen_body "[INTERNAL]
Generate code for the body of the C function.

";

%feature("docstring") casadi::BSplineInterpolant::getAtomicOutput "

[DEPRECATED] Renamed instruction_output

";

%feature("docstring") casadi::BSplineInterpolant::alloc_arg "[INTERNAL]
Ensure required length of arg field.

";

%feature("docstring") casadi::BSplineInterpolant::nnz_out "[INTERNAL]
Number of input/output nonzeros.

";

%feature("docstring") casadi::BSplineInterpolant::size1_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::BSplineInterpolant::codegen_name "[INTERNAL]
Get name in codegen.

";

%feature("docstring") casadi::BSplineInterpolant::print_dimensions "[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::BSplineInterpolant::get_reverse "[INTERNAL]
Return function that calculates adjoint derivatives reverse(nadj) returns a
cached instance if available, and calls  Function get_reverse(int nadj) if
no cached version is available.

";

%feature("docstring") casadi::BSplineInterpolant::size2_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::BSplineInterpolant::plugin_name "[INTERNAL]
";

%feature("docstring") casadi::BSplineInterpolant::BSplineInterpolant "[INTERNAL] ";

%feature("docstring") casadi::BSplineInterpolant::eval "[INTERNAL]
Evaluate numerically.

";

%feature("docstring") casadi::BSplineInterpolant::reverse "[INTERNAL]
Return function that calculates adjoint derivatives reverse(nadj) returns a
cached instance if available, and calls  Function get_reverse(int nadj) if
no cached version is available.

";

%feature("docstring") casadi::BSplineInterpolant::has_sprev "[INTERNAL]  Is
the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::BSplineInterpolant::getAdaptorSolverName "[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring") casadi::BSplineInterpolant::has_free "[INTERNAL]
Does the function have free variables.

";

%feature("docstring") casadi::BSplineInterpolant::n_nodes "[INTERNAL]
Number of nodes in the algorithm.

";

%feature("docstring") casadi::BSplineInterpolant::get_reltol "[INTERNAL]
Get relative tolerance.

";

%feature("docstring") casadi::BSplineInterpolant::eval_mx "[INTERNAL]
Evaluate with symbolic matrices.

";

%feature("docstring") casadi::BSplineInterpolant::print_option "[INTERNAL]
Print all information there is to know about a certain option.

";

%feature("docstring") casadi::BSplineInterpolant::mx_out "[INTERNAL]  Get
function input(s) and output(s)

";

%feature("docstring") casadi::BSplineInterpolant::jit_dependencies "[INTERNAL]  Jit dependencies.

";

%feature("docstring") casadi::BSplineInterpolant::free_mx "[INTERNAL]  Get
free variables ( MX)

";

%feature("docstring") casadi::BSplineInterpolant::has_derivative "[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring") casadi::BSplineInterpolant::generate_lifted "[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::BSplineInterpolant::codegen_meta "[INTERNAL]
Generate meta-information allowing a user to evaluate a generated function.

";

%feature("docstring") casadi::BSplineInterpolant::symbolic_output "[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::BSplineInterpolant::generate_dependencies "[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring") casadi::BSplineInterpolant::get_jacobian "[INTERNAL]
Full Jacobian.

";

%feature("docstring") casadi::BSplineInterpolant::get_max_in "[INTERNAL]
Get largest input value.

";

%feature("docstring") casadi::BSplineInterpolant::call_forward "[INTERNAL]
Forward mode AD, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::BSplineInterpolant::get_abstol "[INTERNAL]
Get absolute tolerance.

";

%feature("docstring") casadi::BSplineInterpolant::fwdViaJac "[INTERNAL]
Calculate derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::BSplineInterpolant::class_name "[INTERNAL]
Readable name of the internal class.

";

%feature("docstring") casadi::BSplineInterpolant::size1_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::BSplineInterpolant::sp_reverse "[INTERNAL]
Propagate sparsity backwards.

";

%feature("docstring") casadi::BSplineInterpolant::numel_in "[INTERNAL]
Number of input/output elements.

";

%feature("docstring") casadi::BSplineInterpolant::has_codegen "[INTERNAL]
Is codegen supported?

";

%feature("docstring") casadi::BSplineInterpolant::sp_weight "[INTERNAL]
Weighting factor for chosing forward/reverse mode, sparsity propagation.

";

%feature("docstring") casadi::BSplineInterpolant::alloc_w "[INTERNAL]
Ensure required length of w field.

";

%feature("docstring") casadi::BSplineInterpolant::info "[INTERNAL]  Obtain
information about function

";

%feature("docstring") casadi::BSplineInterpolant::signature "[INTERNAL]
Code generate the function.

";

%feature("docstring")
casadi::BSplineInterpolant::getJacSparsityHierarchicalSymm "[INTERNAL]  A
flavor of getJacSparsity that does hierarchical block structure recognition
for symmetric Jacobians

";

%feature("docstring") casadi::BSplineInterpolant::has_reverse "[INTERNAL]
Return function that calculates adjoint derivatives reverse(nadj) returns a
cached instance if available, and calls  Function get_reverse(int nadj) if
no cached version is available.

";

%feature("docstring") casadi::BSplineInterpolant::get_name_in "[INTERNAL]
Names of function input and outputs.

";


// File: classcasadi_1_1Call.xml


// File: classcasadi_1_1Callback.xml
%feature("docstring") casadi::Callback::has_forward "

Return function that calculates forward derivatives forward(nfwd) returns a
cached instance if available, and calls  Function get_forward(int nfwd) if
no cached version is available.

";

%feature("docstring") casadi::Callback::size2_in "

Get input dimension.

";

%feature("docstring") casadi::Callback::call "

>  void casadi::Function::call(const std::vector< DM > &arg, std::vector< DM > &output_res, bool always_inline=false, bool never_inline=false) const 
------------------------------------------------------------------------

Evaluate the function symbolically or numerically.

>  void casadi::Function::call(const std::vector< SX > &arg, std::vector< SX > &output_res, bool always_inline=false, bool never_inline=false) const

>  void casadi::Function::call(const std::vector< MX > &arg, std::vector< MX > &output_res, bool always_inline=false, bool never_inline=false) const

>  void casadi::Function::call(const DMDict &arg, DMDict &output_res, bool always_inline=false, bool never_inline=false) const

>  void casadi::Function::call(const SXDict &arg, SXDict &output_res, bool always_inline=false, bool never_inline=false) const

>  void casadi::Function::call(const MXDict &arg, MXDict &output_res, bool always_inline=false, bool never_inline=false) const 
------------------------------------------------------------------------

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output Legacy function: To be deprecated in a future
version of CasADi. Exists only for compatibility with Function::jacobian
pre-CasADi 3.2

";

%feature("docstring") casadi::Callback::generate_dependencies "

Export / Generate C code for the dependency function.

";

%feature("docstring") casadi::Callback::get_n_in "

Get the number of inputs This function is called during construction.

";

%feature("docstring") casadi::Callback::get_n_out "

Get the number of outputs This function is called during construction.

";

%feature("docstring") casadi::Callback::size_in "

Get input dimension.

";

%feature("docstring") casadi::Callback::Callback "

>  casadi::Callback::Callback()
------------------------------------------------------------------------

Default constructor.

>  casadi::Callback::Callback(const Callback &obj)
------------------------------------------------------------------------

Copy constructor (throws an error)

";

%feature("docstring") casadi::Callback::get_name_in "

Get the sparsity of an input This function is called during construction.

";

%feature("docstring") casadi::Callback::getWorkSize "

[DEPRECATED] Use sz_w instead

";

%feature("docstring") casadi::Callback::instruction_id "

Identifier index of the instruction (SXFunction/MXFunction)

";

%feature("docstring") casadi::Callback::sz_arg "[INTERNAL]  Get required
length of arg field.

";

%feature("docstring") casadi::Callback::slice "

returns a new function with a selection of inputs/outputs of the original

";

%feature("docstring") casadi::Callback::export_code "

Export function in specific language.

Only allowed for (a subset of) SX/MX Functions

";

%feature("docstring") casadi::Callback::hessian_old "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output Legacy function: To be deprecated in a future
version of CasADi. Exists only for compatibility with Function::hessian pre-
CasADi 3.2

";

%feature("docstring") casadi::Callback::has_function "";

%feature("docstring") casadi::Callback::nnz_out "

Get number of output nonzeros.

For a particular output or for all of the outputs

";

%feature("docstring") casadi::Callback::mapsum "

Evaluate symbolically in parallel and sum (matrix graph)

Parameters:
-----------

parallelization:  Type of parallelization used: unroll|serial|openmp

";

%feature("docstring") casadi::Callback::print_free "

[DEPRECATED] Use get_free instead

";

%feature("docstring") casadi::Callback::free_sx "

Get all the free variables of the function.

";

%feature("docstring") casadi::Callback::name_out "

>  const std::vector<std::string>& casadi::Function::name_out() const 
------------------------------------------------------------------------

Get output scheme.

>  const std::string& casadi::Function::name_out(int ind) const 
------------------------------------------------------------------------

Get output scheme name by index.

";

%feature("docstring") casadi::Callback::nnz_in "

Get number of input nonzeros.

For a particular input or for all of the inputs

";

%feature("docstring") casadi::Callback::forward "

Get a function that calculates nfwd forward derivatives.

Returns a function with n_in + n_out + n_in inputs and nfwd outputs. The
first n_in inputs correspond to nondifferentiated inputs. The next n_out
inputs correspond to nondifferentiated outputs. and the last n_in inputs
correspond to forward seeds, stacked horizontally The n_out outputs
correspond to forward sensitivities, stacked horizontally. * (n_in = n_in(),
n_out = n_out())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::Callback::default_in "

Get default input value.

";

%feature("docstring") casadi::Callback::init "

Initialize the object This function is called after the object construction
(for the whole class hierarchy) is complete, but before the finalization
step. It is called recursively for the whole class hierarchy, starting with
the lowest level.

";

%feature("docstring") casadi::Callback::numel_out "

Get number of output elements.

For a particular output or for all of the outputs

";

%feature("docstring") casadi::Callback::print_dimensions "

Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::Callback::generate "

Export / Generate C code for the function.

";

%feature("docstring") casadi::Callback::getAtomicInput "

[DEPRECATED] Renamed instruction_index

";

%feature("docstring") casadi::Callback::instruction_input "

Locations in the work vector for the inputs of the instruction
(SXFunction/MXFunction)

";

%feature("docstring") casadi::Callback::getAtomicInputReal "

[DEPRECATED] Renamed instruction_constant

";

%feature("docstring") casadi::Callback::is_null "

Is a null pointer?

";

%feature("docstring") casadi::Callback::has_reverse "

Return function that calculates adjoint derivatives reverse(nadj) returns a
cached instance if available, and calls  Function get_reverse(int nadj) if
no cached version is available.

";

%feature("docstring") casadi::Callback::jacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::Callback::sz_iw "[INTERNAL]  Get required
length of iw field.

";

%feature("docstring") casadi::Callback::n_nodes "

Number of nodes in the algorithm.

";

%feature("docstring") casadi::Callback::sx_out "

Get symbolic primitives equivalent to the output expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring") casadi::Callback::print_options "

Print options to a stream.

";

%feature("docstring") casadi::Callback::checkout "

Checkout a memory object.

";

%feature("docstring") casadi::Callback::reverse "

Get a function that calculates nadj adjoint derivatives.

Returns a function with n_in + n_out + n_out inputs and n_in outputs. The
first n_in inputs correspond to nondifferentiated inputs. The next n_out
inputs correspond to nondifferentiated outputs. and the last n_out inputs
correspond to adjoint seeds, stacked horizontally The n_in outputs
correspond to adjoint sensitivities, stacked horizontally. * (n_in = n_in(),
n_out = n_out())

(n_in = n_in(), n_out = n_out())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::Callback::~Callback "

Destructor.

";

%feature("docstring") casadi::Callback::getAtomicOutput "

[DEPRECATED] Renamed instruction_output

";

%feature("docstring") casadi::Callback::instruction_output "

Location in the work vector for the output of the instruction
(SXFunction/MXFunction)

";

%feature("docstring") casadi::Callback::uses_output "

Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring") casadi::Callback::has_spfwd "

Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Callback::conic_debug "[INTERNAL]  Generate
native code in the interfaced language for debugging

";

%feature("docstring") casadi::Callback::which_depends "

Which variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::Callback::jit "

To resolve ambiguity on some compilers.

Create a just-in-time compiled function from a C language string The names
and sparsity patterns of all the inputs and outputs must be provided. If
sparsities are not provided, all inputs and outputs are assumed to be
scalar. Only specify the function body, assuming that input and output
nonzeros are stored in arrays with the specified naming convension. The data
type used is 'casadi_real', which is typically equal to 'double` or another
data type with the same API as 'double'.

Inputs may be null pointers. This means that the all entries are zero.
Outputs may be null points. This means that the corresponding result can be
ignored.

If an error occurs in the evaluation, issue \"return 1;\";

The final generated function will have a structure similar to:

int fname(const casadi_real** arg, casadi_real** res, int* iw, casadi_real*
w, void* mem) { const casadi_real *x1, *x2; casadi_real *r1, *r2; x1 =
*arg++; x2 = *arg++; r1 = *res++; r2 = *res++; <FUNCTION_BODY> return 0; }

";

%feature("docstring") casadi::Callback::get_free "

Get free variables as a string.

";

%feature("docstring") casadi::Callback::index_out "

Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLPSOL_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::Callback::construct "

Construct internal object This is the step that actually construct the
internal object, as the class constructor only creates a null pointer. It
should be called from the user constructor.

";

%feature("docstring") casadi::Callback::has_sprev "

Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Callback::sx_in "

Get symbolic primitives equivalent to the input expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring") casadi::Callback::get_forward "

Return function that calculates forward derivatives forward(nfwd) returns a
cached instance if available, and calls  Function get_forward(int nfwd) if
no cached version is available.

";

%feature("docstring") casadi::Callback::max_in "

Get largest input value.

";

%feature("docstring") casadi::Callback::min_in "

Get smallest input value.

";

%feature("docstring") casadi::Callback::sparsity_jac "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::Callback::class_name "

Get class name.

";

%feature("docstring") casadi::Callback::get_str "

Get string representation.

";

%feature("docstring") casadi::Callback::alloc_w "

Allocate work vectors.

";

%feature("docstring") casadi::Callback::size1_out "

Get output dimension.

";

%feature("docstring") casadi::Callback::spCanEvaluate "

[DEPRECATED] Use has_spfwd, has_sprev

";

%feature("docstring") casadi::Callback::n_instructions "

Number of instruction in the algorithm (SXFunction/MXFunction)

";

%feature("docstring") casadi::Callback::instruction_constant "

Get the floating point output argument of an instruction ( SXFunction)

";

%feature("docstring") casadi::Callback::has_jacobian "

Return Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Callback::finalize "

Finalize the object This function is called after the construction and init
steps are completed, but before user functions are called. It is called
recursively for the whole class hierarchy, starting with the highest level.

";

%feature("docstring") casadi::Callback::size2_out "

Get output dimension.

";

%feature("docstring") casadi::Callback::mx_in "

Get symbolic primitives equivalent to the input expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring") casadi::Callback::release "

Release a memory object.

";

%feature("docstring") casadi::Callback::is_a "

Check if the function is of a particular type Optionally check if name
matches one of the base classes (default true)

";

%feature("docstring") casadi::Callback::wrap "

Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::Callback::get_sparsity_out "

Get the sparsity of an output This function is called during construction.

";

%feature("docstring") casadi::Callback::assert_size_out "

Assert that an output dimension is equal so some given value.

";

%feature("docstring") casadi::Callback::name_in "

>  const std::vector<std::string>& casadi::Function::name_in() const 
------------------------------------------------------------------------

Get input scheme.

>  const std::string& casadi::Function::name_in(int ind) const 
------------------------------------------------------------------------

Get input scheme name by index.

";

%feature("docstring") casadi::Callback::has_free "

Does the function have free variables.

";

%feature("docstring") casadi::Callback::alloc_res "

Allocate work vectors.

";

%feature("docstring") casadi::Callback::assert_size_in "

Assert that an input dimension is equal so some given value.

";

%feature("docstring") casadi::Callback::get_sparsity_in "

Get the sparsity of an input This function is called during construction.

";

%feature("docstring") casadi::Callback::disp "

Print a description of the object.

";

%feature("docstring") casadi::Callback::n_in "

Get the number of function inputs.

";

%feature("docstring") casadi::Callback::sz_w "[INTERNAL]  Get required
length of w field.

";

%feature("docstring") casadi::Callback::info "

Obtain information about function

";

%feature("docstring") casadi::Callback::instruction_MX "";

%feature("docstring") casadi::Callback::factory "";

%feature("docstring") casadi::Callback::getAlgorithmSize "

[DEPRECATED] Renamed n_instructions

";

%feature("docstring") casadi::Callback::sz_res "[INTERNAL]  Get required
length of res field.

";

%feature("docstring") casadi::Callback::print_ptr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::Callback::get_jacobian "

Return Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Callback::alloc_iw "

Allocate work vectors.

";

%feature("docstring") casadi::Callback::alloc_arg "

Allocate work vectors.

";

%feature("docstring") casadi::Callback::oracle "

Get oracle.

";

%feature("docstring") casadi::Callback::eval "

Evaluate numerically, temporary matrices and work vectors.

";

%feature("docstring") casadi::Callback::numel_in "

Get number of input elements.

For a particular input or for all of the inputs

";

%feature("docstring") casadi::Callback::getAtomicOperation "

[DEPRECATED] Renamed instruction_id

";

%feature("docstring") casadi::Callback::map "

>  Function casadi::Function::map(const std::string &name, const std::string &parallelization, int n, const std::vector< int > &reduce_in, const std::vector< int > &reduce_out, const Dict &opts=Dict()) const

>  Function casadi::Function::map(const std::string &name, const std::string &parallelization, int n, const std::vector< std::string > &reduce_in, const std::vector< std::string > &reduce_out, const Dict &opts=Dict()) const 
------------------------------------------------------------------------

Map with reduction A subset of the inputs are non-repeated and a subset of
the outputs summed up.

>  Function casadi::Function::map(int n, const std::string &parallelization=\"serial\") const 
------------------------------------------------------------------------

Create a mapped version of this function.

Suppose the function has a signature of:

::

     f: (a, p) -> ( s )
  



The the mapped version has the signature:

::

     F: (A, P) -> (S )
  
      with
          A: horzcat([a0, a1, ..., a_(N-1)])
          P: horzcat([p0, p1, ..., p_(N-1)])
          S: horzcat([s0, s1, ..., s_(N-1)])
      and
          s0 <- f(a0, p0)
          s1 <- f(a1, p1)
          ...
          s_(N-1) <- f(a_(N-1), p_(N-1))
  



Parameters:
-----------

parallelization:  Type of parallelization used: unroll|serial|openmp

";

%feature("docstring") casadi::Callback::print_option "

Print all information there is to know about a certain option.

";

%feature("docstring") casadi::Callback::mapaccum "

Create a mapaccumulated version of this function.

Suppose the function has a signature of:

::

     f: (x, u) -> (x_next , y )
  



The the mapaccumulated version has the signature:

::

     F: (x0, U) -> (X , Y )
  
      with
          U: horzcat([u0, u1, ..., u_(N-1)])
          X: horzcat([x1, x2, ..., x_N])
          Y: horzcat([y0, y1, ..., y_(N-1)])
  
      and
          x1, y0 <- f(x0, u0)
          x2, y1 <- f(x1, u1)
          ...
          x_N, y_(N-1) <- f(x_(N-1), u_(N-1))
  



Mapaccum has the following benefits over writing an equivalent for- loop:
much faster at construction time

potentially much faster compilation times (for codegen)

offers a trade-off between memory and evaluation time

The base (settable through the options dictionary, default 10), is used to
create a tower of function calls, containing unrolled for- loops of length
maximum base.

This technique is much more scalable in terms of memory-usage, but slightly
slower at evaluation, than a plain for-loop. The effect is similar to that
of a for-loop with a check-pointing instruction after each chunk of
iterations with size base.

Set base to -1 to unroll all the way; no gains in memory efficiency here.

";

%feature("docstring") casadi::Callback::size1_in "

Get input dimension.

";

%feature("docstring") casadi::Callback::sparsity_in "

Get sparsity of a given input.

";

%feature("docstring") casadi::Callback::get_reverse "

Return function that calculates adjoint derivatives reverse(nadj) returns a
cached instance if available, and calls  Function get_reverse(int nadj) if
no cached version is available.

";

%feature("docstring") casadi::Callback::expand "

Expand a function to SX.

";

%feature("docstring") casadi::Callback "

Callback function functionality.

This class provides a public API to the FunctionInternal class that can be
subclassed by the user, who is then able to implement the different virtual
method. Note that the Function class also provides a public API to
FunctionInternal, but only allows calling, not being called.

The user is responsible for not deleting this class for the lifetime of the
internal function object.

Joris Gillis, Joel Andersson

C++ includes: callback.hpp ";

%feature("docstring") casadi::Callback::n_out "

Get the number of function outputs.

";

%feature("docstring") casadi::Callback::jacobian_old "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output Legacy function: To be deprecated in a future
version of CasADi. Exists only for compatibility with Function::jacobian
pre-CasADi 3.2

";

%feature("docstring") casadi::Callback::__hash__ "

Returns a number that is unique for a given Node. If the Object does not
point to any node, \"0\" is returned.

";

%feature("docstring") casadi::Callback::free_mx "

Get all the free variables of the function.

";

%feature("docstring") casadi::Callback::index_in "

Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLPSOL_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::Callback::generate_lifted "

Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::Callback::sparsity_out "

Get sparsity of a given output.

";

%feature("docstring") casadi::Callback::stats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::Callback::name "

Name of the function.

";

%feature("docstring") casadi::Callback::size_out "

Get output dimension.

";

%feature("docstring") casadi::Callback::fullJacobian "

[DEPRECATED] Alias of Function::jacobian

";

%feature("docstring") casadi::Callback::get_function "";

%feature("docstring") casadi::Callback::get_name_out "

Get the sparsity of an output This function is called during construction.

";

%feature("docstring") casadi::Callback::mx_out "

Get symbolic primitives equivalent to the output expressions There is no
guarantee that subsequent calls return unique answers.

";


// File: classcasadi_1_1casadi__limits.xml
%feature("docstring") casadi::casadi_limits "

casadi_limits class

The following class, which acts as a complements to the standard
numeric_limits class, allows specifying certain properties of scalar
objects. The template can be specialized for e.g. symbolic scalars Joel
Andersson

C++ includes: casadi_limits.hpp ";


// File: classcasadi_1_1CasadiException.xml
%feature("docstring") casadi::CasadiException::what "throw () Display
error.

";

%feature("docstring") casadi::CasadiException::CasadiException "

>  casadi::CasadiException::CasadiException()
------------------------------------------------------------------------

Default constructor.

>  casadi::CasadiException::CasadiException(const std::string &msg)
------------------------------------------------------------------------

Form message string.

";

%feature("docstring") casadi::CasadiException "

Casadi exception class.

Joel Andersson

C++ includes: exception.hpp ";

%feature("docstring") casadi::CasadiException::~CasadiException "throw ()
Destructor.

";


// File: classcasadi_1_1CasadiMeta.xml
%feature("docstring") casadi::CasadiMeta "

Collects global CasADi meta information.

Joris Gillis

C++ includes: casadi_meta.hpp ";


// File: classcasadi_1_1CentralDiff.xml
%feature("docstring") casadi::CentralDiff::matching_arg "[INTERNAL]  Check
if input arguments that needs to be replaced.

";

%feature("docstring") casadi::CentralDiff::get_jacobian_sparsity "[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::CentralDiff::forward "[INTERNAL]  Return
function that calculates forward derivatives forward(nfwd) returns a cached
instance if available, and calls  Function get_forward(int nfwd) if no
cached version is available.

";

%feature("docstring") casadi::CentralDiff::generate_lifted "[INTERNAL]
Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::CentralDiff::symbolicAdjSeed "[INTERNAL]
Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::CentralDiff::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::CentralDiff::uses_output "[INTERNAL]  Is the
scheme using the (nondifferentiated) output?

";

%feature("docstring") casadi::CentralDiff::codegen_decref "[INTERNAL]
Codegen decref for dependencies.

";

%feature("docstring") casadi::CentralDiff::call "[INTERNAL]   Call a
function, templated.

";

%feature("docstring") casadi::CentralDiff::mapsum_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::CentralDiff::getJacSparsityHierarchical "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::CentralDiff::get_sparsity_out "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::CentralDiff::eval_gen "

>  int casadi::FunctionInternal::eval_gen(const double **arg, double **res, int *iw, double *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate numerically.

>  int casadi::FunctionInternal::eval_gen(const SXElem **arg, SXElem **res, int *iw, SXElem *w, void *mem) const

>  int casadi::FunctionInternal::eval_gen(const bvec_t **arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

%feature("docstring") casadi::CentralDiff::get_reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::CentralDiff::set_temp "[INTERNAL]  Set the
(temporary) work vectors.

";

%feature("docstring") casadi::CentralDiff::alloc_mem "[INTERNAL]  Create
memory block.

";

%feature("docstring") casadi::CentralDiff::get_forward "[INTERNAL]  Second
order derivatives.

";

%feature("docstring") casadi::CentralDiff::n_nodes "[INTERNAL]  Number of
nodes in the algorithm.

";

%feature("docstring") casadi::CentralDiff::eval_sx "[INTERNAL]  Evaluate
with symbolic scalars.

";

%feature("docstring") casadi::CentralDiff::has_jacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::CentralDiff::nnz_out "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::CentralDiff::export_code "[INTERNAL]  Export
function in a specific language.

";

%feature("docstring") casadi::CentralDiff::generate_dependencies "[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring") casadi::CentralDiff::sz_res "[INTERNAL]  Get required
length of res field.

";

%feature("docstring") casadi::CentralDiff::fwdViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::CentralDiff::has_function "[INTERNAL] ";

%feature("docstring") casadi::CentralDiff::matching_res "[INTERNAL]  Check
if output arguments that needs to be replaced.

";

%feature("docstring") casadi::CentralDiff::get_n_in "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::CentralDiff::size2_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::CentralDiff::eval_mx "[INTERNAL]  Evaluate
with symbolic matrices.

";

%feature("docstring") casadi::CentralDiff::call_forward "[INTERNAL]
Forward mode AD, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::CentralDiff::check_arg "[INTERNAL]  Check if
input arguments have correct length and dimensions.

";

%feature("docstring") casadi::CentralDiff::print_option "[INTERNAL]  Print
all information there is to know about a certain option.

";

%feature("docstring") casadi::CentralDiff::clear_mem "[INTERNAL]  Clear all
memory (called from destructor)

";

%feature("docstring") casadi::CentralDiff::ad_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::CentralDiff::has_err "[INTERNAL] ";

%feature("docstring") casadi::CentralDiff::numel_out "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::CentralDiff::sparsity_jac "[INTERNAL]  Get,
if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::CentralDiff::disp "[INTERNAL]  Display
object.

";

%feature("docstring") casadi::CentralDiff::get_function "[INTERNAL] ";

%feature("docstring") casadi::CentralDiff::mx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::CentralDiff::get_abstol "[INTERNAL]  Get
absolute tolerance.

";

%feature("docstring") casadi::CentralDiff::instruction_MX "[INTERNAL]  get
MX expression associated with instruction

";

%feature("docstring") casadi::CentralDiff::replace_res "[INTERNAL]  Replace
0-by-0 outputs.

";

%feature("docstring") casadi::CentralDiff::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::CentralDiff::index_out "[INTERNAL]  Get
output scheme index by name.

";

%feature("docstring") casadi::CentralDiff "[INTERNAL]  Calculate derivative
using central differences Joel Andersson

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| abstol           | OT_DOUBLE       | Accuracy of      | casadi::CentralD |
|                  |                 | function outputs | iff              |
|                  |                 | [default: query  |                  |
|                  |                 | object]          |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| enable_fd        | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation by   |                  |
|                  |                 | finite           |                  |
|                  |                 | differencing.    |                  |
|                  |                 | [default:        |                  |
|                  |                 | false]]          |                  |
+------------------+-----------------+------------------+------------------+
| enable_forward   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using forward    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_jacobian  | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobians of all |                  |
|                  |                 | differentiable   |                  |
|                  |                 | outputs with     |                  |
|                  |                 | respect to all   |                  |
|                  |                 | differentiable   |                  |
|                  |                 | inputs - if      |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_reverse   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | transposed       |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using reverse    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| fd_method        | OT_STRING       | Method for       | casadi::Function |
|                  |                 | finite           | Internal         |
|                  |                 | differencing     |                  |
|                  |                 | [default         |                  |
|                  |                 | 'central']       |                  |
+------------------+-----------------+------------------+------------------+
| fd_options       | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | finite           |                  |
|                  |                 | difference       |                  |
|                  |                 | instance         |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| h_iter           | OT_INT          | Number of        | casadi::CentralD |
|                  |                 | iterations to    | iff              |
|                  |                 | improve on the   |                  |
|                  |                 | step-size        |                  |
|                  |                 | [default: 1 if   |                  |
|                  |                 | error estimate   |                  |
|                  |                 | available,       |                  |
|                  |                 | otherwise 0]     |                  |
+------------------+-----------------+------------------+------------------+
| h_max            | OT_DOUBLE       | Maximum step     | casadi::CentralD |
|                  |                 | size [default 0] | iff              |
+------------------+-----------------+------------------+------------------+
| h_min            | OT_DOUBLE       | Minimum step     | casadi::CentralD |
|                  |                 | size [default    | iff              |
|                  |                 | inf]             |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| reltol           | OT_DOUBLE       | Accuracy of      | casadi::CentralD |
|                  |                 | function inputs  | iff              |
|                  |                 | [default: query  |                  |
|                  |                 | object]          |                  |
+------------------+-----------------+------------------+------------------+
| second_order_ste | OT_DOUBLE       | Second order     | casadi::CentralD |
| psize            |                 | perturbation     | iff              |
|                  |                 | size [default:   |                  |
|                  |                 | 1e-3]            |                  |
+------------------+-----------------+------------------+------------------+
| smoothing        | OT_DOUBLE       | Smoothing        | casadi::CentralD |
|                  |                 | regularization   | iff              |
|                  |                 | [default:        |                  |
|                  |                 | machine          |                  |
|                  |                 | precision]       |                  |
+------------------+-----------------+------------------+------------------+
| u_aim            | OT_DOUBLE       | Target ratio of  | casadi::CentralD |
|                  |                 | roundoff error   | iff              |
|                  |                 | to truncation    |                  |
|                  |                 | error [default:  |                  |
|                  |                 | 100.]            |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: finite_differences.hpp ";

%feature("docstring") casadi::CentralDiff::calc_stepsize "[INTERNAL] ";

%feature("docstring") casadi::CentralDiff::disp_more "[INTERNAL]  Print
more.

";

%feature("docstring") casadi::CentralDiff::setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";

%feature("docstring") casadi::CentralDiff::init_mem "[INTERNAL]  Initalize
memory block.

";

%feature("docstring") casadi::CentralDiff::alloc_w "[INTERNAL]  Ensure
required length of w field.

";

%feature("docstring") casadi::CentralDiff::pert "[INTERNAL] ";

%feature("docstring") casadi::CentralDiff::sz_arg "[INTERNAL]  Get required
length of arg field.

";

%feature("docstring") casadi::CentralDiff::instruction_input "[INTERNAL]
Get the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::CentralDiff::instruction_output "[INTERNAL]
Get the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::CentralDiff::get_name_out "[INTERNAL]  Names
of function input and outputs.

";

%feature("docstring") casadi::CentralDiff::oracle "[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::CentralDiff::get_name_in "[INTERNAL]  Names
of function input and outputs.

";

%feature("docstring") casadi::CentralDiff::sz_w "[INTERNAL]  Get required
length of w field.

";

%feature("docstring") casadi::CentralDiff::getJacSparsityGen "[INTERNAL]
Get the sparsity pattern, forward mode.

";

%feature("docstring") casadi::CentralDiff::jacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::CentralDiff::CentralDiff "[INTERNAL] ";

%feature("docstring") casadi::CentralDiff::alloc_iw "[INTERNAL]  Ensure
required length of iw field.

";

%feature("docstring") casadi::CentralDiff::print_options "[INTERNAL]  Print
list of options.

";

%feature("docstring") casadi::CentralDiff::replace_fseed "[INTERNAL]
Replace 0-by-0 forward seeds.

";

%feature("docstring") casadi::CentralDiff::finalize "[INTERNAL]  Finalize
the object creation.

";

%feature("docstring") casadi::CentralDiff::calc_fd "[INTERNAL] ";

%feature("docstring") casadi::CentralDiff::sprint "[INTERNAL]  C-style
formatted printing to string.

";

%feature("docstring") casadi::CentralDiff::free_mem "[INTERNAL]  Free
memory block.

";

%feature("docstring") casadi::CentralDiff::fwd_seed "[INTERNAL]  Symbolic
expressions for the forward seeds.

";

%feature("docstring") casadi::CentralDiff::class_name "[INTERNAL]  Get type
name.

";

%feature("docstring") casadi::CentralDiff::nnz_in "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::CentralDiff::get_partition "[INTERNAL]  Get
the unidirectional or bidirectional partition.

";

%feature("docstring") casadi::CentralDiff::free_sx "[INTERNAL]  Get free
variables (SX)

";

%feature("docstring") casadi::CentralDiff::construct "[INTERNAL]  Construct
Prepares the function for evaluation.

";

%feature("docstring") casadi::CentralDiff::get_n_out "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::CentralDiff::getJacSparsity "[INTERNAL]
Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::CentralDiff::is_a "[INTERNAL]  Check if the
function is of a particular type.

";

%feature("docstring") casadi::CentralDiff::checkout "[INTERNAL]  Checkout a
memory object.

";

%feature("docstring") casadi::CentralDiff::which_depends "[INTERNAL]  Which
variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::CentralDiff::n_instructions "[INTERNAL]  Get
the number of atomic operations.

";

%feature("docstring") casadi::CentralDiff::get_jacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::CentralDiff::numel_in "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::CentralDiff::get_stats "[INTERNAL]  Get all
statistics.

";

%feature("docstring") casadi::CentralDiff::has_spfwd "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::CentralDiff::get_max_in "[INTERNAL]  Get
largest input value.

";

%feature("docstring") casadi::CentralDiff::wrap "[INTERNAL]  Wrap in an
Function instance consisting of only one MX call.

";

%feature("docstring") casadi::CentralDiff::has_codegen "[INTERNAL]  Is
codegen supported?

";

%feature("docstring") casadi::CentralDiff::print "[INTERNAL]  C-style
formatted printing during evaluation.

";

%feature("docstring") casadi::CentralDiff::codegen_incref "[INTERNAL]
Codegen incref for dependencies.

";

%feature("docstring") casadi::CentralDiff::release "[INTERNAL]  Release a
memory object.

";

%feature("docstring") casadi::CentralDiff::memory "[INTERNAL]  Memory
objects.

";

%feature("docstring") casadi::CentralDiff::has_sprev "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::CentralDiff::call_reverse "[INTERNAL]
Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::CentralDiff::get_sparsity_in "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::CentralDiff::sp_reverse "[INTERNAL]
Propagate sparsity backwards.

";

%feature("docstring") casadi::CentralDiff::get_free "[INTERNAL]  Print free
variables.

";

%feature("docstring") casadi::CentralDiff::symbolic_output "[INTERNAL]  Get
a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::CentralDiff::mx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::CentralDiff::has_free "[INTERNAL]  Does the
function have free variables.

";

%feature("docstring") casadi::CentralDiff::getAtomicInput "

[DEPRECATED] Renamed instruction_index

";

%feature("docstring") casadi::CentralDiff::sp_forward "[INTERNAL]
Propagate sparsity forward.

";

%feature("docstring") casadi::CentralDiff::sx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::CentralDiff::sx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::CentralDiff::codegen "[INTERNAL]  Generate
code the function.

";

%feature("docstring") casadi::CentralDiff::free_mx "[INTERNAL]  Get free
variables ( MX)

";

%feature("docstring") casadi::CentralDiff::self "[INTERNAL]  Get a public
class instance.

";

%feature("docstring") casadi::CentralDiff::~CentralDiff "[INTERNAL]
Destructor.

";

%feature("docstring") casadi::CentralDiff::alloc "[INTERNAL]  Ensure work
vectors long enough to evaluate function.

";

%feature("docstring") casadi::CentralDiff::eval "[INTERNAL]  Evaluate
numerically.

";

%feature("docstring") casadi::CentralDiff::info "[INTERNAL]  Obtain
information about function

";

%feature("docstring") casadi::CentralDiff::codegen_declarations "[INTERNAL]
Generate code for the declarations of the C function.

";

%feature("docstring") casadi::CentralDiff::getJacSparsityHierarchicalSymm "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::CentralDiff::size_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::CentralDiff::sz_iw "[INTERNAL]  Get required
length of iw field.

";

%feature("docstring") casadi::CentralDiff::size1_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::CentralDiff::sp_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode, sparsity propagation.

";

%feature("docstring") casadi::CentralDiff::print_dimensions "[INTERNAL]
Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::CentralDiff::get_reltol "[INTERNAL]  Get
relative tolerance.

";

%feature("docstring") casadi::CentralDiff::size_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::CentralDiff::n_pert "[INTERNAL] ";

%feature("docstring") casadi::CentralDiff::all_scalar "[INTERNAL]  Are all
inputs and outputs scalar.

";

%feature("docstring") casadi::CentralDiff::has_reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::CentralDiff::check_res "[INTERNAL]  Check if
output arguments have correct length and dimensions.

";

%feature("docstring") casadi::CentralDiff::sz_work "[INTERNAL]  Get number
of temporary variables needed.

";

%feature("docstring") casadi::CentralDiff::instruction_constant "[INTERNAL]
Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::CentralDiff::codegen_sparsities "[INTERNAL]
Codegen sparsities.

";

%feature("docstring") casadi::CentralDiff::slice "[INTERNAL]  returns a new
function with a selection of inputs/outputs of the original

";

%feature("docstring") casadi::CentralDiff::init "[INTERNAL]  Initialize.

";

%feature("docstring") casadi::CentralDiff::jit_dependencies "[INTERNAL]
Jit dependencies.

";

%feature("docstring") casadi::CentralDiff::alloc_arg "[INTERNAL]  Ensure
required length of arg field.

";

%feature("docstring") casadi::CentralDiff::index_in "[INTERNAL]  Get input
scheme index by name.

";

%feature("docstring") casadi::CentralDiff::codegen_name "[INTERNAL]  Get
name in codegen.

";

%feature("docstring") casadi::CentralDiff::codegen_meta "[INTERNAL]
Generate meta-information allowing a user to evaluate a generated function.

";

%feature("docstring") casadi::CentralDiff::eval_dm "[INTERNAL]  Evaluate
with DM matrices.

";

%feature("docstring") casadi::CentralDiff::set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::CentralDiff::signature "[INTERNAL]  Code
generate the function.

";

%feature("docstring") casadi::CentralDiff::has_forward "[INTERNAL]  Second
order derivatives.

";

%feature("docstring") casadi::CentralDiff::replace_aseed "[INTERNAL]
Replace 0-by-0 reverse seeds.

";

%feature("docstring") casadi::CentralDiff::factory "[INTERNAL] ";

%feature("docstring") casadi::CentralDiff::get_min_in "[INTERNAL]  Get
smallest input value.

";

%feature("docstring") casadi::CentralDiff::has_derivative "[INTERNAL]  Can
derivatives be calculated in any way?

";

%feature("docstring") casadi::CentralDiff::getAdaptorSolverName "[INTERNAL]
Obtain solver name from Adaptor.

";

%feature("docstring") casadi::CentralDiff::replace_arg "[INTERNAL]  Replace
0-by-0 inputs.

";

%feature("docstring") casadi::CentralDiff::call_gen "[INTERNAL]   Call a
function, overloaded.

";

%feature("docstring") casadi::CentralDiff::size1_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::CentralDiff::adjViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::CentralDiff::reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::CentralDiff::getAtomicOutput "

[DEPRECATED] Renamed instruction_output

";

%feature("docstring") casadi::CentralDiff::instruction_id "[INTERNAL]  Get
an atomic operation operator index.

";

%feature("docstring") casadi::CentralDiff::get_options "[INTERNAL]
Options.

";

%feature("docstring") casadi::CentralDiff::codegen_body "[INTERNAL]
Generate code for the body of the C function.

";

%feature("docstring") casadi::CentralDiff::get_default_in "[INTERNAL]  Get
default input value.

";

%feature("docstring") casadi::CentralDiff::size2_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::CentralDiff::definition "[INTERNAL]  Get
function signature: name:(inputs)->(outputs)

";

%feature("docstring") casadi::CentralDiff::alloc_res "[INTERNAL]  Ensure
required length of res field.

";


// File: classcasadi_1_1ClangCompiler.xml
%feature("docstring") casadi::ClangCompiler::ClangCompiler "[INTERNAL]
Constructor.

";

%feature("docstring") casadi::ClangCompiler::init "[INTERNAL]  Initialize.

";

%feature("docstring") casadi::ClangCompiler::read_external "[INTERNAL]  Get
an external function declaration.

";

%feature("docstring") casadi::ClangCompiler::disp "[INTERNAL]  Print.

";

%feature("docstring") casadi::ClangCompiler::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::ClangCompiler::get_options "[INTERNAL]
Options.

";

%feature("docstring") casadi::ClangCompiler::has_meta "[INTERNAL]  Does an
entry exist?

";

%feature("docstring") casadi::ClangCompiler "

'clang' plugin for Importer

Joris Gillis  Interface to the JIT compiler CLANG

>List of available options

+--------------+-----------------+-----------------------------------------+
|      Id      |      Type       |               Description               |
+==============+=================+=========================================+
| flags        | OT_STRINGVECTOR | Compile flags for the JIT compiler.     |
|              |                 | Default: None                           |
+--------------+-----------------+-----------------------------------------+
| include_path | OT_STRING       | Include paths for the JIT compiler. The |
|              |                 | include directory shipped with CasADi   |
|              |                 | will be automatically appended.         |
+--------------+-----------------+-----------------------------------------+

>List of available options

+--------------+-----------------+--------------------+--------------------+
|      Id      |      Type       |    Description     |      Used in       |
+==============+=================+====================+====================+
| flags        | OT_STRINGVECTOR | Compile flags for  | casadi::ClangCompi |
|              |                 | the JIT compiler.  | ler                |
|              |                 | Default: None      |                    |
+--------------+-----------------+--------------------+--------------------+
| include_path | OT_STRING       | Include paths for  | casadi::ClangCompi |
|              |                 | the JIT compiler.  | ler                |
|              |                 | The include        |                    |
|              |                 | directory shipped  |                    |
|              |                 | with CasADi will   |                    |
|              |                 | be automatically   |                    |
|              |                 | appended.          |                    |
+--------------+-----------------+--------------------+--------------------+
| verbose      | OT_BOOL         | Verbose evaluation | casadi::ImporterIn |
|              |                 | for debugging      | ternal             |
+--------------+-----------------+--------------------+--------------------+

Diagrams
--------



C++ includes: clang_compiler.hpp ";

%feature("docstring") casadi::ClangCompiler::to_text "[INTERNAL]  Get entry
as a text.

";

%feature("docstring") casadi::ClangCompiler::get_meta "[INTERNAL]  Get
entry as a text.

";

%feature("docstring") casadi::ClangCompiler::can_have_meta "[INTERNAL]  Can
meta information be read?

";

%feature("docstring") casadi::ClangCompiler::construct "[INTERNAL]
Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::ClangCompiler::inlined "[INTERNAL] ";

%feature("docstring") casadi::ClangCompiler::read_meta "[INTERNAL]  Get
meta information.

";

%feature("docstring") casadi::ClangCompiler::class_name "[INTERNAL]  Get
type name.

";

%feature("docstring") casadi::ClangCompiler::body "[INTERNAL]  Get the
function body, if inlined.

";

%feature("docstring") casadi::ClangCompiler::get_function "[INTERNAL]  Get
a function pointer for numerical evaluation.

";

%feature("docstring") casadi::ClangCompiler::~ClangCompiler "[INTERNAL]
Destructor.

";

%feature("docstring") casadi::ClangCompiler::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::ClangCompiler::plugin_name "[INTERNAL]  Get
name of plugin.

";

%feature("docstring") casadi::ClangCompiler::has_function "[INTERNAL]  Get
a function pointer for numerical evaluation.

";


// File: classcasadi_1_1CodeGenerator.xml
%feature("docstring") casadi::CodeGenerator::add_include "

Add an include file optionally using a relative path \"...\" instead of an
absolute path <...>

";

%feature("docstring") casadi::CodeGenerator "

Helper class for C code generation.

Joel Andersson

C++ includes: code_generator.hpp ";

%feature("docstring") casadi::CodeGenerator::dump "

Generate a file, return code as string.

";

%feature("docstring") casadi::CodeGenerator::add "

Add a function (name generated)

";

%feature("docstring") casadi::CodeGenerator::CodeGenerator "

Constructor.

";

%feature("docstring") casadi::CodeGenerator::generate "

Generate file(s) The \"prefix\" argument will be prepended to the generated
files and may be a directory or a file prefix. returns the filename.

";


// File: classcasadi_1_1Collocation.xml
%feature("docstring") casadi::Collocation::class_name "[INTERNAL]  Readable
name of the internal class.

";

%feature("docstring") casadi::Collocation::sp_reverse "[INTERNAL]
Propagate sparsity backwards.

";

%feature("docstring") casadi::Collocation::print_option "[INTERNAL]  Print
all information there is to know about a certain option.

";

%feature("docstring") casadi::Collocation::slice "[INTERNAL]  returns a new
function with a selection of inputs/outputs of the original

";

%feature("docstring") casadi::Collocation::index_in "[INTERNAL]  Get input
scheme index by name.

";

%feature("docstring") casadi::Collocation::call_gen "[INTERNAL]   Call a
function, overloaded.

";

%feature("docstring") casadi::Collocation::sz_work "[INTERNAL]  Get number
of temporary variables needed.

";

%feature("docstring") casadi::Collocation::getJacSparsityHierarchicalSymm "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::Collocation::get_min_in "[INTERNAL]  Get
smallest input value.

";

%feature("docstring") casadi::Collocation::get_default_in "[INTERNAL]  Get
default input value.

";

%feature("docstring") casadi::Collocation::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::Collocation::sp_forward "[INTERNAL]
Propagate sparsity forward.

";

%feature("docstring") casadi::Collocation::codegen_decref "[INTERNAL]
Codegen decref for dependencies.

";

%feature("docstring") casadi::Collocation::get_reltol "[INTERNAL]  Get
relative tolerance.

";

%feature("docstring") casadi::Collocation::instruction_id "[INTERNAL]  Get
an atomic operation operator index.

";

%feature("docstring") casadi::Collocation::uses_output "[INTERNAL]  Do the
derivative functions need nondifferentiated outputs?

";

%feature("docstring") casadi::Collocation::sz_arg "[INTERNAL]  Get required
length of arg field.

";

%feature("docstring") casadi::Collocation::has_forward "[INTERNAL]
Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::Collocation::nnz_out "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::Collocation::aug_adj "[INTERNAL]  Generate a
augmented DAE system with nadj adjoint sensitivities.

";

%feature("docstring") casadi::Collocation::free_mx "[INTERNAL]  Get free
variables ( MX)

";

%feature("docstring") casadi::Collocation::get_sparsity_in "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Collocation::definition "[INTERNAL]  Get
function signature: name:(inputs)->(outputs)

";

%feature("docstring") casadi::Collocation::eval_mx "[INTERNAL]  Evaluate
with symbolic matrices.

";

%feature("docstring") casadi::Collocation::codegen_body "[INTERNAL]
Generate code for the function body.

";

%feature("docstring") casadi::Collocation::set_function "[INTERNAL]
Register the function for evaluation and statistics gathering

";

%feature("docstring") casadi::Collocation::size_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::Collocation::~Collocation "[INTERNAL]
Destructor.

";

%feature("docstring") casadi::Collocation::self "[INTERNAL]  Get a public
class instance.

";

%feature("docstring") casadi::Collocation::release "[INTERNAL]  Release a
memory object.

";

%feature("docstring") casadi::Collocation::oracle "[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::Collocation::codegen_name "[INTERNAL]  Get
name in codegen.

";

%feature("docstring") casadi::Collocation::set_temp "[INTERNAL]  Set the
work vectors.

";

%feature("docstring") casadi::Collocation::advance "[INTERNAL]  Advance
solution in time.

";

%feature("docstring") casadi::Collocation::mapsum_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::Collocation::check_arg "[INTERNAL]  Check if
input arguments have correct length and dimensions.

";

%feature("docstring") casadi::Collocation::plugin_name "[INTERNAL] ";

%feature("docstring") casadi::Collocation::print_options "[INTERNAL]  Print
list of options.

";

%feature("docstring") casadi::Collocation::index_out "[INTERNAL]  Get
output scheme index by name.

";

%feature("docstring") casadi::Collocation::getExplicitB "[INTERNAL]  Get
explicit dynamics (backward problem)

";

%feature("docstring") casadi::Collocation::replace_res "[INTERNAL]  Replace
0-by-0 outputs.

";

%feature("docstring") casadi::Collocation::replace_arg "[INTERNAL]  Replace
0-by-0 inputs.

";

%feature("docstring") casadi::Collocation::setupFG "[INTERNAL]  Setup F and
G.

";

%feature("docstring") casadi::Collocation::get_free "[INTERNAL]  Print free
variables.

";

%feature("docstring") casadi::Collocation::get_partition "[INTERNAL]  Get
the unidirectional or bidirectional partition.

";

%feature("docstring") casadi::Collocation::getAtomicOutput "

[DEPRECATED] Renamed instruction_output

";

%feature("docstring") casadi::Collocation::print_stats "[INTERNAL]  Print
solver statistics.

";

%feature("docstring") casadi::Collocation::has_function "[INTERNAL] ";

%feature("docstring") casadi::Collocation::eval "[INTERNAL]  evaluate

";

%feature("docstring") casadi::Collocation::get_name_in "[INTERNAL]  Names
of function input and outputs.

";

%feature("docstring") casadi::Collocation::get_n_in "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::Collocation::instruction_output "[INTERNAL]
Get the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::Collocation::eval_sx "[INTERNAL]  Evaluate
with symbolic scalars.

";

%feature("docstring") casadi::Collocation::which_depends "[INTERNAL]  Which
variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::Collocation::call_forward "[INTERNAL]
Forward mode AD, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Collocation::fwd_seed "[INTERNAL]  Symbolic
expressions for the forward seeds.

";

%feature("docstring") casadi::Collocation::is_a "[INTERNAL]  Check if the
function is of a particular type.

";

%feature("docstring") casadi::Collocation::codegen_sparsities "[INTERNAL]
Codegen sparsities.

";

%feature("docstring") casadi::Collocation::alloc_arg "[INTERNAL]  Ensure
required length of arg field.

";

%feature("docstring") casadi::Collocation::checkout "[INTERNAL]  Checkout a
memory object.

";

%feature("docstring") casadi::Collocation::generate_dependencies "[INTERNAL]  Export / Generate C code for the generated functions.

";

%feature("docstring") casadi::Collocation::alloc_res "[INTERNAL]  Ensure
required length of res field.

";

%feature("docstring") casadi::Collocation::disp "[INTERNAL]  Display
object.

";

%feature("docstring") casadi::Collocation::expand "[INTERNAL] ";

%feature("docstring") casadi::Collocation::eval_dm "[INTERNAL]  Evaluate
with DM matrices.

";

%feature("docstring") casadi::Collocation::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::Collocation::x "[INTERNAL] ";

%feature("docstring") casadi::Collocation::factory "[INTERNAL] ";

%feature("docstring") casadi::Collocation::has_sprev "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Collocation::get_max_in "[INTERNAL]  Get
largest input value.

";

%feature("docstring") casadi::Collocation::print_dimensions "[INTERNAL]
Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::Collocation::size2_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::Collocation::has_reverse "[INTERNAL]
Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::Collocation::call "[INTERNAL]   Call a
function, templated.

";

%feature("docstring") casadi::Collocation::free_sx "[INTERNAL]  Get free
variables (SX)

";

%feature("docstring") casadi::Collocation::getDerivativeOptions "[INTERNAL]
Set solver specific options to generated augmented integrators.

";

%feature("docstring") casadi::Collocation::Collocation "[INTERNAL]
Constructor.

";

%feature("docstring") casadi::Collocation::getAdaptorSolverName "[INTERNAL]
Obtain solver name from Adaptor.

";

%feature("docstring") casadi::Collocation::alloc_iw "[INTERNAL]  Ensure
required length of iw field.

";

%feature("docstring") casadi::Collocation::print_fstats "[INTERNAL]  Print
statistics.

";

%feature("docstring") casadi::Collocation::sz_iw "[INTERNAL]  Get required
length of iw field.

";

%feature("docstring") casadi::Collocation::jacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Collocation::n_instructions "[INTERNAL]  Get
the number of atomic operations.

";

%feature("docstring") casadi::Collocation::print "[INTERNAL]  C-style
formatted printing during evaluation.

";

%feature("docstring") casadi::Collocation::calc_function "[INTERNAL] ";

%feature("docstring") casadi::Collocation::signature "[INTERNAL]  Code
generate the function.

";

%feature("docstring") casadi::Collocation::get_forward "[INTERNAL]
Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::Collocation::mx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Collocation::codegen_incref "[INTERNAL]
Codegen incref for dependencies.

";

%feature("docstring") casadi::Collocation::all_scalar "[INTERNAL]  Are all
inputs and outputs scalar.

";

%feature("docstring") casadi::Collocation::generate_lifted "[INTERNAL]
Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::Collocation::matching_arg "[INTERNAL]  Check
if input arguments that needs to be replaced.

";

%feature("docstring") casadi::Collocation::has_derivative "[INTERNAL]  Can
derivatives be calculated in any way?

";

%feature("docstring") casadi::Collocation::sp_jac_dae "[INTERNAL]  Create
sparsity pattern of the extended Jacobian (forward problem)

";

%feature("docstring") casadi::Collocation::clear_mem "[INTERNAL]  Clear all
memory (called from destructor)

";

%feature("docstring") casadi::Collocation::mx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Collocation::z "[INTERNAL] ";

%feature("docstring") casadi::Collocation::free_mem "[INTERNAL]  Free
memory block.

";

%feature("docstring") casadi::Collocation::reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::Collocation::alloc_mem "[INTERNAL]  Create
memory block.

";

%feature("docstring") casadi::Collocation::p "[INTERNAL] ";

%feature("docstring") casadi::Collocation::q "[INTERNAL] ";

%feature("docstring") casadi::Collocation::t "[INTERNAL] ";

%feature("docstring") casadi::Collocation::has_free "[INTERNAL]  Does the
function have free variables.

";

%feature("docstring") casadi::Collocation::set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::Collocation::nnz_in "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::Collocation::disp_more "[INTERNAL]  Print
more.

";

%feature("docstring") casadi::Collocation::get_sparsity_out "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Collocation::getJacSparsityHierarchical "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::Collocation::init_mem "[INTERNAL]  Initalize
memory block.

";

%feature("docstring") casadi::Collocation::setStopTime "[INTERNAL]  Set
stop time for the integration.

";

%feature("docstring") casadi::Collocation::matching_res "[INTERNAL]  Check
if output arguments that needs to be replaced.

";

%feature("docstring") casadi::Collocation::setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";

%feature("docstring") casadi::Collocation::call_reverse "[INTERNAL]
Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Collocation::adjViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::Collocation::sprint "[INTERNAL]  C-style
formatted printing to string.

";

%feature("docstring") casadi::Collocation::rx "[INTERNAL] ";

%feature("docstring") casadi::Collocation::rz "[INTERNAL] ";

%feature("docstring") casadi::Collocation::get_options "[INTERNAL]
Options.

";

%feature("docstring") casadi::Collocation::rq "[INTERNAL] ";

%feature("docstring") casadi::Collocation::rp "[INTERNAL] ";

%feature("docstring") casadi::Collocation::sparsity_jac "[INTERNAL]  Get,
if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Collocation::getJacSparsity "[INTERNAL]
Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Collocation::alloc "[INTERNAL]  Ensure work
vectors long enough to evaluate function.

";

%feature("docstring") casadi::Collocation::sp_jac_rdae "[INTERNAL]  Create
sparsity pattern of the extended Jacobian (backward problem)

";

%feature("docstring") casadi::Collocation::sp_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode, sparsity propagation.

";

%feature("docstring") casadi::Collocation::create_function "[INTERNAL]
Create an oracle function

";

%feature("docstring") casadi::Collocation::codegen_meta "[INTERNAL]
Generate meta-information allowing a user to evaluate a generated function.

";

%feature("docstring") casadi::Collocation::get_stats "[INTERNAL]  Get all
statistics.

";

%feature("docstring") casadi::Collocation::get_abstol "[INTERNAL]  Get
absolute tolerance.

";

%feature("docstring") casadi::Collocation::ad_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::Collocation::sz_w "[INTERNAL]  Get required
length of w field.

";

%feature("docstring") casadi::Collocation::get_function "[INTERNAL] ";

%feature("docstring") casadi::Collocation::size1_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::Collocation::numel_in "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::Collocation::sx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Collocation::check_res "[INTERNAL]  Check if
output arguments have correct length and dimensions.

";

%feature("docstring") casadi::Collocation::instruction_constant "[INTERNAL]
Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::Collocation::getExplicit "[INTERNAL]  Get
explicit dynamics.

";

%feature("docstring") casadi::Collocation::sx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Collocation::symbolic_output "[INTERNAL]  Get
a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::Collocation::init "[INTERNAL]  Initialize
stage.

";

%feature("docstring") casadi::Collocation::eval_gen "

>  int casadi::FunctionInternal::eval_gen(const double **arg, double **res, int *iw, double *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate numerically.

>  int casadi::FunctionInternal::eval_gen(const SXElem **arg, SXElem **res, int *iw, SXElem *w, void *mem) const

>  int casadi::FunctionInternal::eval_gen(const bvec_t **arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

%feature("docstring") casadi::Collocation::replace_aseed "[INTERNAL]
Replace 0-by-0 reverse seeds.

";

%feature("docstring") casadi::Collocation::symbolicAdjSeed "[INTERNAL]
Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::Collocation::jit_dependencies "[INTERNAL]
JIT for dependencies.

";

%feature("docstring") casadi::Collocation::instruction_input "[INTERNAL]
Get the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::Collocation::finalize "[INTERNAL]  Finalize
initialization.

";

%feature("docstring") casadi::Collocation::resetB "[INTERNAL]  Reset the
backward problem and take time to tf.

";

%feature("docstring") casadi::Collocation::get_n_out "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::Collocation::numel_out "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::Collocation::info "[INTERNAL]  Obtain
information about function

";

%feature("docstring") casadi::Collocation::get_jacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Collocation::monitored "[INTERNAL] ";

%feature("docstring") casadi::Collocation "

'collocation' plugin for Integrator

Fixed-step implicit Runge-Kutta integrator ODE/DAE integrator based on
collocation schemes

The method is still under development

>List of available options

+---------------------------+-----------------+----------------------------+
|            Id             |      Type       |        Description         |
+===========================+=================+============================+
| augmented_options         | OT_DICT         | Options to be passed down  |
|                           |                 | to the augmented           |
|                           |                 | integrator, if one is      |
|                           |                 | constructed.               |
+---------------------------+-----------------+----------------------------+
| collocation_scheme        | OT_STRING       | Collocation scheme:        |
|                           |                 | radau|legendre             |
+---------------------------+-----------------+----------------------------+
| expand                    | OT_BOOL         | Replace MX with SX         |
|                           |                 | expressions in problem     |
|                           |                 | formulation [false]        |
+---------------------------+-----------------+----------------------------+
| grid                      | OT_DOUBLEVECTOR | Time grid                  |
+---------------------------+-----------------+----------------------------+
| interpolation_order       | OT_INT          | Order of the interpolating |
|                           |                 | polynomials                |
+---------------------------+-----------------+----------------------------+
| number_of_finite_elements | OT_INT          | Number of finite elements  |
+---------------------------+-----------------+----------------------------+
| output_t0                 | OT_BOOL         | Output the state at the    |
|                           |                 | initial time               |
+---------------------------+-----------------+----------------------------+
| print_stats               | OT_BOOL         | Print out statistics after |
|                           |                 | integration                |
+---------------------------+-----------------+----------------------------+
| rootfinder                | OT_STRING       | An implicit function       |
|                           |                 | solver                     |
+---------------------------+-----------------+----------------------------+
| rootfinder_options        | OT_DICT         | Options to be passed to    |
|                           |                 | the NLP Solver             |
+---------------------------+-----------------+----------------------------+
| t0                        | OT_DOUBLE       | Beginning of the time      |
|                           |                 | horizon                    |
+---------------------------+-----------------+----------------------------+
| tf                        | OT_DOUBLE       | End of the time horizon    |
+---------------------------+-----------------+----------------------------+

Joel Andersson

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| augmented_option | OT_DICT         | Options to be    | casadi::Implicit |
| s                |                 | passed down to   | FixedStepIntegra |
|                  |                 | the augmented    | tor              |
|                  |                 | integrator, if   |                  |
|                  |                 | one is           |                  |
|                  |                 | constructed.     |                  |
+------------------+-----------------+------------------+------------------+
| collocation_sche | OT_STRING       | Collocation      | casadi::Collocat |
| me               |                 | scheme:          | ion              |
|                  |                 | radau|legendre   |                  |
+------------------+-----------------+------------------+------------------+
| expand           | OT_BOOL         | Replace MX with  | casadi::Implicit |
|                  |                 | SX expressions   | FixedStepIntegra |
|                  |                 | in problem       | tor              |
|                  |                 | formulation      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| grid             | OT_DOUBLEVECTOR | Time grid        | casadi::Implicit |
|                  |                 |                  | FixedStepIntegra |
|                  |                 |                  | tor              |
+------------------+-----------------+------------------+------------------+
| interpolation_or | OT_INT          | Order of the     | casadi::Collocat |
| der              |                 | interpolating    | ion              |
|                  |                 | polynomials      |                  |
+------------------+-----------------+------------------+------------------+
| number_of_finite | OT_INT          | Number of finite | casadi::Implicit |
| _elements        |                 | elements         | FixedStepIntegra |
|                  |                 |                  | tor              |
+------------------+-----------------+------------------+------------------+
| output_t0        | OT_BOOL         | Output the state | casadi::Implicit |
|                  |                 | at the initial   | FixedStepIntegra |
|                  |                 | time             | tor              |
+------------------+-----------------+------------------+------------------+
| print_stats      | OT_BOOL         | Print out        | casadi::Implicit |
|                  |                 | statistics after | FixedStepIntegra |
|                  |                 | integration      | tor              |
+------------------+-----------------+------------------+------------------+
| rootfinder       | OT_STRING       | An implicit      | casadi::Implicit |
|                  |                 | function solver  | FixedStepIntegra |
|                  |                 |                  | tor              |
+------------------+-----------------+------------------+------------------+
| rootfinder_optio | OT_DICT         | Options to be    | casadi::Implicit |
| ns               |                 | passed to the    | FixedStepIntegra |
|                  |                 | NLP Solver       | tor              |
+------------------+-----------------+------------------+------------------+
| t0               | OT_DOUBLE       | Beginning of the | casadi::Implicit |
|                  |                 | time horizon     | FixedStepIntegra |
|                  |                 |                  | tor              |
+------------------+-----------------+------------------+------------------+
| tf               | OT_DOUBLE       | End of the time  | casadi::Implicit |
|                  |                 | horizon          | FixedStepIntegra |
|                  |                 |                  | tor              |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: collocation.hpp ";

%feature("docstring") casadi::Collocation::size_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::Collocation::get_jacobian_sparsity "[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::Collocation::has_jacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Collocation::aug_fwd "[INTERNAL]  Generate a
augmented DAE system with nfwd forward sensitivities.

";

%feature("docstring") casadi::Collocation::getAtomicInput "

[DEPRECATED] Renamed instruction_index

";

%feature("docstring") casadi::Collocation::instruction_MX "[INTERNAL]  get
MX expression associated with instruction

";

%feature("docstring") casadi::Collocation::wrap "[INTERNAL]  Wrap in an
Function instance consisting of only one MX call.

";

%feature("docstring") casadi::Collocation::n_nodes "[INTERNAL]  Number of
nodes in the algorithm.

";

%feature("docstring") casadi::Collocation::construct "[INTERNAL]  Construct
Prepares the function for evaluation.

";

%feature("docstring") casadi::Collocation::replace_fseed "[INTERNAL]
Replace 0-by-0 forward seeds.

";

%feature("docstring") casadi::Collocation::forward "[INTERNAL]  Return
function that calculates forward derivatives forward(nfwd) returns a cached
instance if available, and calls  Function get_forward(int nfwd) if no
cached version is available.

";

%feature("docstring") casadi::Collocation::export_code "[INTERNAL]  Export
function in a specific language.

";

%feature("docstring") casadi::Collocation::fwdViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::Collocation::has_codegen "[INTERNAL]  Is
codegen supported?

";

%feature("docstring") casadi::Collocation::size1_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::Collocation::size2_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::Collocation::codegen "[INTERNAL]  Generate
code the function.

";

%feature("docstring") casadi::Collocation::has_spfwd "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Collocation::get_reverse "[INTERNAL]
Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::Collocation::codegen_declarations "[INTERNAL]
Generate code for the declarations of the C function.

";

%feature("docstring") casadi::Collocation::retreat "[INTERNAL]  Retreat
solution in time.

";

%feature("docstring") casadi::Collocation::get_name_out "[INTERNAL]  Names
of function input and outputs.

";

%feature("docstring") casadi::Collocation::alloc_w "[INTERNAL]  Ensure
required length of w field.

";

%feature("docstring") casadi::Collocation::reset "[INTERNAL]  Reset the
forward problem.

";

%feature("docstring") casadi::Collocation::memory "[INTERNAL]  Memory
objects.

";

%feature("docstring") casadi::Collocation::sz_res "[INTERNAL]  Get required
length of res field.

";

%feature("docstring") casadi::Collocation::getJacSparsityGen "[INTERNAL]
Get the sparsity pattern, forward mode.

";


// File: classcasadi_1_1Concat.xml


// File: classcasadi_1_1Conic.xml
%feature("docstring") casadi::Conic::replace_fseed "[INTERNAL]  Replace
0-by-0 forward seeds.

";

%feature("docstring") casadi::Conic::call_forward "[INTERNAL]  Forward mode
AD, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Conic::call "[INTERNAL]   Call a function,
templated.

";

%feature("docstring") casadi::Conic::eval_dm "[INTERNAL]  Evaluate with DM
matrices.

";

%feature("docstring") casadi::Conic::ad_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::Conic::self "[INTERNAL]  Get a public class
instance.

";

%feature("docstring") casadi::Conic::has_function "[INTERNAL] ";

%feature("docstring") casadi::Conic::get_free "[INTERNAL]  Print free
variables.

";

%feature("docstring") casadi::Conic::sx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Conic::symbolic_output "[INTERNAL]  Get a
vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::Conic::get_n_in "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::Conic::which_depends "[INTERNAL]  Which
variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::Conic::has_jacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Conic::alloc_res "[INTERNAL]  Ensure required
length of res field.

";

%feature("docstring") casadi::Conic::instruction_MX "[INTERNAL]  get MX
expression associated with instruction

";

%feature("docstring") casadi::Conic::generateNativeCode "[INTERNAL]
Generate native code in the interfaced language for debugging

";

%feature("docstring") casadi::Conic::codegen_decref "[INTERNAL]  Codegen
decref for dependencies.

";

%feature("docstring") casadi::Conic::n_instructions "[INTERNAL]  Get the
number of atomic operations.

";

%feature("docstring") casadi::Conic::size1_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Conic::nnz_in "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::Conic::call_reverse "[INTERNAL]  Reverse
mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Conic::get_reltol "[INTERNAL]  Get relative
tolerance.

";

%feature("docstring") casadi::Conic::eval "[INTERNAL]  Evaluate
numerically.

";

%feature("docstring") casadi::Conic::get_reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::Conic::finalize "[INTERNAL]  Finalize the
object creation.

";

%feature("docstring") casadi::Conic::get_abstol "[INTERNAL]  Get absolute
tolerance.

";

%feature("docstring") casadi::Conic::get_partition "[INTERNAL]  Get the
unidirectional or bidirectional partition.

";

%feature("docstring") casadi::Conic::print_option "[INTERNAL]  Print all
information there is to know about a certain option.

";

%feature("docstring") casadi::Conic::sparsity_jac "[INTERNAL]  Get, if
necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Conic::disp_more "[INTERNAL]  Print more.

";

%feature("docstring") casadi::Conic::slice "[INTERNAL]  returns a new
function with a selection of inputs/outputs of the original

";

%feature("docstring") casadi::Conic::eval_sx "[INTERNAL]  Evaluate with
symbolic scalars.

";

%feature("docstring") casadi::Conic::sz_arg "[INTERNAL]  Get required
length of arg field.

";

%feature("docstring") casadi::Conic::eval_gen "

>  int casadi::FunctionInternal::eval_gen(const double **arg, double **res, int *iw, double *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate numerically.

>  int casadi::FunctionInternal::eval_gen(const SXElem **arg, SXElem **res, int *iw, SXElem *w, void *mem) const

>  int casadi::FunctionInternal::eval_gen(const bvec_t **arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

%feature("docstring") casadi::Conic::adjViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::Conic::free_sx "[INTERNAL]  Get free
variables (SX)

";

%feature("docstring") casadi::Conic::clear_mem "[INTERNAL]  Clear all
memory (called from destructor)

";

%feature("docstring") casadi::Conic::alloc_iw "[INTERNAL]  Ensure required
length of iw field.

";

%feature("docstring") casadi::Conic::alloc_w "[INTERNAL]  Ensure required
length of w field.

";

%feature("docstring") casadi::Conic::get_n_out "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::Conic::get_jacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Conic::get_forward "[INTERNAL]  Return
function that calculates forward derivatives forward(nfwd) returns a cached
instance if available, and calls  Function get_forward(int nfwd) if no
cached version is available.

";

%feature("docstring") casadi::Conic::get_min_in "[INTERNAL]  Get smallest
input value.

";

%feature("docstring") casadi::Conic::sz_w "[INTERNAL]  Get required length
of w field.

";

%feature("docstring") casadi::Conic::all_scalar "[INTERNAL]  Are all inputs
and outputs scalar.

";

%feature("docstring") casadi::Conic::n_nodes "[INTERNAL]  Number of nodes
in the algorithm.

";

%feature("docstring") casadi::Conic::get_default_in "[INTERNAL]  Get
default input value.

";

%feature("docstring") casadi::Conic::get_sparsity_out "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Conic::mx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Conic::jacobian "[INTERNAL]  Return Jacobian
of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Conic::set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::Conic::is_a "[INTERNAL]  Check if the
function is of a particular type.

";

%feature("docstring") casadi::Conic::mapsum_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::Conic::init "[INTERNAL]  Initialize
Initialize and make the object ready for setting arguments and evaluation.
This method is typically called after setting options but before evaluating.
If passed to another class (in the constructor), this class should invoke
this function when initialized.

";

%feature("docstring") casadi::Conic::check_res "[INTERNAL]  Check if output
arguments have correct length and dimensions.

";

%feature("docstring") casadi::Conic::free_mx "[INTERNAL]  Get free
variables ( MX)

";

%feature("docstring") casadi::Conic::getAtomicOutput "

[DEPRECATED] Renamed instruction_output

";

%feature("docstring") casadi::Conic::weak "[INTERNAL]  Get a weak reference
to the object.

";

%feature("docstring") casadi::Conic::index_in "[INTERNAL]  Get input scheme
index by name.

";

%feature("docstring") casadi::Conic::definition "[INTERNAL]  Get function
signature: name:(inputs)->(outputs)

";

%feature("docstring") casadi::Conic::size2_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Conic::integer_support "[INTERNAL]  Can
discrete variables be treated.

";

%feature("docstring") casadi::Conic::generate_dependencies "[INTERNAL]
Export / Generate C code for the dependency function.

";

%feature("docstring") casadi::Conic::signature "[INTERNAL]  Code generate
the function.

";

%feature("docstring") casadi::Conic::matching_arg "[INTERNAL]  Check if
input arguments that needs to be replaced.

";

%feature("docstring") casadi::Conic::replace_aseed "[INTERNAL]  Replace
0-by-0 reverse seeds.

";

%feature("docstring") casadi::Conic::get_name_in "[INTERNAL]  Names of
function input and outputs.

";

%feature("docstring") casadi::Conic::has_reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::Conic::~Conic "[INTERNAL] ";

%feature("docstring") casadi::Conic::sz_work "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") casadi::Conic::getJacSparsity "[INTERNAL]  Generate
the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Conic::alloc_arg "[INTERNAL]  Ensure required
length of arg field.

";

%feature("docstring") casadi::Conic::plugin_name "[INTERNAL] ";

%feature("docstring") casadi::Conic::jit_dependencies "[INTERNAL]  Jit
dependencies.

";

%feature("docstring") casadi::Conic::Conic "[INTERNAL] ";

%feature("docstring") casadi::Conic::check_arg "[INTERNAL]  Check if input
arguments have correct length and dimensions.

";

%feature("docstring") casadi::Conic::fwdViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::Conic::has_derivative "[INTERNAL]  Can
derivatives be calculated in any way?

";

%feature("docstring") casadi::Conic::sx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Conic::sz_iw "[INTERNAL]  Get required length
of iw field.

";

%feature("docstring") casadi::Conic::eval_mx "[INTERNAL]  Evaluate with
symbolic matrices.

";

%feature("docstring") casadi::Conic::setup "[INTERNAL]  Set the (persistent
and temporary) work vectors.

";

%feature("docstring") casadi::Conic::fwd_seed "[INTERNAL]  Symbolic
expressions for the forward seeds.

";

%feature("docstring") casadi::Conic::reverse "[INTERNAL]  Return function
that calculates adjoint derivatives reverse(nadj) returns a cached instance
if available, and calls  Function get_reverse(int nadj) if no cached version
is available.

";

%feature("docstring") casadi::Conic::disp "[INTERNAL]  Display object.

";

%feature("docstring") casadi::Conic::call_gen "[INTERNAL]   Call a
function, overloaded.

";

%feature("docstring") casadi::Conic::index_out "[INTERNAL]  Get output
scheme index by name.

";

%feature("docstring") casadi::Conic::replace_res "[INTERNAL]  Replace
0-by-0 outputs.

";

%feature("docstring") casadi::Conic::print "[INTERNAL]  C-style formatted
printing during evaluation.

";

%feature("docstring") casadi::Conic::class_name "[INTERNAL]  Readable name
of the internal class.

";

%feature("docstring") casadi::Conic::instruction_input "[INTERNAL]  Get the
(integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::Conic::check_inputs "[INTERNAL]  Check if the
numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::Conic::mx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Conic::codegen_sparsities "[INTERNAL]
Codegen sparsities.

";

%feature("docstring") casadi::Conic::get_function "[INTERNAL] ";

%feature("docstring") casadi::Conic::set_temp "[INTERNAL]  Set the
(temporary) work vectors.

";

%feature("docstring") casadi::Conic::codegen_body "[INTERNAL]  Generate
code for the function body.

";

%feature("docstring") casadi::Conic::sp_forward "[INTERNAL]  Propagate
sparsity forward.

";

%feature("docstring") casadi::Conic::getAdaptorSolverName "[INTERNAL]
Obtain solver name from Adaptor.

";

%feature("docstring") casadi::Conic::getJacSparsityHierarchicalSymm "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::Conic::has_spfwd "[INTERNAL]  Is the class
able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Conic::construct "[INTERNAL]  Construct
Prepares the function for evaluation.

";

%feature("docstring") casadi::Conic::size2_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Conic::size1_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Conic::instruction_constant "[INTERNAL]  Get
the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::Conic::numel_out "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::Conic::generate_lifted "[INTERNAL]  Extract
the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::Conic::numel_in "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::Conic::instruction_output "[INTERNAL]  Get
the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::Conic::print_dimensions "[INTERNAL]  Print
dimensions of inputs and outputs.

";

%feature("docstring") casadi::Conic::release "[INTERNAL]  Release a memory
object.

";

%feature("docstring") casadi::Conic::instruction_id "[INTERNAL]  Get an
atomic operation operator index.

";

%feature("docstring") casadi::Conic::sprint "[INTERNAL]  C-style formatted
printing to string.

";

%feature("docstring") casadi::Conic::alloc "[INTERNAL]  Ensure work vectors
long enough to evaluate function.

";

%feature("docstring") casadi::Conic::codegen "[INTERNAL]  Generate code the
function.

";

%feature("docstring") casadi::Conic::matching_res "[INTERNAL]  Check if
output arguments that needs to be replaced.

";

%feature("docstring") casadi::Conic::nnz_out "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::Conic::info "[INTERNAL]  Obtain information
about function

";

%feature("docstring") casadi::Conic::sz_res "[INTERNAL]  Get required
length of res field.

";

%feature("docstring") casadi::Conic::codegen_incref "[INTERNAL]  Codegen
incref for dependencies.

";

%feature("docstring") casadi::Conic::oracle "[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::Conic::factory "[INTERNAL] ";

%feature("docstring") casadi::Conic::symbolicAdjSeed "[INTERNAL]  Symbolic
expressions for the adjoint seeds.

";

%feature("docstring") casadi::Conic::get_stats "[INTERNAL]  Get all
statistics.

";

%feature("docstring") casadi::Conic::codegen_name "[INTERNAL]  Get name in
codegen.

";

%feature("docstring") casadi::Conic::has_sprev "[INTERNAL]  Is the class
able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Conic::free_mem "[INTERNAL]  Free memory
block.

";

%feature("docstring") casadi::Conic::get_name_out "[INTERNAL]  Names of
function input and outputs.

";

%feature("docstring") casadi::Conic::sp_reverse "[INTERNAL]  Propagate
sparsity backwards.

";

%feature("docstring") casadi::Conic::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::Conic::has_forward "[INTERNAL]  Return
function that calculates forward derivatives forward(nfwd) returns a cached
instance if available, and calls  Function get_forward(int nfwd) if no
cached version is available.

";

%feature("docstring") casadi::Conic::get_max_in "[INTERNAL]  Get largest
input value.

";

%feature("docstring") casadi::Conic::getJacSparsityGen "[INTERNAL]  Get the
sparsity pattern, forward mode.

";

%feature("docstring") casadi::Conic::uses_output "[INTERNAL]  Do the
derivative functions need nondifferentiated outputs?

";

%feature("docstring") casadi::Conic::checkout "[INTERNAL]  Checkout a
memory object.

";

%feature("docstring") casadi::Conic::codegen_declarations "[INTERNAL]
Generate code for the declarations of the C function.

";

%feature("docstring") casadi::Conic::size_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Conic::get_options "[INTERNAL]  Options.

";

%feature("docstring") casadi::Conic::getJacSparsityHierarchical "[INTERNAL]
A flavor of getJacSparsity that does hierarchical block structure
recognition.

";

%feature("docstring") casadi::Conic::print_fstats "[INTERNAL]  Print
statistics.

";

%feature("docstring") casadi::Conic::get_sparsity_in "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Conic::print_options "[INTERNAL]  Print list
of options.

";

%feature("docstring") casadi::Conic::codegen_meta "[INTERNAL]  Generate
meta-information allowing a user to evaluate a generated function.

";

%feature("docstring") casadi::Conic::alloc_mem "[INTERNAL]  Create memory
block.

";

%feature("docstring") casadi::Conic::has_codegen "[INTERNAL]  Is codegen
supported?

";

%feature("docstring") casadi::Conic::sp_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode, sparsity propagation.

";

%feature("docstring") casadi::Conic::size_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Conic "

Internal class.

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| discrete         | OT_BOOLVECTOR   | Indicates which  | casadi::Conic    |
|                  |                 | of the variables |                  |
|                  |                 | are discrete,    |                  |
|                  |                 | i.e. integer-    |                  |
|                  |                 | valued           |                  |
+------------------+-----------------+------------------+------------------+
| enable_fd        | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation by   |                  |
|                  |                 | finite           |                  |
|                  |                 | differencing.    |                  |
|                  |                 | [default:        |                  |
|                  |                 | false]]          |                  |
+------------------+-----------------+------------------+------------------+
| enable_forward   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using forward    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_jacobian  | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobians of all |                  |
|                  |                 | differentiable   |                  |
|                  |                 | outputs with     |                  |
|                  |                 | respect to all   |                  |
|                  |                 | differentiable   |                  |
|                  |                 | inputs - if      |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_reverse   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | transposed       |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using reverse    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| fd_method        | OT_STRING       | Method for       | casadi::Function |
|                  |                 | finite           | Internal         |
|                  |                 | differencing     |                  |
|                  |                 | [default         |                  |
|                  |                 | 'central']       |                  |
+------------------+-----------------+------------------+------------------+
| fd_options       | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | finite           |                  |
|                  |                 | difference       |                  |
|                  |                 | instance         |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: conic_impl.hpp ";

%feature("docstring") casadi::Conic::memory "[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::Conic::init_mem "[INTERNAL]  Initalize memory
block.

";

%feature("docstring") casadi::Conic::getAtomicInput "

[DEPRECATED] Renamed instruction_index

";

%feature("docstring") casadi::Conic::wrap "[INTERNAL]  Wrap in an Function
instance consisting of only one MX call.

";

%feature("docstring") casadi::Conic::replace_arg "[INTERNAL]  Replace
0-by-0 inputs.

";

%feature("docstring") casadi::Conic::forward "[INTERNAL]  Return function
that calculates forward derivatives forward(nfwd) returns a cached instance
if available, and calls  Function get_forward(int nfwd) if no cached version
is available.

";

%feature("docstring") casadi::Conic::has_free "[INTERNAL]  Does the
function have free variables.

";

%feature("docstring") casadi::Conic::get_jacobian_sparsity "[INTERNAL]  Get
Jacobian sparsity.

";

%feature("docstring") casadi::Conic::export_code "[INTERNAL]  Export
function in a specific language.

";


// File: classcasadi_1_1Constant.xml


// File: classcasadi_1_1ConstantDM.xml


// File: classcasadi_1_1ConstantMX.xml


// File: classcasadi_1_1ConstantSX.xml


// File: classcasadi_1_1DaeBuilder.xml


/*  Variables and equations  */

/* Public data members

*/

/*  Symbolic modeling  */

/* Formulate an optimal control problem

*/

/*  Manipulation  */

/* Reformulate the dynamic optimization problem.

*/

/*  Functions  */

/* Add or load auxiliary functions

*/

/*  Import and export  */ %feature("docstring") casadi::DaeBuilder::add_s "

Add a implicit state.

";

%feature("docstring") casadi::DaeBuilder::add_fun "

>  Function casadi::DaeBuilder::add_fun(const std::string &name, const std::vector< std::string > &arg, const std::vector< std::string > &res, const Dict &opts=Dict())
------------------------------------------------------------------------

Add a function from loaded expressions.

>  Function casadi::DaeBuilder::add_fun(const Function &f)
------------------------------------------------------------------------

Add an already existing function.

>  Function casadi::DaeBuilder::add_fun(const std::string &name, const Importer &compiler, const Dict &opts=Dict())
------------------------------------------------------------------------

Add an external function.

";

%feature("docstring") casadi::DaeBuilder::sanity_check "

Check if dimensions match.

";

%feature("docstring") casadi::DaeBuilder::set_unit "

Set the unit for a component.

";

%feature("docstring") casadi::DaeBuilder::DaeBuilder "

Default constructor.

";

%feature("docstring") casadi::DaeBuilder::sort_dae "

Sort the DAE and implicitly defined states.

";

%feature("docstring") casadi::DaeBuilder::start "

>  double casadi::DaeBuilder::start(const std::string &name, bool normalized=false) const 
------------------------------------------------------------------------

Get the (optionally normalized) value at time 0 by name.

>  std::vector<double> casadi::DaeBuilder::start(const MX &var, bool normalized=false) const 
------------------------------------------------------------------------

Get the (optionally normalized) value(s) at time 0 by expression.

";

%feature("docstring") casadi::DaeBuilder::add_aux "

Add an auxiliary variable.

";

%feature("docstring") casadi::DaeBuilder::min "

>  double casadi::DaeBuilder::min(const std::string &name, bool normalized=false) const 
------------------------------------------------------------------------

Get the lower bound by name.

>  std::vector<double> casadi::DaeBuilder::min(const MX &var, bool normalized=false) const 
------------------------------------------------------------------------

Get the lower bound(s) by expression.

";

%feature("docstring") casadi::DaeBuilder::add_quad "

>  void casadi::DaeBuilder::add_quad(const std::string &name, const MX &new_quad)
------------------------------------------------------------------------

Add a quadrature equation.

>  void casadi::DaeBuilder::add_quad(const MX &new_quad, const std::string &name=std::string())
------------------------------------------------------------------------
[INTERNAL] 
Add a quadrature equation. Old syntax: Swap arguments.

";

%feature("docstring") casadi::DaeBuilder::nominal "

>  double casadi::DaeBuilder::nominal(const std::string &name) const 
------------------------------------------------------------------------

Get the nominal value by name.

>  std::vector<double> casadi::DaeBuilder::nominal(const MX &var) const 
------------------------------------------------------------------------

Get the nominal value(s) by expression.

";

%feature("docstring") casadi::DaeBuilder::max "

>  double casadi::DaeBuilder::max(const std::string &name, bool normalized=false) const 
------------------------------------------------------------------------

Get the upper bound by name.

>  std::vector<double> casadi::DaeBuilder::max(const MX &var, bool normalized=false) const 
------------------------------------------------------------------------

Get the upper bound(s) by expression.

";

%feature("docstring") casadi::DaeBuilder::make_semi_explicit "

Transform the implicit DAE to a semi-explicit DAE.

";

%feature("docstring") casadi::DaeBuilder::set_derivative_start "

>  void casadi::DaeBuilder::set_derivative_start(const std::string &name, double val, bool normalized=false)
------------------------------------------------------------------------

Set the (optionally normalized) derivative value at time 0 by name.

>  void casadi::DaeBuilder::set_derivative_start(const MX &var, const std::vector< double > &val, bool normalized=false)
------------------------------------------------------------------------

Set the (optionally normalized) derivative value(s) at time 0 by expression.

";

%feature("docstring") casadi::DaeBuilder::add_lc "

Add a named linear combination of output expressions.

";

%feature("docstring") casadi::DaeBuilder::sort_d "

Sort dependent parameters.

";

%feature("docstring") casadi::DaeBuilder::sort_alg "

Sort the algebraic equations and algebraic states.

";

%feature("docstring") casadi::DaeBuilder::fun "

Get function by name.

";

%feature("docstring") casadi::DaeBuilder::add_dae "

>  void casadi::DaeBuilder::add_dae(const std::string &name, const MX &new_dae)
------------------------------------------------------------------------

Add a differential-algebraic equation.

>  void casadi::DaeBuilder::add_dae(const MX &new_dae, const std::string &name=std::string())
------------------------------------------------------------------------
[INTERNAL] 
Add a differential-algebraic equation. Old syntax: Swap arguments.

";

%feature("docstring") casadi::DaeBuilder::make_explicit "

Transform the implicit DAE or semi-explicit DAE into an explicit ODE.

";

%feature("docstring") casadi::DaeBuilder "

An initial-value problem in differential-algebraic equations.

Independent variables:
======================





::

  t:      time
  



Time-continuous variables:
==========================





::

  x:      states defined by ODE
  s:      implicitly defined states
  z:      algebraic variables
  u:      control signals
  q:      quadrature states
  y:      outputs
  



Time-constant variables:
========================





::

  p:      free parameters
  d:      dependent parameters
  



Dynamic constraints (imposed everywhere):
=========================================





::

  ODE                    \\\\dot{x} ==  ode(t, x, s, z, u, p, d)
  DAE or implicit ODE:         0 ==  dae(t, x, s, z, u, p, d, sdot)
  algebraic equations:         0 ==  alg(t, x, s, z, u, p, d)
  quadrature equations:  \\\\dot{q} == quad(t, x, s, z, u, p, d)
  dependent parameters:        d == ddef(t, x, s, z, u, p, d)
  output equations:            y == ydef(t, x, s, z, u, p, d)
  



Point constraints (imposed pointwise):
======================================





::

  Initial equations:           0 == init(t, x, s, z, u, p, d, sdot)
  



Joel Andersson

C++ includes: dae_builder.hpp ";

%feature("docstring") casadi::DaeBuilder::add_q "

Add a new quadrature state.

";

%feature("docstring") casadi::DaeBuilder::add_p "

Add a new parameter

";

%feature("docstring") casadi::DaeBuilder::var "

Get variable expression by name.

";

%feature("docstring") casadi::DaeBuilder::add_u "

Add a new control.

";

%feature("docstring") casadi::DaeBuilder::has_fun "

Does a particular function already exist?

";

%feature("docstring") casadi::DaeBuilder::add_z "

Add a new algebraic variable.

";

%feature("docstring") casadi::DaeBuilder::add_y "

>  MX casadi::DaeBuilder::add_y(const std::string &name, const MX &new_ydef)
------------------------------------------------------------------------

Add a new output.

>  MX casadi::DaeBuilder::add_y(const MX &new_ydef, const std::string &name=std::string())
------------------------------------------------------------------------
[INTERNAL] 
Add a new output. Old syntax: Swap arguments.

";

%feature("docstring") casadi::DaeBuilder::add_x "

Add a new differential state.

";

%feature("docstring") casadi::DaeBuilder::eliminate_quad "

Eliminate quadrature states and turn them into ODE states.

";

%feature("docstring") casadi::DaeBuilder::derivative_start "

>  double casadi::DaeBuilder::derivative_start(const std::string &name, bool normalized=false) const 
------------------------------------------------------------------------

Get the (optionally normalized) derivative value at time 0 by name.

>  std::vector<double> casadi::DaeBuilder::derivative_start(const MX &var, bool normalized=false) const 
------------------------------------------------------------------------

Get the (optionally normalized) derivative value(s) at time 0 by expression.

";

%feature("docstring") casadi::DaeBuilder::set_nominal "

>  void casadi::DaeBuilder::set_nominal(const std::string &name, double val)
------------------------------------------------------------------------

Set the nominal value by name.

>  void casadi::DaeBuilder::set_nominal(const MX &var, const std::vector< double > &val)
------------------------------------------------------------------------

Set the nominal value(s) by expression.

";

%feature("docstring") casadi::DaeBuilder::parse_fmi "

Import existing problem from FMI/XML

";

%feature("docstring") casadi::DaeBuilder::add_variable "

>  void casadi::DaeBuilder::add_variable(const std::string &name, const Variable &var)
------------------------------------------------------------------------

Add a variable.

>  MX casadi::DaeBuilder::add_variable(const std::string &name, int n=1)

>  MX casadi::DaeBuilder::add_variable(const std::string &name, const Sparsity &sp)
------------------------------------------------------------------------

Add a new variable: returns corresponding symbolic expression.

";

%feature("docstring") casadi::DaeBuilder::add_d "

>  MX casadi::DaeBuilder::add_d(const std::string &name, const MX &new_ddef)
------------------------------------------------------------------------

Add a new dependent parameter.

>  MX casadi::DaeBuilder::add_d(const MX &new_ddef, const std::string &name=std::string())
------------------------------------------------------------------------
[INTERNAL] 
Add a new dependent parameter. Old syntax: Swap arguments.

";

%feature("docstring") casadi::DaeBuilder::split_dae "

Identify and separate the algebraic variables and equations in the DAE.

";

%feature("docstring") casadi::DaeBuilder::set_guess "

>  void casadi::DaeBuilder::set_guess(const std::string &name, double val, bool normalized=false)
------------------------------------------------------------------------

Set the initial guess by name.

>  void casadi::DaeBuilder::set_guess(const MX &var, const std::vector< double > &val, bool normalized=false)
------------------------------------------------------------------------

Set the initial guess(es) by expression.

";

%feature("docstring") casadi::DaeBuilder::add_alg "

>  void casadi::DaeBuilder::add_alg(const std::string &name, const MX &new_alg)
------------------------------------------------------------------------

Add an algebraic equation.

>  void casadi::DaeBuilder::add_alg(const MX &new_alg, const std::string &name=std::string())
------------------------------------------------------------------------
[INTERNAL] 
Add an algebraic equation. Old syntax: Swap arguments.

";

%feature("docstring") casadi::DaeBuilder::create "

Construct a function object.

";

%feature("docstring") casadi::DaeBuilder::guess "

>  double casadi::DaeBuilder::guess(const std::string &name, bool normalized=false) const 
------------------------------------------------------------------------

Get the initial guess by name.

>  std::vector<double> casadi::DaeBuilder::guess(const MX &var, bool normalized=false) const 
------------------------------------------------------------------------

Get the initial guess(es) by expression.

";

%feature("docstring") casadi::DaeBuilder::variable "

Access a variable by name

";

%feature("docstring") casadi::DaeBuilder::set_max "

>  void casadi::DaeBuilder::set_max(const std::string &name, double val, bool normalized=false)
------------------------------------------------------------------------

Set the upper bound by name.

>  void casadi::DaeBuilder::set_max(const MX &var, const std::vector< double > &val, bool normalized=false)
------------------------------------------------------------------------

Set the upper bound(s) by expression.

";

%feature("docstring") casadi::DaeBuilder::eliminate_alg "

Eliminate algebraic variables and equations transforming them into outputs.

";

%feature("docstring") casadi::DaeBuilder::set_min "

>  void casadi::DaeBuilder::set_min(const std::string &name, double val, bool normalized=false)
------------------------------------------------------------------------

Set the lower bound by name.

>  void casadi::DaeBuilder::set_min(const MX &var, const std::vector< double > &val, bool normalized=false)
------------------------------------------------------------------------

Set the lower bound(s) by expression.

";

%feature("docstring") casadi::DaeBuilder::set_start "

>  void casadi::DaeBuilder::set_start(const std::string &name, double val, bool normalized=false)
------------------------------------------------------------------------

Set the (optionally normalized) value at time 0 by name.

>  void casadi::DaeBuilder::set_start(const MX &var, const std::vector< double > &val, bool normalized=false)
------------------------------------------------------------------------

Set the (optionally normalized) value(s) at time 0 by expression.

";

%feature("docstring") casadi::DaeBuilder::unit "

>  std::string casadi::DaeBuilder::unit(const std::string &name) const 
------------------------------------------------------------------------

Get the unit for a component.

>  std::string casadi::DaeBuilder::unit(const MX &var) const 
------------------------------------------------------------------------

Get the unit given a vector of symbolic variables (all units must be
identical)

";

%feature("docstring") casadi::DaeBuilder::scale_variables "

Scale the variables.

";

%feature("docstring") casadi::DaeBuilder::split_d "

Eliminate interdependencies amongst dependent parameters.

";

%feature("docstring") casadi::DaeBuilder::eliminate_d "

Eliminate dependent parameters.

";

%feature("docstring") casadi::DaeBuilder::disp "

Print representation.

";

%feature("docstring") casadi::DaeBuilder::der "

>  MX casadi::DaeBuilder::der(const std::string &name) const 
------------------------------------------------------------------------

Get a derivative expression by name.

>  MX casadi::DaeBuilder::der(const MX &var) const 
------------------------------------------------------------------------

Get a derivative expression by non-differentiated expression.

";

%feature("docstring") casadi::DaeBuilder::type_name "

Readable name of the class.

";

%feature("docstring") casadi::DaeBuilder::scale_equations "

Scale the implicit equations.

";

%feature("docstring") casadi::DaeBuilder::get_str "

Get string representation.

";

%feature("docstring") casadi::DaeBuilder::add_ode "

>  void casadi::DaeBuilder::add_ode(const std::string &name, const MX &new_ode)
------------------------------------------------------------------------

Add an ordinary differential equation.

>  void casadi::DaeBuilder::add_ode(const MX &new_ode, const std::string &name=std::string())
------------------------------------------------------------------------
[INTERNAL] 
Add an ordinary differential equation. Old syntax: Swap arguments.

";


// File: classcasadi_1_1DenseMultiplication.xml


// File: classcasadi_1_1DenseTranspose.xml


// File: classcasadi_1_1Determinant.xml


// File: classcasadi_1_1Diagcat.xml


// File: classcasadi_1_1Diagsplit.xml


// File: classcasadi_1_1DllLibrary.xml
%feature("docstring") casadi::DllLibrary::construct "[INTERNAL]  Construct
Prepares the function for evaluation.

";

%feature("docstring") casadi::DllLibrary::DllLibrary "[INTERNAL] ";

%feature("docstring") casadi::DllLibrary::disp "[INTERNAL]  Print.

";

%feature("docstring") casadi::DllLibrary::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::DllLibrary "

Dynamically linked library.

Joel Andersson

>List of available options

+---------+---------+---------------------------------+--------------------+
|   Id    |  Type   |           Description           |      Used in       |
+=========+=========+=================================+====================+
| verbose | OT_BOOL | Verbose evaluation  for         | casadi::DllLibrary |
|         |         | debugging                       |                    |
+---------+---------+---------------------------------+--------------------+

Diagrams
--------



C++ includes: importer_internal.hpp ";

%feature("docstring") casadi::DllLibrary::get_function "[INTERNAL]  Get a
function pointer for numerical evaluation.

";

%feature("docstring") casadi::DllLibrary::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::DllLibrary::can_have_meta "[INTERNAL]  Can
meta information be read?

";

%feature("docstring") casadi::DllLibrary::read_meta "[INTERNAL]  Get meta
information.

";

%feature("docstring") casadi::DllLibrary::get_options "[INTERNAL]  Options.

";

%feature("docstring") casadi::DllLibrary::plugin_name "[INTERNAL]  Queery
plugin name.

";

%feature("docstring") casadi::DllLibrary::to_text "[INTERNAL]  Get entry as
a text.

";

%feature("docstring") casadi::DllLibrary::get_meta "[INTERNAL]  Get entry
as a text.

";

%feature("docstring") casadi::DllLibrary::read_external "[INTERNAL]  Get an
external function declaration.

";

%feature("docstring") casadi::DllLibrary::class_name "[INTERNAL]  Get type
name.

";

%feature("docstring") casadi::DllLibrary::init "[INTERNAL]  Initialize.

";

%feature("docstring") casadi::DllLibrary::~DllLibrary "[INTERNAL] ";

%feature("docstring") casadi::DllLibrary::body "[INTERNAL]  Get the
function body, if inlined.

";

%feature("docstring") casadi::DllLibrary::inlined "[INTERNAL] ";

%feature("docstring") casadi::DllLibrary::has_function "[INTERNAL]  Get a
function pointer for numerical evaluation.

";

%feature("docstring") casadi::DllLibrary::has_meta "[INTERNAL]  Does an
entry exist?

";


// File: classcasadi_1_1Dot.xml


// File: classcasadi_1_1Dple.xml
%feature("docstring") casadi::Dple::sz_w "[INTERNAL]  Get required length
of w field.

";

%feature("docstring") casadi::Dple::eval "[INTERNAL]  Evaluate numerically.

";

%feature("docstring") casadi::Dple::generate_lifted "[INTERNAL]  Extract
the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::Dple::checkout "[INTERNAL]  Checkout a memory
object.

";

%feature("docstring") casadi::Dple::fwdViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::Dple::sx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Dple::get_function "[INTERNAL] ";

%feature("docstring") casadi::Dple::print "[INTERNAL]  C-style formatted
printing during evaluation.

";

%feature("docstring") casadi::Dple::replace_res "[INTERNAL]  Replace 0-by-0
outputs.

";

%feature("docstring") casadi::Dple::set_temp "[INTERNAL]  Set the
(temporary) work vectors.

";

%feature("docstring") casadi::Dple::sparsity_jac "[INTERNAL]  Get, if
necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Dple::forward "[INTERNAL]  Return function
that calculates forward derivatives forward(nfwd) returns a cached instance
if available, and calls  Function get_forward(int nfwd) if no cached version
is available.

";

%feature("docstring") casadi::Dple::getJacSparsity "[INTERNAL]  Generate
the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Dple::jit_dependencies "[INTERNAL]  Jit
dependencies.

";

%feature("docstring") casadi::Dple::sz_res "[INTERNAL]  Get required length
of res field.

";

%feature("docstring") casadi::Dple::symbolic_output "[INTERNAL]  Get a
vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::Dple "

Internal class.

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| const_dim        | OT_BOOL         | Assume constant  | casadi::Dple     |
|                  |                 | dimension of P   |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| enable_fd        | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation by   |                  |
|                  |                 | finite           |                  |
|                  |                 | differencing.    |                  |
|                  |                 | [default:        |                  |
|                  |                 | false]]          |                  |
+------------------+-----------------+------------------+------------------+
| enable_forward   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using forward    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_jacobian  | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobians of all |                  |
|                  |                 | differentiable   |                  |
|                  |                 | outputs with     |                  |
|                  |                 | respect to all   |                  |
|                  |                 | differentiable   |                  |
|                  |                 | inputs - if      |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_reverse   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | transposed       |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using reverse    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| eps_unstable     | OT_DOUBLE       | A margin for     | casadi::Dple     |
|                  |                 | unstability      |                  |
|                  |                 | detection        |                  |
+------------------+-----------------+------------------+------------------+
| error_unstable   | OT_BOOL         | Throw an         | casadi::Dple     |
|                  |                 | exception when   |                  |
|                  |                 | it is detected   |                  |
|                  |                 | that             |                  |
|                  |                 | Product(A_i,     |                  |
|                  |                 | i=N..1)has       |                  |
|                  |                 | eigenvalues      |                  |
|                  |                 | greater than     |                  |
|                  |                 | 1-eps_unstable   |                  |
+------------------+-----------------+------------------+------------------+
| fd_method        | OT_STRING       | Method for       | casadi::Function |
|                  |                 | finite           | Internal         |
|                  |                 | differencing     |                  |
|                  |                 | [default         |                  |
|                  |                 | 'central']       |                  |
+------------------+-----------------+------------------+------------------+
| fd_options       | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | finite           |                  |
|                  |                 | difference       |                  |
|                  |                 | instance         |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| pos_def          | OT_BOOL         | Assume P         | casadi::Dple     |
|                  |                 | positive         |                  |
|                  |                 | definite         |                  |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: dple_impl.hpp ";

%feature("docstring") casadi::Dple::n_nodes "[INTERNAL]  Number of nodes in
the algorithm.

";

%feature("docstring") casadi::Dple::replace_fseed "[INTERNAL]  Replace
0-by-0 forward seeds.

";

%feature("docstring") casadi::Dple::get_stats "[INTERNAL]  Get all
statistics.

";

%feature("docstring") casadi::Dple::codegen_decref "[INTERNAL]  Codegen
decref for dependencies.

";

%feature("docstring") casadi::Dple::eval_sx "[INTERNAL]  Evaluate with
symbolic scalars.

";

%feature("docstring") casadi::Dple::print_options "[INTERNAL]  Print list
of options.

";

%feature("docstring") casadi::Dple::get_reltol "[INTERNAL]  Get relative
tolerance.

";

%feature("docstring") casadi::Dple::codegen_declarations "[INTERNAL]
Generate code for the declarations of the C function.

";

%feature("docstring") casadi::Dple::size1_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Dple::instruction_id "[INTERNAL]  Get an
atomic operation operator index.

";

%feature("docstring") casadi::Dple::nnz_out "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::Dple::symbolicAdjSeed "[INTERNAL]  Symbolic
expressions for the adjoint seeds.

";

%feature("docstring") casadi::Dple::which_depends "[INTERNAL]  Which
variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::Dple::eval_dm "[INTERNAL]  Evaluate with DM
matrices.

";

%feature("docstring") casadi::Dple::weak "[INTERNAL]  Get a weak reference
to the object.

";

%feature("docstring") casadi::Dple::get_reverse "[INTERNAL]  Generate a
function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::Dple::instruction_MX "[INTERNAL]  get MX
expression associated with instruction

";

%feature("docstring") casadi::Dple::free_sx "[INTERNAL]  Get free variables
(SX)

";

%feature("docstring") casadi::Dple::call "[INTERNAL]   Call a function,
templated.

";

%feature("docstring") casadi::Dple::factory "[INTERNAL] ";

%feature("docstring") casadi::Dple::index_out "[INTERNAL]  Get output
scheme index by name.

";

%feature("docstring") casadi::Dple::get_max_in "[INTERNAL]  Get largest
input value.

";

%feature("docstring") casadi::Dple::alloc_mem "[INTERNAL]  Create memory
block.

";

%feature("docstring") casadi::Dple::print_dimensions "[INTERNAL]  Print
dimensions of inputs and outputs.

";

%feature("docstring") casadi::Dple::get_options "[INTERNAL]  Options.

";

%feature("docstring") casadi::Dple::definition "[INTERNAL]  Get function
signature: name:(inputs)->(outputs)

";

%feature("docstring") casadi::Dple::sz_work "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") casadi::Dple::get_forward "[INTERNAL]  Generate a
function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::Dple::plugin_name "[INTERNAL] ";

%feature("docstring") casadi::Dple::clear_mem "[INTERNAL]  Clear all memory
(called from destructor)

";

%feature("docstring") casadi::Dple::call_reverse "[INTERNAL]  Reverse mode,
virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Dple::adjViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::Dple::alloc_iw "[INTERNAL]  Ensure required
length of iw field.

";

%feature("docstring") casadi::Dple::Dple "[INTERNAL] ";

%feature("docstring") casadi::Dple::size2_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Dple::eval_gen "

>  int casadi::FunctionInternal::eval_gen(const double **arg, double **res, int *iw, double *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate numerically.

>  int casadi::FunctionInternal::eval_gen(const SXElem **arg, SXElem **res, int *iw, SXElem *w, void *mem) const

>  int casadi::FunctionInternal::eval_gen(const bvec_t **arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

%feature("docstring") casadi::Dple::getAdaptorSolverName "[INTERNAL]
Obtain solver name from Adaptor.

";

%feature("docstring") casadi::Dple::get_jacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Dple::construct "[INTERNAL]  Construct
Prepares the function for evaluation.

";

%feature("docstring") casadi::Dple::size_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Dple::check_res "[INTERNAL]  Check if output
arguments have correct length and dimensions.

";

%feature("docstring") casadi::Dple::set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::Dple::info "[INTERNAL]  Obtain information
about function

";

%feature("docstring") casadi::Dple::get_sparsity_in "[INTERNAL]  Sparsities
of function inputs and outputs.

";

%feature("docstring") casadi::Dple::getCount "[INTERNAL]  Get the reference
count.

";

%feature("docstring") casadi::Dple::sz_arg "[INTERNAL]  Get required length
of arg field.

";

%feature("docstring") casadi::Dple::has_jacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Dple::has_codegen "[INTERNAL]  Is codegen
supported?

";

%feature("docstring") casadi::Dple::self "[INTERNAL]  Get a public class
instance.

";

%feature("docstring") casadi::Dple::get_default_in "[INTERNAL]  Get default
input value.

";

%feature("docstring") casadi::Dple::print_option "[INTERNAL]  Print all
information there is to know about a certain option.

";

%feature("docstring") casadi::Dple::get_name_in "[INTERNAL]  Names of
function input and outputs.

";

%feature("docstring") casadi::Dple::has_reverse "[INTERNAL]  Generate a
function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::Dple::free_mem "[INTERNAL]  Free memory
block.

";

%feature("docstring") casadi::Dple::has_free "[INTERNAL]  Does the function
have free variables.

";

%feature("docstring") casadi::Dple::nnz_in "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::Dple::get_free "[INTERNAL]  Print free
variables.

";

%feature("docstring") casadi::Dple::sp_forward "[INTERNAL]  Propagate
sparsity forward.

";

%feature("docstring") casadi::Dple::get_min_in "[INTERNAL]  Get smallest
input value.

";

%feature("docstring") casadi::Dple::index_in "[INTERNAL]  Get input scheme
index by name.

";

%feature("docstring") casadi::Dple::oracle "[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::Dple::setup "[INTERNAL]  Set the (persistent
and temporary) work vectors.

";

%feature("docstring") casadi::Dple::alloc_res "[INTERNAL]  Ensure required
length of res field.

";

%feature("docstring") casadi::Dple::size_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Dple::slice "[INTERNAL]  returns a new
function with a selection of inputs/outputs of the original

";

%feature("docstring") casadi::Dple::codegen_meta "[INTERNAL]  Generate
meta-information allowing a user to evaluate a generated function.

";

%feature("docstring") casadi::Dple::has_sprev "[INTERNAL]  Is the class
able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Dple::instruction_output "[INTERNAL]  Get the
(integer) output argument of an atomic operation.

";

%feature("docstring") casadi::Dple::eval_mx "[INTERNAL]  Evaluate with
symbolic matrices.

";

%feature("docstring") casadi::Dple::sp_weight "[INTERNAL]  Weighting factor
for chosing forward/reverse mode, sparsity propagation.

";

%feature("docstring") casadi::Dple::is_a "[INTERNAL]  Check if the function
is of a particular type.

";

%feature("docstring") casadi::Dple::alloc_arg "[INTERNAL]  Ensure required
length of arg field.

";

%feature("docstring") casadi::Dple::has_forward "[INTERNAL]  Generate a
function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::Dple::codegen_incref "[INTERNAL]  Codegen
incref for dependencies.

";

%feature("docstring") casadi::Dple::has_derivative "[INTERNAL]  Can
derivatives be calculated in any way?

";

%feature("docstring") casadi::Dple::sx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Dple::n_instructions "[INTERNAL]  Get the
number of atomic operations.

";

%feature("docstring") casadi::Dple::sz_iw "[INTERNAL]  Get required length
of iw field.

";

%feature("docstring") casadi::Dple::getAtomicInput "

[DEPRECATED] Renamed instruction_index

";

%feature("docstring") casadi::Dple::ad_weight "[INTERNAL]  Weighting factor
for chosing forward/reverse mode.

";

%feature("docstring") casadi::Dple::codegen_body "[INTERNAL]  Generate code
for the function body.

";

%feature("docstring") casadi::Dple::~Dple "[INTERNAL] ";

%feature("docstring") casadi::Dple::numel_in "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::Dple::get_abstol "[INTERNAL]  Get absolute
tolerance.

";

%feature("docstring") casadi::Dple::check_arg "[INTERNAL]  Check if input
arguments have correct length and dimensions.

";

%feature("docstring") casadi::Dple::size1_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Dple::uses_output "[INTERNAL]  Do the
derivative functions need nondifferentiated outputs?

";

%feature("docstring") casadi::Dple::get_sparsity_out "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Dple::size2_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Dple::mx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Dple::init_mem "[INTERNAL]  Initalize memory
block.

";

%feature("docstring") casadi::Dple::replace_aseed "[INTERNAL]  Replace
0-by-0 reverse seeds.

";

%feature("docstring") casadi::Dple::release "[INTERNAL]  Release a memory
object.

";

%feature("docstring") casadi::Dple::generate_dependencies "[INTERNAL]
Export / Generate C code for the dependency function.

";

%feature("docstring") casadi::Dple::numel_out "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::Dple::instruction_input "[INTERNAL]  Get the
(integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::Dple::memory "[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::Dple::reverse "[INTERNAL]  Return function
that calculates adjoint derivatives reverse(nadj) returns a cached instance
if available, and calls  Function get_reverse(int nadj) if no cached version
is available.

";

%feature("docstring") casadi::Dple::getJacSparsityHierarchical "[INTERNAL]
A flavor of getJacSparsity that does hierarchical block structure
recognition.

";

%feature("docstring") casadi::Dple::instruction_constant "[INTERNAL]  Get
the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::Dple::matching_res "[INTERNAL]  Check if
output arguments that needs to be replaced.

";

%feature("docstring") casadi::Dple::get_name_out "[INTERNAL]  Names of
function input and outputs.

";

%feature("docstring") casadi::Dple::codegen "[INTERNAL]  Generate code the
function.

";

%feature("docstring") casadi::Dple::getAtomicOutput "

[DEPRECATED] Renamed instruction_output

";

%feature("docstring") casadi::Dple::alloc "[INTERNAL]  Ensure work vectors
long enough to evaluate function.

";

%feature("docstring") casadi::Dple::mx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Dple::finalize "[INTERNAL]  Finalize the
object creation.

";

%feature("docstring") casadi::Dple::get_partition "[INTERNAL]  Get the
unidirectional or bidirectional partition.

";

%feature("docstring") casadi::Dple::wrap "[INTERNAL]  Wrap in an Function
instance consisting of only one MX call.

";

%feature("docstring") casadi::Dple::getJacSparsityHierarchicalSymm "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::Dple::alloc_w "[INTERNAL]  Ensure required
length of w field.

";

%feature("docstring") casadi::Dple::init "[INTERNAL]  Initialize Initialize
and make the object ready for setting arguments and evaluation. This method
is typically called after setting options but before evaluating. If passed
to another class (in the constructor), this class should invoke this
function when initialized.

";

%feature("docstring") casadi::Dple::get_n_out "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::Dple::get_jacobian_sparsity "[INTERNAL]  Get
Jacobian sparsity.

";

%feature("docstring") casadi::Dple::disp "[INTERNAL]  Display object.

";

%feature("docstring") casadi::Dple::codegen_sparsities "[INTERNAL]  Codegen
sparsities.

";

%feature("docstring") casadi::Dple::replace_arg "[INTERNAL]  Replace 0-by-0
inputs.

";

%feature("docstring") casadi::Dple::codegen_name "[INTERNAL]  Get name in
codegen.

";

%feature("docstring") casadi::Dple::export_code "[INTERNAL]  Export
function in a specific language.

";

%feature("docstring") casadi::Dple::sprint "[INTERNAL]  C-style formatted
printing to string.

";

%feature("docstring") casadi::Dple::signature "[INTERNAL]  Code generate
the function.

";

%feature("docstring") casadi::Dple::fwd_seed "[INTERNAL]  Symbolic
expressions for the forward seeds.

";

%feature("docstring") casadi::Dple::has_spfwd "[INTERNAL]  Is the class
able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Dple::class_name "[INTERNAL]  Readable name
of the internal class.

";

%feature("docstring") casadi::Dple::matching_arg "[INTERNAL]  Check if
input arguments that needs to be replaced.

";

%feature("docstring") casadi::Dple::has_function "[INTERNAL] ";

%feature("docstring") casadi::Dple::call_forward "[INTERNAL]  Forward mode
AD, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Dple::getJacSparsityGen "[INTERNAL]  Get the
sparsity pattern, forward mode.

";

%feature("docstring") casadi::Dple::disp_more "[INTERNAL]  Print more.

";

%feature("docstring") casadi::Dple::jacobian "[INTERNAL]  Return Jacobian
of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Dple::mapsum_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::Dple::get_n_in "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::Dple::sp_reverse "[INTERNAL]  Propagate
sparsity backwards.

";

%feature("docstring") casadi::Dple::free_mx "[INTERNAL]  Get free variables
( MX)

";

%feature("docstring") casadi::Dple::all_scalar "[INTERNAL]  Are all inputs
and outputs scalar.

";

%feature("docstring") casadi::Dple::call_gen "[INTERNAL]   Call a function,
overloaded.

";


// File: classcasadi_1_1Einstein.xml


// File: classcasadi_1_1Expm.xml
%feature("docstring") casadi::Expm::get_min_in "[INTERNAL]  Get smallest
input value.

";

%feature("docstring") casadi::Expm::free_mem "[INTERNAL]  Free memory
block.

";

%feature("docstring") casadi::Expm::has_free "[INTERNAL]  Does the function
have free variables.

";

%feature("docstring") casadi::Expm::self "[INTERNAL]  Get a public class
instance.

";

%feature("docstring") casadi::Expm::symbolic_output "[INTERNAL]  Get a
vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::Expm::eval_sx "[INTERNAL]  Evaluate with
symbolic scalars.

";

%feature("docstring") casadi::Expm::size1_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Expm::size2_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Expm::finalize "[INTERNAL]  Finalize the
object creation.

";

%feature("docstring") casadi::Expm::get_reltol "[INTERNAL]  Get relative
tolerance.

";

%feature("docstring") casadi::Expm::replace_res "[INTERNAL]  Replace 0-by-0
outputs.

";

%feature("docstring") casadi::Expm::alloc_w "[INTERNAL]  Ensure required
length of w field.

";

%feature("docstring") casadi::Expm::factory "[INTERNAL] ";

%feature("docstring") casadi::Expm::info "[INTERNAL]  Obtain information
about function

";

%feature("docstring") casadi::Expm::getAtomicOutput "

[DEPRECATED] Renamed instruction_output

";

%feature("docstring") casadi::Expm::sz_res "[INTERNAL]  Get required length
of res field.

";

%feature("docstring") casadi::Expm::has_jacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Expm::print_dimensions "[INTERNAL]  Print
dimensions of inputs and outputs.

";

%feature("docstring") casadi::Expm::has_sprev "[INTERNAL]  Is the class
able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Expm::alloc "[INTERNAL]  Ensure work vectors
long enough to evaluate function.

";

%feature("docstring") casadi::Expm::codegen_body "[INTERNAL]  Generate code
for the function body.

";

%feature("docstring") casadi::Expm::disp_more "[INTERNAL]  Print more.

";

%feature("docstring") casadi::Expm::fwdViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::Expm::get_name_in "[INTERNAL]  Names of
function input and outputs.

";

%feature("docstring") casadi::Expm::uses_output "[INTERNAL]  Do the
derivative functions need nondifferentiated outputs?

";

%feature("docstring") casadi::Expm::index_out "[INTERNAL]  Get output
scheme index by name.

";

%feature("docstring") casadi::Expm::free_sx "[INTERNAL]  Get free variables
(SX)

";

%feature("docstring") casadi::Expm::jit_dependencies "[INTERNAL]  Jit
dependencies.

";

%feature("docstring") casadi::Expm::Expm "[INTERNAL] ";

%feature("docstring") casadi::Expm::oracle "[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::Expm::getJacSparsityHierarchicalSymm "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::Expm::codegen_sparsities "[INTERNAL]  Codegen
sparsities.

";

%feature("docstring") casadi::Expm::get_n_in "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::Expm::size2_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Expm::has_function "[INTERNAL] ";

%feature("docstring") casadi::Expm::alloc_iw "[INTERNAL]  Ensure required
length of iw field.

";

%feature("docstring") casadi::Expm::get_function "[INTERNAL] ";

%feature("docstring") casadi::Expm::init_mem "[INTERNAL]  Initalize memory
block.

";

%feature("docstring") casadi::Expm::sp_weight "[INTERNAL]  Weighting factor
for chosing forward/reverse mode, sparsity propagation.

";

%feature("docstring") casadi::Expm::get_options "[INTERNAL]  Options.

";

%feature("docstring") casadi::Expm::replace_arg "[INTERNAL]  Replace 0-by-0
inputs.

";

%feature("docstring") casadi::Expm::getCount "[INTERNAL]  Get the reference
count.

";

%feature("docstring") casadi::Expm::call_reverse "[INTERNAL]  Reverse mode,
virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Expm::nnz_in "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::Expm::eval_gen "

>  int casadi::FunctionInternal::eval_gen(const double **arg, double **res, int *iw, double *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate numerically.

>  int casadi::FunctionInternal::eval_gen(const SXElem **arg, SXElem **res, int *iw, SXElem *w, void *mem) const

>  int casadi::FunctionInternal::eval_gen(const bvec_t **arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

%feature("docstring") casadi::Expm::forward "[INTERNAL]  Return function
that calculates forward derivatives forward(nfwd) returns a cached instance
if available, and calls  Function get_forward(int nfwd) if no cached version
is available.

";

%feature("docstring") casadi::Expm::get_abstol "[INTERNAL]  Get absolute
tolerance.

";

%feature("docstring") casadi::Expm::numel_in "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::Expm::print "[INTERNAL]  C-style formatted
printing during evaluation.

";

%feature("docstring") casadi::Expm::numel_out "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::Expm::matching_arg "[INTERNAL]  Check if
input arguments that needs to be replaced.

";

%feature("docstring") casadi::Expm::codegen_decref "[INTERNAL]  Codegen
decref for dependencies.

";

%feature("docstring") casadi::Expm::set_temp "[INTERNAL]  Set the
(temporary) work vectors.

";

%feature("docstring") casadi::Expm::jacobian "[INTERNAL]  Return Jacobian
of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Expm::eval_dm "[INTERNAL]  Evaluate with DM
matrices.

";

%feature("docstring") casadi::Expm::index_in "[INTERNAL]  Get input scheme
index by name.

";

%feature("docstring") casadi::Expm::mapsum_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::Expm::wrap "[INTERNAL]  Wrap in an Function
instance consisting of only one MX call.

";

%feature("docstring") casadi::Expm::call "[INTERNAL]   Call a function,
templated.

";

%feature("docstring") casadi::Expm::export_code "[INTERNAL]  Export
function in a specific language.

";

%feature("docstring") casadi::Expm::adjViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::Expm::sx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Expm::mx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Expm::get_sparsity_in "[INTERNAL]  Sparsities
of function inputs and outputs.

";

%feature("docstring") casadi::Expm::init "[INTERNAL]  Initialize Initialize
and make the object ready for setting arguments and evaluation. This method
is typically called after setting options but before evaluating. If passed
to another class (in the constructor), this class should invoke this
function when initialized.

";

%feature("docstring") casadi::Expm::free_mx "[INTERNAL]  Get free variables
( MX)

";

%feature("docstring") casadi::Expm::get_n_out "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::Expm::instruction_output "[INTERNAL]  Get the
(integer) output argument of an atomic operation.

";

%feature("docstring") casadi::Expm::sz_w "[INTERNAL]  Get required length
of w field.

";

%feature("docstring") casadi::Expm::setup "[INTERNAL]  Set the (persistent
and temporary) work vectors.

";

%feature("docstring") casadi::Expm::has_codegen "[INTERNAL]  Is codegen
supported?

";

%feature("docstring") casadi::Expm::plugin_name "[INTERNAL] ";

%feature("docstring") casadi::Expm::get_partition "[INTERNAL]  Get the
unidirectional or bidirectional partition.

";

%feature("docstring") casadi::Expm::clear_mem "[INTERNAL]  Clear all memory
(called from destructor)

";

%feature("docstring") casadi::Expm::get_stats "[INTERNAL]  Get all
statistics.

";

%feature("docstring") casadi::Expm::codegen_meta "[INTERNAL]  Generate
meta-information allowing a user to evaluate a generated function.

";

%feature("docstring") casadi::Expm::mx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Expm::generate_lifted "[INTERNAL]  Extract
the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::Expm::alloc_mem "[INTERNAL]  Create memory
block.

";

%feature("docstring") casadi::Expm::sz_iw "[INTERNAL]  Get required length
of iw field.

";

%feature("docstring") casadi::Expm::which_depends "[INTERNAL]  Which
variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::Expm::alloc_arg "[INTERNAL]  Ensure required
length of arg field.

";

%feature("docstring") casadi::Expm::getAtomicInput "

[DEPRECATED] Renamed instruction_index

";

%feature("docstring") casadi::Expm::fwd_seed "[INTERNAL]  Symbolic
expressions for the forward seeds.

";

%feature("docstring") casadi::Expm::sz_arg "[INTERNAL]  Get required length
of arg field.

";

%feature("docstring") casadi::Expm::get_sparsity_out "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Expm::instruction_id "[INTERNAL]  Get an
atomic operation operator index.

";

%feature("docstring") casadi::Expm::replace_aseed "[INTERNAL]  Replace
0-by-0 reverse seeds.

";

%feature("docstring") casadi::Expm::size_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Expm::matching_res "[INTERNAL]  Check if
output arguments that needs to be replaced.

";

%feature("docstring") casadi::Expm::replace_fseed "[INTERNAL]  Replace
0-by-0 forward seeds.

";

%feature("docstring") casadi::Expm::has_spfwd "[INTERNAL]  Is the class
able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Expm::checkout "[INTERNAL]  Checkout a memory
object.

";

%feature("docstring") casadi::Expm::instruction_constant "[INTERNAL]  Get
the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::Expm::codegen "[INTERNAL]  Generate code the
function.

";

%feature("docstring") casadi::Expm::sz_work "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") casadi::Expm::reverse "[INTERNAL]  Return function
that calculates adjoint derivatives reverse(nadj) returns a cached instance
if available, and calls  Function get_reverse(int nadj) if no cached version
is available.

";

%feature("docstring") casadi::Expm::check_res "[INTERNAL]  Check if output
arguments have correct length and dimensions.

";

%feature("docstring") casadi::Expm::eval_mx "[INTERNAL]  Evaluate with
symbolic matrices.

";

%feature("docstring") casadi::Expm::all_scalar "[INTERNAL]  Are all inputs
and outputs scalar.

";

%feature("docstring") casadi::Expm::getJacSparsityGen "[INTERNAL]  Get the
sparsity pattern, forward mode.

";

%feature("docstring") casadi::Expm::get_forward "[INTERNAL]  Generate a
function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::Expm::call_forward "[INTERNAL]  Forward mode
AD, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Expm::sx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Expm::codegen_declarations "[INTERNAL]
Generate code for the declarations of the C function.

";

%feature("docstring") casadi::Expm::set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::Expm::get_default_in "[INTERNAL]  Get default
input value.

";

%feature("docstring") casadi::Expm::instruction_input "[INTERNAL]  Get the
(integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::Expm::size_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Expm::instruction_MX "[INTERNAL]  get MX
expression associated with instruction

";

%feature("docstring") casadi::Expm::disp "[INTERNAL]  Display object.

";

%feature("docstring") casadi::Expm::n_instructions "[INTERNAL]  Get the
number of atomic operations.

";

%feature("docstring") casadi::Expm "

Internal class.

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| const_A          | OT_BOOL         | Assume A is      | casadi::Expm     |
|                  |                 | constant.        |                  |
|                  |                 | Default: false.  |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| enable_fd        | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation by   |                  |
|                  |                 | finite           |                  |
|                  |                 | differencing.    |                  |
|                  |                 | [default:        |                  |
|                  |                 | false]]          |                  |
+------------------+-----------------+------------------+------------------+
| enable_forward   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using forward    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_jacobian  | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobians of all |                  |
|                  |                 | differentiable   |                  |
|                  |                 | outputs with     |                  |
|                  |                 | respect to all   |                  |
|                  |                 | differentiable   |                  |
|                  |                 | inputs - if      |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_reverse   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | transposed       |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using reverse    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| fd_method        | OT_STRING       | Method for       | casadi::Function |
|                  |                 | finite           | Internal         |
|                  |                 | differencing     |                  |
|                  |                 | [default         |                  |
|                  |                 | 'central']       |                  |
+------------------+-----------------+------------------+------------------+
| fd_options       | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | finite           |                  |
|                  |                 | difference       |                  |
|                  |                 | instance         |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: expm_impl.hpp ";

%feature("docstring") casadi::Expm::size1_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Expm::call_gen "[INTERNAL]   Call a function,
overloaded.

";

%feature("docstring") casadi::Expm::generate_dependencies "[INTERNAL]
Export / Generate C code for the dependency function.

";

%feature("docstring") casadi::Expm::get_jacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Expm::n_nodes "[INTERNAL]  Number of nodes in
the algorithm.

";

%feature("docstring") casadi::Expm::codegen_name "[INTERNAL]  Get name in
codegen.

";

%feature("docstring") casadi::Expm::has_derivative "[INTERNAL]  Can
derivatives be calculated in any way?

";

%feature("docstring") casadi::Expm::symbolicAdjSeed "[INTERNAL]  Symbolic
expressions for the adjoint seeds.

";

%feature("docstring") casadi::Expm::release "[INTERNAL]  Release a memory
object.

";

%feature("docstring") casadi::Expm::signature "[INTERNAL]  Code generate
the function.

";

%feature("docstring") casadi::Expm::check_arg "[INTERNAL]  Check if input
arguments have correct length and dimensions.

";

%feature("docstring") casadi::Expm::get_jacobian_sparsity "[INTERNAL]  Get
Jacobian sparsity.

";

%feature("docstring") casadi::Expm::has_reverse "[INTERNAL]  Generate a
function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::Expm::getJacSparsity "[INTERNAL]  Generate
the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Expm::get_name_out "[INTERNAL]  Names of
function input and outputs.

";

%feature("docstring") casadi::Expm::is_a "[INTERNAL]  Check if the function
is of a particular type.

";

%feature("docstring") casadi::Expm::print_option "[INTERNAL]  Print all
information there is to know about a certain option.

";

%feature("docstring") casadi::Expm::get_reverse "[INTERNAL]  Generate a
function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::Expm::get_free "[INTERNAL]  Print free
variables.

";

%feature("docstring") casadi::Expm::definition "[INTERNAL]  Get function
signature: name:(inputs)->(outputs)

";

%feature("docstring") casadi::Expm::has_forward "[INTERNAL]  Generate a
function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::Expm::sp_forward "[INTERNAL]  Propagate
sparsity forward.

";

%feature("docstring") casadi::Expm::weak "[INTERNAL]  Get a weak reference
to the object.

";

%feature("docstring") casadi::Expm::alloc_res "[INTERNAL]  Ensure required
length of res field.

";

%feature("docstring") casadi::Expm::construct "[INTERNAL]  Construct
Prepares the function for evaluation.

";

%feature("docstring") casadi::Expm::getJacSparsityHierarchical "[INTERNAL]
A flavor of getJacSparsity that does hierarchical block structure
recognition.

";

%feature("docstring") casadi::Expm::print_options "[INTERNAL]  Print list
of options.

";

%feature("docstring") casadi::Expm::ad_weight "[INTERNAL]  Weighting factor
for chosing forward/reverse mode.

";

%feature("docstring") casadi::Expm::eval "[INTERNAL]  Evaluate numerically.

";

%feature("docstring") casadi::Expm::sp_reverse "[INTERNAL]  Propagate
sparsity backwards.

";

%feature("docstring") casadi::Expm::~Expm "[INTERNAL] ";

%feature("docstring") casadi::Expm::codegen_incref "[INTERNAL]  Codegen
incref for dependencies.

";

%feature("docstring") casadi::Expm::nnz_out "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::Expm::get_max_in "[INTERNAL]  Get largest
input value.

";

%feature("docstring") casadi::Expm::getAdaptorSolverName "[INTERNAL]
Obtain solver name from Adaptor.

";

%feature("docstring") casadi::Expm::slice "[INTERNAL]  returns a new
function with a selection of inputs/outputs of the original

";

%feature("docstring") casadi::Expm::class_name "[INTERNAL]  Readable name
of the internal class.

";

%feature("docstring") casadi::Expm::sparsity_jac "[INTERNAL]  Get, if
necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Expm::memory "[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::Expm::sprint "[INTERNAL]  C-style formatted
printing to string.

";


// File: classcasadi_1_1External.xml
%feature("docstring") casadi::External::call_reverse "[INTERNAL]  Reverse
mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::External::jacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::External::check_arg "[INTERNAL]  Check if
input arguments have correct length and dimensions.

";

%feature("docstring") casadi::External::get_default_in "[INTERNAL]  Get
default input value.

";

%feature("docstring") casadi::External::alloc_res "[INTERNAL]  Ensure
required length of res field.

";

%feature("docstring") casadi::External::checkout "[INTERNAL]  Checkout a
memory object.

";

%feature("docstring") casadi::External::has_derivative "[INTERNAL]  Can
derivatives be calculated in any way?

";

%feature("docstring") casadi::External::alloc_arg "[INTERNAL]  Ensure
required length of arg field.

";

%feature("docstring") casadi::External::init_mem "[INTERNAL]  Initalize
memory block.

";

%feature("docstring") casadi::External::get_name_in "[INTERNAL]  Names of
function input and outputs.

";

%feature("docstring") casadi::External::codegen_decref "[INTERNAL]  Codegen
decref for dependencies.

";

%feature("docstring") casadi::External::mapsum_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::External::sx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::External::get_jacobian_sparsity "[INTERNAL]
Get Jacobian sparsity.

";

%feature("docstring") casadi::External::has_forward "[INTERNAL]  Forward
mode derivatives.

";

%feature("docstring") casadi::External::call "[INTERNAL]   Call a function,
templated.

";

%feature("docstring") casadi::External::instruction_output "[INTERNAL]  Get
the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::External::call_forward "[INTERNAL]  Forward
mode AD, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::External::class_name "[INTERNAL]  Get type
name.

";

%feature("docstring") casadi::External::disp_more "[INTERNAL]  Print more.

";

%feature("docstring") casadi::External::instruction_input "[INTERNAL]  Get
the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::External::signature "[INTERNAL]  Code
generate the function.

";

%feature("docstring") casadi::External::index_out "[INTERNAL]  Get output
scheme index by name.

";

%feature("docstring") casadi::External::sx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::External::sp_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode, sparsity propagation.

";

%feature("docstring") casadi::External::alloc "[INTERNAL]  Ensure work
vectors long enough to evaluate function.

";

%feature("docstring") casadi::External::info "[INTERNAL]  Obtain
information about function

";

%feature("docstring") casadi::External::size_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::External::replace_arg "[INTERNAL]  Replace
0-by-0 inputs.

";

%feature("docstring") casadi::External::sprint "[INTERNAL]  C-style
formatted printing to string.

";

%feature("docstring") casadi::External::get_free "[INTERNAL]  Print free
variables.

";

%feature("docstring") casadi::External::export_code "[INTERNAL]  Export
function in a specific language.

";

%feature("docstring") casadi::External::getAdaptorSolverName "[INTERNAL]
Obtain solver name from Adaptor.

";

%feature("docstring") casadi::External::sz_arg "[INTERNAL]  Get required
length of arg field.

";

%feature("docstring") casadi::External::set_temp "[INTERNAL]  Set the
(temporary) work vectors.

";

%feature("docstring") casadi::External::getAtomicInput "

[DEPRECATED] Renamed instruction_index

";

%feature("docstring") casadi::External::disp "[INTERNAL]  Display object.

";

%feature("docstring") casadi::External::matching_res "[INTERNAL]  Check if
output arguments that needs to be replaced.

";

%feature("docstring") casadi::External::print_dimensions "[INTERNAL]  Print
dimensions of inputs and outputs.

";

%feature("docstring") casadi::External::replace_res "[INTERNAL]  Replace
0-by-0 outputs.

";

%feature("docstring") casadi::External::is_a "[INTERNAL]  Check if the
function is of a particular type.

";

%feature("docstring") casadi::External::all_scalar "[INTERNAL]  Are all
inputs and outputs scalar.

";

%feature("docstring") casadi::External::get_sparsity_out "[INTERNAL]  Get
sparsity of a given output.

";

%feature("docstring") casadi::External::get_reverse "[INTERNAL]  Reverse
mode derivatives.

";

%feature("docstring") casadi::External::replace_fseed "[INTERNAL]  Replace
0-by-0 forward seeds.

";

%feature("docstring") casadi::External::print "[INTERNAL]  C-style
formatted printing during evaluation.

";

%feature("docstring") casadi::External::factory "[INTERNAL] ";

%feature("docstring") casadi::External::self "[INTERNAL]  Get a public
class instance.

";

%feature("docstring") casadi::External::free_mem "[INTERNAL]  Free memory
block.

";

%feature("docstring") casadi::External "[INTERNAL] C++ includes:
external_impl.hpp ";

%feature("docstring") casadi::External::codegen_sparsities "[INTERNAL]
Codegen sparsities.

";

%feature("docstring") casadi::External::has_free "[INTERNAL]  Does the
function have free variables.

";

%feature("docstring") casadi::External::codegen_name "[INTERNAL]  Get name
in codegen.

";

%feature("docstring") casadi::External::get_reltol "[INTERNAL]  Get
relative tolerance.

";

%feature("docstring") casadi::External::alloc_w "[INTERNAL]  Ensure
required length of w field.

";

%feature("docstring") casadi::External::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::External::construct "[INTERNAL]  Construct
Prepares the function for evaluation.

";

%feature("docstring") casadi::External::mx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::External::External "[INTERNAL]  Constructor.

";

%feature("docstring") casadi::External::print_options "[INTERNAL]  Print
list of options.

";

%feature("docstring") casadi::External::get_function "[INTERNAL] ";

%feature("docstring") casadi::External::set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::External::fwd_seed "[INTERNAL]  Symbolic
expressions for the forward seeds.

";

%feature("docstring") casadi::External::reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::External::codegen_incref "[INTERNAL]  Codegen
incref for dependencies.

";

%feature("docstring") casadi::External::codegen_declarations "[INTERNAL]
Generate code for the declarations of the C function.

";

%feature("docstring") casadi::External::has_codegen "[INTERNAL]  Is codegen
supported?

";

%feature("docstring") casadi::External::size1_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::External::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::External::has_function "[INTERNAL] ";

%feature("docstring") casadi::External::get_stats "[INTERNAL]  Get all
statistics.

";

%feature("docstring") casadi::External::sp_forward "[INTERNAL]  Propagate
sparsity forward.

";

%feature("docstring") casadi::External::init "[INTERNAL]  Initialize.

";

%feature("docstring") casadi::External::symbolic_output "[INTERNAL]  Get a
vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::External::eval_mx "[INTERNAL]  Evaluate with
symbolic matrices.

";

%feature("docstring") casadi::External::index_in "[INTERNAL]  Get input
scheme index by name.

";

%feature("docstring") casadi::External::forward "[INTERNAL]  Return
function that calculates forward derivatives forward(nfwd) returns a cached
instance if available, and calls  Function get_forward(int nfwd) if no
cached version is available.

";

%feature("docstring") casadi::External::memory "[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::External::free_mx "[INTERNAL]  Get free
variables ( MX)

";

%feature("docstring") casadi::External::get_n_out "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::External::~External "[INTERNAL]  Destructor.

";

%feature("docstring") casadi::External::slice "[INTERNAL]  returns a new
function with a selection of inputs/outputs of the original

";

%feature("docstring") casadi::External::alloc_iw "[INTERNAL]  Ensure
required length of iw field.

";

%feature("docstring") casadi::External::sparsity_jac "[INTERNAL]  Get, if
necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::External::n_nodes "[INTERNAL]  Number of
nodes in the algorithm.

";

%feature("docstring") casadi::External::instruction_constant "[INTERNAL]
Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::External::instruction_id "[INTERNAL]  Get an
atomic operation operator index.

";

%feature("docstring") casadi::External::call_gen "[INTERNAL]   Call a
function, overloaded.

";

%feature("docstring") casadi::External::has_spfwd "[INTERNAL]  Is the class
able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::External::get_name_out "[INTERNAL]  Names of
function input and outputs.

";

%feature("docstring") casadi::External::getJacSparsity "[INTERNAL]
Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::External::instruction_MX "[INTERNAL]  get MX
expression associated with instruction

";

%feature("docstring") casadi::External::sz_res "[INTERNAL]  Get required
length of res field.

";

%feature("docstring") casadi::External::get_options "[INTERNAL]  Options.

";

%feature("docstring") casadi::External::alloc_mem "[INTERNAL]  Create
memory block.

";

%feature("docstring") casadi::External::numel_in "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::External::release "[INTERNAL]  Release a
memory object.

";

%feature("docstring") casadi::External::sz_w "[INTERNAL]  Get required
length of w field.

";

%feature("docstring") casadi::External::print_option "[INTERNAL]  Print all
information there is to know about a certain option.

";

%feature("docstring") casadi::External::has_sprev "[INTERNAL]  Is the class
able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::External::definition "[INTERNAL]  Get
function signature: name:(inputs)->(outputs)

";

%feature("docstring") casadi::External::uses_output "[INTERNAL]  Do the
derivative functions need nondifferentiated outputs?

";

%feature("docstring") casadi::External::getJacSparsityGen "[INTERNAL]  Get
the sparsity pattern, forward mode.

";

%feature("docstring") casadi::External::size_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::External::get_n_in "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::External::has_reverse "[INTERNAL]  Reverse
mode derivatives.

";

%feature("docstring") casadi::External::mx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::External::getJacSparsityHierarchical "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::External::size2_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::External::has_jacobian "[INTERNAL]  Full
Jacobian.

";

%feature("docstring") casadi::External::size1_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::External::eval_gen "

>  int casadi::FunctionInternal::eval_gen(const double **arg, double **res, int *iw, double *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate numerically.

>  int casadi::FunctionInternal::eval_gen(const SXElem **arg, SXElem **res, int *iw, SXElem *w, void *mem) const

>  int casadi::FunctionInternal::eval_gen(const bvec_t **arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

%feature("docstring") casadi::External::codegen_body "[INTERNAL]  Generate
code for the body of the C function.

";

%feature("docstring") casadi::External::replace_aseed "[INTERNAL]  Replace
0-by-0 reverse seeds.

";

%feature("docstring") casadi::External::get_max_in "[INTERNAL]  Get largest
input value.

";

%feature("docstring") casadi::External::free_sx "[INTERNAL]  Get free
variables (SX)

";

%feature("docstring") casadi::External::sz_work "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") casadi::External::get_min_in "[INTERNAL]  Get
smallest input value.

";

%feature("docstring") casadi::External::jit_dependencies "[INTERNAL]  Jit
dependencies.

";

%feature("docstring") casadi::External::nnz_out "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::External::eval "[INTERNAL]  Evaluate
numerically.

";

%feature("docstring") casadi::External::generate_lifted "[INTERNAL]
Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::External::get_jacobian "[INTERNAL]  Full
Jacobian.

";

%feature("docstring") casadi::External::numel_out "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::External::get_partition "[INTERNAL]  Get the
unidirectional or bidirectional partition.

";

%feature("docstring") casadi::External::nnz_in "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::External::finalize "[INTERNAL]  Finalize the
object creation.

";

%feature("docstring") casadi::External::size2_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::External::ad_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::External::clear_mem "[INTERNAL]  Clear all
memory (called from destructor)

";

%feature("docstring") casadi::External::adjViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::External::get_forward "[INTERNAL]  Forward
mode derivatives.

";

%feature("docstring") casadi::External::sp_reverse "[INTERNAL]  Propagate
sparsity backwards.

";

%feature("docstring") casadi::External::oracle "[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::External::check_res "[INTERNAL]  Check if
output arguments have correct length and dimensions.

";

%feature("docstring") casadi::External::eval_dm "[INTERNAL]  Evaluate with
DM matrices.

";

%feature("docstring") casadi::External::matching_arg "[INTERNAL]  Check if
input arguments that needs to be replaced.

";

%feature("docstring") casadi::External::getJacSparsityHierarchicalSymm "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::External::codegen_meta "[INTERNAL]  Generate
meta-information allowing a user to evaluate a generated function.

";

%feature("docstring") casadi::External::which_depends "[INTERNAL]  Which
variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::External::get_abstol "[INTERNAL]  Get
absolute tolerance.

";

%feature("docstring") casadi::External::codegen "[INTERNAL]  Generate code
the function.

";

%feature("docstring") casadi::External::setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";

%feature("docstring") casadi::External::eval_sx "[INTERNAL]  Evaluate with
symbolic scalars.

";

%feature("docstring") casadi::External::n_instructions "[INTERNAL]  Get the
number of atomic operations.

";

%feature("docstring") casadi::External::getAtomicOutput "

[DEPRECATED] Renamed instruction_output

";

%feature("docstring") casadi::External::sz_iw "[INTERNAL]  Get required
length of iw field.

";

%feature("docstring") casadi::External::wrap "[INTERNAL]  Wrap in an
Function instance consisting of only one MX call.

";

%feature("docstring") casadi::External::get_sparsity_in "[INTERNAL]  Get
sparsity of a given input.

";

%feature("docstring") casadi::External::fwdViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::External::symbolicAdjSeed "[INTERNAL]
Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::External::generate_dependencies "[INTERNAL]
Export / Generate C code for the dependency function.

";


// File: classcasadi_1_1Factory.xml
%feature("docstring") casadi::Factory::has_in "[INTERNAL] ";

%feature("docstring") casadi::Factory::add_output "[INTERNAL] ";

%feature("docstring") casadi::Factory::calculate "[INTERNAL] ";

%feature("docstring") casadi::Factory::get_output "[INTERNAL] ";

%feature("docstring") casadi::Factory "[INTERNAL] C++ includes: factory.hpp
";

%feature("docstring") casadi::Factory::request_output "[INTERNAL] ";

%feature("docstring") casadi::Factory::get_input "[INTERNAL] ";

%feature("docstring") casadi::Factory::add_input "[INTERNAL] ";

%feature("docstring") casadi::Factory::has_out "[INTERNAL] ";

%feature("docstring") casadi::Factory::request_input "[INTERNAL] ";

%feature("docstring") casadi::Factory::name_out "[INTERNAL] ";

%feature("docstring") casadi::Factory::Factory "[INTERNAL] ";

%feature("docstring") casadi::Factory::name_in "[INTERNAL] ";


// File: classcasadi_1_1Find.xml


// File: classcasadi_1_1FiniteDiff.xml
%feature("docstring") casadi::FiniteDiff::print_options "[INTERNAL]  Print
list of options.

";

%feature("docstring") casadi::FiniteDiff::factory "[INTERNAL] ";

%feature("docstring") casadi::FiniteDiff::alloc "[INTERNAL]  Ensure work
vectors long enough to evaluate function.

";

%feature("docstring") casadi::FiniteDiff::get_min_in "[INTERNAL]  Get
smallest input value.

";

%feature("docstring") casadi::FiniteDiff::get_max_in "[INTERNAL]  Get
largest input value.

";

%feature("docstring") casadi::FiniteDiff::sp_forward "[INTERNAL]  Propagate
sparsity forward.

";

%feature("docstring") casadi::FiniteDiff::get_default_in "[INTERNAL]  Get
default input value.

";

%feature("docstring") casadi::FiniteDiff::getAdaptorSolverName "[INTERNAL]
Obtain solver name from Adaptor.

";

%feature("docstring") casadi::FiniteDiff::instruction_input "[INTERNAL]
Get the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::FiniteDiff::generate_lifted "[INTERNAL]
Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::FiniteDiff::has_jacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::FiniteDiff::eval "[INTERNAL]  Evaluate
numerically.

";

%feature("docstring") casadi::FiniteDiff::sz_w "[INTERNAL]  Get required
length of w field.

";

%feature("docstring") casadi::FiniteDiff::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::FiniteDiff::print_option "[INTERNAL]  Print
all information there is to know about a certain option.

";

%feature("docstring") casadi::FiniteDiff::get_abstol "[INTERNAL]  Get
absolute tolerance.

";

%feature("docstring") casadi::FiniteDiff::alloc_arg "[INTERNAL]  Ensure
required length of arg field.

";

%feature("docstring") casadi::FiniteDiff::n_instructions "[INTERNAL]  Get
the number of atomic operations.

";

%feature("docstring") casadi::FiniteDiff::adjViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::FiniteDiff::definition "[INTERNAL]  Get
function signature: name:(inputs)->(outputs)

";

%feature("docstring") casadi::FiniteDiff::init_mem "[INTERNAL]  Initalize
memory block.

";

%feature("docstring") casadi::FiniteDiff::init "[INTERNAL]  Initialize.

";

%feature("docstring") casadi::FiniteDiff::sz_iw "[INTERNAL]  Get required
length of iw field.

";

%feature("docstring") casadi::FiniteDiff::has_function "[INTERNAL] ";

%feature("docstring") casadi::FiniteDiff::has_free "[INTERNAL]  Does the
function have free variables.

";

%feature("docstring") casadi::FiniteDiff::sx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::FiniteDiff::matching_res "[INTERNAL]  Check
if output arguments that needs to be replaced.

";

%feature("docstring") casadi::FiniteDiff::call "[INTERNAL]   Call a
function, templated.

";

%feature("docstring") casadi::FiniteDiff::FiniteDiff "[INTERNAL] ";

%feature("docstring") casadi::FiniteDiff::sprint "[INTERNAL]  C-style
formatted printing to string.

";

%feature("docstring") casadi::FiniteDiff::sp_reverse "[INTERNAL]  Propagate
sparsity backwards.

";

%feature("docstring") casadi::FiniteDiff::eval_gen "

>  int casadi::FunctionInternal::eval_gen(const double **arg, double **res, int *iw, double *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate numerically.

>  int casadi::FunctionInternal::eval_gen(const SXElem **arg, SXElem **res, int *iw, SXElem *w, void *mem) const

>  int casadi::FunctionInternal::eval_gen(const bvec_t **arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

%feature("docstring") casadi::FiniteDiff::size2_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::FiniteDiff::getJacSparsityHierarchicalSymm "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::FiniteDiff::forward "[INTERNAL]  Return
function that calculates forward derivatives forward(nfwd) returns a cached
instance if available, and calls  Function get_forward(int nfwd) if no
cached version is available.

";

%feature("docstring") casadi::FiniteDiff::call_reverse "[INTERNAL]  Reverse
mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::FiniteDiff::codegen_declarations "[INTERNAL]
Generate code for the declarations of the C function.

";

%feature("docstring") casadi::FiniteDiff::eval_dm "[INTERNAL]  Evaluate
with DM matrices.

";

%feature("docstring") casadi::FiniteDiff::setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";

%feature("docstring") casadi::FiniteDiff::alloc_w "[INTERNAL]  Ensure
required length of w field.

";

%feature("docstring") casadi::FiniteDiff::jit_dependencies "[INTERNAL]  Jit
dependencies.

";

%feature("docstring") casadi::FiniteDiff::alloc_mem "[INTERNAL]  Create
memory block.

";

%feature("docstring") casadi::FiniteDiff::mx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::FiniteDiff::instruction_MX "[INTERNAL]  get
MX expression associated with instruction

";

%feature("docstring") casadi::FiniteDiff::set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::FiniteDiff::all_scalar "[INTERNAL]  Are all
inputs and outputs scalar.

";

%feature("docstring") casadi::FiniteDiff::finalize "[INTERNAL]  Finalize
the object creation.

";

%feature("docstring") casadi::FiniteDiff::size2_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::FiniteDiff::get_jacobian_sparsity "[INTERNAL]
Get Jacobian sparsity.

";

%feature("docstring") casadi::FiniteDiff::class_name "[INTERNAL]  Readable
name of the internal class.

";

%feature("docstring") casadi::FiniteDiff::release "[INTERNAL]  Release a
memory object.

";

%feature("docstring") casadi::FiniteDiff::n_nodes "[INTERNAL]  Number of
nodes in the algorithm.

";

%feature("docstring") casadi::FiniteDiff::getJacSparsityGen "[INTERNAL]
Get the sparsity pattern, forward mode.

";

%feature("docstring") casadi::FiniteDiff::get_sparsity_in "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::FiniteDiff::sx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::FiniteDiff::get_partition "[INTERNAL]  Get
the unidirectional or bidirectional partition.

";

%feature("docstring") casadi::FiniteDiff::sp_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode, sparsity propagation.

";

%feature("docstring") casadi::FiniteDiff::is_a "[INTERNAL]  Check if the
function is of a particular type.

";

%feature("docstring") casadi::FiniteDiff::disp "[INTERNAL]  Display object.

";

%feature("docstring") casadi::FiniteDiff::numel_out "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::FiniteDiff::nnz_out "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::FiniteDiff::matching_arg "[INTERNAL]  Check
if input arguments that needs to be replaced.

";

%feature("docstring") casadi::FiniteDiff::print_dimensions "[INTERNAL]
Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::FiniteDiff::nnz_in "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::FiniteDiff::get_n_in "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::FiniteDiff::numel_in "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::FiniteDiff::self "[INTERNAL]  Get a public
class instance.

";

%feature("docstring") casadi::FiniteDiff::index_in "[INTERNAL]  Get input
scheme index by name.

";

%feature("docstring") casadi::FiniteDiff::replace_aseed "[INTERNAL]
Replace 0-by-0 reverse seeds.

";

%feature("docstring") casadi::FiniteDiff::print "[INTERNAL]  C-style
formatted printing during evaluation.

";

%feature("docstring") casadi::FiniteDiff::wrap "[INTERNAL]  Wrap in an
Function instance consisting of only one MX call.

";

%feature("docstring") casadi::FiniteDiff::codegen_name "[INTERNAL]  Get
name in codegen.

";

%feature("docstring") casadi::FiniteDiff::free_sx "[INTERNAL]  Get free
variables (SX)

";

%feature("docstring") casadi::FiniteDiff::getJacSparsity "[INTERNAL]
Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::FiniteDiff::mx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::FiniteDiff::check_arg "[INTERNAL]  Check if
input arguments have correct length and dimensions.

";

%feature("docstring") casadi::FiniteDiff::ad_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::FiniteDiff::index_out "[INTERNAL]  Get output
scheme index by name.

";

%feature("docstring") casadi::FiniteDiff::size1_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::FiniteDiff::symbolic_output "[INTERNAL]  Get
a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::FiniteDiff::signature "[INTERNAL]  Code
generate the function.

";

%feature("docstring") casadi::FiniteDiff::generate_dependencies "[INTERNAL]
Export / Generate C code for the dependency function.

";

%feature("docstring") casadi::FiniteDiff::uses_output "[INTERNAL]  Is the
scheme using the (nondifferentiated) output?

";

%feature("docstring") casadi::FiniteDiff::get_options "[INTERNAL]  Options.

";

%feature("docstring") casadi::FiniteDiff::replace_fseed "[INTERNAL]
Replace 0-by-0 forward seeds.

";

%feature("docstring") casadi::FiniteDiff::fwdViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::FiniteDiff::get_free "[INTERNAL]  Print free
variables.

";

%feature("docstring") casadi::FiniteDiff::call_gen "[INTERNAL]   Call a
function, overloaded.

";

%feature("docstring") casadi::FiniteDiff::has_sprev "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::FiniteDiff::replace_arg "[INTERNAL]  Replace
0-by-0 inputs.

";

%feature("docstring") casadi::FiniteDiff::eval_mx "[INTERNAL]  Evaluate
with symbolic matrices.

";

%feature("docstring") casadi::FiniteDiff::get_jacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::FiniteDiff::alloc_iw "[INTERNAL]  Ensure
required length of iw field.

";

%feature("docstring") casadi::FiniteDiff::get_reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::FiniteDiff::instruction_constant "[INTERNAL]
Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::FiniteDiff::codegen_body "[INTERNAL]
Generate code for the body of the C function.

";

%feature("docstring") casadi::FiniteDiff::sz_arg "[INTERNAL]  Get required
length of arg field.

";

%feature("docstring") casadi::FiniteDiff::get_reltol "[INTERNAL]  Get
relative tolerance.

";

%feature("docstring") casadi::FiniteDiff::size_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::FiniteDiff::get_stats "[INTERNAL]  Get all
statistics.

";

%feature("docstring") casadi::FiniteDiff::call_forward "[INTERNAL]  Forward
mode AD, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::FiniteDiff::has_codegen "[INTERNAL]  Is
codegen supported?

";

%feature("docstring") casadi::FiniteDiff::construct "[INTERNAL]  Construct
Prepares the function for evaluation.

";

%feature("docstring") casadi::FiniteDiff::free_mem "[INTERNAL]  Free memory
block.

";

%feature("docstring") casadi::FiniteDiff::size1_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::FiniteDiff::codegen "[INTERNAL]  Generate
code the function.

";

%feature("docstring") casadi::FiniteDiff::replace_res "[INTERNAL]  Replace
0-by-0 outputs.

";

%feature("docstring") casadi::FiniteDiff::get_name_out "[INTERNAL]  Names
of function input and outputs.

";

%feature("docstring") casadi::FiniteDiff::which_depends "[INTERNAL]  Which
variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::FiniteDiff::size_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::FiniteDiff::codegen_decref "[INTERNAL]
Codegen decref for dependencies.

";

%feature("docstring") casadi::FiniteDiff::clear_mem "[INTERNAL]  Clear all
memory (called from destructor)

";

%feature("docstring") casadi::FiniteDiff::has_forward "[INTERNAL]  Return
function that calculates forward derivatives forward(nfwd) returns a cached
instance if available, and calls  Function get_forward(int nfwd) if no
cached version is available.

";

%feature("docstring") casadi::FiniteDiff::sz_work "[INTERNAL]  Get number
of temporary variables needed.

";

%feature("docstring") casadi::FiniteDiff::has_derivative "[INTERNAL]  Can
derivatives be calculated in any way?

";

%feature("docstring") casadi::FiniteDiff::codegen_meta "[INTERNAL]
Generate meta-information allowing a user to evaluate a generated function.

";

%feature("docstring") casadi::FiniteDiff::getAtomicInput "

[DEPRECATED] Renamed instruction_index

";

%feature("docstring") casadi::FiniteDiff::mapsum_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::FiniteDiff::codegen_sparsities "[INTERNAL]
Codegen sparsities.

";

%feature("docstring") casadi::FiniteDiff::export_code "[INTERNAL]  Export
function in a specific language.

";

%feature("docstring") casadi::FiniteDiff::getAtomicOutput "

[DEPRECATED] Renamed instruction_output

";

%feature("docstring") casadi::FiniteDiff::has_spfwd "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::FiniteDiff::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::FiniteDiff::getJacSparsityHierarchical "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::FiniteDiff::free_mx "[INTERNAL]  Get free
variables ( MX)

";

%feature("docstring") casadi::FiniteDiff::checkout "[INTERNAL]  Checkout a
memory object.

";

%feature("docstring") casadi::FiniteDiff "[INTERNAL]  Calculate derivative
using finite differences Joel Andersson

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| abstol           | OT_DOUBLE       | Accuracy of      | casadi::FiniteDi |
|                  |                 | function outputs | ff               |
|                  |                 | [default: query  |                  |
|                  |                 | object]          |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| enable_fd        | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation by   |                  |
|                  |                 | finite           |                  |
|                  |                 | differencing.    |                  |
|                  |                 | [default:        |                  |
|                  |                 | false]]          |                  |
+------------------+-----------------+------------------+------------------+
| enable_forward   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using forward    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_jacobian  | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobians of all |                  |
|                  |                 | differentiable   |                  |
|                  |                 | outputs with     |                  |
|                  |                 | respect to all   |                  |
|                  |                 | differentiable   |                  |
|                  |                 | inputs - if      |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_reverse   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | transposed       |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using reverse    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| fd_method        | OT_STRING       | Method for       | casadi::Function |
|                  |                 | finite           | Internal         |
|                  |                 | differencing     |                  |
|                  |                 | [default         |                  |
|                  |                 | 'central']       |                  |
+------------------+-----------------+------------------+------------------+
| fd_options       | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | finite           |                  |
|                  |                 | difference       |                  |
|                  |                 | instance         |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| h_iter           | OT_INT          | Number of        | casadi::FiniteDi |
|                  |                 | iterations to    | ff               |
|                  |                 | improve on the   |                  |
|                  |                 | step-size        |                  |
|                  |                 | [default: 1 if   |                  |
|                  |                 | error estimate   |                  |
|                  |                 | available,       |                  |
|                  |                 | otherwise 0]     |                  |
+------------------+-----------------+------------------+------------------+
| h_max            | OT_DOUBLE       | Maximum step     | casadi::FiniteDi |
|                  |                 | size [default 0] | ff               |
+------------------+-----------------+------------------+------------------+
| h_min            | OT_DOUBLE       | Minimum step     | casadi::FiniteDi |
|                  |                 | size [default    | ff               |
|                  |                 | inf]             |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| reltol           | OT_DOUBLE       | Accuracy of      | casadi::FiniteDi |
|                  |                 | function inputs  | ff               |
|                  |                 | [default: query  |                  |
|                  |                 | object]          |                  |
+------------------+-----------------+------------------+------------------+
| second_order_ste | OT_DOUBLE       | Second order     | casadi::FiniteDi |
| psize            |                 | perturbation     | ff               |
|                  |                 | size [default:   |                  |
|                  |                 | 1e-3]            |                  |
+------------------+-----------------+------------------+------------------+
| smoothing        | OT_DOUBLE       | Smoothing        | casadi::FiniteDi |
|                  |                 | regularization   | ff               |
|                  |                 | [default:        |                  |
|                  |                 | machine          |                  |
|                  |                 | precision]       |                  |
+------------------+-----------------+------------------+------------------+
| u_aim            | OT_DOUBLE       | Target ratio of  | casadi::FiniteDi |
|                  |                 | roundoff error   | ff               |
|                  |                 | to truncation    |                  |
|                  |                 | error [default:  |                  |
|                  |                 | 100.]            |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: finite_differences.hpp ";

%feature("docstring") casadi::FiniteDiff::reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::FiniteDiff::alloc_res "[INTERNAL]  Ensure
required length of res field.

";

%feature("docstring") casadi::FiniteDiff::sz_res "[INTERNAL]  Get required
length of res field.

";

%feature("docstring") casadi::FiniteDiff::slice "[INTERNAL]  returns a new
function with a selection of inputs/outputs of the original

";

%feature("docstring") casadi::FiniteDiff::instruction_output "[INTERNAL]
Get the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::FiniteDiff::disp_more "[INTERNAL]  Print
more.

";

%feature("docstring") casadi::FiniteDiff::jacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::FiniteDiff::memory "[INTERNAL]  Memory
objects.

";

%feature("docstring") casadi::FiniteDiff::~FiniteDiff "[INTERNAL]
Destructor.

";

%feature("docstring") casadi::FiniteDiff::symbolicAdjSeed "[INTERNAL]
Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::FiniteDiff::oracle "[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::FiniteDiff::get_sparsity_out "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::FiniteDiff::instruction_id "[INTERNAL]  Get
an atomic operation operator index.

";

%feature("docstring") casadi::FiniteDiff::codegen_incref "[INTERNAL]
Codegen incref for dependencies.

";

%feature("docstring") casadi::FiniteDiff::fwd_seed "[INTERNAL]  Symbolic
expressions for the forward seeds.

";

%feature("docstring") casadi::FiniteDiff::has_reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::FiniteDiff::set_temp "[INTERNAL]  Set the
(temporary) work vectors.

";

%feature("docstring") casadi::FiniteDiff::check_res "[INTERNAL]  Check if
output arguments have correct length and dimensions.

";

%feature("docstring") casadi::FiniteDiff::get_name_in "[INTERNAL]  Names of
function input and outputs.

";

%feature("docstring") casadi::FiniteDiff::get_n_out "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::FiniteDiff::get_function "[INTERNAL] ";

%feature("docstring") casadi::FiniteDiff::sparsity_jac "[INTERNAL]  Get, if
necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::FiniteDiff::eval_sx "[INTERNAL]  Evaluate
with symbolic scalars.

";

%feature("docstring") casadi::FiniteDiff::get_forward "[INTERNAL]  Return
function that calculates forward derivatives forward(nfwd) returns a cached
instance if available, and calls  Function get_forward(int nfwd) if no
cached version is available.

";

%feature("docstring") casadi::FiniteDiff::info "[INTERNAL]  Obtain
information about function

";


// File: classcasadi_1_1FixedStepIntegrator.xml
%feature("docstring") casadi::FixedStepIntegrator::getCount "[INTERNAL]
Get the reference count.

";

%feature("docstring") casadi::FixedStepIntegrator::alloc_iw "[INTERNAL]
Ensure required length of iw field.

";

%feature("docstring") casadi::FixedStepIntegrator::calc_function "[INTERNAL] ";

%feature("docstring") casadi::FixedStepIntegrator::jit_dependencies "[INTERNAL]  JIT for dependencies.

";

%feature("docstring") casadi::FixedStepIntegrator::aug_fwd "[INTERNAL]
Generate a augmented DAE system with nfwd forward sensitivities.

";

%feature("docstring") casadi::FixedStepIntegrator::codegen "[INTERNAL]
Generate code the function.

";

%feature("docstring") casadi::FixedStepIntegrator::z "[INTERNAL] ";

%feature("docstring") casadi::FixedStepIntegrator::x "[INTERNAL] ";

%feature("docstring") casadi::FixedStepIntegrator::all_scalar "[INTERNAL]
Are all inputs and outputs scalar.

";

%feature("docstring") casadi::FixedStepIntegrator::sp_reverse "[INTERNAL]
Propagate sparsity backwards.

";

%feature("docstring") casadi::FixedStepIntegrator::set_work "[INTERNAL]
Set the (persistent) work vectors.

";

%feature("docstring") casadi::FixedStepIntegrator::p "[INTERNAL] ";

%feature("docstring") casadi::FixedStepIntegrator::q "[INTERNAL] ";

%feature("docstring") casadi::FixedStepIntegrator::init_mem "[INTERNAL]
Initalize memory block.

";

%feature("docstring") casadi::FixedStepIntegrator::t "[INTERNAL] ";

%feature("docstring") casadi::FixedStepIntegrator::get_max_in "[INTERNAL]
Get largest input value.

";

%feature("docstring") casadi::FixedStepIntegrator::get_name_in "[INTERNAL]
Names of function input and outputs.

";

%feature("docstring") casadi::FixedStepIntegrator::matching_arg "[INTERNAL]
Check if input arguments that needs to be replaced.

";

%feature("docstring") casadi::FixedStepIntegrator::codegen_decref "[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring") casadi::FixedStepIntegrator::instruction_constant "[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::FixedStepIntegrator::sz_w "[INTERNAL]  Get
required length of w field.

";

%feature("docstring") casadi::FixedStepIntegrator::codegen_name "[INTERNAL]
Get name in codegen.

";

%feature("docstring") casadi::FixedStepIntegrator::eval_gen "

>  int casadi::FunctionInternal::eval_gen(const double **arg, double **res, int *iw, double *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate numerically.

>  int casadi::FunctionInternal::eval_gen(const SXElem **arg, SXElem **res, int *iw, SXElem *w, void *mem) const

>  int casadi::FunctionInternal::eval_gen(const bvec_t **arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

%feature("docstring") casadi::FixedStepIntegrator::get_partition "[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring") casadi::FixedStepIntegrator::expand "[INTERNAL] ";

%feature("docstring") casadi::FixedStepIntegrator::n_instructions "[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring") casadi::FixedStepIntegrator::getJacSparsity "[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::FixedStepIntegrator::uses_output "[INTERNAL]
Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring") casadi::FixedStepIntegrator::get_free "[INTERNAL]
Print free variables.

";

%feature("docstring") casadi::FixedStepIntegrator::disp_more "[INTERNAL]
Print more.

";

%feature("docstring") casadi::FixedStepIntegrator::get_reverse "[INTERNAL]
Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::FixedStepIntegrator::info "[INTERNAL]  Obtain
information about function

";

%feature("docstring") casadi::FixedStepIntegrator::export_code "[INTERNAL]
Export function in a specific language.

";

%feature("docstring") casadi::FixedStepIntegrator::get_options "[INTERNAL]
Options.

";

%feature("docstring") casadi::FixedStepIntegrator::matching_res "[INTERNAL]
Check if output arguments that needs to be replaced.

";

%feature("docstring") casadi::FixedStepIntegrator::construct "[INTERNAL]
Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::FixedStepIntegrator::get_sparsity_out "[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::FixedStepIntegrator::replace_res "[INTERNAL]
Replace 0-by-0 outputs.

";

%feature("docstring") casadi::FixedStepIntegrator::size2_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::FixedStepIntegrator::setStopTime "[INTERNAL]
Set stop time for the integration.

";

%feature("docstring") casadi::FixedStepIntegrator::sz_iw "[INTERNAL]  Get
required length of iw field.

";

%feature("docstring") casadi::FixedStepIntegrator::fwdViaJac "[INTERNAL]
Calculate derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::FixedStepIntegrator::getAtomicOutput "

[DEPRECATED] Renamed instruction_output

";

%feature("docstring") casadi::FixedStepIntegrator::call "[INTERNAL]   Call
a function, templated.

";

%feature("docstring") casadi::FixedStepIntegrator::check_arg "[INTERNAL]
Check if input arguments have correct length and dimensions.

";

%feature("docstring") casadi::FixedStepIntegrator::sx_out "[INTERNAL]  Get
function input(s) and output(s)

";

%feature("docstring") casadi::FixedStepIntegrator::eval_dm "[INTERNAL]
Evaluate with DM matrices.

";

%feature("docstring") casadi::FixedStepIntegrator::resetB "[INTERNAL]
Reset the backward problem and take time to tf.

";

%feature("docstring") casadi::FixedStepIntegrator::replace_aseed "[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring") casadi::FixedStepIntegrator::set_function "[INTERNAL]
Register the function for evaluation and statistics gathering

";

%feature("docstring") casadi::FixedStepIntegrator::slice "[INTERNAL]
returns a new function with a selection of inputs/outputs of the original

";

%feature("docstring") casadi::FixedStepIntegrator::memory "[INTERNAL]
Memory objects.

";

%feature("docstring") casadi::FixedStepIntegrator::instruction_MX "[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring") casadi::FixedStepIntegrator::alloc_w "[INTERNAL]
Ensure required length of w field.

";

%feature("docstring") casadi::FixedStepIntegrator::~FixedStepIntegrator "[INTERNAL]  Destructor.

";

%feature("docstring") casadi::FixedStepIntegrator::getAtomicInput "

[DEPRECATED] Renamed instruction_index

";

%feature("docstring") casadi::FixedStepIntegrator::instruction_input "[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::FixedStepIntegrator::mx_in "[INTERNAL]  Get
function input(s) and output(s)

";

%feature("docstring") casadi::FixedStepIntegrator::advance "[INTERNAL]
Advance solution in time.

";

%feature("docstring") casadi::FixedStepIntegrator::ad_weight "[INTERNAL]
Weighting factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::FixedStepIntegrator::reverse "[INTERNAL]
Return function that calculates adjoint derivatives reverse(nadj) returns a
cached instance if available, and calls  Function get_reverse(int nadj) if
no cached version is available.

";

%feature("docstring") casadi::FixedStepIntegrator::size_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::FixedStepIntegrator::get_name_out "[INTERNAL]
Names of function input and outputs.

";

%feature("docstring") casadi::FixedStepIntegrator::sp_weight "[INTERNAL]
Weighting factor for chosing forward/reverse mode, sparsity propagation.

";

%feature("docstring") casadi::FixedStepIntegrator::create_function "[INTERNAL]  Create an oracle function

";

%feature("docstring") casadi::FixedStepIntegrator::numel_out "[INTERNAL]
Number of input/output elements.

";

%feature("docstring") casadi::FixedStepIntegrator::monitored "[INTERNAL] ";

%feature("docstring") casadi::FixedStepIntegrator::has_free "[INTERNAL]
Does the function have free variables.

";

%feature("docstring") casadi::FixedStepIntegrator::self "[INTERNAL]  Get a
public class instance.

";

%feature("docstring") casadi::FixedStepIntegrator::print_dimensions "[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::FixedStepIntegrator::retreat "[INTERNAL]
Retreat solution in time.

";

%feature("docstring") casadi::FixedStepIntegrator::factory "[INTERNAL] ";

%feature("docstring") casadi::FixedStepIntegrator::sx_in "[INTERNAL]  Get
function input(s) and output(s)

";

%feature("docstring") casadi::FixedStepIntegrator::alloc "[INTERNAL]
Ensure work vectors long enough to evaluate function.

";

%feature("docstring") casadi::FixedStepIntegrator::nnz_out "[INTERNAL]
Number of input/output nonzeros.

";

%feature("docstring") casadi::FixedStepIntegrator::free_mx "[INTERNAL]  Get
free variables ( MX)

";

%feature("docstring") casadi::FixedStepIntegrator::finalize "[INTERNAL]
Finalize initialization.

";

%feature("docstring") casadi::FixedStepIntegrator::eval_sx "[INTERNAL]
Evaluate with symbolic scalars.

";

%feature("docstring") casadi::FixedStepIntegrator::class_name "[INTERNAL]
Readable name of the internal class.

";

%feature("docstring") casadi::FixedStepIntegrator::generate_lifted "[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::FixedStepIntegrator::setupFG "[INTERNAL]
Setup F and G.

";

%feature("docstring") casadi::FixedStepIntegrator::forward "[INTERNAL]
Return function that calculates forward derivatives forward(nfwd) returns a
cached instance if available, and calls  Function get_forward(int nfwd) if
no cached version is available.

";

%feature("docstring") casadi::FixedStepIntegrator::generate_dependencies "[INTERNAL]  Export / Generate C code for the generated functions.

";

%feature("docstring") casadi::FixedStepIntegrator::has_codegen "[INTERNAL]
Is codegen supported?

";

%feature("docstring") casadi::FixedStepIntegrator::init "[INTERNAL]
Initialize stage.

";

%feature("docstring") casadi::FixedStepIntegrator::sp_jac_rdae "[INTERNAL]
Create sparsity pattern of the extended Jacobian (backward problem)

";

%feature("docstring") casadi::FixedStepIntegrator::print_option "[INTERNAL]
Print all information there is to know about a certain option.

";

%feature("docstring") casadi::FixedStepIntegrator::FixedStepIntegrator "[INTERNAL]  Constructor.

";

%feature("docstring") casadi::FixedStepIntegrator::get_stats "[INTERNAL]
Get all statistics.

";

%feature("docstring") casadi::FixedStepIntegrator::get_sparsity_in "[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::FixedStepIntegrator::which_depends "[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::FixedStepIntegrator::print_options "[INTERNAL]  Print list of options.

";

%feature("docstring") casadi::FixedStepIntegrator::weak "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring") casadi::FixedStepIntegrator::numel_in "[INTERNAL]
Number of input/output elements.

";

%feature("docstring") casadi::FixedStepIntegrator::free_sx "[INTERNAL]  Get
free variables (SX)

";

%feature("docstring") casadi::FixedStepIntegrator::has_jacobian "[INTERNAL]
Return Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::FixedStepIntegrator::getAdaptorSolverName "[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring") casadi::FixedStepIntegrator "

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| augmented_option | OT_DICT         | Options to be    | casadi::FixedSte |
| s                |                 | passed down to   | pIntegrator      |
|                  |                 | the augmented    |                  |
|                  |                 | integrator, if   |                  |
|                  |                 | one is           |                  |
|                  |                 | constructed.     |                  |
+------------------+-----------------+------------------+------------------+
| common_options   | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | auto-generated   | nction           |
|                  |                 | functions        |                  |
+------------------+-----------------+------------------+------------------+
| expand           | OT_BOOL         | Replace MX with  | casadi::FixedSte |
|                  |                 | SX expressions   | pIntegrator      |
|                  |                 | in problem       |                  |
|                  |                 | formulation      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| grid             | OT_DOUBLEVECTOR | Time grid        | casadi::FixedSte |
|                  |                 |                  | pIntegrator      |
+------------------+-----------------+------------------+------------------+
| monitor          | OT_STRINGVECTOR | Set of user      | casadi::OracleFu |
|                  |                 | problem          | nction           |
|                  |                 | functions to be  |                  |
|                  |                 | monitored        |                  |
+------------------+-----------------+------------------+------------------+
| number_of_finite | OT_INT          | Number of finite | casadi::FixedSte |
| _elements        |                 | elements         | pIntegrator      |
+------------------+-----------------+------------------+------------------+
| output_t0        | OT_BOOL         | Output the state | casadi::FixedSte |
|                  |                 | at the initial   | pIntegrator      |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| print_stats      | OT_BOOL         | Print out        | casadi::FixedSte |
|                  |                 | statistics after | pIntegrator      |
|                  |                 | integration      |                  |
+------------------+-----------------+------------------+------------------+
| rootfinder       | OT_STRING       | An implicit      | casadi::FixedSte |
|                  |                 | function solver  | pIntegrator      |
+------------------+-----------------+------------------+------------------+
| rootfinder_optio | OT_DICT         | Options to be    | casadi::FixedSte |
| ns               |                 | passed to the    | pIntegrator      |
|                  |                 | NLP Solver       |                  |
+------------------+-----------------+------------------+------------------+
| specific_options | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | specific auto-   | nction           |
|                  |                 | generated        |                  |
|                  |                 | functions,       |                  |
|                  |                 | overwriting the  |                  |
|                  |                 | defaults from    |                  |
|                  |                 | common_options.  |                  |
|                  |                 | Nested           |                  |
|                  |                 | dictionary.      |                  |
+------------------+-----------------+------------------+------------------+
| t0               | OT_DOUBLE       | Beginning of the | casadi::FixedSte |
|                  |                 | time horizon     | pIntegrator      |
+------------------+-----------------+------------------+------------------+
| tf               | OT_DOUBLE       | End of the time  | casadi::FixedSte |
|                  |                 | horizon          | pIntegrator      |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: integrator_impl.hpp ";

%feature("docstring") casadi::FixedStepIntegrator::aug_adj "[INTERNAL]
Generate a augmented DAE system with nadj adjoint sensitivities.

";

%feature("docstring") casadi::FixedStepIntegrator::instruction_id "[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring") casadi::FixedStepIntegrator::codegen_sparsities "[INTERNAL]  Codegen sparsities.

";

%feature("docstring") casadi::FixedStepIntegrator::free_mem "[INTERNAL]
Free memory block.

";

%feature("docstring") casadi::FixedStepIntegrator::has_forward "[INTERNAL]
Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::FixedStepIntegrator::call_forward "[INTERNAL]
Forward mode AD, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::FixedStepIntegrator::setup "[INTERNAL]  Set
the (persistent and temporary) work vectors.

";

%feature("docstring") casadi::FixedStepIntegrator::eval "[INTERNAL]
evaluate

";

%feature("docstring") casadi::FixedStepIntegrator::signature "[INTERNAL]
Code generate the function.

";

%feature("docstring") casadi::FixedStepIntegrator::mapsum_mx "[INTERNAL]
Parallel evaluation.

";

%feature("docstring") casadi::FixedStepIntegrator::get_jacobian "[INTERNAL]
Return Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::FixedStepIntegrator::get_reltol "[INTERNAL]
Get relative tolerance.

";

%feature("docstring") casadi::FixedStepIntegrator::size1_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::FixedStepIntegrator::symbolicAdjSeed "[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::FixedStepIntegrator::print "[INTERNAL]
C-style formatted printing during evaluation.

";

%feature("docstring") casadi::FixedStepIntegrator::n_nodes "[INTERNAL]
Number of nodes in the algorithm.

";

%feature("docstring") casadi::FixedStepIntegrator::eval_mx "[INTERNAL]
Evaluate with symbolic matrices.

";

%feature("docstring") casadi::FixedStepIntegrator::index_out "[INTERNAL]
Get output scheme index by name.

";

%feature("docstring") casadi::FixedStepIntegrator::call_gen "[INTERNAL]
Call a function, overloaded.

";

%feature("docstring")
casadi::FixedStepIntegrator::getJacSparsityHierarchicalSymm "[INTERNAL]  A
flavor of getJacSparsity that does hierarchical block structure recognition
for symmetric Jacobians

";

%feature("docstring") casadi::FixedStepIntegrator::sz_res "[INTERNAL]  Get
required length of res field.

";

%feature("docstring") casadi::FixedStepIntegrator::sz_work "[INTERNAL]  Get
number of temporary variables needed.

";

%feature("docstring") casadi::FixedStepIntegrator::get_forward "[INTERNAL]
Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::FixedStepIntegrator::sp_jac_dae "[INTERNAL]
Create sparsity pattern of the extended Jacobian (forward problem)

";

%feature("docstring") casadi::FixedStepIntegrator::get_default_in "[INTERNAL]  Get default input value.

";

%feature("docstring") casadi::FixedStepIntegrator::index_in "[INTERNAL]
Get input scheme index by name.

";

%feature("docstring") casadi::FixedStepIntegrator::get_jacobian_sparsity "[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::FixedStepIntegrator::check_res "[INTERNAL]
Check if output arguments have correct length and dimensions.

";

%feature("docstring") casadi::FixedStepIntegrator::replace_arg "[INTERNAL]
Replace 0-by-0 inputs.

";

%feature("docstring") casadi::FixedStepIntegrator::nnz_in "[INTERNAL]
Number of input/output nonzeros.

";

%feature("docstring") casadi::FixedStepIntegrator::getJacSparsityGen "[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring") casadi::FixedStepIntegrator::getExplicitB "[INTERNAL]
Get explicit dynamics (backward problem)

";

%feature("docstring") casadi::FixedStepIntegrator::getExplicit "[INTERNAL]
Get explicit dynamics.

";

%feature("docstring") casadi::FixedStepIntegrator::codegen_incref "[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring") casadi::FixedStepIntegrator::symbolic_output "[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::FixedStepIntegrator::oracle "[INTERNAL]  Get
oracle.

";

%feature("docstring") casadi::FixedStepIntegrator::size1_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::FixedStepIntegrator::codegen_meta "[INTERNAL]
Generate meta-information allowing a user to evaluate a generated function.

";

%feature("docstring") casadi::FixedStepIntegrator::codegen_body "[INTERNAL]
Generate code for the function body.

";

%feature("docstring") casadi::FixedStepIntegrator::adjViaJac "[INTERNAL]
Calculate derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::FixedStepIntegrator::sz_arg "[INTERNAL]  Get
required length of arg field.

";

%feature("docstring") casadi::FixedStepIntegrator::get_min_in "[INTERNAL]
Get smallest input value.

";

%feature("docstring") casadi::FixedStepIntegrator::reset "[INTERNAL]  Reset
the forward problem.

";

%feature("docstring") casadi::FixedStepIntegrator::checkout "[INTERNAL]
Checkout a memory object.

";

%feature("docstring") casadi::FixedStepIntegrator::print_fstats "[INTERNAL]
Print statistics.

";

%feature("docstring") casadi::FixedStepIntegrator::fwd_seed "[INTERNAL]
Symbolic expressions for the forward seeds.

";

%feature("docstring") casadi::FixedStepIntegrator::sprint "[INTERNAL]
C-style formatted printing to string.

";

%feature("docstring") casadi::FixedStepIntegrator::instruction_output "[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::FixedStepIntegrator::clear_mem "[INTERNAL]
Clear all memory (called from destructor)

";

%feature("docstring") casadi::FixedStepIntegrator::definition "[INTERNAL]
Get function signature: name:(inputs)->(outputs)

";

%feature("docstring") casadi::FixedStepIntegrator::set_temp "[INTERNAL]
Set the work vectors.

";

%feature("docstring") casadi::FixedStepIntegrator::call_reverse "[INTERNAL]
Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::FixedStepIntegrator::has_reverse "[INTERNAL]
Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::FixedStepIntegrator::print_stats "[INTERNAL]
Print solver statistics.

";

%feature("docstring") casadi::FixedStepIntegrator::sparsity_jac "[INTERNAL]
Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::FixedStepIntegrator::size2_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring")
casadi::FixedStepIntegrator::getJacSparsityHierarchical "[INTERNAL]  A
flavor of getJacSparsity that does hierarchical block structure recognition.

";

%feature("docstring") casadi::FixedStepIntegrator::sp_forward "[INTERNAL]
Propagate sparsity forward.

";

%feature("docstring") casadi::FixedStepIntegrator::size_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::FixedStepIntegrator::jacobian "[INTERNAL]
Return Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::FixedStepIntegrator::has_sprev "[INTERNAL]
Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::FixedStepIntegrator::mx_out "[INTERNAL]  Get
function input(s) and output(s)

";

%feature("docstring") casadi::FixedStepIntegrator::get_function "[INTERNAL]
";

%feature("docstring") casadi::FixedStepIntegrator::has_spfwd "[INTERNAL]
Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::FixedStepIntegrator::replace_fseed "[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring") casadi::FixedStepIntegrator::is_a "[INTERNAL]  Check
if the function is of a particular type.

";

%feature("docstring") casadi::FixedStepIntegrator::get_n_in "[INTERNAL]
Number of function inputs and outputs.

";

%feature("docstring") casadi::FixedStepIntegrator::has_derivative "[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring") casadi::FixedStepIntegrator::alloc_res "[INTERNAL]
Ensure required length of res field.

";

%feature("docstring") casadi::FixedStepIntegrator::has_function "[INTERNAL]
";

%feature("docstring") casadi::FixedStepIntegrator::get_abstol "[INTERNAL]
Get absolute tolerance.

";

%feature("docstring") casadi::FixedStepIntegrator::alloc_arg "[INTERNAL]
Ensure required length of arg field.

";

%feature("docstring") casadi::FixedStepIntegrator::wrap "[INTERNAL]  Wrap
in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::FixedStepIntegrator::alloc_mem "[INTERNAL]
Create memory block.

";

%feature("docstring") casadi::FixedStepIntegrator::release "[INTERNAL]
Release a memory object.

";

%feature("docstring") casadi::FixedStepIntegrator::codegen_declarations "[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring") casadi::FixedStepIntegrator::plugin_name "[INTERNAL]
";

%feature("docstring") casadi::FixedStepIntegrator::get_n_out "[INTERNAL]
Number of function inputs and outputs.

";

%feature("docstring") casadi::FixedStepIntegrator::rx "[INTERNAL] ";

%feature("docstring") casadi::FixedStepIntegrator::rz "[INTERNAL] ";

%feature("docstring") casadi::FixedStepIntegrator::disp "[INTERNAL]
Display object.

";

%feature("docstring") casadi::FixedStepIntegrator::getDerivativeOptions "[INTERNAL]  Set solver specific options to generated augmented integrators.

";

%feature("docstring") casadi::FixedStepIntegrator::rq "[INTERNAL] ";

%feature("docstring") casadi::FixedStepIntegrator::rp "[INTERNAL] ";


// File: classcasadi_1_1ForwardDiff.xml
%feature("docstring") casadi::ForwardDiff::fwdViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::ForwardDiff::get_sparsity_out "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::ForwardDiff::oracle "[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::ForwardDiff::fwd_seed "[INTERNAL]  Symbolic
expressions for the forward seeds.

";

%feature("docstring") casadi::ForwardDiff::calc_stepsize "[INTERNAL] ";

%feature("docstring") casadi::ForwardDiff::numel_out "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::ForwardDiff::call "[INTERNAL]   Call a
function, templated.

";

%feature("docstring") casadi::ForwardDiff::memory "[INTERNAL]  Memory
objects.

";

%feature("docstring") casadi::ForwardDiff::get_max_in "[INTERNAL]  Get
largest input value.

";

%feature("docstring") casadi::ForwardDiff::codegen "[INTERNAL]  Generate
code the function.

";

%feature("docstring") casadi::ForwardDiff::size_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::ForwardDiff::get_reltol "[INTERNAL]  Get
relative tolerance.

";

%feature("docstring") casadi::ForwardDiff::instruction_constant "[INTERNAL]
Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::ForwardDiff::all_scalar "[INTERNAL]  Are all
inputs and outputs scalar.

";

%feature("docstring") casadi::ForwardDiff::has_spfwd "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::ForwardDiff::codegen_decref "[INTERNAL]
Codegen decref for dependencies.

";

%feature("docstring") casadi::ForwardDiff::get_forward "[INTERNAL]  Second
order derivatives.

";

%feature("docstring") casadi::ForwardDiff::get_n_out "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::ForwardDiff::has_derivative "[INTERNAL]  Can
derivatives be calculated in any way?

";

%feature("docstring") casadi::ForwardDiff::check_res "[INTERNAL]  Check if
output arguments have correct length and dimensions.

";

%feature("docstring") casadi::ForwardDiff::matching_arg "[INTERNAL]  Check
if input arguments that needs to be replaced.

";

%feature("docstring") casadi::ForwardDiff::nnz_out "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::ForwardDiff::replace_fseed "[INTERNAL]
Replace 0-by-0 forward seeds.

";

%feature("docstring") casadi::ForwardDiff::n_nodes "[INTERNAL]  Number of
nodes in the algorithm.

";

%feature("docstring") casadi::ForwardDiff::instruction_MX "[INTERNAL]  get
MX expression associated with instruction

";

%feature("docstring") casadi::ForwardDiff::print_options "[INTERNAL]  Print
list of options.

";

%feature("docstring") casadi::ForwardDiff::size1_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::ForwardDiff::sz_w "[INTERNAL]  Get required
length of w field.

";

%feature("docstring") casadi::ForwardDiff::get_free "[INTERNAL]  Print free
variables.

";

%feature("docstring") casadi::ForwardDiff::size2_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::ForwardDiff::sz_res "[INTERNAL]  Get required
length of res field.

";

%feature("docstring") casadi::ForwardDiff::get_stats "[INTERNAL]  Get all
statistics.

";

%feature("docstring") casadi::ForwardDiff::is_a "[INTERNAL]  Check if the
function is of a particular type.

";

%feature("docstring") casadi::ForwardDiff::codegen_name "[INTERNAL]  Get
name in codegen.

";

%feature("docstring") casadi::ForwardDiff::init_mem "[INTERNAL]  Initalize
memory block.

";

%feature("docstring") casadi::ForwardDiff::alloc_w "[INTERNAL]  Ensure
required length of w field.

";

%feature("docstring") casadi::ForwardDiff::has_function "[INTERNAL] ";

%feature("docstring") casadi::ForwardDiff::call_gen "[INTERNAL]   Call a
function, overloaded.

";

%feature("docstring") casadi::ForwardDiff::replace_res "[INTERNAL]  Replace
0-by-0 outputs.

";

%feature("docstring") casadi::ForwardDiff::has_reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::ForwardDiff::eval_gen "

>  int casadi::FunctionInternal::eval_gen(const double **arg, double **res, int *iw, double *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate numerically.

>  int casadi::FunctionInternal::eval_gen(const SXElem **arg, SXElem **res, int *iw, SXElem *w, void *mem) const

>  int casadi::FunctionInternal::eval_gen(const bvec_t **arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

%feature("docstring") casadi::ForwardDiff::get_partition "[INTERNAL]  Get
the unidirectional or bidirectional partition.

";

%feature("docstring") casadi::ForwardDiff::free_sx "[INTERNAL]  Get free
variables (SX)

";

%feature("docstring") casadi::ForwardDiff::getJacSparsityHierarchicalSymm "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::ForwardDiff::construct "[INTERNAL]  Construct
Prepares the function for evaluation.

";

%feature("docstring") casadi::ForwardDiff::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::ForwardDiff::class_name "[INTERNAL]  Get type
name.

";

%feature("docstring") casadi::ForwardDiff::mx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::ForwardDiff "[INTERNAL]  Calculate derivative
using forward differences Joel Andersson

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| abstol           | OT_DOUBLE       | Accuracy of      | casadi::ForwardD |
|                  |                 | function outputs | iff              |
|                  |                 | [default: query  |                  |
|                  |                 | object]          |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| enable_fd        | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation by   |                  |
|                  |                 | finite           |                  |
|                  |                 | differencing.    |                  |
|                  |                 | [default:        |                  |
|                  |                 | false]]          |                  |
+------------------+-----------------+------------------+------------------+
| enable_forward   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using forward    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_jacobian  | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobians of all |                  |
|                  |                 | differentiable   |                  |
|                  |                 | outputs with     |                  |
|                  |                 | respect to all   |                  |
|                  |                 | differentiable   |                  |
|                  |                 | inputs - if      |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_reverse   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | transposed       |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using reverse    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| fd_method        | OT_STRING       | Method for       | casadi::Function |
|                  |                 | finite           | Internal         |
|                  |                 | differencing     |                  |
|                  |                 | [default         |                  |
|                  |                 | 'central']       |                  |
+------------------+-----------------+------------------+------------------+
| fd_options       | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | finite           |                  |
|                  |                 | difference       |                  |
|                  |                 | instance         |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| h_iter           | OT_INT          | Number of        | casadi::ForwardD |
|                  |                 | iterations to    | iff              |
|                  |                 | improve on the   |                  |
|                  |                 | step-size        |                  |
|                  |                 | [default: 1 if   |                  |
|                  |                 | error estimate   |                  |
|                  |                 | available,       |                  |
|                  |                 | otherwise 0]     |                  |
+------------------+-----------------+------------------+------------------+
| h_max            | OT_DOUBLE       | Maximum step     | casadi::ForwardD |
|                  |                 | size [default 0] | iff              |
+------------------+-----------------+------------------+------------------+
| h_min            | OT_DOUBLE       | Minimum step     | casadi::ForwardD |
|                  |                 | size [default    | iff              |
|                  |                 | inf]             |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| reltol           | OT_DOUBLE       | Accuracy of      | casadi::ForwardD |
|                  |                 | function inputs  | iff              |
|                  |                 | [default: query  |                  |
|                  |                 | object]          |                  |
+------------------+-----------------+------------------+------------------+
| second_order_ste | OT_DOUBLE       | Second order     | casadi::ForwardD |
| psize            |                 | perturbation     | iff              |
|                  |                 | size [default:   |                  |
|                  |                 | 1e-3]            |                  |
+------------------+-----------------+------------------+------------------+
| smoothing        | OT_DOUBLE       | Smoothing        | casadi::ForwardD |
|                  |                 | regularization   | iff              |
|                  |                 | [default:        |                  |
|                  |                 | machine          |                  |
|                  |                 | precision]       |                  |
+------------------+-----------------+------------------+------------------+
| u_aim            | OT_DOUBLE       | Target ratio of  | casadi::ForwardD |
|                  |                 | roundoff error   | iff              |
|                  |                 | to truncation    |                  |
|                  |                 | error [default:  |                  |
|                  |                 | 100.]            |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: finite_differences.hpp ";

%feature("docstring") casadi::ForwardDiff::slice "[INTERNAL]  returns a new
function with a selection of inputs/outputs of the original

";

%feature("docstring") casadi::ForwardDiff::sprint "[INTERNAL]  C-style
formatted printing to string.

";

%feature("docstring") casadi::ForwardDiff::getAtomicInput "

[DEPRECATED] Renamed instruction_index

";

%feature("docstring") casadi::ForwardDiff::checkout "[INTERNAL]  Checkout a
memory object.

";

%feature("docstring") casadi::ForwardDiff::free_mx "[INTERNAL]  Get free
variables ( MX)

";

%feature("docstring") casadi::ForwardDiff::codegen_incref "[INTERNAL]
Codegen incref for dependencies.

";

%feature("docstring") casadi::ForwardDiff::calc_fd "[INTERNAL] ";

%feature("docstring") casadi::ForwardDiff::export_code "[INTERNAL]  Export
function in a specific language.

";

%feature("docstring") casadi::ForwardDiff::which_depends "[INTERNAL]  Which
variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::ForwardDiff::symbolicAdjSeed "[INTERNAL]
Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::ForwardDiff::size2_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::ForwardDiff::has_jacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::ForwardDiff::get_abstol "[INTERNAL]  Get
absolute tolerance.

";

%feature("docstring") casadi::ForwardDiff::wrap "[INTERNAL]  Wrap in an
Function instance consisting of only one MX call.

";

%feature("docstring") casadi::ForwardDiff::getAtomicOutput "

[DEPRECATED] Renamed instruction_output

";

%feature("docstring") casadi::ForwardDiff::print "[INTERNAL]  C-style
formatted printing during evaluation.

";

%feature("docstring") casadi::ForwardDiff::get_function "[INTERNAL] ";

%feature("docstring") casadi::ForwardDiff::check_arg "[INTERNAL]  Check if
input arguments have correct length and dimensions.

";

%feature("docstring") casadi::ForwardDiff::print_dimensions "[INTERNAL]
Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::ForwardDiff::has_codegen "[INTERNAL]  Is
codegen supported?

";

%feature("docstring") casadi::ForwardDiff::get_name_in "[INTERNAL]  Names
of function input and outputs.

";

%feature("docstring") casadi::ForwardDiff::alloc_res "[INTERNAL]  Ensure
required length of res field.

";

%feature("docstring") casadi::ForwardDiff::getAdaptorSolverName "[INTERNAL]
Obtain solver name from Adaptor.

";

%feature("docstring") casadi::ForwardDiff::sz_iw "[INTERNAL]  Get required
length of iw field.

";

%feature("docstring") casadi::ForwardDiff::instruction_id "[INTERNAL]  Get
an atomic operation operator index.

";

%feature("docstring") casadi::ForwardDiff::info "[INTERNAL]  Obtain
information about function

";

%feature("docstring") casadi::ForwardDiff::symbolic_output "[INTERNAL]  Get
a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::ForwardDiff::mapsum_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::ForwardDiff::disp_more "[INTERNAL]  Print
more.

";

%feature("docstring") casadi::ForwardDiff::eval_dm "[INTERNAL]  Evaluate
with DM matrices.

";

%feature("docstring") casadi::ForwardDiff::~ForwardDiff "[INTERNAL]
Destructor.

";

%feature("docstring") casadi::ForwardDiff::ad_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::ForwardDiff::mx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::ForwardDiff::get_reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::ForwardDiff::free_mem "[INTERNAL]  Free
memory block.

";

%feature("docstring") casadi::ForwardDiff::pert "[INTERNAL] ";

%feature("docstring") casadi::ForwardDiff::eval "[INTERNAL]  Evaluate
numerically.

";

%feature("docstring") casadi::ForwardDiff::instruction_input "[INTERNAL]
Get the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::ForwardDiff::ForwardDiff "[INTERNAL] ";

%feature("docstring") casadi::ForwardDiff::setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";

%feature("docstring") casadi::ForwardDiff::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::ForwardDiff::get_sparsity_in "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::ForwardDiff::replace_arg "[INTERNAL]  Replace
0-by-0 inputs.

";

%feature("docstring") casadi::ForwardDiff::matching_res "[INTERNAL]  Check
if output arguments that needs to be replaced.

";

%feature("docstring") casadi::ForwardDiff::jit_dependencies "[INTERNAL]
Jit dependencies.

";

%feature("docstring") casadi::ForwardDiff::sp_forward "[INTERNAL]
Propagate sparsity forward.

";

%feature("docstring") casadi::ForwardDiff::alloc_arg "[INTERNAL]  Ensure
required length of arg field.

";

%feature("docstring") casadi::ForwardDiff::get_jacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::ForwardDiff::call_reverse "[INTERNAL]
Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::ForwardDiff::alloc "[INTERNAL]  Ensure work
vectors long enough to evaluate function.

";

%feature("docstring") casadi::ForwardDiff::generate_dependencies "[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring") casadi::ForwardDiff::alloc_iw "[INTERNAL]  Ensure
required length of iw field.

";

%feature("docstring") casadi::ForwardDiff::size1_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::ForwardDiff::generate_lifted "[INTERNAL]
Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::ForwardDiff::call_forward "[INTERNAL]
Forward mode AD, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::ForwardDiff::set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::ForwardDiff::has_err "[INTERNAL] ";

%feature("docstring") casadi::ForwardDiff::sz_arg "[INTERNAL]  Get required
length of arg field.

";

%feature("docstring") casadi::ForwardDiff::reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::ForwardDiff::has_forward "[INTERNAL]  Second
order derivatives.

";

%feature("docstring") casadi::ForwardDiff::codegen_declarations "[INTERNAL]
Generate code for the declarations of the C function.

";

%feature("docstring") casadi::ForwardDiff::finalize "[INTERNAL]  Finalize
the object creation.

";

%feature("docstring") casadi::ForwardDiff::sx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::ForwardDiff::index_out "[INTERNAL]  Get
output scheme index by name.

";

%feature("docstring") casadi::ForwardDiff::uses_output "[INTERNAL]  Is the
scheme using the (nondifferentiated) output?

";

%feature("docstring") casadi::ForwardDiff::self "[INTERNAL]  Get a public
class instance.

";

%feature("docstring") casadi::ForwardDiff::n_instructions "[INTERNAL]  Get
the number of atomic operations.

";

%feature("docstring") casadi::ForwardDiff::eval_sx "[INTERNAL]  Evaluate
with symbolic scalars.

";

%feature("docstring") casadi::ForwardDiff::sp_reverse "[INTERNAL]
Propagate sparsity backwards.

";

%feature("docstring") casadi::ForwardDiff::forward "[INTERNAL]  Return
function that calculates forward derivatives forward(nfwd) returns a cached
instance if available, and calls  Function get_forward(int nfwd) if no
cached version is available.

";

%feature("docstring") casadi::ForwardDiff::nnz_in "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::ForwardDiff::instruction_output "[INTERNAL]
Get the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::ForwardDiff::factory "[INTERNAL] ";

%feature("docstring") casadi::ForwardDiff::sparsity_jac "[INTERNAL]  Get,
if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::ForwardDiff::get_jacobian_sparsity "[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::ForwardDiff::disp "[INTERNAL]  Display
object.

";

%feature("docstring") casadi::ForwardDiff::index_in "[INTERNAL]  Get input
scheme index by name.

";

%feature("docstring") casadi::ForwardDiff::print_option "[INTERNAL]  Print
all information there is to know about a certain option.

";

%feature("docstring") casadi::ForwardDiff::init "[INTERNAL]  Initialize.

";

%feature("docstring") casadi::ForwardDiff::numel_in "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::ForwardDiff::codegen_sparsities "[INTERNAL]
Codegen sparsities.

";

%feature("docstring") casadi::ForwardDiff::getJacSparsityHierarchical "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::ForwardDiff::get_n_in "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::ForwardDiff::getJacSparsity "[INTERNAL]
Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::ForwardDiff::getJacSparsityGen "[INTERNAL]
Get the sparsity pattern, forward mode.

";

%feature("docstring") casadi::ForwardDiff::clear_mem "[INTERNAL]  Clear all
memory (called from destructor)

";

%feature("docstring") casadi::ForwardDiff::alloc_mem "[INTERNAL]  Create
memory block.

";

%feature("docstring") casadi::ForwardDiff::codegen_body "[INTERNAL]
Generate code for the body of the C function.

";

%feature("docstring") casadi::ForwardDiff::get_name_out "[INTERNAL]  Names
of function input and outputs.

";

%feature("docstring") casadi::ForwardDiff::get_options "[INTERNAL]
Options.

";

%feature("docstring") casadi::ForwardDiff::set_temp "[INTERNAL]  Set the
(temporary) work vectors.

";

%feature("docstring") casadi::ForwardDiff::eval_mx "[INTERNAL]  Evaluate
with symbolic matrices.

";

%feature("docstring") casadi::ForwardDiff::has_sprev "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::ForwardDiff::codegen_meta "[INTERNAL]
Generate meta-information allowing a user to evaluate a generated function.

";

%feature("docstring") casadi::ForwardDiff::release "[INTERNAL]  Release a
memory object.

";

%feature("docstring") casadi::ForwardDiff::size_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::ForwardDiff::signature "[INTERNAL]  Code
generate the function.

";

%feature("docstring") casadi::ForwardDiff::sp_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode, sparsity propagation.

";

%feature("docstring") casadi::ForwardDiff::sz_work "[INTERNAL]  Get number
of temporary variables needed.

";

%feature("docstring") casadi::ForwardDiff::definition "[INTERNAL]  Get
function signature: name:(inputs)->(outputs)

";

%feature("docstring") casadi::ForwardDiff::get_min_in "[INTERNAL]  Get
smallest input value.

";

%feature("docstring") casadi::ForwardDiff::adjViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::ForwardDiff::sx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::ForwardDiff::jacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::ForwardDiff::n_pert "[INTERNAL] ";

%feature("docstring") casadi::ForwardDiff::get_default_in "[INTERNAL]  Get
default input value.

";

%feature("docstring") casadi::ForwardDiff::has_free "[INTERNAL]  Does the
function have free variables.

";

%feature("docstring") casadi::ForwardDiff::replace_aseed "[INTERNAL]
Replace 0-by-0 reverse seeds.

";


// File: classcasadi_1_1FStats.xml
%feature("docstring") casadi::FStats::tic "[INTERNAL]  Start timing.

";

%feature("docstring") casadi::FStats::reset "[INTERNAL]  Reset the
statistics.

";

%feature("docstring") casadi::FStats::FStats "[INTERNAL]  Constructor.

";

%feature("docstring") casadi::FStats "[INTERNAL]  Timer class

FStats hack; hack.tic(); .... hack.toc();

C++ includes: timing.hpp ";

%feature("docstring") casadi::FStats::toc "[INTERNAL]  Stop timing.

";


// File: classcasadi_1_1Function.xml
%feature("docstring") casadi::Function::n_instructions "

Number of instruction in the algorithm (SXFunction/MXFunction)

";

%feature("docstring") casadi::Function::nnz_in "

Get number of input nonzeros.

For a particular input or for all of the inputs

";

%feature("docstring") casadi::Function::has_spfwd "

Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Function::name "

Name of the function.

";

%feature("docstring") casadi::Function::has_function "";

%feature("docstring") casadi::Function::jacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::Function::stats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::Function::sparsity_out "

Get sparsity of a given output.

";

%feature("docstring") casadi::Function::oracle "

Get oracle.

";

%feature("docstring") casadi::Function::instruction_id "

Identifier index of the instruction (SXFunction/MXFunction)

";

%feature("docstring") casadi::Function::instruction_output "

Location in the work vector for the output of the instruction
(SXFunction/MXFunction)

";

%feature("docstring") casadi::Function::wrap "

Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::Function::getAtomicOperation "

[DEPRECATED] Renamed instruction_id

";

%feature("docstring") casadi::Function::getAlgorithmSize "

[DEPRECATED] Renamed n_instructions

";

%feature("docstring") casadi::Function::numel_out "

Get number of output elements.

For a particular output or for all of the outputs

";

%feature("docstring") casadi::Function::print_dimensions "

Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::Function::get_str "

Get string representation.

";

%feature("docstring") casadi::Function::get_free "

Get free variables as a string.

";

%feature("docstring") casadi::Function::disp "

Print a description of the object.

";

%feature("docstring") casadi::Function::name_out "

>  const std::vector<std::string>& casadi::Function::name_out() const 
------------------------------------------------------------------------

Get output scheme.

>  const std::string& casadi::Function::name_out(int ind) const 
------------------------------------------------------------------------

Get output scheme name by index.

";

%feature("docstring") casadi::Function::n_in "

Get the number of function inputs.

";

%feature("docstring") casadi::Function::mx_out "

Get symbolic primitives equivalent to the output expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring") casadi::Function::max_in "

Get largest input value.

";

%feature("docstring") casadi::Function::generate_dependencies "

Export / Generate C code for the dependency function.

";

%feature("docstring") casadi::Function::free_sx "

Get all the free variables of the function.

";

%feature("docstring") casadi::Function::mapaccum "

Create a mapaccumulated version of this function.

Suppose the function has a signature of:

::

     f: (x, u) -> (x_next , y )
  



The the mapaccumulated version has the signature:

::

     F: (x0, U) -> (X , Y )
  
      with
          U: horzcat([u0, u1, ..., u_(N-1)])
          X: horzcat([x1, x2, ..., x_N])
          Y: horzcat([y0, y1, ..., y_(N-1)])
  
      and
          x1, y0 <- f(x0, u0)
          x2, y1 <- f(x1, u1)
          ...
          x_N, y_(N-1) <- f(x_(N-1), u_(N-1))
  



Mapaccum has the following benefits over writing an equivalent for- loop:
much faster at construction time

potentially much faster compilation times (for codegen)

offers a trade-off between memory and evaluation time

The base (settable through the options dictionary, default 10), is used to
create a tower of function calls, containing unrolled for- loops of length
maximum base.

This technique is much more scalable in terms of memory-usage, but slightly
slower at evaluation, than a plain for-loop. The effect is similar to that
of a for-loop with a check-pointing instruction after each chunk of
iterations with size base.

Set base to -1 to unroll all the way; no gains in memory efficiency here.

";

%feature("docstring") casadi::Function::Function "

>  casadi::Function::Function(const std::string &name, const std::vector< SX > &ex_in, const std::vector< SX > &ex_out, const Dict &opts=Dict())

>  casadi::Function::Function(const std::string &name, const std::vector< SX > &ex_in, const std::vector< SX > &ex_out, const std::vector< std::string > &name_in, const std::vector< std::string > &name_out, const Dict &opts=Dict())

>  casadi::Function::Function(const std::string &name, const std::map< std::string, SX > &dict, const std::vector< std::string > &name_in, const std::vector< std::string > &name_out, const Dict &opts=Dict())
------------------------------------------------------------------------

Construct an SX function.

>  casadi::Function::Function(const std::string &name, const std::vector< MX > &ex_in, const std::vector< MX > &ex_out, const Dict &opts=Dict())

>  casadi::Function::Function(const std::string &name, const std::vector< MX > &ex_in, const std::vector< MX > &ex_out, const std::vector< std::string > &name_in, const std::vector< std::string > &name_out, const Dict &opts=Dict())

>  casadi::Function::Function(const std::string &name, const std::map< std::string, MX > &dict, const std::vector< std::string > &name_in, const std::vector< std::string > &name_out, const Dict &opts=Dict())
------------------------------------------------------------------------

Construct an MX function.

>  casadi::Function::Function()
------------------------------------------------------------------------

Default constructor, null pointer.

>  casadi::Function::Function(const std::string &fname)
------------------------------------------------------------------------

Construct from a file.

";

%feature("docstring") casadi::Function::numel_in "

Get number of input elements.

For a particular input or for all of the inputs

";

%feature("docstring") casadi::Function::get_function "";

%feature("docstring") casadi::Function::sz_res "[INTERNAL]  Get required
length of res field.

";

%feature("docstring") casadi::Function::is_null "

Is a null pointer?

";

%feature("docstring") casadi::Function::forward "

Get a function that calculates nfwd forward derivatives.

Returns a function with n_in + n_out + n_in inputs and nfwd outputs. The
first n_in inputs correspond to nondifferentiated inputs. The next n_out
inputs correspond to nondifferentiated outputs. and the last n_in inputs
correspond to forward seeds, stacked horizontally The n_out outputs
correspond to forward sensitivities, stacked horizontally. * (n_in = n_in(),
n_out = n_out())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::Function::n_out "

Get the number of function outputs.

";

%feature("docstring") casadi::Function::getAtomicInput "

[DEPRECATED] Renamed instruction_index

";

%feature("docstring") casadi::Function::uses_output "

Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring") casadi::Function::print_ptr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::Function::min_in "

Get smallest input value.

";

%feature("docstring") casadi::Function::assert_size_out "

Assert that an output dimension is equal so some given value.

";

%feature("docstring") casadi::Function::~Function "

Destructor.

";

%feature("docstring") casadi::Function::__hash__ "

Returns a number that is unique for a given Node. If the Object does not
point to any node, \"0\" is returned.

";

%feature("docstring") casadi::Function::index_out "

Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLPSOL_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::Function::free_mx "

Get all the free variables of the function.

";

%feature("docstring") casadi::Function::export_code "

Export function in specific language.

Only allowed for (a subset of) SX/MX Functions

";

%feature("docstring") casadi::Function::size_out "

Get output dimension.

";

%feature("docstring") casadi::Function::class_name "

Get class name.

";

%feature("docstring") casadi::Function::instruction_input "

Locations in the work vector for the inputs of the instruction
(SXFunction/MXFunction)

";

%feature("docstring") casadi::Function::info "

Obtain information about function

";

%feature("docstring") casadi::Function::slice "

returns a new function with a selection of inputs/outputs of the original

";

%feature("docstring") casadi::Function::mapsum "

Evaluate symbolically in parallel and sum (matrix graph)

Parameters:
-----------

parallelization:  Type of parallelization used: unroll|serial|openmp

";

%feature("docstring") casadi::Function::nnz_out "

Get number of output nonzeros.

For a particular output or for all of the outputs

";

%feature("docstring") casadi::Function::sparsity_jac "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::Function::index_in "

Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLPSOL_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::Function::factory "";

%feature("docstring") casadi::Function::checkout "

Checkout a memory object.

";

%feature("docstring") casadi::Function::print_option "

Print all information there is to know about a certain option.

";

%feature("docstring") casadi::Function::fullJacobian "

[DEPRECATED] Alias of Function::jacobian

";

%feature("docstring") casadi::Function::hessian_old "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output Legacy function: To be deprecated in a future
version of CasADi. Exists only for compatibility with Function::hessian pre-
CasADi 3.2

";

%feature("docstring") casadi::Function::map "

>  Function casadi::Function::map(const std::string &name, const std::string &parallelization, int n, const std::vector< int > &reduce_in, const std::vector< int > &reduce_out, const Dict &opts=Dict()) const

>  Function casadi::Function::map(const std::string &name, const std::string &parallelization, int n, const std::vector< std::string > &reduce_in, const std::vector< std::string > &reduce_out, const Dict &opts=Dict()) const 
------------------------------------------------------------------------

Map with reduction A subset of the inputs are non-repeated and a subset of
the outputs summed up.

>  Function casadi::Function::map(int n, const std::string &parallelization=\"serial\") const 
------------------------------------------------------------------------

Create a mapped version of this function.

Suppose the function has a signature of:

::

     f: (a, p) -> ( s )
  



The the mapped version has the signature:

::

     F: (A, P) -> (S )
  
      with
          A: horzcat([a0, a1, ..., a_(N-1)])
          P: horzcat([p0, p1, ..., p_(N-1)])
          S: horzcat([s0, s1, ..., s_(N-1)])
      and
          s0 <- f(a0, p0)
          s1 <- f(a1, p1)
          ...
          s_(N-1) <- f(a_(N-1), p_(N-1))
  



Parameters:
-----------

parallelization:  Type of parallelization used: unroll|serial|openmp

";

%feature("docstring") casadi::Function::sx_in "

Get symbolic primitives equivalent to the input expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring") casadi::Function::size1_in "

Get input dimension.

";

%feature("docstring") casadi::Function::getAtomicOutput "

[DEPRECATED] Renamed instruction_output

";

%feature("docstring") casadi::Function::conic_debug "[INTERNAL]  Generate
native code in the interfaced language for debugging

";

%feature("docstring") casadi::Function::sz_iw "[INTERNAL]  Get required
length of iw field.

";

%feature("docstring") casadi::Function::is_a "

Check if the function is of a particular type Optionally check if name
matches one of the base classes (default true)

";

%feature("docstring") casadi::Function::name_in "

>  const std::vector<std::string>& casadi::Function::name_in() const 
------------------------------------------------------------------------

Get input scheme.

>  const std::string& casadi::Function::name_in(int ind) const 
------------------------------------------------------------------------

Get input scheme name by index.

";

%feature("docstring") casadi::Function::mx_in "

Get symbolic primitives equivalent to the input expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring") casadi::Function::reverse "

Get a function that calculates nadj adjoint derivatives.

Returns a function with n_in + n_out + n_out inputs and n_in outputs. The
first n_in inputs correspond to nondifferentiated inputs. The next n_out
inputs correspond to nondifferentiated outputs. and the last n_out inputs
correspond to adjoint seeds, stacked horizontally The n_in outputs
correspond to adjoint sensitivities, stacked horizontally. * (n_in = n_in(),
n_out = n_out())

(n_in = n_in(), n_out = n_out())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::Function "

Function object A Function instance is a general multiple-input, multiple-
output function where each input and output can be a sparse matrix. .

For an introduction to this class, see the CasADi user guide. Function is a
reference counted and immutable class; copying a class instance is very
cheap and its behavior (with some exceptions) is not affected by calling its
member functions. Joel Andersson >List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| enable_fd        | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation by   |                  |
|                  |                 | finite           |                  |
|                  |                 | differencing.    |                  |
|                  |                 | [default:        |                  |
|                  |                 | false]]          |                  |
+------------------+-----------------+------------------+------------------+
| enable_forward   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using forward    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_jacobian  | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobians of all |                  |
|                  |                 | differentiable   |                  |
|                  |                 | outputs with     |                  |
|                  |                 | respect to all   |                  |
|                  |                 | differentiable   |                  |
|                  |                 | inputs - if      |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_reverse   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | transposed       |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using reverse    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| fd_method        | OT_STRING       | Method for       | casadi::Function |
|                  |                 | finite           | Internal         |
|                  |                 | differencing     |                  |
|                  |                 | [default         |                  |
|                  |                 | 'central']       |                  |
+------------------+-----------------+------------------+------------------+
| fd_options       | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | finite           |                  |
|                  |                 | difference       |                  |
|                  |                 | instance         |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

C++ includes: function.hpp ";

%feature("docstring") casadi::Function::instruction_MX "";

%feature("docstring") casadi::Function::print_free "

[DEPRECATED] Use get_free instead

";

%feature("docstring") casadi::Function::getAtomicInputReal "

[DEPRECATED] Renamed instruction_constant

";

%feature("docstring") casadi::Function::generate "

Export / Generate C code for the function.

";

%feature("docstring") casadi::Function::has_free "

Does the function have free variables.

";

%feature("docstring") casadi::Function::assert_size_in "

Assert that an input dimension is equal so some given value.

";

%feature("docstring") casadi::Function::n_nodes "

Number of nodes in the algorithm.

";

%feature("docstring") casadi::Function::release "

Release a memory object.

";

%feature("docstring") casadi::Function::size_in "

Get input dimension.

";

%feature("docstring") casadi::Function::jit "

To resolve ambiguity on some compilers.

Create a just-in-time compiled function from a C language string The names
and sparsity patterns of all the inputs and outputs must be provided. If
sparsities are not provided, all inputs and outputs are assumed to be
scalar. Only specify the function body, assuming that input and output
nonzeros are stored in arrays with the specified naming convension. The data
type used is 'casadi_real', which is typically equal to 'double` or another
data type with the same API as 'double'.

Inputs may be null pointers. This means that the all entries are zero.
Outputs may be null points. This means that the corresponding result can be
ignored.

If an error occurs in the evaluation, issue \"return 1;\";

The final generated function will have a structure similar to:

int fname(const casadi_real** arg, casadi_real** res, int* iw, casadi_real*
w, void* mem) { const casadi_real *x1, *x2; casadi_real *r1, *r2; x1 =
*arg++; x2 = *arg++; r1 = *res++; r2 = *res++; <FUNCTION_BODY> return 0; }

";

%feature("docstring") casadi::Function::size2_out "

Get output dimension.

";

%feature("docstring") casadi::Function::size1_out "

Get output dimension.

";

%feature("docstring") casadi::Function::generate_lifted "

Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::Function::sparsity_in "

Get sparsity of a given input.

";

%feature("docstring") casadi::Function::which_depends "

Which variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::Function::getWorkSize "

[DEPRECATED] Use sz_w instead

";

%feature("docstring") casadi::Function::call "

>  void casadi::Function::call(const std::vector< DM > &arg, std::vector< DM > &output_res, bool always_inline=false, bool never_inline=false) const 
------------------------------------------------------------------------

Evaluate the function symbolically or numerically.

>  void casadi::Function::call(const std::vector< SX > &arg, std::vector< SX > &output_res, bool always_inline=false, bool never_inline=false) const

>  void casadi::Function::call(const std::vector< MX > &arg, std::vector< MX > &output_res, bool always_inline=false, bool never_inline=false) const

>  void casadi::Function::call(const DMDict &arg, DMDict &output_res, bool always_inline=false, bool never_inline=false) const

>  void casadi::Function::call(const SXDict &arg, SXDict &output_res, bool always_inline=false, bool never_inline=false) const

>  void casadi::Function::call(const MXDict &arg, MXDict &output_res, bool always_inline=false, bool never_inline=false) const 
------------------------------------------------------------------------

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output Legacy function: To be deprecated in a future
version of CasADi. Exists only for compatibility with Function::jacobian
pre-CasADi 3.2

";

%feature("docstring") casadi::Function::jacobian_old "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output Legacy function: To be deprecated in a future
version of CasADi. Exists only for compatibility with Function::jacobian
pre-CasADi 3.2

";

%feature("docstring") casadi::Function::sz_arg "[INTERNAL]  Get required
length of arg field.

";

%feature("docstring") casadi::Function::print_options "

Print options to a stream.

";

%feature("docstring") casadi::Function::size2_in "

Get input dimension.

";

%feature("docstring") casadi::Function::has_sprev "

Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Function::instruction_constant "

Get the floating point output argument of an instruction ( SXFunction)

";

%feature("docstring") casadi::Function::sz_w "[INTERNAL]  Get required
length of w field.

";

%feature("docstring") casadi::Function::expand "

Expand a function to SX.

";

%feature("docstring") casadi::Function::spCanEvaluate "

[DEPRECATED] Use has_spfwd, has_sprev

";

%feature("docstring") casadi::Function::sx_out "

Get symbolic primitives equivalent to the output expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring") casadi::Function::default_in "

Get default input value.

";


// File: classcasadi_1_1GenericExternal.xml
%feature("docstring") casadi::GenericExternal::size_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::GenericExternal::index_in "[INTERNAL]  Get
input scheme index by name.

";

%feature("docstring") casadi::GenericExternal::matching_res "[INTERNAL]
Check if output arguments that needs to be replaced.

";

%feature("docstring") casadi::GenericExternal::call_gen "[INTERNAL]   Call
a function, overloaded.

";

%feature("docstring") casadi::GenericExternal::get_jacobian_sparsity "[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::GenericExternal::get_sparsity_out "[INTERNAL]
Retreive sparsities.

";

%feature("docstring") casadi::GenericExternal::get_reltol "[INTERNAL]  Get
relative tolerance.

";

%feature("docstring") casadi::GenericExternal::codegen_incref "[INTERNAL]
Codegen incref for dependencies.

";

%feature("docstring") casadi::GenericExternal::~GenericExternal "[INTERNAL]
Destructor.

";

%feature("docstring") casadi::GenericExternal::codegen_declarations "[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring") casadi::GenericExternal::numel_out "[INTERNAL]
Number of input/output elements.

";

%feature("docstring") casadi::GenericExternal::nnz_out "[INTERNAL]  Number
of input/output nonzeros.

";

%feature("docstring") casadi::GenericExternal::symbolicAdjSeed "[INTERNAL]
Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::GenericExternal::sp_weight "[INTERNAL]
Weighting factor for chosing forward/reverse mode, sparsity propagation.

";

%feature("docstring") casadi::GenericExternal::codegen_sparsities "[INTERNAL]  Codegen sparsities.

";

%feature("docstring") casadi::GenericExternal::symbolic_output "[INTERNAL]
Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::GenericExternal::construct "[INTERNAL]
Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::GenericExternal::class_name "[INTERNAL]  Get
type name.

";

%feature("docstring") casadi::GenericExternal::has_sprev "[INTERNAL]  Is
the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::GenericExternal::has_derivative "[INTERNAL]
Can derivatives be calculated in any way?

";

%feature("docstring") casadi::GenericExternal::generate_lifted "[INTERNAL]
Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::GenericExternal::mapsum_mx "[INTERNAL]
Parallel evaluation.

";

%feature("docstring") casadi::GenericExternal::export_code "[INTERNAL]
Export function in a specific language.

";

%feature("docstring") casadi::GenericExternal::getAdaptorSolverName "[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring") casadi::GenericExternal::set_work "[INTERNAL]  Set
the (persistent) work vectors.

";

%feature("docstring") casadi::GenericExternal::all_scalar "[INTERNAL]  Are
all inputs and outputs scalar.

";

%feature("docstring") casadi::GenericExternal::print_options "[INTERNAL]
Print list of options.

";

%feature("docstring") casadi::GenericExternal::has_jacobian "[INTERNAL]
Full Jacobian.

";

%feature("docstring") casadi::GenericExternal::alloc_mem "[INTERNAL]
Create memory block.

";

%feature("docstring") casadi::GenericExternal::has_forward "[INTERNAL]
Forward mode derivatives.

";

%feature("docstring") casadi::GenericExternal::disp "[INTERNAL]  Display
object.

";

%feature("docstring") casadi::GenericExternal::getJacSparsityHierarchical "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::GenericExternal::getJacSparsity "[INTERNAL]
Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::GenericExternal::jacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::GenericExternal::oracle "[INTERNAL]  Get
oracle.

";

%feature("docstring") casadi::GenericExternal::index_out "[INTERNAL]  Get
output scheme index by name.

";

%feature("docstring") casadi::GenericExternal::eval_gen "

>  int casadi::FunctionInternal::eval_gen(const double **arg, double **res, int *iw, double *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate numerically.

>  int casadi::FunctionInternal::eval_gen(const SXElem **arg, SXElem **res, int *iw, SXElem *w, void *mem) const

>  int casadi::FunctionInternal::eval_gen(const bvec_t **arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

%feature("docstring") casadi::GenericExternal::replace_fseed "[INTERNAL]
Replace 0-by-0 forward seeds.

";

%feature("docstring") casadi::GenericExternal::checkout "[INTERNAL]
Checkout a memory object.

";

%feature("docstring") casadi::GenericExternal::has_codegen "[INTERNAL]  Is
codegen supported?

";

%feature("docstring") casadi::GenericExternal::get_min_in "[INTERNAL]  Get
smallest input value.

";

%feature("docstring") casadi::GenericExternal::size_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::GenericExternal::get_default_in "[INTERNAL]
Get default input value.

";

%feature("docstring") casadi::GenericExternal::check_res "[INTERNAL]  Check
if output arguments have correct length and dimensions.

";

%feature("docstring") casadi::GenericExternal::memory "[INTERNAL]  Memory
objects.

";

%feature("docstring") casadi::GenericExternal::call_forward "[INTERNAL]
Forward mode AD, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::GenericExternal::numel_in "[INTERNAL]  Number
of input/output elements.

";

%feature("docstring") casadi::GenericExternal::getAtomicOutput "

[DEPRECATED] Renamed instruction_output

";

%feature("docstring") casadi::GenericExternal::get_function "[INTERNAL] ";

%feature("docstring") casadi::GenericExternal::sz_res "[INTERNAL]  Get
required length of res field.

";

%feature("docstring") casadi::GenericExternal::get_reverse "[INTERNAL]
Reverse mode derivatives.

";

%feature("docstring") casadi::GenericExternal::print_dimensions "[INTERNAL]
Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::GenericExternal::info "[INTERNAL]  Obtain
information about function

";

%feature("docstring") casadi::GenericExternal::GenericExternal "[INTERNAL]
Constructor.

";

%feature("docstring") casadi::GenericExternal::call_reverse "[INTERNAL]
Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::GenericExternal::sp_reverse "[INTERNAL]
Propagate sparsity backwards.

";

%feature("docstring") casadi::GenericExternal::alloc_arg "[INTERNAL]
Ensure required length of arg field.

";

%feature("docstring") casadi::GenericExternal::jit_dependencies "[INTERNAL]
Jit dependencies.

";

%feature("docstring") casadi::GenericExternal::eval_mx "[INTERNAL]
Evaluate with symbolic matrices.

";

%feature("docstring") casadi::GenericExternal::nnz_in "[INTERNAL]  Number
of input/output nonzeros.

";

%feature("docstring") casadi::GenericExternal::n_nodes "[INTERNAL]  Number
of nodes in the algorithm.

";

%feature("docstring") casadi::GenericExternal::forward "[INTERNAL]  Return
function that calculates forward derivatives forward(nfwd) returns a cached
instance if available, and calls  Function get_forward(int nfwd) if no
cached version is available.

";

%feature("docstring") casadi::GenericExternal::alloc_res "[INTERNAL]
Ensure required length of res field.

";

%feature("docstring") casadi::GenericExternal::print_option "[INTERNAL]
Print all information there is to know about a certain option.

";

%feature("docstring") casadi::GenericExternal::codegen_meta "[INTERNAL]
Generate meta-information allowing a user to evaluate a generated function.

";

%feature("docstring") casadi::GenericExternal::sz_iw "[INTERNAL]  Get
required length of iw field.

";

%feature("docstring") casadi::GenericExternal::instruction_MX "[INTERNAL]
get MX expression associated with instruction

";

%feature("docstring") casadi::GenericExternal::getCount "[INTERNAL]  Get
the reference count.

";

%feature("docstring") casadi::GenericExternal::sx_out "[INTERNAL]  Get
function input(s) and output(s)

";

%feature("docstring") casadi::GenericExternal::instruction_id "[INTERNAL]
Get an atomic operation operator index.

";

%feature("docstring") casadi::GenericExternal::clear_mem "[INTERNAL]  Clear
all memory (called from destructor)

";

%feature("docstring") casadi::GenericExternal::definition "[INTERNAL]  Get
function signature: name:(inputs)->(outputs)

";

%feature("docstring") casadi::GenericExternal::get_name_out "[INTERNAL]
Names of function input and outputs.

";

%feature("docstring") casadi::GenericExternal::eval_dm "[INTERNAL]
Evaluate with DM matrices.

";

%feature("docstring") casadi::GenericExternal::get_jacobian "[INTERNAL]
Full Jacobian.

";

%feature("docstring") casadi::GenericExternal::replace_res "[INTERNAL]
Replace 0-by-0 outputs.

";

%feature("docstring") casadi::GenericExternal::size1_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::GenericExternal::mx_in "[INTERNAL]  Get
function input(s) and output(s)

";

%feature("docstring") casadi::GenericExternal::free_sx "[INTERNAL]  Get
free variables (SX)

";

%feature("docstring") casadi::GenericExternal::has_function "[INTERNAL] ";

%feature("docstring") casadi::GenericExternal::release "[INTERNAL]  Release
a memory object.

";

%feature("docstring") casadi::GenericExternal::call "[INTERNAL]   Call a
function, templated.

";

%feature("docstring") casadi::GenericExternal::fwdViaJac "[INTERNAL]
Calculate derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::GenericExternal::finalize "[INTERNAL]
Finalize the object creation.

";

%feature("docstring") casadi::GenericExternal::get_max_in "[INTERNAL]  Get
largest input value.

";

%feature("docstring") casadi::GenericExternal::factory "[INTERNAL] ";

%feature("docstring") casadi::GenericExternal::slice "[INTERNAL]  returns a
new function with a selection of inputs/outputs of the original

";

%feature("docstring") casadi::GenericExternal::signature "[INTERNAL]  Code
generate the function.

";

%feature("docstring") casadi::GenericExternal::sz_w "[INTERNAL]  Get
required length of w field.

";

%feature("docstring") casadi::GenericExternal::fwd_seed "[INTERNAL]
Symbolic expressions for the forward seeds.

";

%feature("docstring") casadi::GenericExternal::generate_dependencies "[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring") casadi::GenericExternal::instruction_input "[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::GenericExternal::alloc "[INTERNAL]  Ensure
work vectors long enough to evaluate function.

";

%feature("docstring") casadi::GenericExternal::reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::GenericExternal::get_partition "[INTERNAL]
Get the unidirectional or bidirectional partition.

";

%feature("docstring") casadi::GenericExternal::get_abstol "[INTERNAL]  Get
absolute tolerance.

";

%feature("docstring") casadi::GenericExternal::n_instructions "[INTERNAL]
Get the number of atomic operations.

";

%feature("docstring") casadi::GenericExternal::sprint "[INTERNAL]  C-style
formatted printing to string.

";

%feature("docstring") casadi::GenericExternal::get_options "[INTERNAL]
Options.

";

%feature("docstring")
casadi::GenericExternal::getJacSparsityHierarchicalSymm "[INTERNAL]  A
flavor of getJacSparsity that does hierarchical block structure recognition
for symmetric Jacobians

";

%feature("docstring") casadi::GenericExternal::adjViaJac "[INTERNAL]
Calculate derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::GenericExternal::alloc_w "[INTERNAL]  Ensure
required length of w field.

";

%feature("docstring") casadi::GenericExternal::ad_weight "[INTERNAL]
Weighting factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::GenericExternal::check_arg "[INTERNAL]  Check
if input arguments have correct length and dimensions.

";

%feature("docstring") casadi::GenericExternal::get_forward "[INTERNAL]
Forward mode derivatives.

";

%feature("docstring") casadi::GenericExternal::codegen_body "[INTERNAL]
Generate code for the body of the C function.

";

%feature("docstring") casadi::GenericExternal::matching_arg "[INTERNAL]
Check if input arguments that needs to be replaced.

";

%feature("docstring") casadi::GenericExternal::sz_work "[INTERNAL]  Get
number of temporary variables needed.

";

%feature("docstring") casadi::GenericExternal::eval_sx "[INTERNAL]
Evaluate with symbolic scalars.

";

%feature("docstring") casadi::GenericExternal::self "[INTERNAL]  Get a
public class instance.

";

%feature("docstring") casadi::GenericExternal::getAtomicInput "

[DEPRECATED] Renamed instruction_index

";

%feature("docstring") casadi::GenericExternal::get_stats "[INTERNAL]  Get
all statistics.

";

%feature("docstring") casadi::GenericExternal::has_free "[INTERNAL]  Does
the function have free variables.

";

%feature("docstring") casadi::GenericExternal::wrap "[INTERNAL]  Wrap in an
Function instance consisting of only one MX call.

";

%feature("docstring") casadi::GenericExternal::codegen_name "[INTERNAL]
Get name in codegen.

";

%feature("docstring") casadi::GenericExternal::init_mem "[INTERNAL]
Initalize memory block.

";

%feature("docstring") casadi::GenericExternal::sx_in "[INTERNAL]  Get
function input(s) and output(s)

";

%feature("docstring") casadi::GenericExternal::has_reverse "[INTERNAL]
Reverse mode derivatives.

";

%feature("docstring") casadi::GenericExternal::disp_more "[INTERNAL]  Print
more.

";

%feature("docstring") casadi::GenericExternal::size1_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::GenericExternal::alloc_iw "[INTERNAL]  Ensure
required length of iw field.

";

%feature("docstring") casadi::GenericExternal::get_n_out "[INTERNAL]
Number of function inputs and outputs.

";

%feature("docstring") casadi::GenericExternal::which_depends "[INTERNAL]
Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::GenericExternal::codegen "[INTERNAL]
Generate code the function.

";

%feature("docstring") casadi::GenericExternal::codegen_decref "[INTERNAL]
Codegen decref for dependencies.

";

%feature("docstring") casadi::GenericExternal::free_mx "[INTERNAL]  Get
free variables ( MX)

";

%feature("docstring") casadi::GenericExternal::replace_aseed "[INTERNAL]
Replace 0-by-0 reverse seeds.

";

%feature("docstring") casadi::GenericExternal::get_name_in "[INTERNAL]
Names of function input and outputs.

";

%feature("docstring") casadi::GenericExternal::size2_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::GenericExternal::get_sparsity_in "[INTERNAL]
Retreive sparsities.

";

%feature("docstring") casadi::GenericExternal::has_spfwd "[INTERNAL]  Is
the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::GenericExternal "[INTERNAL] C++ includes:
external_impl.hpp ";

%feature("docstring") casadi::GenericExternal::get_free "[INTERNAL]  Print
free variables.

";

%feature("docstring") casadi::GenericExternal::sparsity_jac "[INTERNAL]
Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::GenericExternal::set_temp "[INTERNAL]  Set
the (temporary) work vectors.

";

%feature("docstring") casadi::GenericExternal::get_n_in "[INTERNAL]  Number
of function inputs and outputs.

";

%feature("docstring") casadi::GenericExternal::eval "[INTERNAL]  Evaluate
numerically.

";

%feature("docstring") casadi::GenericExternal::uses_output "[INTERNAL]  Do
the derivative functions need nondifferentiated outputs?

";

%feature("docstring") casadi::GenericExternal::instruction_output "[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::GenericExternal::sp_forward "[INTERNAL]
Propagate sparsity forward.

";

%feature("docstring") casadi::GenericExternal::mx_out "[INTERNAL]  Get
function input(s) and output(s)

";

%feature("docstring") casadi::GenericExternal::getJacSparsityGen "[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring") casadi::GenericExternal::is_a "[INTERNAL]  Check if
the function is of a particular type.

";

%feature("docstring") casadi::GenericExternal::setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";

%feature("docstring") casadi::GenericExternal::print "[INTERNAL]  C-style
formatted printing during evaluation.

";

%feature("docstring") casadi::GenericExternal::free_mem "[INTERNAL]  Free
memory block.

";

%feature("docstring") casadi::GenericExternal::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::GenericExternal::size2_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::GenericExternal::instruction_constant "[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::GenericExternal::init "[INTERNAL]
Initialize.

";

%feature("docstring") casadi::GenericExternal::sz_arg "[INTERNAL]  Get
required length of arg field.

";

%feature("docstring") casadi::GenericExternal::replace_arg "[INTERNAL]
Replace 0-by-0 inputs.

";


// File: classcasadi_1_1GenericMatrix.xml


/*  Construct symbolic primitives  */

/* The \"sym\" function is intended to work in a similar way as \"sym\" used
in the Symbolic Toolbox for Matlab but instead creating a CasADi symbolic
primitive.

*/ %feature("docstring") friendwrap_sum2 "

Return a column-wise summation of elements.

";

%feature("docstring") friendwrap_sum1 "

Return a row-wise summation of elements.

";

%feature("docstring") friendwrap_mrdivide "

Matrix divide (cf. slash '/' in MATLAB)

";

%feature("docstring") friendwrap_if_else "

Branching on MX nodes Ternary operator, \"cond ? if_true : if_false\".

";

%feature("docstring") friendwrap_tril2symm "

Convert a lower triangular matrix to a symmetric one.

";

%feature("docstring") friendwrap_det "

Matrix determinant (experimental)

";

%feature("docstring") casadi::GenericMatrix::nnz_diag "

Get get the number of non-zeros on the diagonal.

";

%feature("docstring") friendwrap_conditional "

Create a switch.

If the condition

Parameters:
-----------

ind:  evaluates to the integer k, where 0<=k<f.size(), then x[k] will be
returned, otherwise

x_default:  will be returned.

";

%feature("docstring") friendwrap_pinv "

>  MatType pinv(const MatType &A)
------------------------------------------------------------------------

Computes the Moore-Penrose pseudo-inverse.

If the matrix A is fat (size1<size2), mul(A, pinv(A)) is unity.

pinv(A)' = (AA')^(-1) A

If the matrix A is slender (size1>size2), mul(pinv(A), A) is unity.

pinv(A) = (A'A)^(-1) A'

>  MatType pinv(const MatType &A, const std::string &lsolver, const Dict &dict=Dict())
------------------------------------------------------------------------

Computes the Moore-Penrose pseudo-inverse.

If the matrix A is fat (size1>size2), mul(A, pinv(A)) is unity. If the
matrix A is slender (size2<size1), mul(pinv(A), A) is unity.

";

%feature("docstring") friendwrap_solve "

>  MatType solve(const MatType &A, const MatType &b)
------------------------------------------------------------------------

Solve a system of equations: A*x = b The solve routine works similar to
Matlab's backslash when A is square and nonsingular. The algorithm used is
the following:

A simple forward or backward substitution if A is upper or lower triangular

If the linear system is at most 3-by-3, form the inverse via minor expansion
and multiply

Permute the variables and equations as to get a (structurally) nonzero
diagonal, then perform a QR factorization without pivoting and solve the
factorized system.

Note 1: If there are entries of the linear system known to be zero, these
will be removed. Elements that are very small, or will evaluate to be zero,
can still cause numerical errors, due to the lack of pivoting (which is not
possible since cannot compare the size of entries)

Note 2: When permuting the linear system, a BLT (block lower triangular)
transformation is formed. Only the permutation part of this is however used.
An improvement would be to solve block-by-block if there are multiple BLT
blocks.

>  MatType solve(const MatType &A, const MatType &b, const std::string &lsolver, const Dict &dict=Dict())
------------------------------------------------------------------------

Solve a system of equations: A*x = b.

";

%feature("docstring") friendwrap_interp1d "

Performs 1d linear interpolation.

The data-points to be interpolated are given as (x[i], v[i]). xq[j] is used
as interplating value

";

%feature("docstring") casadi::GenericMatrix::get_row "

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring") friendwrap_print_operator "

Get a string representation for a binary MatType, using custom arguments.

";

%feature("docstring") friendwrap_linearize "

Linearize an expression.

";

%feature("docstring") friendwrap_jacobian "

Calculate Jacobian.

";

%feature("docstring") casadi::GenericMatrix::is_dense "

Check if the matrix expression is dense.

";

%feature("docstring") casadi::GenericMatrix::nnz_lower "

Get the number of non-zeros in the lower triangular half.

";

%feature("docstring") casadi::GenericMatrix::rank1 "

Make a rank-1 update to a matrix A Calculates A + 1/2 * alpha * x*y'.

";

%feature("docstring") casadi::GenericMatrix::gradient "

Functions called by friend functions defined here

";

%feature("docstring") friendwrap_n_nodes "

Count number of nodes

";

%feature("docstring") friendwrap_hessian "";

%feature("docstring") friendwrap_nullspace "

Computes the nullspace of a matrix A.

Finds Z m-by-(m-n) such that AZ = 0 with A n-by-m with m > n

Assumes A is full rank

Inspired by Numerical Methods in Scientific Computing by Ake Bjorck

";

%feature("docstring") friendwrap_substitute_inplace "

Inplace substitution with piggyback expressions Substitute variables v out
of the expressions vdef sequentially, as well as out of a number of other
expressions piggyback.

";

%feature("docstring") friendwrap_mmax "

Largest element in a matrix.

";

%feature("docstring") casadi::GenericMatrix::is_scalar "

Check if the matrix expression is scalar.

";

%feature("docstring") casadi::GenericMatrix::columns "

Get the number of columns, Octave-style syntax.

";

%feature("docstring") friendwrap_mmin "

Smallest element in a matrix.

";

%feature("docstring") casadi::GenericMatrix::is_column "

Check if the matrix is a column vector (i.e. size2()==1)

";

%feature("docstring") friendwrap_skew "

Generate a skew symmetric matrix from a 3-vector.

";

%feature("docstring") casadi::GenericMatrix::is_tril "

Check if the matrix is lower triangular.

";

%feature("docstring") casadi::GenericMatrix::colind "

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring") casadi::GenericMatrix::is_triu "

Check if the matrix is upper triangular.

";

%feature("docstring") friendwrap_gradient "

Calculate Jacobian.

";

%feature("docstring") friendwrap_unite "

Unite two matrices no overlapping sparsity.

";

%feature("docstring") casadi::GenericMatrix::dim "

Get string representation of dimensions. The representation is e.g. \"4x5\"
or \"4x5,10nz\".

";

%feature("docstring") friendwrap_sum_square "

[DEPRECATED] Renamed sumsqr

";

%feature("docstring") friendwrap_inv "

Matrix inverse.

";

%feature("docstring") casadi::GenericMatrix::size1 "

Get the first dimension (i.e. number of rows)

";

%feature("docstring") casadi::GenericMatrix::size2 "

Get the second dimension (i.e. number of columns)

";

%feature("docstring") friendwrap_norm_1 "

1-norm

";

%feature("docstring") friendwrap_norm_2 "

2-norm

";

%feature("docstring") friendwrap_forward "

Forward directional derivative.

";

%feature("docstring") friendwrap_diag "

Get the diagonal of a matrix or construct a diagonal When the input is
square, the diagonal elements are returned. If the input is vector- like, a
diagonal matrix is constructed with it.

";

%feature("docstring") friendwrap_project "

Create a new matrix with a given sparsity pattern but with the nonzeros
taken from an existing matrix.

";

%feature("docstring") friendwrap_jtimes "

Calculate the Jacobian and multiply by a vector from the right This is
equivalent to mul(jacobian(ex, arg), v) or mul(jacobian(ex, arg).T, v) for
tr set to false and true respectively. If contrast to these expressions, it
will use directional derivatives which is typically (but not necessarily)
more efficient if the complete Jacobian is not needed and v has few rows.

";

%feature("docstring") friendwrap_substitute "

>  MatType substitute(const MatType &ex, const MatType &v, const MatType &vdef)
------------------------------------------------------------------------

Substitute variable v with expression vdef in an expression ex.

>  std::vector<MatType> substitute(const std::vector< MatType > &ex, const std::vector< MatType > &v, const std::vector< MatType > &vdef)
------------------------------------------------------------------------

Substitute variable var with expression expr in multiple expressions.

";

%feature("docstring") casadi::GenericMatrix::bilin "

Calculate bilinear form x^T A y.

";

%feature("docstring") friendwrap_mldivide "

Matrix divide (cf. backslash '\\\\' in MATLAB)

";

%feature("docstring") casadi::GenericMatrix::get_colind "

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring") friendwrap_cross "

Matlab's cross command.

";

%feature("docstring") friendwrap_shared "

Extract shared subexpressions from an set of expressions.

";

%feature("docstring") casadi::GenericMatrix::is_empty "

Check if the sparsity is empty, i.e. if one of the dimensions is zero (or
optionally both dimensions)

";

%feature("docstring") casadi::GenericMatrix::is_row "

Check if the matrix is a row vector (i.e. size1()==1)

";

%feature("docstring") friendwrap_rank1 "

Make a rank-1 update to a matrix A Calculates A + 1/2 * alpha * x*y'.

";

%feature("docstring") friendwrap_inv_skew "

Generate the 3-vector progenitor of a skew symmetric matrix.

";

%feature("docstring") friendwrap_tangent "

Calculate Jacobian.

";

%feature("docstring") casadi::GenericMatrix::is_square "

Check if the matrix expression is square.

";

%feature("docstring") friendwrap_bilin "

Calculate bilinear form x^T A y.

";

%feature("docstring") casadi::GenericMatrix::jtimes "

Functions called by friend functions defined here

";

%feature("docstring") friendwrap_simplify "

Simplify an expression.

";

%feature("docstring") casadi::GenericMatrix::numel "

Get the number of elements.

";

%feature("docstring") friendwrap_which_depends "

Find out which variables enter with some order.

";

%feature("docstring") friendwrap_linspace "

Matlab's linspace command.

";

%feature("docstring") casadi::GenericMatrix::nnz "

Get the number of (structural) non-zero elements.

";

%feature("docstring") casadi::GenericMatrix::sym "

>  static MatType casadi::GenericMatrix< MatType >::sym(const std::string &name, int nrow=1, int ncol=1)
------------------------------------------------------------------------

Create an nrow-by-ncol symbolic primitive.

>  static MatType casadi::GenericMatrix< MatType >::sym(const std::string &name, const std::pair< int, int > &rc)
------------------------------------------------------------------------

Construct a symbolic primitive with given dimensions.

>  static MatType casadi::GenericMatrix< MatType >::sym(const std::string &name, const Sparsity &sp)
------------------------------------------------------------------------

Create symbolic primitive with a given sparsity pattern.

>  std::vector< MatType > casadi::GenericMatrix< MatType >::sym(const std::string &name, const Sparsity &sp, int p)
------------------------------------------------------------------------

Create a vector of length p with with matrices with symbolic primitives of
given sparsity.

>  static std::vector<MatType > casadi::GenericMatrix< MatType >::sym(const std::string &name, int nrow, int ncol, int p)
------------------------------------------------------------------------

Create a vector of length p with nrow-by-ncol symbolic primitives.

>  std::vector< std::vector< MatType > > casadi::GenericMatrix< MatType >::sym(const std::string &name, const Sparsity &sp, int p, int r)
------------------------------------------------------------------------

Create a vector of length r of vectors of length p with symbolic primitives
with given sparsity.

>  static std::vector<std::vector<MatType> > casadi::GenericMatrix< MatType >::sym(const std::string &name, int nrow, int ncol, int p, int r)
------------------------------------------------------------------------

Create a vector of length r of vectors of length p with nrow-by-ncol
symbolic primitives.

";

%feature("docstring") casadi::GenericMatrix::row "

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring") friendwrap_inv_minor "

Matrix inverse (experimental)

";

%feature("docstring") casadi::GenericMatrix::nnz_upper "

Get the number of non-zeros in the upper triangular half.

";

%feature("docstring") casadi::GenericMatrix::sparsity "

Get the sparsity pattern.

";

%feature("docstring") friendwrap_norm_inf "

Infinity-norm.

";

%feature("docstring") casadi::GenericMatrix::mpower "

Functions called by friend functions defined here

";

%feature("docstring") friendwrap_trace "

Matrix trace.

";

%feature("docstring") friendwrap_einstein "

>  MatType einstein(const MatType &A, const MatType &B, const MatType &C, const std::vector< int > &dim_a, const std::vector< int > &dim_b, const std::vector< int > &dim_c, const std::vector< int > &a, const std::vector< int > &b, const std::vector< int > &c)
------------------------------------------------------------------------

Compute any contraction of two dense tensors, using index/einstein notation
einstein(A, B, a, b, c) -> C.

Given two tensors, A and B, computes a third tensor C such that:

C_c = A_a * B_b

With a, b, c representing einstein indices. Instead of the classical index
labels i,j,k,... we employ -1,-2,-3,...

A, B, C are represented as CasADi vectors, with dim_a, dim_b, dim_c
indictating theire tensorial dimensions.

>  MatType einstein(const MatType &A, const MatType &B, const std::vector< int > &dim_a, const std::vector< int > &dim_b, const std::vector< int > &dim_c, const std::vector< int > &a, const std::vector< int > &b, const std::vector< int > &c)
------------------------------------------------------------------------

Performs 1d linear interpolation.

The data-points to be interpolated are given as (x[i], v[i]). xq[j] is used
as interplating value

";

%feature("docstring") friendwrap_repsum "

Given a repeated matrix, computes the sum of repeated parts.

";

%feature("docstring") friendwrap_dot "

Inner product of two matrices with x and y matrices of the same dimension.

";

%feature("docstring") casadi::GenericMatrix::size "

>  std::pair<int, int> casadi::GenericMatrix< MatType >::size() const 
------------------------------------------------------------------------

Get the shape.

>  int casadi::GenericMatrix< MatType >::size(int axis) const 
------------------------------------------------------------------------

Get the size along a particular dimensions.

";

%feature("docstring") casadi::GenericMatrix "

Matrix base class.

This is a common base class for MX and Matrix<>, introducing a uniform
syntax and implementing common functionality using the curiously recurring
template pattern (CRTP) idiom.  The class is designed with the idea that
\"everything is a matrix\", that is, also scalars and vectors. This
philosophy makes it easy to use and to interface in particularly with Python
and Matlab/Octave.  The syntax tries to stay as close as possible to the
ublas syntax when it comes to vector/matrix operations.  Index starts with
0. Index vec happens as follows: (rr, cc) -> k = rr+cc*size1() Vectors are
column vectors.  The storage format is Compressed Column Storage (CCS),
similar to that used for sparse matrices in Matlab, but unlike this format,
we do allow for elements to be structurally non-zero but numerically zero.
The sparsity pattern, which is reference counted and cached, can be accessed
with Sparsity& sparsity() Joel Andersson

C++ includes: generic_matrix.hpp ";

%feature("docstring") casadi::GenericMatrix::tangent "

Functions called by friend functions defined here

";

%feature("docstring") friendwrap_polyval "

Evaluate a polynomial with coefficients p in x.

";

%feature("docstring") friendwrap_triu2symm "

Convert a upper triangular matrix to a symmetric one.

";

%feature("docstring") friendwrap_depends_on "

Check if expression depends on the argument The argument must be symbolic.

";

%feature("docstring") friendwrap_symvar "

Get all symbols contained in the supplied expression Get all symbols on
which the supplied expression depends.

See:  SXFunction::getFree(), MXFunction::getFree()

";

%feature("docstring") casadi::GenericMatrix::is_vector "

Check if the matrix is a row or column vector.

";

%feature("docstring") friendwrap_mpower "

Matrix power x^n.

";

%feature("docstring") friendwrap_norm_fro "

Frobenius norm.

";

%feature("docstring") friendwrap_sumsqr "

Calculate sum of squares: sum_ij X_ij^2.

";

%feature("docstring") casadi::GenericMatrix::zeros "

Create a dense matrix or a matrix with specified sparsity with all entries
zero.

";

%feature("docstring") friendwrap_reverse "

Reverse directional derivative.

";

%feature("docstring") friendwrap_expm_const "";

%feature("docstring") friendwrap_expm "";

%feature("docstring") casadi::GenericMatrix::rows "

Get the number of rows, Octave-style syntax.

";

%feature("docstring") friendwrap_densify "

>  MatType densify(const MatType &x)
------------------------------------------------------------------------

Make the matrix dense if not already.

>  MatType densify(const MatType &x, const MatType &val)
------------------------------------------------------------------------

Make the matrix dense and assign nonzeros to a value.

";

%feature("docstring") casadi::GenericMatrix::linearize "

Functions called by friend functions defined here

";

%feature("docstring") casadi::GenericMatrix::ones "

Create a dense matrix or a matrix with specified sparsity with all entries
one.

";


// File: classcasadi_1_1GenericType.xml
%feature("docstring") casadi::GenericType "

Generic data type, can hold different types such as bool, int, string etc.

Joel Andersson

C++ includes: generic_type.hpp ";


// File: classcasadi_1_1GenericTypeBase.xml
%feature("docstring") casadi::GenericTypeBase::~GenericTypeBase "[INTERNAL]
";

%feature("docstring") casadi::GenericTypeBase::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::GenericTypeBase::class_name "[INTERNAL]
Readable name of the internal class.

";

%feature("docstring") casadi::GenericTypeBase::getType "[INTERNAL] ";

%feature("docstring") casadi::GenericTypeBase::disp "[INTERNAL]  Print a
description of the object.

";

%feature("docstring") casadi::GenericTypeBase::getCount "[INTERNAL]  Get
the reference count.

";

%feature("docstring") casadi::GenericTypeBase "[INTERNAL] C++ includes:
generic_type_internal.hpp ";


// File: classcasadi_1_1GetElements.xml


// File: classcasadi_1_1GetNonzeros.xml


// File: classcasadi_1_1GetNonzerosSlice.xml


// File: classcasadi_1_1GetNonzerosSlice2.xml


// File: classcasadi_1_1GetNonzerosVector.xml


// File: classcasadi_1_1GlobalOptions.xml
%feature("docstring") casadi::GlobalOptions "

Collects global CasADi options.

Note to developers: use sparingly. Global options are - in general - a
rather bad idea

this class must never be instantiated. Access its static members directly
Joris Gillis

C++ includes: global_options.hpp ";


// File: classcasadi_1_1Horzcat.xml


// File: classcasadi_1_1HorzRepmat.xml


// File: classcasadi_1_1HorzRepsum.xml


// File: classcasadi_1_1Horzsplit.xml


// File: classcasadi_1_1ImplicitFixedStepIntegrator.xml
%feature("docstring") casadi::ImplicitFixedStepIntegrator::memory "[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::set_work "[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::disp_more "[INTERNAL]  Print more.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::call_gen "[INTERNAL]   Call a function, overloaded.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::class_name "[INTERNAL]  Readable name of the internal class.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::fwdViaJac "[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::init "[INTERNAL]
Initialize stage.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::index_in "[INTERNAL]  Get input scheme index by name.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::instruction_input
"[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::setStopTime "[INTERNAL]  Set stop time for the integration.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::getCount "[INTERNAL]  Get the reference count.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::has_derivative "[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::codegen_meta "[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::has_sprev "[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::sp_weight "[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::replace_fseed "[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")
casadi::ImplicitFixedStepIntegrator::getDerivativeOptions "[INTERNAL]  Set
solver specific options to generated augmented integrators.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::has_jacobian "[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::export_code "[INTERNAL]  Export function in a specific language.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::sx_out "[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::print_option "[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::matching_arg "[INTERNAL]  Check if input arguments that needs to be replaced.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::jit_dependencies
"[INTERNAL]  JIT for dependencies.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::advance "[INTERNAL]  Advance solution in time.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::eval_mx "[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")
casadi::ImplicitFixedStepIntegrator::get_jacobian_sparsity "[INTERNAL]  Get
Jacobian sparsity.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::print_fstats "[INTERNAL]  Print statistics.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::get_sparsity_in "[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::sp_forward "[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::nnz_in "[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::forward "[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(int nfwd) if no cached version is available.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::release "[INTERNAL]  Release a memory object.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::get_stats "[INTERNAL]  Get all statistics.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::alloc_iw "[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::call "[INTERNAL]
Call a function, templated.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::index_out "[INTERNAL]  Get output scheme index by name.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::get_free "[INTERNAL]  Print free variables.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::size1_in "[INTERNAL]  Input/output dimensions.

";

%feature("docstring")
casadi::ImplicitFixedStepIntegrator::instruction_constant "[INTERNAL]  Get
the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::alloc_mem "[INTERNAL]  Create memory block.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::get_partition "[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::sp_reverse "[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::ad_weight "[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::matching_res "[INTERNAL]  Check if output arguments that needs to be replaced.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::set_function "[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::codegen_body "[INTERNAL]  Generate code for the function body.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator "

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| augmented_option | OT_DICT         | Options to be    | casadi::Implicit |
| s                |                 | passed down to   | FixedStepIntegra |
|                  |                 | the augmented    | tor              |
|                  |                 | integrator, if   |                  |
|                  |                 | one is           |                  |
|                  |                 | constructed.     |                  |
+------------------+-----------------+------------------+------------------+
| common_options   | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | auto-generated   | nction           |
|                  |                 | functions        |                  |
+------------------+-----------------+------------------+------------------+
| expand           | OT_BOOL         | Replace MX with  | casadi::Implicit |
|                  |                 | SX expressions   | FixedStepIntegra |
|                  |                 | in problem       | tor              |
|                  |                 | formulation      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| grid             | OT_DOUBLEVECTOR | Time grid        | casadi::Implicit |
|                  |                 |                  | FixedStepIntegra |
|                  |                 |                  | tor              |
+------------------+-----------------+------------------+------------------+
| monitor          | OT_STRINGVECTOR | Set of user      | casadi::OracleFu |
|                  |                 | problem          | nction           |
|                  |                 | functions to be  |                  |
|                  |                 | monitored        |                  |
+------------------+-----------------+------------------+------------------+
| number_of_finite | OT_INT          | Number of finite | casadi::Implicit |
| _elements        |                 | elements         | FixedStepIntegra |
|                  |                 |                  | tor              |
+------------------+-----------------+------------------+------------------+
| output_t0        | OT_BOOL         | Output the state | casadi::Implicit |
|                  |                 | at the initial   | FixedStepIntegra |
|                  |                 | time             | tor              |
+------------------+-----------------+------------------+------------------+
| print_stats      | OT_BOOL         | Print out        | casadi::Implicit |
|                  |                 | statistics after | FixedStepIntegra |
|                  |                 | integration      | tor              |
+------------------+-----------------+------------------+------------------+
| rootfinder       | OT_STRING       | An implicit      | casadi::Implicit |
|                  |                 | function solver  | FixedStepIntegra |
|                  |                 |                  | tor              |
+------------------+-----------------+------------------+------------------+
| rootfinder_optio | OT_DICT         | Options to be    | casadi::Implicit |
| ns               |                 | passed to the    | FixedStepIntegra |
|                  |                 | NLP Solver       | tor              |
+------------------+-----------------+------------------+------------------+
| specific_options | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | specific auto-   | nction           |
|                  |                 | generated        |                  |
|                  |                 | functions,       |                  |
|                  |                 | overwriting the  |                  |
|                  |                 | defaults from    |                  |
|                  |                 | common_options.  |                  |
|                  |                 | Nested           |                  |
|                  |                 | dictionary.      |                  |
+------------------+-----------------+------------------+------------------+
| t0               | OT_DOUBLE       | Beginning of the | casadi::Implicit |
|                  |                 | time horizon     | FixedStepIntegra |
|                  |                 |                  | tor              |
+------------------+-----------------+------------------+------------------+
| tf               | OT_DOUBLE       | End of the time  | casadi::Implicit |
|                  |                 | horizon          | FixedStepIntegra |
|                  |                 |                  | tor              |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: integrator_impl.hpp ";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::alloc "[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::codegen_incref "[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::weak "[INTERNAL]
Get a weak reference to the object.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::get_reltol "[INTERNAL]  Get relative tolerance.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::q "[INTERNAL] ";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::p "[INTERNAL] ";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::size2_out "[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::t "[INTERNAL] ";

%feature("docstring")
casadi::ImplicitFixedStepIntegrator::~ImplicitFixedStepIntegrator "[INTERNAL]  Destructor.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::z "[INTERNAL] ";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::x "[INTERNAL] ";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::disp "[INTERNAL]
Display object.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::sz_w "[INTERNAL]
Get required length of w field.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::all_scalar "[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::reset "[INTERNAL]  Reset the forward problem.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::alloc_w "[INTERNAL]  Ensure required length of w field.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::slice "[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::check_arg "[INTERNAL]  Check if input arguments have correct length and dimensions.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::mx_out "[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")
casadi::ImplicitFixedStepIntegrator::instruction_output "[INTERNAL]  Get
the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::size2_in "[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::getJacSparsityGen
"[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::sx_in "[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::info "[INTERNAL]
Obtain information about function

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::get_n_out "[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::has_free "[INTERNAL]  Does the function have free variables.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::print_stats "[INTERNAL]  Print solver statistics.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::finalize "[INTERNAL]  Finalize initialization.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::sz_iw "[INTERNAL]  Get required length of iw field.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::generate_lifted "[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::checkout "[INTERNAL]  Checkout a memory object.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::sparsity_jac "[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::get_function "[INTERNAL] ";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::free_mem "[INTERNAL]  Free memory block.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::eval_gen "

>  int casadi::FunctionInternal::eval_gen(const double **arg, double **res, int *iw, double *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate numerically.

>  int casadi::FunctionInternal::eval_gen(const SXElem **arg, SXElem **res, int *iw, SXElem *w, void *mem) const

>  int casadi::FunctionInternal::eval_gen(const bvec_t **arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::getExplicitB "[INTERNAL]  Get explicit dynamics (backward problem)

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::n_instructions "[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::get_sparsity_out
"[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")
casadi::ImplicitFixedStepIntegrator::codegen_sparsities "[INTERNAL]
Codegen sparsities.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::print "[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::has_forward "[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::n_nodes "[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::has_codegen "[INTERNAL]  Is codegen supported?

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::instruction_MX "[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::wrap "[INTERNAL]
Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::print_dimensions
"[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::get_options "[INTERNAL]  Options.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::fwd_seed "[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::codegen_decref "[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::getJacSparsity "[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::getAtomicOutput "

[DEPRECATED] Renamed instruction_output

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::codegen "[INTERNAL]  Generate code the function.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::free_sx "[INTERNAL]  Get free variables (SX)

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::size1_out "[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::setupFG "[INTERNAL]  Setup F and G.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::eval_sx "[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::monitored "[INTERNAL] ";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::sz_arg "[INTERNAL]  Get required length of arg field.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::getExplicit "[INTERNAL]  Get explicit dynamics.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::get_name_out "[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")
casadi::ImplicitFixedStepIntegrator::getJacSparsityHierarchicalSymm "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")
casadi::ImplicitFixedStepIntegrator::getJacSparsityHierarchical "[INTERNAL]
A flavor of getJacSparsity that does hierarchical block structure
recognition.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::aug_fwd "[INTERNAL]  Generate a augmented DAE system with nfwd forward sensitivities.

";

%feature("docstring")
casadi::ImplicitFixedStepIntegrator::codegen_declarations "[INTERNAL]
Generate code for the declarations of the C function.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::which_depends "[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::oracle "[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::get_max_in "[INTERNAL]  Get largest input value.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::adjViaJac "[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")
casadi::ImplicitFixedStepIntegrator::generate_dependencies "[INTERNAL]
Export / Generate C code for the generated functions.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::definition "[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::factory "[INTERNAL] ";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::replace_aseed "[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::sz_res "[INTERNAL]  Get required length of res field.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::self "[INTERNAL]
Get a public class instance.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::check_res "[INTERNAL]  Check if output arguments have correct length and dimensions.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::nnz_out "[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::signature "[INTERNAL]  Code generate the function.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::expand "[INTERNAL] ";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::print_options "[INTERNAL]  Print list of options.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::plugin_name "[INTERNAL] ";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::get_min_in "[INTERNAL]  Get smallest input value.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::eval "[INTERNAL]
evaluate

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::symbolic_output "[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::mapsum_mx "[INTERNAL]  Parallel evaluation.

";

%feature("docstring")
casadi::ImplicitFixedStepIntegrator::getAdaptorSolverName "[INTERNAL]
Obtain solver name from Adaptor.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::has_function "[INTERNAL] ";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::get_abstol "[INTERNAL]  Get absolute tolerance.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::call_reverse "[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::free_mx "[INTERNAL]  Get free variables ( MX)

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::get_default_in "[INTERNAL]  Get default input value.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::alloc_res "[INTERNAL]  Ensure required length of res field.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::sz_work "[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::getAtomicInput "

[DEPRECATED] Renamed instruction_index

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::init_mem "[INTERNAL]  Initalize memory block.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::get_jacobian "[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::setup "[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::construct "[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::reverse "[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(int nadj) if no cached version is available.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::retreat "[INTERNAL]  Retreat solution in time.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::replace_arg "[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::numel_in "[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::set_temp "[INTERNAL]  Set the work vectors.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::is_a "[INTERNAL]
Check if the function is of a particular type.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::sprint "[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::get_reverse "[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::rp "[INTERNAL]
";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::rq "[INTERNAL]
";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::has_reverse "[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::get_forward "[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::rz "[INTERNAL]
";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::get_n_in "[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::rx "[INTERNAL]
";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::instruction_id "[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::call_forward "[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::size_out "[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::sp_jac_dae "[INTERNAL]  Create sparsity pattern of the extended Jacobian (forward
problem)

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::uses_output "[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::sp_jac_rdae "[INTERNAL]  Create sparsity pattern of the extended Jacobian (backward
problem)

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::get_name_in "[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::calc_function "[INTERNAL] ";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::mx_in "[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::codegen_name "[INTERNAL]  Get name in codegen.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::aug_adj "[INTERNAL]  Generate a augmented DAE system with nadj adjoint sensitivities.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::size_in "[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::symbolicAdjSeed "[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::resetB "[INTERNAL]  Reset the backward problem and take time to tf.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::clear_mem "[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::has_spfwd "[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::eval_dm "[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::jacobian "[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::numel_out "[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::replace_res "[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::create_function "[INTERNAL]  Create an oracle function

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::alloc_arg "[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")
casadi::ImplicitFixedStepIntegrator::ImplicitFixedStepIntegrator "[INTERNAL]  Constructor.

";


// File: classcasadi_1_1ImplicitToNlp.xml
%feature("docstring") casadi::ImplicitToNlp::create_function "[INTERNAL]
Create an oracle function

";

%feature("docstring") casadi::ImplicitToNlp::print_fstats "[INTERNAL]
Print statistics.

";

%feature("docstring") casadi::ImplicitToNlp::ImplicitToNlp "[INTERNAL]
Constructor.

";

%feature("docstring") casadi::ImplicitToNlp::mx_out "[INTERNAL]  Get
function input(s) and output(s)

";

%feature("docstring") casadi::ImplicitToNlp::sz_iw "[INTERNAL]  Get
required length of iw field.

";

%feature("docstring") casadi::ImplicitToNlp::signature "[INTERNAL]  Code
generate the function.

";

%feature("docstring") casadi::ImplicitToNlp::mapsum_mx "[INTERNAL]
Parallel evaluation.

";

%feature("docstring") casadi::ImplicitToNlp::matching_res "[INTERNAL]
Check if output arguments that needs to be replaced.

";

%feature("docstring") casadi::ImplicitToNlp::sx_in "[INTERNAL]  Get
function input(s) and output(s)

";

%feature("docstring") casadi::ImplicitToNlp::nnz_in "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::ImplicitToNlp::free_mx "[INTERNAL]  Get free
variables ( MX)

";

%feature("docstring") casadi::ImplicitToNlp::memory "[INTERNAL]  Memory
objects.

";

%feature("docstring") casadi::ImplicitToNlp::get_default_in "[INTERNAL]
Get default input value.

";

%feature("docstring") casadi::ImplicitToNlp::has_spfwd "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::ImplicitToNlp::replace_fseed "[INTERNAL]
Replace 0-by-0 forward seeds.

";

%feature("docstring") casadi::ImplicitToNlp::solve "[INTERNAL]   Solve the
system of equations and calculate derivatives.

";

%feature("docstring") casadi::ImplicitToNlp::get_options "[INTERNAL]
Options.

";

%feature("docstring") casadi::ImplicitToNlp::sz_work "[INTERNAL]  Get
number of temporary variables needed.

";

%feature("docstring") casadi::ImplicitToNlp::size1_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::ImplicitToNlp::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::ImplicitToNlp::free_sx "[INTERNAL]  Get free
variables (SX)

";

%feature("docstring") casadi::ImplicitToNlp::call_gen "[INTERNAL]   Call a
function, overloaded.

";

%feature("docstring") casadi::ImplicitToNlp::replace_res "[INTERNAL]
Replace 0-by-0 outputs.

";

%feature("docstring") casadi::ImplicitToNlp::has_derivative "[INTERNAL]
Can derivatives be calculated in any way?

";

%feature("docstring") casadi::ImplicitToNlp::call_forward "[INTERNAL]
Forward mode AD, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::ImplicitToNlp::set_function "[INTERNAL]
Register the function for evaluation and statistics gathering

";

%feature("docstring") casadi::ImplicitToNlp::nnz_out "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::ImplicitToNlp::index_in "[INTERNAL]  Get
input scheme index by name.

";

%feature("docstring") casadi::ImplicitToNlp::generate_lifted "[INTERNAL]
Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::ImplicitToNlp::sp_forward "[INTERNAL]
Propagate sparsity forward.

";

%feature("docstring") casadi::ImplicitToNlp::construct "[INTERNAL]
Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::ImplicitToNlp::alloc_res "[INTERNAL]  Ensure
required length of res field.

";

%feature("docstring") casadi::ImplicitToNlp::sx_out "[INTERNAL]  Get
function input(s) and output(s)

";

%feature("docstring") casadi::ImplicitToNlp::disp "[INTERNAL]  Display
object.

";

%feature("docstring") casadi::ImplicitToNlp::ad_forward "[INTERNAL]  Create
call to (cached) derivative function, forward mode.

";

%feature("docstring") casadi::ImplicitToNlp "

'nlp' plugin for Rootfinder

Use an Nlpsol as Rootfinder solver

>List of available options

+----------------+-----------+---------------------------------+
|       Id       |   Type    |           Description           |
+================+===========+=================================+
| nlpsol         | OT_STRING | Name of solver.                 |
+----------------+-----------+---------------------------------+
| nlpsol_options | OT_DICT   | Options to be passed to solver. |
+----------------+-----------+---------------------------------+

Joris Gillis

>List of available options

+-------------------+--------------+-------------------+-------------------+
|        Id         |     Type     |    Description    |      Used in      |
+===================+==============+===================+===================+
| constraints       | OT_INTVECTOR | Constrain the     | casadi::Rootfinde |
|                   |              | unknowns. 0       | r                 |
|                   |              | (default): no     |                   |
|                   |              | constraint on ui, |                   |
|                   |              | 1: ui >= 0.0, -1: |                   |
|                   |              | ui <= 0.0, 2: ui  |                   |
|                   |              | > 0.0, -2: ui <   |                   |
|                   |              | 0.0.              |                   |
+-------------------+--------------+-------------------+-------------------+
| implicit_input    | OT_INT       | Index of the      | casadi::Rootfinde |
|                   |              | input that        | r                 |
|                   |              | corresponds to    |                   |
|                   |              | the actual root-  |                   |
|                   |              | finding           |                   |
+-------------------+--------------+-------------------+-------------------+
| implicit_output   | OT_INT       | Index of the      | casadi::Rootfinde |
|                   |              | output that       | r                 |
|                   |              | corresponds to    |                   |
|                   |              | the actual root-  |                   |
|                   |              | finding           |                   |
+-------------------+--------------+-------------------+-------------------+
| jacobian_function | OT_FUNCTION  | Function object   | casadi::Rootfinde |
|                   |              | for calculating   | r                 |
|                   |              | the Jacobian      |                   |
|                   |              | (autogenerated by |                   |
|                   |              | default)          |                   |
+-------------------+--------------+-------------------+-------------------+
| linear_solver     | OT_STRING    | User-defined      | casadi::Rootfinde |
|                   |              | linear solver     | r                 |
|                   |              | class. Needed for |                   |
|                   |              | sensitivities.    |                   |
+-------------------+--------------+-------------------+-------------------+
| linear_solver_opt | OT_DICT      | Options to be     | casadi::Rootfinde |
| ions              |              | passed to the     | r                 |
|                   |              | linear solver.    |                   |
+-------------------+--------------+-------------------+-------------------+
| nlpsol            | OT_STRING    | Name of solver.   | casadi::ImplicitT |
|                   |              |                   | oNlp              |
+-------------------+--------------+-------------------+-------------------+
| nlpsol_options    | OT_DICT      | Options to be     | casadi::ImplicitT |
|                   |              | passed to solver. | oNlp              |
+-------------------+--------------+-------------------+-------------------+

Diagrams
--------



C++ includes: implicit_to_nlp.hpp ";

%feature("docstring") casadi::ImplicitToNlp::has_reverse "[INTERNAL]
Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::ImplicitToNlp::codegen_body "[INTERNAL]
Generate code for the function body.

";

%feature("docstring") casadi::ImplicitToNlp::get_reltol "[INTERNAL]  Get
relative tolerance.

";

%feature("docstring") casadi::ImplicitToNlp::check_arg "[INTERNAL]  Check
if input arguments have correct length and dimensions.

";

%feature("docstring") casadi::ImplicitToNlp::jit_dependencies "[INTERNAL]
JIT for dependencies.

";

%feature("docstring") casadi::ImplicitToNlp::print_option "[INTERNAL]
Print all information there is to know about a certain option.

";

%feature("docstring") casadi::ImplicitToNlp::get_free "[INTERNAL]  Print
free variables.

";

%feature("docstring") casadi::ImplicitToNlp::sparsity_jac "[INTERNAL]  Get,
if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::ImplicitToNlp::get_name_in "[INTERNAL]  Names
of function input and outputs.

";

%feature("docstring") casadi::ImplicitToNlp::is_a "[INTERNAL]  Check if the
function is of a particular type.

";

%feature("docstring") casadi::ImplicitToNlp::init_mem "[INTERNAL]
Initalize memory block.

";

%feature("docstring") casadi::ImplicitToNlp::has_codegen "[INTERNAL]  Is
codegen supported?

";

%feature("docstring") casadi::ImplicitToNlp::info "[INTERNAL]  Obtain
information about function

";

%feature("docstring") casadi::ImplicitToNlp::sz_res "[INTERNAL]  Get
required length of res field.

";

%feature("docstring") casadi::ImplicitToNlp::replace_arg "[INTERNAL]
Replace 0-by-0 inputs.

";

%feature("docstring") casadi::ImplicitToNlp::init "[INTERNAL]  Initialize.

";

%feature("docstring") casadi::ImplicitToNlp::setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";

%feature("docstring") casadi::ImplicitToNlp::eval_gen "

>  int casadi::FunctionInternal::eval_gen(const double **arg, double **res, int *iw, double *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate numerically.

>  int casadi::FunctionInternal::eval_gen(const SXElem **arg, SXElem **res, int *iw, SXElem *w, void *mem) const

>  int casadi::FunctionInternal::eval_gen(const bvec_t **arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

%feature("docstring") casadi::ImplicitToNlp::getJacSparsityHierarchical "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::ImplicitToNlp::print_options "[INTERNAL]
Print list of options.

";

%feature("docstring") casadi::ImplicitToNlp::call "[INTERNAL]   Call a
function, templated.

";

%feature("docstring") casadi::ImplicitToNlp::sz_w "[INTERNAL]  Get required
length of w field.

";

%feature("docstring") casadi::ImplicitToNlp::class_name "[INTERNAL]
Readable name of the internal class.

";

%feature("docstring") casadi::ImplicitToNlp::symbolicAdjSeed "[INTERNAL]
Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::ImplicitToNlp::~ImplicitToNlp "[INTERNAL]
Destructor.

";

%feature("docstring") casadi::ImplicitToNlp::get_jacobian_sparsity "[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::ImplicitToNlp::size_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::ImplicitToNlp::get_n_out "[INTERNAL]  Number
of function inputs and outputs.

";

%feature("docstring") casadi::ImplicitToNlp::get_forward "[INTERNAL]
Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::ImplicitToNlp::getAtomicInput "

[DEPRECATED] Renamed instruction_index

";

%feature("docstring") casadi::ImplicitToNlp::sprint "[INTERNAL]  C-style
formatted printing to string.

";

%feature("docstring") casadi::ImplicitToNlp::numel_out "[INTERNAL]  Number
of input/output elements.

";

%feature("docstring") casadi::ImplicitToNlp::size_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::ImplicitToNlp::has_forward "[INTERNAL]
Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::ImplicitToNlp::alloc_w "[INTERNAL]  Ensure
required length of w field.

";

%feature("docstring") casadi::ImplicitToNlp::checkout "[INTERNAL]  Checkout
a memory object.

";

%feature("docstring") casadi::ImplicitToNlp::alloc_arg "[INTERNAL]  Ensure
required length of arg field.

";

%feature("docstring") casadi::ImplicitToNlp::getAdaptorSolverName "[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring") casadi::ImplicitToNlp::getJacSparsityHierarchicalSymm
"[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::ImplicitToNlp::check_res "[INTERNAL]  Check
if output arguments have correct length and dimensions.

";

%feature("docstring") casadi::ImplicitToNlp::calc_function "[INTERNAL] ";

%feature("docstring") casadi::ImplicitToNlp::set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::ImplicitToNlp::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::ImplicitToNlp::index_out "[INTERNAL]  Get
output scheme index by name.

";

%feature("docstring") casadi::ImplicitToNlp::get_abstol "[INTERNAL]  Get
absolute tolerance.

";

%feature("docstring") casadi::ImplicitToNlp::definition "[INTERNAL]  Get
function signature: name:(inputs)->(outputs)

";

%feature("docstring") casadi::ImplicitToNlp::plugin_name "[INTERNAL] ";

%feature("docstring") casadi::ImplicitToNlp::codegen_declarations "[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring") casadi::ImplicitToNlp::codegen_incref "[INTERNAL]
Codegen incref for dependencies.

";

%feature("docstring") casadi::ImplicitToNlp::has_sprev "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::ImplicitToNlp::factory "[INTERNAL] ";

%feature("docstring") casadi::ImplicitToNlp::size1_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::ImplicitToNlp::sp_reverse "[INTERNAL]
Propagate sparsity backwards.

";

%feature("docstring") casadi::ImplicitToNlp::disp_more "[INTERNAL]  Print
more.

";

%feature("docstring") casadi::ImplicitToNlp::get_reverse "[INTERNAL]
Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::ImplicitToNlp::set_temp "[INTERNAL]  Set the
work vectors.

";

%feature("docstring") casadi::ImplicitToNlp::instruction_id "[INTERNAL]
Get an atomic operation operator index.

";

%feature("docstring") casadi::ImplicitToNlp::codegen_name "[INTERNAL]  Get
name in codegen.

";

%feature("docstring") casadi::ImplicitToNlp::eval "[INTERNAL]  Evaluate
numerically.

";

%feature("docstring") casadi::ImplicitToNlp::eval_dm "[INTERNAL]  Evaluate
with DM matrices.

";

%feature("docstring") casadi::ImplicitToNlp::print_dimensions "[INTERNAL]
Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::ImplicitToNlp::slice "[INTERNAL]  returns a
new function with a selection of inputs/outputs of the original

";

%feature("docstring") casadi::ImplicitToNlp::get_max_in "[INTERNAL]  Get
largest input value.

";

%feature("docstring") casadi::ImplicitToNlp::all_scalar "[INTERNAL]  Are
all inputs and outputs scalar.

";

%feature("docstring") casadi::ImplicitToNlp::fwd_seed "[INTERNAL]  Symbolic
expressions for the forward seeds.

";

%feature("docstring") casadi::ImplicitToNlp::sz_arg "[INTERNAL]  Get
required length of arg field.

";

%feature("docstring") casadi::ImplicitToNlp::replace_aseed "[INTERNAL]
Replace 0-by-0 reverse seeds.

";

%feature("docstring") casadi::ImplicitToNlp::getAtomicOutput "

[DEPRECATED] Renamed instruction_output

";

%feature("docstring") casadi::ImplicitToNlp::matching_arg "[INTERNAL]
Check if input arguments that needs to be replaced.

";

%feature("docstring") casadi::ImplicitToNlp::sp_weight "[INTERNAL]
Weighting factor for chosing forward/reverse mode, sparsity propagation.

";

%feature("docstring") casadi::ImplicitToNlp::eval_sx "[INTERNAL]  Evaluate
with symbolic scalars.

";

%feature("docstring") casadi::ImplicitToNlp::ad_weight "[INTERNAL]
Weighting factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::ImplicitToNlp::instruction_input "[INTERNAL]
Get the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::ImplicitToNlp::has_function "[INTERNAL] ";

%feature("docstring") casadi::ImplicitToNlp::clear_mem "[INTERNAL]  Clear
all memory (called from destructor)

";

%feature("docstring") casadi::ImplicitToNlp::alloc "[INTERNAL]  Ensure work
vectors long enough to evaluate function.

";

%feature("docstring") casadi::ImplicitToNlp::get_sparsity_in "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::ImplicitToNlp::monitored "[INTERNAL] ";

%feature("docstring") casadi::ImplicitToNlp::jacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::ImplicitToNlp::get_jacobian "[INTERNAL]
Return Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::ImplicitToNlp::codegen_meta "[INTERNAL]
Generate meta-information allowing a user to evaluate a generated function.

";

%feature("docstring") casadi::ImplicitToNlp::size2_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::ImplicitToNlp::symbolic_output "[INTERNAL]
Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::ImplicitToNlp::getJacSparsity "[INTERNAL]
Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::ImplicitToNlp::get_function "[INTERNAL] ";

%feature("docstring") casadi::ImplicitToNlp::finalize "[INTERNAL]  Finalize
initialization.

";

%feature("docstring") casadi::ImplicitToNlp::alloc_iw "[INTERNAL]  Ensure
required length of iw field.

";

%feature("docstring") casadi::ImplicitToNlp::codegen_decref "[INTERNAL]
Codegen decref for dependencies.

";

%feature("docstring") casadi::ImplicitToNlp::ad_reverse "[INTERNAL]  Create
call to (cached) derivative function, reverse mode.

";

%feature("docstring") casadi::ImplicitToNlp::get_min_in "[INTERNAL]  Get
smallest input value.

";

%feature("docstring") casadi::ImplicitToNlp::alloc_mem "[INTERNAL]  Create
memory block.

";

%feature("docstring") casadi::ImplicitToNlp::codegen_sparsities "[INTERNAL]
Codegen sparsities.

";

%feature("docstring") casadi::ImplicitToNlp::fwdViaJac "[INTERNAL]
Calculate derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::ImplicitToNlp::reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::ImplicitToNlp::instruction_MX "[INTERNAL]
get MX expression associated with instruction

";

%feature("docstring") casadi::ImplicitToNlp::size2_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::ImplicitToNlp::has_free "[INTERNAL]  Does the
function have free variables.

";

%feature("docstring") casadi::ImplicitToNlp::n_nodes "[INTERNAL]  Number of
nodes in the algorithm.

";

%feature("docstring") casadi::ImplicitToNlp::get_partition "[INTERNAL]  Get
the unidirectional or bidirectional partition.

";

%feature("docstring") casadi::ImplicitToNlp::codegen "[INTERNAL]  Generate
code the function.

";

%feature("docstring") casadi::ImplicitToNlp::has_jacobian "[INTERNAL]
Return Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::ImplicitToNlp::get_sparsity_out "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::ImplicitToNlp::forward "[INTERNAL]  Return
function that calculates forward derivatives forward(nfwd) returns a cached
instance if available, and calls  Function get_forward(int nfwd) if no
cached version is available.

";

%feature("docstring") casadi::ImplicitToNlp::export_code "[INTERNAL]
Export function in a specific language.

";

%feature("docstring") casadi::ImplicitToNlp::which_depends "[INTERNAL]
Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::ImplicitToNlp::wrap "[INTERNAL]  Wrap in an
Function instance consisting of only one MX call.

";

%feature("docstring") casadi::ImplicitToNlp::n_instructions "[INTERNAL]
Get the number of atomic operations.

";

%feature("docstring") casadi::ImplicitToNlp::generate_dependencies "[INTERNAL]  Export / Generate C code for the generated functions.

";

%feature("docstring") casadi::ImplicitToNlp::get_name_out "[INTERNAL]
Names of function input and outputs.

";

%feature("docstring") casadi::ImplicitToNlp::expand "[INTERNAL] ";

%feature("docstring") casadi::ImplicitToNlp::instruction_constant "[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::ImplicitToNlp::get_stats "[INTERNAL]  Get all
statistics.

";

%feature("docstring") casadi::ImplicitToNlp::numel_in "[INTERNAL]  Number
of input/output elements.

";

%feature("docstring") casadi::ImplicitToNlp::adjViaJac "[INTERNAL]
Calculate derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::ImplicitToNlp::instruction_output "[INTERNAL]
Get the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::ImplicitToNlp::get_n_in "[INTERNAL]  Number
of function inputs and outputs.

";

%feature("docstring") casadi::ImplicitToNlp::oracle "[INTERNAL]  Get
oracle.

";

%feature("docstring") casadi::ImplicitToNlp::eval_mx "[INTERNAL]  Evaluate
with symbolic matrices.

";

%feature("docstring") casadi::ImplicitToNlp::uses_output "[INTERNAL]  Do
the derivative functions need nondifferentiated outputs?

";

%feature("docstring") casadi::ImplicitToNlp::release "[INTERNAL]  Release a
memory object.

";

%feature("docstring") casadi::ImplicitToNlp::self "[INTERNAL]  Get a public
class instance.

";

%feature("docstring") casadi::ImplicitToNlp::free_mem "[INTERNAL]  Free
memory block.

";

%feature("docstring") casadi::ImplicitToNlp::getJacSparsityGen "[INTERNAL]
Get the sparsity pattern, forward mode.

";

%feature("docstring") casadi::ImplicitToNlp::mx_in "[INTERNAL]  Get
function input(s) and output(s)

";

%feature("docstring") casadi::ImplicitToNlp::print "[INTERNAL]  C-style
formatted printing during evaluation.

";

%feature("docstring") casadi::ImplicitToNlp::call_reverse "[INTERNAL]
Reverse mode, virtual functions overloaded in derived classes.

";


// File: classcasadi_1_1Importer.xml
%feature("docstring") casadi::Importer::get_str "

Get string representation.

";

%feature("docstring") casadi::Importer::body "

Get the function body, if inlined.

";

%feature("docstring") casadi::Importer::class_name "

Get class name.

";

%feature("docstring") casadi::Importer::print_ptr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::Importer::has_meta "

Does a meta entry exist?

";

%feature("docstring") casadi::Importer::disp "

Print a description of the object.

";

%feature("docstring") casadi::Importer "

Importer.

Just-in-time compilation of code

General information
===================



List of plugins
===============



- clang

- shell

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
Importer.doc(\"myextraplugin\")



--------------------------------------------------------------------------------

clang
-----



Interface to the JIT compiler CLANG

>List of available options

+--------------+-----------------+-----------------------------------------+
|      Id      |      Type       |               Description               |
+==============+=================+=========================================+
| flags        | OT_STRINGVECTOR | Compile flags for the JIT compiler.     |
|              |                 | Default: None                           |
+--------------+-----------------+-----------------------------------------+
| include_path | OT_STRING       | Include paths for the JIT compiler. The |
|              |                 | include directory shipped with CasADi   |
|              |                 | will be automatically appended.         |
+--------------+-----------------+-----------------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

shell
-----



Interface to the JIT compiler SHELL

>List of available options

+----------------------+-----------------+---------------------------------+
|          Id          |      Type       |           Description           |
+======================+=================+=================================+
| cleanup              | OT_BOOL         | Cleanup temporary files when    |
|                      |                 | unloading. Default: true        |
+----------------------+-----------------+---------------------------------+
| compiler             | OT_STRING       | Compiler command                |
+----------------------+-----------------+---------------------------------+
| compiler_flags       | OT_STRINGVECTOR | Alias for 'compiler_flags'      |
+----------------------+-----------------+---------------------------------+
| compiler_output_flag | OT_STRING       | Compiler flag to denote object  |
|                      |                 | output. Default: '-o '          |
+----------------------+-----------------+---------------------------------+
| compiler_setup       | OT_STRING       | Compiler setup command.         |
|                      |                 | Intended to be fixed. The       |
|                      |                 | 'flag' option is the prefered   |
|                      |                 | way to set custom flags.        |
+----------------------+-----------------+---------------------------------+
| flags                | OT_STRINGVECTOR | Compile flags for the JIT       |
|                      |                 | compiler. Default: None         |
+----------------------+-----------------+---------------------------------+
| folder               | OT_STRING       | Folder to put temporary objects |
|                      |                 | in.                             |
+----------------------+-----------------+---------------------------------+
| linker               | OT_STRING       | Linker command                  |
+----------------------+-----------------+---------------------------------+
| linker_flags         | OT_STRINGVECTOR | Linker flags for the JIT        |
|                      |                 | compiler. Default: None         |
+----------------------+-----------------+---------------------------------+
| linker_output_flag   | OT_STRING       | Linker flag to denote shared    |
|                      |                 | library output. Default: '-o '  |
+----------------------+-----------------+---------------------------------+
| linker_setup         | OT_STRING       | Linker setup command. Intended  |
|                      |                 | to be fixed. The 'flag' option  |
|                      |                 | is the prefered way to set      |
|                      |                 | custom flags.                   |
+----------------------+-----------------+---------------------------------+

--------------------------------------------------------------------------------



Joris Gillis

C++ includes: importer.hpp ";

%feature("docstring") casadi::Importer::plugin_name "

Query plugin name.

";

%feature("docstring") casadi::Importer::has_function "";

%feature("docstring") casadi::Importer::Importer "

>  casadi::Importer::Importer()
------------------------------------------------------------------------

Default constructor.

>  casadi::Importer::Importer(const std::string &name, const std::string &compiler, const Dict &opts=Dict())
------------------------------------------------------------------------

Importer factory.

";

%feature("docstring") casadi::Importer::is_null "

Is a null pointer?

";

%feature("docstring") casadi::Importer::get_meta "

Get entry as a text.

";

%feature("docstring") casadi::Importer::__hash__ "

Returns a number that is unique for a given Node. If the Object does not
point to any node, \"0\" is returned.

";

%feature("docstring") casadi::Importer::inlined "

Check if a function is inlined.

";


// File: classcasadi_1_1InfSX.xml


// File: classcasadi_1_1Input.xml


// File: classcasadi_1_1IntegerSX.xml


// File: classcasadi_1_1Integrator.xml
%feature("docstring") casadi::Integrator::has_function "[INTERNAL] ";

%feature("docstring") casadi::Integrator::matching_res "[INTERNAL]  Check
if output arguments that needs to be replaced.

";

%feature("docstring") casadi::Integrator::sz_arg "[INTERNAL]  Get required
length of arg field.

";

%feature("docstring") casadi::Integrator::size_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Integrator::sprint "[INTERNAL]  C-style
formatted printing to string.

";

%feature("docstring") casadi::Integrator::symbolic_output "[INTERNAL]  Get
a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::Integrator::set_function "[INTERNAL]
Register the function for evaluation and statistics gathering

";

%feature("docstring") casadi::Integrator::replace_aseed "[INTERNAL]
Replace 0-by-0 reverse seeds.

";

%feature("docstring") casadi::Integrator::aug_fwd "[INTERNAL]  Generate a
augmented DAE system with nfwd forward sensitivities.

";

%feature("docstring") casadi::Integrator::codegen_declarations "[INTERNAL]
Generate code for the declarations of the C function.

";

%feature("docstring") casadi::Integrator::sz_iw "[INTERNAL]  Get required
length of iw field.

";

%feature("docstring") casadi::Integrator::has_free "[INTERNAL]  Does the
function have free variables.

";

%feature("docstring") casadi::Integrator::wrap "[INTERNAL]  Wrap in an
Function instance consisting of only one MX call.

";

%feature("docstring") casadi::Integrator::jacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Integrator::factory "[INTERNAL] ";

%feature("docstring") casadi::Integrator::print_option "[INTERNAL]  Print
all information there is to know about a certain option.

";

%feature("docstring") casadi::Integrator::size1_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::Integrator::z "[INTERNAL] ";

%feature("docstring") casadi::Integrator::x "[INTERNAL] ";

%feature("docstring") casadi::Integrator::eval_sx "[INTERNAL]  Evaluate
with symbolic scalars.

";

%feature("docstring") casadi::Integrator::q "[INTERNAL] ";

%feature("docstring") casadi::Integrator::p "[INTERNAL] ";

%feature("docstring") casadi::Integrator::t "[INTERNAL] ";

%feature("docstring") casadi::Integrator::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::Integrator::adjViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::Integrator::calc_function "[INTERNAL] ";

%feature("docstring") casadi::Integrator::codegen "[INTERNAL]  Generate
code the function.

";

%feature("docstring") casadi::Integrator::sp_jac_dae "[INTERNAL]  Create
sparsity pattern of the extended Jacobian (forward problem)

";

%feature("docstring") casadi::Integrator::setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";

%feature("docstring") casadi::Integrator::alloc_iw "[INTERNAL]  Ensure
required length of iw field.

";

%feature("docstring") casadi::Integrator::sx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Integrator::n_instructions "[INTERNAL]  Get
the number of atomic operations.

";

%feature("docstring") casadi::Integrator::reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::Integrator::sparsity_jac "[INTERNAL]  Get, if
necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Integrator::mapsum_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::Integrator::codegen_sparsities "[INTERNAL]
Codegen sparsities.

";

%feature("docstring") casadi::Integrator::nnz_in "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::Integrator::generate_dependencies "[INTERNAL]
Export / Generate C code for the generated functions.

";

%feature("docstring") casadi::Integrator::create_function "[INTERNAL]
Create an oracle function

";

%feature("docstring") casadi::Integrator::getJacSparsityGen "[INTERNAL]
Get the sparsity pattern, forward mode.

";

%feature("docstring") casadi::Integrator::resetB "[INTERNAL]  Reset the
backward problem.

";

%feature("docstring") casadi::Integrator::call "[INTERNAL]   Call a
function, templated.

";

%feature("docstring") casadi::Integrator::alloc_w "[INTERNAL]  Ensure
required length of w field.

";

%feature("docstring") casadi::Integrator::init_mem "[INTERNAL]  Initalize
memory block.

";

%feature("docstring") casadi::Integrator::get_n_out "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::Integrator::check_arg "[INTERNAL]  Check if
input arguments have correct length and dimensions.

";

%feature("docstring") casadi::Integrator::instruction_id "[INTERNAL]  Get
an atomic operation operator index.

";

%feature("docstring") casadi::Integrator::sz_w "[INTERNAL]  Get required
length of w field.

";

%feature("docstring") casadi::Integrator::get_abstol "[INTERNAL]  Get
absolute tolerance.

";

%feature("docstring") casadi::Integrator::get_free "[INTERNAL]  Print free
variables.

";

%feature("docstring") casadi::Integrator::is_a "[INTERNAL]  Check if the
function is of a particular type.

";

%feature("docstring") casadi::Integrator::sp_reverse "[INTERNAL]  Propagate
sparsity backwards.

";

%feature("docstring") casadi::Integrator::codegen_name "[INTERNAL]  Get
name in codegen.

";

%feature("docstring") casadi::Integrator::print "[INTERNAL]  C-style
formatted printing during evaluation.

";

%feature("docstring") casadi::Integrator::eval_dm "[INTERNAL]  Evaluate
with DM matrices.

";

%feature("docstring") casadi::Integrator::Integrator "[INTERNAL]
Constructor.

";

%feature("docstring") casadi::Integrator::jit_dependencies "[INTERNAL]  JIT
for dependencies.

";

%feature("docstring") casadi::Integrator::call_reverse "[INTERNAL]  Reverse
mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Integrator::has_sprev "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Integrator::getJacSparsity "[INTERNAL]
Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Integrator::codegen_body "[INTERNAL]
Generate code for the function body.

";

%feature("docstring") casadi::Integrator::get_jacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Integrator::getAtomicInput "

[DEPRECATED] Renamed instruction_index

";

%feature("docstring") casadi::Integrator::advance "[INTERNAL]  Advance
solution in time.

";

%feature("docstring") casadi::Integrator::retreat "[INTERNAL]  Retreat
solution in time.

";

%feature("docstring") casadi::Integrator::has_reverse "[INTERNAL]  Generate
a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::Integrator::matching_arg "[INTERNAL]  Check
if input arguments that needs to be replaced.

";

%feature("docstring") casadi::Integrator::set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::Integrator::get_default_in "[INTERNAL]  Get
default input value.

";

%feature("docstring") casadi::Integrator "

Internal storage for integrator related data.

Joel Andersson

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| augmented_option | OT_DICT         | Options to be    | casadi::Integrat |
| s                |                 | passed down to   | or               |
|                  |                 | the augmented    |                  |
|                  |                 | integrator, if   |                  |
|                  |                 | one is           |                  |
|                  |                 | constructed.     |                  |
+------------------+-----------------+------------------+------------------+
| common_options   | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | auto-generated   | nction           |
|                  |                 | functions        |                  |
+------------------+-----------------+------------------+------------------+
| expand           | OT_BOOL         | Replace MX with  | casadi::Integrat |
|                  |                 | SX expressions   | or               |
|                  |                 | in problem       |                  |
|                  |                 | formulation      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| grid             | OT_DOUBLEVECTOR | Time grid        | casadi::Integrat |
|                  |                 |                  | or               |
+------------------+-----------------+------------------+------------------+
| monitor          | OT_STRINGVECTOR | Set of user      | casadi::OracleFu |
|                  |                 | problem          | nction           |
|                  |                 | functions to be  |                  |
|                  |                 | monitored        |                  |
+------------------+-----------------+------------------+------------------+
| number_of_finite | OT_INT          | Number of finite | casadi::Integrat |
| _elements        |                 | elements         | or               |
+------------------+-----------------+------------------+------------------+
| output_t0        | OT_BOOL         | Output the state | casadi::Integrat |
|                  |                 | at the initial   | or               |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| print_stats      | OT_BOOL         | Print out        | casadi::Integrat |
|                  |                 | statistics after | or               |
|                  |                 | integration      |                  |
+------------------+-----------------+------------------+------------------+
| rootfinder       | OT_STRING       | An implicit      | casadi::Integrat |
|                  |                 | function solver  | or               |
+------------------+-----------------+------------------+------------------+
| rootfinder_optio | OT_DICT         | Options to be    | casadi::Integrat |
| ns               |                 | passed to the    | or               |
|                  |                 | NLP Solver       |                  |
+------------------+-----------------+------------------+------------------+
| specific_options | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | specific auto-   | nction           |
|                  |                 | generated        |                  |
|                  |                 | functions,       |                  |
|                  |                 | overwriting the  |                  |
|                  |                 | defaults from    |                  |
|                  |                 | common_options.  |                  |
|                  |                 | Nested           |                  |
|                  |                 | dictionary.      |                  |
+------------------+-----------------+------------------+------------------+
| t0               | OT_DOUBLE       | Beginning of the | casadi::Integrat |
|                  |                 | time horizon     | or               |
+------------------+-----------------+------------------+------------------+
| tf               | OT_DOUBLE       | End of the time  | casadi::Integrat |
|                  |                 | horizon          | or               |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: integrator_impl.hpp ";

%feature("docstring") casadi::Integrator::free_sx "[INTERNAL]  Get free
variables (SX)

";

%feature("docstring") casadi::Integrator::symbolicAdjSeed "[INTERNAL]
Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::Integrator::get_jacobian_sparsity "[INTERNAL]
Get Jacobian sparsity.

";

%feature("docstring") casadi::Integrator::setStopTime "[INTERNAL]  Set stop
time for the integration.

";

%feature("docstring") casadi::Integrator::eval_mx "[INTERNAL]  Evaluate
with symbolic matrices.

";

%feature("docstring") casadi::Integrator::all_scalar "[INTERNAL]  Are all
inputs and outputs scalar.

";

%feature("docstring") casadi::Integrator::has_spfwd "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Integrator::print_fstats "[INTERNAL]  Print
statistics.

";

%feature("docstring") casadi::Integrator::getAdaptorSolverName "[INTERNAL]
Obtain solver name from Adaptor.

";

%feature("docstring") casadi::Integrator::getAtomicOutput "

[DEPRECATED] Renamed instruction_output

";

%feature("docstring") casadi::Integrator::set_temp "[INTERNAL]  Set the
work vectors.

";

%feature("docstring") casadi::Integrator::instruction_output "[INTERNAL]
Get the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::Integrator::instruction_constant "[INTERNAL]
Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::Integrator::has_derivative "[INTERNAL]  Can
derivatives be calculated in any way?

";

%feature("docstring") casadi::Integrator::size_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::Integrator::getDerivativeOptions "[INTERNAL]
Set solver specific options to generated augmented integrators.

";

%feature("docstring") casadi::Integrator::instruction_MX "[INTERNAL]  get
MX expression associated with instruction

";

%feature("docstring") casadi::Integrator::class_name "[INTERNAL]  Readable
name of the internal class.

";

%feature("docstring") casadi::Integrator::nnz_out "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::Integrator::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::Integrator::alloc_arg "[INTERNAL]  Ensure
required length of arg field.

";

%feature("docstring") casadi::Integrator::getJacSparsityHierarchicalSymm "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::Integrator::sp_jac_rdae "[INTERNAL]  Create
sparsity pattern of the extended Jacobian (backward problem)

";

%feature("docstring") casadi::Integrator::numel_out "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::Integrator::get_max_in "[INTERNAL]  Get
largest input value.

";

%feature("docstring") casadi::Integrator::codegen_meta "[INTERNAL]
Generate meta-information allowing a user to evaluate a generated function.

";

%feature("docstring") casadi::Integrator::n_nodes "[INTERNAL]  Number of
nodes in the algorithm.

";

%feature("docstring") casadi::Integrator::get_name_in "[INTERNAL]  Names of
function input and outputs.

";

%feature("docstring") casadi::Integrator::has_jacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Integrator::get_n_in "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::Integrator::forward "[INTERNAL]  Return
function that calculates forward derivatives forward(nfwd) returns a cached
instance if available, and calls  Function get_forward(int nfwd) if no
cached version is available.

";

%feature("docstring") casadi::Integrator::sz_work "[INTERNAL]  Get number
of temporary variables needed.

";

%feature("docstring") casadi::Integrator::print_dimensions "[INTERNAL]
Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::Integrator::fwd_seed "[INTERNAL]  Symbolic
expressions for the forward seeds.

";

%feature("docstring") casadi::Integrator::construct "[INTERNAL]  Construct
Prepares the function for evaluation.

";

%feature("docstring") casadi::Integrator::memory "[INTERNAL]  Memory
objects.

";

%feature("docstring") casadi::Integrator::free_mx "[INTERNAL]  Get free
variables ( MX)

";

%feature("docstring") casadi::Integrator::self "[INTERNAL]  Get a public
class instance.

";

%feature("docstring") casadi::Integrator::eval_gen "

>  int casadi::FunctionInternal::eval_gen(const double **arg, double **res, int *iw, double *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate numerically.

>  int casadi::FunctionInternal::eval_gen(const SXElem **arg, SXElem **res, int *iw, SXElem *w, void *mem) const

>  int casadi::FunctionInternal::eval_gen(const bvec_t **arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

%feature("docstring") casadi::Integrator::replace_res "[INTERNAL]  Replace
0-by-0 outputs.

";

%feature("docstring") casadi::Integrator::aug_adj "[INTERNAL]  Generate a
augmented DAE system with nadj adjoint sensitivities.

";

%feature("docstring") casadi::Integrator::signature "[INTERNAL]  Code
generate the function.

";

%feature("docstring") casadi::Integrator::instruction_input "[INTERNAL]
Get the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::Integrator::replace_fseed "[INTERNAL]
Replace 0-by-0 forward seeds.

";

%feature("docstring") casadi::Integrator::generate_lifted "[INTERNAL]
Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::Integrator::alloc_mem "[INTERNAL]  Create
memory block.

";

%feature("docstring") casadi::Integrator::has_codegen "[INTERNAL]  Is
codegen supported?

";

%feature("docstring") casadi::Integrator::get_partition "[INTERNAL]  Get
the unidirectional or bidirectional partition.

";

%feature("docstring") casadi::Integrator::get_sparsity_out "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Integrator::disp "[INTERNAL]  Display object.

";

%feature("docstring") casadi::Integrator::~Integrator "[INTERNAL]
Destructor.

";

%feature("docstring") casadi::Integrator::codegen_incref "[INTERNAL]
Codegen incref for dependencies.

";

%feature("docstring") casadi::Integrator::print_options "[INTERNAL]  Print
list of options.

";

%feature("docstring") casadi::Integrator::mx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Integrator::print_stats "[INTERNAL]  Print
solver statistics.

";

%feature("docstring") casadi::Integrator::size1_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::Integrator::clear_mem "[INTERNAL]  Clear all
memory (called from destructor)

";

%feature("docstring") casadi::Integrator::export_code "[INTERNAL]  Export
function in a specific language.

";

%feature("docstring") casadi::Integrator::eval "[INTERNAL]  evaluate

";

%feature("docstring") casadi::Integrator::size2_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::Integrator::plugin_name "[INTERNAL] ";

%feature("docstring") casadi::Integrator::get_sparsity_in "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Integrator::oracle "[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::Integrator::has_forward "[INTERNAL]  Generate
a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::Integrator::call_gen "[INTERNAL]   Call a
function, overloaded.

";

%feature("docstring") casadi::Integrator::info "[INTERNAL]  Obtain
information about function

";

%feature("docstring") casadi::Integrator::check_res "[INTERNAL]  Check if
output arguments have correct length and dimensions.

";

%feature("docstring") casadi::Integrator::slice "[INTERNAL]  returns a new
function with a selection of inputs/outputs of the original

";

%feature("docstring") casadi::Integrator::finalize "[INTERNAL]  Finalize
initialization.

";

%feature("docstring") casadi::Integrator::size2_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::Integrator::definition "[INTERNAL]  Get
function signature: name:(inputs)->(outputs)

";

%feature("docstring") casadi::Integrator::index_in "[INTERNAL]  Get input
scheme index by name.

";

%feature("docstring") casadi::Integrator::free_mem "[INTERNAL]  Free memory
block.

";

%feature("docstring") casadi::Integrator::sx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Integrator::ad_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::Integrator::uses_output "[INTERNAL]  Do the
derivative functions need nondifferentiated outputs?

";

%feature("docstring") casadi::Integrator::get_options "[INTERNAL]  Options.

";

%feature("docstring") casadi::Integrator::get_reltol "[INTERNAL]  Get
relative tolerance.

";

%feature("docstring") casadi::Integrator::alloc "[INTERNAL]  Ensure work
vectors long enough to evaluate function.

";

%feature("docstring") casadi::Integrator::index_out "[INTERNAL]  Get output
scheme index by name.

";

%feature("docstring") casadi::Integrator::sp_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode, sparsity propagation.

";

%feature("docstring") casadi::Integrator::get_function "[INTERNAL] ";

%feature("docstring") casadi::Integrator::alloc_res "[INTERNAL]  Ensure
required length of res field.

";

%feature("docstring") casadi::Integrator::numel_in "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::Integrator::mx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Integrator::get_forward "[INTERNAL]  Generate
a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::Integrator::fwdViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::Integrator::which_depends "[INTERNAL]  Which
variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::Integrator::get_name_out "[INTERNAL]  Names
of function input and outputs.

";

%feature("docstring") casadi::Integrator::reset "[INTERNAL]  Reset the
forward problem.

";

%feature("docstring") casadi::Integrator::expand "[INTERNAL] ";

%feature("docstring") casadi::Integrator::get_reverse "[INTERNAL]  Generate
a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::Integrator::disp_more "[INTERNAL]  Print
more.

";

%feature("docstring") casadi::Integrator::sz_res "[INTERNAL]  Get required
length of res field.

";

%feature("docstring") casadi::Integrator::checkout "[INTERNAL]  Checkout a
memory object.

";

%feature("docstring") casadi::Integrator::call_forward "[INTERNAL]  Forward
mode AD, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Integrator::getJacSparsityHierarchical "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::Integrator::rp "[INTERNAL] ";

%feature("docstring") casadi::Integrator::rq "[INTERNAL] ";

%feature("docstring") casadi::Integrator::codegen_decref "[INTERNAL]
Codegen decref for dependencies.

";

%feature("docstring") casadi::Integrator::monitored "[INTERNAL] ";

%feature("docstring") casadi::Integrator::rz "[INTERNAL] ";

%feature("docstring") casadi::Integrator::rx "[INTERNAL] ";

%feature("docstring") casadi::Integrator::get_stats "[INTERNAL]  Get all
statistics.

";

%feature("docstring") casadi::Integrator::get_min_in "[INTERNAL]  Get
smallest input value.

";

%feature("docstring") casadi::Integrator::init "[INTERNAL]  Initialize.

";

%feature("docstring") casadi::Integrator::replace_arg "[INTERNAL]  Replace
0-by-0 inputs.

";

%feature("docstring") casadi::Integrator::release "[INTERNAL]  Release a
memory object.

";

%feature("docstring") casadi::Integrator::sp_forward "[INTERNAL]  Propagate
sparsity forward.

";


// File: classcasadi_1_1Interpolant.xml
%feature("docstring") casadi::Interpolant::oracle "[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::Interpolant::codegen_declarations "[INTERNAL]
Generate code for the declarations of the C function.

";

%feature("docstring") casadi::Interpolant::size1_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::Interpolant::get_reltol "[INTERNAL]  Get
relative tolerance.

";

%feature("docstring") casadi::Interpolant::get_jacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Interpolant::get_function "[INTERNAL] ";

%feature("docstring") casadi::Interpolant::matching_arg "[INTERNAL]  Check
if input arguments that needs to be replaced.

";

%feature("docstring") casadi::Interpolant::mx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Interpolant::instruction_input "[INTERNAL]
Get the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::Interpolant::clear_mem "[INTERNAL]  Clear all
memory (called from destructor)

";

%feature("docstring") casadi::Interpolant::get_sparsity_in "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Interpolant::call_forward "[INTERNAL]
Forward mode AD, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Interpolant::codegen_meta "[INTERNAL]
Generate meta-information allowing a user to evaluate a generated function.

";

%feature("docstring") casadi::Interpolant::alloc_mem "[INTERNAL]  Create
memory block.

";

%feature("docstring") casadi::Interpolant::disp_more "[INTERNAL]  Print
more.

";

%feature("docstring") casadi::Interpolant::get_options "[INTERNAL]
Options.

";

%feature("docstring") casadi::Interpolant::sx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Interpolant::wrap "[INTERNAL]  Wrap in an
Function instance consisting of only one MX call.

";

%feature("docstring") casadi::Interpolant::alloc "[INTERNAL]  Ensure work
vectors long enough to evaluate function.

";

%feature("docstring") casadi::Interpolant::has_spfwd "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Interpolant::symbolic_output "[INTERNAL]  Get
a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::Interpolant::codegen_sparsities "[INTERNAL]
Codegen sparsities.

";

%feature("docstring") casadi::Interpolant::get_min_in "[INTERNAL]  Get
smallest input value.

";

%feature("docstring") casadi::Interpolant::instruction_MX "[INTERNAL]  get
MX expression associated with instruction

";

%feature("docstring") casadi::Interpolant::has_jacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Interpolant::n_nodes "[INTERNAL]  Number of
nodes in the algorithm.

";

%feature("docstring") casadi::Interpolant::finalize "[INTERNAL]  Finalize
the object creation.

";

%feature("docstring") casadi::Interpolant::get_reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::Interpolant::size1_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::Interpolant::replace_arg "[INTERNAL]  Replace
0-by-0 inputs.

";

%feature("docstring") casadi::Interpolant::get_sparsity_out "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Interpolant::has_codegen "[INTERNAL]  Is
codegen supported?

";

%feature("docstring") casadi::Interpolant::all_scalar "[INTERNAL]  Are all
inputs and outputs scalar.

";

%feature("docstring") casadi::Interpolant::alloc_arg "[INTERNAL]  Ensure
required length of arg field.

";

%feature("docstring") casadi::Interpolant::getJacSparsity "[INTERNAL]
Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Interpolant::memory "[INTERNAL]  Memory
objects.

";

%feature("docstring") casadi::Interpolant::reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::Interpolant::get_jacobian_sparsity "[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::Interpolant::alloc_res "[INTERNAL]  Ensure
required length of res field.

";

%feature("docstring") casadi::Interpolant::getJacSparsityHierarchical "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::Interpolant::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::Interpolant::get_forward "[INTERNAL]  Return
function that calculates forward derivatives forward(nfwd) returns a cached
instance if available, and calls  Function get_forward(int nfwd) if no
cached version is available.

";

%feature("docstring") casadi::Interpolant::nnz_in "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::Interpolant::getAtomicInput "

[DEPRECATED] Renamed instruction_index

";

%feature("docstring") casadi::Interpolant::codegen_decref "[INTERNAL]
Codegen decref for dependencies.

";

%feature("docstring") casadi::Interpolant::check_res "[INTERNAL]  Check if
output arguments have correct length and dimensions.

";

%feature("docstring") casadi::Interpolant::getAtomicOutput "

[DEPRECATED] Renamed instruction_output

";

%feature("docstring") casadi::Interpolant::adjViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::Interpolant::get_n_in "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::Interpolant::getJacSparsityHierarchicalSymm "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::Interpolant::sz_res "[INTERNAL]  Get required
length of res field.

";

%feature("docstring") casadi::Interpolant::get_name_in "[INTERNAL]  Names
of function input and outputs.

";

%feature("docstring") casadi::Interpolant::factory "[INTERNAL] ";

%feature("docstring") casadi::Interpolant::get_default_in "[INTERNAL]  Get
default input value.

";

%feature("docstring") casadi::Interpolant::nnz_out "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::Interpolant::export_code "[INTERNAL]  Export
function in a specific language.

";

%feature("docstring") casadi::Interpolant::n_instructions "[INTERNAL]  Get
the number of atomic operations.

";

%feature("docstring") casadi::Interpolant::sp_forward "[INTERNAL]
Propagate sparsity forward.

";

%feature("docstring") casadi::Interpolant::info "[INTERNAL]  Obtain
information about function

";

%feature("docstring") casadi::Interpolant::print_option "[INTERNAL]  Print
all information there is to know about a certain option.

";

%feature("docstring") casadi::Interpolant::free_mx "[INTERNAL]  Get free
variables ( MX)

";

%feature("docstring") casadi::Interpolant::get_max_in "[INTERNAL]  Get
largest input value.

";

%feature("docstring") casadi::Interpolant::is_a "[INTERNAL]  Check if the
function is of a particular type.

";

%feature("docstring") casadi::Interpolant::has_free "[INTERNAL]  Does the
function have free variables.

";

%feature("docstring") casadi::Interpolant::has_function "[INTERNAL] ";

%feature("docstring") casadi::Interpolant::set_temp "[INTERNAL]  Set the
(temporary) work vectors.

";

%feature("docstring") casadi::Interpolant::getJacSparsityGen "[INTERNAL]
Get the sparsity pattern, forward mode.

";

%feature("docstring") casadi::Interpolant::codegen_incref "[INTERNAL]
Codegen incref for dependencies.

";

%feature("docstring") casadi::Interpolant::replace_fseed "[INTERNAL]
Replace 0-by-0 forward seeds.

";

%feature("docstring") casadi::Interpolant::instruction_output "[INTERNAL]
Get the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::Interpolant::size2_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::Interpolant::codegen "[INTERNAL]  Generate
code the function.

";

%feature("docstring") casadi::Interpolant::set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::Interpolant::fwdViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::Interpolant::self "[INTERNAL]  Get a public
class instance.

";

%feature("docstring") casadi::Interpolant::get_n_out "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::Interpolant::has_reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::Interpolant::signature "[INTERNAL]  Code
generate the function.

";

%feature("docstring") casadi::Interpolant::sprint "[INTERNAL]  C-style
formatted printing to string.

";

%feature("docstring") casadi::Interpolant::alloc_w "[INTERNAL]  Ensure
required length of w field.

";

%feature("docstring") casadi::Interpolant::sparsity_jac "[INTERNAL]  Get,
if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Interpolant::instruction_constant "[INTERNAL]
Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::Interpolant::size_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::Interpolant::has_forward "[INTERNAL]  Return
function that calculates forward derivatives forward(nfwd) returns a cached
instance if available, and calls  Function get_forward(int nfwd) if no
cached version is available.

";

%feature("docstring") casadi::Interpolant::matching_res "[INTERNAL]  Check
if output arguments that needs to be replaced.

";

%feature("docstring") casadi::Interpolant::jacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Interpolant::call "[INTERNAL]   Call a
function, templated.

";

%feature("docstring") casadi::Interpolant::generate_lifted "[INTERNAL]
Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::Interpolant::mx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Interpolant::alloc_iw "[INTERNAL]  Ensure
required length of iw field.

";

%feature("docstring") casadi::Interpolant::init_mem "[INTERNAL]  Initalize
memory block.

";

%feature("docstring") casadi::Interpolant::free_mem "[INTERNAL]  Free
memory block.

";

%feature("docstring") casadi::Interpolant::eval "[INTERNAL]  Evaluate
numerically.

";

%feature("docstring") casadi::Interpolant::fwd_seed "[INTERNAL]  Symbolic
expressions for the forward seeds.

";

%feature("docstring") casadi::Interpolant::release "[INTERNAL]  Release a
memory object.

";

%feature("docstring") casadi::Interpolant::check_arg "[INTERNAL]  Check if
input arguments have correct length and dimensions.

";

%feature("docstring") casadi::Interpolant "[INTERNAL]  Internal class

C++ includes: interpolant_impl.hpp ";

%feature("docstring") casadi::Interpolant::ad_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::Interpolant::free_sx "[INTERNAL]  Get free
variables (SX)

";

%feature("docstring") casadi::Interpolant::sx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Interpolant::eval_mx "[INTERNAL]  Evaluate
with symbolic matrices.

";

%feature("docstring") casadi::Interpolant::slice "[INTERNAL]  returns a new
function with a selection of inputs/outputs of the original

";

%feature("docstring") casadi::Interpolant::size_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::Interpolant::forward "[INTERNAL]  Return
function that calculates forward derivatives forward(nfwd) returns a cached
instance if available, and calls  Function get_forward(int nfwd) if no
cached version is available.

";

%feature("docstring") casadi::Interpolant::which_depends "[INTERNAL]  Which
variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::Interpolant::sz_iw "[INTERNAL]  Get required
length of iw field.

";

%feature("docstring") casadi::Interpolant::has_sprev "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Interpolant::sp_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode, sparsity propagation.

";

%feature("docstring") casadi::Interpolant::sz_work "[INTERNAL]  Get number
of temporary variables needed.

";

%feature("docstring") casadi::Interpolant::call_reverse "[INTERNAL]
Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Interpolant::print_options "[INTERNAL]  Print
list of options.

";

%feature("docstring") casadi::Interpolant::replace_res "[INTERNAL]  Replace
0-by-0 outputs.

";

%feature("docstring") casadi::Interpolant::eval_dm "[INTERNAL]  Evaluate
with DM matrices.

";

%feature("docstring") casadi::Interpolant::sp_reverse "[INTERNAL]
Propagate sparsity backwards.

";

%feature("docstring") casadi::Interpolant::Interpolant "[INTERNAL]
Constructor.

";

%feature("docstring") casadi::Interpolant::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::Interpolant::call_gen "[INTERNAL]   Call a
function, overloaded.

";

%feature("docstring") casadi::Interpolant::index_in "[INTERNAL]  Get input
scheme index by name.

";

%feature("docstring") casadi::Interpolant::index_out "[INTERNAL]  Get
output scheme index by name.

";

%feature("docstring") casadi::Interpolant::sz_arg "[INTERNAL]  Get required
length of arg field.

";

%feature("docstring") casadi::Interpolant::~Interpolant "[INTERNAL]
Destructor.

";

%feature("docstring") casadi::Interpolant::codegen_body "[INTERNAL]
Generate code for the function body.

";

%feature("docstring") casadi::Interpolant::class_name "[INTERNAL]  Readable
name of the internal class.

";

%feature("docstring") casadi::Interpolant::symbolicAdjSeed "[INTERNAL]
Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::Interpolant::print "[INTERNAL]  C-style
formatted printing during evaluation.

";

%feature("docstring") casadi::Interpolant::definition "[INTERNAL]  Get
function signature: name:(inputs)->(outputs)

";

%feature("docstring") casadi::Interpolant::setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";

%feature("docstring") casadi::Interpolant::get_abstol "[INTERNAL]  Get
absolute tolerance.

";

%feature("docstring") casadi::Interpolant::jit_dependencies "[INTERNAL]
Jit dependencies.

";

%feature("docstring") casadi::Interpolant::checkout "[INTERNAL]  Checkout a
memory object.

";

%feature("docstring") casadi::Interpolant::get_stats "[INTERNAL]  Get all
statistics.

";

%feature("docstring") casadi::Interpolant::print_dimensions "[INTERNAL]
Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::Interpolant::init "[INTERNAL]  Initialize.

";

%feature("docstring") casadi::Interpolant::get_partition "[INTERNAL]  Get
the unidirectional or bidirectional partition.

";

%feature("docstring") casadi::Interpolant::eval_sx "[INTERNAL]  Evaluate
with symbolic scalars.

";

%feature("docstring") casadi::Interpolant::get_free "[INTERNAL]  Print free
variables.

";

%feature("docstring") casadi::Interpolant::instruction_id "[INTERNAL]  Get
an atomic operation operator index.

";

%feature("docstring") casadi::Interpolant::sz_w "[INTERNAL]  Get required
length of w field.

";

%feature("docstring") casadi::Interpolant::numel_in "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::Interpolant::generate_dependencies "[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring") casadi::Interpolant::uses_output "[INTERNAL]  Do the
derivative functions need nondifferentiated outputs?

";

%feature("docstring") casadi::Interpolant::has_derivative "[INTERNAL]  Can
derivatives be calculated in any way?

";

%feature("docstring") casadi::Interpolant::mapsum_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::Interpolant::disp "[INTERNAL]  Display
object.

";

%feature("docstring") casadi::Interpolant::get_name_out "[INTERNAL]  Names
of function input and outputs.

";

%feature("docstring") casadi::Interpolant::codegen_name "[INTERNAL]  Get
name in codegen.

";

%feature("docstring") casadi::Interpolant::getAdaptorSolverName "[INTERNAL]
Obtain solver name from Adaptor.

";

%feature("docstring") casadi::Interpolant::plugin_name "[INTERNAL] ";

%feature("docstring") casadi::Interpolant::construct "[INTERNAL]  Construct
Prepares the function for evaluation.

";

%feature("docstring") casadi::Interpolant::eval_gen "

>  int casadi::FunctionInternal::eval_gen(const double **arg, double **res, int *iw, double *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate numerically.

>  int casadi::FunctionInternal::eval_gen(const SXElem **arg, SXElem **res, int *iw, SXElem *w, void *mem) const

>  int casadi::FunctionInternal::eval_gen(const bvec_t **arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

%feature("docstring") casadi::Interpolant::replace_aseed "[INTERNAL]
Replace 0-by-0 reverse seeds.

";

%feature("docstring") casadi::Interpolant::numel_out "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::Interpolant::size2_out "[INTERNAL]
Input/output dimensions.

";


// File: classcasadi_1_1InterruptHandler.xml
%feature("docstring") casadi::InterruptHandler "[INTERNAL]  Takes care of
user interrupts (Ctrl+C)

This is an internal class.

Joris Gillis

C++ includes: casadi_interrupt.hpp ";


// File: classcasadi_1_1Inverse.xml


// File: classcasadi_1_1IOInstruction.xml


// File: classcasadi_1_1IpoptUserClass.xml
%feature("docstring") casadi::IpoptUserClass::get_starting_point "[INTERNAL]  Method to return the starting point for the algorithm

";

%feature("docstring") casadi::IpoptUserClass::finalize_solution "[INTERNAL]
This method is called when the algorithm is complete so the TNLP can
store/write the solution

";

%feature("docstring") casadi::IpoptUserClass "[INTERNAL] C++ includes:
ipopt_nlp.hpp ";

%feature("docstring")
casadi::IpoptUserClass::get_list_of_nonlinear_variables "[INTERNAL]
Specify which variables that appear in the Hessian

";

%feature("docstring") casadi::IpoptUserClass::eval_grad_f "[INTERNAL]
Method to return the gradient of the objective

";

%feature("docstring") casadi::IpoptUserClass::get_var_con_metadata "[INTERNAL]  Allows setting information about variables and constraints

";

%feature("docstring") casadi::IpoptUserClass::~IpoptUserClass "[INTERNAL]
";

%feature("docstring") casadi::IpoptUserClass::eval_g "[INTERNAL]  Method to
return the constraint residuals

";

%feature("docstring") casadi::IpoptUserClass::get_nlp_info "[INTERNAL]
Method to return some info about the nlp

";

%feature("docstring") casadi::IpoptUserClass::eval_f "[INTERNAL]  Method to
return the objective value

";

%feature("docstring")
casadi::IpoptUserClass::get_number_of_nonlinear_variables "[INTERNAL]
Specify the number of variables that appear in the Hessian

";

%feature("docstring") casadi::IpoptUserClass::eval_jac_g "[INTERNAL]
Method to return: 1) The structure of the Jacobian (if \"values\" is NULL)
2) The values of the Jacobian (if \"values\" is not NULL)

";

%feature("docstring") casadi::IpoptUserClass::finalize_metadata "[INTERNAL]
Retrieve information about variables and constraints

";

%feature("docstring") casadi::IpoptUserClass::get_bounds_info "[INTERNAL]
Method to return the bounds for my problem

";

%feature("docstring") casadi::IpoptUserClass::eval_h "[INTERNAL]  Method to
return: 1) The structure of the hessian of the Lagrangian (if \"values\" is
NULL) 2) The values of the hessian of the Lagrangian (if \"values\" is not
NULL)

";

%feature("docstring") casadi::IpoptUserClass::intermediate_callback "[INTERNAL]  This method is called at every iteration

";

%feature("docstring") casadi::IpoptUserClass::IpoptUserClass "[INTERNAL] ";


// File: classcasadi_1_1JitFunction.xml
%feature("docstring") casadi::JitFunction::codegen_incref "[INTERNAL]
Codegen incref for dependencies.

";

%feature("docstring") casadi::JitFunction::instruction_MX "[INTERNAL]  get
MX expression associated with instruction

";

%feature("docstring") casadi::JitFunction::get_name_out "[INTERNAL]  Names
of function input and outputs.

";

%feature("docstring") casadi::JitFunction::size1_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::JitFunction::sp_forward "[INTERNAL]
Propagate sparsity forward.

";

%feature("docstring") casadi::JitFunction::eval_dm "[INTERNAL]  Evaluate
with DM matrices.

";

%feature("docstring") casadi::JitFunction::get_n_in "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::JitFunction::check_res "[INTERNAL]  Check if
output arguments have correct length and dimensions.

";

%feature("docstring") casadi::JitFunction::get_options "[INTERNAL]
Options.

";

%feature("docstring") casadi::JitFunction::oracle "[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::JitFunction::has_function "[INTERNAL] ";

%feature("docstring") casadi::JitFunction::codegen "[INTERNAL]  Generate
code the function.

";

%feature("docstring") casadi::JitFunction::symbolic_output "[INTERNAL]  Get
a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::JitFunction::fwd_seed "[INTERNAL]  Symbolic
expressions for the forward seeds.

";

%feature("docstring") casadi::JitFunction::free_mx "[INTERNAL]  Get free
variables ( MX)

";

%feature("docstring") casadi::JitFunction::eval "[INTERNAL]  Evaluate
numerically.

";

%feature("docstring") casadi::JitFunction::clear_mem "[INTERNAL]  Clear all
memory (called from destructor)

";

%feature("docstring") casadi::JitFunction::sz_w "[INTERNAL]  Get required
length of w field.

";

%feature("docstring") casadi::JitFunction::sz_arg "[INTERNAL]  Get required
length of arg field.

";

%feature("docstring") casadi::JitFunction::n_nodes "[INTERNAL]  Number of
nodes in the algorithm.

";

%feature("docstring") casadi::JitFunction "[INTERNAL]

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
+------------------+-----------------+------------------+------------------+
| buffered         | OT_BOOL         | Buffer the       | casadi::JitFunct |
|                  |                 | calls, user does | ion              |
|                  |                 | not need to      |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| enable_fd        | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation by   |                  |
|                  |                 | finite           |                  |
|                  |                 | differencing.    |                  |
|                  |                 | [default:        |                  |
|                  |                 | false]]          |                  |
+------------------+-----------------+------------------+------------------+
| enable_forward   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using forward    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_jacobian  | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobians of all |                  |
|                  |                 | differentiable   |                  |
|                  |                 | outputs with     |                  |
|                  |                 | respect to all   |                  |
|                  |                 | differentiable   |                  |
|                  |                 | inputs - if      |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_reverse   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | transposed       |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using reverse    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| fd_method        | OT_STRING       | Method for       | casadi::Function |
|                  |                 | finite           | Internal         |
|                  |                 | differencing     |                  |
|                  |                 | [default         |                  |
|                  |                 | 'central']       |                  |
+------------------+-----------------+------------------+------------------+
| fd_options       | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | finite           |                  |
|                  |                 | difference       |                  |
|                  |                 | instance         |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| hess             | OT_STRING       | Function body    | casadi::JitFunct |
|                  |                 | for Hessian      | ion              |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| jac              | OT_STRING       | Function body    | casadi::JitFunct |
|                  |                 | for Jacobian     | ion              |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: jit_function.hpp ";

%feature("docstring") casadi::JitFunction::instruction_output "[INTERNAL]
Get the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::JitFunction::checkout "[INTERNAL]  Checkout a
memory object.

";

%feature("docstring") casadi::JitFunction::has_codegen "[INTERNAL]  Is
codegen supported?

";

%feature("docstring") casadi::JitFunction::numel_out "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::JitFunction::get_free "[INTERNAL]  Print free
variables.

";

%feature("docstring") casadi::JitFunction::get_reltol "[INTERNAL]  Get
relative tolerance.

";

%feature("docstring") casadi::JitFunction::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::JitFunction::getJacSparsityHierarchical "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::JitFunction::has_derivative "[INTERNAL]  Can
derivatives be calculated in any way?

";

%feature("docstring") casadi::JitFunction::get_stats "[INTERNAL]  Get all
statistics.

";

%feature("docstring") casadi::JitFunction::getJacSparsityHierarchicalSymm "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::JitFunction::jit_dependencies "[INTERNAL]
Jit dependencies.

";

%feature("docstring") casadi::JitFunction::print_options "[INTERNAL]  Print
list of options.

";

%feature("docstring") casadi::JitFunction::JitFunction "[INTERNAL]
Constructor.

";

%feature("docstring") casadi::JitFunction::release "[INTERNAL]  Release a
memory object.

";

%feature("docstring") casadi::JitFunction::ad_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::JitFunction::construct "[INTERNAL]  Construct
Prepares the function for evaluation.

";

%feature("docstring") casadi::JitFunction::eval_sx "[INTERNAL]  Evaluate
with symbolic scalars.

";

%feature("docstring") casadi::JitFunction::size_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::JitFunction::get_max_in "[INTERNAL]  Get
largest input value.

";

%feature("docstring") casadi::JitFunction::init "[INTERNAL]  Initialize.

";

%feature("docstring") casadi::JitFunction::get_default_in "[INTERNAL]  Get
default input value.

";

%feature("docstring") casadi::JitFunction::alloc_mem "[INTERNAL]  Create
memory block.

";

%feature("docstring") casadi::JitFunction::wrap "[INTERNAL]  Wrap in an
Function instance consisting of only one MX call.

";

%feature("docstring") casadi::JitFunction::instruction_constant "[INTERNAL]
Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::JitFunction::mx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::JitFunction::codegen_body "[INTERNAL]
Generate code for the function body.

";

%feature("docstring") casadi::JitFunction::alloc "[INTERNAL]  Ensure work
vectors long enough to evaluate function.

";

%feature("docstring") casadi::JitFunction::mapsum_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::JitFunction::generate_dependencies "[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring") casadi::JitFunction::has_sprev "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::JitFunction::forward "[INTERNAL]  Return
function that calculates forward derivatives forward(nfwd) returns a cached
instance if available, and calls  Function get_forward(int nfwd) if no
cached version is available.

";

%feature("docstring") casadi::JitFunction::set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::JitFunction::uses_output "[INTERNAL]  Do the
derivative functions need nondifferentiated outputs?

";

%feature("docstring") casadi::JitFunction::signature "[INTERNAL]  Code
generate the function.

";

%feature("docstring") casadi::JitFunction::has_reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::JitFunction::replace_arg "[INTERNAL]  Replace
0-by-0 inputs.

";

%feature("docstring") casadi::JitFunction::size2_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::JitFunction::call_gen "[INTERNAL]   Call a
function, overloaded.

";

%feature("docstring") casadi::JitFunction::adjViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::JitFunction::symbolicAdjSeed "[INTERNAL]
Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::JitFunction::fwdViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::JitFunction::size1_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::JitFunction::eval_gen "

>  int casadi::FunctionInternal::eval_gen(const double **arg, double **res, int *iw, double *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate numerically.

>  int casadi::FunctionInternal::eval_gen(const SXElem **arg, SXElem **res, int *iw, SXElem *w, void *mem) const

>  int casadi::FunctionInternal::eval_gen(const bvec_t **arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

%feature("docstring") casadi::JitFunction::mx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::JitFunction::sz_res "[INTERNAL]  Get required
length of res field.

";

%feature("docstring") casadi::JitFunction::codegen_decref "[INTERNAL]
Codegen decref for dependencies.

";

%feature("docstring") casadi::JitFunction::all_scalar "[INTERNAL]  Are all
inputs and outputs scalar.

";

%feature("docstring") casadi::JitFunction::get_n_out "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::JitFunction::codegen_name "[INTERNAL]  Get
name in codegen.

";

%feature("docstring") casadi::JitFunction::get_reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::JitFunction::disp "[INTERNAL]  Display
object.

";

%feature("docstring") casadi::JitFunction::factory "[INTERNAL] ";

%feature("docstring") casadi::JitFunction::memory "[INTERNAL]  Memory
objects.

";

%feature("docstring") casadi::JitFunction::getJacSparsity "[INTERNAL]
Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::JitFunction::has_jacobian "[INTERNAL]
Jacobian of all outputs with respect to all inputs.

";

%feature("docstring") casadi::JitFunction::reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::JitFunction::nnz_out "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::JitFunction::get_function "[INTERNAL] ";

%feature("docstring") casadi::JitFunction::setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";

%feature("docstring") casadi::JitFunction::index_in "[INTERNAL]  Get input
scheme index by name.

";

%feature("docstring") casadi::JitFunction::disp_more "[INTERNAL]  Print
more.

";

%feature("docstring") casadi::JitFunction::codegen_sparsities "[INTERNAL]
Codegen sparsities.

";

%feature("docstring") casadi::JitFunction::size2_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::JitFunction::instruction_input "[INTERNAL]
Get the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::JitFunction::sz_work "[INTERNAL]  Get number
of temporary variables needed.

";

%feature("docstring") casadi::JitFunction::class_name "[INTERNAL]  Get type
name.

";

%feature("docstring") casadi::JitFunction::call_reverse "[INTERNAL]
Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::JitFunction::nnz_in "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::JitFunction::alloc_res "[INTERNAL]  Ensure
required length of res field.

";

%feature("docstring") casadi::JitFunction::generate_lifted "[INTERNAL]
Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::JitFunction::get_partition "[INTERNAL]  Get
the unidirectional or bidirectional partition.

";

%feature("docstring") casadi::JitFunction::sparsity_jac "[INTERNAL]  Get,
if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::JitFunction::getAtomicOutput "

[DEPRECATED] Renamed instruction_output

";

%feature("docstring") casadi::JitFunction::sx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::JitFunction::matching_res "[INTERNAL]  Check
if output arguments that needs to be replaced.

";

%feature("docstring") casadi::JitFunction::print "[INTERNAL]  C-style
formatted printing during evaluation.

";

%feature("docstring") casadi::JitFunction::init_mem "[INTERNAL]  Initalize
memory block.

";

%feature("docstring") casadi::JitFunction::instruction_id "[INTERNAL]  Get
an atomic operation operator index.

";

%feature("docstring") casadi::JitFunction::call_forward "[INTERNAL]
Forward mode AD, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::JitFunction::slice "[INTERNAL]  returns a new
function with a selection of inputs/outputs of the original

";

%feature("docstring") casadi::JitFunction::n_instructions "[INTERNAL]  Get
the number of atomic operations.

";

%feature("docstring") casadi::JitFunction::has_forward "[INTERNAL]  Return
function that calculates forward derivatives forward(nfwd) returns a cached
instance if available, and calls  Function get_forward(int nfwd) if no
cached version is available.

";

%feature("docstring") casadi::JitFunction::sp_reverse "[INTERNAL]
Propagate sparsity backwards.

";

%feature("docstring") casadi::JitFunction::size_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::JitFunction::which_depends "[INTERNAL]  Which
variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::JitFunction::getAtomicInput "

[DEPRECATED] Renamed instruction_index

";

%feature("docstring") casadi::JitFunction::get_forward "[INTERNAL]  Return
function that calculates forward derivatives forward(nfwd) returns a cached
instance if available, and calls  Function get_forward(int nfwd) if no
cached version is available.

";

%feature("docstring") casadi::JitFunction::alloc_iw "[INTERNAL]  Ensure
required length of iw field.

";

%feature("docstring") casadi::JitFunction::alloc_arg "[INTERNAL]  Ensure
required length of arg field.

";

%feature("docstring") casadi::JitFunction::codegen_meta "[INTERNAL]
Generate meta-information allowing a user to evaluate a generated function.

";

%feature("docstring") casadi::JitFunction::print_dimensions "[INTERNAL]
Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::JitFunction::get_name_in "[INTERNAL]  Names
of function input and outputs.

";

%feature("docstring") casadi::JitFunction::definition "[INTERNAL]  Get
function signature: name:(inputs)->(outputs)

";

%feature("docstring") casadi::JitFunction::getAdaptorSolverName "[INTERNAL]
Obtain solver name from Adaptor.

";

%feature("docstring") casadi::JitFunction::numel_in "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::JitFunction::sz_iw "[INTERNAL]  Get required
length of iw field.

";

%feature("docstring") casadi::JitFunction::is_a "[INTERNAL]  Check if the
function is of a particular type.

";

%feature("docstring") casadi::JitFunction::replace_fseed "[INTERNAL]
Replace 0-by-0 forward seeds.

";

%feature("docstring") casadi::JitFunction::sp_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode, sparsity propagation.

";

%feature("docstring") casadi::JitFunction::free_sx "[INTERNAL]  Get free
variables (SX)

";

%feature("docstring") casadi::JitFunction::free_mem "[INTERNAL]  Free
memory block.

";

%feature("docstring") casadi::JitFunction::~JitFunction "[INTERNAL]
Destructor.

";

%feature("docstring") casadi::JitFunction::get_abstol "[INTERNAL]  Get
absolute tolerance.

";

%feature("docstring") casadi::JitFunction::codegen_declarations "[INTERNAL]
Generate code for the declarations of the C function.

";

%feature("docstring") casadi::JitFunction::matching_arg "[INTERNAL]  Check
if input arguments that needs to be replaced.

";

%feature("docstring") casadi::JitFunction::jacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::JitFunction::replace_res "[INTERNAL]  Replace
0-by-0 outputs.

";

%feature("docstring") casadi::JitFunction::alloc_w "[INTERNAL]  Ensure
required length of w field.

";

%feature("docstring") casadi::JitFunction::eval_mx "[INTERNAL]  Evaluate
with symbolic matrices.

";

%feature("docstring") casadi::JitFunction::check_arg "[INTERNAL]  Check if
input arguments have correct length and dimensions.

";

%feature("docstring") casadi::JitFunction::set_temp "[INTERNAL]  Set the
(temporary) work vectors.

";

%feature("docstring") casadi::JitFunction::index_out "[INTERNAL]  Get
output scheme index by name.

";

%feature("docstring") casadi::JitFunction::print_option "[INTERNAL]  Print
all information there is to know about a certain option.

";

%feature("docstring") casadi::JitFunction::has_spfwd "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::JitFunction::get_min_in "[INTERNAL]  Get
smallest input value.

";

%feature("docstring") casadi::JitFunction::self "[INTERNAL]  Get a public
class instance.

";

%feature("docstring") casadi::JitFunction::get_jacobian_sparsity "[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::JitFunction::replace_aseed "[INTERNAL]
Replace 0-by-0 reverse seeds.

";

%feature("docstring") casadi::JitFunction::get_sparsity_in "[INTERNAL]  Get
sparsity of a given input.

";

%feature("docstring") casadi::JitFunction::call "[INTERNAL]   Call a
function, templated.

";

%feature("docstring") casadi::JitFunction::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::JitFunction::get_sparsity_out "[INTERNAL]
Get sparsity of a given output.

";

%feature("docstring") casadi::JitFunction::has_free "[INTERNAL]  Does the
function have free variables.

";

%feature("docstring") casadi::JitFunction::get_jacobian "[INTERNAL]
Jacobian of all outputs with respect to all inputs.

";

%feature("docstring") casadi::JitFunction::finalize "[INTERNAL]  Finalize
the object creation.

";

%feature("docstring") casadi::JitFunction::sprint "[INTERNAL]  C-style
formatted printing to string.

";

%feature("docstring") casadi::JitFunction::getJacSparsityGen "[INTERNAL]
Get the sparsity pattern, forward mode.

";

%feature("docstring") casadi::JitFunction::sx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::JitFunction::info "[INTERNAL]  Obtain
information about function

";

%feature("docstring") casadi::JitFunction::export_code "[INTERNAL]  Export
function in a specific language.

";


// File: classcasadi_1_1KeyboardInterruptException.xml
%feature("docstring") casadi::KeyboardInterruptException::what "throw ()
Display error.

";

%feature("docstring")
casadi::KeyboardInterruptException::~KeyboardInterruptException "throw ()
Destructor.

";

%feature("docstring")
casadi::KeyboardInterruptException::KeyboardInterruptException "

Default constructor.

";

%feature("docstring") casadi::KeyboardInterruptException "C++ includes:
exception.hpp ";


// File: classcasadi_1_1LapackLu.xml
%feature("docstring") casadi::LapackLu::nfact "[INTERNAL]  Numeric
factorization.

";

%feature("docstring") casadi::LapackLu::nrow "[INTERNAL]  Get sparsity
pattern.

";

%feature("docstring") casadi::LapackLu::solve "[INTERNAL] ";

%feature("docstring") casadi::LapackLu::init "[INTERNAL]  Initialize the
solver.

";

%feature("docstring") casadi::LapackLu::~LapackLu "[INTERNAL]  Destructor.

";

%feature("docstring") casadi::LapackLu::construct "[INTERNAL]  Construct
Prepares the function for evaluation.

";

%feature("docstring") casadi::LapackLu::init_mem "[INTERNAL]  Initalize
memory block.

";

%feature("docstring") casadi::LapackLu::memory "[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::LapackLu::sfact "[INTERNAL] ";

%feature("docstring") casadi::LapackLu::generate "[INTERNAL]  Generate C
code.

";

%feature("docstring") casadi::LapackLu::linsol_eval_sx "[INTERNAL]
Evaluate SX, possibly transposed.

";

%feature("docstring") casadi::LapackLu::ncol "[INTERNAL] ";

%feature("docstring") casadi::LapackLu::clear_mem "[INTERNAL]  Clear all
memory (called from destructor)

";

%feature("docstring") casadi::LapackLu::LapackLu "[INTERNAL] ";

%feature("docstring") casadi::LapackLu::disp "[INTERNAL]  Display object.

";

%feature("docstring") casadi::LapackLu::free_mem "[INTERNAL]  Free memory
block.

";

%feature("docstring") casadi::LapackLu::finalize "[INTERNAL]  Finalize the
object creation This function, which visits the class hierarchy in reverse
order is run after init() has been completed.

";

%feature("docstring") casadi::LapackLu::checkout "[INTERNAL]  Checkout a
memory object.

";

%feature("docstring") casadi::LapackLu::rank "[INTERNAL]   Matrix rank.

";

%feature("docstring") casadi::LapackLu::colind "[INTERNAL] ";

%feature("docstring") casadi::LapackLu::alloc_mem "[INTERNAL]  Create
memory block.

";

%feature("docstring") casadi::LapackLu::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::LapackLu::nnz "[INTERNAL] ";

%feature("docstring") casadi::LapackLu::release "[INTERNAL]  Release a
memory object.

";

%feature("docstring") casadi::LapackLu "

'lapacklu' plugin for Linsol

This class solves the linear system A.x=b by making an LU factorization of
A: A = L.U, with L lower and U upper triangular

>List of available options

+-----------------------------+---------+----------------------------------+
|             Id              |  Type   |           Description            |
+=============================+=========+==================================+
| allow_equilibration_failure | OT_BOOL | Non-fatal error when             |
|                             |         | equilibration fails              |
+-----------------------------+---------+----------------------------------+
| equilibration               | OT_BOOL | Equilibrate the matrix           |
+-----------------------------+---------+----------------------------------+

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
+------------------+-----------------+------------------+------------------+
| allow_equilibrat | OT_BOOL         | Non-fatal error  | casadi::LapackLu |
| ion_failure      |                 | when             |                  |
|                  |                 | equilibration    |                  |
|                  |                 | fails            |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| enable_fd        | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation by   |                  |
|                  |                 | finite           |                  |
|                  |                 | differencing.    |                  |
|                  |                 | [default:        |                  |
|                  |                 | false]]          |                  |
+------------------+-----------------+------------------+------------------+
| enable_forward   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using forward    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_jacobian  | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobians of all |                  |
|                  |                 | differentiable   |                  |
|                  |                 | outputs with     |                  |
|                  |                 | respect to all   |                  |
|                  |                 | differentiable   |                  |
|                  |                 | inputs - if      |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_reverse   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | transposed       |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using reverse    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| equilibration    | OT_BOOL         | Equilibrate the  | casadi::LapackLu |
|                  |                 | matrix           |                  |
+------------------+-----------------+------------------+------------------+
| fd_method        | OT_STRING       | Method for       | casadi::Function |
|                  |                 | finite           | Internal         |
|                  |                 | differencing     |                  |
|                  |                 | [default         |                  |
|                  |                 | 'central']       |                  |
+------------------+-----------------+------------------+------------------+
| fd_options       | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | finite           |                  |
|                  |                 | difference       |                  |
|                  |                 | instance         |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: lapack_lu.hpp ";

%feature("docstring") casadi::LapackLu::row "[INTERNAL] ";

%feature("docstring") casadi::LapackLu::get_options "[INTERNAL]  Options.

";

%feature("docstring") casadi::LapackLu::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::LapackLu::disp_more "[INTERNAL]  Print more.

";

%feature("docstring") casadi::LapackLu::neig "[INTERNAL]  Number of
negative eigenvalues.

";


// File: classcasadi_1_1LapackQr.xml
%feature("docstring") casadi::LapackQr::get_options "[INTERNAL]  Options.

";

%feature("docstring") casadi::LapackQr::free_mem "[INTERNAL]  Free memory
block.

";

%feature("docstring") casadi::LapackQr::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::LapackQr::memory "[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::LapackQr::sfact "[INTERNAL] ";

%feature("docstring") casadi::LapackQr::alloc_mem "[INTERNAL]  Create
memory block.

";

%feature("docstring") casadi::LapackQr::disp_more "[INTERNAL]  Print more.

";

%feature("docstring") casadi::LapackQr::ncol "[INTERNAL] ";

%feature("docstring") casadi::LapackQr::disp "[INTERNAL]  Display object.

";

%feature("docstring") casadi::LapackQr::finalize "[INTERNAL]  Finalize the
object creation This function, which visits the class hierarchy in reverse
order is run after init() has been completed.

";

%feature("docstring") casadi::LapackQr::solve_batch "[INTERNAL] ";

%feature("docstring") casadi::LapackQr::checkout "[INTERNAL]  Checkout a
memory object.

";

%feature("docstring") casadi::LapackQr::rank "[INTERNAL]   Matrix rank.

";

%feature("docstring") casadi::LapackQr::colind "[INTERNAL] ";

%feature("docstring") casadi::LapackQr::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::LapackQr::nnz "[INTERNAL] ";

%feature("docstring") casadi::LapackQr::release "[INTERNAL]  Release a
memory object.

";

%feature("docstring") casadi::LapackQr "

'lapackqr' plugin for Linsol

This class solves the linear system A.x=b by making an QR factorization of
A: A = Q.R, with Q orthogonal and R upper triangular

>List of available options

+----------+--------+------------------------------------------------------+
|    Id    |  Type  |                     Description                      |
+==========+========+======================================================+
| max_nrhs | OT_INT | Maximum number of right-hand-sides that get          |
|          |        | processed in a single pass [default:10].             |
+----------+--------+------------------------------------------------------+

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| enable_fd        | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation by   |                  |
|                  |                 | finite           |                  |
|                  |                 | differencing.    |                  |
|                  |                 | [default:        |                  |
|                  |                 | false]]          |                  |
+------------------+-----------------+------------------+------------------+
| enable_forward   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using forward    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_jacobian  | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobians of all |                  |
|                  |                 | differentiable   |                  |
|                  |                 | outputs with     |                  |
|                  |                 | respect to all   |                  |
|                  |                 | differentiable   |                  |
|                  |                 | inputs - if      |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_reverse   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | transposed       |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using reverse    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| fd_method        | OT_STRING       | Method for       | casadi::Function |
|                  |                 | finite           | Internal         |
|                  |                 | differencing     |                  |
|                  |                 | [default         |                  |
|                  |                 | 'central']       |                  |
+------------------+-----------------+------------------+------------------+
| fd_options       | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | finite           |                  |
|                  |                 | difference       |                  |
|                  |                 | instance         |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| max_nrhs         | OT_INT          | Maximum number   | casadi::LapackQr |
|                  |                 | of right-hand-   |                  |
|                  |                 | sides that get   |                  |
|                  |                 | processed in a   |                  |
|                  |                 | single pass      |                  |
|                  |                 | [default:10].    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: lapack_qr.hpp ";

%feature("docstring") casadi::LapackQr::row "[INTERNAL] ";

%feature("docstring") casadi::LapackQr::init_mem "[INTERNAL]  Initalize
memory block.

";

%feature("docstring") casadi::LapackQr::linsol_eval_sx "[INTERNAL]
Evaluate SX, possibly transposed.

";

%feature("docstring") casadi::LapackQr::neig "[INTERNAL]  Number of
negative eigenvalues.

";

%feature("docstring") casadi::LapackQr::generate "[INTERNAL]  Generate C
code.

";

%feature("docstring") casadi::LapackQr::clear_mem "[INTERNAL]  Clear all
memory (called from destructor)

";

%feature("docstring") casadi::LapackQr::LapackQr "[INTERNAL] ";

%feature("docstring") casadi::LapackQr::class_name "[INTERNAL]  Readable
name of the internal class.

";

%feature("docstring") casadi::LapackQr::nfact "[INTERNAL]  Numeric
factorization.

";

%feature("docstring") casadi::LapackQr::nrow "[INTERNAL]  Get sparsity
pattern.

";

%feature("docstring") casadi::LapackQr::solve "[INTERNAL] ";

%feature("docstring") casadi::LapackQr::~LapackQr "[INTERNAL] ";

%feature("docstring") casadi::LapackQr::init "[INTERNAL]  Initialize.

";

%feature("docstring") casadi::LapackQr::construct "[INTERNAL]  Construct
Prepares the function for evaluation.

";

%feature("docstring") casadi::LapackQr::plugin_name "[INTERNAL] ";


// File: classcasadi_1_1LinearInterpolant.xml
%feature("docstring") casadi::LinearInterpolant::get_sparsity_out "[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::LinearInterpolant::print "[INTERNAL]  C-style
formatted printing during evaluation.

";

%feature("docstring") casadi::LinearInterpolant::is_a "[INTERNAL]  Check if
the function is of a particular type.

";

%feature("docstring") casadi::LinearInterpolant::replace_res "[INTERNAL]
Replace 0-by-0 outputs.

";

%feature("docstring") casadi::LinearInterpolant::slice "[INTERNAL]  returns
a new function with a selection of inputs/outputs of the original

";

%feature("docstring") casadi::LinearInterpolant::n_instructions "[INTERNAL]
Get the number of atomic operations.

";

%feature("docstring") casadi::LinearInterpolant::check_arg "[INTERNAL]
Check if input arguments have correct length and dimensions.

";

%feature("docstring") casadi::LinearInterpolant::sz_w "[INTERNAL]  Get
required length of w field.

";

%feature("docstring") casadi::LinearInterpolant::get_abstol "[INTERNAL]
Get absolute tolerance.

";

%feature("docstring") casadi::LinearInterpolant::alloc_iw "[INTERNAL]
Ensure required length of iw field.

";

%feature("docstring") casadi::LinearInterpolant::size1_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::LinearInterpolant::call_reverse "[INTERNAL]
Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::LinearInterpolant::generate_lifted "[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::LinearInterpolant::sp_weight "[INTERNAL]
Weighting factor for chosing forward/reverse mode, sparsity propagation.

";

%feature("docstring") casadi::LinearInterpolant::codegen_sparsities "[INTERNAL]  Codegen sparsities.

";

%feature("docstring") casadi::LinearInterpolant::mapsum_mx "[INTERNAL]
Parallel evaluation.

";

%feature("docstring") casadi::LinearInterpolant::mx_in "[INTERNAL]  Get
function input(s) and output(s)

";

%feature("docstring") casadi::LinearInterpolant::get_jacobian "[INTERNAL]
Full Jacobian.

";

%feature("docstring") casadi::LinearInterpolant::replace_fseed "[INTERNAL]
Replace 0-by-0 forward seeds.

";

%feature("docstring") casadi::LinearInterpolant::instruction_id "[INTERNAL]
Get an atomic operation operator index.

";

%feature("docstring") casadi::LinearInterpolant::symbolic_output "[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::LinearInterpolant::has_jacobian "[INTERNAL]
Full Jacobian.

";

%feature("docstring") casadi::LinearInterpolant::size2_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::LinearInterpolant::sprint "[INTERNAL]
C-style formatted printing to string.

";

%feature("docstring") casadi::LinearInterpolant::weak "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring") casadi::LinearInterpolant::sx_in "[INTERNAL]  Get
function input(s) and output(s)

";

%feature("docstring") casadi::LinearInterpolant::alloc_mem "[INTERNAL]
Create memory block.

";

%feature("docstring") casadi::LinearInterpolant::instruction_output "[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::LinearInterpolant::free_mx "[INTERNAL]  Get
free variables ( MX)

";

%feature("docstring") casadi::LinearInterpolant::get_forward "[INTERNAL]
Return function that calculates forward derivatives forward(nfwd) returns a
cached instance if available, and calls  Function get_forward(int nfwd) if
no cached version is available.

";

%feature("docstring") casadi::LinearInterpolant::index_out "[INTERNAL]  Get
output scheme index by name.

";

%feature("docstring") casadi::LinearInterpolant::get_function "[INTERNAL]
";

%feature("docstring") casadi::LinearInterpolant::memory "[INTERNAL]  Memory
objects.

";

%feature("docstring") casadi::LinearInterpolant::get_partition "[INTERNAL]
Get the unidirectional or bidirectional partition.

";

%feature("docstring") casadi::LinearInterpolant::size_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::LinearInterpolant::get_jacobian_sparsity "[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::LinearInterpolant::alloc "[INTERNAL]  Ensure
work vectors long enough to evaluate function.

";

%feature("docstring") casadi::LinearInterpolant::get_n_in "[INTERNAL]
Number of function inputs and outputs.

";

%feature("docstring") casadi::LinearInterpolant::has_derivative "[INTERNAL]
Can derivatives be calculated in any way?

";

%feature("docstring") casadi::LinearInterpolant::print_options "[INTERNAL]
Print list of options.

";

%feature("docstring") casadi::LinearInterpolant::sx_out "[INTERNAL]  Get
function input(s) and output(s)

";

%feature("docstring") casadi::LinearInterpolant::getCount "[INTERNAL]  Get
the reference count.

";

%feature("docstring") casadi::LinearInterpolant::free_mem "[INTERNAL]  Free
memory block.

";

%feature("docstring") casadi::LinearInterpolant::nnz_in "[INTERNAL]  Number
of input/output nonzeros.

";

%feature("docstring") casadi::LinearInterpolant::which_depends "[INTERNAL]
Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::LinearInterpolant::size_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::LinearInterpolant::print_option "[INTERNAL]
Print all information there is to know about a certain option.

";

%feature("docstring") casadi::LinearInterpolant::forward "[INTERNAL]
Return function that calculates forward derivatives forward(nfwd) returns a
cached instance if available, and calls  Function get_forward(int nfwd) if
no cached version is available.

";

%feature("docstring") casadi::LinearInterpolant::symbolicAdjSeed "[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::LinearInterpolant::codegen "[INTERNAL]
Generate code the function.

";

%feature("docstring") casadi::LinearInterpolant::instruction_input "[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::LinearInterpolant::eval_mx "[INTERNAL]
Evaluate with symbolic matrices.

";

%feature("docstring") casadi::LinearInterpolant::eval_gen "

>  int casadi::FunctionInternal::eval_gen(const double **arg, double **res, int *iw, double *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate numerically.

>  int casadi::FunctionInternal::eval_gen(const SXElem **arg, SXElem **res, int *iw, SXElem *w, void *mem) const

>  int casadi::FunctionInternal::eval_gen(const bvec_t **arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

%feature("docstring") casadi::LinearInterpolant::disp_more "[INTERNAL]
Print more.

";

%feature("docstring") casadi::LinearInterpolant::construct "[INTERNAL]
Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::LinearInterpolant::sz_iw "[INTERNAL]  Get
required length of iw field.

";

%feature("docstring") casadi::LinearInterpolant::sz_arg "[INTERNAL]  Get
required length of arg field.

";

%feature("docstring") casadi::LinearInterpolant::free_sx "[INTERNAL]  Get
free variables (SX)

";

%feature("docstring") casadi::LinearInterpolant::set_work "[INTERNAL]  Set
the (persistent) work vectors.

";

%feature("docstring") casadi::LinearInterpolant::matching_arg "[INTERNAL]
Check if input arguments that needs to be replaced.

";

%feature("docstring") casadi::LinearInterpolant::alloc_res "[INTERNAL]
Ensure required length of res field.

";

%feature("docstring") casadi::LinearInterpolant::has_spfwd "[INTERNAL]  Is
the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::LinearInterpolant::init "[INTERNAL]
Initialize.

";

%feature("docstring") casadi::LinearInterpolant::codegen_incref "[INTERNAL]
Codegen incref for dependencies.

";

%feature("docstring") casadi::LinearInterpolant::has_sprev "[INTERNAL]  Is
the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::LinearInterpolant::all_scalar "[INTERNAL]
Are all inputs and outputs scalar.

";

%feature("docstring") casadi::LinearInterpolant::n_nodes "[INTERNAL]
Number of nodes in the algorithm.

";

%feature("docstring") casadi::LinearInterpolant::jit_dependencies "[INTERNAL]  Jit dependencies.

";

%feature("docstring") casadi::LinearInterpolant::get_max_in "[INTERNAL]
Get largest input value.

";

%feature("docstring") casadi::LinearInterpolant::get_name_out "[INTERNAL]
Names of function input and outputs.

";

%feature("docstring") casadi::LinearInterpolant::get_default_in "[INTERNAL]
Get default input value.

";

%feature("docstring") casadi::LinearInterpolant::signature "[INTERNAL]
Code generate the function.

";

%feature("docstring") casadi::LinearInterpolant::LinearInterpolant "[INTERNAL] ";

%feature("docstring") casadi::LinearInterpolant::sz_res "[INTERNAL]  Get
required length of res field.

";

%feature("docstring") casadi::LinearInterpolant::definition "[INTERNAL]
Get function signature: name:(inputs)->(outputs)

";

%feature("docstring") casadi::LinearInterpolant::instruction_MX "[INTERNAL]
get MX expression associated with instruction

";

%feature("docstring") casadi::LinearInterpolant::getJacSparsityGen "[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring") casadi::LinearInterpolant::instruction_constant "[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::LinearInterpolant::replace_aseed "[INTERNAL]
Replace 0-by-0 reverse seeds.

";

%feature("docstring") casadi::LinearInterpolant::ad_weight "[INTERNAL]
Weighting factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::LinearInterpolant::sz_work "[INTERNAL]  Get
number of temporary variables needed.

";

%feature("docstring") casadi::LinearInterpolant::has_codegen "[INTERNAL]
Is codegen supported?

";

%feature("docstring") casadi::LinearInterpolant::release "[INTERNAL]
Release a memory object.

";

%feature("docstring") casadi::LinearInterpolant::codegen_declarations "[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring") casadi::LinearInterpolant::get_free "[INTERNAL]
Print free variables.

";

%feature("docstring") casadi::LinearInterpolant::reverse "[INTERNAL]
Return function that calculates adjoint derivatives reverse(nadj) returns a
cached instance if available, and calls  Function get_reverse(int nadj) if
no cached version is available.

";

%feature("docstring") casadi::LinearInterpolant::get_name_in "[INTERNAL]
Names of function input and outputs.

";

%feature("docstring") casadi::LinearInterpolant::wrap "[INTERNAL]  Wrap in
an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::LinearInterpolant::export_code "[INTERNAL]
Export function in a specific language.

";

%feature("docstring") casadi::LinearInterpolant::sp_forward "[INTERNAL]
Propagate sparsity forward.

";

%feature("docstring") casadi::LinearInterpolant::alloc_arg "[INTERNAL]
Ensure required length of arg field.

";

%feature("docstring") casadi::LinearInterpolant::mx_out "[INTERNAL]  Get
function input(s) and output(s)

";

%feature("docstring") casadi::LinearInterpolant::has_reverse "[INTERNAL]
Return function that calculates adjoint derivatives reverse(nadj) returns a
cached instance if available, and calls  Function get_reverse(int nadj) if
no cached version is available.

";

%feature("docstring") casadi::LinearInterpolant::clear_mem "[INTERNAL]
Clear all memory (called from destructor)

";

%feature("docstring") casadi::LinearInterpolant::getAtomicInput "

[DEPRECATED] Renamed instruction_index

";

%feature("docstring") casadi::LinearInterpolant::generate_dependencies "[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring") casadi::LinearInterpolant::uses_output "[INTERNAL]
Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring") casadi::LinearInterpolant::plugin_name "[INTERNAL] ";

%feature("docstring") casadi::LinearInterpolant::factory "[INTERNAL] ";

%feature("docstring") casadi::LinearInterpolant::info "[INTERNAL]  Obtain
information about function

";

%feature("docstring") casadi::LinearInterpolant::get_min_in "[INTERNAL]
Get smallest input value.

";

%feature("docstring") casadi::LinearInterpolant::index_in "[INTERNAL]  Get
input scheme index by name.

";

%feature("docstring") casadi::LinearInterpolant::get_n_out "[INTERNAL]
Number of function inputs and outputs.

";

%feature("docstring")
casadi::LinearInterpolant::getJacSparsityHierarchicalSymm "[INTERNAL]  A
flavor of getJacSparsity that does hierarchical block structure recognition
for symmetric Jacobians

";

%feature("docstring") casadi::LinearInterpolant::call_forward "[INTERNAL]
Forward mode AD, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::LinearInterpolant::get_reverse "[INTERNAL]
Return function that calculates adjoint derivatives reverse(nadj) returns a
cached instance if available, and calls  Function get_reverse(int nadj) if
no cached version is available.

";

%feature("docstring") casadi::LinearInterpolant::setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";

%feature("docstring") casadi::LinearInterpolant::nnz_out "[INTERNAL]
Number of input/output nonzeros.

";

%feature("docstring") casadi::LinearInterpolant "

'linear' plugin for Interpolant Implements a multilinear interpolant: For
1D, the interpolating polynomial will be linear. For 2D, the interpolating
polynomial will be bilinear, etc.

>List of available options

+-------------+-----------------+------------------------------------------+
|     Id      |      Type       |               Description                |
+=============+=================+==========================================+
| lookup_mode | OT_STRINGVECTOR | Sets, for each grid dimenion, the lookup |
|             |                 | algorithm used to find the correct       |
|             |                 | index. 'linear' uses a for-loop + break; |
|             |                 | 'exact' uses floored division (only for  |
|             |                 | uniform grids).                          |
+-------------+-----------------+------------------------------------------+

Joel Andersson

>List of available options

+-------------+-----------------+---------------------+--------------------+
|     Id      |      Type       |     Description     |      Used in       |
+=============+=================+=====================+====================+
| lookup_mode | OT_STRINGVECTOR | Sets, for each grid | casadi::LinearInte |
|             |                 | dimenion, the       | rpolant            |
|             |                 | lookup algorithm    |                    |
|             |                 | used to find the    |                    |
|             |                 | correct index.      |                    |
|             |                 | 'linear' uses a     |                    |
|             |                 | for-loop + break;   |                    |
|             |                 | 'exact' uses        |                    |
|             |                 | floored division    |                    |
|             |                 | (only for uniform   |                    |
|             |                 | grids).             |                    |
+-------------+-----------------+---------------------+--------------------+

Diagrams
--------



C++ includes: linear_interpolant.hpp ";

%feature("docstring") casadi::LinearInterpolant::sp_reverse "[INTERNAL]
Propagate sparsity backwards.

";

%feature("docstring") casadi::LinearInterpolant::eval_dm "[INTERNAL]
Evaluate with DM matrices.

";

%feature("docstring") casadi::LinearInterpolant::codegen_decref "[INTERNAL]
Codegen decref for dependencies.

";

%feature("docstring") casadi::LinearInterpolant::size2_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::LinearInterpolant::has_forward "[INTERNAL]
Return function that calculates forward derivatives forward(nfwd) returns a
cached instance if available, and calls  Function get_forward(int nfwd) if
no cached version is available.

";

%feature("docstring") casadi::LinearInterpolant::disp "[INTERNAL]  Display
object.

";

%feature("docstring") casadi::LinearInterpolant::numel_in "[INTERNAL]
Number of input/output elements.

";

%feature("docstring") casadi::LinearInterpolant::finalize "[INTERNAL]
Finalize the object creation.

";

%feature("docstring") casadi::LinearInterpolant::getJacSparsityHierarchical
"[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::LinearInterpolant::eval_sx "[INTERNAL]
Evaluate with symbolic scalars.

";

%feature("docstring") casadi::LinearInterpolant::class_name "[INTERNAL]
Readable name of the internal class.

";

%feature("docstring") casadi::LinearInterpolant::getAdaptorSolverName "[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring") casadi::LinearInterpolant::sparsity_jac "[INTERNAL]
Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::LinearInterpolant::numel_out "[INTERNAL]
Number of input/output elements.

";

%feature("docstring") casadi::LinearInterpolant::codegen_name "[INTERNAL]
Get name in codegen.

";

%feature("docstring") casadi::LinearInterpolant::has_free "[INTERNAL]  Does
the function have free variables.

";

%feature("docstring") casadi::LinearInterpolant::call_gen "[INTERNAL]
Call a function, overloaded.

";

%feature("docstring") casadi::LinearInterpolant::call "[INTERNAL]   Call a
function, templated.

";

%feature("docstring") casadi::LinearInterpolant::size1_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::LinearInterpolant::get_stats "[INTERNAL]  Get
all statistics.

";

%feature("docstring") casadi::LinearInterpolant::eval "[INTERNAL]  Evaluate
numerically.

";

%feature("docstring") casadi::LinearInterpolant::init_mem "[INTERNAL]
Initalize memory block.

";

%feature("docstring") casadi::LinearInterpolant::codegen_meta "[INTERNAL]
Generate meta-information allowing a user to evaluate a generated function.

";

%feature("docstring") casadi::LinearInterpolant::check_res "[INTERNAL]
Check if output arguments have correct length and dimensions.

";

%feature("docstring") casadi::LinearInterpolant::checkout "[INTERNAL]
Checkout a memory object.

";

%feature("docstring") casadi::LinearInterpolant::get_sparsity_in "[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::LinearInterpolant::replace_arg "[INTERNAL]
Replace 0-by-0 inputs.

";

%feature("docstring") casadi::LinearInterpolant::jacobian "[INTERNAL]
Return Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::LinearInterpolant::fwdViaJac "[INTERNAL]
Calculate derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::LinearInterpolant::codegen_body "[INTERNAL]
Generate code for the body of the C function.

";

%feature("docstring") casadi::LinearInterpolant::getJacSparsity "[INTERNAL]
Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::LinearInterpolant::fwd_seed "[INTERNAL]
Symbolic expressions for the forward seeds.

";

%feature("docstring") casadi::LinearInterpolant::get_options "[INTERNAL]
Options.

";

%feature("docstring") casadi::LinearInterpolant::self "[INTERNAL]  Get a
public class instance.

";

%feature("docstring") casadi::LinearInterpolant::~LinearInterpolant "[INTERNAL] ";

%feature("docstring") casadi::LinearInterpolant::getAtomicOutput "

[DEPRECATED] Renamed instruction_output

";

%feature("docstring") casadi::LinearInterpolant::has_function "[INTERNAL]
";

%feature("docstring") casadi::LinearInterpolant::set_temp "[INTERNAL]  Set
the (temporary) work vectors.

";

%feature("docstring") casadi::LinearInterpolant::get_reltol "[INTERNAL]
Get relative tolerance.

";

%feature("docstring") casadi::LinearInterpolant::alloc_w "[INTERNAL]
Ensure required length of w field.

";

%feature("docstring") casadi::LinearInterpolant::print_dimensions "[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::LinearInterpolant::oracle "[INTERNAL]  Get
oracle.

";

%feature("docstring") casadi::LinearInterpolant::adjViaJac "[INTERNAL]
Calculate derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::LinearInterpolant::matching_res "[INTERNAL]
Check if output arguments that needs to be replaced.

";


// File: classcasadi_1_1LinearInterpolantJac.xml
%feature("docstring") casadi::LinearInterpolantJac::get_options "[INTERNAL]
Options.

";

%feature("docstring") casadi::LinearInterpolantJac::size_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::LinearInterpolantJac::get_jacobian "[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::LinearInterpolantJac::init "[INTERNAL]
Initialize.

";

%feature("docstring") casadi::LinearInterpolantJac::codegen "[INTERNAL]
Generate code the function.

";

%feature("docstring") casadi::LinearInterpolantJac::get_name_out "[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::LinearInterpolantJac::check_arg "[INTERNAL]
Check if input arguments have correct length and dimensions.

";

%feature("docstring") casadi::LinearInterpolantJac::factory "[INTERNAL] ";

%feature("docstring") casadi::LinearInterpolantJac::set_temp "[INTERNAL]
Set the (temporary) work vectors.

";

%feature("docstring") casadi::LinearInterpolantJac::construct "[INTERNAL]
Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::LinearInterpolantJac::symbolicAdjSeed "[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::LinearInterpolantJac::call "[INTERNAL]   Call
a function, templated.

";

%feature("docstring") casadi::LinearInterpolantJac::eval_sx "[INTERNAL]
Evaluate with symbolic scalars.

";

%feature("docstring") casadi::LinearInterpolantJac::checkout "[INTERNAL]
Checkout a memory object.

";

%feature("docstring") casadi::LinearInterpolantJac::get_partition "[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring") casadi::LinearInterpolantJac::uses_output "[INTERNAL]
Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring") casadi::LinearInterpolantJac::instruction_output "[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::LinearInterpolantJac::call_gen "[INTERNAL]
Call a function, overloaded.

";

%feature("docstring") casadi::LinearInterpolantJac::get_stats "[INTERNAL]
Get all statistics.

";

%feature("docstring") casadi::LinearInterpolantJac::class_name "[INTERNAL]
Get type name.

";

%feature("docstring") casadi::LinearInterpolantJac::jit_dependencies "[INTERNAL]  Jit dependencies.

";

%feature("docstring") casadi::LinearInterpolantJac::replace_fseed "[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring") casadi::LinearInterpolantJac::has_function "[INTERNAL] ";

%feature("docstring") casadi::LinearInterpolantJac::sx_in "[INTERNAL]  Get
function input(s) and output(s)

";

%feature("docstring") casadi::LinearInterpolantJac::get_default_in "[INTERNAL]  Get default input value.

";

%feature("docstring") casadi::LinearInterpolantJac::ad_weight "[INTERNAL]
Weighting factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::LinearInterpolantJac::free_sx "[INTERNAL]
Get free variables (SX)

";

%feature("docstring") casadi::LinearInterpolantJac::export_code "[INTERNAL]
Export function in a specific language.

";

%feature("docstring") casadi::LinearInterpolantJac::numel_in "[INTERNAL]
Number of input/output elements.

";

%feature("docstring") casadi::LinearInterpolantJac::size1_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::LinearInterpolantJac::disp_more "[INTERNAL]
Print more.

";

%feature("docstring") casadi::LinearInterpolantJac::alloc_iw "[INTERNAL]
Ensure required length of iw field.

";

%feature("docstring") casadi::LinearInterpolantJac::adjViaJac "[INTERNAL]
Calculate derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::LinearInterpolantJac::get_reltol "[INTERNAL]
Get relative tolerance.

";

%feature("docstring") casadi::LinearInterpolantJac::reverse "[INTERNAL]
Return function that calculates adjoint derivatives reverse(nadj) returns a
cached instance if available, and calls  Function get_reverse(int nadj) if
no cached version is available.

";

%feature("docstring") casadi::LinearInterpolantJac::get_name_in "[INTERNAL]
Names of function input and outputs.

";

%feature("docstring") casadi::LinearInterpolantJac::info "[INTERNAL]
Obtain information about function

";

%feature("docstring") casadi::LinearInterpolantJac::call_reverse "[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::LinearInterpolantJac::eval "[INTERNAL]
Evaluate numerically.

";

%feature("docstring") casadi::LinearInterpolantJac::size2_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::LinearInterpolantJac::is_a "[INTERNAL]  Check
if the function is of a particular type.

";

%feature("docstring") casadi::LinearInterpolantJac::getAdaptorSolverName "[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring") casadi::LinearInterpolantJac::codegen_body "[INTERNAL]  Generate code for the body of the C function.

";

%feature("docstring") casadi::LinearInterpolantJac::instruction_input "[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::LinearInterpolantJac::has_derivative "[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring") casadi::LinearInterpolantJac::disp "[INTERNAL]
Display object.

";

%feature("docstring") casadi::LinearInterpolantJac::getJacSparsityGen "[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring") casadi::LinearInterpolantJac::get_abstol "[INTERNAL]
Get absolute tolerance.

";

%feature("docstring") casadi::LinearInterpolantJac::codegen_declarations "[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring") casadi::LinearInterpolantJac::nnz_in "[INTERNAL]
Number of input/output nonzeros.

";

%feature("docstring") casadi::LinearInterpolantJac::get_sparsity_out "[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring") casadi::LinearInterpolantJac::forward "[INTERNAL]
Return function that calculates forward derivatives forward(nfwd) returns a
cached instance if available, and calls  Function get_forward(int nfwd) if
no cached version is available.

";

%feature("docstring") casadi::LinearInterpolantJac::get_sparsity_in "[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring") casadi::LinearInterpolantJac::codegen_sparsities "[INTERNAL]  Codegen sparsities.

";

%feature("docstring") casadi::LinearInterpolantJac::get_jacobian_sparsity "[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::LinearInterpolantJac::alloc_mem "[INTERNAL]
Create memory block.

";

%feature("docstring") casadi::LinearInterpolantJac::oracle "[INTERNAL]  Get
oracle.

";

%feature("docstring") casadi::LinearInterpolantJac::which_depends "[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::LinearInterpolantJac::codegen_name "[INTERNAL]  Get name in codegen.

";

%feature("docstring") casadi::LinearInterpolantJac::free_mem "[INTERNAL]
Free memory block.

";

%feature("docstring") casadi::LinearInterpolantJac::has_sprev "[INTERNAL]
Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::LinearInterpolantJac::matching_arg "[INTERNAL]  Check if input arguments that needs to be replaced.

";

%feature("docstring") casadi::LinearInterpolantJac::size1_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::LinearInterpolantJac::has_spfwd "[INTERNAL]
Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::LinearInterpolantJac::sp_reverse "[INTERNAL]
Propagate sparsity backwards.

";

%feature("docstring") casadi::LinearInterpolantJac::alloc "[INTERNAL]
Ensure work vectors long enough to evaluate function.

";

%feature("docstring") casadi::LinearInterpolantJac::print "[INTERNAL]
C-style formatted printing during evaluation.

";

%feature("docstring") casadi::LinearInterpolantJac::replace_res "[INTERNAL]
Replace 0-by-0 outputs.

";

%feature("docstring") casadi::LinearInterpolantJac::getCount "[INTERNAL]
Get the reference count.

";

%feature("docstring") casadi::LinearInterpolantJac::codegen_decref "[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring") casadi::LinearInterpolantJac::wrap "[INTERNAL]  Wrap
in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::LinearInterpolantJac::get_reverse "[INTERNAL]
Return function that calculates adjoint derivatives reverse(nadj) returns a
cached instance if available, and calls  Function get_reverse(int nadj) if
no cached version is available.

";

%feature("docstring") casadi::LinearInterpolantJac::instruction_id "[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring") casadi::LinearInterpolantJac::call_forward "[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring") casadi::LinearInterpolantJac::n_nodes "[INTERNAL]
Number of nodes in the algorithm.

";

%feature("docstring") casadi::LinearInterpolantJac::LinearInterpolantJac "[INTERNAL]  Constructor.

";

%feature("docstring") casadi::LinearInterpolantJac::get_free "[INTERNAL]
Print free variables.

";

%feature("docstring") casadi::LinearInterpolantJac::mx_in "[INTERNAL]  Get
function input(s) and output(s)

";

%feature("docstring") casadi::LinearInterpolantJac::definition "[INTERNAL]
Get function signature: name:(inputs)->(outputs)

";

%feature("docstring") casadi::LinearInterpolantJac::n_instructions "[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring") casadi::LinearInterpolantJac::fwdViaJac "[INTERNAL]
Calculate derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::LinearInterpolantJac::codegen_incref "[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring") casadi::LinearInterpolantJac::eval_gen "

>  int casadi::FunctionInternal::eval_gen(const double **arg, double **res, int *iw, double *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate numerically.

>  int casadi::FunctionInternal::eval_gen(const SXElem **arg, SXElem **res, int *iw, SXElem *w, void *mem) const

>  int casadi::FunctionInternal::eval_gen(const bvec_t **arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

%feature("docstring") casadi::LinearInterpolantJac::clear_mem "[INTERNAL]
Clear all memory (called from destructor)

";

%feature("docstring") casadi::LinearInterpolantJac::codegen_meta "[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring") casadi::LinearInterpolantJac::sp_forward "[INTERNAL]
Propagate sparsity forward.

";

%feature("docstring") casadi::LinearInterpolantJac::instruction_MX "[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring") casadi::LinearInterpolantJac::get_forward "[INTERNAL]
Return function that calculates forward derivatives forward(nfwd) returns a
cached instance if available, and calls  Function get_forward(int nfwd) if
no cached version is available.

";

%feature("docstring") casadi::LinearInterpolantJac::setup "[INTERNAL]  Set
the (persistent and temporary) work vectors.

";

%feature("docstring") casadi::LinearInterpolantJac::sparsity_jac "[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::LinearInterpolantJac::sz_res "[INTERNAL]  Get
required length of res field.

";

%feature("docstring") casadi::LinearInterpolantJac::sx_out "[INTERNAL]  Get
function input(s) and output(s)

";

%feature("docstring") casadi::LinearInterpolantJac::eval_dm "[INTERNAL]
Evaluate with DM matrices.

";

%feature("docstring") casadi::LinearInterpolantJac::eval_mx "[INTERNAL]
Evaluate with symbolic matrices.

";

%feature("docstring") casadi::LinearInterpolantJac::replace_arg "[INTERNAL]
Replace 0-by-0 inputs.

";

%feature("docstring") casadi::LinearInterpolantJac::index_in "[INTERNAL]
Get input scheme index by name.

";

%feature("docstring") casadi::LinearInterpolantJac::jacobian "[INTERNAL]
Return Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::LinearInterpolantJac::index_out "[INTERNAL]
Get output scheme index by name.

";

%feature("docstring") casadi::LinearInterpolantJac::sz_work "[INTERNAL]
Get number of temporary variables needed.

";

%feature("docstring") casadi::LinearInterpolantJac::getAtomicInput "

[DEPRECATED] Renamed instruction_index

";

%feature("docstring") casadi::LinearInterpolantJac::has_jacobian "[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::LinearInterpolantJac::free_mx "[INTERNAL]
Get free variables ( MX)

";

%feature("docstring") casadi::LinearInterpolantJac::~LinearInterpolantJac "[INTERNAL]  Destructor.

";

%feature("docstring") casadi::LinearInterpolantJac::signature "[INTERNAL]
Code generate the function.

";

%feature("docstring") casadi::LinearInterpolantJac::has_reverse "[INTERNAL]
Return function that calculates adjoint derivatives reverse(nadj) returns a
cached instance if available, and calls  Function get_reverse(int nadj) if
no cached version is available.

";

%feature("docstring") casadi::LinearInterpolantJac "[INTERNAL]  First order
derivatives

>List of available options

+-------------+-----------------+---------------------+--------------------+
|     Id      |      Type       |     Description     |      Used in       |
+=============+=================+=====================+====================+
| lookup_mode | OT_STRINGVECTOR | Sets, for each grid | casadi::LinearInte |
|             |                 | dimenion, the       | rpolantJac         |
|             |                 | lookup algorithm    |                    |
|             |                 | used to find the    |                    |
|             |                 | correct index.      |                    |
|             |                 | 'linear' uses a     |                    |
|             |                 | for-loop + break;   |                    |
|             |                 | 'exact' uses        |                    |
|             |                 | floored division    |                    |
|             |                 | (only for uniform   |                    |
|             |                 | grids).             |                    |
+-------------+-----------------+---------------------+--------------------+

Diagrams
--------



C++ includes: linear_interpolant.hpp ";

%feature("docstring") casadi::LinearInterpolantJac::check_res "[INTERNAL]
Check if output arguments have correct length and dimensions.

";

%feature("docstring") casadi::LinearInterpolantJac::get_function "[INTERNAL] ";

%feature("docstring") casadi::LinearInterpolantJac::sz_arg "[INTERNAL]  Get
required length of arg field.

";

%feature("docstring") casadi::LinearInterpolantJac::instruction_constant "[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::LinearInterpolantJac::sprint "[INTERNAL]
C-style formatted printing to string.

";

%feature("docstring") casadi::LinearInterpolantJac::release "[INTERNAL]
Release a memory object.

";

%feature("docstring") casadi::LinearInterpolantJac::sz_w "[INTERNAL]  Get
required length of w field.

";

%feature("docstring") casadi::LinearInterpolantJac::mapsum_mx "[INTERNAL]
Parallel evaluation.

";

%feature("docstring") casadi::LinearInterpolantJac::has_free "[INTERNAL]
Does the function have free variables.

";

%feature("docstring") casadi::LinearInterpolantJac::has_forward "[INTERNAL]
Return function that calculates forward derivatives forward(nfwd) returns a
cached instance if available, and calls  Function get_forward(int nfwd) if
no cached version is available.

";

%feature("docstring") casadi::LinearInterpolantJac::print_options "[INTERNAL]  Print list of options.

";

%feature("docstring") casadi::LinearInterpolantJac::nnz_out "[INTERNAL]
Number of input/output nonzeros.

";

%feature("docstring") casadi::LinearInterpolantJac::matching_res "[INTERNAL]  Check if output arguments that needs to be replaced.

";

%feature("docstring") casadi::LinearInterpolantJac::slice "[INTERNAL]
returns a new function with a selection of inputs/outputs of the original

";

%feature("docstring")
casadi::LinearInterpolantJac::getJacSparsityHierarchical "[INTERNAL]  A
flavor of getJacSparsity that does hierarchical block structure recognition.

";

%feature("docstring") casadi::LinearInterpolantJac::alloc_res "[INTERNAL]
Ensure required length of res field.

";

%feature("docstring") casadi::LinearInterpolantJac::get_min_in "[INTERNAL]
Get smallest input value.

";

%feature("docstring")
casadi::LinearInterpolantJac::getJacSparsityHierarchicalSymm "[INTERNAL]  A
flavor of getJacSparsity that does hierarchical block structure recognition
for symmetric Jacobians

";

%feature("docstring") casadi::LinearInterpolantJac::symbolic_output "[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::LinearInterpolantJac::get_n_out "[INTERNAL]
Are all inputs and outputs scalar.

";

%feature("docstring") casadi::LinearInterpolantJac::size_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::LinearInterpolantJac::sz_iw "[INTERNAL]  Get
required length of iw field.

";

%feature("docstring") casadi::LinearInterpolantJac::mx_out "[INTERNAL]  Get
function input(s) and output(s)

";

%feature("docstring") casadi::LinearInterpolantJac::weak "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring") casadi::LinearInterpolantJac::generate_lifted "[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::LinearInterpolantJac::fwd_seed "[INTERNAL]
Symbolic expressions for the forward seeds.

";

%feature("docstring") casadi::LinearInterpolantJac::getAtomicOutput "

[DEPRECATED] Renamed instruction_output

";

%feature("docstring") casadi::LinearInterpolantJac::alloc_w "[INTERNAL]
Ensure required length of w field.

";

%feature("docstring") casadi::LinearInterpolantJac::alloc_arg "[INTERNAL]
Ensure required length of arg field.

";

%feature("docstring") casadi::LinearInterpolantJac::memory "[INTERNAL]
Memory objects.

";

%feature("docstring") casadi::LinearInterpolantJac::init_mem "[INTERNAL]
Initalize memory block.

";

%feature("docstring") casadi::LinearInterpolantJac::finalize "[INTERNAL]
Finalize the object creation.

";

%feature("docstring") casadi::LinearInterpolantJac::getJacSparsity "[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::LinearInterpolantJac::get_n_in "[INTERNAL]
Number of function inputs and outputs.

";

%feature("docstring") casadi::LinearInterpolantJac::generate_dependencies "[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring") casadi::LinearInterpolantJac::replace_aseed "[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring") casadi::LinearInterpolantJac::set_work "[INTERNAL]
Set the (persistent) work vectors.

";

%feature("docstring") casadi::LinearInterpolantJac::print_option "[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring") casadi::LinearInterpolantJac::size2_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::LinearInterpolantJac::get_max_in "[INTERNAL]
Get largest input value.

";

%feature("docstring") casadi::LinearInterpolantJac::has_codegen "[INTERNAL]
Is codegen supported?

";

%feature("docstring") casadi::LinearInterpolantJac::print_dimensions "[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::LinearInterpolantJac::all_scalar "[INTERNAL]
Are all inputs and outputs scalar.

";

%feature("docstring") casadi::LinearInterpolantJac::sp_weight "[INTERNAL]
Weighting factor for chosing forward/reverse mode, sparsity propagation.

";

%feature("docstring") casadi::LinearInterpolantJac::numel_out "[INTERNAL]
Number of input/output elements.

";

%feature("docstring") casadi::LinearInterpolantJac::self "[INTERNAL]  Get a
public class instance.

";


// File: classcasadi_1_1Linsol.xml
%feature("docstring") casadi::Linsol::neig "

Number of negative eigenvalues Not available for all solvers.

";

%feature("docstring") casadi::Linsol::class_name "

Get class name.

";

%feature("docstring") casadi::Linsol::is_null "

Is a null pointer?

";

%feature("docstring") casadi::Linsol::nfact "

Numeric factorization of the linear system.

";

%feature("docstring") casadi::Linsol::solve "

Solve linear system of equations

";

%feature("docstring") casadi::Linsol::Linsol "

>  casadi::Linsol::Linsol()
------------------------------------------------------------------------

Default constructor.

>  casadi::Linsol::Linsol(const std::string &name, const std::string &solver, const Sparsity &sp, const Dict &opts=Dict())
------------------------------------------------------------------------

Constructor.

";

%feature("docstring") casadi::Linsol::__hash__ "

Returns a number that is unique for a given Node. If the Object does not
point to any node, \"0\" is returned.

";

%feature("docstring") casadi::Linsol "

Linear solver Create a solver for linear systems of equations Solves the
linear system A*X = B or A^T*X = B for X with A square and non- singular.

If A is structurally singular, an error will be thrown during init. If A is
numerically singular, the prepare step will fail.

General information
===================



List of plugins
===============



- csparsecholesky

- csparse

- ma27

- lapacklu

- lapackqr

- ldl

- qr

- symbolicqr

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
Linsol.doc(\"myextraplugin\")



--------------------------------------------------------------------------------

csparsecholesky
---------------



Linsol with CSparseCholesky Interface

--------------------------------------------------------------------------------





--------------------------------------------------------------------------------

csparse
-------



Linsol with CSparse Interface

--------------------------------------------------------------------------------





--------------------------------------------------------------------------------

ma27
----



Interface to the sparse direct linear solver MA27 Works for symmetric
indefinite systems Partly adopted from qpOASES 3.2 Joel Andersson

--------------------------------------------------------------------------------

lapacklu
--------



This class solves the linear system A.x=b by making an LU factorization of
A: A = L.U, with L lower and U upper triangular

>List of available options

+-----------------------------+---------+----------------------------------+
|             Id              |  Type   |           Description            |
+=============================+=========+==================================+
| allow_equilibration_failure | OT_BOOL | Non-fatal error when             |
|                             |         | equilibration fails              |
+-----------------------------+---------+----------------------------------+
| equilibration               | OT_BOOL | Equilibrate the matrix           |
+-----------------------------+---------+----------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

lapackqr
--------



This class solves the linear system A.x=b by making an QR factorization of
A: A = Q.R, with Q orthogonal and R upper triangular

>List of available options

+----------+--------+------------------------------------------------------+
|    Id    |  Type  |                     Description                      |
+==========+========+======================================================+
| max_nrhs | OT_INT | Maximum number of right-hand-sides that get          |
|          |        | processed in a single pass [default:10].             |
+----------+--------+------------------------------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

ldl
---



Linear solver using sparse direct LDL factorization

--------------------------------------------------------------------------------





--------------------------------------------------------------------------------

qr --



Linear solver using sparse direct QR factorization

--------------------------------------------------------------------------------





--------------------------------------------------------------------------------

symbolicqr
----------



Linear solver for sparse least-squares problems Inspired
fromhttps://github.com/scipy/scipy/blob/v0.14.0/scipy/sparse/linalg/isolve/lsqr.py#L96

Linsol based on QR factorization with sparsity pattern based reordering
without partial pivoting

>List of available options

+-------+---------+----------------------------------------------------+
|  Id   |  Type   |                    Description                     |
+=======+=========+====================================================+
| fopts | OT_DICT | Options to be passed to generated function objects |
+-------+---------+----------------------------------------------------+

--------------------------------------------------------------------------------



Joel Andersson

C++ includes: linsol.hpp ";

%feature("docstring") casadi::Linsol::sfact "

Symbolic factorization of the linear system, e.g. selecting pivots.

";

%feature("docstring") casadi::Linsol::rank "

Matrix rank Not available for all solvers.

";

%feature("docstring") casadi::Linsol::disp "

Print a description of the object.

";

%feature("docstring") casadi::Linsol::get_str "

Get string representation.

";

%feature("docstring") casadi::Linsol::plugin_name "

Query plugin name.

";

%feature("docstring") casadi::Linsol::print_ptr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::Linsol::sparsity "

Get linear system sparsity.

";


// File: classcasadi_1_1LinsolLdl.xml
%feature("docstring") casadi::LinsolLdl::nnz "[INTERNAL] ";

%feature("docstring") casadi::LinsolLdl::ncol "[INTERNAL] ";

%feature("docstring") casadi::LinsolLdl::row "[INTERNAL] ";

%feature("docstring") casadi::LinsolLdl::disp "[INTERNAL]  Display object.

";

%feature("docstring") casadi::LinsolLdl::get_options "[INTERNAL]  Options.

";

%feature("docstring") casadi::LinsolLdl::disp_more "[INTERNAL]  Print more.

";

%feature("docstring") casadi::LinsolLdl::neig "[INTERNAL]  Number of
negative eigenvalues.

";

%feature("docstring") casadi::LinsolLdl::rank "[INTERNAL]   Matrix rank.

";

%feature("docstring") casadi::LinsolLdl::class_name "[INTERNAL]  Readable
name of the internal class.

";

%feature("docstring") casadi::LinsolLdl::~LinsolLdl "[INTERNAL] ";

%feature("docstring") casadi::LinsolLdl::init "[INTERNAL]  Initialize.

";

%feature("docstring") casadi::LinsolLdl::alloc_mem "[INTERNAL]  Create
memory block.

";

%feature("docstring") casadi::LinsolLdl::memory "[INTERNAL]  Memory
objects.

";

%feature("docstring") casadi::LinsolLdl::clear_mem "[INTERNAL]  Clear all
memory (called from destructor)

";

%feature("docstring") casadi::LinsolLdl::checkout "[INTERNAL]  Checkout a
memory object.

";

%feature("docstring") casadi::LinsolLdl::LinsolLdl "[INTERNAL] ";

%feature("docstring") casadi::LinsolLdl::construct "[INTERNAL]  Construct
Prepares the function for evaluation.

";

%feature("docstring") casadi::LinsolLdl "[INTERNAL]  'ldl' plugin for
LinsolInternal

C++ includes: linsol_ldl.hpp ";

%feature("docstring") casadi::LinsolLdl::nfact "[INTERNAL]  Numeric
factorization.

";

%feature("docstring") casadi::LinsolLdl::sfact "[INTERNAL] ";

%feature("docstring") casadi::LinsolLdl::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::LinsolLdl::linsol_eval_sx "[INTERNAL]
Evaluate SX, possibly transposed.

";

%feature("docstring") casadi::LinsolLdl::generate "[INTERNAL]  Generate C
code.

";

%feature("docstring") casadi::LinsolLdl::finalize "[INTERNAL]  Finalize the
object creation This function, which visits the class hierarchy in reverse
order is run after init() has been completed.

";

%feature("docstring") casadi::LinsolLdl::plugin_name "[INTERNAL] ";

%feature("docstring") casadi::LinsolLdl::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::LinsolLdl::release "[INTERNAL]  Release a
memory object.

";

%feature("docstring") casadi::LinsolLdl::solve "[INTERNAL] ";

%feature("docstring") casadi::LinsolLdl::nrow "[INTERNAL]  Get sparsity
pattern.

";

%feature("docstring") casadi::LinsolLdl::init_mem "[INTERNAL]  Initalize
memory block.

";

%feature("docstring") casadi::LinsolLdl::colind "[INTERNAL] ";

%feature("docstring") casadi::LinsolLdl::free_mem "[INTERNAL]  Free memory
block.

";


// File: classcasadi_1_1LinsolQr.xml
%feature("docstring") casadi::LinsolQr::disp "[INTERNAL]  Display object.

";

%feature("docstring") casadi::LinsolQr::neig "[INTERNAL]  Number of
negative eigenvalues.

";

%feature("docstring") casadi::LinsolQr::solve "[INTERNAL] ";

%feature("docstring") casadi::LinsolQr "[INTERNAL]  'qr' plugin for
LinsolInternal

C++ includes: linsol_qr.hpp ";

%feature("docstring") casadi::LinsolQr::class_name "[INTERNAL]  Readable
name of the internal class.

";

%feature("docstring") casadi::LinsolQr::clear_mem "[INTERNAL]  Clear all
memory (called from destructor)

";

%feature("docstring") casadi::LinsolQr::plugin_name "[INTERNAL] ";

%feature("docstring") casadi::LinsolQr::~LinsolQr "[INTERNAL] ";

%feature("docstring") casadi::LinsolQr::ncol "[INTERNAL] ";

%feature("docstring") casadi::LinsolQr::memory "[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::LinsolQr::free_mem "[INTERNAL]  Free memory
block.

";

%feature("docstring") casadi::LinsolQr::finalize "[INTERNAL]  Finalize the
object creation This function, which visits the class hierarchy in reverse
order is run after init() has been completed.

";

%feature("docstring") casadi::LinsolQr::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::LinsolQr::init "[INTERNAL]  Initialize.

";

%feature("docstring") casadi::LinsolQr::colind "[INTERNAL] ";

%feature("docstring") casadi::LinsolQr::disp_more "[INTERNAL]  Print more.

";

%feature("docstring") casadi::LinsolQr::alloc_mem "[INTERNAL]  Create
memory block.

";

%feature("docstring") casadi::LinsolQr::nnz "[INTERNAL] ";

%feature("docstring") casadi::LinsolQr::release "[INTERNAL]  Release a
memory object.

";

%feature("docstring") casadi::LinsolQr::linsol_eval_sx "[INTERNAL]
Evaluate SX, possibly transposed.

";

%feature("docstring") casadi::LinsolQr::nrow "[INTERNAL]  Get sparsity
pattern.

";

%feature("docstring") casadi::LinsolQr::rank "[INTERNAL]   Matrix rank.

";

%feature("docstring") casadi::LinsolQr::row "[INTERNAL] ";

%feature("docstring") casadi::LinsolQr::nfact "[INTERNAL]  Numeric
factorization.

";

%feature("docstring") casadi::LinsolQr::init_mem "[INTERNAL]  Initalize
memory block.

";

%feature("docstring") casadi::LinsolQr::sfact "[INTERNAL] ";

%feature("docstring") casadi::LinsolQr::generate "[INTERNAL]  Generate C
code.

";

%feature("docstring") casadi::LinsolQr::get_options "[INTERNAL]  Options.

";

%feature("docstring") casadi::LinsolQr::LinsolQr "[INTERNAL] ";

%feature("docstring") casadi::LinsolQr::checkout "[INTERNAL]  Checkout a
memory object.

";

%feature("docstring") casadi::LinsolQr::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::LinsolQr::construct "[INTERNAL]  Construct
Prepares the function for evaluation.

";


// File: classcasadi_1_1Logger.xml
%feature("docstring") casadi::Logger "

Keeps track of logging output to screen and/or files. All printout from
CasADi routines should go through this files.

Joel Andersson

C++ includes: casadi_logger.hpp ";


// File: classcasadi_1_1Lsqr.xml
%feature("docstring") casadi::Lsqr::row "[INTERNAL] ";

%feature("docstring") casadi::Lsqr::nfact "[INTERNAL]  Numeric
factorization.

";

%feature("docstring") casadi::Lsqr::sfact "[INTERNAL] ";

%feature("docstring") casadi::Lsqr::generate "[INTERNAL]  Generate C code.

";

%feature("docstring") casadi::Lsqr::solve "[INTERNAL] ";

%feature("docstring") casadi::Lsqr::nnz "[INTERNAL] ";

%feature("docstring") casadi::Lsqr::clear_mem "[INTERNAL]  Clear all memory
(called from destructor)

";

%feature("docstring") casadi::Lsqr::release "[INTERNAL]  Release a memory
object.

";

%feature("docstring") casadi::Lsqr::init "[INTERNAL]  Initialize.

";

%feature("docstring") casadi::Lsqr::neig "[INTERNAL]  Number of negative
eigenvalues.

";

%feature("docstring") casadi::Lsqr::getCount "[INTERNAL]  Get the reference
count.

";

%feature("docstring") casadi::Lsqr::weak "[INTERNAL]  Get a weak reference
to the object.

";

%feature("docstring") casadi::Lsqr::colind "[INTERNAL] ";

%feature("docstring") casadi::Lsqr::class_name "[INTERNAL]  Readable name
of the internal class.

";

%feature("docstring") casadi::Lsqr::construct "[INTERNAL]  Construct
Prepares the function for evaluation.

";

%feature("docstring") casadi::Lsqr::checkout "[INTERNAL]  Checkout a memory
object.

";

%feature("docstring") casadi::Lsqr::get_options "[INTERNAL]  Options.

";

%feature("docstring") casadi::Lsqr::rank "[INTERNAL]   Matrix rank.

";

%feature("docstring") casadi::Lsqr::~Lsqr "[INTERNAL] ";

%feature("docstring") casadi::Lsqr::linsol_eval_sx "[INTERNAL]  Evaluate
SX, possibly transposed.

";

%feature("docstring") casadi::Lsqr::plugin_name "[INTERNAL] ";

%feature("docstring") casadi::Lsqr::alloc_mem "[INTERNAL]  Create memory
block.

";

%feature("docstring") casadi::Lsqr::finalize "[INTERNAL]  Finalize the
object creation This function, which visits the class hierarchy in reverse
order is run after init() has been completed.

";

%feature("docstring") casadi::Lsqr::disp "[INTERNAL]  Display object.

";

%feature("docstring") casadi::Lsqr "[INTERNAL]  'symbolicqr' plugin for
Linsol

Linear solver for sparse least-squares problems Inspired
fromhttps://github.com/scipy/scipy/blob/v0.14.0/scipy/sparse/linalg/isolve/lsqr.py#L96

Linsol based on QR factorization with sparsity pattern based reordering
without partial pivoting

>List of available options

+-------+---------+----------------------------------------------------+
|  Id   |  Type   |                    Description                     |
+=======+=========+====================================================+
| fopts | OT_DICT | Options to be passed to generated function objects |
+-------+---------+----------------------------------------------------+

Joel Andersson

C++ includes: lsqr.hpp ";

%feature("docstring") casadi::Lsqr::memory "[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::Lsqr::init_mem "[INTERNAL]  Initalize memory
block.

";

%feature("docstring") casadi::Lsqr::disp_more "[INTERNAL]  Print more.

";

%feature("docstring") casadi::Lsqr::nrow "[INTERNAL]  Get sparsity pattern.

";

%feature("docstring") casadi::Lsqr::free_mem "[INTERNAL]  Free memory
block.

";

%feature("docstring") casadi::Lsqr::Lsqr "[INTERNAL] ";

%feature("docstring") casadi::Lsqr::ncol "[INTERNAL] ";


// File: classcasadi_1_1Map.xml
%feature("docstring") casadi::Map::sprint "[INTERNAL]  C-style formatted
printing to string.

";

%feature("docstring") casadi::Map::fwdViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::Map::self "[INTERNAL]  Get a public class
instance.

";

%feature("docstring") casadi::Map::get_n_out "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::Map::mapsum_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::Map::jacobian "[INTERNAL]  Return Jacobian of
all input elements with respect to all output elements.

";

%feature("docstring") casadi::Map::call "[INTERNAL]   Call a function,
templated.

";

%feature("docstring") casadi::Map::instruction_constant "[INTERNAL]  Get
the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::Map::size_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Map::has_forward "[INTERNAL]  Generate a
function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::Map::matching_res "[INTERNAL]  Check if
output arguments that needs to be replaced.

";

%feature("docstring") casadi::Map::numel_in "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::Map::has_reverse "[INTERNAL]  Generate a
function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::Map::free_mem "[INTERNAL]  Free memory block.

";

%feature("docstring") casadi::Map::sparsity_jac "[INTERNAL]  Get, if
necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Map::mx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Map::alloc_iw "[INTERNAL]  Ensure required
length of iw field.

";

%feature("docstring") casadi::Map::get_min_in "[INTERNAL]  Get smallest
input value.

";

%feature("docstring") casadi::Map::getCount "[INTERNAL]  Get the reference
count.

";

%feature("docstring") casadi::Map::disp "[INTERNAL]  Display object.

";

%feature("docstring") casadi::Map::replace_res "[INTERNAL]  Replace 0-by-0
outputs.

";

%feature("docstring") casadi::Map::oracle "[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::Map::call_reverse "[INTERNAL]  Reverse mode,
virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Map "[INTERNAL]  Evaluate in parallel Joel
Andersson

C++ includes: map.hpp ";

%feature("docstring") casadi::Map::print_options "[INTERNAL]  Print list of
options.

";

%feature("docstring") casadi::Map::which_depends "[INTERNAL]  Which
variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::Map::free_sx "[INTERNAL]  Get free variables
(SX)

";

%feature("docstring") casadi::Map::sx_in "[INTERNAL]  Get function input(s)
and output(s)

";

%feature("docstring") casadi::Map::eval_mx "[INTERNAL]  Evaluate with
symbolic matrices.

";

%feature("docstring") casadi::Map::slice "[INTERNAL]  returns a new
function with a selection of inputs/outputs of the original

";

%feature("docstring") casadi::Map::check_arg "[INTERNAL]  Check if input
arguments have correct length and dimensions.

";

%feature("docstring") casadi::Map::ad_weight "[INTERNAL]  Weighting factor
for chosing forward/reverse mode.

";

%feature("docstring") casadi::Map::forward "[INTERNAL]  Return function
that calculates forward derivatives forward(nfwd) returns a cached instance
if available, and calls  Function get_forward(int nfwd) if no cached version
is available.

";

%feature("docstring") casadi::Map::codegen_meta "[INTERNAL]  Generate meta-
information allowing a user to evaluate a generated function.

";

%feature("docstring") casadi::Map::sz_iw "[INTERNAL]  Get required length
of iw field.

";

%feature("docstring") casadi::Map::size_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Map::factory "[INTERNAL] ";

%feature("docstring") casadi::Map::get_n_in "[INTERNAL]  Number of function
inputs and outputs.

";

%feature("docstring") casadi::Map::eval_dm "[INTERNAL]  Evaluate with DM
matrices.

";

%feature("docstring") casadi::Map::has_sprev "[INTERNAL]  Is the class able
to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Map::sp_weight "[INTERNAL]  Weighting factor
for chosing forward/reverse mode, sparsity propagation.

";

%feature("docstring") casadi::Map::sz_work "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") casadi::Map::print_dimensions "[INTERNAL]  Print
dimensions of inputs and outputs.

";

%feature("docstring") casadi::Map::get_max_in "[INTERNAL]  Get largest
input value.

";

%feature("docstring") casadi::Map::jit_dependencies "[INTERNAL]  Jit
dependencies.

";

%feature("docstring") casadi::Map::sp_reverse "[INTERNAL]  Propagate
sparsity backwards.

";

%feature("docstring") casadi::Map::replace_aseed "[INTERNAL]  Replace
0-by-0 reverse seeds.

";

%feature("docstring") casadi::Map::get_abstol "[INTERNAL]  Get absolute
tolerance.

";

%feature("docstring") casadi::Map::codegen_body "[INTERNAL]  Generate code
for the body of the C function.

";

%feature("docstring") casadi::Map::call_gen "[INTERNAL]   Call a function,
overloaded.

";

%feature("docstring") casadi::Map::index_in "[INTERNAL]  Get input scheme
index by name.

";

%feature("docstring") casadi::Map::symbolicAdjSeed "[INTERNAL]  Symbolic
expressions for the adjoint seeds.

";

%feature("docstring") casadi::Map::generate_lifted "[INTERNAL]  Extract the
functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::Map::definition "[INTERNAL]  Get function
signature: name:(inputs)->(outputs)

";

%feature("docstring") casadi::Map::setup "[INTERNAL]  Set the (persistent
and temporary) work vectors.

";

%feature("docstring") casadi::Map::alloc_w "[INTERNAL]  Ensure required
length of w field.

";

%feature("docstring") casadi::Map::getAtomicInput "

[DEPRECATED] Renamed instruction_index

";

%feature("docstring") casadi::Map::class_name "[INTERNAL]  Get type name.

";

%feature("docstring") casadi::Map::checkout "[INTERNAL]  Checkout a memory
object.

";

%feature("docstring") casadi::Map::get_stats "[INTERNAL]  Get all
statistics.

";

%feature("docstring") casadi::Map::has_derivative "[INTERNAL]  Can
derivatives be calculated in any way?

";

%feature("docstring") casadi::Map::get_default_in "[INTERNAL]  Get default
input value.

";

%feature("docstring") casadi::Map::eval_sx "[INTERNAL]  evaluate
symbolically while also propagating directional derivatives

";

%feature("docstring") casadi::Map::get_free "[INTERNAL]  Print free
variables.

";

%feature("docstring") casadi::Map::generate_dependencies "[INTERNAL]
Export / Generate C code for the dependency function.

";

%feature("docstring") casadi::Map::sz_w "[INTERNAL]  Get required length of
w field.

";

%feature("docstring") casadi::Map::get_name_out "[INTERNAL]  Names of
function input and outputs.

";

%feature("docstring") casadi::Map::codegen_name "[INTERNAL]  Get name in
codegen.

";

%feature("docstring") casadi::Map::getAdaptorSolverName "[INTERNAL]  Obtain
solver name from Adaptor.

";

%feature("docstring") casadi::Map::fwd_seed "[INTERNAL]  Symbolic
expressions for the forward seeds.

";

%feature("docstring") casadi::Map::eval_gen "

>  int casadi::FunctionInternal::eval_gen(const double **arg, double **res, int *iw, double *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate numerically.

>  int casadi::FunctionInternal::eval_gen(const SXElem **arg, SXElem **res, int *iw, SXElem *w, void *mem) const

>  int casadi::FunctionInternal::eval_gen(const bvec_t **arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

>  int casadi::Map::eval_gen(const T **arg, T **res, int *iw, T *w) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate or propagate sparsities.

";

%feature("docstring") casadi::Map::init "[INTERNAL]  Initialize.

";

%feature("docstring") casadi::Map::numel_out "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::Map::get_partition "[INTERNAL]  Get the
unidirectional or bidirectional partition.

";

%feature("docstring") casadi::Map::codegen_decref "[INTERNAL]  Codegen
decref for dependencies.

";

%feature("docstring") casadi::Map::construct "[INTERNAL]  Construct
Prepares the function for evaluation.

";

%feature("docstring") casadi::Map::size1_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Map::get_reltol "[INTERNAL]  Get relative
tolerance.

";

%feature("docstring") casadi::Map::sz_arg "[INTERNAL]  Get required length
of arg field.

";

%feature("docstring") casadi::Map::get_options "[INTERNAL]  Options.

";

%feature("docstring") casadi::Map::codegen_declarations "[INTERNAL]
Generate code for the declarations of the C function.

";

%feature("docstring") casadi::Map::instruction_input "[INTERNAL]  Get the
(integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::Map::get_sparsity_in "[INTERNAL]  Sparsities
of function inputs and outputs.

";

%feature("docstring") casadi::Map::call_forward "[INTERNAL]  Forward mode
AD, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Map::get_function "[INTERNAL] ";

%feature("docstring") casadi::Map::matching_arg "[INTERNAL]  Check if input
arguments that needs to be replaced.

";

%feature("docstring") casadi::Map::init_mem "[INTERNAL]  Initalize memory
block.

";

%feature("docstring") casadi::Map::size2_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Map::signature "[INTERNAL]  Code generate the
function.

";

%feature("docstring") casadi::Map::get_jacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Map::parallelization "[INTERNAL]  Type of
parallellization.

";

%feature("docstring") casadi::Map::mx_in "[INTERNAL]  Get function input(s)
and output(s)

";

%feature("docstring") casadi::Map::~Map "[INTERNAL]  Destructor.

";

%feature("docstring") casadi::Map::alloc_mem "[INTERNAL]  Create memory
block.

";

%feature("docstring") casadi::Map::disp_more "[INTERNAL]  Print more.

";

%feature("docstring") casadi::Map::has_spfwd "[INTERNAL]  Is the class able
to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Map::eval "[INTERNAL]  Evaluate the function
numerically.

";

%feature("docstring") casadi::Map::getJacSparsity "[INTERNAL]  Generate the
sparsity of a Jacobian block.

";

%feature("docstring") casadi::Map::sx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Map::wrap "[INTERNAL]  Wrap in an Function
instance consisting of only one MX call.

";

%feature("docstring") casadi::Map::alloc "[INTERNAL]  Ensure work vectors
long enough to evaluate function.

";

%feature("docstring") casadi::Map::clear_mem "[INTERNAL]  Clear all memory
(called from destructor)

";

%feature("docstring") casadi::Map::has_codegen "[INTERNAL]  Is codegen
supported?

";

%feature("docstring") casadi::Map::n_nodes "[INTERNAL]  Number of nodes in
the algorithm.

";

%feature("docstring") casadi::Map::get_reverse "[INTERNAL]  Generate a
function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::Map::replace_arg "[INTERNAL]  Replace 0-by-0
inputs.

";

%feature("docstring") casadi::Map::get_sparsity_out "[INTERNAL]  Sparsities
of function inputs and outputs.

";

%feature("docstring") casadi::Map::index_out "[INTERNAL]  Get output scheme
index by name.

";

%feature("docstring") casadi::Map::instruction_MX "[INTERNAL]  get MX
expression associated with instruction

";

%feature("docstring") casadi::Map::has_jacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Map::all_scalar "[INTERNAL]  Are all inputs
and outputs scalar.

";

%feature("docstring") casadi::Map::alloc_arg "[INTERNAL]  Ensure required
length of arg field.

";

%feature("docstring") casadi::Map::finalize "[INTERNAL]  Finalize the
object creation.

";

%feature("docstring") casadi::Map::codegen_sparsities "[INTERNAL]  Codegen
sparsities.

";

%feature("docstring") casadi::Map::size1_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Map::alloc_res "[INTERNAL]  Ensure required
length of res field.

";

%feature("docstring") casadi::Map::getJacSparsityHierarchical "[INTERNAL]
A flavor of getJacSparsity that does hierarchical block structure
recognition.

";

%feature("docstring") casadi::Map::uses_output "[INTERNAL]  Do the
derivative functions need nondifferentiated outputs?

";

%feature("docstring") casadi::Map::memory "[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::Map::reverse "[INTERNAL]  Return function
that calculates adjoint derivatives reverse(nadj) returns a cached instance
if available, and calls  Function get_reverse(int nadj) if no cached version
is available.

";

%feature("docstring") casadi::Map::get_jacobian_sparsity "[INTERNAL]  Get
Jacobian sparsity.

";

%feature("docstring") casadi::Map::export_code "[INTERNAL]  Export function
in a specific language.

";

%feature("docstring") casadi::Map::n_instructions "[INTERNAL]  Get the
number of atomic operations.

";

%feature("docstring") casadi::Map::weak "[INTERNAL]  Get a weak reference
to the object.

";

%feature("docstring") casadi::Map::nnz_in "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::Map::check_res "[INTERNAL]  Check if output
arguments have correct length and dimensions.

";

%feature("docstring") casadi::Map::get_name_in "[INTERNAL]  Names of
function input and outputs.

";

%feature("docstring") casadi::Map::sz_res "[INTERNAL]  Get required length
of res field.

";

%feature("docstring") casadi::Map::getAtomicOutput "

[DEPRECATED] Renamed instruction_output

";

%feature("docstring") casadi::Map::adjViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::Map::instruction_id "[INTERNAL]  Get an
atomic operation operator index.

";

%feature("docstring") casadi::Map::nnz_out "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::Map::set_temp "[INTERNAL]  Set the
(temporary) work vectors.

";

%feature("docstring") casadi::Map::getJacSparsityHierarchicalSymm "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::Map::sp_forward "[INTERNAL]  Propagate
sparsity forward.

";

%feature("docstring") casadi::Map::get_forward "[INTERNAL]  Generate a
function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::Map::print "[INTERNAL]  C-style formatted
printing during evaluation.

";

%feature("docstring") casadi::Map::is_a "[INTERNAL]  Check if the function
is of a particular type.

";

%feature("docstring") casadi::Map::info "[INTERNAL]  Obtain information
about node

";

%feature("docstring") casadi::Map::replace_fseed "[INTERNAL]  Replace
0-by-0 forward seeds.

";

%feature("docstring") casadi::Map::instruction_output "[INTERNAL]  Get the
(integer) output argument of an atomic operation.

";

%feature("docstring") casadi::Map::size2_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Map::free_mx "[INTERNAL]  Get free variables
( MX)

";

%feature("docstring") casadi::Map::getJacSparsityGen "[INTERNAL]  Get the
sparsity pattern, forward mode.

";

%feature("docstring") casadi::Map::codegen_incref "[INTERNAL]  Codegen
incref for dependencies.

";

%feature("docstring") casadi::Map::has_free "[INTERNAL]  Does the function
have free variables.

";

%feature("docstring") casadi::Map::symbolic_output "[INTERNAL]  Get a
vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::Map::has_function "[INTERNAL] ";

%feature("docstring") casadi::Map::codegen "[INTERNAL]  Generate code the
function.

";

%feature("docstring") casadi::Map::release "[INTERNAL]  Release a memory
object.

";

%feature("docstring") casadi::Map::set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::Map::print_option "[INTERNAL]  Print all
information there is to know about a certain option.

";


// File: classcasadi_1_1MapOmp.xml
%feature("docstring") casadi::MapOmp::set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::MapOmp::symbolic_output "[INTERNAL]  Get a
vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::MapOmp::generate_lifted "[INTERNAL]  Extract
the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::MapOmp::getAdaptorSolverName "[INTERNAL]
Obtain solver name from Adaptor.

";

%feature("docstring") casadi::MapOmp::disp "[INTERNAL]  Display object.

";

%feature("docstring") casadi::MapOmp::sz_w "[INTERNAL]  Get required length
of w field.

";

%feature("docstring") casadi::MapOmp::index_in "[INTERNAL]  Get input
scheme index by name.

";

%feature("docstring") casadi::MapOmp::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::MapOmp::getJacSparsityGen "[INTERNAL]  Get
the sparsity pattern, forward mode.

";

%feature("docstring") casadi::MapOmp::free_mx "[INTERNAL]  Get free
variables ( MX)

";

%feature("docstring") casadi::MapOmp::has_reverse "[INTERNAL]  Generate a
function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::MapOmp::codegen_meta "[INTERNAL]  Generate
meta-information allowing a user to evaluate a generated function.

";

%feature("docstring") casadi::MapOmp::slice "[INTERNAL]  returns a new
function with a selection of inputs/outputs of the original

";

%feature("docstring") casadi::MapOmp::eval_gen "

>  int casadi::FunctionInternal::eval_gen(const double **arg, double **res, int *iw, double *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate numerically.

>  int casadi::FunctionInternal::eval_gen(const SXElem **arg, SXElem **res, int *iw, SXElem *w, void *mem) const

>  int casadi::FunctionInternal::eval_gen(const bvec_t **arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

>  int casadi::Map::eval_gen(const T **arg, T **res, int *iw, T *w) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate or propagate sparsities.

";

%feature("docstring") casadi::MapOmp::factory "[INTERNAL] ";

%feature("docstring") casadi::MapOmp::matching_res "[INTERNAL]  Check if
output arguments that needs to be replaced.

";

%feature("docstring") casadi::MapOmp::alloc_arg "[INTERNAL]  Ensure
required length of arg field.

";

%feature("docstring") casadi::MapOmp::getJacSparsityHierarchicalSymm "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::MapOmp::get_forward "[INTERNAL]  Generate a
function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::MapOmp::print_dimensions "[INTERNAL]  Print
dimensions of inputs and outputs.

";

%feature("docstring") casadi::MapOmp::sx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::MapOmp::numel_out "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::MapOmp::check_arg "[INTERNAL]  Check if input
arguments have correct length and dimensions.

";

%feature("docstring") casadi::MapOmp::getJacSparsityHierarchical "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::MapOmp::instruction_input "[INTERNAL]  Get
the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::MapOmp::n_nodes "[INTERNAL]  Number of nodes
in the algorithm.

";

%feature("docstring") casadi::MapOmp::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::MapOmp::replace_fseed "[INTERNAL]  Replace
0-by-0 forward seeds.

";

%feature("docstring") casadi::MapOmp::getAtomicOutput "

[DEPRECATED] Renamed instruction_output

";

%feature("docstring") casadi::MapOmp::sp_reverse "[INTERNAL]  Propagate
sparsity backwards.

";

%feature("docstring") casadi::MapOmp::eval_mx "[INTERNAL]  Evaluate with
symbolic matrices.

";

%feature("docstring") casadi::MapOmp::free_sx "[INTERNAL]  Get free
variables (SX)

";

%feature("docstring") casadi::MapOmp::get_free "[INTERNAL]  Print free
variables.

";

%feature("docstring") casadi::MapOmp::mapsum_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::MapOmp::print_option "[INTERNAL]  Print all
information there is to know about a certain option.

";

%feature("docstring") casadi::MapOmp::alloc "[INTERNAL]  Ensure work
vectors long enough to evaluate function.

";

%feature("docstring") casadi::MapOmp::replace_aseed "[INTERNAL]  Replace
0-by-0 reverse seeds.

";

%feature("docstring") casadi::MapOmp::getAtomicInput "

[DEPRECATED] Renamed instruction_index

";

%feature("docstring") casadi::MapOmp::nnz_out "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::MapOmp::codegen_incref "[INTERNAL]  Codegen
incref for dependencies.

";

%feature("docstring") casadi::MapOmp::checkout "[INTERNAL]  Checkout a
memory object.

";

%feature("docstring") casadi::MapOmp::get_n_in "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::MapOmp::nnz_in "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::MapOmp::generate_dependencies "[INTERNAL]
Export / Generate C code for the dependency function.

";

%feature("docstring") casadi::MapOmp::get_abstol "[INTERNAL]  Get absolute
tolerance.

";

%feature("docstring") casadi::MapOmp::get_n_out "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::MapOmp::call_gen "[INTERNAL]   Call a
function, overloaded.

";

%feature("docstring") casadi::MapOmp::sp_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode, sparsity propagation.

";

%feature("docstring") casadi::MapOmp::get_default_in "[INTERNAL]  Get
default input value.

";

%feature("docstring") casadi::MapOmp::mx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::MapOmp::print_options "[INTERNAL]  Print list
of options.

";

%feature("docstring") casadi::MapOmp::finalize "[INTERNAL]  Finalize the
object creation.

";

%feature("docstring") casadi::MapOmp::symbolicAdjSeed "[INTERNAL]  Symbolic
expressions for the adjoint seeds.

";

%feature("docstring") casadi::MapOmp::instruction_id "[INTERNAL]  Get an
atomic operation operator index.

";

%feature("docstring") casadi::MapOmp::codegen_name "[INTERNAL]  Get name in
codegen.

";

%feature("docstring") casadi::MapOmp::instruction_MX "[INTERNAL]  get MX
expression associated with instruction

";

%feature("docstring") casadi::MapOmp::disp_more "[INTERNAL]  Print more.

";

%feature("docstring") casadi::MapOmp::instruction_output "[INTERNAL]  Get
the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::MapOmp::get_partition "[INTERNAL]  Get the
unidirectional or bidirectional partition.

";

%feature("docstring") casadi::MapOmp::sz_arg "[INTERNAL]  Get required
length of arg field.

";

%feature("docstring") casadi::MapOmp::check_res "[INTERNAL]  Check if
output arguments have correct length and dimensions.

";

%feature("docstring") casadi::MapOmp::which_depends "[INTERNAL]  Which
variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::MapOmp::jit_dependencies "[INTERNAL]  Jit
dependencies.

";

%feature("docstring") casadi::MapOmp::get_max_in "[INTERNAL]  Get largest
input value.

";

%feature("docstring") casadi::MapOmp::matching_arg "[INTERNAL]  Check if
input arguments that needs to be replaced.

";

%feature("docstring") casadi::MapOmp::sx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::MapOmp::self "[INTERNAL]  Get a public class
instance.

";

%feature("docstring") casadi::MapOmp::get_jacobian_sparsity "[INTERNAL]
Get Jacobian sparsity.

";

%feature("docstring") casadi::MapOmp::adjViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::MapOmp::fwd_seed "[INTERNAL]  Symbolic
expressions for the forward seeds.

";

%feature("docstring") casadi::MapOmp::size1_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::MapOmp::codegen_declarations "[INTERNAL]
Generate code for the declarations of the C function.

";

%feature("docstring") casadi::MapOmp::codegen "[INTERNAL]  Generate code
the function.

";

%feature("docstring") casadi::MapOmp::has_jacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::MapOmp::memory "[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::MapOmp::wrap "[INTERNAL]  Wrap in an Function
instance consisting of only one MX call.

";

%feature("docstring") casadi::MapOmp::uses_output "[INTERNAL]  Do the
derivative functions need nondifferentiated outputs?

";

%feature("docstring") casadi::MapOmp::alloc_iw "[INTERNAL]  Ensure required
length of iw field.

";

%feature("docstring") casadi::MapOmp::forward "[INTERNAL]  Return function
that calculates forward derivatives forward(nfwd) returns a cached instance
if available, and calls  Function get_forward(int nfwd) if no cached version
is available.

";

%feature("docstring") casadi::MapOmp::oracle "[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::MapOmp::has_codegen "[INTERNAL]  Is codegen
supported?

";

%feature("docstring") casadi::MapOmp::all_scalar "[INTERNAL]  Are all
inputs and outputs scalar.

";

%feature("docstring") casadi::MapOmp::get_sparsity_out "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::MapOmp::sz_iw "[INTERNAL]  Get required
length of iw field.

";

%feature("docstring") casadi::MapOmp::call_reverse "[INTERNAL]  Reverse
mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::MapOmp "[INTERNAL]  A map Evaluate in
parallel using OpenMP Note: Do not use this class with much more than the
intended number of threads for the parallel evaluation as it will cause
excessive memory use.

Joel Andersson

C++ includes: map.hpp ";

%feature("docstring") casadi::MapOmp::getJacSparsity "[INTERNAL]  Generate
the sparsity of a Jacobian block.

";

%feature("docstring") casadi::MapOmp::mx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::MapOmp::size1_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::MapOmp::size_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::MapOmp::definition "[INTERNAL]  Get function
signature: name:(inputs)->(outputs)

";

%feature("docstring") casadi::MapOmp::alloc_res "[INTERNAL]  Ensure
required length of res field.

";

%feature("docstring") casadi::MapOmp::codegen_decref "[INTERNAL]  Codegen
decref for dependencies.

";

%feature("docstring") casadi::MapOmp::get_sparsity_in "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::MapOmp::get_name_in "[INTERNAL]  Names of
function input and outputs.

";

%feature("docstring") casadi::MapOmp::get_min_in "[INTERNAL]  Get smallest
input value.

";

%feature("docstring") casadi::MapOmp::get_stats "[INTERNAL]  Get all
statistics.

";

%feature("docstring") casadi::MapOmp::instruction_constant "[INTERNAL]  Get
the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::MapOmp::sz_res "[INTERNAL]  Get required
length of res field.

";

%feature("docstring") casadi::MapOmp::has_free "[INTERNAL]  Does the
function have free variables.

";

%feature("docstring") casadi::MapOmp::codegen_sparsities "[INTERNAL]
Codegen sparsities.

";

%feature("docstring") casadi::MapOmp::init_mem "[INTERNAL]  Initalize
memory block.

";

%feature("docstring") casadi::MapOmp::free_mem "[INTERNAL]  Free memory
block.

";

%feature("docstring") casadi::MapOmp::size_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::MapOmp::ad_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::MapOmp::set_temp "[INTERNAL]  Set the
(temporary) work vectors.

";

%feature("docstring") casadi::MapOmp::replace_res "[INTERNAL]  Replace
0-by-0 outputs.

";

%feature("docstring") casadi::MapOmp::sprint "[INTERNAL]  C-style formatted
printing to string.

";

%feature("docstring") casadi::MapOmp::call_forward "[INTERNAL]  Forward
mode AD, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::MapOmp::n_instructions "[INTERNAL]  Get the
number of atomic operations.

";

%feature("docstring") casadi::MapOmp::info "[INTERNAL]  Obtain information
about node

";

%feature("docstring") casadi::MapOmp::size2_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::MapOmp::setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";

%feature("docstring") casadi::MapOmp::signature "[INTERNAL]  Code generate
the function.

";

%feature("docstring") casadi::MapOmp::sz_work "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") casadi::MapOmp::has_sprev "[INTERNAL]  Is the class
able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::MapOmp::get_jacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::MapOmp::get_name_out "[INTERNAL]  Names of
function input and outputs.

";

%feature("docstring") casadi::MapOmp::sparsity_jac "[INTERNAL]  Get, if
necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::MapOmp::reverse "[INTERNAL]  Return function
that calculates adjoint derivatives reverse(nadj) returns a cached instance
if available, and calls  Function get_reverse(int nadj) if no cached version
is available.

";

%feature("docstring") casadi::MapOmp::fwdViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::MapOmp::size2_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::MapOmp::has_spfwd "[INTERNAL]  Is the class
able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::MapOmp::index_out "[INTERNAL]  Get output
scheme index by name.

";

%feature("docstring") casadi::MapOmp::get_function "[INTERNAL] ";

%feature("docstring") casadi::MapOmp::construct "[INTERNAL]  Construct
Prepares the function for evaluation.

";

%feature("docstring") casadi::MapOmp::export_code "[INTERNAL]  Export
function in a specific language.

";

%feature("docstring") casadi::MapOmp::alloc_mem "[INTERNAL]  Create memory
block.

";

%feature("docstring") casadi::MapOmp::numel_in "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::MapOmp::has_forward "[INTERNAL]  Generate a
function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::MapOmp::is_a "[INTERNAL]  Check if the
function is of a particular type.

";

%feature("docstring") casadi::MapOmp::get_reverse "[INTERNAL]  Generate a
function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::MapOmp::eval_dm "[INTERNAL]  Evaluate with DM
matrices.

";

%feature("docstring") casadi::MapOmp::get_options "[INTERNAL]  Options.

";

%feature("docstring") casadi::MapOmp::replace_arg "[INTERNAL]  Replace
0-by-0 inputs.

";

%feature("docstring") casadi::MapOmp::has_derivative "[INTERNAL]  Can
derivatives be calculated in any way?

";

%feature("docstring") casadi::MapOmp::alloc_w "[INTERNAL]  Ensure required
length of w field.

";

%feature("docstring") casadi::MapOmp::has_function "[INTERNAL] ";

%feature("docstring") casadi::MapOmp::sp_forward "[INTERNAL]  Propagate
sparsity forward.

";

%feature("docstring") casadi::MapOmp::release "[INTERNAL]  Release a memory
object.

";

%feature("docstring") casadi::MapOmp::jacobian "[INTERNAL]  Return Jacobian
of all input elements with respect to all output elements.

";

%feature("docstring") casadi::MapOmp::clear_mem "[INTERNAL]  Clear all
memory (called from destructor)

";

%feature("docstring") casadi::MapOmp::eval_sx "[INTERNAL]  evaluate
symbolically while also propagating directional derivatives

";

%feature("docstring") casadi::MapOmp::call "[INTERNAL]   Call a function,
templated.

";

%feature("docstring") casadi::MapOmp::get_reltol "[INTERNAL]  Get relative
tolerance.

";

%feature("docstring") casadi::MapOmp::print "[INTERNAL]  C-style formatted
printing during evaluation.

";


// File: classcasadi_1_1Matrix.xml


/*  Construct symbolic primitives  */

/* The \"sym\" function is intended to work in a similar way as \"sym\" used
in the Symbolic Toolbox for Matlab but instead creating a CasADi symbolic
primitive.

*/ %feature("docstring") casadi::Matrix::print_scalar "

Print scalar.

";

%feature("docstring") casadi::Matrix::nnz_upper "

Get the number of non-zeros in the upper triangular half.

";

%feature("docstring") friendwrap_minor "

Get the (i,j) minor matrix.

";

%feature("docstring") friendwrap_expand "

Expand the expression as a weighted sum (with constant weights)

";

%feature("docstring") casadi::Matrix::is_constant "

Check if the matrix is constant (note that false negative answers are
possible)

";

%feature("docstring") friendwrap_mtaylor "

>  Matrix<Scalar> mtaylor(const Matrix< Scalar > &ex, const Matrix< Scalar > &x, const Matrix< Scalar > &a, int order=1)
------------------------------------------------------------------------

multivariate Taylor series expansion

Do Taylor expansions until the aggregated order of a term is equal to
'order'. The aggregated order of $x^n y^m$ equals $n+m$.

>  Matrix<Scalar> mtaylor(const Matrix< Scalar > &ex, const Matrix< Scalar > &x, const Matrix< Scalar > &a, int order, const std::vector< int > &order_contributions)
------------------------------------------------------------------------

multivariate Taylor series expansion

Do Taylor expansions until the aggregated order of a term is equal to
'order'. The aggregated order of $x^n y^m$ equals $n+m$.

The argument order_contributions can denote how match each variable
contributes to the aggregated order. If x=[x, y] and order_contributions=[1,
2], then the aggregated order of $x^n y^m$ equals $1n+2m$.

Example usage

$ \\\\sin(b+a)+\\\\cos(b+a)(x-a)+\\\\cos(b+a)(y-b) $ $ y+x-(x^3+3y x^2+3 y^2
x+y^3)/6 $ $ (-3 x^2 y-x^3)/6+y+x $

";

%feature("docstring") casadi::Matrix::get_elements "

Get all elements.

";

%feature("docstring") casadi::Matrix::set "

>  void casadi::Matrix< T >::set(const Matrix< Scalar > &m, bool ind1, const Slice &rr)

>  void casadi::Matrix< T >::set(const Matrix< Scalar > &m, bool ind1, const Matrix< int > &rr)

>  void casadi::Matrix< T >::set(const Matrix< Scalar > &m, bool ind1, const Sparsity &sp)
------------------------------------------------------------------------

Set a submatrix, single argument

>  void casadi::Matrix< T >::set(const Matrix< Scalar > &m, bool ind1, const Slice &rr, const Slice &cc)

>  void casadi::Matrix< T >::set(const Matrix< Scalar > &m, bool ind1, const Slice &rr, const Matrix< int > &cc)

>  void casadi::Matrix< T >::set(const Matrix< Scalar > &m, bool ind1, const Matrix< int > &rr, const Slice &cc)

>  void casadi::Matrix< T >::set(const Matrix< Scalar > &m, bool ind1, const Matrix< int > &rr, const Matrix< int > &cc)
------------------------------------------------------------------------

Set a submatrix, two arguments

";

%feature("docstring") casadi::Matrix::nnz "

Get the number of (structural) non-zero elements.

";

%feature("docstring") casadi::Matrix::remove "

Remove columns and rows Remove/delete rows and/or columns of a matrix.

";

%feature("docstring") casadi::Matrix::get "

>  void casadi::Matrix< T >::get(Matrix< Scalar > &output_m, bool ind1, const Slice &rr) const

>  void casadi::Matrix< T >::get(Matrix< Scalar > &output_m, bool ind1, const Matrix< int > &rr) const

>  void casadi::Matrix< T >::get(Matrix< Scalar > &output_m, bool ind1, const Sparsity &sp) const 
------------------------------------------------------------------------

Get a submatrix, single argument

>  void casadi::Matrix< T >::get(Matrix< Scalar > &output_m, bool ind1, const Slice &rr, const Slice &cc) const

>  void casadi::Matrix< T >::get(Matrix< Scalar > &output_m, bool ind1, const Slice &rr, const Matrix< int > &cc) const

>  void casadi::Matrix< T >::get(Matrix< Scalar > &output_m, bool ind1, const Matrix< int > &rr, const Slice &cc) const

>  void casadi::Matrix< T >::get(Matrix< Scalar > &output_m, bool ind1, const Matrix< int > &rr, const Matrix< int > &cc) const 
------------------------------------------------------------------------

Get a submatrix, two arguments

";

%feature("docstring") friendwrap_triangle "

triangle function

\\\\[ \\\\begin {cases} \\\\Lambda(x) = 0 & |x| >= 1 \\\\\\\\ \\\\Lambda(x)
= 1-|x| & |x| < 1 \\\\end {cases} \\\\]

";

%feature("docstring") casadi::Matrix::export_code "

Export matrix in specific language.

lang: only 'matlab' supported for now

::

  * options:
  *   inline: Indicates if you want everything on a single line (default: False)
  *   name: Name of exported variable (default: 'm')
  *   indent_level: Level of indentation (default: 0)
  *   spoof_zero: Replace numerical zero by a 1e-200 (default: false)
  *               might be needed for matlab sparse construct,
  *               which doesn't allow numerical zero
  * 



";

%feature("docstring") friendwrap_adj "

Matrix adjoint.

";

%feature("docstring") casadi::Matrix::triplet "";

%feature("docstring") friendwrap_qr "

QR factorization using the modified Gram-Schmidt algorithm More stable than
the classical Gram-Schmidt, but may break down if the rows of A are nearly
linearly dependent See J. Demmel: Applied Numerical Linear Algebra
(algorithm 3.1.). Note that in SWIG, Q and R are returned by value.

";

%feature("docstring") casadi::Matrix::set_width "

Set the 'precision, width & scientific' used in printing and serializing to
streams.

";

%feature("docstring") casadi::Matrix::sanity_check "

Check if the dimensions and colind, row vectors are compatible.

Parameters:
-----------

complete:  set to true to also check elementwise throws an error as possible
result

";

%feature("docstring") casadi::Matrix::print_split "[INTERNAL]  Get strings
corresponding to the nonzeros and the interdependencies.

";

%feature("docstring") casadi::Matrix::unary "[INTERNAL]  Create nodes by
their ID.

";

%feature("docstring") friendwrap_qr_solve "

Matrix adjoint.

";

%feature("docstring") casadi::Matrix::set_precision "

Set the 'precision, width & scientific' used in printing and serializing to
streams.

";

%feature("docstring") casadi::Matrix::is_tril "

Check if the matrix is lower triangular.

";

%feature("docstring") friendwrap_norm_inf_mul "

Inf-norm of a Matrix-Matrix product.

";

%feature("docstring") casadi::Matrix::is_integer "

Check if the matrix is integer-valued (note that false negative answers are
possible)

";

%feature("docstring") casadi::Matrix::numel "

Get the number of elements.

";

%feature("docstring") casadi::Matrix::is_triu "

Check if the matrix is upper triangular.

";

%feature("docstring") friendwrap_all "

Returns true only if every element in the matrix is true.

";

%feature("docstring") casadi::Matrix::is_regular "[INTERNAL]  Checks if
expression does not contain NaN or Inf.

";

%feature("docstring") casadi::Matrix::set_nz "

Set a set of nonzeros

";

%feature("docstring") casadi::Matrix::nnz_diag "

Get get the number of non-zeros on the diagonal.

";

%feature("docstring") casadi::Matrix::gradient "

Functions called by friend functions defined here

";

%feature("docstring") casadi::Matrix::sparsity "

Get the sparsity pattern.

";

%feature("docstring") casadi::Matrix::get_row "

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring") casadi::Matrix::get_sparsity "

Get an owning reference to the sparsity pattern.

";

%feature("docstring") casadi::Matrix::bilin "

Calculate bilinear form x^T A y.

";

%feature("docstring") casadi::Matrix::jtimes "

Functions called by friend functions defined here

";

%feature("docstring") casadi::Matrix::dim "

Get string representation of dimensions. The representation is e.g. \"4x5\"
or \"4x5,10nz\".

";

%feature("docstring") casadi::Matrix::get_nz "

Get a set of nonzeros

";

%feature("docstring") casadi::Matrix::columns "

Get the number of columns, Octave-style syntax.

";

%feature("docstring") casadi::Matrix::T "

Transpose the matrix.

";

%feature("docstring") friendwrap_any "

Returns true only if any element in the matrix is true.

";

%feature("docstring") casadi::Matrix::is_smooth "[INTERNAL]  Check if
smooth.

";

%feature("docstring") casadi::Matrix::clear "";

%feature("docstring") casadi::Matrix::rows "

Get the number of rows, Octave-style syntax.

";

%feature("docstring") casadi::Matrix::is_minus_one "

check if the matrix is -1 (note that false negative answers are possible)

";

%feature("docstring") friendwrap_poly_roots "

Attempts to find the roots of a polynomial.

This will only work for polynomials up to order 3 It is assumed that the
roots are real.

";

%feature("docstring") casadi::Matrix::info "

Obtain information about sparsity

";

%feature("docstring") casadi::Matrix::n_dep "[INTERNAL]  Get the number of
dependencies of a binary SXElem Only defined if symbolic scalar.

";

%feature("docstring") casadi::Matrix::is_dense "

Check if the matrix expression is dense.

";

%feature("docstring") casadi::Matrix::print_sparse "

Print sparse matrix style.

";

%feature("docstring") casadi::Matrix::nnz_lower "

Get the number of non-zeros in the lower triangular half.

";

%feature("docstring") casadi::Matrix::reserve "";

%feature("docstring") casadi::Matrix::erase "

>  void casadi::Matrix< T >::erase(const std::vector< int > &rr, const std::vector< int > &cc, bool ind1=false)
------------------------------------------------------------------------

Erase a submatrix (leaving structural zeros in its place) Erase rows and/or
columns of a matrix.

>  void casadi::Matrix< T >::erase(const std::vector< int > &rr, bool ind1=false)
------------------------------------------------------------------------

Erase a submatrix (leaving structural zeros in its place) Erase elements of
a matrix.

";

%feature("docstring") casadi::Matrix::inf "

create a matrix with all inf

";

%feature("docstring") casadi::Matrix::element_hash "[INTERNAL]  Returns a
number that is unique for a given symbolic scalar.

Only defined if symbolic scalar.

";

%feature("docstring") casadi::Matrix::scalar_matrix "[INTERNAL]  Create
nodes by their ID.

";

%feature("docstring") friendwrap_ramp "

ramp function

\\\\[ \\\\begin {cases} R(x) = 0 & x <= 1 \\\\\\\\ R(x) = x & x > 1 \\\\\\\\
\\\\end {cases} \\\\]

Also called: slope function

";

%feature("docstring") casadi::Matrix::print_vector "

Print vector-style.

";

%feature("docstring") casadi::Matrix::ones "

Create a dense matrix or a matrix with specified sparsity with all entries
one.

";

%feature("docstring") casadi::Matrix::resize "";

%feature("docstring") casadi::Matrix::rand "

Create a matrix with uniformly distributed random numbers.

";

%feature("docstring") casadi::Matrix::row "

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring") casadi::Matrix::zeros "

Create a dense matrix or a matrix with specified sparsity with all entries
zero.

";

%feature("docstring") casadi::Matrix::rank1 "

Make a rank-1 update to a matrix A Calculates A + 1/2 * alpha * x*y'.

";

%feature("docstring") casadi::Matrix "

Sparse matrix class. SX and DM are specializations.

General sparse matrix class that is designed with the idea that \"everything
is a matrix\", that is, also scalars and vectors. This philosophy makes it
easy to use and to interface in particularly with Python and Matlab/Octave.
Index starts with 0. Index vec happens as follows: (rr, cc) -> k =
rr+cc*size1() Vectors are column vectors.  The storage format is Compressed
Column Storage (CCS), similar to that used for sparse matrices in Matlab,
but unlike this format, we do allow for elements to be structurally non-zero
but numerically zero.  Matrix<Scalar> is polymorphic with a
std::vector<Scalar> that contain all non-identical-zero elements. The
sparsity can be accessed with Sparsity& sparsity() Joel Andersson

C++ includes: casadi_common.hpp ";

%feature("docstring") casadi::Matrix::dep "[INTERNAL]  Get expressions of
the children of the expression Only defined if symbolic scalar. Wraps SXElem
SXElem::dep(int ch=0) const.

";

%feature("docstring") casadi::Matrix::sym "

>  static Matrix< Scalar >  casadi::GenericMatrix< Matrix< Scalar >  >::sym(const std::string &name, int nrow=1, int ncol=1)
------------------------------------------------------------------------

Create an nrow-by-ncol symbolic primitive.

>  static Matrix< Scalar >  casadi::GenericMatrix< Matrix< Scalar >  >::sym(const std::string &name, const std::pair< int, int > &rc)
------------------------------------------------------------------------

Construct a symbolic primitive with given dimensions.

>  static Matrix< Scalar >  casadi::GenericMatrix< Matrix< Scalar >  >::sym(const std::string &name, const Sparsity &sp)
------------------------------------------------------------------------

Create symbolic primitive with a given sparsity pattern.

>  static std::vector<Matrix< Scalar >  > casadi::GenericMatrix< Matrix< Scalar >  >::sym(const std::string &name, const Sparsity &sp, int p)
------------------------------------------------------------------------

Create a vector of length p with with matrices with symbolic primitives of
given sparsity.

>  static std::vector<Matrix< Scalar >  > casadi::GenericMatrix< Matrix< Scalar >  >::sym(const std::string &name, int nrow, int ncol, int p)
------------------------------------------------------------------------

Create a vector of length p with nrow-by-ncol symbolic primitives.

>  static std::vector<std::vector<Matrix< Scalar > > > casadi::GenericMatrix< Matrix< Scalar >  >::sym(const std::string &name, const Sparsity &sp, int p, int r)
------------------------------------------------------------------------

Create a vector of length r of vectors of length p with symbolic primitives
with given sparsity.

>  static std::vector<std::vector<Matrix< Scalar > > > casadi::GenericMatrix< Matrix< Scalar >  >::sym(const std::string &name, int nrow, int ncol, int p, int r)
------------------------------------------------------------------------

Create a vector of length r of vectors of length p with nrow-by-ncol
symbolic primitives.

";

%feature("docstring") friendwrap_eig_symbolic "

Attempts to find the eigenvalues of a symbolic matrix This will only work
for up to 3x3 matrices.

";

%feature("docstring") casadi::Matrix::is_leaf "[INTERNAL]  Check if SX is a
leaf of the SX graph.

Only defined if symbolic scalar.

";

%feature("docstring") friendwrap_sparsify "

Make a matrix sparse by removing numerical zeros.

";

%feature("docstring") friendwrap_cofactor "

Get the (i,j) cofactor matrix.

";

%feature("docstring") casadi::Matrix::colind "

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring") casadi::Matrix::print_dense "

Print dense matrix-stype.

";

%feature("docstring") friendwrap_ldl "

Sparse LDL factorization Only guarenteed to work for positive definite
matrices.

";

%feature("docstring") casadi::Matrix::matrix_scalar "[INTERNAL]  Create
nodes by their ID.

";

%feature("docstring") casadi::Matrix::nan "

create a matrix with all nan

";

%feature("docstring") casadi::Matrix::is_commutative "[INTERNAL]  Check
whether a binary SX is commutative.

Only defined if symbolic scalar.

";

%feature("docstring") casadi::Matrix::is_valid_input "[INTERNAL]  Check if
matrix can be used to define function inputs. Sparse matrices can return
true if all non-zero elements are symbolic.

";

%feature("docstring") friendwrap_heaviside "

Heaviside function.

\\\\[ \\\\begin {cases} H(x) = 0 & x<0 \\\\\\\\ H(x) = 1/2 & x=0 \\\\\\\\
H(x) = 1 & x>0 \\\\\\\\ \\\\end {cases} \\\\]

";

%feature("docstring") casadi::Matrix::size "

>  std::pair<int, int> casadi::GenericMatrix< Matrix< Scalar >  >::size() const
------------------------------------------------------------------------

Get the shape.

>  int casadi::GenericMatrix< Matrix< Scalar >  >::size(int axis) const
------------------------------------------------------------------------

Get the size along a particular dimensions.

";

%feature("docstring") casadi::Matrix::mpower "

Functions called by friend functions defined here

";

%feature("docstring") casadi::Matrix::size1 "

Get the first dimension (i.e. number of rows)

";

%feature("docstring") casadi::Matrix::is_one "

check if the matrix is 1 (note that false negative answers are possible)

";

%feature("docstring") casadi::Matrix::is_row "

Check if the matrix is a row vector (i.e. size1()==1)

";

%feature("docstring") casadi::Matrix::__nonzero__ "

>  bool casadi::Matrix< T >::__nonzero__() const 
------------------------------------------------------------------------

Returns the truth value of a Matrix.

>  bool casadi::Matrix< SXElem >::__nonzero__() const
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") friendwrap_taylor "

univariate Taylor series expansion

Calculate the Taylor expansion of expression 'ex' up to order 'order' with
respect to variable 'x' around the point 'a'

$(x)=f(a)+f'(a)(x-a)+f''(a)\\\\frac
{(x-a)^2}{2!}+f'''(a)\\\\frac{(x-a)^3}{3!}+\\\\ldots$

Example usage:

::

>>   x



";

%feature("docstring") casadi::Matrix::size2 "

Get the second dimension (i.e. number of columns)

";

%feature("docstring") casadi::Matrix::is_square "

Check if the matrix expression is square.

";

%feature("docstring") casadi::Matrix::tangent "

Functions called by friend functions defined here

";

%feature("docstring") casadi::Matrix::has_nz "

Returns true if the matrix has a non-zero at location rr, cc.

";

%feature("docstring") casadi::Matrix::is_eye "

check if the matrix is an identity matrix (note that false negative answers
are possible)

";

%feature("docstring") casadi::Matrix::is_empty "

Check if the sparsity is empty, i.e. if one of the dimensions is zero (or
optionally both dimensions)

";

%feature("docstring") casadi::Matrix::linearize "

Functions called by friend functions defined here

";

%feature("docstring") casadi::Matrix::reset_input "[INTERNAL]  Reset the
marker for an input expression.

";

%feature("docstring") friendwrap_poly_coeff "

extracts polynomial coefficients from an expression

Parameters:
-----------

ex:  Scalar expression that represents a polynomial

x:  Scalar symbol that the polynomial is build up with

";

%feature("docstring") casadi::Matrix::printme "";

%feature("docstring") friendwrap_gauss_quadrature "

>  Matrix<Scalar> gauss_quadrature(const Matrix< Scalar > &f, const Matrix< Scalar > &x, const Matrix< Scalar > &a, const Matrix< Scalar > &b, int order=5)
------------------------------------------------------------------------

Integrate f from a to b using Gaussian quadrature with n points.

>  Matrix<Scalar> gauss_quadrature(const Matrix< Scalar > &f, const Matrix< Scalar > &x, const Matrix< Scalar > &a, const Matrix< Scalar > &b, int order, const Matrix< Scalar > &w)
------------------------------------------------------------------------

Matrix adjoint.

";

%feature("docstring") casadi::Matrix::set_scientific "

Set the 'precision, width & scientific' used in printing and serializing to
streams.

";

%feature("docstring") friendwrap_qr_sparse "

Sparse direct QR factorization See T. Davis: Direct Methods for Sparse
Linear Systems.

";

%feature("docstring") friendwrap_pw_const "

Create a piecewise constant function Create a piecewise constant function
with n=val.size() intervals.

Inputs:

Parameters:
-----------

t:  a scalar variable (e.g. time)

tval:  vector with the discrete values of t at the interval transitions
(length n-1)

val:  vector with the value of the function for each interval (length n)

";

%feature("docstring") casadi::Matrix::enlarge "

Enlarge matrix Make the matrix larger by inserting empty rows and columns,
keeping the existing non-zeros.

";

%feature("docstring") casadi::Matrix::get_str "

Get string representation.

";

%feature("docstring") casadi::Matrix::is_symbolic "[INTERNAL]  Check if
symbolic (Dense) Sparse matrices invariable return false.

";

%feature("docstring") friendwrap_pw_lin "

t a scalar variable (e.g. time)

Create a piecewise linear function Create a piecewise linear function:

Inputs: tval vector with the the discrete values of t (monotonically
increasing) val vector with the corresponding function values (same length
as tval)

";

%feature("docstring") casadi::Matrix::is_column "

Check if the matrix is a column vector (i.e. size2()==1)

";

%feature("docstring") casadi::Matrix::Matrix "

>  casadi::Matrix< T >::Matrix()
------------------------------------------------------------------------

constructors

empty 0-by-0 matrix constructor

>  casadi::Matrix< T >::Matrix(const Matrix< Scalar > &m)
------------------------------------------------------------------------

Copy constructor.

>  casadi::Matrix< T >::Matrix(int nrow, int ncol)
------------------------------------------------------------------------

Create a sparse matrix with all structural zeros.

>  casadi::Matrix< T >::Matrix(const Sparsity &sp)
------------------------------------------------------------------------

Create a sparse matrix from a sparsity pattern. Same as
Matrix::ones(sparsity)

>  casadi::Matrix< T >::Matrix(const Sparsity &sp, const Matrix< Scalar > &d)
------------------------------------------------------------------------

Construct matrix with a given sparsity and nonzeros.

>  casadi::Matrix< T >::Matrix(double val)
------------------------------------------------------------------------

This constructor enables implicit type conversion from a numeric type.

>  casadi::Matrix< T >::Matrix(const std::vector< std::vector< double > > &m)
------------------------------------------------------------------------

Dense matrix constructor with data given as vector of vectors.

>  casadi::Matrix< T >::Matrix(const std::vector< A > &x)
------------------------------------------------------------------------

Create an expression from a vector.

>  casadi::Matrix< T >::Matrix(const Matrix< A > &x)
------------------------------------------------------------------------

Create a matrix from another matrix with a different entry type Assumes that
the scalar conversion is valid.

";

%feature("docstring") friendwrap_chol "

Obtain a Cholesky factorisation of a matrix Performs and LDL transformation
[L,D] = ldl(A) and returns diag(sqrt(D))*L'.

";

%feature("docstring") friendwrap_rectangle "

rectangle function

\\\\[ \\\\begin {cases} \\\\Pi(x) = 1 & |x| < 1/2 \\\\\\\\ \\\\Pi(x) = 1/2 &
|x| = 1/2 \\\\\\\\ \\\\Pi(x) = 0 & |x| > 1/2 \\\\\\\\ \\\\end {cases} \\\\]

Also called: gate function, block function, band function, pulse function,
window function

";

%feature("docstring") casadi::Matrix::is_zero "

check if the matrix is 0 (note that false negative answers are possible)

";

%feature("docstring") casadi::Matrix::is_vector "

Check if the matrix is a row or column vector.

";

%feature("docstring") casadi::Matrix::matrix_matrix "[INTERNAL]  Create
nodes by their ID.

";

%feature("docstring") casadi::Matrix::binary "[INTERNAL]  Create nodes by
their ID.

";

%feature("docstring") casadi::Matrix::get_nonzeros "

Get all nonzeros.

Implementation of Matrix::get_nonzeros (in public API)

";

%feature("docstring") casadi::Matrix::disp "

Print a representation of the object.

";

%feature("docstring") casadi::Matrix::has_duplicates "[INTERNAL]  Detect
duplicate symbolic expressions If there are symbolic primitives appearing
more than once, the function will return true and the names of the duplicate
expressions will be passed to casadi_warning. Note: Will mark the node using
SXElem::set_temp. Make sure to call reset_input() after usage.

";

%feature("docstring") casadi::Matrix::name "[INTERNAL]  Get name (only if
symbolic scalar)

";

%feature("docstring") casadi::Matrix::has_zeros "

Check if the matrix has any zero entries which are not structural zeros.

";

%feature("docstring") casadi::Matrix::is_scalar "

Check if the matrix expression is scalar.

";

%feature("docstring") casadi::Matrix::get_colind "

Get the sparsity pattern. See the Sparsity class for details.

";


// File: classcasadi_1_1MinusInfSX.xml


// File: classcasadi_1_1MinusOneSX.xml


// File: classcasadi_1_1MMax.xml


// File: classcasadi_1_1MMin.xml


// File: classcasadi_1_1Monitor.xml


// File: classcasadi_1_1MultipleOutput.xml


// File: classcasadi_1_1Multiplication.xml


// File: classcasadi_1_1MX.xml


/*  Construct symbolic primitives  */

/* The \"sym\" function is intended to work in a similar way as \"sym\" used
in the Symbolic Toolbox for Matlab but instead creating a CasADi symbolic
primitive.

*/ %feature("docstring") casadi::MX::get_output "

Get an output.

";

%feature("docstring") casadi::MX::disp "

Print a description of the object.

";

%feature("docstring") casadi::MX::attachAssert "

returns itself, but with an assertion attached

If y does not evaluate to 1, a runtime error is raised

";

%feature("docstring") casadi::MX::jtimes "

Functions called by friend functions defined here

";

%feature("docstring") friendwrap_inv_node "

Inverse node.

";

%feature("docstring") casadi::MX "

MX - Matrix expression.

The MX class is used to build up trees made up from MXNodes. It is a more
general graph representation than the scalar expression, SX, and much less
efficient for small objects. On the other hand, the class allows much more
general operations than does SX, in particular matrix valued operations and
calls to arbitrary differentiable functions.

The MX class is designed to have identical syntax with the Matrix<> template
class, and uses DM (i.e. Matrix<double>) as its internal representation of
the values at a node. By keeping the syntaxes identical, it is possible to
switch from one class to the other, as well as inlining MX functions to
SXElem functions.

Note that an operation is always \"lazy\", making a matrix multiplication
will create a matrix multiplication node, not perform the actual
multiplication.

Joel Andersson

C++ includes: mx.hpp ";

%feature("docstring") casadi::MX::is_scalar "

Check if the matrix expression is scalar.

";

%feature("docstring") casadi::MX::erase "

>  void casadi::MX::erase(const std::vector< int > &rr, const std::vector< int > &cc, bool ind1=false)
------------------------------------------------------------------------

Erase a submatrix (leaving structural zeros in its place) Erase rows and/or
columns of a matrix.

>  void casadi::MX::erase(const std::vector< int > &rr, bool ind1=false)
------------------------------------------------------------------------

Erase a submatrix (leaving structural zeros in its place) Erase elements of
a matrix.

";

%feature("docstring") casadi::MX::monitor "

Monitor an expression Returns itself, but with the side effect of printing
the nonzeros along with a comment.

";

%feature("docstring") casadi::MX::primitives "

Get primitives.

";

%feature("docstring") casadi::MX::print_ptr "[INTERNAL]  Print the pointer
to the internal class

";

%feature("docstring") casadi::MX::columns "

Get the number of columns, Octave-style syntax.

";

%feature("docstring") casadi::MX::is_constant "

Check if constant.

";

%feature("docstring") casadi::MX::is_output "

Check if evaluation output.

";

%feature("docstring") casadi::MX::set "

>  void casadi::MX::set(const MX &m, bool ind1, const Slice &rr)

>  void casadi::MX::set(const MX &m, bool ind1, const Matrix< int > &rr)

>  void casadi::MX::set(const MX &m, bool ind1, const Sparsity &sp)
------------------------------------------------------------------------

Set a submatrix, single argument

";

%feature("docstring") casadi::MX::is_valid_input "

Check if matrix can be used to define function inputs. Valid inputs for
MXFunctions are combinations of Reshape, concatenations and SymbolicMX.

";

%feature("docstring") casadi::MX::binary "

Create nodes by their ID.

";

%feature("docstring") casadi::MX::sparsity "

Get the sparsity pattern.

";

%feature("docstring") friendwrap_lift "

Lift the expression Experimental feature.

";

%feature("docstring") casadi::MX::gradient "

Functions called by friend functions defined here

";

%feature("docstring") casadi::MX::is_tril "

Check if the matrix is lower triangular.

";

%feature("docstring") casadi::MX::size2 "

Get the second dimension (i.e. number of columns)

";

%feature("docstring") casadi::MX::size1 "

Get the first dimension (i.e. number of rows)

";

%feature("docstring") casadi::MX::linearize "

Functions called by friend functions defined here

";

%feature("docstring") casadi::MX::is_op "

Is it a certain operation.

";

%feature("docstring") casadi::MX::is_triu "

Check if the matrix is upper triangular.

";

%feature("docstring") casadi::MX::~MX "[INTERNAL]  Destructor.

";

%feature("docstring") casadi::MX::set_nz "

Set a set of nonzeros

";

%feature("docstring") casadi::MX::n_out "

Number of outputs.

";

%feature("docstring") casadi::MX::set_temp "[INTERNAL]  Set the temporary
variable.

";

%feature("docstring") casadi::MX::rows "

Get the number of rows, Octave-style syntax.

";

%feature("docstring") casadi::MX::is_one "

check if zero (note that false negative answers are possible)

";

%feature("docstring") casadi::MX::is_empty "

Check if the sparsity is empty, i.e. if one of the dimensions is zero (or
optionally both dimensions)

";

%feature("docstring") casadi::MX::get_nz "

Get a set of nonzeros

";

%feature("docstring") casadi::MX::ones "

Create a dense matrix or a matrix with specified sparsity with all entries
one.

";

%feature("docstring") casadi::MX::is_transpose "

Is the expression a transpose?

";

%feature("docstring") casadi::MX::is_binary "

Is binary operation.

";

%feature("docstring") casadi::MX::inf "

create a matrix with all inf

";

%feature("docstring") friendwrap_matrix_expand "

Expand MX graph to SXFunction call.

Expand the given expression e, optionally supplying expressions contained in
it at which expansion should stop.

";

%feature("docstring") casadi::MX::colind "

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring") casadi::MX::is_symbolic "

Check if symbolic.

";

%feature("docstring") casadi::MX::is_eye "

check if identity

";

%feature("docstring") casadi::MX::join_primitives "

Join an expression along symbolic primitives.

";

%feature("docstring") casadi::MX::reset_input "[INTERNAL]  Reset the marker
for an input expression.

";

%feature("docstring") casadi::MX::get_colind "

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring") casadi::MX::is_null "

Is a null pointer?

";

%feature("docstring") casadi::MX::is_multiplication "

Check if multiplication.

";

%feature("docstring") casadi::MX::nnz "

Get the number of (structural) non-zero elements.

";

%feature("docstring") casadi::MX::dim "

Get string representation of dimensions. The representation is e.g. \"4x5\"
or \"4x5,10nz\".

";

%feature("docstring") friendwrap_find "

Find first nonzero If failed, returns the number of rows.

";

%feature("docstring") casadi::MX::is_minus_one "

check if zero (note that false negative answers are possible)

";

%feature("docstring") friendwrap_graph_substitute "

>  MX graph_substitute(const MX &ex, const std::vector< MX > &v, const std::vector< MX > &vdef)
------------------------------------------------------------------------

Substitute single expression in graph Substitute variable v with expression
vdef in an expression ex, preserving nodes.

>  std::vector<MX> graph_substitute(const std::vector< MX > &ex, const std::vector< MX > &v, const std::vector< MX > &vdef)
------------------------------------------------------------------------

Substitute multiple expressions in graph Substitute variable var with
expression expr in multiple expressions, preserving nodes.

";

%feature("docstring") casadi::MX::get_row "

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring") casadi::MX::is_call "

Check if evaluation.

";

%feature("docstring") casadi::MX::nnz_upper "

Get the number of non-zeros in the upper triangular half.

";

%feature("docstring") casadi::MX::get_temp "[INTERNAL]  Get the temporary
variable

";

%feature("docstring") casadi::MX::__hash__ "

Returns a number that is unique for a given Node. If the Object does not
point to any node, \"0\" is returned.

";

%feature("docstring") casadi::MX::zeros "

Create a dense matrix or a matrix with specified sparsity with all entries
zero.

";

%feature("docstring") casadi::MX::is_zero "

check if zero (note that false negative answers are possible)

";

%feature("docstring") casadi::MX::get_str "

Get string representation.

";

%feature("docstring") casadi::MX::size "

>  std::pair<int, int> casadi::GenericMatrix< MX  >::size() const
------------------------------------------------------------------------

Get the shape.

>  int casadi::GenericMatrix< MX  >::size(int axis) const
------------------------------------------------------------------------

Get the size along a particular dimensions.

";

%feature("docstring") casadi::MX::T "

Transpose the matrix.

";

%feature("docstring") casadi::MX::is_vector "

Check if the matrix is a row or column vector.

";

%feature("docstring") casadi::MX::printme "";

%feature("docstring") casadi::MX::nan "

create a matrix with all nan

";

%feature("docstring") casadi::MX::row "

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring") casadi::MX::n_dep "

Get the number of dependencies of a binary SXElem.

";

%feature("docstring") casadi::MX::has_duplicates "[INTERNAL]  Detect
duplicate symbolic expressions If there are symbolic primitives appearing
more than once, the function will return true and the names of the duplicate
expressions will be passed to casadi_warning. Note: Will mark the node using
MX::set_temp. Make sure to call reset_input() after usage.

";

%feature("docstring") casadi::MX::class_name "

Get class name.

";

%feature("docstring") casadi::MX::is_norm "

Check if norm.

";

%feature("docstring") casadi::MX::mpower "

Functions called by friend functions defined here

";

%feature("docstring") casadi::MX::numel "

Get the number of elements.

";

%feature("docstring") casadi::MX::enlarge "

Enlarge matrix Make the matrix larger by inserting empty rows and columns,
keeping the existing non-zeros.

";

%feature("docstring") casadi::MX::sym "

>  static MX  casadi::GenericMatrix< MX  >::sym(const std::string &name, int nrow=1, int ncol=1)
------------------------------------------------------------------------

Create an nrow-by-ncol symbolic primitive.

>  static MX  casadi::GenericMatrix< MX  >::sym(const std::string &name, const std::pair< int, int > &rc)
------------------------------------------------------------------------

Construct a symbolic primitive with given dimensions.

>  static MX  casadi::GenericMatrix< MX  >::sym(const std::string &name, const Sparsity &sp)
------------------------------------------------------------------------

Create symbolic primitive with a given sparsity pattern.

>  static std::vector<MX  > casadi::GenericMatrix< MX  >::sym(const std::string &name, const Sparsity &sp, int p)
------------------------------------------------------------------------

Create a vector of length p with with matrices with symbolic primitives of
given sparsity.

>  static std::vector<MX  > casadi::GenericMatrix< MX  >::sym(const std::string &name, int nrow, int ncol, int p)
------------------------------------------------------------------------

Create a vector of length p with nrow-by-ncol symbolic primitives.

>  static std::vector<std::vector<MX > > casadi::GenericMatrix< MX  >::sym(const std::string &name, const Sparsity &sp, int p, int r)
------------------------------------------------------------------------

Create a vector of length r of vectors of length p with symbolic primitives
with given sparsity.

>  static std::vector<std::vector<MX > > casadi::GenericMatrix< MX  >::sym(const std::string &name, int nrow, int ncol, int p, int r)
------------------------------------------------------------------------

Create a vector of length r of vectors of length p with nrow-by-ncol
symbolic primitives.

";

%feature("docstring") casadi::MX::tangent "

Functions called by friend functions defined here

";

%feature("docstring") casadi::MX::is_square "

Check if the matrix expression is square.

";

%feature("docstring") casadi::MX::get "

>  void casadi::MX::get(MX &output_m, bool ind1, const Slice &rr) const

>  void casadi::MX::get(MX &output_m, bool ind1, const Matrix< int > &rr) const

>  void casadi::MX::get(MX &output_m, bool ind1, const Sparsity &sp) const 
------------------------------------------------------------------------

Get a submatrix, single argument

>  void casadi::MX::get(MX &output_m, bool ind1, const Slice &rr, const Slice &cc) const

>  void casadi::MX::get(MX &output_m, bool ind1, const Slice &rr, const Matrix< int > &cc) const

>  void casadi::MX::get(MX &output_m, bool ind1, const Matrix< int > &rr, const Slice &cc) const

>  void casadi::MX::get(MX &output_m, bool ind1, const Matrix< int > &rr, const Matrix< int > &cc) const 
------------------------------------------------------------------------

Get a submatrix, two arguments

";

%feature("docstring") casadi::MX::einstein "

Computes an einstein dense tensor contraction.

Computes the product: C_c = A_a + B_b where a b c are index/einstein
notation in an encoded form

For example, an matrix-matrix product may be written as: C_ij = A_ik B_kj

The encoded form uses strictly negative numbers to indicate labels. For the
above example, we would have: a {-1, -3} b {-3, -2} c {-1 -2}

";

%feature("docstring") casadi::MX::is_column "

Check if the matrix is a column vector (i.e. size2()==1)

";

%feature("docstring") casadi::MX::__nonzero__ "

Returns the truth value of an MX expression.

";

%feature("docstring") casadi::MX::name "

Get the name.

";

%feature("docstring") casadi::MX::info "

Obtain information about node

";

%feature("docstring") casadi::MX::which_function "

Get function - only valid when is_call() is true.

";

%feature("docstring") casadi::MX::MX "

>  casadi::MX::MX()
------------------------------------------------------------------------

Default constructor.

>  casadi::MX::MX(int nrow, int ncol)
------------------------------------------------------------------------

Create a sparse matrix with all structural zeros.

>  casadi::MX::MX(const Sparsity &sp)
------------------------------------------------------------------------

Create a sparse matrix from a sparsity pattern. Same as MX::ones(sparsity)

>  casadi::MX::MX(const Sparsity &sp, const MX &val)
------------------------------------------------------------------------

Construct matrix with a given sparsity and nonzeros.

>  casadi::MX::MX(double x)
------------------------------------------------------------------------

Create scalar constant (also implicit type conversion)

>  casadi::MX::MX(const MX &x)
------------------------------------------------------------------------

Copy constructor.

>  casadi::MX::MX(const std::vector< double > &x)
------------------------------------------------------------------------

Create vector constant (also implicit type conversion)

>  casadi::MX::MX(const Matrix< double > &x)
------------------------------------------------------------------------

Create sparse matrix constant (also implicit type conversion)

";

%feature("docstring") casadi::MX::rank1 "

Make a rank-1 update to a matrix A Calculates A + 1/2 * alpha * x*y'.

";

%feature("docstring") casadi::MX::bilin "

Calculate bilinear form x^T A y.

";

%feature("docstring") casadi::MX::nnz_lower "

Get the number of non-zeros in the lower triangular half.

";

%feature("docstring") casadi::MX::is_unary "

Is unary operation.

";

%feature("docstring") casadi::MX::is_commutative "

Check if commutative operation.

";

%feature("docstring") casadi::MX::mapping "

Get an IM representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") casadi::MX::split_primitives "

Split up an expression along symbolic primitives.

";

%feature("docstring") casadi::MX::is_dense "

Check if the matrix expression is dense.

";

%feature("docstring") casadi::MX::op "

Get operation type.

";

%feature("docstring") casadi::MX::n_primitives "

Get the number of primitives for MXFunction inputs/outputs.

";

%feature("docstring") casadi::MX::dep "

Get the nth dependency as MX.

";

%feature("docstring") casadi::MX::get_sparsity "

Get an owning reference to the sparsity pattern.

";

%feature("docstring") casadi::MX::nnz_diag "

Get get the number of non-zeros on the diagonal.

";

%feature("docstring") casadi::MX::unary "

Create nodes by their ID.

";

%feature("docstring") casadi::MX::which_output "

Get the index of evaluation output - only valid when is_output() is true.

";

%feature("docstring") casadi::MX::is_regular "

Checks if expression does not contain NaN or Inf.

";

%feature("docstring") casadi::MX::is_row "

Check if the matrix is a row vector (i.e. size1()==1)

";


// File: classcasadi_1_1MXFunction.xml


// File: classcasadi_1_1NanSX.xml


// File: classcasadi_1_1Newton.xml
%feature("docstring") casadi::Newton::print "[INTERNAL]  C-style formatted
printing during evaluation.

";

%feature("docstring") casadi::Newton::get_max_in "[INTERNAL]  Get largest
input value.

";

%feature("docstring") casadi::Newton::jit_dependencies "[INTERNAL]  JIT for
dependencies.

";

%feature("docstring") casadi::Newton::print_options "[INTERNAL]  Print list
of options.

";

%feature("docstring") casadi::Newton::definition "[INTERNAL]  Get function
signature: name:(inputs)->(outputs)

";

%feature("docstring") casadi::Newton::symbolic_output "[INTERNAL]  Get a
vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::Newton::replace_fseed "[INTERNAL]  Replace
0-by-0 forward seeds.

";

%feature("docstring") casadi::Newton::clear_mem "[INTERNAL]  Clear all
memory (called from destructor)

";

%feature("docstring") casadi::Newton::Newton "[INTERNAL]  Constructor.

";

%feature("docstring") casadi::Newton::adjViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::Newton::expand "[INTERNAL] ";

%feature("docstring") casadi::Newton::get_sparsity_in "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Newton::get_reverse "[INTERNAL]  Generate a
function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::Newton::get_default_in "[INTERNAL]  Get
default input value.

";

%feature("docstring") casadi::Newton::get_function "[INTERNAL] ";

%feature("docstring") casadi::Newton::checkout "[INTERNAL]  Checkout a
memory object.

";

%feature("docstring") casadi::Newton::jacobian "[INTERNAL]  Return Jacobian
of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Newton::getAtomicOutput "

[DEPRECATED] Renamed instruction_output

";

%feature("docstring") casadi::Newton::get_free "[INTERNAL]  Print free
variables.

";

%feature("docstring") casadi::Newton::sparsity_jac "[INTERNAL]  Get, if
necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Newton::class_name "[INTERNAL]  Readable name
of the internal class.

";

%feature("docstring") casadi::Newton::codegen_sparsities "[INTERNAL]
Codegen sparsities.

";

%feature("docstring") casadi::Newton::get_partition "[INTERNAL]  Get the
unidirectional or bidirectional partition.

";

%feature("docstring") casadi::Newton::export_code "[INTERNAL]  Export
function in a specific language.

";

%feature("docstring") casadi::Newton::instruction_input "[INTERNAL]  Get
the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::Newton::getJacSparsity "[INTERNAL]  Generate
the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Newton::get_abstol "[INTERNAL]  Get absolute
tolerance.

";

%feature("docstring") casadi::Newton::matching_res "[INTERNAL]  Check if
output arguments that needs to be replaced.

";

%feature("docstring") casadi::Newton::set_temp "[INTERNAL]  Set the work
vectors.

";

%feature("docstring") casadi::Newton::is_a "[INTERNAL]  Check if the
function is of a particular type.

";

%feature("docstring") casadi::Newton::slice "[INTERNAL]  returns a new
function with a selection of inputs/outputs of the original

";

%feature("docstring") casadi::Newton::release "[INTERNAL]  Release a memory
object.

";

%feature("docstring") casadi::Newton::alloc_res "[INTERNAL]  Ensure
required length of res field.

";

%feature("docstring") casadi::Newton::get_n_out "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::Newton::get_sparsity_out "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Newton::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::Newton::construct "[INTERNAL]  Construct
Prepares the function for evaluation.

";

%feature("docstring") casadi::Newton::plugin_name "[INTERNAL] ";

%feature("docstring") casadi::Newton::sp_forward "[INTERNAL]  Propagate
sparsity forward.

";

%feature("docstring") casadi::Newton::which_depends "[INTERNAL]  Which
variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::Newton::has_function "[INTERNAL] ";

%feature("docstring") casadi::Newton::reverse "[INTERNAL]  Return function
that calculates adjoint derivatives reverse(nadj) returns a cached instance
if available, and calls  Function get_reverse(int nadj) if no cached version
is available.

";

%feature("docstring") casadi::Newton::alloc_iw "[INTERNAL]  Ensure required
length of iw field.

";

%feature("docstring") casadi::Newton::instruction_constant "[INTERNAL]  Get
the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::Newton::fwd_seed "[INTERNAL]  Symbolic
expressions for the forward seeds.

";

%feature("docstring") casadi::Newton::getJacSparsityHierarchicalSymm "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::Newton::codegen_declarations "[INTERNAL]
Generate code for the declarations of the C function.

";

%feature("docstring") casadi::Newton::init "[INTERNAL]  Initialize.

";

%feature("docstring") casadi::Newton::eval_sx "[INTERNAL]  Evaluate with
symbolic scalars.

";

%feature("docstring") casadi::Newton::codegen_body "[INTERNAL]  Generate
code for the function body.

";

%feature("docstring") casadi::Newton::size_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Newton::alloc_arg "[INTERNAL]  Ensure
required length of arg field.

";

%feature("docstring") casadi::Newton::numel_in "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::Newton::calc_function "[INTERNAL] ";

%feature("docstring") casadi::Newton::sx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Newton::~Newton "[INTERNAL]  Destructor.

";

%feature("docstring") casadi::Newton::oracle "[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::Newton::sprint "[INTERNAL]  C-style formatted
printing to string.

";

%feature("docstring") casadi::Newton::alloc "[INTERNAL]  Ensure work
vectors long enough to evaluate function.

";

%feature("docstring") casadi::Newton::sz_res "[INTERNAL]  Get required
length of res field.

";

%feature("docstring") casadi::Newton::ad_forward "[INTERNAL]  Create call
to (cached) derivative function, forward mode.

";

%feature("docstring") casadi::Newton::replace_aseed "[INTERNAL]  Replace
0-by-0 reverse seeds.

";

%feature("docstring") casadi::Newton::getAdaptorSolverName "[INTERNAL]
Obtain solver name from Adaptor.

";

%feature("docstring") casadi::Newton::info "[INTERNAL]  Obtain information
about function

";

%feature("docstring") casadi::Newton::size1_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Newton::sp_reverse "[INTERNAL]  Propagate
sparsity backwards.

";

%feature("docstring") casadi::Newton::instruction_id "[INTERNAL]  Get an
atomic operation operator index.

";

%feature("docstring") casadi::Newton::has_spfwd "[INTERNAL]  Is the class
able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Newton::ad_reverse "[INTERNAL]  Create call
to (cached) derivative function, reverse mode.

";

%feature("docstring") casadi::Newton::has_reverse "[INTERNAL]  Generate a
function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::Newton::check_arg "[INTERNAL]  Check if input
arguments have correct length and dimensions.

";

%feature("docstring") casadi::Newton "

'newton' plugin for Rootfinder

Implements simple newton iterations to solve an implicit function.

>List of available options

+-----------------+-----------+--------------------------------------------+
|       Id        |   Type    |                Description                 |
+=================+===========+============================================+
| abstol          | OT_DOUBLE | Stopping criterion tolerance on max(|F|)   |
+-----------------+-----------+--------------------------------------------+
| abstolStep      | OT_DOUBLE | Stopping criterion tolerance on step size  |
+-----------------+-----------+--------------------------------------------+
| max_iter        | OT_INT    | Maximum number of Newton iterations to     |
|                 |           | perform before returning.                  |
+-----------------+-----------+--------------------------------------------+
| print_iteration | OT_BOOL   | Print information about each iteration     |
+-----------------+-----------+--------------------------------------------+

Joris Gillis

>List of available options

+-------------------+--------------+-------------------+-------------------+
|        Id         |     Type     |    Description    |      Used in      |
+===================+==============+===================+===================+
| abstol            | OT_DOUBLE    | Stopping          | casadi::Newton    |
|                   |              | criterion         |                   |
|                   |              | tolerance on      |                   |
|                   |              | max(|F|)          |                   |
+-------------------+--------------+-------------------+-------------------+
| abstolStep        | OT_DOUBLE    | Stopping          | casadi::Newton    |
|                   |              | criterion         |                   |
|                   |              | tolerance on step |                   |
|                   |              | size              |                   |
+-------------------+--------------+-------------------+-------------------+
| constraints       | OT_INTVECTOR | Constrain the     | casadi::Rootfinde |
|                   |              | unknowns. 0       | r                 |
|                   |              | (default): no     |                   |
|                   |              | constraint on ui, |                   |
|                   |              | 1: ui >= 0.0, -1: |                   |
|                   |              | ui <= 0.0, 2: ui  |                   |
|                   |              | > 0.0, -2: ui <   |                   |
|                   |              | 0.0.              |                   |
+-------------------+--------------+-------------------+-------------------+
| implicit_input    | OT_INT       | Index of the      | casadi::Rootfinde |
|                   |              | input that        | r                 |
|                   |              | corresponds to    |                   |
|                   |              | the actual root-  |                   |
|                   |              | finding           |                   |
+-------------------+--------------+-------------------+-------------------+
| implicit_output   | OT_INT       | Index of the      | casadi::Rootfinde |
|                   |              | output that       | r                 |
|                   |              | corresponds to    |                   |
|                   |              | the actual root-  |                   |
|                   |              | finding           |                   |
+-------------------+--------------+-------------------+-------------------+
| jacobian_function | OT_FUNCTION  | Function object   | casadi::Rootfinde |
|                   |              | for calculating   | r                 |
|                   |              | the Jacobian      |                   |
|                   |              | (autogenerated by |                   |
|                   |              | default)          |                   |
+-------------------+--------------+-------------------+-------------------+
| linear_solver     | OT_STRING    | User-defined      | casadi::Rootfinde |
|                   |              | linear solver     | r                 |
|                   |              | class. Needed for |                   |
|                   |              | sensitivities.    |                   |
+-------------------+--------------+-------------------+-------------------+
| linear_solver_opt | OT_DICT      | Options to be     | casadi::Rootfinde |
| ions              |              | passed to the     | r                 |
|                   |              | linear solver.    |                   |
+-------------------+--------------+-------------------+-------------------+
| max_iter          | OT_INT       | Maximum number of | casadi::Newton    |
|                   |              | Newton iterations |                   |
|                   |              | to perform before |                   |
|                   |              | returning.        |                   |
+-------------------+--------------+-------------------+-------------------+
| print_iteration   | OT_BOOL      | Print information | casadi::Newton    |
|                   |              | about each        |                   |
|                   |              | iteration         |                   |
+-------------------+--------------+-------------------+-------------------+

Diagrams
--------



C++ includes: newton.hpp ";

%feature("docstring") casadi::Newton::check_res "[INTERNAL]  Check if
output arguments have correct length and dimensions.

";

%feature("docstring") casadi::Newton::codegen_meta "[INTERNAL]  Generate
meta-information allowing a user to evaluate a generated function.

";

%feature("docstring") casadi::Newton::print_fstats "[INTERNAL]  Print
statistics.

";

%feature("docstring") casadi::Newton::monitored "[INTERNAL] ";

%feature("docstring") casadi::Newton::print_dimensions "[INTERNAL]  Print
dimensions of inputs and outputs.

";

%feature("docstring") casadi::Newton::mx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Newton::sz_arg "[INTERNAL]  Get required
length of arg field.

";

%feature("docstring") casadi::Newton::get_reltol "[INTERNAL]  Get relative
tolerance.

";

%feature("docstring") casadi::Newton::sz_w "[INTERNAL]  Get required length
of w field.

";

%feature("docstring") casadi::Newton::has_jacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Newton::symbolicAdjSeed "[INTERNAL]  Symbolic
expressions for the adjoint seeds.

";

%feature("docstring") casadi::Newton::free_mem "[INTERNAL]  Free memory
block.

";

%feature("docstring") casadi::Newton::index_out "[INTERNAL]  Get output
scheme index by name.

";

%feature("docstring") casadi::Newton::disp_more "[INTERNAL]  Print more.

";

%feature("docstring") casadi::Newton::get_name_in "[INTERNAL]  Names of
function input and outputs.

";

%feature("docstring") casadi::Newton::codegen_incref "[INTERNAL]  Codegen
incref for dependencies.

";

%feature("docstring") casadi::Newton::get_jacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Newton::instruction_MX "[INTERNAL]  get MX
expression associated with instruction

";

%feature("docstring") casadi::Newton::sz_iw "[INTERNAL]  Get required
length of iw field.

";

%feature("docstring") casadi::Newton::n_nodes "[INTERNAL]  Number of nodes
in the algorithm.

";

%feature("docstring") casadi::Newton::has_sprev "[INTERNAL]  Is the class
able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Newton::index_in "[INTERNAL]  Get input
scheme index by name.

";

%feature("docstring") casadi::Newton::n_instructions "[INTERNAL]  Get the
number of atomic operations.

";

%feature("docstring") casadi::Newton::nnz_out "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::Newton::call "[INTERNAL]   Call a function,
templated.

";

%feature("docstring") casadi::Newton::self "[INTERNAL]  Get a public class
instance.

";

%feature("docstring") casadi::Newton::fwdViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::Newton::size2_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Newton::generate_lifted "[INTERNAL]  Extract
the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::Newton::get_options "[INTERNAL]  Options.

";

%feature("docstring") casadi::Newton::nnz_in "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::Newton::generate_dependencies "[INTERNAL]
Export / Generate C code for the generated functions.

";

%feature("docstring") casadi::Newton::setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";

%feature("docstring") casadi::Newton::alloc_w "[INTERNAL]  Ensure required
length of w field.

";

%feature("docstring") casadi::Newton::all_scalar "[INTERNAL]  Are all
inputs and outputs scalar.

";

%feature("docstring") casadi::Newton::codegen_name "[INTERNAL]  Get name in
codegen.

";

%feature("docstring") casadi::Newton::sp_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode, sparsity propagation.

";

%feature("docstring") casadi::Newton::get_forward "[INTERNAL]  Generate a
function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::Newton::uses_output "[INTERNAL]  Do the
derivative functions need nondifferentiated outputs?

";

%feature("docstring") casadi::Newton::alloc_mem "[INTERNAL]  Create memory
block.

";

%feature("docstring") casadi::Newton::has_codegen "[INTERNAL]  Is codegen
supported?

";

%feature("docstring") casadi::Newton::codegen_decref "[INTERNAL]  Codegen
decref for dependencies.

";

%feature("docstring") casadi::Newton::forward "[INTERNAL]  Return function
that calculates forward derivatives forward(nfwd) returns a cached instance
if available, and calls  Function get_forward(int nfwd) if no cached version
is available.

";

%feature("docstring") casadi::Newton::getJacSparsityHierarchical "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::Newton::mx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Newton::create_function "[INTERNAL]  Create
an oracle function

";

%feature("docstring") casadi::Newton::call_forward "[INTERNAL]  Forward
mode AD, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Newton::get_stats "[INTERNAL]  Get all
statistics.

";

%feature("docstring") casadi::Newton::signature "[INTERNAL]  Code generate
the function.

";

%feature("docstring") casadi::Newton::codegen "[INTERNAL]  Generate code
the function.

";

%feature("docstring") casadi::Newton::ad_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::Newton::mapsum_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::Newton::getJacSparsityGen "[INTERNAL]  Get
the sparsity pattern, forward mode.

";

%feature("docstring") casadi::Newton::get_name_out "[INTERNAL]  Names of
function input and outputs.

";

%feature("docstring") casadi::Newton::memory "[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::Newton::wrap "[INTERNAL]  Wrap in an Function
instance consisting of only one MX call.

";

%feature("docstring") casadi::Newton::numel_out "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::Newton::get_n_in "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::Newton::eval_gen "

>  int casadi::FunctionInternal::eval_gen(const double **arg, double **res, int *iw, double *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate numerically.

>  int casadi::FunctionInternal::eval_gen(const SXElem **arg, SXElem **res, int *iw, SXElem *w, void *mem) const

>  int casadi::FunctionInternal::eval_gen(const bvec_t **arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

%feature("docstring") casadi::Newton::instruction_output "[INTERNAL]  Get
the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::Newton::set_function "[INTERNAL]  Register
the function for evaluation and statistics gathering

";

%feature("docstring") casadi::Newton::matching_arg "[INTERNAL]  Check if
input arguments that needs to be replaced.

";

%feature("docstring") casadi::Newton::disp "[INTERNAL]  Display object.

";

%feature("docstring") casadi::Newton::size1_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Newton::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::Newton::free_sx "[INTERNAL]  Get free
variables (SX)

";

%feature("docstring") casadi::Newton::set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::Newton::get_min_in "[INTERNAL]  Get smallest
input value.

";

%feature("docstring") casadi::Newton::replace_arg "[INTERNAL]  Replace
0-by-0 inputs.

";

%feature("docstring") casadi::Newton::replace_res "[INTERNAL]  Replace
0-by-0 outputs.

";

%feature("docstring") casadi::Newton::size2_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Newton::has_derivative "[INTERNAL]  Can
derivatives be calculated in any way?

";

%feature("docstring") casadi::Newton::call_reverse "[INTERNAL]  Reverse
mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Newton::init_mem "[INTERNAL]  Initalize
memory block.

";

%feature("docstring") casadi::Newton::eval_dm "[INTERNAL]  Evaluate with DM
matrices.

";

%feature("docstring") casadi::Newton::sz_work "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") casadi::Newton::factory "[INTERNAL] ";

%feature("docstring") casadi::Newton::has_free "[INTERNAL]  Does the
function have free variables.

";

%feature("docstring") casadi::Newton::size_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Newton::get_jacobian_sparsity "[INTERNAL]
Get Jacobian sparsity.

";

%feature("docstring") casadi::Newton::has_forward "[INTERNAL]  Generate a
function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::Newton::eval "[INTERNAL]  Evaluate
numerically.

";

%feature("docstring") casadi::Newton::call_gen "[INTERNAL]   Call a
function, overloaded.

";

%feature("docstring") casadi::Newton::eval_mx "[INTERNAL]  Evaluate with
symbolic matrices.

";

%feature("docstring") casadi::Newton::sx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Newton::free_mx "[INTERNAL]  Get free
variables ( MX)

";

%feature("docstring") casadi::Newton::getAtomicInput "

[DEPRECATED] Renamed instruction_index

";

%feature("docstring") casadi::Newton::solve "[INTERNAL]   Solve the system
of equations and calculate derivatives.

";

%feature("docstring") casadi::Newton::finalize "[INTERNAL]  Finalize
initialization.

";

%feature("docstring") casadi::Newton::print_option "[INTERNAL]  Print all
information there is to know about a certain option.

";


// File: classcasadi_1_1NlpBuilder.xml


/*  Symbolic representation of the NLP  */

/* Data members

*/ %feature("docstring") casadi::NlpBuilder "

A symbolic NLP representation.

Joel Andersson

C++ includes: nlp_builder.hpp ";

%feature("docstring") casadi::NlpBuilder::type_name "

Readable name of the class.

";

%feature("docstring") casadi::NlpBuilder::import_nl "

Import an .nl file.

";

%feature("docstring") casadi::NlpBuilder::get_str "

Get string representation.

";

%feature("docstring") casadi::NlpBuilder::disp "

Print a description of the object.

";


// File: classcasadi_1_1Nlpsol.xml
%feature("docstring") casadi::Nlpsol::alloc "[INTERNAL]  Ensure work
vectors long enough to evaluate function.

";

%feature("docstring") casadi::Nlpsol::codegen_declarations "[INTERNAL]
Generate code for the declarations of the C function.

";

%feature("docstring") casadi::Nlpsol::oracle "[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::Nlpsol::mapsum_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::Nlpsol::memory "[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::Nlpsol::get_reltol "[INTERNAL]  Get relative
tolerance.

";

%feature("docstring") casadi::Nlpsol::size1_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Nlpsol::get_sparsity_in "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Nlpsol::call_forward "[INTERNAL]  Forward
mode AD, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Nlpsol::matching_arg "[INTERNAL]  Check if
input arguments that needs to be replaced.

";

%feature("docstring") casadi::Nlpsol::sx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Nlpsol::get_function "[INTERNAL] ";

%feature("docstring") casadi::Nlpsol::clear_mem "[INTERNAL]  Clear all
memory (called from destructor)

";

%feature("docstring") casadi::Nlpsol::signature "[INTERNAL]  Code generate
the function.

";

%feature("docstring") casadi::Nlpsol::mx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Nlpsol::instruction_MX "[INTERNAL]  get MX
expression associated with instruction

";

%feature("docstring") casadi::Nlpsol::init_mem "[INTERNAL]  Initalize
memory block.

";

%feature("docstring") casadi::Nlpsol::replace_arg "[INTERNAL]  Replace
0-by-0 inputs.

";

%feature("docstring") casadi::Nlpsol::sprint "[INTERNAL]  C-style formatted
printing to string.

";

%feature("docstring") casadi::Nlpsol::Nlpsol "[INTERNAL]  Constructor.

";

%feature("docstring") casadi::Nlpsol::disp_more "[INTERNAL]  Print
description.

";

%feature("docstring") casadi::Nlpsol::alloc_mem "[INTERNAL]  Create memory
block.

";

%feature("docstring") casadi::Nlpsol::getReducedHessian "[INTERNAL] ";

%feature("docstring") casadi::Nlpsol::sz_iw "[INTERNAL]  Get required
length of iw field.

";

%feature("docstring") casadi::Nlpsol::wrap "[INTERNAL]  Wrap in an Function
instance consisting of only one MX call.

";

%feature("docstring") casadi::Nlpsol::getJacSparsity "[INTERNAL]  Generate
the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Nlpsol::get_sparsity_out "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Nlpsol::create_function "[INTERNAL]  Create
an oracle function

";

%feature("docstring") casadi::Nlpsol::codegen_sparsities "[INTERNAL]
Codegen sparsities.

";

%feature("docstring") casadi::Nlpsol::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::Nlpsol::get_min_in "[INTERNAL]  Get smallest
input value.

";

%feature("docstring") casadi::Nlpsol::n_nodes "[INTERNAL]  Number of nodes
in the algorithm.

";

%feature("docstring") casadi::Nlpsol::has_codegen "[INTERNAL]  Is codegen
supported?

";

%feature("docstring") casadi::Nlpsol::get_options "[INTERNAL]  Options.

";

%feature("docstring") casadi::Nlpsol::get_jacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Nlpsol::get_reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::Nlpsol::has_jacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Nlpsol::print_fstats "[INTERNAL]  Print
statistics.

";

%feature("docstring") casadi::Nlpsol::size1_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Nlpsol::finalize "[INTERNAL]  Finalize
initialization.

";

%feature("docstring") casadi::Nlpsol::alloc_arg "[INTERNAL]  Ensure
required length of arg field.

";

%feature("docstring") casadi::Nlpsol::eval "[INTERNAL]  Evaluate
numerically.

";

%feature("docstring") casadi::Nlpsol::all_scalar "[INTERNAL]  Are all
inputs and outputs scalar.

";

%feature("docstring") casadi::Nlpsol::monitored "[INTERNAL] ";

%feature("docstring") casadi::Nlpsol::symbolic_output "[INTERNAL]  Get a
vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::Nlpsol::factory "[INTERNAL] ";

%feature("docstring") casadi::Nlpsol::get_jacobian_sparsity "[INTERNAL]
Get Jacobian sparsity.

";

%feature("docstring") casadi::Nlpsol::getJacSparsityHierarchical "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::Nlpsol::reverse "[INTERNAL]  Return function
that calculates adjoint derivatives reverse(nadj) returns a cached instance
if available, and calls  Function get_reverse(int nadj) if no cached version
is available.

";

%feature("docstring") casadi::Nlpsol::n_instructions "[INTERNAL]  Get the
number of atomic operations.

";

%feature("docstring") casadi::Nlpsol::export_code "[INTERNAL]  Export
function in a specific language.

";

%feature("docstring") casadi::Nlpsol::nnz_in "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::Nlpsol::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::Nlpsol::setOptionsFromFile "[INTERNAL]  Read
options from parameter xml.

";

%feature("docstring") casadi::Nlpsol::get_name_in "[INTERNAL]  Names of
function input and outputs.

";

%feature("docstring") casadi::Nlpsol::check_res "[INTERNAL]  Check if
output arguments have correct length and dimensions.

";

%feature("docstring") casadi::Nlpsol::sz_res "[INTERNAL]  Get required
length of res field.

";

%feature("docstring") casadi::Nlpsol::getAtomicOutput "

[DEPRECATED] Renamed instruction_output

";

%feature("docstring") casadi::Nlpsol::adjViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::Nlpsol::set_function "[INTERNAL]  Register
the function for evaluation and statistics gathering

";

%feature("docstring") casadi::Nlpsol::release "[INTERNAL]  Release a memory
object.

";

%feature("docstring") casadi::Nlpsol::getJacSparsityHierarchicalSymm "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::Nlpsol::nnz_out "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::Nlpsol::get_n_in "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::Nlpsol::sp_forward "[INTERNAL]  Propagate
sparsity forward.

";

%feature("docstring") casadi::Nlpsol::uses_output "[INTERNAL]  Do the
derivative functions need nondifferentiated outputs?

";

%feature("docstring") casadi::Nlpsol::set_temp "[INTERNAL]  Set the work
vectors.

";

%feature("docstring") casadi::Nlpsol::get_forward "[INTERNAL]  Return
function that calculates forward derivatives forward(nfwd) returns a cached
instance if available, and calls  Function get_forward(int nfwd) if no
cached version is available.

";

%feature("docstring") casadi::Nlpsol::is_a "[INTERNAL]  Check if the
function is of a particular type.

";

%feature("docstring") casadi::Nlpsol::get_max_in "[INTERNAL]  Get largest
input value.

";

%feature("docstring") casadi::Nlpsol::info "[INTERNAL]  Obtain information
about function

";

%feature("docstring") casadi::Nlpsol::replace_fseed "[INTERNAL]  Replace
0-by-0 forward seeds.

";

%feature("docstring") casadi::Nlpsol::codegen_incref "[INTERNAL]  Codegen
incref for dependencies.

";

%feature("docstring") casadi::Nlpsol::has_free "[INTERNAL]  Does the
function have free variables.

";

%feature("docstring") casadi::Nlpsol::free_mx "[INTERNAL]  Get free
variables ( MX)

";

%feature("docstring") casadi::Nlpsol::free_sx "[INTERNAL]  Get free
variables (SX)

";

%feature("docstring") casadi::Nlpsol::has_function "[INTERNAL] ";

%feature("docstring") casadi::Nlpsol::getJacSparsityGen "[INTERNAL]  Get
the sparsity pattern, forward mode.

";

%feature("docstring") casadi::Nlpsol::codegen "[INTERNAL]  Generate code
the function.

";

%feature("docstring") casadi::Nlpsol::alloc_res "[INTERNAL]  Ensure
required length of res field.

";

%feature("docstring") casadi::Nlpsol::instruction_output "[INTERNAL]  Get
the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::Nlpsol::set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::Nlpsol::print_option "[INTERNAL]  Print all
information there is to know about a certain option.

";

%feature("docstring") casadi::Nlpsol::plugin_name "[INTERNAL] ";

%feature("docstring") casadi::Nlpsol::get_n_out "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::Nlpsol::numel_in "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::Nlpsol::fwdViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::Nlpsol::self "[INTERNAL]  Get a public class
instance.

";

%feature("docstring") casadi::Nlpsol::generate_lifted "[INTERNAL]  Extract
the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::Nlpsol::call "[INTERNAL]   Call a function,
templated.

";

%feature("docstring") casadi::Nlpsol::solve "[INTERNAL] ";

%feature("docstring") casadi::Nlpsol::instruction_input "[INTERNAL]  Get
the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::Nlpsol::jacobian "[INTERNAL]  Return Jacobian
of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Nlpsol::size_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Nlpsol::has_forward "[INTERNAL]  Return
function that calculates forward derivatives forward(nfwd) returns a cached
instance if available, and calls  Function get_forward(int nfwd) if no
cached version is available.

";

%feature("docstring") casadi::Nlpsol::expand "[INTERNAL] ";

%feature("docstring") casadi::Nlpsol::matching_res "[INTERNAL]  Check if
output arguments that needs to be replaced.

";

%feature("docstring") casadi::Nlpsol::calc_function "[INTERNAL] ";

%feature("docstring") casadi::Nlpsol::has_reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::Nlpsol::alloc_iw "[INTERNAL]  Ensure required
length of iw field.

";

%feature("docstring") casadi::Nlpsol::free_mem "[INTERNAL]  Free memory
block.

";

%feature("docstring") casadi::Nlpsol::mx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Nlpsol::get_default_in "[INTERNAL]  Get
default input value.

";

%feature("docstring") casadi::Nlpsol::replace_res "[INTERNAL]  Replace
0-by-0 outputs.

";

%feature("docstring") casadi::Nlpsol::print_options "[INTERNAL]  Print list
of options.

";

%feature("docstring") casadi::Nlpsol::sparsity_jac "[INTERNAL]  Get, if
necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Nlpsol "

NLP solver storage class.

Joel Andersson

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| calc_multipliers | OT_BOOL         | Calculate        | casadi::Nlpsol   |
|                  |                 | Lagrange         |                  |
|                  |                 | multipliers in   |                  |
|                  |                 | the Nlpsol base  |                  |
|                  |                 | class            |                  |
+------------------+-----------------+------------------+------------------+
| common_options   | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | auto-generated   | nction           |
|                  |                 | functions        |                  |
+------------------+-----------------+------------------+------------------+
| discrete         | OT_BOOLVECTOR   | Indicates which  | casadi::Nlpsol   |
|                  |                 | of the variables |                  |
|                  |                 | are discrete,    |                  |
|                  |                 | i.e. integer-    |                  |
|                  |                 | valued           |                  |
+------------------+-----------------+------------------+------------------+
| eval_errors_fata | OT_BOOL         | When errors      | casadi::Nlpsol   |
| l                |                 | occur during     |                  |
|                  |                 | evaluation of    |                  |
|                  |                 | f,g,...,stop the |                  |
|                  |                 | iterations       |                  |
+------------------+-----------------+------------------+------------------+
| expand           | OT_BOOL         | Replace MX with  | casadi::Nlpsol   |
|                  |                 | SX expressions   |                  |
|                  |                 | in problem       |                  |
|                  |                 | formulation      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| ignore_check_vec | OT_BOOL         | If set to true,  | casadi::Nlpsol   |
|                  |                 | the input shape  |                  |
|                  |                 | of F will not be |                  |
|                  |                 | checked.         |                  |
+------------------+-----------------+------------------+------------------+
| iteration_callba | OT_FUNCTION     | A function that  | casadi::Nlpsol   |
| ck               |                 | will be called   |                  |
|                  |                 | at each          |                  |
|                  |                 | iteration with   |                  |
|                  |                 | the solver as    |                  |
|                  |                 | input. Check     |                  |
|                  |                 | documentation of |                  |
|                  |                 | Callback .       |                  |
+------------------+-----------------+------------------+------------------+
| iteration_callba | OT_BOOL         | If set to true,  | casadi::Nlpsol   |
| ck_ignore_errors |                 | errors thrown by |                  |
|                  |                 | iteration_callba |                  |
|                  |                 | ck will be       |                  |
|                  |                 | ignored.         |                  |
+------------------+-----------------+------------------+------------------+
| iteration_callba | OT_INT          | Only call the    | casadi::Nlpsol   |
| ck_step          |                 | callback         |                  |
|                  |                 | function every   |                  |
|                  |                 | few iterations.  |                  |
+------------------+-----------------+------------------+------------------+
| monitor          | OT_STRINGVECTOR | Set of user      | casadi::OracleFu |
|                  |                 | problem          | nction           |
|                  |                 | functions to be  |                  |
|                  |                 | monitored        |                  |
+------------------+-----------------+------------------+------------------+
| oracle_options   | OT_DICT         | Options to be    | casadi::Nlpsol   |
|                  |                 | passed to the    |                  |
|                  |                 | oracle function  |                  |
+------------------+-----------------+------------------+------------------+
| specific_options | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | specific auto-   | nction           |
|                  |                 | generated        |                  |
|                  |                 | functions,       |                  |
|                  |                 | overwriting the  |                  |
|                  |                 | defaults from    |                  |
|                  |                 | common_options.  |                  |
|                  |                 | Nested           |                  |
|                  |                 | dictionary.      |                  |
+------------------+-----------------+------------------+------------------+
| verbose_init     | OT_BOOL         | Print out timing | casadi::Nlpsol   |
|                  |                 | information      |                  |
|                  |                 | about the        |                  |
|                  |                 | different stages |                  |
|                  |                 | of               |                  |
|                  |                 | initialization   |                  |
+------------------+-----------------+------------------+------------------+
| warn_initial_bou | OT_BOOL         | Warn if the      | casadi::Nlpsol   |
| nds              |                 | initial guess    |                  |
|                  |                 | does not satisfy |                  |
|                  |                 | LBX and UBX      |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: nlpsol_impl.hpp ";

%feature("docstring") casadi::Nlpsol::call_reverse "[INTERNAL]  Reverse
mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Nlpsol::slice "[INTERNAL]  returns a new
function with a selection of inputs/outputs of the original

";

%feature("docstring") casadi::Nlpsol::sx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Nlpsol::which_depends "[INTERNAL]  Which
variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::Nlpsol::eval_mx "[INTERNAL]  Evaluate with
symbolic matrices.

";

%feature("docstring") casadi::Nlpsol::check_arg "[INTERNAL]  Check if input
arguments have correct length and dimensions.

";

%feature("docstring") casadi::Nlpsol::codegen_meta "[INTERNAL]  Generate
meta-information allowing a user to evaluate a generated function.

";

%feature("docstring") casadi::Nlpsol::forward "[INTERNAL]  Return function
that calculates forward derivatives forward(nfwd) returns a cached instance
if available, and calls  Function get_forward(int nfwd) if no cached version
is available.

";

%feature("docstring") casadi::Nlpsol::disp "[INTERNAL]  Display object.

";

%feature("docstring") casadi::Nlpsol::size_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Nlpsol::check_inputs "[INTERNAL]  Check if
the inputs correspond to a well-posed problem.

";

%feature("docstring") casadi::Nlpsol::eval_dm "[INTERNAL]  Evaluate with DM
matrices.

";

%feature("docstring") casadi::Nlpsol::sp_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode, sparsity propagation.

";

%feature("docstring") casadi::Nlpsol::has_sprev "[INTERNAL]  Is the class
able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Nlpsol::sz_work "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") casadi::Nlpsol::sp_reverse "[INTERNAL]  Propagate
sparsity backwards.

";

%feature("docstring") casadi::Nlpsol::index_in "[INTERNAL]  Get input
scheme index by name.

";

%feature("docstring") casadi::Nlpsol::call_gen "[INTERNAL]   Call a
function, overloaded.

";

%feature("docstring") casadi::Nlpsol::symbolicAdjSeed "[INTERNAL]  Symbolic
expressions for the adjoint seeds.

";

%feature("docstring") casadi::Nlpsol::codegen_body "[INTERNAL]  Generate
code for the function body.

";

%feature("docstring") casadi::Nlpsol::class_name "[INTERNAL]  Readable name
of the internal class.

";

%feature("docstring") casadi::Nlpsol::setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";

%feature("docstring") casadi::Nlpsol::~Nlpsol "[INTERNAL]  Destructor.

";

%feature("docstring") casadi::Nlpsol::print "[INTERNAL]  C-style formatted
printing during evaluation.

";

%feature("docstring") casadi::Nlpsol::definition "[INTERNAL]  Get function
signature: name:(inputs)->(outputs)

";

%feature("docstring") casadi::Nlpsol::getAtomicInput "

[DEPRECATED] Renamed instruction_index

";

%feature("docstring") casadi::Nlpsol::checkout "[INTERNAL]  Checkout a
memory object.

";

%feature("docstring") casadi::Nlpsol::get_stats "[INTERNAL]  Get all
statistics.

";

%feature("docstring") casadi::Nlpsol::jit_dependencies "[INTERNAL]  JIT for
dependencies.

";

%feature("docstring") casadi::Nlpsol::sz_arg "[INTERNAL]  Get required
length of arg field.

";

%feature("docstring") casadi::Nlpsol::index_out "[INTERNAL]  Get output
scheme index by name.

";

%feature("docstring") casadi::Nlpsol::print_dimensions "[INTERNAL]  Print
dimensions of inputs and outputs.

";

%feature("docstring") casadi::Nlpsol::get_free "[INTERNAL]  Print free
variables.

";

%feature("docstring") casadi::Nlpsol::alloc_w "[INTERNAL]  Ensure required
length of w field.

";

%feature("docstring") casadi::Nlpsol::integer_support "[INTERNAL]  Can
discrete variables be treated.

";

%feature("docstring") casadi::Nlpsol::replace_aseed "[INTERNAL]  Replace
0-by-0 reverse seeds.

";

%feature("docstring") casadi::Nlpsol::has_derivative "[INTERNAL]  Can
derivatives be calculated in any way?

";

%feature("docstring") casadi::Nlpsol::eval_sx "[INTERNAL]  Evaluate with
symbolic scalars.

";

%feature("docstring") casadi::Nlpsol::instruction_id "[INTERNAL]  Get an
atomic operation operator index.

";

%feature("docstring") casadi::Nlpsol::get_abstol "[INTERNAL]  Get absolute
tolerance.

";

%feature("docstring") casadi::Nlpsol::numel_out "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::Nlpsol::instruction_constant "[INTERNAL]  Get
the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::Nlpsol::generate_dependencies "[INTERNAL]
Export / Generate C code for the generated functions.

";

%feature("docstring") casadi::Nlpsol::size2_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Nlpsol::codegen_name "[INTERNAL]  Get name in
codegen.

";

%feature("docstring") casadi::Nlpsol::has_spfwd "[INTERNAL]  Is the class
able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Nlpsol::sz_w "[INTERNAL]  Get required length
of w field.

";

%feature("docstring") casadi::Nlpsol::get_name_out "[INTERNAL]  Names of
function input and outputs.

";

%feature("docstring") casadi::Nlpsol::ad_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::Nlpsol::fwd_seed "[INTERNAL]  Symbolic
expressions for the forward seeds.

";

%feature("docstring") casadi::Nlpsol::getAdaptorSolverName "[INTERNAL]
Obtain solver name from Adaptor.

";

%feature("docstring") casadi::Nlpsol::construct "[INTERNAL]  Construct
Prepares the function for evaluation.

";

%feature("docstring") casadi::Nlpsol::init "[INTERNAL]  Initialize.

";

%feature("docstring") casadi::Nlpsol::size2_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Nlpsol::eval_gen "

>  int casadi::FunctionInternal::eval_gen(const double **arg, double **res, int *iw, double *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate numerically.

>  int casadi::FunctionInternal::eval_gen(const SXElem **arg, SXElem **res, int *iw, SXElem *w, void *mem) const

>  int casadi::FunctionInternal::eval_gen(const bvec_t **arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

%feature("docstring") casadi::Nlpsol::get_partition "[INTERNAL]  Get the
unidirectional or bidirectional partition.

";

%feature("docstring") casadi::Nlpsol::codegen_decref "[INTERNAL]  Codegen
decref for dependencies.

";


// File: classcasadi_1_1NonZeros.xml
%feature("docstring") casadi::NonZeros::NonZeros "

Constructor.

";

%feature("docstring") casadi::NonZeros "

Access to a set of nonzeros.

NonZeros class for Matrix NonZeros is the return type for operator[] of the
Matrix class, it allows access to the value as well as changing the parent
object Joel Andersson

C++ includes: nonzeros.hpp ";


// File: classcasadi_1_1Norm.xml


// File: classcasadi_1_1Norm1.xml


// File: classcasadi_1_1Norm2.xml


// File: classcasadi_1_1NormF.xml


// File: classcasadi_1_1NormInf.xml


// File: classcasadi_1_1OneSX.xml


// File: classcasadi_1_1Opti.xml
%feature("docstring") casadi::Opti::stats "

Get statistics.

nlpsol stats are passed as-is. No stability can be guaranteed about this
part of the API

";

%feature("docstring") casadi::Opti::f "

Get objective expression.

";

%feature("docstring") casadi::Opti::g "

Get all (scalarised) constraint expressions as a column vector.

";

%feature("docstring") casadi::Opti::debug "

Get a copy with advanced functionality.

You get access to more methods, but you have no guarantees about API
stability

The copy is effectively a deep copy: Updating the state of the copy does not
update the original.

";

%feature("docstring") casadi::Opti::__hash__ "

Returns a number that is unique for a given Node. If the Object does not
point to any node, \"0\" is returned.

";

%feature("docstring") casadi::Opti::parameter "

Create a parameter (symbol); fixed during optimization.

The order of creation does not matter. It is not required for parameter to
actualy appear in the optimization problem. Parameters that do appear, must
be given a value before the problem can be solved.

Parameters:
-----------

n:  number of rows (default 1)

m:  number of columnss (default 1)

attribute:  'full' (default) or 'symmetric'

";

%feature("docstring") casadi::Opti::p "

Get all (scalarised) parameters as a symbolic column vector.

";

%feature("docstring") casadi::Opti::set_value "

Set value of parameter.

Each parameter must be given a value before 'solve' can be called

";

%feature("docstring") casadi::Opti::lam_g "

Get all (scalarised) dual variables as a symbolic column vector.

Useful for obtaining the Lagrange Hessian:

::

  * sol.value(hessian(opti.f+opti.lam_g'*opti.g,opti.x)) % MATLAB
  * sol.value(hessian(opti.f+dot(opti.lam_g,opti.g),opti.x)[0]) # Python
  * 



";

%feature("docstring") casadi::Opti::solve "

Crunch the numbers; solve the problem.

";

%feature("docstring") casadi::Opti::x "

Get all (scalarised) decision variables as a symbolic column vector.

";

%feature("docstring") casadi::Opti::initial "

get assignment expressions for initial values

";

%feature("docstring") casadi::Opti::get_str "

Get string representation.

";

%feature("docstring") casadi::Opti::np "

Number of (scalarised) parameters.

";

%feature("docstring") casadi::Opti::set_initial "

Set initial guess for decision variables

::

  * opti.set_initial(x, 2)
  * opti.set_initial(10*x(1), 2)
  * 



";

%feature("docstring") casadi::Opti::callback_class "

Helper methods for callback()

Do not use directly.

";

%feature("docstring") casadi::Opti::nx "

Number of (scalarised) decision variables.

";

%feature("docstring") casadi::Opti::is_null "

Is a null pointer?

";

%feature("docstring") casadi::Opti::ng "

Number of (scalarised) constraints.

";

%feature("docstring") casadi::Opti::Opti "

Create Opti Context.

";

%feature("docstring") casadi::Opti::value_parameters "";

%feature("docstring") casadi::Opti::type_name "

Readable name of the class.

";

%feature("docstring") casadi::Opti::value "

Obtain value of expression at the current value

In regular mode, teh current value is the converged solution In debug mode,
the value can be non-converged

Parameters:
-----------

values:  Optional assignment expressions (e.g. x==3) to overrule the current
value

";

%feature("docstring") casadi::Opti::variable "

Create a decision variable (symbol)

The order of creation matters. The order will be reflected in the
optimization problem. It is not required for decision variables to actualy
appear in the optimization problem.

Parameters:
-----------

n:  number of rows (default 1)

m:  number of columnss (default 1)

attribute:  'full' (default) or 'symmetric'

";

%feature("docstring") casadi::Opti "

A simplified interface for NLP modeling/solving.

This class offers a view with model description facilities The API is
guaranteed to be stable.

Example NLP:

::

    opti = casadi.Opti();
  
    x = opti.variable();
    y = opti.variable();
  
    opti.minimize(  (y-x^2)^2   );
    opti.subject_to( x^2+y^2==1 );
    opti.subject_to(     x+y>=1 );
  
    opti.solver('ipopt');
    sol = opti.solve();
  
    sol.value(x)
    sol.value(y)



Example parametric NLP:

::

    opti = casadi.Opti();
  
    x = opti.variable(2,1);
    p = opti.parameter();
  
    opti.minimize(  (p*x(2)-x(1)^2)^2   );
    opti.subject_to( 1<=sum(x)<=2 );
  
    opti.solver('ipopt');
  
    opti.set_value(p, 3);
    sol = opti.solve();
    sol.value(x)
  
    opti.set_value(p, 5);
    sol = opti.solve();
    sol.value(x)



Joris Gillis, Erik Lambrechts, Joel Andersson

C++ includes: optistack.hpp ";

%feature("docstring") casadi::Opti::return_status "

Get return status of solver passed as-is from nlpsol No stability can be
guaranteed about this part of the API.

";

%feature("docstring") casadi::Opti::copy "

Get a copy of the.

The copy is effectively a deep copy: Updating the state of the copy does not
update the original.

";

%feature("docstring") casadi::Opti::class_name "

Get class name.

";

%feature("docstring") casadi::Opti::subject_to "

>  void casadi::Opti::subject_to(const MX &g)

>  void casadi::Opti::subject_to(const std::vector< MX > &g)
------------------------------------------------------------------------

Add constraints.

Examples:

::

  * \\\\begin{itemize}
  * opti.subject_to( sqrt(x+y) >= 1);
  * opti.subject_to( sqrt(x+y) > 1)}: same as above
  * opti.subject_to( 1<= sqrt(x+y) )}: same as above
  * opti.subject_to( 5*x+y==1 )}: equality
  *
  * Python
  * opti.subject_to([x*y>=1,x==3])
  * opti.subject_to(opti.bounded(0,x,1))
  *
  * MATLAB
  * opti.subject_to({x*y>=1,x==3})
  * opti.subject_to( 0<=x<=1 )
  * 



>  void casadi::Opti::subject_to()
------------------------------------------------------------------------

Clear constraints.

";

%feature("docstring") casadi::Opti::minimize "

Set objective.

Objective must be a scalar. Default objective: 0 When method is called
multiple times, the last call takes effect

";

%feature("docstring") casadi::Opti::value_variables "

get assignment expressions for latest values

";

%feature("docstring") casadi::Opti::user_dict "

Get user data.

";

%feature("docstring") casadi::Opti::advanced "

Get a copy with advanced functionality.

You get access to more methods, but you have no guarantees about API
stability

The copy is effectively a deep copy: Updating the state of the copy does not
update the original.

";

%feature("docstring") casadi::Opti::solver "

Set a solver.

Parameters:
-----------

solver:  any of the nlpsol plugins can be used here In practice, not all
nlpsol plugins may be supported yet

options:  passed on to nlpsol plugin No stability can be guaranteed about
this part of the API

options:  to be passed to nlpsol solver No stability can be guaranteed about
this part of the API

";

%feature("docstring") casadi::Opti::dual "

get the dual variable

m must be a constraint expression. The returned value is still a symbolic
expression. Use value on it to obtain the numerical value.

";

%feature("docstring") casadi::Opti::print_ptr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::Opti::disp "

Print representation.

";

%feature("docstring") casadi::Opti::update_user_dict "

>  void casadi::Opti::update_user_dict(const MX &m, const Dict &meta)
------------------------------------------------------------------------

add user data Add arbitrary data in the form of a dictionary to symbols or
constraints

";


// File: classcasadi_1_1OptiAdvanced.xml
%feature("docstring") casadi::OptiAdvanced::assert_empty "";

%feature("docstring") casadi::OptiAdvanced::dual "

get the dual variable

m must be a constraint expression. The returned value is still a symbolic
expression. Use value on it to obtain the numerical value.

";

%feature("docstring") casadi::OptiAdvanced::parameter "

Create a parameter (symbol); fixed during optimization.

The order of creation does not matter. It is not required for parameter to
actualy appear in the optimization problem. Parameters that do appear, must
be given a value before the problem can be solved.

Parameters:
-----------

n:  number of rows (default 1)

m:  number of columnss (default 1)

attribute:  'full' (default) or 'symmetric'

";

%feature("docstring") casadi::OptiAdvanced::mark_problem_dirty "";

%feature("docstring") casadi::OptiAdvanced::lam_g "

Get all (scalarised) dual variables as a symbolic column vector.

Useful for obtaining the Lagrange Hessian:

::

  * sol.value(hessian(opti.f+opti.lam_g'*opti.g,opti.x)) % MATLAB
  * sol.value(hessian(opti.f+dot(opti.lam_g,opti.g),opti.x)[0]) # Python
  * 



";

%feature("docstring") casadi::OptiAdvanced::assert_solved "";

%feature("docstring") casadi::OptiAdvanced::class_name "

Get class name.

";

%feature("docstring") casadi::OptiAdvanced::canon_expr "

Interpret an expression (for internal use only)

";

%feature("docstring") casadi::OptiAdvanced::get_meta_con "

Get meta-data of symbol (for internal use only)

";

%feature("docstring") casadi::OptiAdvanced::set_meta "

Set meta-data of an expression.

";

%feature("docstring") casadi::OptiAdvanced::instance_number "";

%feature("docstring") casadi::OptiAdvanced::user_dict "

Get user data.

";

%feature("docstring") casadi::OptiAdvanced::__hash__ "

Returns a number that is unique for a given Node. If the Object does not
point to any node, \"0\" is returned.

";

%feature("docstring") casadi::OptiAdvanced::x_lookup "";

%feature("docstring") casadi::OptiAdvanced::disp "

Print representation.

";

%feature("docstring") casadi::OptiAdvanced::describe "";

%feature("docstring") casadi::OptiAdvanced::solve_actual "";

%feature("docstring") casadi::OptiAdvanced::set_meta_con "

Set meta-data of an expression.

";

%feature("docstring") casadi::OptiAdvanced::variable "

Create a decision variable (symbol)

The order of creation matters. The order will be reflected in the
optimization problem. It is not required for decision variables to actualy
appear in the optimization problem.

Parameters:
-----------

n:  number of rows (default 1)

m:  number of columnss (default 1)

attribute:  'full' (default) or 'symmetric'

";

%feature("docstring") casadi::OptiAdvanced::g_describe "";

%feature("docstring") casadi::OptiAdvanced::problem_dirty "";

%feature("docstring") casadi::OptiAdvanced::arg "";

%feature("docstring") casadi::OptiAdvanced::value_variables "

get assignment expressions for latest values

";

%feature("docstring") casadi::OptiAdvanced::solve "

Crunch the numbers; solve the problem.

";

%feature("docstring") casadi::OptiAdvanced::copy "

Get a copy of the.

The copy is effectively a deep copy: Updating the state of the copy does not
update the original.

";

%feature("docstring") casadi::OptiAdvanced "C++ includes: optistack.hpp ";

%feature("docstring") casadi::OptiAdvanced::solved "";

%feature("docstring") casadi::OptiAdvanced::value "

Obtain value of expression at the current value

In regular mode, teh current value is the converged solution In debug mode,
the value can be non-converged

Parameters:
-----------

values:  Optional assignment expressions (e.g. x==3) to overrule the current
value

";

%feature("docstring") casadi::OptiAdvanced::casadi_solver "

Get the underlying CasADi solver of the Opti stack.

";

%feature("docstring") casadi::OptiAdvanced::set_initial "

Set initial guess for decision variables

::

  * opti.set_initial(x, 2)
  * opti.set_initial(10*x(1), 2)
  * 



";

%feature("docstring") casadi::OptiAdvanced::~OptiAdvanced "

Destructor.

";

%feature("docstring") casadi::OptiAdvanced::callback_class "

Helper methods for callback()

Do not use directly.

";

%feature("docstring") casadi::OptiAdvanced::get_str "

Get string representation.

";

%feature("docstring") casadi::OptiAdvanced::value_parameters "";

%feature("docstring") casadi::OptiAdvanced::solver_dirty "";

%feature("docstring") casadi::OptiAdvanced::mark_solver_dirty "";

%feature("docstring") casadi::OptiAdvanced::update_user_dict "

>  void casadi::Opti::update_user_dict(const MX &m, const Dict &meta)
------------------------------------------------------------------------

add user data Add arbitrary data in the form of a dictionary to symbols or
constraints

";

%feature("docstring") casadi::OptiAdvanced::ng "

Number of (scalarised) constraints.

";

%feature("docstring") casadi::OptiAdvanced::objective "";

%feature("docstring") casadi::OptiAdvanced::get_meta "

Get meta-data of symbol (for internal use only)

";

%feature("docstring") casadi::OptiAdvanced::subject_to "

>  void casadi::Opti::subject_to(const MX &g)

>  void casadi::Opti::subject_to(const std::vector< MX > &g)
------------------------------------------------------------------------

Add constraints.

Examples:

::

  * \\\\begin{itemize}
  * opti.subject_to( sqrt(x+y) >= 1);
  * opti.subject_to( sqrt(x+y) > 1)}: same as above
  * opti.subject_to( 1<= sqrt(x+y) )}: same as above
  * opti.subject_to( 5*x+y==1 )}: equality
  *
  * Python
  * opti.subject_to([x*y>=1,x==3])
  * opti.subject_to(opti.bounded(0,x,1))
  *
  * MATLAB
  * opti.subject_to({x*y>=1,x==3})
  * opti.subject_to( 0<=x<=1 )
  * 



>  void casadi::Opti::subject_to()
------------------------------------------------------------------------

Clear constraints.

";

%feature("docstring") casadi::OptiAdvanced::initial "

get assignment expressions for initial values

";

%feature("docstring") casadi::OptiAdvanced::type_name "

Readable name of the class.

";

%feature("docstring") casadi::OptiAdvanced::nx "

Number of (scalarised) decision variables.

";

%feature("docstring") casadi::OptiAdvanced::OptiAdvanced "";

%feature("docstring") casadi::OptiAdvanced::set_value "

Set value of parameter.

Each parameter must be given a value before 'solve' can be called

";

%feature("docstring") casadi::OptiAdvanced::res "";

%feature("docstring") casadi::OptiAdvanced::debug "

Get a copy with advanced functionality.

You get access to more methods, but you have no guarantees about API
stability

The copy is effectively a deep copy: Updating the state of the copy does not
update the original.

";

%feature("docstring") casadi::OptiAdvanced::print_ptr "[INTERNAL]  Print
the pointer to the internal class

";

%feature("docstring") casadi::OptiAdvanced::solve_prepare "";

%feature("docstring") casadi::OptiAdvanced::baked_copy "";

%feature("docstring") casadi::OptiAdvanced::np "

Number of (scalarised) parameters.

";

%feature("docstring") casadi::OptiAdvanced::symvar "

Get symbols present in expression.

Returned vector is ordered according to the order of variable()/parameter()
calls used to create the variables

";

%feature("docstring") casadi::OptiAdvanced::advanced "

Get a copy with advanced functionality.

You get access to more methods, but you have no guarantees about API
stability

The copy is effectively a deep copy: Updating the state of the copy does not
update the original.

";

%feature("docstring") casadi::OptiAdvanced::active_values "";

%feature("docstring") casadi::OptiAdvanced::x_describe "";

%feature("docstring") casadi::OptiAdvanced::f "

Get objective expression.

";

%feature("docstring") casadi::OptiAdvanced::g "

Get all (scalarised) constraint expressions as a column vector.

";

%feature("docstring") casadi::OptiAdvanced::stats "

Get statistics.

nlpsol stats are passed as-is. No stability can be guaranteed about this
part of the API

";

%feature("docstring") casadi::OptiAdvanced::is_null "

Is a null pointer?

";

%feature("docstring") casadi::OptiAdvanced::return_status "

Get return status of solver passed as-is from nlpsol No stability can be
guaranteed about this part of the API.

";

%feature("docstring") casadi::OptiAdvanced::constraints "";

%feature("docstring") casadi::OptiAdvanced::bake "

Fix the structure of the optimization problem.

";

%feature("docstring") casadi::OptiAdvanced::assert_active_symbol "";

%feature("docstring") casadi::OptiAdvanced::mark_solved "";

%feature("docstring") casadi::OptiAdvanced::assert_baked "";

%feature("docstring") casadi::OptiAdvanced::is_parametric "

return true if expression is only dependant on Opti parameters, not
variables

";

%feature("docstring") casadi::OptiAdvanced::g_lookup "";

%feature("docstring") casadi::OptiAdvanced::p "

Get all (scalarised) parameters as a symbolic column vector.

";

%feature("docstring") casadi::OptiAdvanced::solver "

Set a solver.

Parameters:
-----------

solver:  any of the nlpsol plugins can be used here In practice, not all
nlpsol plugins may be supported yet

options:  passed on to nlpsol plugin No stability can be guaranteed about
this part of the API

options:  to be passed to nlpsol solver No stability can be guaranteed about
this part of the API

";

%feature("docstring") casadi::OptiAdvanced::active_symvar "";

%feature("docstring") casadi::OptiAdvanced::minimize "

Set objective.

Objective must be a scalar. Default objective: 0 When method is called
multiple times, the last call takes effect

";

%feature("docstring") casadi::OptiAdvanced::x "

Get all (scalarised) decision variables as a symbolic column vector.

";


// File: classcasadi_1_1OptiCallback.xml
%feature("docstring") casadi::OptiCallback::~OptiCallback "";

%feature("docstring") casadi::OptiCallback "C++ includes: optistack.hpp ";

%feature("docstring") casadi::OptiCallback::call "";

%feature("docstring") casadi::OptiCallback::OptiCallback "";


// File: classcasadi_1_1OptiSol.xml
%feature("docstring") casadi::OptiSol::value_variables "

get assignment expressions for the optimal solution

";

%feature("docstring") casadi::OptiSol::get_str "";

%feature("docstring") casadi::OptiSol::stats "

Get statistics.

nlpsol stats are passed as-is. No stability can be guaranteed about this
part of the API

";

%feature("docstring") casadi::OptiSol::type_name "";

%feature("docstring") casadi::OptiSol::disp "";

%feature("docstring") casadi::OptiSol::value "

Obtain value of expression at the current value

In regular mode, teh current value is the converged solution In debug mode,
the value can be non-converged

Parameters:
-----------

values:  Optional assignment expressions (e.g. x==3) to overrule the current
value

";

%feature("docstring") casadi::OptiSol::value_parameters "";

%feature("docstring") casadi::OptiSol::opti "";

%feature("docstring") casadi::OptiSol "

A simplified interface for NLP modeling/solving.

This class offers a view with solution retrieval facilities The API is
guaranteed to be stable.

Joris Gillis, Erik Lambrechts

C++ includes: optistack.hpp ";


// File: classcasadi_1_1OracleFunction.xml
%feature("docstring") casadi::OracleFunction::get_reverse "[INTERNAL]
Return function that calculates adjoint derivatives reverse(nadj) returns a
cached instance if available, and calls  Function get_reverse(int nadj) if
no cached version is available.

";

%feature("docstring") casadi::OracleFunction::sz_w "[INTERNAL]  Get
required length of w field.

";

%feature("docstring") casadi::OracleFunction::construct "[INTERNAL]
Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::OracleFunction::n_instructions "[INTERNAL]
Get the number of atomic operations.

";

%feature("docstring") casadi::OracleFunction::get_partition "[INTERNAL]
Get the unidirectional or bidirectional partition.

";

%feature("docstring") casadi::OracleFunction::has_forward "[INTERNAL]
Return function that calculates forward derivatives forward(nfwd) returns a
cached instance if available, and calls  Function get_forward(int nfwd) if
no cached version is available.

";

%feature("docstring") casadi::OracleFunction::instruction_MX "[INTERNAL]
get MX expression associated with instruction

";

%feature("docstring") casadi::OracleFunction::clear_mem "[INTERNAL]  Clear
all memory (called from destructor)

";

%feature("docstring") casadi::OracleFunction::symbolic_output "[INTERNAL]
Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::OracleFunction::has_codegen "[INTERNAL]  Is
codegen supported?

";

%feature("docstring") casadi::OracleFunction::codegen_body "[INTERNAL]
Generate code for the function body.

";

%feature("docstring") casadi::OracleFunction::~OracleFunction "[INTERNAL]
Destructor.

";

%feature("docstring") casadi::OracleFunction::has_function "[INTERNAL] ";

%feature("docstring") casadi::OracleFunction::symbolicAdjSeed "[INTERNAL]
Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::OracleFunction::oracle "[INTERNAL]  Get
oracle.

";

%feature("docstring") casadi::OracleFunction::codegen_name "[INTERNAL]  Get
name in codegen.

";

%feature("docstring") casadi::OracleFunction::mapsum_mx "[INTERNAL]
Parallel evaluation.

";

%feature("docstring") casadi::OracleFunction::instruction_input "[INTERNAL]
Get the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::OracleFunction::has_jacobian "[INTERNAL]
Return Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::OracleFunction::n_nodes "[INTERNAL]  Number
of nodes in the algorithm.

";

%feature("docstring") casadi::OracleFunction::print_options "[INTERNAL]
Print list of options.

";

%feature("docstring") casadi::OracleFunction::alloc_arg "[INTERNAL]  Ensure
required length of arg field.

";

%feature("docstring") casadi::OracleFunction::instruction_output "[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::OracleFunction::class_name "[INTERNAL]
Readable name of the internal class.

";

%feature("docstring") casadi::OracleFunction::index_out "[INTERNAL]  Get
output scheme index by name.

";

%feature("docstring") casadi::OracleFunction::sz_res "[INTERNAL]  Get
required length of res field.

";

%feature("docstring") casadi::OracleFunction::factory "[INTERNAL] ";

%feature("docstring") casadi::OracleFunction::get_options "[INTERNAL]
Options.

";

%feature("docstring") casadi::OracleFunction::codegen_sparsities "[INTERNAL]  Codegen sparsities.

";

%feature("docstring") casadi::OracleFunction::call_reverse "[INTERNAL]
Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::OracleFunction::sprint "[INTERNAL]  C-style
formatted printing to string.

";

%feature("docstring") casadi::OracleFunction::get_jacobian_sparsity "[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::OracleFunction::alloc_iw "[INTERNAL]  Ensure
required length of iw field.

";

%feature("docstring") casadi::OracleFunction::get_name_out "[INTERNAL]
Names of function input and outputs.

";

%feature("docstring") casadi::OracleFunction::release "[INTERNAL]  Release
a memory object.

";

%feature("docstring") casadi::OracleFunction::all_scalar "[INTERNAL]  Are
all inputs and outputs scalar.

";

%feature("docstring") casadi::OracleFunction::info "[INTERNAL]  Obtain
information about function

";

%feature("docstring") casadi::OracleFunction::free_mx "[INTERNAL]  Get free
variables ( MX)

";

%feature("docstring") casadi::OracleFunction::codegen_incref "[INTERNAL]
Codegen incref for dependencies.

";

%feature("docstring") casadi::OracleFunction::sz_iw "[INTERNAL]  Get
required length of iw field.

";

%feature("docstring") casadi::OracleFunction::size2_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::OracleFunction::get_abstol "[INTERNAL]  Get
absolute tolerance.

";

%feature("docstring") casadi::OracleFunction::eval_mx "[INTERNAL]  Evaluate
with symbolic matrices.

";

%feature("docstring") casadi::OracleFunction::setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";

%feature("docstring") casadi::OracleFunction::get_stats "[INTERNAL]  Get
all statistics.

";

%feature("docstring") casadi::OracleFunction::call_forward "[INTERNAL]
Forward mode AD, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::OracleFunction::generate_dependencies "[INTERNAL]  Export / Generate C code for the generated functions.

";

%feature("docstring") casadi::OracleFunction::has_reverse "[INTERNAL]
Return function that calculates adjoint derivatives reverse(nadj) returns a
cached instance if available, and calls  Function get_reverse(int nadj) if
no cached version is available.

";

%feature("docstring") casadi::OracleFunction::alloc_res "[INTERNAL]  Ensure
required length of res field.

";

%feature("docstring") casadi::OracleFunction::size_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::OracleFunction::getJacSparsity "[INTERNAL]
Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::OracleFunction::getJacSparsityHierarchicalSymm
"[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::OracleFunction::set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::OracleFunction::size_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::OracleFunction::replace_res "[INTERNAL]
Replace 0-by-0 outputs.

";

%feature("docstring") casadi::OracleFunction::eval "[INTERNAL]  Evaluate
numerically.

";

%feature("docstring") casadi::OracleFunction::has_sprev "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::OracleFunction::codegen "[INTERNAL]  Generate
code the function.

";

%feature("docstring") casadi::OracleFunction::get_sparsity_in "[INTERNAL]
Get sparsity of a given input.

";

%feature("docstring") casadi::OracleFunction::size2_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::OracleFunction::getAtomicInput "

[DEPRECATED] Renamed instruction_index

";

%feature("docstring") casadi::OracleFunction::sp_reverse "[INTERNAL]
Propagate sparsity backwards.

";

%feature("docstring") casadi::OracleFunction::is_a "[INTERNAL]  Check if
the function is of a particular type.

";

%feature("docstring") casadi::OracleFunction::export_code "[INTERNAL]
Export function in a specific language.

";

%feature("docstring") casadi::OracleFunction::definition "[INTERNAL]  Get
function signature: name:(inputs)->(outputs)

";

%feature("docstring") casadi::OracleFunction::disp "[INTERNAL]  Display
object.

";

%feature("docstring") casadi::OracleFunction::get_function "[INTERNAL] ";

%feature("docstring") casadi::OracleFunction::getAtomicOutput "

[DEPRECATED] Renamed instruction_output

";

%feature("docstring") casadi::OracleFunction::fwdViaJac "[INTERNAL]
Calculate derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::OracleFunction::expand "[INTERNAL] ";

%feature("docstring") casadi::OracleFunction::create_function "[INTERNAL]
Create an oracle function

";

%feature("docstring") casadi::OracleFunction::codegen_declarations "[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring") casadi::OracleFunction::replace_aseed "[INTERNAL]
Replace 0-by-0 reverse seeds.

";

%feature("docstring") casadi::OracleFunction::get_n_in "[INTERNAL]  Number
of function inputs and outputs.

";

%feature("docstring") casadi::OracleFunction::forward "[INTERNAL]  Return
function that calculates forward derivatives forward(nfwd) returns a cached
instance if available, and calls  Function get_forward(int nfwd) if no
cached version is available.

";

%feature("docstring") casadi::OracleFunction::codegen_meta "[INTERNAL]
Generate meta-information allowing a user to evaluate a generated function.

";

%feature("docstring") casadi::OracleFunction::reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::OracleFunction::has_derivative "[INTERNAL]
Can derivatives be calculated in any way?

";

%feature("docstring") casadi::OracleFunction::get_jacobian "[INTERNAL]
Return Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::OracleFunction::sx_out "[INTERNAL]  Get
function input(s) and output(s)

";

%feature("docstring") casadi::OracleFunction::ad_weight "[INTERNAL]
Weighting factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::OracleFunction::get_default_in "[INTERNAL]
Get default input value.

";

%feature("docstring") casadi::OracleFunction::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::OracleFunction::get_max_in "[INTERNAL]  Get
largest input value.

";

%feature("docstring") casadi::OracleFunction::numel_in "[INTERNAL]  Number
of input/output elements.

";

%feature("docstring") casadi::OracleFunction::slice "[INTERNAL]  returns a
new function with a selection of inputs/outputs of the original

";

%feature("docstring") casadi::OracleFunction::check_res "[INTERNAL]  Check
if output arguments have correct length and dimensions.

";

%feature("docstring") casadi::OracleFunction::free_sx "[INTERNAL]  Get free
variables (SX)

";

%feature("docstring") casadi::OracleFunction::codegen_decref "[INTERNAL]
Codegen decref for dependencies.

";

%feature("docstring") casadi::OracleFunction::set_temp "[INTERNAL]  Set the
work vectors.

";

%feature("docstring") casadi::OracleFunction::calc_function "[INTERNAL] ";

%feature("docstring") casadi::OracleFunction::get_min_in "[INTERNAL]  Get
smallest input value.

";

%feature("docstring") casadi::OracleFunction::mx_in "[INTERNAL]  Get
function input(s) and output(s)

";

%feature("docstring") casadi::OracleFunction::alloc_w "[INTERNAL]  Ensure
required length of w field.

";

%feature("docstring") casadi::OracleFunction::get_forward "[INTERNAL]
Return function that calculates forward derivatives forward(nfwd) returns a
cached instance if available, and calls  Function get_forward(int nfwd) if
no cached version is available.

";

%feature("docstring") casadi::OracleFunction::size1_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::OracleFunction::sp_forward "[INTERNAL]
Propagate sparsity forward.

";

%feature("docstring") casadi::OracleFunction::matching_res "[INTERNAL]
Check if output arguments that needs to be replaced.

";

%feature("docstring") casadi::OracleFunction::sparsity_jac "[INTERNAL]
Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::OracleFunction::instruction_id "[INTERNAL]
Get an atomic operation operator index.

";

%feature("docstring") casadi::OracleFunction::finalize "[INTERNAL]
Finalize initialization.

";

%feature("docstring") casadi::OracleFunction::wrap "[INTERNAL]  Wrap in an
Function instance consisting of only one MX call.

";

%feature("docstring") casadi::OracleFunction::print_option "[INTERNAL]
Print all information there is to know about a certain option.

";

%feature("docstring") casadi::OracleFunction::numel_out "[INTERNAL]  Number
of input/output elements.

";

%feature("docstring") casadi::OracleFunction::monitored "[INTERNAL] ";

%feature("docstring") casadi::OracleFunction::memory "[INTERNAL]  Memory
objects.

";

%feature("docstring") casadi::OracleFunction::call "[INTERNAL]   Call a
function, templated.

";

%feature("docstring") casadi::OracleFunction "[INTERNAL]  Base class for
functions that perform calculation with an oracle.

Joel Andersson

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
+------------------+-----------------+------------------+------------------+
| common_options   | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | auto-generated   | nction           |
|                  |                 | functions        |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| enable_fd        | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation by   |                  |
|                  |                 | finite           |                  |
|                  |                 | differencing.    |                  |
|                  |                 | [default:        |                  |
|                  |                 | false]]          |                  |
+------------------+-----------------+------------------+------------------+
| enable_forward   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using forward    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_jacobian  | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobians of all |                  |
|                  |                 | differentiable   |                  |
|                  |                 | outputs with     |                  |
|                  |                 | respect to all   |                  |
|                  |                 | differentiable   |                  |
|                  |                 | inputs - if      |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_reverse   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | transposed       |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using reverse    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| fd_method        | OT_STRING       | Method for       | casadi::Function |
|                  |                 | finite           | Internal         |
|                  |                 | differencing     |                  |
|                  |                 | [default         |                  |
|                  |                 | 'central']       |                  |
+------------------+-----------------+------------------+------------------+
| fd_options       | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | finite           |                  |
|                  |                 | difference       |                  |
|                  |                 | instance         |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| monitor          | OT_STRINGVECTOR | Set of user      | casadi::OracleFu |
|                  |                 | problem          | nction           |
|                  |                 | functions to be  |                  |
|                  |                 | monitored        |                  |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| specific_options | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | specific auto-   | nction           |
|                  |                 | generated        |                  |
|                  |                 | functions,       |                  |
|                  |                 | overwriting the  |                  |
|                  |                 | defaults from    |                  |
|                  |                 | common_options.  |                  |
|                  |                 | Nested           |                  |
|                  |                 | dictionary.      |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: oracle_function.hpp ";

%feature("docstring") casadi::OracleFunction::set_function "[INTERNAL]
Register the function for evaluation and statistics gathering

";

%feature("docstring") casadi::OracleFunction::get_free "[INTERNAL]  Print
free variables.

";

%feature("docstring") casadi::OracleFunction::get_sparsity_out "[INTERNAL]
Get sparsity of a given output.

";

%feature("docstring") casadi::OracleFunction::nnz_out "[INTERNAL]  Number
of input/output nonzeros.

";

%feature("docstring") casadi::OracleFunction::sx_in "[INTERNAL]  Get
function input(s) and output(s)

";

%feature("docstring") casadi::OracleFunction::generate_lifted "[INTERNAL]
Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::OracleFunction::which_depends "[INTERNAL]
Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::OracleFunction::print_fstats "[INTERNAL]
Print statistics.

";

%feature("docstring") casadi::OracleFunction::size1_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::OracleFunction::eval_gen "

>  int casadi::FunctionInternal::eval_gen(const double **arg, double **res, int *iw, double *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate numerically.

>  int casadi::FunctionInternal::eval_gen(const SXElem **arg, SXElem **res, int *iw, SXElem *w, void *mem) const

>  int casadi::FunctionInternal::eval_gen(const bvec_t **arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

%feature("docstring") casadi::OracleFunction::has_spfwd "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::OracleFunction::getJacSparsityGen "[INTERNAL]
Get the sparsity pattern, forward mode.

";

%feature("docstring") casadi::OracleFunction::sp_weight "[INTERNAL]
Weighting factor for chosing forward/reverse mode, sparsity propagation.

";

%feature("docstring") casadi::OracleFunction::adjViaJac "[INTERNAL]
Calculate derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::OracleFunction::matching_arg "[INTERNAL]
Check if input arguments that needs to be replaced.

";

%feature("docstring") casadi::OracleFunction::init "[INTERNAL]  Initialize

";

%feature("docstring") casadi::OracleFunction::free_mem "[INTERNAL]  Free
memory block.

";

%feature("docstring") casadi::OracleFunction::jacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::OracleFunction::eval_sx "[INTERNAL]  Evaluate
with symbolic scalars.

";

%feature("docstring") casadi::OracleFunction::replace_fseed "[INTERNAL]
Replace 0-by-0 forward seeds.

";

%feature("docstring") casadi::OracleFunction::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::OracleFunction::mx_out "[INTERNAL]  Get
function input(s) and output(s)

";

%feature("docstring") casadi::OracleFunction::get_reltol "[INTERNAL]  Get
relative tolerance.

";

%feature("docstring") casadi::OracleFunction::sz_work "[INTERNAL]  Get
number of temporary variables needed.

";

%feature("docstring") casadi::OracleFunction::sz_arg "[INTERNAL]  Get
required length of arg field.

";

%feature("docstring") casadi::OracleFunction::nnz_in "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::OracleFunction::eval_dm "[INTERNAL]  Evaluate
with DM matrices.

";

%feature("docstring") casadi::OracleFunction::get_n_out "[INTERNAL]  Are
all inputs and outputs scalar.

";

%feature("docstring") casadi::OracleFunction::print "[INTERNAL]  C-style
formatted printing during evaluation.

";

%feature("docstring") casadi::OracleFunction::disp_more "[INTERNAL]  Print
more.

";

%feature("docstring") casadi::OracleFunction::uses_output "[INTERNAL]  Do
the derivative functions need nondifferentiated outputs?

";

%feature("docstring") casadi::OracleFunction::jit_dependencies "[INTERNAL]
JIT for dependencies.

";

%feature("docstring") casadi::OracleFunction::get_name_in "[INTERNAL]
Names of function input and outputs.

";

%feature("docstring") casadi::OracleFunction::alloc "[INTERNAL]  Ensure
work vectors long enough to evaluate function.

";

%feature("docstring") casadi::OracleFunction::signature "[INTERNAL]  Code
generate the function.

";

%feature("docstring") casadi::OracleFunction::print_dimensions "[INTERNAL]
Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::OracleFunction::self "[INTERNAL]  Get a
public class instance.

";

%feature("docstring") casadi::OracleFunction::replace_arg "[INTERNAL]
Replace 0-by-0 inputs.

";

%feature("docstring") casadi::OracleFunction::init_mem "[INTERNAL]
Initalize memory block.

";

%feature("docstring") casadi::OracleFunction::instruction_constant "[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::OracleFunction::index_in "[INTERNAL]  Get
input scheme index by name.

";

%feature("docstring") casadi::OracleFunction::has_free "[INTERNAL]  Does
the function have free variables.

";

%feature("docstring") casadi::OracleFunction::getJacSparsityHierarchical "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::OracleFunction::check_arg "[INTERNAL]  Check
if input arguments have correct length and dimensions.

";

%feature("docstring") casadi::OracleFunction::getAdaptorSolverName "[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring") casadi::OracleFunction::alloc_mem "[INTERNAL]  Create
memory block.

";

%feature("docstring") casadi::OracleFunction::OracleFunction "[INTERNAL]
Constructor.

";

%feature("docstring") casadi::OracleFunction::fwd_seed "[INTERNAL]
Symbolic expressions for the forward seeds.

";

%feature("docstring") casadi::OracleFunction::call_gen "[INTERNAL]   Call a
function, overloaded.

";

%feature("docstring") casadi::OracleFunction::checkout "[INTERNAL]
Checkout a memory object.

";


// File: classcasadi_1_1Output.xml


// File: classcasadi_1_1Polynomial.xml
%feature("docstring") casadi::Polynomial "

Helper class for differentiating and integrating polynomials.

Joel Andersson

C++ includes: polynomial.hpp ";

%feature("docstring") casadi::Polynomial::derivative "

Create a new polynomial for the derivative.

";

%feature("docstring") casadi::Polynomial::Polynomial "

>  casadi::Polynomial::Polynomial(casadi_real scalar=1)
------------------------------------------------------------------------

Construct a constant polynomial.

>  casadi::Polynomial::Polynomial(casadi_real p0, casadi_real p1)
------------------------------------------------------------------------

Construct a linear polynomial.

>  casadi::Polynomial::Polynomial(casadi_real p0, casadi_real p1, casadi_real p2)
------------------------------------------------------------------------

Construct a quadratic polynomial.

>  casadi::Polynomial::Polynomial(casadi_real p0, casadi_real p1, casadi_real p2, casadi_real p3)
------------------------------------------------------------------------

Construct a cubic polynomial.

>  casadi::Polynomial::Polynomial(const std::vector< T > &coeff)
------------------------------------------------------------------------

Construct from a vector of polynomial coefficients.

";

%feature("docstring") casadi::Polynomial::type_name "

Readable name of the class.

";

%feature("docstring") casadi::Polynomial::anti_derivative "

Create a new polynomial for the anti-derivative (primitive function)

";

%feature("docstring") casadi::Polynomial::scalar "

Get scalar value (error if degree()!=0)

";

%feature("docstring") casadi::Polynomial::degree "

Degree of the polynomial.

";

%feature("docstring") casadi::Polynomial::disp "

Print a description of the object.

";

%feature("docstring") casadi::Polynomial::trim "

Remove excess zeros.

";


// File: classcasadi_1_1Project.xml


// File: classcasadi_1_1ProtoFunction.xml


// File: classcasadi_1_1QpToNlp.xml
%feature("docstring") casadi::QpToNlp::get_name_out "[INTERNAL]  Names of
function input and outputs.

";

%feature("docstring") casadi::QpToNlp::sp_reverse "[INTERNAL]  Propagate
sparsity backwards.

";

%feature("docstring") casadi::QpToNlp::has_codegen "[INTERNAL]  Is codegen
supported?

";

%feature("docstring") casadi::QpToNlp::info "[INTERNAL]  Obtain information
about function

";

%feature("docstring") casadi::QpToNlp::size2_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::QpToNlp::call_forward "[INTERNAL]  Forward
mode AD, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::QpToNlp::factory "[INTERNAL] ";

%feature("docstring") casadi::QpToNlp::fwdViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::QpToNlp::get_reltol "[INTERNAL]  Get relative
tolerance.

";

%feature("docstring") casadi::QpToNlp::get_stats "[INTERNAL]  Get all
statistics.

";

%feature("docstring") casadi::QpToNlp::getJacSparsityHierarchical "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::QpToNlp::codegen_incref "[INTERNAL]  Codegen
incref for dependencies.

";

%feature("docstring") casadi::QpToNlp::matching_res "[INTERNAL]  Check if
output arguments that needs to be replaced.

";

%feature("docstring") casadi::QpToNlp::nnz_in "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::QpToNlp::get_n_out "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::QpToNlp::alloc_mem "[INTERNAL]  Create memory
block.

";

%feature("docstring") casadi::QpToNlp::instruction_constant "[INTERNAL]
Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::QpToNlp::getAtomicOutput "

[DEPRECATED] Renamed instruction_output

";

%feature("docstring") casadi::QpToNlp::sp_forward "[INTERNAL]  Propagate
sparsity forward.

";

%feature("docstring") casadi::QpToNlp::get_jacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::QpToNlp::has_derivative "[INTERNAL]  Can
derivatives be calculated in any way?

";

%feature("docstring") casadi::QpToNlp::sx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::QpToNlp::sx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::QpToNlp::eval_sx "[INTERNAL]  Evaluate with
symbolic scalars.

";

%feature("docstring") casadi::QpToNlp::call "[INTERNAL]   Call a function,
templated.

";

%feature("docstring") casadi::QpToNlp::numel_out "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::QpToNlp::init_mem "[INTERNAL]  Initalize
memory block.

";

%feature("docstring") casadi::QpToNlp::sprint "[INTERNAL]  C-style
formatted printing to string.

";

%feature("docstring") casadi::QpToNlp::matching_arg "[INTERNAL]  Check if
input arguments that needs to be replaced.

";

%feature("docstring") casadi::QpToNlp::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::QpToNlp::jit_dependencies "[INTERNAL]  Jit
dependencies.

";

%feature("docstring") casadi::QpToNlp::set_temp "[INTERNAL]  Set the
(temporary) work vectors.

";

%feature("docstring") casadi::QpToNlp::self "[INTERNAL]  Get a public class
instance.

";

%feature("docstring") casadi::QpToNlp::size_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::QpToNlp::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::QpToNlp::mx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::QpToNlp::sz_iw "[INTERNAL]  Get required
length of iw field.

";

%feature("docstring") casadi::QpToNlp::symbolic_output "[INTERNAL]  Get a
vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::QpToNlp::sz_arg "[INTERNAL]  Get required
length of arg field.

";

%feature("docstring") casadi::QpToNlp::size_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::QpToNlp::call_reverse "[INTERNAL]  Reverse
mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::QpToNlp::eval "[INTERNAL]  Evaluate
numerically.

";

%feature("docstring") casadi::QpToNlp::~QpToNlp "[INTERNAL]  Destructor.

";

%feature("docstring") casadi::QpToNlp::instruction_id "[INTERNAL]  Get an
atomic operation operator index.

";

%feature("docstring") casadi::QpToNlp::generate_lifted "[INTERNAL]  Extract
the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::QpToNlp::getJacSparsityGen "[INTERNAL]  Get
the sparsity pattern, forward mode.

";

%feature("docstring") casadi::QpToNlp::setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";

%feature("docstring") casadi::QpToNlp::get_abstol "[INTERNAL]  Get absolute
tolerance.

";

%feature("docstring") casadi::QpToNlp::get_free "[INTERNAL]  Print free
variables.

";

%feature("docstring") casadi::QpToNlp::definition "[INTERNAL]  Get function
signature: name:(inputs)->(outputs)

";

%feature("docstring") casadi::QpToNlp::print_option "[INTERNAL]  Print all
information there is to know about a certain option.

";

%feature("docstring") casadi::QpToNlp::wrap "[INTERNAL]  Wrap in an
Function instance consisting of only one MX call.

";

%feature("docstring") casadi::QpToNlp::index_in "[INTERNAL]  Get input
scheme index by name.

";

%feature("docstring") casadi::QpToNlp::get_sparsity_out "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::QpToNlp::checkout "[INTERNAL]  Checkout a
memory object.

";

%feature("docstring") casadi::QpToNlp::replace_aseed "[INTERNAL]  Replace
0-by-0 reverse seeds.

";

%feature("docstring") casadi::QpToNlp::get_default_in "[INTERNAL]  Get
default input value.

";

%feature("docstring") casadi::QpToNlp::uses_output "[INTERNAL]  Do the
derivative functions need nondifferentiated outputs?

";

%feature("docstring") casadi::QpToNlp::mapsum_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::QpToNlp::reverse "[INTERNAL]  Return function
that calculates adjoint derivatives reverse(nadj) returns a cached instance
if available, and calls  Function get_reverse(int nadj) if no cached version
is available.

";

%feature("docstring") casadi::QpToNlp::mx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::QpToNlp::alloc_res "[INTERNAL]  Ensure
required length of res field.

";

%feature("docstring") casadi::QpToNlp::free_mx "[INTERNAL]  Get free
variables ( MX)

";

%feature("docstring") casadi::QpToNlp "

'nlpsol' plugin for Conic

Solve QPs using an Nlpsol Use the 'nlpsol' option to specify the NLP solver
to use.

>List of available options

+----------------+-----------+---------------------------------+
|       Id       |   Type    |           Description           |
+================+===========+=================================+
| nlpsol         | OT_STRING | Name of solver.                 |
+----------------+-----------+---------------------------------+
| nlpsol_options | OT_DICT   | Options to be passed to solver. |
+----------------+-----------+---------------------------------+

Joris Gillis

>List of available options

+----------------+---------------+-----------------------+-----------------+
|       Id       |     Type      |      Description      |     Used in     |
+================+===============+=======================+=================+
| discrete       | OT_BOOLVECTOR | Indicates which of    | casadi::Conic   |
|                |               | the variables are     |                 |
|                |               | discrete, i.e.        |                 |
|                |               | integer-valued        |                 |
+----------------+---------------+-----------------------+-----------------+
| nlpsol         | OT_STRING     | Name of solver.       | casadi::QpToNlp |
+----------------+---------------+-----------------------+-----------------+
| nlpsol_options | OT_DICT       | Options to be passed  | casadi::QpToNlp |
|                |               | to solver.            |                 |
+----------------+---------------+-----------------------+-----------------+

Diagrams
--------



C++ includes: qp_to_nlp.hpp ";

%feature("docstring") casadi::QpToNlp::oracle "[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::QpToNlp::construct "[INTERNAL]  Construct
Prepares the function for evaluation.

";

%feature("docstring") casadi::QpToNlp::get_sparsity_in "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::QpToNlp::check_inputs "[INTERNAL]  Check if
the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::QpToNlp::slice "[INTERNAL]  returns a new
function with a selection of inputs/outputs of the original

";

%feature("docstring") casadi::QpToNlp::has_free "[INTERNAL]  Does the
function have free variables.

";

%feature("docstring") casadi::QpToNlp::codegen_meta "[INTERNAL]  Generate
meta-information allowing a user to evaluate a generated function.

";

%feature("docstring") casadi::QpToNlp::instruction_MX "[INTERNAL]  get MX
expression associated with instruction

";

%feature("docstring") casadi::QpToNlp::codegen "[INTERNAL]  Generate code
the function.

";

%feature("docstring") casadi::QpToNlp::instruction_output "[INTERNAL]  Get
the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::QpToNlp::n_instructions "[INTERNAL]  Get the
number of atomic operations.

";

%feature("docstring") casadi::QpToNlp::getAtomicInput "

[DEPRECATED] Renamed instruction_index

";

%feature("docstring") casadi::QpToNlp::replace_res "[INTERNAL]  Replace
0-by-0 outputs.

";

%feature("docstring") casadi::QpToNlp::instruction_input "[INTERNAL]  Get
the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::QpToNlp::check_res "[INTERNAL]  Check if
output arguments have correct length and dimensions.

";

%feature("docstring") casadi::QpToNlp::forward "[INTERNAL]  Return function
that calculates forward derivatives forward(nfwd) returns a cached instance
if available, and calls  Function get_forward(int nfwd) if no cached version
is available.

";

%feature("docstring") casadi::QpToNlp::get_function "[INTERNAL] ";

%feature("docstring") casadi::QpToNlp::class_name "[INTERNAL]  Readable
name of the internal class.

";

%feature("docstring") casadi::QpToNlp::get_forward "[INTERNAL]  Return
function that calculates forward derivatives forward(nfwd) returns a cached
instance if available, and calls  Function get_forward(int nfwd) if no
cached version is available.

";

%feature("docstring") casadi::QpToNlp::print_fstats "[INTERNAL]  Print
statistics.

";

%feature("docstring") casadi::QpToNlp::plugin_name "[INTERNAL] ";

%feature("docstring") casadi::QpToNlp::all_scalar "[INTERNAL]  Are all
inputs and outputs scalar.

";

%feature("docstring") casadi::QpToNlp::alloc "[INTERNAL]  Ensure work
vectors long enough to evaluate function.

";

%feature("docstring") casadi::QpToNlp::n_nodes "[INTERNAL]  Number of nodes
in the algorithm.

";

%feature("docstring") casadi::QpToNlp::print_dimensions "[INTERNAL]  Print
dimensions of inputs and outputs.

";

%feature("docstring") casadi::QpToNlp::sz_res "[INTERNAL]  Get required
length of res field.

";

%feature("docstring") casadi::QpToNlp::size1_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::QpToNlp::which_depends "[INTERNAL]  Which
variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::QpToNlp::codegen_decref "[INTERNAL]  Codegen
decref for dependencies.

";

%feature("docstring") casadi::QpToNlp::set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::QpToNlp::has_function "[INTERNAL] ";

%feature("docstring") casadi::QpToNlp::has_spfwd "[INTERNAL]  Is the class
able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::QpToNlp::getAdaptorSolverName "[INTERNAL]
Obtain solver name from Adaptor.

";

%feature("docstring") casadi::QpToNlp::size2_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::QpToNlp::alloc_iw "[INTERNAL]  Ensure
required length of iw field.

";

%feature("docstring") casadi::QpToNlp::has_jacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::QpToNlp::print_options "[INTERNAL]  Print
list of options.

";

%feature("docstring") casadi::QpToNlp::has_sprev "[INTERNAL]  Is the class
able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::QpToNlp::free_sx "[INTERNAL]  Get free
variables (SX)

";

%feature("docstring") casadi::QpToNlp::print "[INTERNAL]  C-style formatted
printing during evaluation.

";

%feature("docstring") casadi::QpToNlp::clear_mem "[INTERNAL]  Clear all
memory (called from destructor)

";

%feature("docstring") casadi::QpToNlp::signature "[INTERNAL]  Code generate
the function.

";

%feature("docstring") casadi::QpToNlp::generate_dependencies "[INTERNAL]
Export / Generate C code for the dependency function.

";

%feature("docstring") casadi::QpToNlp::sp_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode, sparsity propagation.

";

%feature("docstring") casadi::QpToNlp::get_options "[INTERNAL]  Options.

";

%feature("docstring") casadi::QpToNlp::has_reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::QpToNlp::integer_support "[INTERNAL]  Can
discrete variables be treated.

";

%feature("docstring") casadi::QpToNlp::init "[INTERNAL]  Initialize.

";

%feature("docstring") casadi::QpToNlp::sz_work "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") casadi::QpToNlp::sz_w "[INTERNAL]  Get required
length of w field.

";

%feature("docstring") casadi::QpToNlp::release "[INTERNAL]  Release a
memory object.

";

%feature("docstring") casadi::QpToNlp::fwd_seed "[INTERNAL]  Symbolic
expressions for the forward seeds.

";

%feature("docstring") casadi::QpToNlp::alloc_w "[INTERNAL]  Ensure required
length of w field.

";

%feature("docstring") casadi::QpToNlp::alloc_arg "[INTERNAL]  Ensure
required length of arg field.

";

%feature("docstring") casadi::QpToNlp::is_a "[INTERNAL]  Check if the
function is of a particular type.

";

%feature("docstring") casadi::QpToNlp::QpToNlp "[INTERNAL]  Create a new
Solver.

";

%feature("docstring") casadi::QpToNlp::get_max_in "[INTERNAL]  Get largest
input value.

";

%feature("docstring") casadi::QpToNlp::getJacSparsityHierarchicalSymm "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::QpToNlp::get_partition "[INTERNAL]  Get the
unidirectional or bidirectional partition.

";

%feature("docstring") casadi::QpToNlp::get_name_in "[INTERNAL]  Names of
function input and outputs.

";

%feature("docstring") casadi::QpToNlp::codegen_body "[INTERNAL]  Generate
code for the function body.

";

%feature("docstring") casadi::QpToNlp::free_mem "[INTERNAL]  Free memory
block.

";

%feature("docstring") casadi::QpToNlp::replace_arg "[INTERNAL]  Replace
0-by-0 inputs.

";

%feature("docstring") casadi::QpToNlp::eval_gen "

>  int casadi::FunctionInternal::eval_gen(const double **arg, double **res, int *iw, double *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate numerically.

>  int casadi::FunctionInternal::eval_gen(const SXElem **arg, SXElem **res, int *iw, SXElem *w, void *mem) const

>  int casadi::FunctionInternal::eval_gen(const bvec_t **arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

%feature("docstring") casadi::QpToNlp::call_gen "[INTERNAL]   Call a
function, overloaded.

";

%feature("docstring") casadi::QpToNlp::sparsity_jac "[INTERNAL]  Get, if
necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::QpToNlp::jacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::QpToNlp::symbolicAdjSeed "[INTERNAL]
Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::QpToNlp::disp "[INTERNAL]  Display object.

";

%feature("docstring") casadi::QpToNlp::get_n_in "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::QpToNlp::numel_in "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::QpToNlp::codegen_name "[INTERNAL]  Get name
in codegen.

";

%feature("docstring") casadi::QpToNlp::has_forward "[INTERNAL]  Return
function that calculates forward derivatives forward(nfwd) returns a cached
instance if available, and calls  Function get_forward(int nfwd) if no
cached version is available.

";

%feature("docstring") casadi::QpToNlp::codegen_sparsities "[INTERNAL]
Codegen sparsities.

";

%feature("docstring") casadi::QpToNlp::generateNativeCode "[INTERNAL]
Generate native code in the interfaced language for debugging

";

%feature("docstring") casadi::QpToNlp::memory "[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::QpToNlp::codegen_declarations "[INTERNAL]
Generate code for the declarations of the C function.

";

%feature("docstring") casadi::QpToNlp::disp_more "[INTERNAL]  Print more.

";

%feature("docstring") casadi::QpToNlp::replace_fseed "[INTERNAL]  Replace
0-by-0 forward seeds.

";

%feature("docstring") casadi::QpToNlp::get_min_in "[INTERNAL]  Get smallest
input value.

";

%feature("docstring") casadi::QpToNlp::nnz_out "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::QpToNlp::finalize "[INTERNAL]  Finalize the
object creation.

";

%feature("docstring") casadi::QpToNlp::eval_mx "[INTERNAL]  Evaluate with
symbolic matrices.

";

%feature("docstring") casadi::QpToNlp::size1_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::QpToNlp::index_out "[INTERNAL]  Get output
scheme index by name.

";

%feature("docstring") casadi::QpToNlp::getJacSparsity "[INTERNAL]  Generate
the sparsity of a Jacobian block.

";

%feature("docstring") casadi::QpToNlp::get_reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::QpToNlp::ad_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::QpToNlp::export_code "[INTERNAL]  Export
function in a specific language.

";

%feature("docstring") casadi::QpToNlp::check_arg "[INTERNAL]  Check if
input arguments have correct length and dimensions.

";

%feature("docstring") casadi::QpToNlp::get_jacobian_sparsity "[INTERNAL]
Get Jacobian sparsity.

";

%feature("docstring") casadi::QpToNlp::adjViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::QpToNlp::eval_dm "[INTERNAL]  Evaluate with
DM matrices.

";


// File: classcasadi_1_1Rank1.xml


// File: classcasadi_1_1RealtypeSX.xml


// File: classcasadi_1_1Reshape.xml


// File: classcasadi_1_1Rootfinder.xml
%feature("docstring") casadi::Rootfinder::definition "[INTERNAL]  Get
function signature: name:(inputs)->(outputs)

";

%feature("docstring") casadi::Rootfinder::has_derivative "[INTERNAL]  Can
derivatives be calculated in any way?

";

%feature("docstring") casadi::Rootfinder::slice "[INTERNAL]  returns a new
function with a selection of inputs/outputs of the original

";

%feature("docstring") casadi::Rootfinder::codegen_incref "[INTERNAL]
Codegen incref for dependencies.

";

%feature("docstring") casadi::Rootfinder::expand "[INTERNAL] ";

%feature("docstring") casadi::Rootfinder::has_free "[INTERNAL]  Does the
function have free variables.

";

%feature("docstring") casadi::Rootfinder::replace_res "[INTERNAL]  Replace
0-by-0 outputs.

";

%feature("docstring") casadi::Rootfinder::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::Rootfinder::get_default_in "[INTERNAL]  Get
default input value.

";

%feature("docstring") casadi::Rootfinder::matching_arg "[INTERNAL]  Check
if input arguments that needs to be replaced.

";

%feature("docstring") casadi::Rootfinder::calc_function "[INTERNAL] ";

%feature("docstring") casadi::Rootfinder::replace_fseed "[INTERNAL]
Replace 0-by-0 forward seeds.

";

%feature("docstring") casadi::Rootfinder::size_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Rootfinder::get_options "[INTERNAL]  Options.

";

%feature("docstring") casadi::Rootfinder::monitored "[INTERNAL] ";

%feature("docstring") casadi::Rootfinder::check_res "[INTERNAL]  Check if
output arguments have correct length and dimensions.

";

%feature("docstring") casadi::Rootfinder::has_spfwd "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Rootfinder::alloc_arg "[INTERNAL]  Ensure
required length of arg field.

";

%feature("docstring") casadi::Rootfinder::nnz_out "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::Rootfinder::self "[INTERNAL]  Get a public
class instance.

";

%feature("docstring") casadi::Rootfinder::instruction_MX "[INTERNAL]  get
MX expression associated with instruction

";

%feature("docstring") casadi::Rootfinder::get_min_in "[INTERNAL]  Get
smallest input value.

";

%feature("docstring") casadi::Rootfinder::has_reverse "[INTERNAL]  Generate
a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::Rootfinder::fwdViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::Rootfinder::generate_lifted "[INTERNAL]
Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::Rootfinder::forward "[INTERNAL]  Return
function that calculates forward derivatives forward(nfwd) returns a cached
instance if available, and calls  Function get_forward(int nfwd) if no
cached version is available.

";

%feature("docstring") casadi::Rootfinder::fwd_seed "[INTERNAL]  Symbolic
expressions for the forward seeds.

";

%feature("docstring") casadi::Rootfinder::info "[INTERNAL]  Obtain
information about function

";

%feature("docstring") casadi::Rootfinder::sx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Rootfinder::get_abstol "[INTERNAL]  Get
absolute tolerance.

";

%feature("docstring") casadi::Rootfinder::jacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Rootfinder::index_out "[INTERNAL]  Get output
scheme index by name.

";

%feature("docstring") casadi::Rootfinder::reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::Rootfinder::eval_sx "[INTERNAL]  Evaluate
with symbolic scalars.

";

%feature("docstring") casadi::Rootfinder::get_sparsity_out "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Rootfinder::replace_arg "[INTERNAL]  Replace
0-by-0 inputs.

";

%feature("docstring") casadi::Rootfinder::free_sx "[INTERNAL]  Get free
variables (SX)

";

%feature("docstring") casadi::Rootfinder::numel_in "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::Rootfinder::set_function "[INTERNAL]
Register the function for evaluation and statistics gathering

";

%feature("docstring") casadi::Rootfinder::replace_aseed "[INTERNAL]
Replace 0-by-0 reverse seeds.

";

%feature("docstring") casadi::Rootfinder::sparsity_jac "[INTERNAL]  Get, if
necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Rootfinder::symbolicAdjSeed "[INTERNAL]
Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::Rootfinder::plugin_name "[INTERNAL] ";

%feature("docstring") casadi::Rootfinder::get_name_out "[INTERNAL]  Names
of function input and outputs.

";

%feature("docstring") casadi::Rootfinder::sz_work "[INTERNAL]  Get number
of temporary variables needed.

";

%feature("docstring") casadi::Rootfinder::init "[INTERNAL]  Initialize.

";

%feature("docstring") casadi::Rootfinder::sz_iw "[INTERNAL]  Get required
length of iw field.

";

%feature("docstring") casadi::Rootfinder::free_mem "[INTERNAL]  Free memory
block.

";

%feature("docstring") casadi::Rootfinder::all_scalar "[INTERNAL]  Are all
inputs and outputs scalar.

";

%feature("docstring") casadi::Rootfinder::sp_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode, sparsity propagation.

";

%feature("docstring") casadi::Rootfinder::Rootfinder "[INTERNAL]
Constructor.

Parameters:
-----------

f:   Function mapping from (n+1) inputs to 1 output.

";

%feature("docstring") casadi::Rootfinder::get_forward "[INTERNAL]  Generate
a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::Rootfinder::get_n_in "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::Rootfinder::get_function "[INTERNAL] ";

%feature("docstring") casadi::Rootfinder::has_forward "[INTERNAL]  Generate
a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::Rootfinder::n_nodes "[INTERNAL]  Number of
nodes in the algorithm.

";

%feature("docstring") casadi::Rootfinder::solve "[INTERNAL] ";

%feature("docstring") casadi::Rootfinder::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::Rootfinder::wrap "[INTERNAL]  Wrap in an
Function instance consisting of only one MX call.

";

%feature("docstring") casadi::Rootfinder::print_dimensions "[INTERNAL]
Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::Rootfinder::memory "[INTERNAL]  Memory
objects.

";

%feature("docstring") casadi::Rootfinder::call "[INTERNAL]   Call a
function, templated.

";

%feature("docstring") casadi::Rootfinder::get_name_in "[INTERNAL]  Names of
function input and outputs.

";

%feature("docstring") casadi::Rootfinder::disp_more "[INTERNAL]  Print
more.

";

%feature("docstring") casadi::Rootfinder::alloc_iw "[INTERNAL]  Ensure
required length of iw field.

";

%feature("docstring") casadi::Rootfinder::oracle "[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::Rootfinder::alloc_res "[INTERNAL]  Ensure
required length of res field.

";

%feature("docstring") casadi::Rootfinder::instruction_id "[INTERNAL]  Get
an atomic operation operator index.

";

%feature("docstring") casadi::Rootfinder::call_reverse "[INTERNAL]  Reverse
mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Rootfinder::get_free "[INTERNAL]  Print free
variables.

";

%feature("docstring") casadi::Rootfinder::ad_forward "[INTERNAL]  Create
call to (cached) derivative function, forward mode.

";

%feature("docstring") casadi::Rootfinder::~Rootfinder "[INTERNAL]
Destructor.

";

%feature("docstring") casadi::Rootfinder::has_sprev "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Rootfinder::print_option "[INTERNAL]  Print
all information there is to know about a certain option.

";

%feature("docstring") casadi::Rootfinder::release "[INTERNAL]  Release a
memory object.

";

%feature("docstring") casadi::Rootfinder::symbolic_output "[INTERNAL]  Get
a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::Rootfinder::instruction_input "[INTERNAL]
Get the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::Rootfinder::sz_arg "[INTERNAL]  Get required
length of arg field.

";

%feature("docstring") casadi::Rootfinder::getAdaptorSolverName "[INTERNAL]
Obtain solver name from Adaptor.

";

%feature("docstring") casadi::Rootfinder::alloc_w "[INTERNAL]  Ensure
required length of w field.

";

%feature("docstring") casadi::Rootfinder::codegen_decref "[INTERNAL]
Codegen decref for dependencies.

";

%feature("docstring") casadi::Rootfinder::alloc "[INTERNAL]  Ensure work
vectors long enough to evaluate function.

";

%feature("docstring") casadi::Rootfinder::codegen_name "[INTERNAL]  Get
name in codegen.

";

%feature("docstring") casadi::Rootfinder "

Internal class.

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| common_options   | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | auto-generated   | nction           |
|                  |                 | functions        |                  |
+------------------+-----------------+------------------+------------------+
| constraints      | OT_INTVECTOR    | Constrain the    | casadi::Rootfind |
|                  |                 | unknowns. 0      | er               |
|                  |                 | (default): no    |                  |
|                  |                 | constraint on    |                  |
|                  |                 | ui, 1: ui >=     |                  |
|                  |                 | 0.0, -1: ui <=   |                  |
|                  |                 | 0.0, 2: ui >     |                  |
|                  |                 | 0.0, -2: ui <    |                  |
|                  |                 | 0.0.             |                  |
+------------------+-----------------+------------------+------------------+
| implicit_input   | OT_INT          | Index of the     | casadi::Rootfind |
|                  |                 | input that       | er               |
|                  |                 | corresponds to   |                  |
|                  |                 | the actual root- |                  |
|                  |                 | finding          |                  |
+------------------+-----------------+------------------+------------------+
| implicit_output  | OT_INT          | Index of the     | casadi::Rootfind |
|                  |                 | output that      | er               |
|                  |                 | corresponds to   |                  |
|                  |                 | the actual root- |                  |
|                  |                 | finding          |                  |
+------------------+-----------------+------------------+------------------+
| jacobian_functio | OT_FUNCTION     | Function object  | casadi::Rootfind |
| n                |                 | for calculating  | er               |
|                  |                 | the Jacobian     |                  |
|                  |                 | (autogenerated   |                  |
|                  |                 | by default)      |                  |
+------------------+-----------------+------------------+------------------+
| linear_solver    | OT_STRING       | User-defined     | casadi::Rootfind |
|                  |                 | linear solver    | er               |
|                  |                 | class. Needed    |                  |
|                  |                 | for              |                  |
|                  |                 | sensitivities.   |                  |
+------------------+-----------------+------------------+------------------+
| linear_solver_op | OT_DICT         | Options to be    | casadi::Rootfind |
| tions            |                 | passed to the    | er               |
|                  |                 | linear solver.   |                  |
+------------------+-----------------+------------------+------------------+
| monitor          | OT_STRINGVECTOR | Set of user      | casadi::OracleFu |
|                  |                 | problem          | nction           |
|                  |                 | functions to be  |                  |
|                  |                 | monitored        |                  |
+------------------+-----------------+------------------+------------------+
| specific_options | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | specific auto-   | nction           |
|                  |                 | generated        |                  |
|                  |                 | functions,       |                  |
|                  |                 | overwriting the  |                  |
|                  |                 | defaults from    |                  |
|                  |                 | common_options.  |                  |
|                  |                 | Nested           |                  |
|                  |                 | dictionary.      |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: rootfinder_impl.hpp ";

%feature("docstring") casadi::Rootfinder::mapsum_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::Rootfinder::codegen_meta "[INTERNAL]
Generate meta-information allowing a user to evaluate a generated function.

";

%feature("docstring") casadi::Rootfinder::sx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Rootfinder::call_gen "[INTERNAL]   Call a
function, overloaded.

";

%feature("docstring") casadi::Rootfinder::finalize "[INTERNAL]  Finalize
initialization.

";

%feature("docstring") casadi::Rootfinder::get_n_out "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::Rootfinder::which_depends "[INTERNAL]  Which
variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::Rootfinder::sp_forward "[INTERNAL]  Propagate
sparsity forward.

";

%feature("docstring") casadi::Rootfinder::alloc_mem "[INTERNAL]  Create
memory block.

";

%feature("docstring") casadi::Rootfinder::get_jacobian_sparsity "[INTERNAL]
Get Jacobian sparsity.

";

%feature("docstring") casadi::Rootfinder::class_name "[INTERNAL]  Readable
name of the internal class.

";

%feature("docstring") casadi::Rootfinder::is_a "[INTERNAL]  Check if the
function is of a particular type.

";

%feature("docstring") casadi::Rootfinder::getJacSparsityGen "[INTERNAL]
Get the sparsity pattern, forward mode.

";

%feature("docstring") casadi::Rootfinder::has_jacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Rootfinder::get_jacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Rootfinder::getAtomicInput "

[DEPRECATED] Renamed instruction_index

";

%feature("docstring") casadi::Rootfinder::codegen_sparsities "[INTERNAL]
Codegen sparsities.

";

%feature("docstring") casadi::Rootfinder::sp_reverse "[INTERNAL]  Propagate
sparsity backwards.

";

%feature("docstring") casadi::Rootfinder::export_code "[INTERNAL]  Export
function in a specific language.

";

%feature("docstring") casadi::Rootfinder::eval_dm "[INTERNAL]  Evaluate
with DM matrices.

";

%feature("docstring") casadi::Rootfinder::setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";

%feature("docstring") casadi::Rootfinder::print "[INTERNAL]  C-style
formatted printing during evaluation.

";

%feature("docstring") casadi::Rootfinder::numel_out "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::Rootfinder::signature "[INTERNAL]  Code
generate the function.

";

%feature("docstring") casadi::Rootfinder::jit_dependencies "[INTERNAL]  JIT
for dependencies.

";

%feature("docstring") casadi::Rootfinder::init_mem "[INTERNAL]  Initalize
memory block.

";

%feature("docstring") casadi::Rootfinder::getJacSparsity "[INTERNAL]
Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Rootfinder::get_partition "[INTERNAL]  Get
the unidirectional or bidirectional partition.

";

%feature("docstring") casadi::Rootfinder::getJacSparsityHierarchical "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::Rootfinder::ad_reverse "[INTERNAL]  Create
call to (cached) derivative function, reverse mode.

";

%feature("docstring") casadi::Rootfinder::n_instructions "[INTERNAL]  Get
the number of atomic operations.

";

%feature("docstring") casadi::Rootfinder::print_fstats "[INTERNAL]  Print
statistics.

";

%feature("docstring") casadi::Rootfinder::call_forward "[INTERNAL]  Forward
mode AD, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Rootfinder::create_function "[INTERNAL]
Create an oracle function

";

%feature("docstring") casadi::Rootfinder::size2_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::Rootfinder::nnz_in "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::Rootfinder::get_sparsity_in "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Rootfinder::sz_res "[INTERNAL]  Get required
length of res field.

";

%feature("docstring") casadi::Rootfinder::check_arg "[INTERNAL]  Check if
input arguments have correct length and dimensions.

";

%feature("docstring") casadi::Rootfinder::construct "[INTERNAL]  Construct
Prepares the function for evaluation.

";

%feature("docstring") casadi::Rootfinder::checkout "[INTERNAL]  Checkout a
memory object.

";

%feature("docstring") casadi::Rootfinder::has_function "[INTERNAL] ";

%feature("docstring") casadi::Rootfinder::mx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Rootfinder::instruction_output "[INTERNAL]
Get the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::Rootfinder::ad_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::Rootfinder::get_stats "[INTERNAL]  Get all
statistics.

";

%feature("docstring") casadi::Rootfinder::size1_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::Rootfinder::getAtomicOutput "

[DEPRECATED] Renamed instruction_output

";

%feature("docstring") casadi::Rootfinder::has_codegen "[INTERNAL]  Is
codegen supported?

";

%feature("docstring") casadi::Rootfinder::size_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::Rootfinder::instruction_constant "[INTERNAL]
Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::Rootfinder::get_reltol "[INTERNAL]  Get
relative tolerance.

";

%feature("docstring") casadi::Rootfinder::adjViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::Rootfinder::size2_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::Rootfinder::getJacSparsityHierarchicalSymm "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::Rootfinder::index_in "[INTERNAL]  Get input
scheme index by name.

";

%feature("docstring") casadi::Rootfinder::size1_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::Rootfinder::codegen_body "[INTERNAL]
Generate code for the function body.

";

%feature("docstring") casadi::Rootfinder::eval_gen "

>  int casadi::FunctionInternal::eval_gen(const double **arg, double **res, int *iw, double *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate numerically.

>  int casadi::FunctionInternal::eval_gen(const SXElem **arg, SXElem **res, int *iw, SXElem *w, void *mem) const

>  int casadi::FunctionInternal::eval_gen(const bvec_t **arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

%feature("docstring") casadi::Rootfinder::eval_mx "[INTERNAL]  Evaluate
with symbolic matrices.

";

%feature("docstring") casadi::Rootfinder::set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::Rootfinder::clear_mem "[INTERNAL]  Clear all
memory (called from destructor)

";

%feature("docstring") casadi::Rootfinder::sz_w "[INTERNAL]  Get required
length of w field.

";

%feature("docstring") casadi::Rootfinder::set_temp "[INTERNAL]  Set the
work vectors.

";

%feature("docstring") casadi::Rootfinder::disp "[INTERNAL]  Display object.

";

%feature("docstring") casadi::Rootfinder::matching_res "[INTERNAL]  Check
if output arguments that needs to be replaced.

";

%feature("docstring") casadi::Rootfinder::uses_output "[INTERNAL]  Do the
derivative functions need nondifferentiated outputs?

";

%feature("docstring") casadi::Rootfinder::factory "[INTERNAL] ";

%feature("docstring") casadi::Rootfinder::print_options "[INTERNAL]  Print
list of options.

";

%feature("docstring") casadi::Rootfinder::get_max_in "[INTERNAL]  Get
largest input value.

";

%feature("docstring") casadi::Rootfinder::sprint "[INTERNAL]  C-style
formatted printing to string.

";

%feature("docstring") casadi::Rootfinder::eval "[INTERNAL]  Evaluate
numerically.

";

%feature("docstring") casadi::Rootfinder::codegen "[INTERNAL]  Generate
code the function.

";

%feature("docstring") casadi::Rootfinder::codegen_declarations "[INTERNAL]
Generate code for the declarations of the C function.

";

%feature("docstring") casadi::Rootfinder::generate_dependencies "[INTERNAL]
Export / Generate C code for the generated functions.

";

%feature("docstring") casadi::Rootfinder::get_reverse "[INTERNAL]  Generate
a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::Rootfinder::free_mx "[INTERNAL]  Get free
variables ( MX)

";

%feature("docstring") casadi::Rootfinder::mx_in "[INTERNAL]  Get function
input(s) and output(s)

";


// File: classcasadi_1_1RungeKutta.xml
%feature("docstring") casadi::RungeKutta::rx "[INTERNAL] ";

%feature("docstring") casadi::RungeKutta::rz "[INTERNAL] ";

%feature("docstring") casadi::RungeKutta::~RungeKutta "[INTERNAL]
Destructor.

";

%feature("docstring") casadi::RungeKutta::generate_dependencies "[INTERNAL]
Export / Generate C code for the generated functions.

";

%feature("docstring") casadi::RungeKutta::rq "[INTERNAL] ";

%feature("docstring") casadi::RungeKutta::rp "[INTERNAL] ";

%feature("docstring") casadi::RungeKutta::jit_dependencies "[INTERNAL]  JIT
for dependencies.

";

%feature("docstring") casadi::RungeKutta::sz_arg "[INTERNAL]  Get required
length of arg field.

";

%feature("docstring") casadi::RungeKutta::has_forward "[INTERNAL]  Generate
a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::RungeKutta::aug_fwd "[INTERNAL]  Generate a
augmented DAE system with nfwd forward sensitivities.

";

%feature("docstring") casadi::RungeKutta::instruction_MX "[INTERNAL]  get
MX expression associated with instruction

";

%feature("docstring") casadi::RungeKutta::set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::RungeKutta::all_scalar "[INTERNAL]  Are all
inputs and outputs scalar.

";

%feature("docstring") casadi::RungeKutta::finalize "[INTERNAL]  Finalize
initialization.

";

%feature("docstring") casadi::RungeKutta::numel_in "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::RungeKutta::export_code "[INTERNAL]  Export
function in a specific language.

";

%feature("docstring") casadi::RungeKutta::getAtomicOutput "

[DEPRECATED] Renamed instruction_output

";

%feature("docstring") casadi::RungeKutta::has_spfwd "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::RungeKutta::size2_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::RungeKutta::class_name "[INTERNAL]  Readable
name of the internal class.

";

%feature("docstring") casadi::RungeKutta::alloc_res "[INTERNAL]  Ensure
required length of res field.

";

%feature("docstring") casadi::RungeKutta::memory "[INTERNAL]  Memory
objects.

";

%feature("docstring") casadi::RungeKutta::expand "[INTERNAL] ";

%feature("docstring") casadi::RungeKutta::disp "[INTERNAL]  Display object.

";

%feature("docstring") casadi::RungeKutta::print_stats "[INTERNAL]  Print
solver statistics.

";

%feature("docstring") casadi::RungeKutta::symbolicAdjSeed "[INTERNAL]
Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::RungeKutta::setStopTime "[INTERNAL]  Set stop
time for the integration.

";

%feature("docstring") casadi::RungeKutta::matching_arg "[INTERNAL]  Check
if input arguments that needs to be replaced.

";

%feature("docstring") casadi::RungeKutta::nnz_in "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::RungeKutta::sz_w "[INTERNAL]  Get required
length of w field.

";

%feature("docstring") casadi::RungeKutta::get_n_in "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::RungeKutta::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::RungeKutta::call_gen "[INTERNAL]   Call a
function, overloaded.

";

%feature("docstring") casadi::RungeKutta::self "[INTERNAL]  Get a public
class instance.

";

%feature("docstring") casadi::RungeKutta::index_in "[INTERNAL]  Get input
scheme index by name.

";

%feature("docstring") casadi::RungeKutta::getExplicit "[INTERNAL]  Get
explicit dynamics.

";

%feature("docstring") casadi::RungeKutta::check_res "[INTERNAL]  Check if
output arguments have correct length and dimensions.

";

%feature("docstring") casadi::RungeKutta::get_name_in "[INTERNAL]  Names of
function input and outputs.

";

%feature("docstring") casadi::RungeKutta::reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::RungeKutta::eval_sx "[INTERNAL]  Evaluate
with symbolic scalars.

";

%feature("docstring") casadi::RungeKutta::sp_jac_rdae "[INTERNAL]  Create
sparsity pattern of the extended Jacobian (backward problem)

";

%feature("docstring") casadi::RungeKutta::codegen_name "[INTERNAL]  Get
name in codegen.

";

%feature("docstring") casadi::RungeKutta::p "[INTERNAL] ";

%feature("docstring") casadi::RungeKutta::q "[INTERNAL] ";

%feature("docstring") casadi::RungeKutta::t "[INTERNAL] ";

%feature("docstring") casadi::RungeKutta::z "[INTERNAL] ";

%feature("docstring") casadi::RungeKutta::mx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::RungeKutta::x "[INTERNAL] ";

%feature("docstring") casadi::RungeKutta::get_function "[INTERNAL] ";

%feature("docstring") casadi::RungeKutta::size1_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::RungeKutta::size_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::RungeKutta::sp_forward "[INTERNAL]  Propagate
sparsity forward.

";

%feature("docstring") casadi::RungeKutta::factory "[INTERNAL] ";

%feature("docstring") casadi::RungeKutta::alloc "[INTERNAL]  Ensure work
vectors long enough to evaluate function.

";

%feature("docstring") casadi::RungeKutta::wrap "[INTERNAL]  Wrap in an
Function instance consisting of only one MX call.

";

%feature("docstring") casadi::RungeKutta::size1_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::RungeKutta::get_free "[INTERNAL]  Print free
variables.

";

%feature("docstring") casadi::RungeKutta::mapsum_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::RungeKutta::create_function "[INTERNAL]
Create an oracle function

";

%feature("docstring") casadi::RungeKutta::get_forward "[INTERNAL]  Generate
a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::RungeKutta::instruction_input "[INTERNAL]
Get the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::RungeKutta::generate_lifted "[INTERNAL]
Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::RungeKutta::get_jacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::RungeKutta::codegen_body "[INTERNAL]
Generate code for the function body.

";

%feature("docstring") casadi::RungeKutta::alloc_arg "[INTERNAL]  Ensure
required length of arg field.

";

%feature("docstring") casadi::RungeKutta::instruction_constant "[INTERNAL]
Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::RungeKutta::adjViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::RungeKutta::getJacSparsity "[INTERNAL]
Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::RungeKutta::get_reltol "[INTERNAL]  Get
relative tolerance.

";

%feature("docstring") casadi::RungeKutta::index_out "[INTERNAL]  Get output
scheme index by name.

";

%feature("docstring") casadi::RungeKutta::sz_iw "[INTERNAL]  Get required
length of iw field.

";

%feature("docstring") casadi::RungeKutta::free_sx "[INTERNAL]  Get free
variables (SX)

";

%feature("docstring") casadi::RungeKutta::sp_jac_dae "[INTERNAL]  Create
sparsity pattern of the extended Jacobian (forward problem)

";

%feature("docstring") casadi::RungeKutta::print_fstats "[INTERNAL]  Print
statistics.

";

%feature("docstring") casadi::RungeKutta::call_forward "[INTERNAL]  Forward
mode AD, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::RungeKutta::ad_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::RungeKutta::getJacSparsityHierarchical "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::RungeKutta::size2_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::RungeKutta::setupFG "[INTERNAL]  Setup F and
G.

";

%feature("docstring") casadi::RungeKutta::forward "[INTERNAL]  Return
function that calculates forward derivatives forward(nfwd) returns a cached
instance if available, and calls  Function get_forward(int nfwd) if no
cached version is available.

";

%feature("docstring") casadi::RungeKutta::free_mx "[INTERNAL]  Get free
variables ( MX)

";

%feature("docstring") casadi::RungeKutta::eval_dm "[INTERNAL]  Evaluate
with DM matrices.

";

%feature("docstring") casadi::RungeKutta::setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";

%feature("docstring") casadi::RungeKutta::alloc_w "[INTERNAL]  Ensure
required length of w field.

";

%feature("docstring") casadi::RungeKutta::retreat "[INTERNAL]  Retreat
solution in time.

";

%feature("docstring") casadi::RungeKutta::codegen_decref "[INTERNAL]
Codegen decref for dependencies.

";

%feature("docstring") casadi::RungeKutta::alloc_mem "[INTERNAL]  Create
memory block.

";

%feature("docstring") casadi::RungeKutta::mx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::RungeKutta::has_derivative "[INTERNAL]  Can
derivatives be calculated in any way?

";

%feature("docstring") casadi::RungeKutta::codegen_meta "[INTERNAL]
Generate meta-information allowing a user to evaluate a generated function.

";

%feature("docstring") casadi::RungeKutta::advance "[INTERNAL]  Advance
solution in time.

";

%feature("docstring") casadi::RungeKutta::clear_mem "[INTERNAL]  Clear all
memory (called from destructor)

";

%feature("docstring") casadi::RungeKutta::getAtomicInput "

[DEPRECATED] Renamed instruction_index

";

%feature("docstring") casadi::RungeKutta::release "[INTERNAL]  Release a
memory object.

";

%feature("docstring") casadi::RungeKutta::codegen_sparsities "[INTERNAL]
Codegen sparsities.

";

%feature("docstring") casadi::RungeKutta::sx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::RungeKutta::which_depends "[INTERNAL]  Which
variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::RungeKutta::sparsity_jac "[INTERNAL]  Get, if
necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::RungeKutta::is_a "[INTERNAL]  Check if the
function is of a particular type.

";

%feature("docstring") casadi::RungeKutta::get_jacobian_sparsity "[INTERNAL]
Get Jacobian sparsity.

";

%feature("docstring") casadi::RungeKutta::checkout "[INTERNAL]  Checkout a
memory object.

";

%feature("docstring") casadi::RungeKutta "[INTERNAL]  'rk' plugin for
Integrator

Fixed-step explicit Runge-Kutta integrator for ODEs Currently implements
RK4.

The method is still under development

Joel Andersson

C++ includes: runge_kutta.hpp ";

%feature("docstring") casadi::RungeKutta::n_nodes "[INTERNAL]  Number of
nodes in the algorithm.

";

%feature("docstring") casadi::RungeKutta::getJacSparsityGen "[INTERNAL]
Get the sparsity pattern, forward mode.

";

%feature("docstring") casadi::RungeKutta::get_sparsity_in "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::RungeKutta::sx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::RungeKutta::get_partition "[INTERNAL]  Get
the unidirectional or bidirectional partition.

";

%feature("docstring") casadi::RungeKutta::sp_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode, sparsity propagation.

";

%feature("docstring") casadi::RungeKutta::instruction_output "[INTERNAL]
Get the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::RungeKutta::sp_reverse "[INTERNAL]  Propagate
sparsity backwards.

";

%feature("docstring") casadi::RungeKutta::print_options "[INTERNAL]  Print
list of options.

";

%feature("docstring") casadi::RungeKutta::jacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::RungeKutta::numel_out "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::RungeKutta::nnz_out "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::RungeKutta::sz_res "[INTERNAL]  Get required
length of res field.

";

%feature("docstring") casadi::RungeKutta::oracle "[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::RungeKutta::get_sparsity_out "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::RungeKutta::has_reverse "[INTERNAL]  Generate
a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::RungeKutta::instruction_id "[INTERNAL]  Get
an atomic operation operator index.

";

%feature("docstring") casadi::RungeKutta::codegen_incref "[INTERNAL]
Codegen incref for dependencies.

";

%feature("docstring") casadi::RungeKutta::fwd_seed "[INTERNAL]  Symbolic
expressions for the forward seeds.

";

%feature("docstring") casadi::RungeKutta::alloc_iw "[INTERNAL]  Ensure
required length of iw field.

";

%feature("docstring") casadi::RungeKutta::set_function "[INTERNAL]
Register the function for evaluation and statistics gathering

";

%feature("docstring") casadi::RungeKutta::getExplicitB "[INTERNAL]  Get
explicit dynamics (backward problem)

";

%feature("docstring") casadi::RungeKutta::set_temp "[INTERNAL]  Set the
work vectors.

";

%feature("docstring") casadi::RungeKutta::replace_aseed "[INTERNAL]
Replace 0-by-0 reverse seeds.

";

%feature("docstring") casadi::RungeKutta::print "[INTERNAL]  C-style
formatted printing during evaluation.

";

%feature("docstring") casadi::RungeKutta::get_name_out "[INTERNAL]  Names
of function input and outputs.

";

%feature("docstring") casadi::RungeKutta::RungeKutta "[INTERNAL]
Constructor.

";

%feature("docstring") casadi::RungeKutta::sz_work "[INTERNAL]  Get number
of temporary variables needed.

";

%feature("docstring") casadi::RungeKutta::slice "[INTERNAL]  returns a new
function with a selection of inputs/outputs of the original

";

%feature("docstring") casadi::RungeKutta::info "[INTERNAL]  Obtain
information about function

";

%feature("docstring") casadi::RungeKutta::check_arg "[INTERNAL]  Check if
input arguments have correct length and dimensions.

";

%feature("docstring") casadi::RungeKutta::get_n_out "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::RungeKutta::monitored "[INTERNAL] ";

%feature("docstring") casadi::RungeKutta::symbolic_output "[INTERNAL]  Get
a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::RungeKutta::signature "[INTERNAL]  Code
generate the function.

";

%feature("docstring") casadi::RungeKutta::uses_output "[INTERNAL]  Do the
derivative functions need nondifferentiated outputs?

";

%feature("docstring") casadi::RungeKutta::print_option "[INTERNAL]  Print
all information there is to know about a certain option.

";

%feature("docstring") casadi::RungeKutta::print_dimensions "[INTERNAL]
Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::RungeKutta::get_min_in "[INTERNAL]  Get
smallest input value.

";

%feature("docstring") casadi::RungeKutta::get_max_in "[INTERNAL]  Get
largest input value.

";

%feature("docstring") casadi::RungeKutta::get_options "[INTERNAL]  Options.

";

%feature("docstring") casadi::RungeKutta::sprint "[INTERNAL]  C-style
formatted printing to string.

";

%feature("docstring") casadi::RungeKutta::replace_fseed "[INTERNAL]
Replace 0-by-0 forward seeds.

";

%feature("docstring") casadi::RungeKutta::fwdViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::RungeKutta::get_default_in "[INTERNAL]  Get
default input value.

";

%feature("docstring") casadi::RungeKutta::getAdaptorSolverName "[INTERNAL]
Obtain solver name from Adaptor.

";

%feature("docstring") casadi::RungeKutta::has_sprev "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::RungeKutta::resetB "[INTERNAL]  Reset the
backward problem and take time to tf.

";

%feature("docstring") casadi::RungeKutta::replace_arg "[INTERNAL]  Replace
0-by-0 inputs.

";

%feature("docstring") casadi::RungeKutta::eval_mx "[INTERNAL]  Evaluate
with symbolic matrices.

";

%feature("docstring") casadi::RungeKutta::has_jacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::RungeKutta::eval "[INTERNAL]  evaluate

";

%feature("docstring") casadi::RungeKutta::calc_function "[INTERNAL] ";

%feature("docstring") casadi::RungeKutta::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::RungeKutta::getJacSparsityHierarchicalSymm "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::RungeKutta::get_abstol "[INTERNAL]  Get
absolute tolerance.

";

%feature("docstring") casadi::RungeKutta::get_reverse "[INTERNAL]  Generate
a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::RungeKutta::n_instructions "[INTERNAL]  Get
the number of atomic operations.

";

%feature("docstring") casadi::RungeKutta::disp_more "[INTERNAL]  Print
more.

";

%feature("docstring") casadi::RungeKutta::reset "[INTERNAL]  Reset the
forward problem.

";

%feature("docstring") casadi::RungeKutta::definition "[INTERNAL]  Get
function signature: name:(inputs)->(outputs)

";

%feature("docstring") casadi::RungeKutta::init_mem "[INTERNAL]  Initalize
memory block.

";

%feature("docstring") casadi::RungeKutta::init "[INTERNAL]  Initialize
stage.

";

%feature("docstring") casadi::RungeKutta::getDerivativeOptions "[INTERNAL]
Set solver specific options to generated augmented integrators.

";

%feature("docstring") casadi::RungeKutta::has_function "[INTERNAL] ";

%feature("docstring") casadi::RungeKutta::has_free "[INTERNAL]  Does the
function have free variables.

";

%feature("docstring") casadi::RungeKutta::size_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::RungeKutta::get_stats "[INTERNAL]  Get all
statistics.

";

%feature("docstring") casadi::RungeKutta::aug_adj "[INTERNAL]  Generate a
augmented DAE system with nadj adjoint sensitivities.

";

%feature("docstring") casadi::RungeKutta::matching_res "[INTERNAL]  Check
if output arguments that needs to be replaced.

";

%feature("docstring") casadi::RungeKutta::call "[INTERNAL]   Call a
function, templated.

";

%feature("docstring") casadi::RungeKutta::plugin_name "[INTERNAL] ";

%feature("docstring") casadi::RungeKutta::has_codegen "[INTERNAL]  Is
codegen supported?

";

%feature("docstring") casadi::RungeKutta::construct "[INTERNAL]  Construct
Prepares the function for evaluation.

";

%feature("docstring") casadi::RungeKutta::eval_gen "

>  int casadi::FunctionInternal::eval_gen(const double **arg, double **res, int *iw, double *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate numerically.

>  int casadi::FunctionInternal::eval_gen(const SXElem **arg, SXElem **res, int *iw, SXElem *w, void *mem) const

>  int casadi::FunctionInternal::eval_gen(const bvec_t **arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

%feature("docstring") casadi::RungeKutta::free_mem "[INTERNAL]  Free memory
block.

";

%feature("docstring") casadi::RungeKutta::codegen "[INTERNAL]  Generate
code the function.

";

%feature("docstring") casadi::RungeKutta::call_reverse "[INTERNAL]  Reverse
mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::RungeKutta::replace_res "[INTERNAL]  Replace
0-by-0 outputs.

";

%feature("docstring") casadi::RungeKutta::codegen_declarations "[INTERNAL]
Generate code for the declarations of the C function.

";


// File: classcasadi_1_1Scpgen.xml
%feature("docstring") casadi::Scpgen::replace_aseed "[INTERNAL]  Replace
0-by-0 reverse seeds.

";

%feature("docstring") casadi::Scpgen::instruction_id "[INTERNAL]  Get an
atomic operation operator index.

";

%feature("docstring") casadi::Scpgen::clear_mem "[INTERNAL]  Clear all
memory (called from destructor)

";

%feature("docstring") casadi::Scpgen::get_name_in "[INTERNAL]  Names of
function input and outputs.

";

%feature("docstring") casadi::Scpgen::free_mx "[INTERNAL]  Get free
variables ( MX)

";

%feature("docstring") casadi::Scpgen::create_function "[INTERNAL]  Create
an oracle function

";

%feature("docstring") casadi::Scpgen::get_abstol "[INTERNAL]  Get absolute
tolerance.

";

%feature("docstring") casadi::Scpgen::size1_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Scpgen::eval_vec "[INTERNAL] ";

%feature("docstring") casadi::Scpgen::size1_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Scpgen::eval_res "[INTERNAL] ";

%feature("docstring") casadi::Scpgen::symbolicAdjSeed "[INTERNAL]  Symbolic
expressions for the adjoint seeds.

";

%feature("docstring") casadi::Scpgen::ad_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::Scpgen::sp_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode, sparsity propagation.

";

%feature("docstring") casadi::Scpgen::getJacSparsityHierarchicalSymm "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::Scpgen::signature "[INTERNAL]  Code generate
the function.

";

%feature("docstring") casadi::Scpgen::replace_fseed "[INTERNAL]  Replace
0-by-0 forward seeds.

";

%feature("docstring") casadi::Scpgen::alloc_w "[INTERNAL]  Ensure required
length of w field.

";

%feature("docstring") casadi::Scpgen::alloc_res "[INTERNAL]  Ensure
required length of res field.

";

%feature("docstring") casadi::Scpgen::codegen_body "[INTERNAL]  Generate
code for the function body.

";

%feature("docstring") casadi::Scpgen::export_code "[INTERNAL]  Export
function in a specific language.

";

%feature("docstring") casadi::Scpgen::eval_mat "[INTERNAL] ";

%feature("docstring") casadi::Scpgen::getAdaptorSolverName "[INTERNAL]
Obtain solver name from Adaptor.

";

%feature("docstring") casadi::Scpgen::is_a "[INTERNAL]  Check if the
function is of a particular type.

";

%feature("docstring") casadi::Scpgen::fwdViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::Scpgen::setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";

%feature("docstring") casadi::Scpgen::disp_more "[INTERNAL]  Print
description.

";

%feature("docstring") casadi::Scpgen::mapsum_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::Scpgen::index_in "[INTERNAL]  Get input
scheme index by name.

";

%feature("docstring") casadi::Scpgen::fwd_seed "[INTERNAL]  Symbolic
expressions for the forward seeds.

";

%feature("docstring") casadi::Scpgen::mx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Scpgen::expand "[INTERNAL] ";

%feature("docstring") casadi::Scpgen::get_reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::Scpgen::numel_out "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::Scpgen::oracle "[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::Scpgen::get_max_in "[INTERNAL]  Get largest
input value.

";

%feature("docstring") casadi::Scpgen::memory "[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::Scpgen::call "[INTERNAL]   Call a function,
templated.

";

%feature("docstring") casadi::Scpgen::Scpgen "[INTERNAL] ";

%feature("docstring") casadi::Scpgen::free_mem "[INTERNAL]  Free memory
block.

";

%feature("docstring") casadi::Scpgen::instruction_constant "[INTERNAL]  Get
the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::Scpgen::finalize "[INTERNAL]  Finalize
initialization.

";

%feature("docstring") casadi::Scpgen::all_scalar "[INTERNAL]  Are all
inputs and outputs scalar.

";

%feature("docstring") casadi::Scpgen::uses_output "[INTERNAL]  Do the
derivative functions need nondifferentiated outputs?

";

%feature("docstring") casadi::Scpgen::check_res "[INTERNAL]  Check if
output arguments have correct length and dimensions.

";

%feature("docstring") casadi::Scpgen::instruction_input "[INTERNAL]  Get
the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::Scpgen::get_n_out "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::Scpgen::nnz_out "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::Scpgen::alloc_mem "[INTERNAL]  Create memory
block.

";

%feature("docstring") casadi::Scpgen::get_jacobian_sparsity "[INTERNAL]
Get Jacobian sparsity.

";

%feature("docstring") casadi::Scpgen::integer_support "[INTERNAL]  Can
discrete variables be treated.

";

%feature("docstring") casadi::Scpgen::size2_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Scpgen::get_min_in "[INTERNAL]  Get smallest
input value.

";

%feature("docstring") casadi::Scpgen::release "[INTERNAL]  Release a memory
object.

";

%feature("docstring") casadi::Scpgen::reverse "[INTERNAL]  Return function
that calculates adjoint derivatives reverse(nadj) returns a cached instance
if available, and calls  Function get_reverse(int nadj) if no cached version
is available.

";

%feature("docstring") casadi::Scpgen::set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::Scpgen::get_free "[INTERNAL]  Print free
variables.

";

%feature("docstring") casadi::Scpgen::primalInfeasibility "[INTERNAL] ";

%feature("docstring") casadi::Scpgen::set_function "[INTERNAL]  Register
the function for evaluation and statistics gathering

";

%feature("docstring") casadi::Scpgen::call_reverse "[INTERNAL]  Reverse
mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Scpgen::self "[INTERNAL]  Get a public class
instance.

";

%feature("docstring") casadi::Scpgen::sz_iw "[INTERNAL]  Get required
length of iw field.

";

%feature("docstring") casadi::Scpgen::sx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Scpgen::get_forward "[INTERNAL]  Return
function that calculates forward derivatives forward(nfwd) returns a cached
instance if available, and calls  Function get_forward(int nfwd) if no
cached version is available.

";

%feature("docstring") casadi::Scpgen::alloc "[INTERNAL]  Ensure work
vectors long enough to evaluate function.

";

%feature("docstring") casadi::Scpgen::init_mem "[INTERNAL]  Initalize
memory block.

";

%feature("docstring") casadi::Scpgen::getAtomicInput "

[DEPRECATED] Renamed instruction_index

";

%feature("docstring") casadi::Scpgen::instruction_output "[INTERNAL]  Get
the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::Scpgen::print_options "[INTERNAL]  Print list
of options.

";

%feature("docstring") casadi::Scpgen::getJacSparsity "[INTERNAL]  Generate
the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Scpgen::call_gen "[INTERNAL]   Call a
function, overloaded.

";

%feature("docstring") casadi::Scpgen::alloc_arg "[INTERNAL]  Ensure
required length of arg field.

";

%feature("docstring") casadi::Scpgen::size_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Scpgen::free_sx "[INTERNAL]  Get free
variables (SX)

";

%feature("docstring") casadi::Scpgen::eval_gen "

>  int casadi::FunctionInternal::eval_gen(const double **arg, double **res, int *iw, double *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate numerically.

>  int casadi::FunctionInternal::eval_gen(const SXElem **arg, SXElem **res, int *iw, SXElem *w, void *mem) const

>  int casadi::FunctionInternal::eval_gen(const bvec_t **arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

%feature("docstring") casadi::Scpgen::disp "[INTERNAL]  Display object.

";

%feature("docstring") casadi::Scpgen::sz_work "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") casadi::Scpgen::get_partition "[INTERNAL]  Get the
unidirectional or bidirectional partition.

";

%feature("docstring") casadi::Scpgen::numel_in "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::Scpgen::has_spfwd "[INTERNAL]  Is the class
able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Scpgen::mx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Scpgen::has_reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::Scpgen::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::Scpgen::get_reltol "[INTERNAL]  Get relative
tolerance.

";

%feature("docstring") casadi::Scpgen::dualInfeasibility "[INTERNAL] ";

%feature("docstring") casadi::Scpgen::class_name "[INTERNAL]  Readable name
of the internal class.

";

%feature("docstring") casadi::Scpgen::getJacSparsityHierarchical "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::Scpgen::replace_arg "[INTERNAL]  Replace
0-by-0 inputs.

";

%feature("docstring") casadi::Scpgen::sprint "[INTERNAL]  C-style formatted
printing to string.

";

%feature("docstring") casadi::Scpgen::slice "[INTERNAL]  returns a new
function with a selection of inputs/outputs of the original

";

%feature("docstring") casadi::Scpgen::solve_qp "[INTERNAL] ";

%feature("docstring") casadi::Scpgen::print_option "[INTERNAL]  Print all
information there is to know about a certain option.

";

%feature("docstring") casadi::Scpgen::eval_exp "[INTERNAL] ";

%feature("docstring") casadi::Scpgen::check_arg "[INTERNAL]  Check if input
arguments have correct length and dimensions.

";

%feature("docstring") casadi::Scpgen::checkout "[INTERNAL]  Checkout a
memory object.

";

%feature("docstring") casadi::Scpgen::get_default_in "[INTERNAL]  Get
default input value.

";

%feature("docstring") casadi::Scpgen::has_codegen "[INTERNAL]  Is codegen
supported?

";

%feature("docstring") casadi::Scpgen::regularize "[INTERNAL] ";

%feature("docstring") casadi::Scpgen::set_temp "[INTERNAL]  Set the work
vectors.

";

%feature("docstring") casadi::Scpgen::eval_mx "[INTERNAL]  Evaluate with
symbolic matrices.

";

%feature("docstring") casadi::Scpgen::has_sprev "[INTERNAL]  Is the class
able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Scpgen::codegen_meta "[INTERNAL]  Generate
meta-information allowing a user to evaluate a generated function.

";

%feature("docstring") casadi::Scpgen::wrap "[INTERNAL]  Wrap in an Function
instance consisting of only one MX call.

";

%feature("docstring") casadi::Scpgen::has_jacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Scpgen::forward "[INTERNAL]  Return function
that calculates forward derivatives forward(nfwd) returns a cached instance
if available, and calls  Function get_forward(int nfwd) if no cached version
is available.

";

%feature("docstring") casadi::Scpgen::print_dimensions "[INTERNAL]  Print
dimensions of inputs and outputs.

";

%feature("docstring") casadi::Scpgen::get_options "[INTERNAL]  Options.

";

%feature("docstring") casadi::Scpgen::size2_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Scpgen::jacobian "[INTERNAL]  Return Jacobian
of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Scpgen::which_depends "[INTERNAL]  Which
variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::Scpgen::get_name_out "[INTERNAL]  Names of
function input and outputs.

";

%feature("docstring") casadi::Scpgen::adjViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::Scpgen::definition "[INTERNAL]  Get function
signature: name:(inputs)->(outputs)

";

%feature("docstring") casadi::Scpgen::sx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Scpgen::codegen_incref "[INTERNAL]  Codegen
incref for dependencies.

";

%feature("docstring") casadi::Scpgen::codegen_decref "[INTERNAL]  Codegen
decref for dependencies.

";

%feature("docstring") casadi::Scpgen::check_inputs "[INTERNAL]  Check if
the inputs correspond to a well-posed problem.

";

%feature("docstring") casadi::Scpgen::call_forward "[INTERNAL]  Forward
mode AD, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Scpgen::get_sparsity_in "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Scpgen::get_sparsity_out "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Scpgen::has_free "[INTERNAL]  Does the
function have free variables.

";

%feature("docstring") casadi::Scpgen::generate_dependencies "[INTERNAL]
Export / Generate C code for the generated functions.

";

%feature("docstring") casadi::Scpgen::print "[INTERNAL]  C-style formatted
printing during evaluation.

";

%feature("docstring") casadi::Scpgen::monitored "[INTERNAL] ";

%feature("docstring") casadi::Scpgen::eval_dm "[INTERNAL]  Evaluate with DM
matrices.

";

%feature("docstring") casadi::Scpgen::get_function "[INTERNAL] ";

%feature("docstring") casadi::Scpgen::print_fstats "[INTERNAL]  Print
statistics.

";

%feature("docstring") casadi::Scpgen::getReducedHessian "[INTERNAL] ";

%feature("docstring") casadi::Scpgen::eval "[INTERNAL]  Evaluate
numerically.

";

%feature("docstring") casadi::Scpgen::setOptionsFromFile "[INTERNAL]  Read
options from parameter xml.

";

%feature("docstring") casadi::Scpgen::info "[INTERNAL]  Obtain information
about function

";

%feature("docstring") casadi::Scpgen::symbolic_output "[INTERNAL]  Get a
vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::Scpgen::alloc_iw "[INTERNAL]  Ensure required
length of iw field.

";

%feature("docstring") casadi::Scpgen::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::Scpgen::index_out "[INTERNAL]  Get output
scheme index by name.

";

%feature("docstring") casadi::Scpgen::codegen "[INTERNAL]  Generate code
the function.

";

%feature("docstring") casadi::Scpgen::sz_w "[INTERNAL]  Get required length
of w field.

";

%feature("docstring") casadi::Scpgen::jit_dependencies "[INTERNAL]  JIT for
dependencies.

";

%feature("docstring") casadi::Scpgen::size_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Scpgen::getAtomicOutput "

[DEPRECATED] Renamed instruction_output

";

%feature("docstring") casadi::Scpgen::sp_forward "[INTERNAL]  Propagate
sparsity forward.

";

%feature("docstring") casadi::Scpgen::codegen_name "[INTERNAL]  Get name in
codegen.

";

%feature("docstring") casadi::Scpgen::solve "[INTERNAL] ";

%feature("docstring") casadi::Scpgen::line_search "[INTERNAL] ";

%feature("docstring") casadi::Scpgen::matching_res "[INTERNAL]  Check if
output arguments that needs to be replaced.

";

%feature("docstring") casadi::Scpgen::generate_lifted "[INTERNAL]  Extract
the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::Scpgen::has_forward "[INTERNAL]  Return
function that calculates forward derivatives forward(nfwd) returns a cached
instance if available, and calls  Function get_forward(int nfwd) if no
cached version is available.

";

%feature("docstring") casadi::Scpgen::n_nodes "[INTERNAL]  Number of nodes
in the algorithm.

";

%feature("docstring") casadi::Scpgen::sparsity_jac "[INTERNAL]  Get, if
necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Scpgen::instruction_MX "[INTERNAL]  get MX
expression associated with instruction

";

%feature("docstring") casadi::Scpgen::get_stats "[INTERNAL]  Get all
statistics.

";

%feature("docstring") casadi::Scpgen::calc_function "[INTERNAL] ";

%feature("docstring") casadi::Scpgen::n_instructions "[INTERNAL]  Get the
number of atomic operations.

";

%feature("docstring") casadi::Scpgen::matching_arg "[INTERNAL]  Check if
input arguments that needs to be replaced.

";

%feature("docstring") casadi::Scpgen::get_jacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Scpgen::codegen_declarations "[INTERNAL]
Generate code for the declarations of the C function.

";

%feature("docstring") casadi::Scpgen::sz_res "[INTERNAL]  Get required
length of res field.

";

%feature("docstring") casadi::Scpgen::plugin_name "[INTERNAL] ";

%feature("docstring") casadi::Scpgen::nnz_in "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::Scpgen::has_derivative "[INTERNAL]  Can
derivatives be calculated in any way?

";

%feature("docstring") casadi::Scpgen::eval_sx "[INTERNAL]  Evaluate with
symbolic scalars.

";

%feature("docstring") casadi::Scpgen::sp_reverse "[INTERNAL]  Propagate
sparsity backwards.

";

%feature("docstring") casadi::Scpgen::init "[INTERNAL]  Initialize.

";

%feature("docstring") casadi::Scpgen::factory "[INTERNAL] ";

%feature("docstring") casadi::Scpgen::sz_arg "[INTERNAL]  Get required
length of arg field.

";

%feature("docstring") casadi::Scpgen::construct "[INTERNAL]  Construct
Prepares the function for evaluation.

";

%feature("docstring") casadi::Scpgen "

'scpgen' plugin for Nlpsol

A structure-exploiting sequential quadratic programming (to be come
sequential convex programming) method for nonlinear programming.

>List of available options

+-----------------------+-----------------+--------------------------------+
|          Id           |      Type       |          Description           |
+=======================+=================+================================+
| beta                  | OT_DOUBLE       | Line-search parameter,         |
|                       |                 | restoration factor of stepsize |
+-----------------------+-----------------+--------------------------------+
| c1                    | OT_DOUBLE       | Armijo condition, coefficient  |
|                       |                 | of decrease in merit           |
+-----------------------+-----------------+--------------------------------+
| codegen               | OT_BOOL         | C-code generation              |
+-----------------------+-----------------+--------------------------------+
| hessian_approximation | OT_STRING       | gauss-newton|exact             |
+-----------------------+-----------------+--------------------------------+
| lbfgs_memory          | OT_INT          | Size of L-BFGS memory.         |
+-----------------------+-----------------+--------------------------------+
| max_iter              | OT_INT          | Maximum number of SQP          |
|                       |                 | iterations                     |
+-----------------------+-----------------+--------------------------------+
| max_iter_ls           | OT_INT          | Maximum number of linesearch   |
|                       |                 | iterations                     |
+-----------------------+-----------------+--------------------------------+
| merit_memsize         | OT_INT          | Size of memory to store        |
|                       |                 | history of merit function      |
|                       |                 | values                         |
+-----------------------+-----------------+--------------------------------+
| merit_start           | OT_DOUBLE       | Lower bound for the merit      |
|                       |                 | function parameter             |
+-----------------------+-----------------+--------------------------------+
| name_x                | OT_STRINGVECTOR | Names of the variables.        |
+-----------------------+-----------------+--------------------------------+
| print_header          | OT_BOOL         | Print the header with problem  |
|                       |                 | statistics                     |
+-----------------------+-----------------+--------------------------------+
| print_x               | OT_INTVECTOR    | Which variables to print.      |
+-----------------------+-----------------+--------------------------------+
| qpsol                 | OT_STRING       | The QP solver to be used by    |
|                       |                 | the SQP method                 |
+-----------------------+-----------------+--------------------------------+
| qpsol_options         | OT_DICT         | Options to be passed to the QP |
|                       |                 | solver                         |
+-----------------------+-----------------+--------------------------------+
| reg_threshold         | OT_DOUBLE       | Threshold for the              |
|                       |                 | regularization.                |
+-----------------------+-----------------+--------------------------------+
| regularize            | OT_BOOL         | Automatic regularization of    |
|                       |                 | Lagrange Hessian.              |
+-----------------------+-----------------+--------------------------------+
| tol_du                | OT_DOUBLE       | Stopping criterion for dual    |
|                       |                 | infeasability                  |
+-----------------------+-----------------+--------------------------------+
| tol_pr                | OT_DOUBLE       | Stopping criterion for primal  |
|                       |                 | infeasibility                  |
+-----------------------+-----------------+--------------------------------+
| tol_pr_step           | OT_DOUBLE       | Stopping criterion for the     |
|                       |                 | step size                      |
+-----------------------+-----------------+--------------------------------+
| tol_reg               | OT_DOUBLE       | Stopping criterion for         |
|                       |                 | regularization                 |
+-----------------------+-----------------+--------------------------------+

Joel Andersson, Attila Kozma and Joris Gillis

>List of available options

+-------------------+-----------------+-------------------+----------------+
|        Id         |      Type       |    Description    |    Used in     |
+===================+=================+===================+================+
| beta              | OT_DOUBLE       | Line-search       | casadi::Scpgen |
|                   |                 | parameter,        |                |
|                   |                 | restoration       |                |
|                   |                 | factor of         |                |
|                   |                 | stepsize          |                |
+-------------------+-----------------+-------------------+----------------+
| c1                | OT_DOUBLE       | Armijo condition, | casadi::Scpgen |
|                   |                 | coefficient of    |                |
|                   |                 | decrease in merit |                |
+-------------------+-----------------+-------------------+----------------+
| calc_multipliers  | OT_BOOL         | Calculate         | casadi::Nlpsol |
|                   |                 | Lagrange          |                |
|                   |                 | multipliers in    |                |
|                   |                 | the Nlpsol base   |                |
|                   |                 | class             |                |
+-------------------+-----------------+-------------------+----------------+
| codegen           | OT_BOOL         | C-code generation | casadi::Scpgen |
+-------------------+-----------------+-------------------+----------------+
| discrete          | OT_BOOLVECTOR   | Indicates which   | casadi::Nlpsol |
|                   |                 | of the variables  |                |
|                   |                 | are discrete,     |                |
|                   |                 | i.e. integer-     |                |
|                   |                 | valued            |                |
+-------------------+-----------------+-------------------+----------------+
| eval_errors_fatal | OT_BOOL         | When errors occur | casadi::Nlpsol |
|                   |                 | during evaluation |                |
|                   |                 | of f,g,...,stop   |                |
|                   |                 | the iterations    |                |
+-------------------+-----------------+-------------------+----------------+
| expand            | OT_BOOL         | Replace MX with   | casadi::Nlpsol |
|                   |                 | SX expressions in |                |
|                   |                 | problem           |                |
|                   |                 | formulation       |                |
|                   |                 | [false]           |                |
+-------------------+-----------------+-------------------+----------------+
| hessian_approxima | OT_STRING       | gauss-            | casadi::Scpgen |
| tion              |                 | newton|exact      |                |
+-------------------+-----------------+-------------------+----------------+
| ignore_check_vec  | OT_BOOL         | If set to true,   | casadi::Nlpsol |
|                   |                 | the input shape   |                |
|                   |                 | of F will not be  |                |
|                   |                 | checked.          |                |
+-------------------+-----------------+-------------------+----------------+
| iteration_callbac | OT_FUNCTION     | A function that   | casadi::Nlpsol |
| k                 |                 | will be called at |                |
|                   |                 | each iteration    |                |
|                   |                 | with the solver   |                |
|                   |                 | as input. Check   |                |
|                   |                 | documentation of  |                |
|                   |                 | Callback .        |                |
+-------------------+-----------------+-------------------+----------------+
| iteration_callbac | OT_BOOL         | If set to true,   | casadi::Nlpsol |
| k_ignore_errors   |                 | errors thrown by  |                |
|                   |                 | iteration_callbac |                |
|                   |                 | k will be         |                |
|                   |                 | ignored.          |                |
+-------------------+-----------------+-------------------+----------------+
| iteration_callbac | OT_INT          | Only call the     | casadi::Nlpsol |
| k_step            |                 | callback function |                |
|                   |                 | every few         |                |
|                   |                 | iterations.       |                |
+-------------------+-----------------+-------------------+----------------+
| lbfgs_memory      | OT_INT          | Size of L-BFGS    | casadi::Scpgen |
|                   |                 | memory.           |                |
+-------------------+-----------------+-------------------+----------------+
| max_iter          | OT_INT          | Maximum number of | casadi::Scpgen |
|                   |                 | SQP iterations    |                |
+-------------------+-----------------+-------------------+----------------+
| max_iter_ls       | OT_INT          | Maximum number of | casadi::Scpgen |
|                   |                 | linesearch        |                |
|                   |                 | iterations        |                |
+-------------------+-----------------+-------------------+----------------+
| merit_memsize     | OT_INT          | Size of memory to | casadi::Scpgen |
|                   |                 | store history of  |                |
|                   |                 | merit function    |                |
|                   |                 | values            |                |
+-------------------+-----------------+-------------------+----------------+
| merit_start       | OT_DOUBLE       | Lower bound for   | casadi::Scpgen |
|                   |                 | the merit         |                |
|                   |                 | function          |                |
|                   |                 | parameter         |                |
+-------------------+-----------------+-------------------+----------------+
| name_x            | OT_STRINGVECTOR | Names of the      | casadi::Scpgen |
|                   |                 | variables.        |                |
+-------------------+-----------------+-------------------+----------------+
| oracle_options    | OT_DICT         | Options to be     | casadi::Nlpsol |
|                   |                 | passed to the     |                |
|                   |                 | oracle function   |                |
+-------------------+-----------------+-------------------+----------------+
| print_header      | OT_BOOL         | Print the header  | casadi::Scpgen |
|                   |                 | with problem      |                |
|                   |                 | statistics        |                |
+-------------------+-----------------+-------------------+----------------+
| print_x           | OT_INTVECTOR    | Which variables   | casadi::Scpgen |
|                   |                 | to print.         |                |
+-------------------+-----------------+-------------------+----------------+
| qpsol             | OT_STRING       | The QP solver to  | casadi::Scpgen |
|                   |                 | be used by the    |                |
|                   |                 | SQP method        |                |
+-------------------+-----------------+-------------------+----------------+
| qpsol_options     | OT_DICT         | Options to be     | casadi::Scpgen |
|                   |                 | passed to the QP  |                |
|                   |                 | solver            |                |
+-------------------+-----------------+-------------------+----------------+
| reg_threshold     | OT_DOUBLE       | Threshold for the | casadi::Scpgen |
|                   |                 | regularization.   |                |
+-------------------+-----------------+-------------------+----------------+
| regularize        | OT_BOOL         | Automatic         | casadi::Scpgen |
|                   |                 | regularization of |                |
|                   |                 | Lagrange Hessian. |                |
+-------------------+-----------------+-------------------+----------------+
| tol_du            | OT_DOUBLE       | Stopping          | casadi::Scpgen |
|                   |                 | criterion for     |                |
|                   |                 | dual              |                |
|                   |                 | infeasability     |                |
+-------------------+-----------------+-------------------+----------------+
| tol_pr            | OT_DOUBLE       | Stopping          | casadi::Scpgen |
|                   |                 | criterion for     |                |
|                   |                 | primal            |                |
|                   |                 | infeasibility     |                |
+-------------------+-----------------+-------------------+----------------+
| tol_pr_step       | OT_DOUBLE       | Stopping          | casadi::Scpgen |
|                   |                 | criterion for the |                |
|                   |                 | step size         |                |
+-------------------+-----------------+-------------------+----------------+
| tol_reg           | OT_DOUBLE       | Stopping          | casadi::Scpgen |
|                   |                 | criterion for     |                |
|                   |                 | regularization    |                |
+-------------------+-----------------+-------------------+----------------+
| verbose_init      | OT_BOOL         | Print out timing  | casadi::Nlpsol |
|                   |                 | information about |                |
|                   |                 | the different     |                |
|                   |                 | stages of         |                |
|                   |                 | initialization    |                |
+-------------------+-----------------+-------------------+----------------+
| warn_initial_boun | OT_BOOL         | Warn if the       | casadi::Nlpsol |
| ds                |                 | initial guess     |                |
|                   |                 | does not satisfy  |                |
|                   |                 | LBX and UBX       |                |
+-------------------+-----------------+-------------------+----------------+

Diagrams
--------



C++ includes: scpgen.hpp ";

%feature("docstring") casadi::Scpgen::get_n_in "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::Scpgen::replace_res "[INTERNAL]  Replace
0-by-0 outputs.

";

%feature("docstring") casadi::Scpgen::codegen_sparsities "[INTERNAL]
Codegen sparsities.

";

%feature("docstring") casadi::Scpgen::~Scpgen "[INTERNAL] ";

%feature("docstring") casadi::Scpgen::getConic "[INTERNAL]  Access qpsol.

";

%feature("docstring") casadi::Scpgen::getJacSparsityGen "[INTERNAL]  Get
the sparsity pattern, forward mode.

";

%feature("docstring") casadi::Scpgen::has_function "[INTERNAL] ";

%feature("docstring") casadi::Scpgen::printIteration "[INTERNAL] ";


// File: classcasadi_1_1SetNonzeros.xml


// File: classcasadi_1_1SetNonzerosSlice.xml


// File: classcasadi_1_1SetNonzerosSlice2.xml


// File: classcasadi_1_1SetNonzerosVector.xml


// File: classcasadi_1_1SharedObject.xml
%feature("docstring") casadi::SharedObject::class_name "

Get class name.

";

%feature("docstring") casadi::SharedObject::is_null "

Is a null pointer?

";

%feature("docstring") casadi::SharedObject::print_ptr "[INTERNAL]  Print
the pointer to the internal class

";

%feature("docstring") casadi::SharedObject::disp "

Print a description of the object.

";

%feature("docstring") casadi::SharedObject::get_str "

Get string representation.

";

%feature("docstring") casadi::SharedObject "

SharedObject implements a reference counting framework similar for efficient
and easily-maintained memory management.

To use the class, both the SharedObject class (the public class), and the
SharedObjectInternal class (the internal class) must be inherited from. It
can be done in two different files and together with memory management, this
approach provides a clear distinction of which methods of the class are to
be considered \"public\", i.e. methods for public use that can be considered
to remain over time with small changes, and the internal memory.

When interfacing a software, which typically includes including some header
file, this is best done only in the file where the internal class is
defined, to avoid polluting the global namespace and other side effects.

The default constructor always means creating a null pointer to an internal
class only. To allocate an internal class (this works only when the internal
class isn't abstract), use the constructor with arguments.

The copy constructor and the assignment operator perform shallow copies
only, to make a deep copy you must use the clone method explicitly. This
will give a shared pointer instance.

In an inheritance hierarchy, you can cast down automatically, e.g. (
SXFunction is a child class of Function): SXFunction derived(...); Function
base = derived;

To cast up, use the shared_cast template function, which works analogously
to dynamic_cast, static_cast, const_cast etc, e.g.: SXFunction derived(...);
Function base = derived; SXFunction derived_from_base =
shared_cast<SXFunction>(base);

A failed shared_cast will result in a null pointer (cf. dynamic_cast)

Joel Andersson

C++ includes: shared_object.hpp ";

%feature("docstring") casadi::SharedObject::__hash__ "

Returns a number that is unique for a given Node. If the Object does not
point to any node, \"0\" is returned.

";


// File: classcasadi_1_1ShellCompiler.xml
%feature("docstring") casadi::ShellCompiler::read_external "[INTERNAL]  Get
an external function declaration.

";

%feature("docstring") casadi::ShellCompiler::construct "[INTERNAL]
Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::ShellCompiler::to_text "[INTERNAL]  Get entry
as a text.

";

%feature("docstring") casadi::ShellCompiler::class_name "[INTERNAL]  Get
type name.

";

%feature("docstring") casadi::ShellCompiler::get_options "[INTERNAL]
Options.

";

%feature("docstring") casadi::ShellCompiler::~ShellCompiler "[INTERNAL]
Destructor.

";

%feature("docstring") casadi::ShellCompiler::get_function "[INTERNAL]  Get
a function pointer for numerical evaluation.

";

%feature("docstring") casadi::ShellCompiler::init "[INTERNAL]  Initialize.

";

%feature("docstring") casadi::ShellCompiler::get_meta "[INTERNAL]  Get
entry as a text.

";

%feature("docstring") casadi::ShellCompiler::has_function "[INTERNAL]  Get
a function pointer for numerical evaluation.

";

%feature("docstring") casadi::ShellCompiler::inlined "[INTERNAL] ";

%feature("docstring") casadi::ShellCompiler::read_meta "[INTERNAL]  Get
meta information.

";

%feature("docstring") casadi::ShellCompiler "

'shell' plugin for Importer

Joel Andersson  Interface to the JIT compiler SHELL

>List of available options

+----------------------+-----------------+---------------------------------+
|          Id          |      Type       |           Description           |
+======================+=================+=================================+
| cleanup              | OT_BOOL         | Cleanup temporary files when    |
|                      |                 | unloading. Default: true        |
+----------------------+-----------------+---------------------------------+
| compiler             | OT_STRING       | Compiler command                |
+----------------------+-----------------+---------------------------------+
| compiler_flags       | OT_STRINGVECTOR | Alias for 'compiler_flags'      |
+----------------------+-----------------+---------------------------------+
| compiler_output_flag | OT_STRING       | Compiler flag to denote object  |
|                      |                 | output. Default: '-o '          |
+----------------------+-----------------+---------------------------------+
| compiler_setup       | OT_STRING       | Compiler setup command.         |
|                      |                 | Intended to be fixed. The       |
|                      |                 | 'flag' option is the prefered   |
|                      |                 | way to set custom flags.        |
+----------------------+-----------------+---------------------------------+
| flags                | OT_STRINGVECTOR | Compile flags for the JIT       |
|                      |                 | compiler. Default: None         |
+----------------------+-----------------+---------------------------------+
| folder               | OT_STRING       | Folder to put temporary objects |
|                      |                 | in.                             |
+----------------------+-----------------+---------------------------------+
| linker               | OT_STRING       | Linker command                  |
+----------------------+-----------------+---------------------------------+
| linker_flags         | OT_STRINGVECTOR | Linker flags for the JIT        |
|                      |                 | compiler. Default: None         |
+----------------------+-----------------+---------------------------------+
| linker_output_flag   | OT_STRING       | Linker flag to denote shared    |
|                      |                 | library output. Default: '-o '  |
+----------------------+-----------------+---------------------------------+
| linker_setup         | OT_STRING       | Linker setup command. Intended  |
|                      |                 | to be fixed. The 'flag' option  |
|                      |                 | is the prefered way to set      |
|                      |                 | custom flags.                   |
+----------------------+-----------------+---------------------------------+

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| cleanup          | OT_BOOL         | Cleanup          | casadi::ShellCom |
|                  |                 | temporary files  | piler            |
|                  |                 | when unloading.  |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Compiler command | casadi::ShellCom |
|                  |                 |                  | piler            |
+------------------+-----------------+------------------+------------------+
| compiler_flags   | OT_STRINGVECTOR | Alias for        | casadi::ShellCom |
|                  |                 | 'compiler_flags' | piler            |
+------------------+-----------------+------------------+------------------+
| compiler_output_ | OT_STRING       | Compiler flag to | casadi::ShellCom |
| flag             |                 | denote object    | piler            |
|                  |                 | output. Default: |                  |
|                  |                 | '-o '            |                  |
+------------------+-----------------+------------------+------------------+
| compiler_setup   | OT_STRING       | Compiler setup   | casadi::ShellCom |
|                  |                 | command.         | piler            |
|                  |                 | Intended to be   |                  |
|                  |                 | fixed. The       |                  |
|                  |                 | 'flag' option is |                  |
|                  |                 | the prefered way |                  |
|                  |                 | to set custom    |                  |
|                  |                 | flags.           |                  |
+------------------+-----------------+------------------+------------------+
| flags            | OT_STRINGVECTOR | Compile flags    | casadi::ShellCom |
|                  |                 | for the JIT      | piler            |
|                  |                 | compiler.        |                  |
|                  |                 | Default: None    |                  |
+------------------+-----------------+------------------+------------------+
| folder           | OT_STRING       | Folder to put    | casadi::ShellCom |
|                  |                 | temporary        | piler            |
|                  |                 | objects in.      |                  |
+------------------+-----------------+------------------+------------------+
| linker           | OT_STRING       | Linker command   | casadi::ShellCom |
|                  |                 |                  | piler            |
+------------------+-----------------+------------------+------------------+
| linker_flags     | OT_STRINGVECTOR | Linker flags for | casadi::ShellCom |
|                  |                 | the JIT          | piler            |
|                  |                 | compiler.        |                  |
|                  |                 | Default: None    |                  |
+------------------+-----------------+------------------+------------------+
| linker_output_fl | OT_STRING       | Linker flag to   | casadi::ShellCom |
| ag               |                 | denote shared    | piler            |
|                  |                 | library output.  |                  |
|                  |                 | Default: '-o '   |                  |
+------------------+-----------------+------------------+------------------+
| linker_setup     | OT_STRING       | Linker setup     | casadi::ShellCom |
|                  |                 | command.         | piler            |
|                  |                 | Intended to be   |                  |
|                  |                 | fixed. The       |                  |
|                  |                 | 'flag' option is |                  |
|                  |                 | the prefered way |                  |
|                  |                 | to set custom    |                  |
|                  |                 | flags.           |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Importer |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: shell_compiler.hpp ";

%feature("docstring") casadi::ShellCompiler::disp "[INTERNAL]  Print.

";

%feature("docstring") casadi::ShellCompiler::body "[INTERNAL]  Get the
function body, if inlined.

";

%feature("docstring") casadi::ShellCompiler::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::ShellCompiler::can_have_meta "[INTERNAL]  Can
meta information be read?

";

%feature("docstring") casadi::ShellCompiler::has_meta "[INTERNAL]  Does an
entry exist?

";

%feature("docstring") casadi::ShellCompiler::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::ShellCompiler::plugin_name "[INTERNAL]  Get
name of plugin.

";

%feature("docstring") casadi::ShellCompiler::ShellCompiler "[INTERNAL]
Constructor.

";


// File: classcasadi_1_1Slice.xml
%feature("docstring") casadi::Slice::is_scalar "

Is the slice a scalar.

";

%feature("docstring") casadi::Slice::disp "

Print a description of the object.

";

%feature("docstring") casadi::Slice::scalar "

Get scalar (if is_scalar)

";

%feature("docstring") casadi::Slice::type_name "

Get name of the class.

";

%feature("docstring") casadi::Slice "

Class representing a Slice.

Note that Python or Octave do not need to use this class. They can just use
slicing utility from the host language ( M[0:6] in Python, M(1:7) )

C++ includes: slice.hpp ";

%feature("docstring") casadi::Slice::info "

Obtain information

";

%feature("docstring") casadi::Slice::all "

>  std::vector<int> casadi::Slice::all(int len, bool ind1=false) const 
------------------------------------------------------------------------

Get a vector of indices.

>  std::vector<int> casadi::Slice::all(const Slice &outer, int len) const 
------------------------------------------------------------------------

Get a vector of indices (nested slice)

";

%feature("docstring") casadi::Slice::Slice "

>  casadi::Slice::Slice()
------------------------------------------------------------------------

Default constructor - all elements.

>  casadi::Slice::Slice(int i, bool ind1=false)
------------------------------------------------------------------------

A single element (explicit to avoid ambiguity with IM overload.

>  casadi::Slice::Slice(int start, int stop, int step=1)
------------------------------------------------------------------------

A slice.

";

%feature("docstring") casadi::Slice::get_str "

Get string representation.

";


// File: classcasadi_1_1SlicotDple.xml
%feature("docstring") casadi::SlicotDple::get_name_out "[INTERNAL]  Names
of function input and outputs.

";

%feature("docstring") casadi::SlicotDple::export_code "[INTERNAL]  Export
function in a specific language.

";

%feature("docstring") casadi::SlicotDple::init "[INTERNAL]  Initialize.

";

%feature("docstring") casadi::SlicotDple::size2_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::SlicotDple::get_min_in "[INTERNAL]  Get
smallest input value.

";

%feature("docstring") casadi::SlicotDple::generate_lifted "[INTERNAL]
Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::SlicotDple::adjViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::SlicotDple::eval_dm "[INTERNAL]  Evaluate
with DM matrices.

";

%feature("docstring") casadi::SlicotDple::replace_res "[INTERNAL]  Replace
0-by-0 outputs.

";

%feature("docstring") casadi::SlicotDple::nnz_in "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::SlicotDple::size2_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::SlicotDple::mx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::SlicotDple::getAtomicInput "

[DEPRECATED] Renamed instruction_index

";

%feature("docstring") casadi::SlicotDple::get_partition "[INTERNAL]  Get
the unidirectional or bidirectional partition.

";

%feature("docstring") casadi::SlicotDple::replace_fseed "[INTERNAL]
Replace 0-by-0 forward seeds.

";

%feature("docstring") casadi::SlicotDple::codegen "[INTERNAL]  Generate
code the function.

";

%feature("docstring") casadi::SlicotDple::call_gen "[INTERNAL]   Call a
function, overloaded.

";

%feature("docstring") casadi::SlicotDple::sp_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode, sparsity propagation.

";

%feature("docstring") casadi::SlicotDple::plugin_name "[INTERNAL] ";

%feature("docstring") casadi::SlicotDple::print_dimensions "[INTERNAL]
Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::SlicotDple::get_forward "[INTERNAL]  Generate
a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::SlicotDple::eval_mx "[INTERNAL]  Evaluate
with symbolic matrices.

";

%feature("docstring") casadi::SlicotDple::instruction_output "[INTERNAL]
Get the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::SlicotDple::fwd_seed "[INTERNAL]  Symbolic
expressions for the forward seeds.

";

%feature("docstring") casadi::SlicotDple::get_n_in "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::SlicotDple::get_jacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::SlicotDple::mx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::SlicotDple::codegen_incref "[INTERNAL]
Codegen incref for dependencies.

";

%feature("docstring") casadi::SlicotDple::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::SlicotDple::index_out "[INTERNAL]  Get output
scheme index by name.

";

%feature("docstring") casadi::SlicotDple::oracle "[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::SlicotDple::print_option "[INTERNAL]  Print
all information there is to know about a certain option.

";

%feature("docstring") casadi::SlicotDple::has_jacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::SlicotDple::mapsum_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::SlicotDple::eval "[INTERNAL]  Evaluate
numerically.

";

%feature("docstring") casadi::SlicotDple::get_n_out "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::SlicotDple::size_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::SlicotDple::which_depends "[INTERNAL]  Which
variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::SlicotDple::ad_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::SlicotDple::SlicotDple "

>  casadi::SlicotDple::SlicotDple()
------------------------------------------------------------------------
[INTERNAL] 
Constructor.

>  casadi::SlicotDple::SlicotDple(const std::string &name, const SpDict &st)
------------------------------------------------------------------------
[INTERNAL] 
Constructor.

Parameters:
-----------

st:

Problem structure.

>  casadi::SlicotDple::SlicotDple(const SpDict &st)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::SlicotDple::setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";

%feature("docstring") casadi::SlicotDple::construct "[INTERNAL]  Construct
Prepares the function for evaluation.

";

%feature("docstring") casadi::SlicotDple::memory "[INTERNAL]  Memory
objects.

";

%feature("docstring") casadi::SlicotDple::sz_arg "[INTERNAL]  Get required
length of arg field.

";

%feature("docstring") casadi::SlicotDple::sz_w "[INTERNAL]  Get required
length of w field.

";

%feature("docstring") casadi::SlicotDple "

'slicot' plugin for Dple

An efficient solver for Discrete Periodic Lyapunov Equations using SLICOT

An efficient solver for Discrete Periodic Lyapunov Equations using SLICOT

Uses Periodic Schur Decomposition ('psd') and does not assume positive
definiteness. Based on Periodic Lyapunov equations: some applications and
new algorithms. Int. J. Control, vol. 67, pp. 69-87, 1997.

Overview of the method: J. Gillis Practical Methods for Approximate Robust
Periodic Optimal Control ofNonlinear Mechanical Systems, PhD Thesis,
KULeuven, 2015

>List of available options

+-----------------------+-----------+--------------------------------------+
|          Id           |   Type    |             Description              |
+=======================+===========+======================================+
| linear_solver         | OT_STRING | User-defined linear solver class.    |
|                       |           | Needed for sensitivities.            |
+-----------------------+-----------+--------------------------------------+
| linear_solver_options | OT_DICT   | Options to be passed to the linear   |
|                       |           | solver.                              |
+-----------------------+-----------+--------------------------------------+
| psd_num_zero          | OT_DOUBLE | Numerical zero used in Periodic      |
|                       |           | Schur decomposition with slicot.This |
|                       |           | option is needed when your systems   |
|                       |           | has Floquet multiplierszero or close |
|                       |           | to zero                              |
+-----------------------+-----------+--------------------------------------+

Joris Gillis

>List of available options

+--------------------+-----------+--------------------+--------------------+
|         Id         |   Type    |    Description     |      Used in       |
+====================+===========+====================+====================+
| const_dim          | OT_BOOL   | Assume constant    | casadi::Dple       |
|                    |           | dimension of P     |                    |
+--------------------+-----------+--------------------+--------------------+
| eps_unstable       | OT_DOUBLE | A margin for       | casadi::Dple       |
|                    |           | unstability        |                    |
|                    |           | detection          |                    |
+--------------------+-----------+--------------------+--------------------+
| error_unstable     | OT_BOOL   | Throw an exception | casadi::Dple       |
|                    |           | when it is         |                    |
|                    |           | detected that      |                    |
|                    |           | Product(A_i,       |                    |
|                    |           | i=N..1)has         |                    |
|                    |           | eigenvalues        |                    |
|                    |           | greater than       |                    |
|                    |           | 1-eps_unstable     |                    |
+--------------------+-----------+--------------------+--------------------+
| linear_solver      | OT_STRING | User-defined       | casadi::SlicotDple |
|                    |           | linear solver      |                    |
|                    |           | class. Needed for  |                    |
|                    |           | sensitivities.     |                    |
+--------------------+-----------+--------------------+--------------------+
| linear_solver_opti | OT_DICT   | Options to be      | casadi::SlicotDple |
| ons                |           | passed to the      |                    |
|                    |           | linear solver.     |                    |
+--------------------+-----------+--------------------+--------------------+
| pos_def            | OT_BOOL   | Assume P positive  | casadi::Dple       |
|                    |           | definite           |                    |
+--------------------+-----------+--------------------+--------------------+
| psd_num_zero       | OT_DOUBLE | Numerical zero     | casadi::SlicotDple |
|                    |           | used in Periodic   |                    |
|                    |           | Schur              |                    |
|                    |           | decomposition with |                    |
|                    |           | slicot.This option |                    |
|                    |           | is needed when     |                    |
|                    |           | your systems has   |                    |
|                    |           | Floquet            |                    |
|                    |           | multiplierszero or |                    |
|                    |           | close to zero      |                    |
+--------------------+-----------+--------------------+--------------------+

Diagrams
--------



C++ includes: slicot_dple.hpp ";

%feature("docstring") casadi::SlicotDple::sx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::SlicotDple::get_free "[INTERNAL]  Print free
variables.

";

%feature("docstring") casadi::SlicotDple::symbolic_output "[INTERNAL]  Get
a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::SlicotDple::get_stats "[INTERNAL]  Get all
statistics.

";

%feature("docstring") casadi::SlicotDple::getJacSparsityHierarchical "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::SlicotDple::size1_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::SlicotDple::wrap "[INTERNAL]  Wrap in an
Function instance consisting of only one MX call.

";

%feature("docstring") casadi::SlicotDple::has_derivative "[INTERNAL]  Can
derivatives be calculated in any way?

";

%feature("docstring") casadi::SlicotDple::get_max_in "[INTERNAL]  Get
largest input value.

";

%feature("docstring") casadi::SlicotDple::init_mem "[INTERNAL]  Initalize
memory block.

";

%feature("docstring") casadi::SlicotDple::signature "[INTERNAL]  Code
generate the function.

";

%feature("docstring") casadi::SlicotDple::matching_arg "[INTERNAL]  Check
if input arguments that needs to be replaced.

";

%feature("docstring") casadi::SlicotDple::definition "[INTERNAL]  Get
function signature: name:(inputs)->(outputs)

";

%feature("docstring") casadi::SlicotDple::checkout "[INTERNAL]  Checkout a
memory object.

";

%feature("docstring") casadi::SlicotDple::n_instructions "[INTERNAL]  Get
the number of atomic operations.

";

%feature("docstring") casadi::SlicotDple::alloc_res "[INTERNAL]  Ensure
required length of res field.

";

%feature("docstring") casadi::SlicotDple::get_jacobian_sparsity "[INTERNAL]
Get Jacobian sparsity.

";

%feature("docstring") casadi::SlicotDple::sz_work "[INTERNAL]  Get number
of temporary variables needed.

";

%feature("docstring") casadi::SlicotDple::call "[INTERNAL]   Call a
function, templated.

";

%feature("docstring") casadi::SlicotDple::get_reltol "[INTERNAL]  Get
relative tolerance.

";

%feature("docstring") casadi::SlicotDple::set_temp "[INTERNAL]  Set the
(temporary) work vectors.

";

%feature("docstring") casadi::SlicotDple::codegen_body "[INTERNAL]
Generate code for the function body.

";

%feature("docstring") casadi::SlicotDple::eval_sx "[INTERNAL]  Evaluate
with symbolic scalars.

";

%feature("docstring") casadi::SlicotDple::alloc "[INTERNAL]  Ensure work
vectors long enough to evaluate function.

";

%feature("docstring") casadi::SlicotDple::n_nodes "[INTERNAL]  Number of
nodes in the algorithm.

";

%feature("docstring") casadi::SlicotDple::getJacSparsity "[INTERNAL]
Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::SlicotDple::replace_aseed "[INTERNAL]
Replace 0-by-0 reverse seeds.

";

%feature("docstring") casadi::SlicotDple::sz_iw "[INTERNAL]  Get required
length of iw field.

";

%feature("docstring") casadi::SlicotDple::instruction_input "[INTERNAL]
Get the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::SlicotDple::codegen_decref "[INTERNAL]
Codegen decref for dependencies.

";

%feature("docstring") casadi::SlicotDple::getAtomicOutput "

[DEPRECATED] Renamed instruction_output

";

%feature("docstring") casadi::SlicotDple::~SlicotDple "[INTERNAL]
Destructor.

";

%feature("docstring") casadi::SlicotDple::print "[INTERNAL]  C-style
formatted printing during evaluation.

";

%feature("docstring") casadi::SlicotDple::get_sparsity_in "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::SlicotDple::class_name "[INTERNAL]  Readable
name of the internal class.

";

%feature("docstring") casadi::SlicotDple::sz_res "[INTERNAL]  Get required
length of res field.

";

%feature("docstring") casadi::SlicotDple::call_reverse "[INTERNAL]  Reverse
mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::SlicotDple::replace_arg "[INTERNAL]  Replace
0-by-0 inputs.

";

%feature("docstring") casadi::SlicotDple::instruction_constant "[INTERNAL]
Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::SlicotDple::matching_res "[INTERNAL]  Check
if output arguments that needs to be replaced.

";

%feature("docstring") casadi::SlicotDple::get_name_in "[INTERNAL]  Names of
function input and outputs.

";

%feature("docstring") casadi::SlicotDple::jit_dependencies "[INTERNAL]  Jit
dependencies.

";

%feature("docstring") casadi::SlicotDple::size1_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::SlicotDple::codegen_name "[INTERNAL]  Get
name in codegen.

";

%feature("docstring") casadi::SlicotDple::get_options "[INTERNAL]  Options.

";

%feature("docstring") casadi::SlicotDple::nnz_out "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::SlicotDple::sparsity_jac "[INTERNAL]  Get, if
necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::SlicotDple::call_forward "[INTERNAL]  Forward
mode AD, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::SlicotDple::get_sparsity_out "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::SlicotDple::has_free "[INTERNAL]  Does the
function have free variables.

";

%feature("docstring") casadi::SlicotDple::size_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::SlicotDple::get_function "[INTERNAL] ";

%feature("docstring") casadi::SlicotDple::sx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::SlicotDple::has_codegen "[INTERNAL]  Is
codegen supported?

";

%feature("docstring") casadi::SlicotDple::codegen_sparsities "[INTERNAL]
Codegen sparsities.

";

%feature("docstring") casadi::SlicotDple::fwdViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::SlicotDple::sprint "[INTERNAL]  C-style
formatted printing to string.

";

%feature("docstring") casadi::SlicotDple::disp_more "[INTERNAL]  Print
more.

";

%feature("docstring") casadi::SlicotDple::free_mem "[INTERNAL]  Free memory
block.

";

%feature("docstring") casadi::SlicotDple::slice "[INTERNAL]  returns a new
function with a selection of inputs/outputs of the original

";

%feature("docstring") casadi::SlicotDple::getAdaptorSolverName "[INTERNAL]
Obtain solver name from Adaptor.

";

%feature("docstring") casadi::SlicotDple::instruction_id "[INTERNAL]  Get
an atomic operation operator index.

";

%feature("docstring") casadi::SlicotDple::clear_mem "[INTERNAL]  Clear all
memory (called from destructor)

";

%feature("docstring") casadi::SlicotDple::codegen_meta "[INTERNAL]
Generate meta-information allowing a user to evaluate a generated function.

";

%feature("docstring") casadi::SlicotDple::release "[INTERNAL]  Release a
memory object.

";

%feature("docstring") casadi::SlicotDple::reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::SlicotDple::alloc_iw "[INTERNAL]  Ensure
required length of iw field.

";

%feature("docstring") casadi::SlicotDple::get_default_in "[INTERNAL]  Get
default input value.

";

%feature("docstring") casadi::SlicotDple::numel_out "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::SlicotDple::eval_gen "

>  int casadi::FunctionInternal::eval_gen(const double **arg, double **res, int *iw, double *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate numerically.

>  int casadi::FunctionInternal::eval_gen(const SXElem **arg, SXElem **res, int *iw, SXElem *w, void *mem) const

>  int casadi::FunctionInternal::eval_gen(const bvec_t **arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

%feature("docstring") casadi::SlicotDple::generate_dependencies "[INTERNAL]
Export / Generate C code for the dependency function.

";

%feature("docstring") casadi::SlicotDple::codegen_declarations "[INTERNAL]
Generate code for the declarations of the C function.

";

%feature("docstring") casadi::SlicotDple::get_abstol "[INTERNAL]  Get
absolute tolerance.

";

%feature("docstring") casadi::SlicotDple::info "[INTERNAL]  Obtain
information about function

";

%feature("docstring") casadi::SlicotDple::finalize "[INTERNAL]  Finalize
the object creation.

";

%feature("docstring") casadi::SlicotDple::free_sx "[INTERNAL]  Get free
variables (SX)

";

%feature("docstring") casadi::SlicotDple::forward "[INTERNAL]  Return
function that calculates forward derivatives forward(nfwd) returns a cached
instance if available, and calls  Function get_forward(int nfwd) if no
cached version is available.

";

%feature("docstring") casadi::SlicotDple::symbolicAdjSeed "[INTERNAL]
Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::SlicotDple::is_a "[INTERNAL]  Check if the
function is of a particular type.

";

%feature("docstring") casadi::SlicotDple::sp_reverse "[INTERNAL]  Propagate
sparsity backwards.

";

%feature("docstring") casadi::SlicotDple::set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::SlicotDple::has_reverse "[INTERNAL]  Generate
a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::SlicotDple::getJacSparsityGen "[INTERNAL]
Get the sparsity pattern, forward mode.

";

%feature("docstring") casadi::SlicotDple::has_spfwd "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::SlicotDple::check_arg "[INTERNAL]  Check if
input arguments have correct length and dimensions.

";

%feature("docstring") casadi::SlicotDple::has_forward "[INTERNAL]  Generate
a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::SlicotDple::alloc_w "[INTERNAL]  Ensure
required length of w field.

";

%feature("docstring") casadi::SlicotDple::jacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::SlicotDple::all_scalar "[INTERNAL]  Are all
inputs and outputs scalar.

";

%feature("docstring") casadi::SlicotDple::free_mx "[INTERNAL]  Get free
variables ( MX)

";

%feature("docstring") casadi::SlicotDple::uses_output "[INTERNAL]  Do the
derivative functions need nondifferentiated outputs?

";

%feature("docstring") casadi::SlicotDple::getJacSparsityHierarchicalSymm "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::SlicotDple::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::SlicotDple::check_res "[INTERNAL]  Check if
output arguments have correct length and dimensions.

";

%feature("docstring") casadi::SlicotDple::alloc_mem "[INTERNAL]  Create
memory block.

";

%feature("docstring") casadi::SlicotDple::sp_forward "[INTERNAL]  Propagate
sparsity forward.

";

%feature("docstring") casadi::SlicotDple::print_options "[INTERNAL]  Print
list of options.

";

%feature("docstring") casadi::SlicotDple::self "[INTERNAL]  Get a public
class instance.

";

%feature("docstring") casadi::SlicotDple::numel_in "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::SlicotDple::disp "[INTERNAL]  Display object.

";

%feature("docstring") casadi::SlicotDple::instruction_MX "[INTERNAL]  get
MX expression associated with instruction

";

%feature("docstring") casadi::SlicotDple::has_sprev "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::SlicotDple::factory "[INTERNAL] ";

%feature("docstring") casadi::SlicotDple::index_in "[INTERNAL]  Get input
scheme index by name.

";

%feature("docstring") casadi::SlicotDple::has_function "[INTERNAL] ";

%feature("docstring") casadi::SlicotDple::get_reverse "[INTERNAL]  Generate
a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::SlicotDple::alloc_arg "[INTERNAL]  Ensure
required length of arg field.

";


// File: classcasadi_1_1SlicotExpm.xml
%feature("docstring") casadi::SlicotExpm::plugin_name "[INTERNAL] ";

%feature("docstring") casadi::SlicotExpm::getAtomicInput "

[DEPRECATED] Renamed instruction_index

";

%feature("docstring") casadi::SlicotExpm::get_abstol "[INTERNAL]  Get
absolute tolerance.

";

%feature("docstring") casadi::SlicotExpm::instruction_constant "[INTERNAL]
Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::SlicotExpm::get_jacobian_sparsity "[INTERNAL]
Get Jacobian sparsity.

";

%feature("docstring") casadi::SlicotExpm::memory "[INTERNAL]  Memory
objects.

";

%feature("docstring") casadi::SlicotExpm::sprint "[INTERNAL]  C-style
formatted printing to string.

";

%feature("docstring") casadi::SlicotExpm::fwd_seed "[INTERNAL]  Symbolic
expressions for the forward seeds.

";

%feature("docstring") casadi::SlicotExpm::adjViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::SlicotExpm::getAdaptorSolverName "[INTERNAL]
Obtain solver name from Adaptor.

";

%feature("docstring") casadi::SlicotExpm::codegen_sparsities "[INTERNAL]
Codegen sparsities.

";

%feature("docstring") casadi::SlicotExpm::checkout "[INTERNAL]  Checkout a
memory object.

";

%feature("docstring") casadi::SlicotExpm::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::SlicotExpm::numel_out "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::SlicotExpm::oracle "[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::SlicotExpm::get_n_out "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::SlicotExpm::print "[INTERNAL]  C-style
formatted printing during evaluation.

";

%feature("docstring") casadi::SlicotExpm::codegen_incref "[INTERNAL]
Codegen incref for dependencies.

";

%feature("docstring") casadi::SlicotExpm::sp_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode, sparsity propagation.

";

%feature("docstring") casadi::SlicotExpm::print_dimensions "[INTERNAL]
Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::SlicotExpm::factory "[INTERNAL] ";

%feature("docstring") casadi::SlicotExpm::codegen_name "[INTERNAL]  Get
name in codegen.

";

%feature("docstring") casadi::SlicotExpm::codegen_body "[INTERNAL]
Generate code for the function body.

";

%feature("docstring") casadi::SlicotExpm::get_max_in "[INTERNAL]  Get
largest input value.

";

%feature("docstring") casadi::SlicotExpm::SlicotExpm "

>  casadi::SlicotExpm::SlicotExpm()
------------------------------------------------------------------------
[INTERNAL] 
Constructor.

>  casadi::SlicotExpm::SlicotExpm(const std::string &name, const Sparsity &A)
------------------------------------------------------------------------
[INTERNAL] 
Constructor.

Parameters:
-----------

st:

Problem structure.

";

%feature("docstring") casadi::SlicotExpm::check_arg "[INTERNAL]  Check if
input arguments have correct length and dimensions.

";

%feature("docstring") casadi::SlicotExpm::get_reverse "[INTERNAL]  Generate
a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::SlicotExpm::sz_arg "[INTERNAL]  Get required
length of arg field.

";

%feature("docstring") casadi::SlicotExpm::disp_more "[INTERNAL]  Print
more.

";

%feature("docstring") casadi::SlicotExpm::replace_res "[INTERNAL]  Replace
0-by-0 outputs.

";

%feature("docstring") casadi::SlicotExpm::sp_reverse "[INTERNAL]  Propagate
sparsity backwards.

";

%feature("docstring") casadi::SlicotExpm::get_options "[INTERNAL]  Options.

";

%feature("docstring") casadi::SlicotExpm::instruction_id "[INTERNAL]  Get
an atomic operation operator index.

";

%feature("docstring") casadi::SlicotExpm::matching_arg "[INTERNAL]  Check
if input arguments that needs to be replaced.

";

%feature("docstring") casadi::SlicotExpm::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::SlicotExpm::call_gen "[INTERNAL]   Call a
function, overloaded.

";

%feature("docstring") casadi::SlicotExpm::free_sx "[INTERNAL]  Get free
variables (SX)

";

%feature("docstring") casadi::SlicotExpm::export_code "[INTERNAL]  Export
function in a specific language.

";

%feature("docstring") casadi::SlicotExpm::call_forward "[INTERNAL]  Forward
mode AD, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::SlicotExpm::get_jacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::SlicotExpm::symbolic_output "[INTERNAL]  Get
a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::SlicotExpm::nnz_out "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::SlicotExpm::alloc_res "[INTERNAL]  Ensure
required length of res field.

";

%feature("docstring") casadi::SlicotExpm::getJacSparsity "[INTERNAL]
Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::SlicotExpm::finalize "[INTERNAL]  Finalize
the object creation.

";

%feature("docstring") casadi::SlicotExpm::sp_forward "[INTERNAL]  Propagate
sparsity forward.

";

%feature("docstring") casadi::SlicotExpm::instruction_input "[INTERNAL]
Get the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::SlicotExpm "[INTERNAL]  'slicot' plugin for
Expm

An efficient solver for Discrete Periodic Lyapunov Equations using SLICOT

Joris Gillis

C++ includes: slicot_expm.hpp ";

%feature("docstring") casadi::SlicotExpm::size1_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::SlicotExpm::codegen_decref "[INTERNAL]
Codegen decref for dependencies.

";

%feature("docstring") casadi::SlicotExpm::get_free "[INTERNAL]  Print free
variables.

";

%feature("docstring") casadi::SlicotExpm::class_name "[INTERNAL]  Readable
name of the internal class.

";

%feature("docstring") casadi::SlicotExpm::sz_res "[INTERNAL]  Get required
length of res field.

";

%feature("docstring") casadi::SlicotExpm::init_mem "[INTERNAL]  Initalize
memory block.

";

%feature("docstring") casadi::SlicotExpm::n_nodes "[INTERNAL]  Number of
nodes in the algorithm.

";

%feature("docstring") casadi::SlicotExpm::info "[INTERNAL]  Obtain
information about function

";

%feature("docstring") casadi::SlicotExpm::uses_output "[INTERNAL]  Do the
derivative functions need nondifferentiated outputs?

";

%feature("docstring") casadi::SlicotExpm::init "[INTERNAL]  Initialize.

";

%feature("docstring") casadi::SlicotExpm::has_jacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::SlicotExpm::get_sparsity_out "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::SlicotExpm::replace_arg "[INTERNAL]  Replace
0-by-0 inputs.

";

%feature("docstring") casadi::SlicotExpm::eval_gen "

>  int casadi::FunctionInternal::eval_gen(const double **arg, double **res, int *iw, double *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate numerically.

>  int casadi::FunctionInternal::eval_gen(const SXElem **arg, SXElem **res, int *iw, SXElem *w, void *mem) const

>  int casadi::FunctionInternal::eval_gen(const bvec_t **arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

%feature("docstring") casadi::SlicotExpm::has_codegen "[INTERNAL]  Is
codegen supported?

";

%feature("docstring") casadi::SlicotExpm::forward "[INTERNAL]  Return
function that calculates forward derivatives forward(nfwd) returns a cached
instance if available, and calls  Function get_forward(int nfwd) if no
cached version is available.

";

%feature("docstring") casadi::SlicotExpm::sz_w "[INTERNAL]  Get required
length of w field.

";

%feature("docstring") casadi::SlicotExpm::getJacSparsityHierarchical "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::SlicotExpm::~SlicotExpm "[INTERNAL]
Destructor.

";

%feature("docstring") casadi::SlicotExpm::wrap "[INTERNAL]  Wrap in an
Function instance consisting of only one MX call.

";

%feature("docstring") casadi::SlicotExpm::symbolicAdjSeed "[INTERNAL]
Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::SlicotExpm::fwdViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::SlicotExpm::setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";

%feature("docstring") casadi::SlicotExpm::size_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::SlicotExpm::definition "[INTERNAL]  Get
function signature: name:(inputs)->(outputs)

";

%feature("docstring") casadi::SlicotExpm::generate_dependencies "[INTERNAL]
Export / Generate C code for the dependency function.

";

%feature("docstring") casadi::SlicotExpm::get_name_out "[INTERNAL]  Names
of function input and outputs.

";

%feature("docstring") casadi::SlicotExpm::get_stats "[INTERNAL]  Get all
statistics.

";

%feature("docstring") casadi::SlicotExpm::instruction_output "[INTERNAL]
Get the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::SlicotExpm::alloc "[INTERNAL]  Ensure work
vectors long enough to evaluate function.

";

%feature("docstring") casadi::SlicotExpm::check_res "[INTERNAL]  Check if
output arguments have correct length and dimensions.

";

%feature("docstring") casadi::SlicotExpm::numel_in "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::SlicotExpm::getJacSparsityHierarchicalSymm "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::SlicotExpm::size_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::SlicotExpm::alloc_w "[INTERNAL]  Ensure
required length of w field.

";

%feature("docstring") casadi::SlicotExpm::get_n_in "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::SlicotExpm::has_forward "[INTERNAL]  Generate
a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::SlicotExpm::release "[INTERNAL]  Release a
memory object.

";

%feature("docstring") casadi::SlicotExpm::eval_mx "[INTERNAL]  Evaluate
with symbolic matrices.

";

%feature("docstring") casadi::SlicotExpm::self "[INTERNAL]  Get a public
class instance.

";

%feature("docstring") casadi::SlicotExpm::set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::SlicotExpm::get_forward "[INTERNAL]  Generate
a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::SlicotExpm::get_reltol "[INTERNAL]  Get
relative tolerance.

";

%feature("docstring") casadi::SlicotExpm::mx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::SlicotExpm::call_reverse "[INTERNAL]  Reverse
mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::SlicotExpm::getJacSparsityGen "[INTERNAL]
Get the sparsity pattern, forward mode.

";

%feature("docstring") casadi::SlicotExpm::alloc_arg "[INTERNAL]  Ensure
required length of arg field.

";

%feature("docstring") casadi::SlicotExpm::ad_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::SlicotExpm::matching_res "[INTERNAL]  Check
if output arguments that needs to be replaced.

";

%feature("docstring") casadi::SlicotExpm::mx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::SlicotExpm::sx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::SlicotExpm::eval_dm "[INTERNAL]  Evaluate
with DM matrices.

";

%feature("docstring") casadi::SlicotExpm::has_spfwd "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::SlicotExpm::free_mx "[INTERNAL]  Get free
variables ( MX)

";

%feature("docstring") casadi::SlicotExpm::slice "[INTERNAL]  returns a new
function with a selection of inputs/outputs of the original

";

%feature("docstring") casadi::SlicotExpm::all_scalar "[INTERNAL]  Are all
inputs and outputs scalar.

";

%feature("docstring") casadi::SlicotExpm::get_default_in "[INTERNAL]  Get
default input value.

";

%feature("docstring") casadi::SlicotExpm::alloc_iw "[INTERNAL]  Ensure
required length of iw field.

";

%feature("docstring") casadi::SlicotExpm::getAtomicOutput "

[DEPRECATED] Renamed instruction_output

";

%feature("docstring") casadi::SlicotExpm::replace_fseed "[INTERNAL]
Replace 0-by-0 forward seeds.

";

%feature("docstring") casadi::SlicotExpm::generate_lifted "[INTERNAL]
Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::SlicotExpm::replace_aseed "[INTERNAL]
Replace 0-by-0 reverse seeds.

";

%feature("docstring") casadi::SlicotExpm::mapsum_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::SlicotExpm::eval_sx "[INTERNAL]  Evaluate
with symbolic scalars.

";

%feature("docstring") casadi::SlicotExpm::sz_work "[INTERNAL]  Get number
of temporary variables needed.

";

%feature("docstring") casadi::SlicotExpm::has_sprev "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::SlicotExpm::is_a "[INTERNAL]  Check if the
function is of a particular type.

";

%feature("docstring") casadi::SlicotExpm::has_function "[INTERNAL] ";

%feature("docstring") casadi::SlicotExpm::index_in "[INTERNAL]  Get input
scheme index by name.

";

%feature("docstring") casadi::SlicotExpm::get_sparsity_in "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::SlicotExpm::free_mem "[INTERNAL]  Free memory
block.

";

%feature("docstring") casadi::SlicotExpm::jacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::SlicotExpm::alloc_mem "[INTERNAL]  Create
memory block.

";

%feature("docstring") casadi::SlicotExpm::get_min_in "[INTERNAL]  Get
smallest input value.

";

%feature("docstring") casadi::SlicotExpm::has_reverse "[INTERNAL]  Generate
a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::SlicotExpm::codegen_meta "[INTERNAL]
Generate meta-information allowing a user to evaluate a generated function.

";

%feature("docstring") casadi::SlicotExpm::index_out "[INTERNAL]  Get output
scheme index by name.

";

%feature("docstring") casadi::SlicotExpm::get_function "[INTERNAL] ";

%feature("docstring") casadi::SlicotExpm::size2_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::SlicotExpm::construct "[INTERNAL]  Construct
Prepares the function for evaluation.

";

%feature("docstring") casadi::SlicotExpm::has_derivative "[INTERNAL]  Can
derivatives be calculated in any way?

";

%feature("docstring") casadi::SlicotExpm::disp "[INTERNAL]  Display object.

";

%feature("docstring") casadi::SlicotExpm::size2_in "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::SlicotExpm::signature "[INTERNAL]  Code
generate the function.

";

%feature("docstring") casadi::SlicotExpm::sz_iw "[INTERNAL]  Get required
length of iw field.

";

%feature("docstring") casadi::SlicotExpm::print_option "[INTERNAL]  Print
all information there is to know about a certain option.

";

%feature("docstring") casadi::SlicotExpm::clear_mem "[INTERNAL]  Clear all
memory (called from destructor)

";

%feature("docstring") casadi::SlicotExpm::jit_dependencies "[INTERNAL]  Jit
dependencies.

";

%feature("docstring") casadi::SlicotExpm::size1_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::SlicotExpm::reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::SlicotExpm::instruction_MX "[INTERNAL]  get
MX expression associated with instruction

";

%feature("docstring") casadi::SlicotExpm::sparsity_jac "[INTERNAL]  Get, if
necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::SlicotExpm::has_free "[INTERNAL]  Does the
function have free variables.

";

%feature("docstring") casadi::SlicotExpm::get_partition "[INTERNAL]  Get
the unidirectional or bidirectional partition.

";

%feature("docstring") casadi::SlicotExpm::codegen "[INTERNAL]  Generate
code the function.

";

%feature("docstring") casadi::SlicotExpm::sx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::SlicotExpm::codegen_declarations "[INTERNAL]
Generate code for the declarations of the C function.

";

%feature("docstring") casadi::SlicotExpm::nnz_in "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::SlicotExpm::which_depends "[INTERNAL]  Which
variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::SlicotExpm::set_temp "[INTERNAL]  Set the
(temporary) work vectors.

";

%feature("docstring") casadi::SlicotExpm::print_options "[INTERNAL]  Print
list of options.

";

%feature("docstring") casadi::SlicotExpm::call "[INTERNAL]   Call a
function, templated.

";

%feature("docstring") casadi::SlicotExpm::get_name_in "[INTERNAL]  Names of
function input and outputs.

";

%feature("docstring") casadi::SlicotExpm::n_instructions "[INTERNAL]  Get
the number of atomic operations.

";

%feature("docstring") casadi::SlicotExpm::eval "[INTERNAL]  Evaluate
numerically.

";


// File: classcasadi_1_1Smoothing.xml
%feature("docstring") casadi::Smoothing "[INTERNAL]  Calculate derivative
using 3th order smoothing scheme Joel Andersson

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| abstol           | OT_DOUBLE       | Accuracy of      | casadi::Smoothin |
|                  |                 | function outputs | g                |
|                  |                 | [default: query  |                  |
|                  |                 | object]          |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| enable_fd        | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation by   |                  |
|                  |                 | finite           |                  |
|                  |                 | differencing.    |                  |
|                  |                 | [default:        |                  |
|                  |                 | false]]          |                  |
+------------------+-----------------+------------------+------------------+
| enable_forward   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using forward    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_jacobian  | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobians of all |                  |
|                  |                 | differentiable   |                  |
|                  |                 | outputs with     |                  |
|                  |                 | respect to all   |                  |
|                  |                 | differentiable   |                  |
|                  |                 | inputs - if      |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_reverse   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | transposed       |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using reverse    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| fd_method        | OT_STRING       | Method for       | casadi::Function |
|                  |                 | finite           | Internal         |
|                  |                 | differencing     |                  |
|                  |                 | [default         |                  |
|                  |                 | 'central']       |                  |
+------------------+-----------------+------------------+------------------+
| fd_options       | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | finite           |                  |
|                  |                 | difference       |                  |
|                  |                 | instance         |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| h_iter           | OT_INT          | Number of        | casadi::Smoothin |
|                  |                 | iterations to    | g                |
|                  |                 | improve on the   |                  |
|                  |                 | step-size        |                  |
|                  |                 | [default: 1 if   |                  |
|                  |                 | error estimate   |                  |
|                  |                 | available,       |                  |
|                  |                 | otherwise 0]     |                  |
+------------------+-----------------+------------------+------------------+
| h_max            | OT_DOUBLE       | Maximum step     | casadi::Smoothin |
|                  |                 | size [default 0] | g                |
+------------------+-----------------+------------------+------------------+
| h_min            | OT_DOUBLE       | Minimum step     | casadi::Smoothin |
|                  |                 | size [default    | g                |
|                  |                 | inf]             |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| reltol           | OT_DOUBLE       | Accuracy of      | casadi::Smoothin |
|                  |                 | function inputs  | g                |
|                  |                 | [default: query  |                  |
|                  |                 | object]          |                  |
+------------------+-----------------+------------------+------------------+
| second_order_ste | OT_DOUBLE       | Second order     | casadi::Smoothin |
| psize            |                 | perturbation     | g                |
|                  |                 | size [default:   |                  |
|                  |                 | 1e-3]            |                  |
+------------------+-----------------+------------------+------------------+
| smoothing        | OT_DOUBLE       | Smoothing        | casadi::Smoothin |
|                  |                 | regularization   | g                |
|                  |                 | [default:        |                  |
|                  |                 | machine          |                  |
|                  |                 | precision]       |                  |
+------------------+-----------------+------------------+------------------+
| u_aim            | OT_DOUBLE       | Target ratio of  | casadi::Smoothin |
|                  |                 | roundoff error   | g                |
|                  |                 | to truncation    |                  |
|                  |                 | error [default:  |                  |
|                  |                 | 100.]            |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: finite_differences.hpp ";

%feature("docstring") casadi::Smoothing::call_gen "[INTERNAL]   Call a
function, overloaded.

";

%feature("docstring") casadi::Smoothing::get_reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::Smoothing::replace_fseed "[INTERNAL]  Replace
0-by-0 forward seeds.

";

%feature("docstring") casadi::Smoothing::size1_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::Smoothing::has_err "[INTERNAL] ";

%feature("docstring") casadi::Smoothing::size2_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::Smoothing::calc_fd "[INTERNAL] ";

%feature("docstring") casadi::Smoothing::reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::Smoothing::fwd_seed "[INTERNAL]  Symbolic
expressions for the forward seeds.

";

%feature("docstring") casadi::Smoothing::free_sx "[INTERNAL]  Get free
variables (SX)

";

%feature("docstring") casadi::Smoothing::size1_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Smoothing::get_options "[INTERNAL]  Options.

";

%feature("docstring") casadi::Smoothing::get_n_out "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::Smoothing::get_default_in "[INTERNAL]  Get
default input value.

";

%feature("docstring") casadi::Smoothing::which_depends "[INTERNAL]  Which
variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::Smoothing::numel_in "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::Smoothing::is_a "[INTERNAL]  Check if the
function is of a particular type.

";

%feature("docstring") casadi::Smoothing::alloc_res "[INTERNAL]  Ensure
required length of res field.

";

%feature("docstring") casadi::Smoothing::forward "[INTERNAL]  Return
function that calculates forward derivatives forward(nfwd) returns a cached
instance if available, and calls  Function get_forward(int nfwd) if no
cached version is available.

";

%feature("docstring") casadi::Smoothing::has_spfwd "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Smoothing::get_max_in "[INTERNAL]  Get
largest input value.

";

%feature("docstring") casadi::Smoothing::sz_iw "[INTERNAL]  Get required
length of iw field.

";

%feature("docstring") casadi::Smoothing::alloc "[INTERNAL]  Ensure work
vectors long enough to evaluate function.

";

%feature("docstring") casadi::Smoothing::adjViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::Smoothing::codegen_incref "[INTERNAL]
Codegen incref for dependencies.

";

%feature("docstring") casadi::Smoothing::release "[INTERNAL]  Release a
memory object.

";

%feature("docstring") casadi::Smoothing::checkout "[INTERNAL]  Checkout a
memory object.

";

%feature("docstring") casadi::Smoothing::get_partition "[INTERNAL]  Get the
unidirectional or bidirectional partition.

";

%feature("docstring") casadi::Smoothing::sp_reverse "[INTERNAL]  Propagate
sparsity backwards.

";

%feature("docstring") casadi::Smoothing::has_free "[INTERNAL]  Does the
function have free variables.

";

%feature("docstring") casadi::Smoothing::symbolic_output "[INTERNAL]  Get a
vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::Smoothing::sprint "[INTERNAL]  C-style
formatted printing to string.

";

%feature("docstring") casadi::Smoothing::check_res "[INTERNAL]  Check if
output arguments have correct length and dimensions.

";

%feature("docstring") casadi::Smoothing::n_nodes "[INTERNAL]  Number of
nodes in the algorithm.

";

%feature("docstring") casadi::Smoothing::free_mx "[INTERNAL]  Get free
variables ( MX)

";

%feature("docstring") casadi::Smoothing::get_function "[INTERNAL] ";

%feature("docstring") casadi::Smoothing::sx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Smoothing::sparsity_jac "[INTERNAL]  Get, if
necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Smoothing::jit_dependencies "[INTERNAL]  Jit
dependencies.

";

%feature("docstring") casadi::Smoothing::self "[INTERNAL]  Get a public
class instance.

";

%feature("docstring") casadi::Smoothing::set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::Smoothing::size_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Smoothing::print_option "[INTERNAL]  Print
all information there is to know about a certain option.

";

%feature("docstring") casadi::Smoothing::getJacSparsityHierarchicalSymm "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::Smoothing::call_forward "[INTERNAL]  Forward
mode AD, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Smoothing::get_reltol "[INTERNAL]  Get
relative tolerance.

";

%feature("docstring") casadi::Smoothing::check_arg "[INTERNAL]  Check if
input arguments have correct length and dimensions.

";

%feature("docstring") casadi::Smoothing::eval_mx "[INTERNAL]  Evaluate with
symbolic matrices.

";

%feature("docstring") casadi::Smoothing::has_function "[INTERNAL] ";

%feature("docstring") casadi::Smoothing::size_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Smoothing::sz_work "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") casadi::Smoothing::instruction_constant "[INTERNAL]
Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::Smoothing::disp "[INTERNAL]  Display object.

";

%feature("docstring") casadi::Smoothing::has_jacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Smoothing::getAtomicInput "

[DEPRECATED] Renamed instruction_index

";

%feature("docstring") casadi::Smoothing::instruction_MX "[INTERNAL]  get MX
expression associated with instruction

";

%feature("docstring") casadi::Smoothing::alloc_mem "[INTERNAL]  Create
memory block.

";

%feature("docstring") casadi::Smoothing::init "[INTERNAL]  Initialize.

";

%feature("docstring") casadi::Smoothing::has_codegen "[INTERNAL]  Is
codegen supported?

";

%feature("docstring") casadi::Smoothing::index_out "[INTERNAL]  Get output
scheme index by name.

";

%feature("docstring") casadi::Smoothing::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::Smoothing::pert "[INTERNAL] ";

%feature("docstring") casadi::Smoothing::setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";

%feature("docstring") casadi::Smoothing::codegen_meta "[INTERNAL]  Generate
meta-information allowing a user to evaluate a generated function.

";

%feature("docstring") casadi::Smoothing::get_name_out "[INTERNAL]  Names of
function input and outputs.

";

%feature("docstring") casadi::Smoothing::init_mem "[INTERNAL]  Initalize
memory block.

";

%feature("docstring") casadi::Smoothing::index_in "[INTERNAL]  Get input
scheme index by name.

";

%feature("docstring") casadi::Smoothing::instruction_input "[INTERNAL]  Get
the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::Smoothing::jacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Smoothing::eval_dm "[INTERNAL]  Evaluate with
DM matrices.

";

%feature("docstring") casadi::Smoothing::signature "[INTERNAL]  Code
generate the function.

";

%feature("docstring") casadi::Smoothing::replace_aseed "[INTERNAL]  Replace
0-by-0 reverse seeds.

";

%feature("docstring") casadi::Smoothing::replace_res "[INTERNAL]  Replace
0-by-0 outputs.

";

%feature("docstring") casadi::Smoothing::alloc_iw "[INTERNAL]  Ensure
required length of iw field.

";

%feature("docstring") casadi::Smoothing::Smoothing "[INTERNAL] ";

%feature("docstring") casadi::Smoothing::has_derivative "[INTERNAL]  Can
derivatives be calculated in any way?

";

%feature("docstring") casadi::Smoothing::factory "[INTERNAL] ";

%feature("docstring") casadi::Smoothing::finalize "[INTERNAL]  Finalize the
object creation.

";

%feature("docstring") casadi::Smoothing::get_jacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Smoothing::disp_more "[INTERNAL]  Print more.

";

%feature("docstring") casadi::Smoothing::nnz_out "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::Smoothing::sz_arg "[INTERNAL]  Get required
length of arg field.

";

%feature("docstring") casadi::Smoothing::instruction_id "[INTERNAL]  Get an
atomic operation operator index.

";

%feature("docstring") casadi::Smoothing::getAtomicOutput "

[DEPRECATED] Renamed instruction_output

";

%feature("docstring") casadi::Smoothing::codegen_body "[INTERNAL]  Generate
code for the body of the C function.

";

%feature("docstring") casadi::Smoothing::size2_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Smoothing::free_mem "[INTERNAL]  Free memory
block.

";

%feature("docstring") casadi::Smoothing::nnz_in "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::Smoothing::class_name "[INTERNAL]  Get type
name.

";

%feature("docstring") casadi::Smoothing::print_dimensions "[INTERNAL]
Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::Smoothing::construct "[INTERNAL]  Construct
Prepares the function for evaluation.

";

%feature("docstring") casadi::Smoothing::getJacSparsity "[INTERNAL]
Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Smoothing::sz_res "[INTERNAL]  Get required
length of res field.

";

%feature("docstring") casadi::Smoothing::definition "[INTERNAL]  Get
function signature: name:(inputs)->(outputs)

";

%feature("docstring") casadi::Smoothing::n_instructions "[INTERNAL]  Get
the number of atomic operations.

";

%feature("docstring") casadi::Smoothing::replace_arg "[INTERNAL]  Replace
0-by-0 inputs.

";

%feature("docstring") casadi::Smoothing::generate_lifted "[INTERNAL]
Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::Smoothing::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::Smoothing::get_stats "[INTERNAL]  Get all
statistics.

";

%feature("docstring") casadi::Smoothing::mapsum_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::Smoothing::get_forward "[INTERNAL]  Second
order derivatives.

";

%feature("docstring") casadi::Smoothing::symbolicAdjSeed "[INTERNAL]
Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::Smoothing::print "[INTERNAL]  C-style
formatted printing during evaluation.

";

%feature("docstring") casadi::Smoothing::get_free "[INTERNAL]  Print free
variables.

";

%feature("docstring") casadi::Smoothing::call "[INTERNAL]   Call a
function, templated.

";

%feature("docstring") casadi::Smoothing::call_reverse "[INTERNAL]  Reverse
mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Smoothing::memory "[INTERNAL]  Memory
objects.

";

%feature("docstring") casadi::Smoothing::getJacSparsityHierarchical "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::Smoothing::eval_gen "

>  int casadi::FunctionInternal::eval_gen(const double **arg, double **res, int *iw, double *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate numerically.

>  int casadi::FunctionInternal::eval_gen(const SXElem **arg, SXElem **res, int *iw, SXElem *w, void *mem) const

>  int casadi::FunctionInternal::eval_gen(const bvec_t **arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

%feature("docstring") casadi::Smoothing::get_sparsity_out "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Smoothing::has_sprev "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Smoothing::get_sparsity_in "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Smoothing::set_temp "[INTERNAL]  Set the
(temporary) work vectors.

";

%feature("docstring") casadi::Smoothing::uses_output "[INTERNAL]  Is the
scheme using the (nondifferentiated) output?

";

%feature("docstring") casadi::Smoothing::ad_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::Smoothing::mx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Smoothing::codegen_declarations "[INTERNAL]
Generate code for the declarations of the C function.

";

%feature("docstring") casadi::Smoothing::eval_sx "[INTERNAL]  Evaluate with
symbolic scalars.

";

%feature("docstring") casadi::Smoothing::sp_forward "[INTERNAL]  Propagate
sparsity forward.

";

%feature("docstring") casadi::Smoothing::sx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Smoothing::matching_arg "[INTERNAL]  Check if
input arguments that needs to be replaced.

";

%feature("docstring") casadi::Smoothing::codegen "[INTERNAL]  Generate code
the function.

";

%feature("docstring") casadi::Smoothing::generate_dependencies "[INTERNAL]
Export / Generate C code for the dependency function.

";

%feature("docstring") casadi::Smoothing::print_options "[INTERNAL]  Print
list of options.

";

%feature("docstring") casadi::Smoothing::has_reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::Smoothing::fwdViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::Smoothing::get_n_in "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::Smoothing::info "[INTERNAL]  Obtain
information about function

";

%feature("docstring") casadi::Smoothing::wrap "[INTERNAL]  Wrap in an
Function instance consisting of only one MX call.

";

%feature("docstring") casadi::Smoothing::matching_res "[INTERNAL]  Check if
output arguments that needs to be replaced.

";

%feature("docstring") casadi::Smoothing::eval "[INTERNAL]  Evaluate
numerically.

";

%feature("docstring") casadi::Smoothing::clear_mem "[INTERNAL]  Clear all
memory (called from destructor)

";

%feature("docstring") casadi::Smoothing::all_scalar "[INTERNAL]  Are all
inputs and outputs scalar.

";

%feature("docstring") casadi::Smoothing::numel_out "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::Smoothing::n_pert "[INTERNAL] ";

%feature("docstring") casadi::Smoothing::export_code "[INTERNAL]  Export
function in a specific language.

";

%feature("docstring") casadi::Smoothing::mx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Smoothing::slice "[INTERNAL]  returns a new
function with a selection of inputs/outputs of the original

";

%feature("docstring") casadi::Smoothing::codegen_sparsities "[INTERNAL]
Codegen sparsities.

";

%feature("docstring") casadi::Smoothing::~Smoothing "[INTERNAL]
Destructor.

";

%feature("docstring") casadi::Smoothing::get_abstol "[INTERNAL]  Get
absolute tolerance.

";

%feature("docstring") casadi::Smoothing::has_forward "[INTERNAL]  Second
order derivatives.

";

%feature("docstring") casadi::Smoothing::calc_stepsize "[INTERNAL] ";

%feature("docstring") casadi::Smoothing::alloc_arg "[INTERNAL]  Ensure
required length of arg field.

";

%feature("docstring") casadi::Smoothing::get_name_in "[INTERNAL]  Names of
function input and outputs.

";

%feature("docstring") casadi::Smoothing::alloc_w "[INTERNAL]  Ensure
required length of w field.

";

%feature("docstring") casadi::Smoothing::codegen_name "[INTERNAL]  Get name
in codegen.

";

%feature("docstring") casadi::Smoothing::sz_w "[INTERNAL]  Get required
length of w field.

";

%feature("docstring") casadi::Smoothing::instruction_output "[INTERNAL]
Get the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::Smoothing::get_jacobian_sparsity "[INTERNAL]
Get Jacobian sparsity.

";

%feature("docstring") casadi::Smoothing::oracle "[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::Smoothing::sp_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode, sparsity propagation.

";

%feature("docstring") casadi::Smoothing::getJacSparsityGen "[INTERNAL]  Get
the sparsity pattern, forward mode.

";

%feature("docstring") casadi::Smoothing::getAdaptorSolverName "[INTERNAL]
Obtain solver name from Adaptor.

";

%feature("docstring") casadi::Smoothing::get_min_in "[INTERNAL]  Get
smallest input value.

";

%feature("docstring") casadi::Smoothing::codegen_decref "[INTERNAL]
Codegen decref for dependencies.

";


// File: classcasadi_1_1Solve.xml


// File: classcasadi_1_1SparseStorage.xml
%feature("docstring") casadi::SparseStorage::has_nz "[INTERNAL]  Returns
true if the matrix has a non-zero at location rr, cc.

";

%feature("docstring") casadi::SparseStorage::elem "[INTERNAL]  get a
reference to an element

";

%feature("docstring") casadi::SparseStorage::clear "[INTERNAL] ";

%feature("docstring") casadi::SparseStorage::reserve "[INTERNAL] ";

%feature("docstring") casadi::SparseStorage::resize "[INTERNAL] ";

%feature("docstring") casadi::SparseStorage "[INTERNAL] C++ includes:
sparse_storage.hpp ";

%feature("docstring") casadi::SparseStorage::sparsity "[INTERNAL]  Const
access the sparsity - reference to data member.

";

%feature("docstring") casadi::SparseStorage::SparseStorage "

>  casadi::SparseStorage< DataType >::SparseStorage(const Sparsity &sparsity, const DataType &val=DataType(0))
------------------------------------------------------------------------
[INTERNAL] 
Sparse matrix with a given sparsity

>  casadi::SparseStorage< DataType >::SparseStorage()
------------------------------------------------------------------------
[INTERNAL] 
constructors

empty 0-by-0 matrix constructor

>  casadi::SparseStorage< DataType >::SparseStorage(const SparseStorage< DataType > &m)
------------------------------------------------------------------------
[INTERNAL] 
Copy constructor.

";

%feature("docstring") casadi::SparseStorage::nonzeros "

>  std::vector< DataType > & casadi::SparseStorage< DataType >::nonzeros()
------------------------------------------------------------------------
[INTERNAL] 
Access the non-zero elements.

>  const std::vector< DataType > & casadi::SparseStorage< DataType >::nonzeros() const 
------------------------------------------------------------------------
[INTERNAL] 
Const access the non-zero elements.

";


// File: classcasadi_1_1Sparsity.xml


/*  Check if two sparsity patterns are identical  */

/*  Size and element counting  */ %feature("docstring")
casadi::Sparsity::enlargeRows "

Enlarge the matrix along the first dimension (i.e. insert rows)

";

%feature("docstring") casadi::Sparsity "

General sparsity class.

The storage format is a compressed column storage (CCS) format.  In this
format, the structural non-zero elements are stored in column-major order,
starting from the upper left corner of the matrix and ending in the lower
right corner.

In addition to the dimension ( size1(), size2()), (i.e. the number of rows
and the number of columns respectively), there are also two vectors of
integers:

\"colind\" [length size2()+1], which contains the index to the first non-
zero element on or after the corresponding column. All the non-zero elements
of a particular i are thus the elements with index el that fulfills:
colind[i] <= el < colind[i+1].

\"row\" [same length as the number of non-zero elements, nnz()] The rows for
each of the structural non-zeros.

Note that with this format, it is cheap to loop over all the non-zero
elements of a particular column, at constant time per element, but expensive
to jump to access a location (i, j).

If the matrix is dense, i.e. length(row) == size1()*size2(), the format
reduces to standard dense column major format, which allows access to an
arbitrary element in constant time.

Since the object is reference counted (it inherits from SharedObject),
several matrices are allowed to share the same sparsity pattern.

The implementations of some methods of this class has been taken from the
CSparse package and modified to use C++ standard library and CasADi data
structures.

See:   Matrix

Joel Andersson

C++ includes: sparsity.hpp ";

%feature("docstring") casadi::Sparsity::largest_first "

Order the columns by decreasing degree.

";

%feature("docstring") casadi::Sparsity::dim "

Get the dimension as a string.

";

%feature("docstring") casadi::Sparsity::is_reshape "

Check if the sparsity is a reshape of another.

";

%feature("docstring") casadi::Sparsity::add_nz "

Get the index of a non-zero element Add the element if it does not exist and
copy object if it's not unique.

";

%feature("docstring") casadi::Sparsity::is_scalar "

Is scalar?

";

%feature("docstring") casadi::Sparsity::rowsSequential "

Do the rows appear sequentially on each column.

Parameters:
-----------

strictly:  if true, then do not allow multiple entries

";

%feature("docstring") casadi::Sparsity::get_diag "

Get the diagonal of the matrix/create a diagonal matrix (mapping will
contain the nonzero mapping) When the input is square, the diagonal elements
are returned. If the input is vector-like, a diagonal matrix is constructed
with it.

";

%feature("docstring") casadi::Sparsity::btf "

Calculate the block triangular form (BTF) See Direct Methods for Sparse
Linear Systems by Davis (2006).

The function computes the Dulmage-Mendelsohn decomposition, which allows you
to reorder the rows and columns of a matrix to bring it into block
triangular form (BTF).

It will not consider the distance of off-diagonal elements to the diagonal:
there is no guarantee you will get a block-diagonal matrix if you supply a
randomly permuted block-diagonal matrix.

If your matrix is symmetrical, this method is of limited use; permutation
can make it non-symmetric.

See:   scc

";

%feature("docstring") casadi::Sparsity::is_triu "

Is upper triangular?

";

%feature("docstring") casadi::Sparsity::qr_sparse "

Symbolic QR factorization Returns the sparsity pattern of V (compact
representation of Q) and R as well as vectors needed for the numerical
factorization and solution.

";

%feature("docstring") casadi::Sparsity::is_vector "

Check if the pattern is a row or column vector.

";

%feature("docstring") casadi::Sparsity::hash "";

%feature("docstring") casadi::Sparsity::resize "

Resize.

";

%feature("docstring") casadi::Sparsity::disp "

Print a description of the object.

";

%feature("docstring") casadi::Sparsity::find "

Get the location of all non-zero elements as they would appear in a Dense
matrix A : DenseMatrix 4 x 3 B : SparseMatrix 4 x 3 , 5 structural non-
zeros.

k = A.find() A[k] will contain the elements of A that are non-zero in B

Inverse of nonzeros.

";

%feature("docstring") casadi::Sparsity::repr_el "

Describe the nonzero location k as a string.

";

%feature("docstring") casadi::Sparsity::bw_lower "

Lower half-bandwidth.

";

%feature("docstring") casadi::Sparsity::T "

Transpose the matrix.

";

%feature("docstring") casadi::Sparsity::nnz_diag "

Number of non-zeros on the diagonal, i.e. the number of elements (i, j) with
j==i.

";

%feature("docstring") casadi::Sparsity::Sparsity "

>  casadi::Sparsity::Sparsity(int dummy=0)
------------------------------------------------------------------------

Default constructor.

>  casadi::Sparsity::Sparsity(int nrow, int ncol)
------------------------------------------------------------------------

Pattern with all structural zeros.

>  casadi::Sparsity::Sparsity(int nrow, int ncol, const std::vector< int > &colind, const std::vector< int > &row)
------------------------------------------------------------------------

Construct from sparsity pattern vectors given in compressed column storage
format.

>  casadi::Sparsity::Sparsity(const std::pair< int, int > &rc)
------------------------------------------------------------------------

Create a sparse matrix with all structural zeros.

";

%feature("docstring") casadi::Sparsity::colind "

Get a reference to the colindex of column cc (see class description)

";

%feature("docstring") casadi::Sparsity::is_row "

Check if the pattern is a row vector (i.e. size1()==1)

";

%feature("docstring") casadi::Sparsity::numel "

The total number of elements, including structural zeros, i.e.
size2()*size1() Beware of overflow.

See:   nnz()

";

%feature("docstring") casadi::Sparsity::columns "

Get the number of columns, Octave-style syntax.

";

%feature("docstring") casadi::Sparsity::unite "

Union of two sparsity patterns.

";

%feature("docstring") casadi::Sparsity::is_transpose "

Check if the sparsity is the transpose of another.

";

%feature("docstring") casadi::Sparsity::get_triplet "

Get the sparsity in sparse triplet format.

";

%feature("docstring") casadi::Sparsity::is_square "

Is square?

";

%feature("docstring") casadi::Sparsity::appendColumns "

Append another sparsity patten horizontally.

";

%feature("docstring") casadi::Sparsity::ldl "

Symbolic LDL factorization Returns the sparsity pattern of L as well as the
elimination tree.

";

%feature("docstring") casadi::Sparsity::get_ccs "

Get the sparsity in compressed column storage (CCS) format.

";

%feature("docstring") casadi::Sparsity::removeDuplicates "

Remove duplicate entries.

The same indices will be removed from the mapping vector, which must have
the same length as the number of nonzeros

";

%feature("docstring") casadi::Sparsity::is_empty "

Check if the sparsity is empty.

A sparsity is considered empty if one of the dimensions is zero (or
optionally both dimensions)

";

%feature("docstring") casadi::Sparsity::export_code "

Export matrix in specific language.

lang: only 'matlab' supported for now

::

   * options:
   *   inline: Indicates if you want everything on a single line (default: False)
   *   name: Name of exported variable (default: 'sp')
   *   as_matrix: Matlab does not have a sparsity object. (default: false)
  *               With this option true, a numeric matrix will be constructed
   * 



";

%feature("docstring") casadi::Sparsity::get_str "

Get string representation.

";

%feature("docstring") casadi::Sparsity::makeDense "

Make a patten dense.

";

%feature("docstring") casadi::Sparsity::pattern_inverse "

Take the inverse of a sparsity pattern; flip zeros and non-zeros.

";

%feature("docstring") casadi::Sparsity::dense "

Create a dense rectangular sparsity pattern.

";

%feature("docstring") casadi::Sparsity::spy_matlab "

Generate a script for Matlab or Octave which visualizes the sparsity using
the spy command.

";

%feature("docstring") casadi::Sparsity::diag "

Create diagonal sparsity pattern.

";

%feature("docstring") casadi::Sparsity::print_ptr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::Sparsity::get_crs "

Get the sparsity in compressed row storage (CRS) format.

";

%feature("docstring") casadi::Sparsity::sub "

>  Sparsity casadi::Sparsity::sub(const std::vector< int > &rr, const std::vector< int > &cc, std::vector< int > &output_mapping, bool ind1=false) const 
------------------------------------------------------------------------

Get a submatrix.

Returns the sparsity of the submatrix, with a mapping such that submatrix[k]
= originalmatrix[mapping[k]]

>  Sparsity casadi::Sparsity::sub(const std::vector< int > &rr, const Sparsity &sp, std::vector< int > &output_mapping, bool ind1=false) const 
------------------------------------------------------------------------

Get a set of elements.

Returns the sparsity of the corresponding elements, with a mapping such that
submatrix[k] = originalmatrix[mapping[k]]

";

%feature("docstring") casadi::Sparsity::unit "

Create the sparsity pattern for a unit vector of length n and a nonzero on
position el.

";

%feature("docstring") casadi::Sparsity::symbfact "

Symbolic factorization analysis See Direct Methods for Sparse Linear Systems
by Davis (2006).

";

%feature("docstring") casadi::Sparsity::is_null "

Is a null pointer?

";

%feature("docstring") casadi::Sparsity::append "

Append another sparsity patten vertically (NOTE: only efficient if vector)

";

%feature("docstring") casadi::Sparsity::combine "

Combine two sparsity patterns Returns the new sparsity pattern as well as a
mapping with the same length as the number of non-zero elements The mapping
matrix contains the arguments for each nonzero, the first bit indicates if
the first argument is nonzero, the second bit indicates if the second
argument is nonzero (note that none of, one of or both of the arguments can
be nonzero)

";

%feature("docstring") casadi::Sparsity::nnz "

Get the number of (structural) non-zeros.

See:   numel()

";

%feature("docstring") casadi::Sparsity::intersect "

Intersection of two sparsity patterns Returns the new sparsity pattern as
well as a mapping with the same length as the number of non-zero elements
The value is 1 if the non-zero comes from the first (i.e. this) object, 2 if
it is from the second and 3 (i.e. 1 | 2) if from both.

";

%feature("docstring") casadi::Sparsity::row "

Get the row of a non-zero element.

";

%feature("docstring") casadi::Sparsity::is_column "

Check if the pattern is a column vector (i.e. size2()==1)

";

%feature("docstring") casadi::Sparsity::get_colind "

Get the column index for each column Together with the row-vector, one
obtains the sparsity pattern in the column compressed format.

";

%feature("docstring") casadi::Sparsity::get_row "

Get the row for each non-zero entry Together with the column-vector, this
vector gives the sparsity of the matrix in sparse triplet format, and
together with the colind vector, one obtains the sparsity in column
compressed format.

";

%feature("docstring") casadi::Sparsity::is_symmetric "

Is symmetric?

";

%feature("docstring") casadi::Sparsity::info "

Obtain information about sparsity

";

%feature("docstring") casadi::Sparsity::has_nz "

Returns true if the pattern has a non-zero at location rr, cc.

";

%feature("docstring") casadi::Sparsity::transpose "

Transpose the matrix and get the reordering of the non-zero entries.

Parameters:
-----------

mapping:  the non-zeros of the original matrix for each non-zero of the new
matrix

";

%feature("docstring") casadi::Sparsity::pmult "

Permute rows and/or columns Multiply the sparsity with a permutation matrix
from the left and/or from the right P * A * trans(P), A * trans(P) or A *
trans(P) with P defined by an index vector containing the row for each col.
As an alternative, P can be transposed (inverted).

";

%feature("docstring") casadi::Sparsity::is_diag "

Is diagonal?

";

%feature("docstring") casadi::Sparsity::class_name "

Get class name.

";

%feature("docstring") casadi::Sparsity::is_equal "";

%feature("docstring") casadi::Sparsity::nnz_lower "

Number of non-zeros in the lower triangular half, i.e. the number of
elements (i, j) with j<=i.

";

%feature("docstring") casadi::Sparsity::get_lower "

Get nonzeros in lower triangular part.

";

%feature("docstring") casadi::Sparsity::is_singular "

Check whether the sparsity-pattern indicates structural singularity.

";

%feature("docstring") casadi::Sparsity::print_compact "

[DEPRECATED] Alias for disp

";

%feature("docstring") casadi::Sparsity::is_dense "

Is dense?

";

%feature("docstring") casadi::Sparsity::sanity_check "

Check if the dimensions and colind, row vectors are compatible.

Parameters:
-----------

complete:  set to true to also check elementwise throws an error as possible
result

";

%feature("docstring") casadi::Sparsity::compressed "

Create from a single vector containing the pattern in compressed column
storage format: The format: The first two entries are the number of rows
(nrow) and columns (ncol) The next ncol+1 entries are the column offsets
(colind). Note that the last element, colind[ncol], gives the number of
nonzeros The last colind[ncol] entries are the row indices

";

%feature("docstring") casadi::Sparsity::uni_coloring "

Perform a unidirectional coloring: A greedy distance-2 coloring algorithm
(Algorithm 3.1 in A. H. GEBREMEDHIN, F. MANNE, A. POTHEN)

";

%feature("docstring") casadi::Sparsity::star_coloring "

Perform a star coloring of a symmetric matrix: A greedy distance-2 coloring
algorithm Algorithm 4.1 in What Color Is Your Jacobian? Graph Coloring for
Computing Derivatives A. H. GEBREMEDHIN, F. MANNE, A. POTHEN SIAM Rev.,
47(4), 629705 (2006)

Ordering options: None (0), largest first (1)

";

%feature("docstring") casadi::Sparsity::density "

The percentage of nonzero Equivalent to (100.0 * nnz())/numel(), but avoids
overflow.

";

%feature("docstring") casadi::Sparsity::enlarge "

Enlarge matrix Make the matrix larger by inserting empty rows and columns,
keeping the existing non-zeros.

For the matrices A to B A(m, n) length(jj)=m , length(ii)=n B(nrow, ncol)

A=enlarge(m, n, ii, jj) makes sure that

B[jj, ii] == A

";

%feature("docstring") casadi::Sparsity::compress "

Compress a sparsity pattern.

";

%feature("docstring") casadi::Sparsity::scc "

Find the strongly connected components of the bigraph defined by the
sparsity pattern of a square matrix.

See Direct Methods for Sparse Linear Systems by Davis (2006). Returns:
Number of components

Offset for each components (length: 1 + number of components)

Indices for each components, component i has indices index[offset[i]], ...,
index[offset[i+1]]

In the case that the matrix is symmetric, the result has a particular
interpretation: Given a symmetric matrix A and n = A.scc(p, r)

=> A[p, p] will appear block-diagonal with n blocks and with the indices of
the block boundaries to be found in r.

";

%feature("docstring") casadi::Sparsity::get_upper "

Get nonzeros in upper triangular part.

";

%feature("docstring") casadi::Sparsity::dfs "

Depth-first search on the adjacency graph of the sparsity See Direct Methods
for Sparse Linear Systems by Davis (2006).

";

%feature("docstring") casadi::Sparsity::is_tril "

Is lower triangular?

";

%feature("docstring") casadi::Sparsity::size2 "

Get the number of columns.

";

%feature("docstring") casadi::Sparsity::get_col "

Get the column for each non-zero entry Together with the row-vector, this
vector gives the sparsity of the matrix in sparse triplet format, i.e. the
column and row for each non-zero elements.

";

%feature("docstring") casadi::Sparsity::size1 "

Get the number of rows.

";

%feature("docstring") casadi::Sparsity::star_coloring2 "

Perform a star coloring of a symmetric matrix: A new greedy distance-2
coloring algorithm Algorithm 4.1 in NEW ACYCLIC AND STAR COLORING ALGORITHMS
WITH APPLICATION TO COMPUTING HESSIANS A. H. GEBREMEDHIN, A. TARAFDAR, F.
MANNE, A. POTHEN SIAM J. SCI. COMPUT. Vol. 29, No. 3, pp. 10421072 (2007)

Ordering options: None (0), largest first (1)

";

%feature("docstring") casadi::Sparsity::spy "

Print a textual representation of sparsity.

";

%feature("docstring") casadi::Sparsity::postfix_dim "

Dimension string as a postfix to a name Rules:

Dense and scalar: \"\"

0-by-0: \"[]\"

Dense column vector: \"[5]\"

Dense matrix: \"[5x10]\"

Otherwise: \"[5x10,3nz]\"

";

%feature("docstring") casadi::Sparsity::enlargeColumns "

Enlarge the matrix along the second dimension (i.e. insert columns)

";

%feature("docstring") casadi::Sparsity::rows "

Get the number of rows, Octave-style syntax.

";

%feature("docstring") casadi::Sparsity::__hash__ "

Returns a number that is unique for a given Node. If the Object does not
point to any node, \"0\" is returned.

";

%feature("docstring") casadi::Sparsity::size "

>  std::pair<int, int> casadi::Sparsity::size() const 
------------------------------------------------------------------------

Get the shape.

>  int casadi::Sparsity::size(int axis) const 
------------------------------------------------------------------------

Get the size along a particular dimensions.

";

%feature("docstring") casadi::Sparsity::etree "

Calculate the elimination tree See Direct Methods for Sparse Linear Systems
by Davis (2006). If the parameter ata is false, the algorithm is equivalent
to MATLAB's etree(A), except that the indices are zero- based. If ata is
true, the algorithm is equivalent to MATLAB's etree(A, 'col').

";

%feature("docstring") casadi::Sparsity::get_nz "

>  int casadi::Sparsity::get_nz(int rr, int cc) const 
------------------------------------------------------------------------

Get the index of an existing non-zero element return -1 if the element does
not exist.

>  std::vector<int> casadi::Sparsity::get_nz(const std::vector< int > &rr, const std::vector< int > &cc) const 
------------------------------------------------------------------------

Get a set of non-zero element return -1 if the element does not exist.

>  void casadi::Sparsity::get_nz(std::vector< int > &INOUT) const 
------------------------------------------------------------------------

Get the nonzero index for a set of elements The index vector is used both
for input and outputs and must be sorted by increasing nonzero index, i.e.
column-wise. Elements not found in the sparsity pattern are set to -1.

";

%feature("docstring") casadi::Sparsity::erase "

>  std::vector<int> casadi::Sparsity::erase(const std::vector< int > &rr, const std::vector< int > &cc, bool ind1=false)
------------------------------------------------------------------------

Erase rows and/or columns of a matrix.

>  std::vector<int> casadi::Sparsity::erase(const std::vector< int > &rr, bool ind1=false)
------------------------------------------------------------------------

Erase elements of a matrix.

";

%feature("docstring") casadi::Sparsity::bw_upper "

Upper half-bandwidth.

";

%feature("docstring") casadi::Sparsity::scalar "

Create a scalar sparsity pattern.

";

%feature("docstring") casadi::Sparsity::nnz_upper "

Number of non-zeros in the upper triangular half, i.e. the number of
elements (i, j) with j>=i.

";


// File: classcasadi_1_1Split.xml


// File: classcasadi_1_1Sqpmethod.xml
%feature("docstring") casadi::Sqpmethod::get_reltol "[INTERNAL]  Get
relative tolerance.

";

%feature("docstring") casadi::Sqpmethod::wrap "[INTERNAL]  Wrap in an
Function instance consisting of only one MX call.

";

%feature("docstring") casadi::Sqpmethod::get_sparsity_out "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Sqpmethod::nnz_in "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::Sqpmethod::has_free "[INTERNAL]  Does the
function have free variables.

";

%feature("docstring") casadi::Sqpmethod::free_mem "[INTERNAL]  Free memory
block.

";

%feature("docstring") casadi::Sqpmethod::call_gen "[INTERNAL]   Call a
function, overloaded.

";

%feature("docstring") casadi::Sqpmethod::numel_out "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::Sqpmethod::init "[INTERNAL]  Initialize.

";

%feature("docstring") casadi::Sqpmethod::disp "[INTERNAL]  Display object.

";

%feature("docstring") casadi::Sqpmethod::sprint "[INTERNAL]  C-style
formatted printing to string.

";

%feature("docstring") casadi::Sqpmethod::sz_work "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") casadi::Sqpmethod::fwd_seed "[INTERNAL]  Symbolic
expressions for the forward seeds.

";

%feature("docstring") casadi::Sqpmethod::release "[INTERNAL]  Release a
memory object.

";

%feature("docstring") casadi::Sqpmethod::self "[INTERNAL]  Get a public
class instance.

";

%feature("docstring") casadi::Sqpmethod::set_temp "[INTERNAL]  Set the work
vectors.

";

%feature("docstring") casadi::Sqpmethod::sp_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode, sparsity propagation.

";

%feature("docstring") casadi::Sqpmethod::getJacSparsityGen "[INTERNAL]  Get
the sparsity pattern, forward mode.

";

%feature("docstring") casadi::Sqpmethod::nnz_out "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::Sqpmethod::size2_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Sqpmethod::eval_gen "

>  int casadi::FunctionInternal::eval_gen(const double **arg, double **res, int *iw, double *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate numerically.

>  int casadi::FunctionInternal::eval_gen(const SXElem **arg, SXElem **res, int *iw, SXElem *w, void *mem) const

>  int casadi::FunctionInternal::eval_gen(const bvec_t **arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

%feature("docstring") casadi::Sqpmethod::get_jacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Sqpmethod::check_res "[INTERNAL]  Check if
output arguments have correct length and dimensions.

";

%feature("docstring") casadi::Sqpmethod::n_nodes "[INTERNAL]  Number of
nodes in the algorithm.

";

%feature("docstring") casadi::Sqpmethod::print_options "[INTERNAL]  Print
list of options.

";

%feature("docstring") casadi::Sqpmethod::codegen "[INTERNAL]  Generate code
the function.

";

%feature("docstring") casadi::Sqpmethod::check_inputs "[INTERNAL]  Check if
the inputs correspond to a well-posed problem.

";

%feature("docstring") casadi::Sqpmethod::codegen_name "[INTERNAL]  Get name
in codegen.

";

%feature("docstring") casadi::Sqpmethod::numel_in "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::Sqpmethod::ad_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::Sqpmethod::getJacSparsityHierarchical "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::Sqpmethod::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::Sqpmethod::has_codegen "[INTERNAL]  Is
codegen supported?

";

%feature("docstring") casadi::Sqpmethod::size2_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::Sqpmethod::jit_dependencies "[INTERNAL]  JIT
for dependencies.

";

%feature("docstring") casadi::Sqpmethod::adjViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::Sqpmethod::has_spfwd "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Sqpmethod::alloc "[INTERNAL]  Ensure work
vectors long enough to evaluate function.

";

%feature("docstring") casadi::Sqpmethod::has_reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::Sqpmethod::get_reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::Sqpmethod::expand "[INTERNAL] ";

%feature("docstring") casadi::Sqpmethod::getAdaptorSolverName "[INTERNAL]
Obtain solver name from Adaptor.

";

%feature("docstring") casadi::Sqpmethod "

'sqpmethod' plugin for Nlpsol

A textbook SQPMethod

>List of available options

+-----------------------+-----------+--------------------------------------+
|          Id           |   Type    |             Description              |
+=======================+===========+======================================+
| beta                  | OT_DOUBLE | Line-search parameter, restoration   |
|                       |           | factor of stepsize                   |
+-----------------------+-----------+--------------------------------------+
| c1                    | OT_DOUBLE | Armijo condition, coefficient of     |
|                       |           | decrease in merit                    |
+-----------------------+-----------+--------------------------------------+
| hessian_approximation | OT_STRING | limited-memory|exact                 |
+-----------------------+-----------+--------------------------------------+
| lbfgs_memory          | OT_INT    | Size of L-BFGS memory.               |
+-----------------------+-----------+--------------------------------------+
| max_iter              | OT_INT    | Maximum number of SQP iterations     |
+-----------------------+-----------+--------------------------------------+
| max_iter_ls           | OT_INT    | Maximum number of linesearch         |
|                       |           | iterations                           |
+-----------------------+-----------+--------------------------------------+
| merit_memory          | OT_INT    | Size of memory to store history of   |
|                       |           | merit function values                |
+-----------------------+-----------+--------------------------------------+
| min_step_size         | OT_DOUBLE | The size (inf-norm) of the step size |
|                       |           | should not become smaller than this. |
+-----------------------+-----------+--------------------------------------+
| print_header          | OT_BOOL   | Print the header with problem        |
|                       |           | statistics                           |
+-----------------------+-----------+--------------------------------------+
| print_iteration       | OT_BOOL   | Print the iterations                 |
+-----------------------+-----------+--------------------------------------+
| qpsol                 | OT_STRING | The QP solver to be used by the SQP  |
|                       |           | method                               |
+-----------------------+-----------+--------------------------------------+
| qpsol_options         | OT_DICT   | Options to be passed to the QP       |
|                       |           | solver                               |
+-----------------------+-----------+--------------------------------------+
| regularize            | OT_BOOL   | Automatic regularization of Lagrange |
|                       |           | Hessian.                             |
+-----------------------+-----------+--------------------------------------+
| tol_du                | OT_DOUBLE | Stopping criterion for dual          |
|                       |           | infeasability                        |
+-----------------------+-----------+--------------------------------------+
| tol_pr                | OT_DOUBLE | Stopping criterion for primal        |
|                       |           | infeasibility                        |
+-----------------------+-----------+--------------------------------------+

>List of available options

+-------------------+---------------+-------------------+------------------+
|        Id         |     Type      |    Description    |     Used in      |
+===================+===============+===================+==================+
| beta              | OT_DOUBLE     | Line-search       | casadi::Sqpmetho |
|                   |               | parameter,        | d                |
|                   |               | restoration       |                  |
|                   |               | factor of         |                  |
|                   |               | stepsize          |                  |
+-------------------+---------------+-------------------+------------------+
| c1                | OT_DOUBLE     | Armijo condition, | casadi::Sqpmetho |
|                   |               | coefficient of    | d                |
|                   |               | decrease in merit |                  |
+-------------------+---------------+-------------------+------------------+
| calc_multipliers  | OT_BOOL       | Calculate         | casadi::Nlpsol   |
|                   |               | Lagrange          |                  |
|                   |               | multipliers in    |                  |
|                   |               | the Nlpsol base   |                  |
|                   |               | class             |                  |
+-------------------+---------------+-------------------+------------------+
| discrete          | OT_BOOLVECTOR | Indicates which   | casadi::Nlpsol   |
|                   |               | of the variables  |                  |
|                   |               | are discrete,     |                  |
|                   |               | i.e. integer-     |                  |
|                   |               | valued            |                  |
+-------------------+---------------+-------------------+------------------+
| eval_errors_fatal | OT_BOOL       | When errors occur | casadi::Nlpsol   |
|                   |               | during evaluation |                  |
|                   |               | of f,g,...,stop   |                  |
|                   |               | the iterations    |                  |
+-------------------+---------------+-------------------+------------------+
| expand            | OT_BOOL       | Replace MX with   | casadi::Nlpsol   |
|                   |               | SX expressions in |                  |
|                   |               | problem           |                  |
|                   |               | formulation       |                  |
|                   |               | [false]           |                  |
+-------------------+---------------+-------------------+------------------+
| hessian_approxima | OT_STRING     | limited-          | casadi::Sqpmetho |
| tion              |               | memory|exact      | d                |
+-------------------+---------------+-------------------+------------------+
| ignore_check_vec  | OT_BOOL       | If set to true,   | casadi::Nlpsol   |
|                   |               | the input shape   |                  |
|                   |               | of F will not be  |                  |
|                   |               | checked.          |                  |
+-------------------+---------------+-------------------+------------------+
| iteration_callbac | OT_FUNCTION   | A function that   | casadi::Nlpsol   |
| k                 |               | will be called at |                  |
|                   |               | each iteration    |                  |
|                   |               | with the solver   |                  |
|                   |               | as input. Check   |                  |
|                   |               | documentation of  |                  |
|                   |               | Callback .        |                  |
+-------------------+---------------+-------------------+------------------+
| iteration_callbac | OT_BOOL       | If set to true,   | casadi::Nlpsol   |
| k_ignore_errors   |               | errors thrown by  |                  |
|                   |               | iteration_callbac |                  |
|                   |               | k will be         |                  |
|                   |               | ignored.          |                  |
+-------------------+---------------+-------------------+------------------+
| iteration_callbac | OT_INT        | Only call the     | casadi::Nlpsol   |
| k_step            |               | callback function |                  |
|                   |               | every few         |                  |
|                   |               | iterations.       |                  |
+-------------------+---------------+-------------------+------------------+
| lbfgs_memory      | OT_INT        | Size of L-BFGS    | casadi::Sqpmetho |
|                   |               | memory.           | d                |
+-------------------+---------------+-------------------+------------------+
| max_iter          | OT_INT        | Maximum number of | casadi::Sqpmetho |
|                   |               | SQP iterations    | d                |
+-------------------+---------------+-------------------+------------------+
| max_iter_ls       | OT_INT        | Maximum number of | casadi::Sqpmetho |
|                   |               | linesearch        | d                |
|                   |               | iterations        |                  |
+-------------------+---------------+-------------------+------------------+
| merit_memory      | OT_INT        | Size of memory to | casadi::Sqpmetho |
|                   |               | store history of  | d                |
|                   |               | merit function    |                  |
|                   |               | values            |                  |
+-------------------+---------------+-------------------+------------------+
| min_step_size     | OT_DOUBLE     | The size (inf-    | casadi::Sqpmetho |
|                   |               | norm) of the step | d                |
|                   |               | size should not   |                  |
|                   |               | become smaller    |                  |
|                   |               | than this.        |                  |
+-------------------+---------------+-------------------+------------------+
| oracle_options    | OT_DICT       | Options to be     | casadi::Nlpsol   |
|                   |               | passed to the     |                  |
|                   |               | oracle function   |                  |
+-------------------+---------------+-------------------+------------------+
| print_header      | OT_BOOL       | Print the header  | casadi::Sqpmetho |
|                   |               | with problem      | d                |
|                   |               | statistics        |                  |
+-------------------+---------------+-------------------+------------------+
| print_iteration   | OT_BOOL       | Print the         | casadi::Sqpmetho |
|                   |               | iterations        | d                |
+-------------------+---------------+-------------------+------------------+
| qpsol             | OT_STRING     | The QP solver to  | casadi::Sqpmetho |
|                   |               | be used by the    | d                |
|                   |               | SQP method        |                  |
+-------------------+---------------+-------------------+------------------+
| qpsol_options     | OT_DICT       | Options to be     | casadi::Sqpmetho |
|                   |               | passed to the QP  | d                |
|                   |               | solver            |                  |
+-------------------+---------------+-------------------+------------------+
| regularize        | OT_BOOL       | Automatic         | casadi::Sqpmetho |
|                   |               | regularization of | d                |
|                   |               | Lagrange Hessian. |                  |
+-------------------+---------------+-------------------+------------------+
| tol_du            | OT_DOUBLE     | Stopping          | casadi::Sqpmetho |
|                   |               | criterion for     | d                |
|                   |               | dual              |                  |
|                   |               | infeasability     |                  |
+-------------------+---------------+-------------------+------------------+
| tol_pr            | OT_DOUBLE     | Stopping          | casadi::Sqpmetho |
|                   |               | criterion for     | d                |
|                   |               | primal            |                  |
|                   |               | infeasibility     |                  |
+-------------------+---------------+-------------------+------------------+
| verbose_init      | OT_BOOL       | Print out timing  | casadi::Nlpsol   |
|                   |               | information about |                  |
|                   |               | the different     |                  |
|                   |               | stages of         |                  |
|                   |               | initialization    |                  |
+-------------------+---------------+-------------------+------------------+
| warn_initial_boun | OT_BOOL       | Warn if the       | casadi::Nlpsol   |
| ds                |               | initial guess     |                  |
|                   |               | does not satisfy  |                  |
|                   |               | LBX and UBX       |                  |
+-------------------+---------------+-------------------+------------------+

Diagrams
--------



C++ includes: sqpmethod.hpp ";

%feature("docstring") casadi::Sqpmethod::get_free "[INTERNAL]  Print free
variables.

";

%feature("docstring") casadi::Sqpmethod::eval_dm "[INTERNAL]  Evaluate with
DM matrices.

";

%feature("docstring") casadi::Sqpmethod::sz_arg "[INTERNAL]  Get required
length of arg field.

";

%feature("docstring") casadi::Sqpmethod::index_out "[INTERNAL]  Get output
scheme index by name.

";

%feature("docstring") casadi::Sqpmethod::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::Sqpmethod::free_mx "[INTERNAL]  Get free
variables ( MX)

";

%feature("docstring") casadi::Sqpmethod::index_in "[INTERNAL]  Get input
scheme index by name.

";

%feature("docstring") casadi::Sqpmethod::sp_reverse "[INTERNAL]  Propagate
sparsity backwards.

";

%feature("docstring") casadi::Sqpmethod::get_options "[INTERNAL]  Options.

";

%feature("docstring") casadi::Sqpmethod::has_sprev "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Sqpmethod::symbolicAdjSeed "[INTERNAL]
Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::Sqpmethod::get_forward "[INTERNAL]  Return
function that calculates forward derivatives forward(nfwd) returns a cached
instance if available, and calls  Function get_forward(int nfwd) if no
cached version is available.

";

%feature("docstring") casadi::Sqpmethod::alloc_mem "[INTERNAL]  Create
memory block.

";

%feature("docstring") casadi::Sqpmethod::eval_mx "[INTERNAL]  Evaluate with
symbolic matrices.

";

%feature("docstring") casadi::Sqpmethod::getAtomicOutput "

[DEPRECATED] Renamed instruction_output

";

%feature("docstring") casadi::Sqpmethod::mapsum_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::Sqpmethod::print_iteration "

>  void casadi::Sqpmethod::print_iteration() const 
------------------------------------------------------------------------
[INTERNAL] 
Print iteration header.

>  void casadi::Sqpmethod::print_iteration(int iter, double obj, double pr_inf, double du_inf, double dx_norm, double reg, int ls_trials, bool ls_success) const 
------------------------------------------------------------------------
[INTERNAL] 
Print iteration.

";

%feature("docstring") casadi::Sqpmethod::get_function "[INTERNAL] ";

%feature("docstring") casadi::Sqpmethod::get_sparsity_in "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Sqpmethod::mx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Sqpmethod::instruction_output "[INTERNAL]
Get the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::Sqpmethod::set_function "[INTERNAL]  Register
the function for evaluation and statistics gathering

";

%feature("docstring") casadi::Sqpmethod::has_forward "[INTERNAL]  Return
function that calculates forward derivatives forward(nfwd) returns a cached
instance if available, and calls  Function get_forward(int nfwd) if no
cached version is available.

";

%feature("docstring") casadi::Sqpmethod::call "[INTERNAL]   Call a
function, templated.

";

%feature("docstring") casadi::Sqpmethod::sz_iw "[INTERNAL]  Get required
length of iw field.

";

%feature("docstring") casadi::Sqpmethod::alloc_w "[INTERNAL]  Ensure
required length of w field.

";

%feature("docstring") casadi::Sqpmethod::replace_res "[INTERNAL]  Replace
0-by-0 outputs.

";

%feature("docstring") casadi::Sqpmethod::get_jacobian_sparsity "[INTERNAL]
Get Jacobian sparsity.

";

%feature("docstring") casadi::Sqpmethod::regularize "[INTERNAL] ";

%feature("docstring") casadi::Sqpmethod::primalInfeasibility "[INTERNAL] ";

%feature("docstring") casadi::Sqpmethod::size_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Sqpmethod::getJacSparsityHierarchicalSymm "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::Sqpmethod::codegen_decref "[INTERNAL]
Codegen decref for dependencies.

";

%feature("docstring") casadi::Sqpmethod::fwdViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::Sqpmethod::check_arg "[INTERNAL]  Check if
input arguments have correct length and dimensions.

";

%feature("docstring") casadi::Sqpmethod::setOptionsFromFile "[INTERNAL]
Read options from parameter xml.

";

%feature("docstring") casadi::Sqpmethod::replace_fseed "[INTERNAL]  Replace
0-by-0 forward seeds.

";

%feature("docstring") casadi::Sqpmethod::symbolic_output "[INTERNAL]  Get a
vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::Sqpmethod::finalize "[INTERNAL]  Finalize
initialization.

";

%feature("docstring") casadi::Sqpmethod::setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";

%feature("docstring") casadi::Sqpmethod::mx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Sqpmethod::has_function "[INTERNAL] ";

%feature("docstring") casadi::Sqpmethod::print "[INTERNAL]  C-style
formatted printing during evaluation.

";

%feature("docstring") casadi::Sqpmethod::size1_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Sqpmethod::matching_arg "[INTERNAL]  Check if
input arguments that needs to be replaced.

";

%feature("docstring") casadi::Sqpmethod::call_forward "[INTERNAL]  Forward
mode AD, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Sqpmethod::free_sx "[INTERNAL]  Get free
variables (SX)

";

%feature("docstring") casadi::Sqpmethod::forward "[INTERNAL]  Return
function that calculates forward derivatives forward(nfwd) returns a cached
instance if available, and calls  Function get_forward(int nfwd) if no
cached version is available.

";

%feature("docstring") casadi::Sqpmethod::alloc_res "[INTERNAL]  Ensure
required length of res field.

";

%feature("docstring") casadi::Sqpmethod::print_dimensions "[INTERNAL]
Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::Sqpmethod::codegen_sparsities "[INTERNAL]
Codegen sparsities.

";

%feature("docstring") casadi::Sqpmethod::solve "[INTERNAL] ";

%feature("docstring") casadi::Sqpmethod::get_n_out "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::Sqpmethod::codegen_body "[INTERNAL]  Generate
code for the function body.

";

%feature("docstring") casadi::Sqpmethod::instruction_input "[INTERNAL]  Get
the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::Sqpmethod::which_depends "[INTERNAL]  Which
variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::Sqpmethod::getAtomicInput "

[DEPRECATED] Renamed instruction_index

";

%feature("docstring") casadi::Sqpmethod::sz_w "[INTERNAL]  Get required
length of w field.

";

%feature("docstring") casadi::Sqpmethod::solve_QP "[INTERNAL] ";

%feature("docstring") casadi::Sqpmethod::instruction_MX "[INTERNAL]  get MX
expression associated with instruction

";

%feature("docstring") casadi::Sqpmethod::codegen_declarations "[INTERNAL]
Generate code for the declarations of the C function.

";

%feature("docstring") casadi::Sqpmethod::info "[INTERNAL]  Obtain
information about function

";

%feature("docstring") casadi::Sqpmethod::get_default_in "[INTERNAL]  Get
default input value.

";

%feature("docstring") casadi::Sqpmethod::clear_mem "[INTERNAL]  Clear all
memory (called from destructor)

";

%feature("docstring") casadi::Sqpmethod::getJacSparsity "[INTERNAL]
Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Sqpmethod::replace_aseed "[INTERNAL]  Replace
0-by-0 reverse seeds.

";

%feature("docstring") casadi::Sqpmethod::jacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Sqpmethod::sz_res "[INTERNAL]  Get required
length of res field.

";

%feature("docstring") casadi::Sqpmethod::get_min_in "[INTERNAL]  Get
smallest input value.

";

%feature("docstring") casadi::Sqpmethod::create_function "[INTERNAL]
Create an oracle function

";

%feature("docstring") casadi::Sqpmethod::alloc_arg "[INTERNAL]  Ensure
required length of arg field.

";

%feature("docstring") casadi::Sqpmethod::getReducedHessian "[INTERNAL] ";

%feature("docstring") casadi::Sqpmethod::disp_more "[INTERNAL]  Print
description.

";

%feature("docstring") casadi::Sqpmethod::alloc_iw "[INTERNAL]  Ensure
required length of iw field.

";

%feature("docstring") casadi::Sqpmethod::get_stats "[INTERNAL]  Get all
statistics.

";

%feature("docstring") casadi::Sqpmethod::monitored "[INTERNAL] ";

%feature("docstring") casadi::Sqpmethod::reset_h "[INTERNAL] ";

%feature("docstring") casadi::Sqpmethod::integer_support "[INTERNAL]  Can
discrete variables be treated.

";

%feature("docstring") casadi::Sqpmethod::get_max_in "[INTERNAL]  Get
largest input value.

";

%feature("docstring") casadi::Sqpmethod::oracle "[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::Sqpmethod::sx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Sqpmethod::getConic "[INTERNAL]  Access
Conic.

";

%feature("docstring") casadi::Sqpmethod::eval "[INTERNAL]  Evaluate
numerically.

";

%feature("docstring") casadi::Sqpmethod::size1_out "[INTERNAL]
Input/output dimensions.

";

%feature("docstring") casadi::Sqpmethod::replace_arg "[INTERNAL]  Replace
0-by-0 inputs.

";

%feature("docstring") casadi::Sqpmethod::get_name_out "[INTERNAL]  Names of
function input and outputs.

";

%feature("docstring") casadi::Sqpmethod::checkout "[INTERNAL]  Checkout a
memory object.

";

%feature("docstring") casadi::Sqpmethod::reverse "[INTERNAL]  Return
function that calculates adjoint derivatives reverse(nadj) returns a cached
instance if available, and calls  Function get_reverse(int nadj) if no
cached version is available.

";

%feature("docstring") casadi::Sqpmethod::eval_sx "[INTERNAL]  Evaluate with
symbolic scalars.

";

%feature("docstring") casadi::Sqpmethod::print_option "[INTERNAL]  Print
all information there is to know about a certain option.

";

%feature("docstring") casadi::Sqpmethod::definition "[INTERNAL]  Get
function signature: name:(inputs)->(outputs)

";

%feature("docstring") casadi::Sqpmethod::init_mem "[INTERNAL]  Initalize
memory block.

";

%feature("docstring") casadi::Sqpmethod::has_derivative "[INTERNAL]  Can
derivatives be calculated in any way?

";

%feature("docstring") casadi::Sqpmethod::uses_output "[INTERNAL]  Do the
derivative functions need nondifferentiated outputs?

";

%feature("docstring") casadi::Sqpmethod::n_instructions "[INTERNAL]  Get
the number of atomic operations.

";

%feature("docstring") casadi::Sqpmethod::export_code "[INTERNAL]  Export
function in a specific language.

";

%feature("docstring") casadi::Sqpmethod::getRegularization "[INTERNAL] ";

%feature("docstring") casadi::Sqpmethod::all_scalar "[INTERNAL]  Are all
inputs and outputs scalar.

";

%feature("docstring") casadi::Sqpmethod::generate_lifted "[INTERNAL]
Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::Sqpmethod::get_abstol "[INTERNAL]  Get
absolute tolerance.

";

%feature("docstring") casadi::Sqpmethod::print_fstats "[INTERNAL]  Print
statistics.

";

%feature("docstring") casadi::Sqpmethod::size_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Sqpmethod::signature "[INTERNAL]  Code
generate the function.

";

%feature("docstring") casadi::Sqpmethod::calc_function "[INTERNAL] ";

%feature("docstring") casadi::Sqpmethod::plugin_name "[INTERNAL] ";

%feature("docstring") casadi::Sqpmethod::sparsity_jac "[INTERNAL]  Get, if
necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Sqpmethod::construct "[INTERNAL]  Construct
Prepares the function for evaluation.

";

%feature("docstring") casadi::Sqpmethod::call_reverse "[INTERNAL]  Reverse
mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Sqpmethod::sp_forward "[INTERNAL]  Propagate
sparsity forward.

";

%feature("docstring") casadi::Sqpmethod::generate_dependencies "[INTERNAL]
Export / Generate C code for the generated functions.

";

%feature("docstring") casadi::Sqpmethod::codegen_incref "[INTERNAL]
Codegen incref for dependencies.

";

%feature("docstring") casadi::Sqpmethod::get_n_in "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::Sqpmethod::set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::Sqpmethod::get_name_in "[INTERNAL]  Names of
function input and outputs.

";

%feature("docstring") casadi::Sqpmethod::sx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Sqpmethod::slice "[INTERNAL]  returns a new
function with a selection of inputs/outputs of the original

";

%feature("docstring") casadi::Sqpmethod::Sqpmethod "[INTERNAL] ";

%feature("docstring") casadi::Sqpmethod::memory "[INTERNAL]  Memory
objects.

";

%feature("docstring") casadi::Sqpmethod::instruction_id "[INTERNAL]  Get an
atomic operation operator index.

";

%feature("docstring") casadi::Sqpmethod::class_name "[INTERNAL]  Readable
name of the internal class.

";

%feature("docstring") casadi::Sqpmethod::instruction_constant "[INTERNAL]
Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::Sqpmethod::has_jacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Sqpmethod::~Sqpmethod "[INTERNAL] ";

%feature("docstring") casadi::Sqpmethod::codegen_meta "[INTERNAL]  Generate
meta-information allowing a user to evaluate a generated function.

";

%feature("docstring") casadi::Sqpmethod::matching_res "[INTERNAL]  Check if
output arguments that needs to be replaced.

";

%feature("docstring") casadi::Sqpmethod::get_partition "[INTERNAL]  Get the
unidirectional or bidirectional partition.

";

%feature("docstring") casadi::Sqpmethod::factory "[INTERNAL] ";

%feature("docstring") casadi::Sqpmethod::is_a "[INTERNAL]  Check if the
function is of a particular type.

";


// File: classcasadi_1_1Logger_1_1Stream.xml
%feature("docstring") casadi::Logger::Stream "C++ includes:
casadi_logger.hpp ";

%feature("docstring") casadi::Logger::Stream::Stream "";


// File: classcasadi_1_1Logger_1_1Streambuf.xml
%feature("docstring") casadi::Logger::Streambuf "C++ includes:
casadi_logger.hpp ";

%feature("docstring") casadi::Logger::Streambuf::Streambuf "";


// File: classcasadi_1_1SubAssign.xml


// File: classcasadi_1_1SubIndex.xml
%feature("docstring") casadi::SubIndex "

SubIndex class for Matrix Same as the above class but for single argument
return for operator() Joel Andersson

C++ includes: submatrix.hpp ";

%feature("docstring") casadi::SubIndex::SubIndex "

Constructor.

";


// File: classcasadi_1_1SubMatrix.xml
%feature("docstring") casadi::SubMatrix "

SubMatrix class for Matrix SubMatrix is the return type for operator() of
the Matrix class, it allows access to the value as well as changing the
parent object Joel Andersson

C++ includes: submatrix.hpp ";

%feature("docstring") casadi::SubMatrix::SubMatrix "

Constructor.

";


// File: classcasadi_1_1SubRef.xml


// File: classcasadi_1_1Switch.xml
%feature("docstring") casadi::Switch::slice "[INTERNAL]  returns a new
function with a selection of inputs/outputs of the original

";

%feature("docstring") casadi::Switch::call_forward "[INTERNAL]  Forward
mode AD, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Switch::symbolic_output "[INTERNAL]  Get a
vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::Switch::eval_mx "[INTERNAL]  Evaluate with
symbolic matrices.

";

%feature("docstring") casadi::Switch::size2_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Switch::symbolicAdjSeed "[INTERNAL]  Symbolic
expressions for the adjoint seeds.

";

%feature("docstring") casadi::Switch::check_res "[INTERNAL]  Check if
output arguments have correct length and dimensions.

";

%feature("docstring") casadi::Switch::has_jacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Switch::eval "[INTERNAL]  Evaluate
numerically, work vectors given.

";

%feature("docstring") casadi::Switch::replace_aseed "[INTERNAL]  Replace
0-by-0 reverse seeds.

";

%feature("docstring") casadi::Switch::fwdViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::Switch::getJacSparsity "[INTERNAL]  Generate
the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Switch::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::Switch::size1_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Switch::disp_more "[INTERNAL]  Print
description.

";

%feature("docstring") casadi::Switch::alloc_iw "[INTERNAL]  Ensure required
length of iw field.

";

%feature("docstring") casadi::Switch::eval_gen "

>  int casadi::FunctionInternal::eval_gen(const double **arg, double **res, int *iw, double *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate numerically.

>  int casadi::FunctionInternal::eval_gen(const SXElem **arg, SXElem **res, int *iw, SXElem *w, void *mem) const

>  int casadi::FunctionInternal::eval_gen(const bvec_t **arg, bvec_t **res, int *iw, bvec_t *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

%feature("docstring") casadi::Switch::get_forward "[INTERNAL]  Generate a
function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::Switch::is_a "[INTERNAL]  Check if the
function is of a particular type.

";

%feature("docstring") casadi::Switch::has_derivative "[INTERNAL]  Can
derivatives be calculated in any way?

";

%feature("docstring") casadi::Switch::get_max_in "[INTERNAL]  Get largest
input value.

";

%feature("docstring") casadi::Switch::codegen_sparsities "[INTERNAL]
Codegen sparsities.

";

%feature("docstring") casadi::Switch::call "[INTERNAL]   Call a function,
templated.

";

%feature("docstring") casadi::Switch::nnz_out "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::Switch::get_name_in "[INTERNAL]  Names of
function input and outputs.

";

%feature("docstring") casadi::Switch::jit_dependencies "[INTERNAL]  Jit
dependencies.

";

%feature("docstring") casadi::Switch::numel_out "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::Switch::set_work "[INTERNAL]  Set the
(persistent) work vectors.

";

%feature("docstring") casadi::Switch::finalize "[INTERNAL]  Finalize the
object creation.

";

%feature("docstring") casadi::Switch::set_temp "[INTERNAL]  Set the
(temporary) work vectors.

";

%feature("docstring") casadi::Switch::get_partition "[INTERNAL]  Get the
unidirectional or bidirectional partition.

";

%feature("docstring") casadi::Switch::has_forward "[INTERNAL]  Generate a
function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::Switch::adjViaJac "[INTERNAL]  Calculate
derivatives by multiplying the full Jacobian and multiplying.

";

%feature("docstring") casadi::Switch::n_nodes "[INTERNAL]  Number of nodes
in the algorithm.

";

%feature("docstring") casadi::Switch::free_sx "[INTERNAL]  Get free
variables (SX)

";

%feature("docstring") casadi::Switch::get_min_in "[INTERNAL]  Get smallest
input value.

";

%feature("docstring") casadi::Switch::has_codegen "[INTERNAL]  Is codegen
supported?

";

%feature("docstring") casadi::Switch::check_arg "[INTERNAL]  Check if input
arguments have correct length and dimensions.

";

%feature("docstring") casadi::Switch::matching_arg "[INTERNAL]  Check if
input arguments that needs to be replaced.

";

%feature("docstring") casadi::Switch::instruction_output "[INTERNAL]  Get
the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::Switch::print_option "[INTERNAL]  Print all
information there is to know about a certain option.

";

%feature("docstring") casadi::Switch::~Switch "[INTERNAL]  Destructor.

";

%feature("docstring") casadi::Switch::free_mem "[INTERNAL]  Free memory
block.

";

%feature("docstring") casadi::Switch::info "[INTERNAL]  Obtain information
about node

";

%feature("docstring") casadi::Switch::has_spfwd "[INTERNAL]  Is the class
able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Switch::sx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Switch::init "[INTERNAL]  Initialize.

";

%feature("docstring") casadi::Switch::print "[INTERNAL]  C-style formatted
printing during evaluation.

";

%feature("docstring") casadi::Switch::codegen_body "[INTERNAL]  Generate
code for the body of the C function.

";

%feature("docstring") casadi::Switch::n_instructions "[INTERNAL]  Get the
number of atomic operations.

";

%feature("docstring") casadi::Switch::init_mem "[INTERNAL]  Initalize
memory block.

";

%feature("docstring") casadi::Switch::construct "[INTERNAL]  Construct
Prepares the function for evaluation.

";

%feature("docstring") casadi::Switch::sz_work "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") casadi::Switch::memory "[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::Switch::clear_mem "[INTERNAL]  Clear all
memory (called from destructor)

";

%feature("docstring") casadi::Switch::get_name_out "[INTERNAL]  Names of
function input and outputs.

";

%feature("docstring") casadi::Switch::index_out "[INTERNAL]  Get output
scheme index by name.

";

%feature("docstring") casadi::Switch::sz_iw "[INTERNAL]  Get required
length of iw field.

";

%feature("docstring") casadi::Switch::size_out "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Switch::codegen "[INTERNAL]  Generate code
the function.

";

%feature("docstring") casadi::Switch::get_stats "[INTERNAL]  Get all
statistics.

";

%feature("docstring") casadi::Switch::size2_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Switch::get_jacobian_sparsity "[INTERNAL]
Get Jacobian sparsity.

";

%feature("docstring") casadi::Switch::matching_res "[INTERNAL]  Check if
output arguments that needs to be replaced.

";

%feature("docstring") casadi::Switch::alloc "[INTERNAL]  Ensure work
vectors long enough to evaluate function.

";

%feature("docstring") casadi::Switch::get_default_in "[INTERNAL]  Get
default input value.

";

%feature("docstring") casadi::Switch::which_depends "[INTERNAL]  Which
variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::Switch::sp_forward "[INTERNAL]  Propagate
sparsity forward.

";

%feature("docstring") casadi::Switch::replace_arg "[INTERNAL]  Replace
0-by-0 inputs.

";

%feature("docstring") casadi::Switch::getJacSparsityGen "[INTERNAL]  Get
the sparsity pattern, forward mode.

";

%feature("docstring") casadi::Switch::sz_res "[INTERNAL]  Get required
length of res field.

";

%feature("docstring") casadi::Switch::sparsity_jac "[INTERNAL]  Get, if
necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Switch::get_sparsity_in "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Switch::codegen_incref "[INTERNAL]  Codegen
incref for dependencies.

";

%feature("docstring") casadi::Switch::index_in "[INTERNAL]  Get input
scheme index by name.

";

%feature("docstring") casadi::Switch::numel_in "[INTERNAL]  Number of
input/output elements.

";

%feature("docstring") casadi::Switch::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::Switch::generate_dependencies "[INTERNAL]
Export / Generate C code for the dependency function.

";

%feature("docstring") casadi::Switch::instruction_constant "[INTERNAL]  Get
the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::Switch::size_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Switch::codegen_meta "[INTERNAL]  Generate
meta-information allowing a user to evaluate a generated function.

";

%feature("docstring") casadi::Switch::size1_in "[INTERNAL]  Input/output
dimensions.

";

%feature("docstring") casadi::Switch::alloc_w "[INTERNAL]  Ensure required
length of w field.

";

%feature("docstring") casadi::Switch::factory "[INTERNAL] ";

%feature("docstring") casadi::Switch::wrap "[INTERNAL]  Wrap in an Function
instance consisting of only one MX call.

";

%feature("docstring") casadi::Switch::codegen_declarations "[INTERNAL]
Generate code for the declarations of the C function.

";

%feature("docstring") casadi::Switch::self "[INTERNAL]  Get a public class
instance.

";

%feature("docstring") casadi::Switch::getJacSparsityHierarchicalSymm "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::Switch::sp_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode, sparsity propagation.

";

%feature("docstring") casadi::Switch::class_name "[INTERNAL]  Get type
name.

";

%feature("docstring") casadi::Switch::export_code "[INTERNAL]  Export
function in a specific language.

";

%feature("docstring") casadi::Switch::signature "[INTERNAL]  Code generate
the function.

";

%feature("docstring") casadi::Switch::mx_in "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Switch::sx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Switch::getAtomicInput "

[DEPRECATED] Renamed instruction_index

";

%feature("docstring") casadi::Switch::get_options "[INTERNAL]  Options.

";

%feature("docstring") casadi::Switch::disp "[INTERNAL]  Display object.

";

%feature("docstring") casadi::Switch::has_sprev "[INTERNAL]  Is the class
able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Switch::instruction_MX "[INTERNAL]  get MX
expression associated with instruction

";

%feature("docstring") casadi::Switch::get_free "[INTERNAL]  Print free
variables.

";

%feature("docstring") casadi::Switch::alloc_arg "[INTERNAL]  Ensure
required length of arg field.

";

%feature("docstring") casadi::Switch::get_sparsity_out "[INTERNAL]
Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Switch::getAtomicOutput "

[DEPRECATED] Renamed instruction_output

";

%feature("docstring") casadi::Switch::get_function "[INTERNAL] ";

%feature("docstring") casadi::Switch::getAdaptorSolverName "[INTERNAL]
Obtain solver name from Adaptor.

";

%feature("docstring") casadi::Switch::eval_sx "[INTERNAL]  evaluate
symbolically while also propagating directional derivatives

";

%feature("docstring") casadi::Switch::replace_fseed "[INTERNAL]  Replace
0-by-0 forward seeds.

";

%feature("docstring") casadi::Switch::has_free "[INTERNAL]  Does the
function have free variables.

";

%feature("docstring") casadi::Switch::instruction_id "[INTERNAL]  Get an
atomic operation operator index.

";

%feature("docstring") casadi::Switch::codegen_name "[INTERNAL]  Get name in
codegen.

";

%feature("docstring") casadi::Switch::codegen_decref "[INTERNAL]  Codegen
decref for dependencies.

";

%feature("docstring") casadi::Switch::alloc_res "[INTERNAL]  Ensure
required length of res field.

";

%feature("docstring") casadi::Switch::get_n_out "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::Switch::Switch "[INTERNAL]  Constructor
(generic switch)

";

%feature("docstring") casadi::Switch::fwd_seed "[INTERNAL]  Symbolic
expressions for the forward seeds.

";

%feature("docstring") casadi::Switch::sprint "[INTERNAL]  C-style formatted
printing to string.

";

%feature("docstring") casadi::Switch::print_dimensions "[INTERNAL]  Print
dimensions of inputs and outputs.

";

%feature("docstring") casadi::Switch::mapsum_mx "[INTERNAL]  Parallel
evaluation.

";

%feature("docstring") casadi::Switch::reverse "[INTERNAL]  Return function
that calculates adjoint derivatives reverse(nadj) returns a cached instance
if available, and calls  Function get_reverse(int nadj) if no cached version
is available.

";

%feature("docstring") casadi::Switch::mx_out "[INTERNAL]  Get function
input(s) and output(s)

";

%feature("docstring") casadi::Switch::has_reverse "[INTERNAL]  Generate a
function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::Switch::eval_dm "[INTERNAL]  Evaluate with DM
matrices.

";

%feature("docstring") casadi::Switch "[INTERNAL]   Switch statement Joel
Andersson

C++ includes: switch.hpp ";

%feature("docstring") casadi::Switch::get_jacobian "[INTERNAL]  Return
Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Switch::uses_output "[INTERNAL]  Do the
derivative functions need nondifferentiated outputs?

";

%feature("docstring") casadi::Switch::call_gen "[INTERNAL]   Call a
function, overloaded.

";

%feature("docstring") casadi::Switch::alloc_mem "[INTERNAL]  Create memory
block.

";

%feature("docstring") casadi::Switch::getJacSparsityHierarchical "[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::Switch::get_n_in "[INTERNAL]  Number of
function inputs and outputs.

";

%feature("docstring") casadi::Switch::setup "[INTERNAL]  Set the
(persistent and temporary) work vectors.

";

%feature("docstring") casadi::Switch::replace_res "[INTERNAL]  Replace
0-by-0 outputs.

";

%feature("docstring") casadi::Switch::print_options "[INTERNAL]  Print list
of options.

";

%feature("docstring") casadi::Switch::sz_arg "[INTERNAL]  Get required
length of arg field.

";

%feature("docstring") casadi::Switch::release "[INTERNAL]  Release a memory
object.

";

%feature("docstring") casadi::Switch::definition "[INTERNAL]  Get function
signature: name:(inputs)->(outputs)

";

%feature("docstring") casadi::Switch::get_abstol "[INTERNAL]  Get absolute
tolerance.

";

%feature("docstring") casadi::Switch::free_mx "[INTERNAL]  Get free
variables ( MX)

";

%feature("docstring") casadi::Switch::ad_weight "[INTERNAL]  Weighting
factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::Switch::checkout "[INTERNAL]  Checkout a
memory object.

";

%feature("docstring") casadi::Switch::sz_w "[INTERNAL]  Get required length
of w field.

";

%feature("docstring") casadi::Switch::jacobian "[INTERNAL]  Return Jacobian
of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Switch::sp_reverse "[INTERNAL]  Propagate
sparsity backwards.

";

%feature("docstring") casadi::Switch::has_function "[INTERNAL] ";

%feature("docstring") casadi::Switch::forward "[INTERNAL]  Return function
that calculates forward derivatives forward(nfwd) returns a cached instance
if available, and calls  Function get_forward(int nfwd) if no cached version
is available.

";

%feature("docstring") casadi::Switch::oracle "[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::Switch::call_reverse "[INTERNAL]  Reverse
mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Switch::generate_lifted "[INTERNAL]  Extract
the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::Switch::nnz_in "[INTERNAL]  Number of
input/output nonzeros.

";

%feature("docstring") casadi::Switch::get_reverse "[INTERNAL]  Generate a
function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::Switch::all_scalar "[INTERNAL]  Are all
inputs and outputs scalar.

";

%feature("docstring") casadi::Switch::get_reltol "[INTERNAL]  Get relative
tolerance.

";

%feature("docstring") casadi::Switch::instruction_input "[INTERNAL]  Get
the (integer) input arguments of an atomic operation.

";


// File: classcasadi_1_1SXFunction.xml


// File: classcasadi_1_1SymbolicMX.xml


// File: classcasadi_1_1SymbolicQr.xml
%feature("docstring") casadi::SymbolicQr::neig "[INTERNAL]  Number of
negative eigenvalues.

";

%feature("docstring") casadi::SymbolicQr::class_name "[INTERNAL]  Readable
name of the internal class.

";

%feature("docstring") casadi::SymbolicQr::SymbolicQr "[INTERNAL] ";

%feature("docstring") casadi::SymbolicQr::alloc_mem "[INTERNAL]  Create
memory block.

";

%feature("docstring") casadi::SymbolicQr::checkout "[INTERNAL]  Checkout a
memory object.

";

%feature("docstring") casadi::SymbolicQr::linsol_eval_sx "[INTERNAL]
Evaluate symbolically (SX)

";

%feature("docstring") casadi::SymbolicQr::~SymbolicQr "[INTERNAL] ";

%feature("docstring") casadi::SymbolicQr::rank "[INTERNAL]   Matrix rank.

";

%feature("docstring") casadi::SymbolicQr::memory "[INTERNAL]  Memory
objects.

";

%feature("docstring") casadi::SymbolicQr::disp_more "[INTERNAL]  Print
more.

";

%feature("docstring") casadi::SymbolicQr::nrow "[INTERNAL]  Get sparsity
pattern.

";

%feature("docstring") casadi::SymbolicQr "

'symbolicqr' plugin for Linsol

Linear solver for sparse least-squares problems Inspired
fromhttps://github.com/scipy/scipy/blob/v0.14.0/scipy/sparse/linalg/isolve/lsqr.py#L96

Linsol based on QR factorization with sparsity pattern based reordering
without partial pivoting

>List of available options

+-------+---------+----------------------------------------------------+
|  Id   |  Type   |                    Description                     |
+=======+=========+====================================================+
| fopts | OT_DICT | Options to be passed to generated function objects |
+-------+---------+----------------------------------------------------+

Joel Andersson

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| enable_fd        | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation by   |                  |
|                  |                 | finite           |                  |
|                  |                 | differencing.    |                  |
|                  |                 | [default:        |                  |
|                  |                 | false]]          |                  |
+------------------+-----------------+------------------+------------------+
| enable_forward   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using forward    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_jacobian  | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobians of all |                  |
|                  |                 | differentiable   |                  |
|                  |                 | outputs with     |                  |
|                  |                 | respect to all   |                  |
|                  |                 | differentiable   |                  |
|                  |                 | inputs - if      |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_reverse   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | transposed       |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using reverse    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| fd_method        | OT_STRING       | Method for       | casadi::Function |
|                  |                 | finite           | Internal         |
|                  |                 | differencing     |                  |
|                  |                 | [default         |                  |
|                  |                 | 'central']       |                  |
+------------------+-----------------+------------------+------------------+
| fd_options       | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | finite           |                  |
|                  |                 | difference       |                  |
|                  |                 | instance         |                  |
+------------------+-----------------+------------------+------------------+
| fopts            | OT_DICT         | Options to be    | casadi::Symbolic |
|                  |                 | passed to        | Qr               |
|                  |                 | generated        |                  |
|                  |                 | function objects |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: symbolic_qr.hpp ";

%feature("docstring") casadi::SymbolicQr::nnz "[INTERNAL] ";

%feature("docstring") casadi::SymbolicQr::ncol "[INTERNAL] ";

%feature("docstring") casadi::SymbolicQr::generate "[INTERNAL]  Generate C
code.

";

%feature("docstring") casadi::SymbolicQr::clear_mem "[INTERNAL]  Clear all
memory (called from destructor)

";

%feature("docstring") casadi::SymbolicQr::init "[INTERNAL]  Initialize.

";

%feature("docstring") casadi::SymbolicQr::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::SymbolicQr::get_options "[INTERNAL]  Options.

";

%feature("docstring") casadi::SymbolicQr::plugin_name "[INTERNAL] ";

%feature("docstring") casadi::SymbolicQr::disp "[INTERNAL]  Display object.

";

%feature("docstring") casadi::SymbolicQr::finalize "[INTERNAL]  Finalize
the object creation This function, which visits the class hierarchy in
reverse order is run after init() has been completed.

";

%feature("docstring") casadi::SymbolicQr::solve "[INTERNAL] ";

%feature("docstring") casadi::SymbolicQr::nfact "[INTERNAL]  Numeric
factorization.

";

%feature("docstring") casadi::SymbolicQr::sfact "[INTERNAL] ";

%feature("docstring") casadi::SymbolicQr::row "[INTERNAL] ";

%feature("docstring") casadi::SymbolicQr::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::SymbolicQr::init_mem "[INTERNAL]  Initalize
memory block.

";

%feature("docstring") casadi::SymbolicQr::construct "[INTERNAL]  Construct
Prepares the function for evaluation.

";

%feature("docstring") casadi::SymbolicQr::colind "[INTERNAL] ";

%feature("docstring") casadi::SymbolicQr::free_mem "[INTERNAL]  Free memory
block.

";

%feature("docstring") casadi::SymbolicQr::release "[INTERNAL]  Release a
memory object.

";


// File: classcasadi_1_1SymbolicSX.xml


// File: classcasadi_1_1Transpose.xml


// File: classcasadi_1_1UnaryMX.xml


// File: classcasadi_1_1UnarySX.xml


// File: classcasadi_1_1Vertcat.xml


// File: classcasadi_1_1Vertsplit.xml


// File: classcasadi_1_1WeakRef.xml
%feature("docstring") casadi::WeakRef "

Weak reference type A weak reference to a SharedObject.

Joel Andersson

C++ includes: shared_object.hpp ";

%feature("docstring") casadi::WeakRef::shared "

Get a shared (owning) reference.

";

%feature("docstring") casadi::WeakRef::__hash__ "

Returns a number that is unique for a given Node. If the Object does not
point to any node, \"0\" is returned.

";

%feature("docstring") casadi::WeakRef::is_null "

Is a null pointer?

";

%feature("docstring") casadi::WeakRef::print_ptr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::WeakRef::WeakRef "

>  casadi::WeakRef::WeakRef(int dummy=0)
------------------------------------------------------------------------

Default constructor.

>  casadi::WeakRef::WeakRef(SharedObject shared)
------------------------------------------------------------------------

Construct from a shared object (also implicit type conversion)

";

%feature("docstring") casadi::WeakRef::disp "

Print a description of the object.

";

%feature("docstring") casadi::WeakRef::get_str "

Get string representation.

";

%feature("docstring") casadi::WeakRef::class_name "

Get class name.

";

%feature("docstring") casadi::WeakRef::alive "

Check if alive.

";


// File: classcasadi_1_1XFunction.xml


// File: classcasadi_1_1XmlFile.xml
%feature("docstring") casadi::XmlFile "

XML parser Can be used for parsing XML files into CasADi data structures.

Joel Andersson

C++ includes: xml_file.hpp ";

%feature("docstring") casadi::XmlFile::get_str "

Get string representation.

";

%feature("docstring") casadi::XmlFile::XmlFile "";

%feature("docstring") casadi::XmlFile::__hash__ "

Returns a number that is unique for a given Node. If the Object does not
point to any node, \"0\" is returned.

";

%feature("docstring") casadi::XmlFile::class_name "

Get class name.

";

%feature("docstring") casadi::XmlFile::is_null "

Is a null pointer?

";

%feature("docstring") casadi::XmlFile::disp "

Print a description of the object.

";

%feature("docstring") casadi::XmlFile::~XmlFile "";

%feature("docstring") casadi::XmlFile::print_ptr "[INTERNAL]  Print the
pointer to the internal class

";


// File: classcasadi_1_1ZeroByZero.xml


// File: classcasadi_1_1ZeroSX.xml


// File: namespaceBonmin.xml


// File: namespacecasadi.xml
%feature("docstring") casadi::is_nondecreasing "
Check if the vector is non-decreasing.

";

%feature("docstring") casadi::matrixName< double > "

Get typename.

";

%feature("docstring") casadi::complement "

Returns the list of all i in [0, size[ not found in supplied list.

The supplied vector may contain duplicates and may be non-monotonous The
supplied vector will be checked for bounds The result vector is guaranteed
to be monotonously increasing

";

%feature("docstring") casadi::conic_option_type "

Get type info for a particular option.

";

%feature("docstring") casadi::temporary_file "";

%feature("docstring") casadi::load_expm "

Explicitly load a plugin dynamically.

";

%feature("docstring") casadi::casadi_rank1 "

>  void casadi::casadi_rank1(T1 *A, const int *sp_A, T1 alpha, const T1 *x)
------------------------------------------------------------------------
[INTERNAL] 
Adds a multiple alpha/2 of the outer product mul(x, trans(x)) to A.

>  void casadi::casadi_rank1(T1 *A, const int *sp_A, T1 alpha, const T1 *x, const T1 *y)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::dense_mul_nt_stride "[INTERNAL] ";

%feature("docstring") casadi::dense_mul_tn "[INTERNAL] ";

%feature("docstring") casadi::dense_mul_nn_stride "[INTERNAL] ";

%feature("docstring") casadi::is_zero "";

%feature("docstring") casadi::dple_out "

>  std::vector<std::string> casadi::dple_out()
------------------------------------------------------------------------

Get output scheme of DPLE solvers.

>  std::string casadi::dple_out(int ind)
------------------------------------------------------------------------

Get DPLE output scheme name by index.

";

%feature("docstring") casadi::casadi_norm_1 "[INTERNAL]  NORM_1: ||x||_1 ->
return.

";

%feature("docstring") casadi::expmsol "

Performs a matrix exponentiation expm(A)

General information
===================



>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| const_A          | OT_BOOL         | Assume A is      | casadi::Expm     |
|                  |                 | constant.        |                  |
|                  |                 | Default: false.  |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| enable_fd        | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation by   |                  |
|                  |                 | finite           |                  |
|                  |                 | differencing.    |                  |
|                  |                 | [default:        |                  |
|                  |                 | false]]          |                  |
+------------------+-----------------+------------------+------------------+
| enable_forward   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using forward    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_jacobian  | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobians of all |                  |
|                  |                 | differentiable   |                  |
|                  |                 | outputs with     |                  |
|                  |                 | respect to all   |                  |
|                  |                 | differentiable   |                  |
|                  |                 | inputs - if      |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_reverse   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | transposed       |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using reverse    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| fd_method        | OT_STRING       | Method for       | casadi::Function |
|                  |                 | finite           | Internal         |
|                  |                 | differencing     |                  |
|                  |                 | [default         |                  |
|                  |                 | 'central']       |                  |
+------------------+-----------------+------------------+------------------+
| fd_options       | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | finite           |                  |
|                  |                 | difference       |                  |
|                  |                 | instance         |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

List of plugins
===============



- slicot

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
Expm.doc(\"myextraplugin\")



--------------------------------------------------------------------------------

slicot
------





--------------------------------------------------------------------------------



Joris Gillis

";

%feature("docstring") casadi::casadi_mtimes "[INTERNAL]  Sparse matrix-
matrix multiplication: z <- z + x*y.

";

%feature("docstring") casadi::integrator_n_out "

Get the number of integrator outputs.

";

%feature("docstring") casadi::slicot_periodic_schur "[INTERNAL] ";

%feature("docstring") casadi::external "

>  Function casadi::external(const std::string &name, const Dict &opts=Dict())
------------------------------------------------------------------------

Load an external function File name is assumed to be ./<f_name>.so.

>  Function casadi::external(const std::string &name, const std::string &bin_name, const Dict &opts=Dict())
------------------------------------------------------------------------

Load an external function File name given.

>  Function casadi::external(const std::string &name, const Importer &compiler, const Dict &opts=Dict())
------------------------------------------------------------------------

Load a just-in-time compiled external function File name given.

";

%feature("docstring") casadi::nlpsol_n_out "

Number of NLP solver outputs.

";

%feature("docstring") casadi::casadi_forward_diff "[INTERNAL] ";

%feature("docstring") casadi::to_slice2 "

Construct nested slices from an index vector (requires is_slice2(v) to be
true)

";

%feature("docstring") casadi::in_range "

>  bool casadi::in_range(const std::vector< T > &v, int upper)
------------------------------------------------------------------------

Check if for each element of v holds: v_i < upper.

>  bool casadi::in_range(const std::vector< T > &v, int lower, int upper)
------------------------------------------------------------------------

Check if for each element of v holds: lower <= v_i < upper.

";

%feature("docstring") casadi::load_integrator "

Explicitly load a plugin dynamically.

";

%feature("docstring") casadi::expm_n_out "

Get the number of expm solver outputs.

";

%feature("docstring") casadi::casadi_sum_viol "[INTERNAL]  Sum of bound
violations.

";

%feature("docstring") casadi::load_nlpsol "

Explicitly load a plugin dynamically.

";

%feature("docstring") casadi::is_increasing "

Check if the vector is strictly increasing.

";

%feature("docstring") casadi::casadi_scal "[INTERNAL]  SCAL: x <- alpha*x.

";

%feature("docstring") casadi::casadi_qr_init "[INTERNAL] ";

%feature("docstring") casadi::Contraction "";

%feature("docstring") casadi::casadi_ldl_row "[INTERNAL] ";

%feature("docstring") casadi::conic_options "

Get all options for a plugin.

";

%feature("docstring") casadi::load_linsol "

Explicitly load a plugin dynamically.

";

%feature("docstring") casadi::casadi_interpn_grad "[INTERNAL] ";

%feature("docstring") casadi::has_interpolant "

Check if a particular plugin is available.

";

%feature("docstring") casadi::conic_debug "

Generate native code in the interfaced language for debugging

";

%feature("docstring") casadi::casadi_swap "[INTERNAL]  SWAP: x <-> y.

";

%feature("docstring") casadi::nlpsol_options "

Get all options for a plugin.

";

%feature("docstring") casadi::einstein_eval "";

%feature("docstring") casadi::uerr "";

%feature("docstring") casadi::conic_option_info "

Get documentation for a particular option.

";

%feature("docstring") casadi::check_exposed "[INTERNAL] ";

%feature("docstring") casadi::casadi_interpn "[INTERNAL] ";

%feature("docstring") casadi::read_matlab "

>  void casadi::read_matlab(std::istream &stream, std::vector< T > &v)
------------------------------------------------------------------------

Read vector, matlab style.

>  void casadi::read_matlab(std::ifstream &file, std::vector< std::vector< T > > &v)
------------------------------------------------------------------------

Read matrix, matlab style.

";

%feature("docstring") casadi::casadi_iamax "[INTERNAL]  IAMAX: index
corresponding to the entry with the largest absolute value.

";

%feature("docstring") casadi::has_expm "

Check if a particular plugin is available.

";

%feature("docstring") casadi::write_matlab "

>  void casadi::write_matlab(std::ostream &stream, const std::vector< T > &v)
------------------------------------------------------------------------

Print vector, matlab style.

>  void casadi::write_matlab(std::ostream &stream, const std::vector< std::vector< T > > &v)
------------------------------------------------------------------------

Print matrix, matlab style.

";

%feature("docstring") casadi::casadi_sparsify "[INTERNAL]  Convert dense to
sparse.

";

%feature("docstring") casadi::hash_sparsity "

>  std::size_t casadi::hash_sparsity(int nrow, int ncol, const std::vector< int > &colind, const std::vector< int > &row)
------------------------------------------------------------------------

Hash a sparsity pattern.

";

%feature("docstring") casadi::is_slice2 "

Check if an index vector can be represented more efficiently as two nested
slices.

";

%feature("docstring") casadi::rootfinder "

Create a solver for rootfinding problems Takes a function where one of the
inputs is unknown and one of the outputs is a residual function that is
always zero, defines a new function where the the unknown input has been
replaced by a guess for the unknown and the residual output has been
replaced by the calculated value for the input.

For a function [y0, y1, ...,yi, .., yn] = F(x0, x1, ..., xj, ..., xm), where
xj is unknown and yi=0, defines a new function [y0, y1, ...,xj, .., yn] =
G(x0, x1, ..., xj_guess, ..., xm),

xj and yi must have the same dimension and d(yi)/d(xj) must be invertable.

By default, the first input is unknown and the first output is the residual.

General information
===================



>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| common_options   | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | auto-generated   | nction           |
|                  |                 | functions        |                  |
+------------------+-----------------+------------------+------------------+
| constraints      | OT_INTVECTOR    | Constrain the    | casadi::Rootfind |
|                  |                 | unknowns. 0      | er               |
|                  |                 | (default): no    |                  |
|                  |                 | constraint on    |                  |
|                  |                 | ui, 1: ui >=     |                  |
|                  |                 | 0.0, -1: ui <=   |                  |
|                  |                 | 0.0, 2: ui >     |                  |
|                  |                 | 0.0, -2: ui <    |                  |
|                  |                 | 0.0.             |                  |
+------------------+-----------------+------------------+------------------+
| implicit_input   | OT_INT          | Index of the     | casadi::Rootfind |
|                  |                 | input that       | er               |
|                  |                 | corresponds to   |                  |
|                  |                 | the actual root- |                  |
|                  |                 | finding          |                  |
+------------------+-----------------+------------------+------------------+
| implicit_output  | OT_INT          | Index of the     | casadi::Rootfind |
|                  |                 | output that      | er               |
|                  |                 | corresponds to   |                  |
|                  |                 | the actual root- |                  |
|                  |                 | finding          |                  |
+------------------+-----------------+------------------+------------------+
| jacobian_functio | OT_FUNCTION     | Function object  | casadi::Rootfind |
| n                |                 | for calculating  | er               |
|                  |                 | the Jacobian     |                  |
|                  |                 | (autogenerated   |                  |
|                  |                 | by default)      |                  |
+------------------+-----------------+------------------+------------------+
| linear_solver    | OT_STRING       | User-defined     | casadi::Rootfind |
|                  |                 | linear solver    | er               |
|                  |                 | class. Needed    |                  |
|                  |                 | for              |                  |
|                  |                 | sensitivities.   |                  |
+------------------+-----------------+------------------+------------------+
| linear_solver_op | OT_DICT         | Options to be    | casadi::Rootfind |
| tions            |                 | passed to the    | er               |
|                  |                 | linear solver.   |                  |
+------------------+-----------------+------------------+------------------+
| monitor          | OT_STRINGVECTOR | Set of user      | casadi::OracleFu |
|                  |                 | problem          | nction           |
|                  |                 | functions to be  |                  |
|                  |                 | monitored        |                  |
+------------------+-----------------+------------------+------------------+
| specific_options | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | specific auto-   | nction           |
|                  |                 | generated        |                  |
|                  |                 | functions,       |                  |
|                  |                 | overwriting the  |                  |
|                  |                 | defaults from    |                  |
|                  |                 | common_options.  |                  |
|                  |                 | Nested           |                  |
|                  |                 | dictionary.      |                  |
+------------------+-----------------+------------------+------------------+

List of plugins
===============



- kinsol

- nlpsol

- newton

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
Rootfinder.doc(\"myextraplugin\")



--------------------------------------------------------------------------------

kinsol
------



KINSOL interface from the Sundials suite

>List of available options

+---------------------------+-----------------+----------------------------+
|            Id             |      Type       |        Description         |
+===========================+=================+============================+
| abstol                    | OT_DOUBLE       | Stopping criterion         |
|                           |                 | tolerance                  |
+---------------------------+-----------------+----------------------------+
| disable_internal_warnings | OT_BOOL         | Disable KINSOL internal    |
|                           |                 | warning messages           |
+---------------------------+-----------------+----------------------------+
| exact_jacobian            | OT_BOOL         | Use exact Jacobian         |
|                           |                 | information                |
+---------------------------+-----------------+----------------------------+
| f_scale                   | OT_DOUBLEVECTOR | Equation scaling factors   |
+---------------------------+-----------------+----------------------------+
| iterative_solver          | OT_STRING       | gmres|bcgstab|tfqmr        |
+---------------------------+-----------------+----------------------------+
| linear_solver_type        | OT_STRING       | dense|banded|iterative|use |
|                           |                 | r_defined                  |
+---------------------------+-----------------+----------------------------+
| lower_bandwidth           | OT_INT          | Lower bandwidth for banded |
|                           |                 | linear solvers             |
+---------------------------+-----------------+----------------------------+
| max_iter                  | OT_INT          | Maximum number of Newton   |
|                           |                 | iterations. Putting 0 sets |
|                           |                 | the default value of       |
|                           |                 | KinSol.                    |
+---------------------------+-----------------+----------------------------+
| max_krylov                | OT_INT          | Maximum Krylov space       |
|                           |                 | dimension                  |
+---------------------------+-----------------+----------------------------+
| pretype                   | OT_STRING       | Type of preconditioner     |
+---------------------------+-----------------+----------------------------+
| strategy                  | OT_STRING       | Globalization strategy     |
+---------------------------+-----------------+----------------------------+
| u_scale                   | OT_DOUBLEVECTOR | Variable scaling factors   |
+---------------------------+-----------------+----------------------------+
| upper_bandwidth           | OT_INT          | Upper bandwidth for banded |
|                           |                 | linear solvers             |
+---------------------------+-----------------+----------------------------+
| use_preconditioner        | OT_BOOL         | Precondition an iterative  |
|                           |                 | solver                     |
+---------------------------+-----------------+----------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

nlpsol
------





--------------------------------------------------------------------------------





--------------------------------------------------------------------------------

newton
------



Implements simple newton iterations to solve an implicit function.

>List of available options

+-----------------+-----------+--------------------------------------------+
|       Id        |   Type    |                Description                 |
+=================+===========+============================================+
| abstol          | OT_DOUBLE | Stopping criterion tolerance on max(|F|)   |
+-----------------+-----------+--------------------------------------------+
| abstolStep      | OT_DOUBLE | Stopping criterion tolerance on step size  |
+-----------------+-----------+--------------------------------------------+
| max_iter        | OT_INT    | Maximum number of Newton iterations to     |
|                 |           | perform before returning.                  |
+-----------------+-----------+--------------------------------------------+
| print_iteration | OT_BOOL   | Print information about each iteration     |
+-----------------+-----------+--------------------------------------------+

--------------------------------------------------------------------------------



Joel Andersson

";

%feature("docstring") casadi::casadi_qr_sparsities "[INTERNAL] ";

%feature("docstring") casadi::casadi_ldl "[INTERNAL] ";

%feature("docstring") casadi::casadi_imax "[INTERNAL] ";

%feature("docstring") casadi::dple_n_in "

Get the number of QP solver inputs.

";

%feature("docstring") casadi::has_negative "

Check if the vector has negative entries.

";

%feature("docstring") casadi::to_slice "

>  Slice casadi::to_slice(const IM &x, bool ind1=false)
------------------------------------------------------------------------

Convert IM to Slice.

>  Slice casadi::to_slice(const std::vector< int > &v, bool ind1=false)
------------------------------------------------------------------------

Construct from an index vector (requires is_slice(v) to be true)

";

%feature("docstring") casadi::dense_copy_stride "[INTERNAL] ";

%feature("docstring") casadi::doc_linsol "

Get the documentation string for a plugin.

";

%feature("docstring") casadi::expm_n_in "

Get the number of expm solver inputs.

";

%feature("docstring") casadi::conic_in "

>  std::vector<std::string> casadi::conic_in()
------------------------------------------------------------------------

Get input scheme of QP solvers.

>  std::string casadi::conic_in(int ind)
------------------------------------------------------------------------

Get QP solver input scheme name by index.

";

%feature("docstring") casadi::doc_expm "

Get the documentation string for a plugin.

";

%feature("docstring") casadi::lookupvector "

>  std::vector<int> casadi::lookupvector(const std::vector< int > &v, int size)
------------------------------------------------------------------------

Returns a vector for quickly looking up entries of supplied list.

lookupvector[i]!=-1 <=> v contains i v[lookupvector[i]] == i <=> v contains
i

Duplicates are treated by looking up last occurrence

";

%feature("docstring") casadi::slicot_mb03vy "";

%feature("docstring") casadi::doc_dple "

Get the documentation string for a plugin.

";

%feature("docstring") casadi::casadi_imin "[INTERNAL] ";

%feature("docstring") casadi::casadi_copy_int "[INTERNAL] ";

%feature("docstring") casadi::trim_path "";

%feature("docstring") casadi::uout "";

%feature("docstring") casadi::has_integrator "

Check if a particular plugin is available.

";

%feature("docstring") casadi::casadi_central_diff "[INTERNAL] ";

%feature("docstring") casadi::integrator "

>  Function casadi::integrator(const std::string &name, const std::string &solver, const SXDict &dae, const Dict &opts=Dict())
------------------------------------------------------------------------

Create an ODE/DAE integrator Solves an initial value problem (IVP) coupled
to a terminal value problem with differential equation given as an implicit
ODE coupled to an algebraic equation and a set of quadratures:



::

  Initial conditions at t=t0
  x(t0)  = x0
  q(t0)  = 0
  
  Forward integration from t=t0 to t=tf
  der(x) = function(x, z, p, t)                  Forward ODE
  0 = fz(x, z, p, t)                  Forward algebraic equations
  der(q) = fq(x, z, p, t)                  Forward quadratures
  
  Terminal conditions at t=tf
  rx(tf)  = rx0
  rq(tf)  = 0
  
  Backward integration from t=tf to t=t0
  der(rx) = gx(rx, rz, rp, x, z, p, t)        Backward ODE
  0 = gz(rx, rz, rp, x, z, p, t)        Backward algebraic equations
  der(rq) = gq(rx, rz, rp, x, z, p, t)        Backward quadratures
  
  where we assume that both the forward and backwards integrations are index-1
  (i.e. dfz/dz, dgz/drz are invertible) and furthermore that
  gx, gz and gq have a linear dependency on rx, rz and rp.



General information
===================



>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| augmented_option | OT_DICT         | Options to be    | casadi::Integrat |
| s                |                 | passed down to   | or               |
|                  |                 | the augmented    |                  |
|                  |                 | integrator, if   |                  |
|                  |                 | one is           |                  |
|                  |                 | constructed.     |                  |
+------------------+-----------------+------------------+------------------+
| common_options   | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | auto-generated   | nction           |
|                  |                 | functions        |                  |
+------------------+-----------------+------------------+------------------+
| expand           | OT_BOOL         | Replace MX with  | casadi::Integrat |
|                  |                 | SX expressions   | or               |
|                  |                 | in problem       |                  |
|                  |                 | formulation      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| grid             | OT_DOUBLEVECTOR | Time grid        | casadi::Integrat |
|                  |                 |                  | or               |
+------------------+-----------------+------------------+------------------+
| monitor          | OT_STRINGVECTOR | Set of user      | casadi::OracleFu |
|                  |                 | problem          | nction           |
|                  |                 | functions to be  |                  |
|                  |                 | monitored        |                  |
+------------------+-----------------+------------------+------------------+
| number_of_finite | OT_INT          | Number of finite | casadi::Integrat |
| _elements        |                 | elements         | or               |
+------------------+-----------------+------------------+------------------+
| output_t0        | OT_BOOL         | Output the state | casadi::Integrat |
|                  |                 | at the initial   | or               |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| print_stats      | OT_BOOL         | Print out        | casadi::Integrat |
|                  |                 | statistics after | or               |
|                  |                 | integration      |                  |
+------------------+-----------------+------------------+------------------+
| rootfinder       | OT_STRING       | An implicit      | casadi::Integrat |
|                  |                 | function solver  | or               |
+------------------+-----------------+------------------+------------------+
| rootfinder_optio | OT_DICT         | Options to be    | casadi::Integrat |
| ns               |                 | passed to the    | or               |
|                  |                 | NLP Solver       |                  |
+------------------+-----------------+------------------+------------------+
| specific_options | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | specific auto-   | nction           |
|                  |                 | generated        |                  |
|                  |                 | functions,       |                  |
|                  |                 | overwriting the  |                  |
|                  |                 | defaults from    |                  |
|                  |                 | common_options.  |                  |
|                  |                 | Nested           |                  |
|                  |                 | dictionary.      |                  |
+------------------+-----------------+------------------+------------------+
| t0               | OT_DOUBLE       | Beginning of the | casadi::Integrat |
|                  |                 | time horizon     | or               |
+------------------+-----------------+------------------+------------------+
| tf               | OT_DOUBLE       | End of the time  | casadi::Integrat |
|                  |                 | horizon          | or               |
+------------------+-----------------+------------------+------------------+

>Input scheme: casadi::IntegratorInput (INTEGRATOR_NUM_IN = 6)

+----------------+-------+-------------------------------------------------+
|   Full name    | Short |                   Description                   |
+================+=======+=================================================+
| INTEGRATOR_X0  | x0    | Differential state at the initial time.         |
+----------------+-------+-------------------------------------------------+
| INTEGRATOR_P   | p     | Parameters.                                     |
+----------------+-------+-------------------------------------------------+
| INTEGRATOR_Z0  | z0    | Initial guess for the algebraic variable.       |
+----------------+-------+-------------------------------------------------+
| INTEGRATOR_RX0 | rx0   | Backward differential state at the final time.  |
+----------------+-------+-------------------------------------------------+
| INTEGRATOR_RP  | rp    | Backward parameter vector.                      |
+----------------+-------+-------------------------------------------------+
| INTEGRATOR_RZ0 | rz0   | Initial guess for the backwards algebraic       |
|                |       | variable.                                       |
+----------------+-------+-------------------------------------------------+

>Output scheme: casadi::IntegratorOutput (INTEGRATOR_NUM_OUT = 6)

+----------------+-------+-------------------------------------------------+
|   Full name    | Short |                   Description                   |
+================+=======+=================================================+
| INTEGRATOR_XF  | xf    | Differential state at the final time.           |
+----------------+-------+-------------------------------------------------+
| INTEGRATOR_QF  | qf    | Quadrature state at the final time.             |
+----------------+-------+-------------------------------------------------+
| INTEGRATOR_ZF  | zf    | Algebraic variable at the final time.           |
+----------------+-------+-------------------------------------------------+
| INTEGRATOR_RXF | rxf   | Backward differential state at the initial      |
|                |       | time.                                           |
+----------------+-------+-------------------------------------------------+
| INTEGRATOR_RQF | rqf   | Backward quadrature state at the initial time.  |
+----------------+-------+-------------------------------------------------+
| INTEGRATOR_RZF | rzf   | Backward algebraic variable at the initial      |
|                |       | time.                                           |
+----------------+-------+-------------------------------------------------+

List of plugins
===============



- cvodes

- idas

- collocation

- rk

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
Integrator.doc(\"myextraplugin\")



--------------------------------------------------------------------------------

cvodes
------



Interface to CVodes from the Sundials suite.

A call to evaluate will integrate to the end.

You can retrieve the entire state trajectory as follows, after the evaluate
call: Call reset. Then call integrate(t_i) and getOuput for a series of
times t_i.

>List of available options

+----------------------------+-----------+---------------------------------+
|             Id             |   Type    |           Description           |
+============================+===========+=================================+
| abstol                     | OT_DOUBLE | Absolute tolerence for the IVP  |
|                            |           | solution                        |
+----------------------------+-----------+---------------------------------+
| disable_internal_warnings  | OT_BOOL   | Disable SUNDIALS internal       |
|                            |           | warning messages                |
+----------------------------+-----------+---------------------------------+
| fsens_all_at_once          | OT_BOOL   | Calculate all right hand sides  |
|                            |           | of the sensitivity equations at |
|                            |           | once                            |
+----------------------------+-----------+---------------------------------+
| fsens_err_con              | OT_BOOL   | include the forward             |
|                            |           | sensitivities in all error      |
|                            |           | controls                        |
+----------------------------+-----------+---------------------------------+
| interpolation_type         | OT_STRING | Type of interpolation for the   |
|                            |           | adjoint sensitivities           |
+----------------------------+-----------+---------------------------------+
| linear_multistep_method    | OT_STRING | Integrator scheme: BDF|adams    |
+----------------------------+-----------+---------------------------------+
| linear_solver              | OT_STRING | A custom linear solver creator  |
|                            |           | function [default: csparse]     |
+----------------------------+-----------+---------------------------------+
| linear_solver_options      | OT_DICT   | Options to be passed to the     |
|                            |           | linear solver                   |
+----------------------------+-----------+---------------------------------+
| max_krylov                 | OT_INT    | Maximum Krylov subspace size    |
+----------------------------+-----------+---------------------------------+
| max_multistep_order        | OT_INT    | Maximum order for the           |
|                            |           | (variable-order) multistep      |
|                            |           | method                          |
+----------------------------+-----------+---------------------------------+
| max_num_steps              | OT_INT    | Maximum number of integrator    |
|                            |           | steps                           |
+----------------------------+-----------+---------------------------------+
| max_order                  | OT_DOUBLE | Maximum order                   |
+----------------------------+-----------+---------------------------------+
| newton_scheme              | OT_STRING | Linear solver scheme in the     |
|                            |           | Newton method:                  |
|                            |           | DIRECT|gmres|bcgstab|tfqmr      |
+----------------------------+-----------+---------------------------------+
| nonlin_conv_coeff          | OT_DOUBLE | Coefficient in the nonlinear    |
|                            |           | convergence test                |
+----------------------------+-----------+---------------------------------+
| nonlinear_solver_iteration | OT_STRING | Nonlinear solver type:          |
|                            |           | NEWTON|functional               |
+----------------------------+-----------+---------------------------------+
| quad_err_con               | OT_BOOL   | Should the quadratures affect   |
|                            |           | the step size control           |
+----------------------------+-----------+---------------------------------+
| reltol                     | OT_DOUBLE | Relative tolerence for the IVP  |
|                            |           | solution                        |
+----------------------------+-----------+---------------------------------+
| second_order_correction    | OT_BOOL   | Second order correction in the  |
|                            |           | augmented system Jacobian       |
|                            |           | [true]                          |
+----------------------------+-----------+---------------------------------+
| sensitivity_method         | OT_STRING | Sensitivity method:             |
|                            |           | SIMULTANEOUS|staggered          |
+----------------------------+-----------+---------------------------------+
| step0                      | OT_DOUBLE | initial step size [default:     |
|                            |           | 0/estimated]                    |
+----------------------------+-----------+---------------------------------+
| steps_per_checkpoint       | OT_INT    | Number of steps between two     |
|                            |           | consecutive checkpoints         |
+----------------------------+-----------+---------------------------------+
| stop_at_end                | OT_BOOL   | Stop the integrator at the end  |
|                            |           | of the interval                 |
+----------------------------+-----------+---------------------------------+
| use_preconditioner         | OT_BOOL   | Precondition the iterative      |
|                            |           | solver [default: true]          |
+----------------------------+-----------+---------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

idas
----



Interface to IDAS from the Sundials suite.

>List of available options

+---------------------------+-----------------+----------------------------+
|            Id             |      Type       |        Description         |
+===========================+=================+============================+
| abstol                    | OT_DOUBLE       | Absolute tolerence for the |
|                           |                 | IVP solution               |
+---------------------------+-----------------+----------------------------+
| abstolv                   | OT_DOUBLEVECTOR | Absolute tolerarance for   |
|                           |                 | each component             |
+---------------------------+-----------------+----------------------------+
| calc_ic                   | OT_BOOL         | Use IDACalcIC to get       |
|                           |                 | consistent initial         |
|                           |                 | conditions.                |
+---------------------------+-----------------+----------------------------+
| calc_icB                  | OT_BOOL         | Use IDACalcIC to get       |
|                           |                 | consistent initial         |
|                           |                 | conditions for backwards   |
|                           |                 | system [default: equal to  |
|                           |                 | calc_ic].                  |
+---------------------------+-----------------+----------------------------+
| cj_scaling                | OT_BOOL         | IDAS scaling on cj for the |
|                           |                 | user-defined linear solver |
|                           |                 | module                     |
+---------------------------+-----------------+----------------------------+
| disable_internal_warnings | OT_BOOL         | Disable SUNDIALS internal  |
|                           |                 | warning messages           |
+---------------------------+-----------------+----------------------------+
| first_time                | OT_DOUBLE       | First requested time as a  |
|                           |                 | fraction of the time       |
|                           |                 | interval                   |
+---------------------------+-----------------+----------------------------+
| fsens_err_con             | OT_BOOL         | include the forward        |
|                           |                 | sensitivities in all error |
|                           |                 | controls                   |
+---------------------------+-----------------+----------------------------+
| init_xdot                 | OT_DOUBLEVECTOR | Initial values for the     |
|                           |                 | state derivatives          |
+---------------------------+-----------------+----------------------------+
| interpolation_type        | OT_STRING       | Type of interpolation for  |
|                           |                 | the adjoint sensitivities  |
+---------------------------+-----------------+----------------------------+
| linear_solver             | OT_STRING       | A custom linear solver     |
|                           |                 | creator function [default: |
|                           |                 | csparse]                   |
+---------------------------+-----------------+----------------------------+
| linear_solver_options     | OT_DICT         | Options to be passed to    |
|                           |                 | the linear solver          |
+---------------------------+-----------------+----------------------------+
| max_krylov                | OT_INT          | Maximum Krylov subspace    |
|                           |                 | size                       |
+---------------------------+-----------------+----------------------------+
| max_multistep_order       | OT_INT          | Maximum order for the      |
|                           |                 | (variable-order) multistep |
|                           |                 | method                     |
+---------------------------+-----------------+----------------------------+
| max_num_steps             | OT_INT          | Maximum number of          |
|                           |                 | integrator steps           |
+---------------------------+-----------------+----------------------------+
| max_order                 | OT_DOUBLE       | Maximum order              |
+---------------------------+-----------------+----------------------------+
| max_step_size             | OT_DOUBLE       | Maximim step size          |
+---------------------------+-----------------+----------------------------+
| newton_scheme             | OT_STRING       | Linear solver scheme in    |
|                           |                 | the Newton method:         |
|                           |                 | DIRECT|gmres|bcgstab|tfqmr |
+---------------------------+-----------------+----------------------------+
| nonlin_conv_coeff         | OT_DOUBLE       | Coefficient in the         |
|                           |                 | nonlinear convergence test |
+---------------------------+-----------------+----------------------------+
| quad_err_con              | OT_BOOL         | Should the quadratures     |
|                           |                 | affect the step size       |
|                           |                 | control                    |
+---------------------------+-----------------+----------------------------+
| reltol                    | OT_DOUBLE       | Relative tolerence for the |
|                           |                 | IVP solution               |
+---------------------------+-----------------+----------------------------+
| second_order_correction   | OT_BOOL         | Second order correction in |
|                           |                 | the augmented system       |
|                           |                 | Jacobian [true]            |
+---------------------------+-----------------+----------------------------+
| sensitivity_method        | OT_STRING       | Sensitivity method:        |
|                           |                 | SIMULTANEOUS|staggered     |
+---------------------------+-----------------+----------------------------+
| step0                     | OT_DOUBLE       | initial step size          |
|                           |                 | [default: 0/estimated]     |
+---------------------------+-----------------+----------------------------+
| steps_per_checkpoint      | OT_INT          | Number of steps between    |
|                           |                 | two consecutive            |
|                           |                 | checkpoints                |
+---------------------------+-----------------+----------------------------+
| stop_at_end               | OT_BOOL         | Stop the integrator at the |
|                           |                 | end of the interval        |
+---------------------------+-----------------+----------------------------+
| suppress_algebraic        | OT_BOOL         | Suppress algebraic         |
|                           |                 | variables in the error     |
|                           |                 | testing                    |
+---------------------------+-----------------+----------------------------+
| use_preconditioner        | OT_BOOL         | Precondition the iterative |
|                           |                 | solver [default: true]     |
+---------------------------+-----------------+----------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

collocation
-----------



Fixed-step implicit Runge-Kutta integrator ODE/DAE integrator based on
collocation schemes

The method is still under development

>List of available options

+---------------------------+-----------------+----------------------------+
|            Id             |      Type       |        Description         |
+===========================+=================+============================+
| augmented_options         | OT_DICT         | Options to be passed down  |
|                           |                 | to the augmented           |
|                           |                 | integrator, if one is      |
|                           |                 | constructed.               |
+---------------------------+-----------------+----------------------------+
| collocation_scheme        | OT_STRING       | Collocation scheme:        |
|                           |                 | radau|legendre             |
+---------------------------+-----------------+----------------------------+
| expand                    | OT_BOOL         | Replace MX with SX         |
|                           |                 | expressions in problem     |
|                           |                 | formulation [false]        |
+---------------------------+-----------------+----------------------------+
| grid                      | OT_DOUBLEVECTOR | Time grid                  |
+---------------------------+-----------------+----------------------------+
| interpolation_order       | OT_INT          | Order of the interpolating |
|                           |                 | polynomials                |
+---------------------------+-----------------+----------------------------+
| number_of_finite_elements | OT_INT          | Number of finite elements  |
+---------------------------+-----------------+----------------------------+
| output_t0                 | OT_BOOL         | Output the state at the    |
|                           |                 | initial time               |
+---------------------------+-----------------+----------------------------+
| print_stats               | OT_BOOL         | Print out statistics after |
|                           |                 | integration                |
+---------------------------+-----------------+----------------------------+
| rootfinder                | OT_STRING       | An implicit function       |
|                           |                 | solver                     |
+---------------------------+-----------------+----------------------------+
| rootfinder_options        | OT_DICT         | Options to be passed to    |
|                           |                 | the NLP Solver             |
+---------------------------+-----------------+----------------------------+
| t0                        | OT_DOUBLE       | Beginning of the time      |
|                           |                 | horizon                    |
+---------------------------+-----------------+----------------------------+
| tf                        | OT_DOUBLE       | End of the time horizon    |
+---------------------------+-----------------+----------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

rk --



Fixed-step explicit Runge-Kutta integrator for ODEs Currently implements
RK4.

The method is still under development

--------------------------------------------------------------------------------



Joel Andersson

";

%feature("docstring") casadi::integrator_out "

>  std::vector<std::string> casadi::integrator_out()
------------------------------------------------------------------------

Get integrator output scheme of integrators.

>  std::string casadi::integrator_out(int ind)
------------------------------------------------------------------------

Get output scheme name by index.

";

%feature("docstring") casadi::has_dple "

Check if a particular plugin is available.

";

%feature("docstring") casadi::replace_mat "[INTERNAL] ";

%feature("docstring") casadi::dense_mul_nn "[INTERNAL] ";

%feature("docstring") casadi::load_interpolant "

Explicitly load a plugin dynamically.

";

%feature("docstring") casadi::integrator_n_in "

Get the number of integrator inputs.

";

%feature("docstring") casadi::collocation_points "

Obtain collocation points of specific order and scheme.

Parameters:
-----------

order:  Which order (1 to 9 supported)

scheme:  'radau' or 'legendre'

";

%feature("docstring") casadi::conic "

Create a QP solver Solves the following strictly convex problem:



::

  min          1/2 x' H x + g' x
  x
  
  subject to
  LBA <= A x <= UBA
  LBX <= x   <= UBX
  
  with :
  H sparse (n x n) positive definite
  g dense  (n x 1)
  
  n: number of decision variables (x)
  nc: number of constraints (A)



If H is not positive-definite, the solver should throw an error.

General information
===================



>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| discrete         | OT_BOOLVECTOR   | Indicates which  | casadi::Conic    |
|                  |                 | of the variables |                  |
|                  |                 | are discrete,    |                  |
|                  |                 | i.e. integer-    |                  |
|                  |                 | valued           |                  |
+------------------+-----------------+------------------+------------------+
| enable_fd        | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation by   |                  |
|                  |                 | finite           |                  |
|                  |                 | differencing.    |                  |
|                  |                 | [default:        |                  |
|                  |                 | false]]          |                  |
+------------------+-----------------+------------------+------------------+
| enable_forward   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using forward    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_jacobian  | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobians of all |                  |
|                  |                 | differentiable   |                  |
|                  |                 | outputs with     |                  |
|                  |                 | respect to all   |                  |
|                  |                 | differentiable   |                  |
|                  |                 | inputs - if      |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_reverse   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | transposed       |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using reverse    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| fd_method        | OT_STRING       | Method for       | casadi::Function |
|                  |                 | finite           | Internal         |
|                  |                 | differencing     |                  |
|                  |                 | [default         |                  |
|                  |                 | 'central']       |                  |
+------------------+-----------------+------------------+------------------+
| fd_options       | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | finite           |                  |
|                  |                 | difference       |                  |
|                  |                 | instance         |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

>Input scheme: casadi::ConicInput (CONIC_NUM_IN = 10)

+--------------+--------+--------------------------------------------------+
|  Full name   | Short  |                   Description                    |
+==============+========+==================================================+
| CONIC_H      | h      | The square matrix H: sparse, (n x n). Only the   |
|              |        | lower triangular part is actually used. The      |
|              |        | matrix is assumed to be symmetrical.             |
+--------------+--------+--------------------------------------------------+
| CONIC_G      | g      | The vector g: dense, (n x 1)                     |
+--------------+--------+--------------------------------------------------+
| CONIC_A      | a      | The matrix A: sparse, (nc x n) - product with x  |
|              |        | must be dense.                                   |
+--------------+--------+--------------------------------------------------+
| CONIC_LBA    | lba    | dense, (nc x 1)                                  |
+--------------+--------+--------------------------------------------------+
| CONIC_UBA    | uba    | dense, (nc x 1)                                  |
+--------------+--------+--------------------------------------------------+
| CONIC_LBX    | lbx    | dense, (n x 1)                                   |
+--------------+--------+--------------------------------------------------+
| CONIC_UBX    | ubx    | dense, (n x 1)                                   |
+--------------+--------+--------------------------------------------------+
| CONIC_X0     | x0     | dense, (n x 1)                                   |
+--------------+--------+--------------------------------------------------+
| CONIC_LAM_X0 | lam_x0 | dense                                            |
+--------------+--------+--------------------------------------------------+
| CONIC_LAM_A0 | lam_a0 | dense                                            |
+--------------+--------+--------------------------------------------------+

>Output scheme: casadi::ConicOutput (CONIC_NUM_OUT = 4)

+-------------+-------+---------------------------------------------------+
|  Full name  | Short |                    Description                    |
+=============+=======+===================================================+
| CONIC_X     | x     | The primal solution.                              |
+-------------+-------+---------------------------------------------------+
| CONIC_COST  | cost  | The optimal cost.                                 |
+-------------+-------+---------------------------------------------------+
| CONIC_LAM_A | lam_a | The dual solution corresponding to linear bounds. |
+-------------+-------+---------------------------------------------------+
| CONIC_LAM_X | lam_x | The dual solution corresponding to simple bounds. |
+-------------+-------+---------------------------------------------------+

List of plugins
===============



- clp

- cplex

- gurobi

- hpmpc

- ooqp

- qpoases

- sqic

- nlpsol

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
Conic.doc(\"myextraplugin\")



--------------------------------------------------------------------------------

clp
---



Interface to Clp solver for sparse Quadratic Programs

--------------------------------------------------------------------------------





--------------------------------------------------------------------------------

cplex
-----



Interface to Cplex solver for sparse Quadratic Programs

>List of available options

+---------------+-----------+----------------------------------------------+
|      Id       |   Type    |                 Description                  |
+===============+===========+==============================================+
| cplex         | OT_DICT   | Options to be passed to CPLEX                |
+---------------+-----------+----------------------------------------------+
| dep_check     | OT_INT    | Detect redundant constraints.                |
+---------------+-----------+----------------------------------------------+
| dump_filename | OT_STRING | The filename to dump to.                     |
+---------------+-----------+----------------------------------------------+
| dump_to_file  | OT_BOOL   | Dumps QP to file in CPLEX format.            |
+---------------+-----------+----------------------------------------------+
| qp_method     | OT_INT    | Determines which CPLEX algorithm to use.     |
+---------------+-----------+----------------------------------------------+
| tol           | OT_DOUBLE | Tolerance of solver                          |
+---------------+-----------+----------------------------------------------+
| warm_start    | OT_BOOL   | Use warm start with simplex methods (affects |
|               |           | only the simplex methods).                   |
+---------------+-----------+----------------------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

gurobi
------



Interface to the GUROBI Solver for quadratic programming

>List of available options

+-------+-----------------+------------------------------------------------+
|  Id   |      Type       |                  Description                   |
+=======+=================+================================================+
| vtype | OT_STRINGVECTOR | Type of variables:                             |
|       |                 | [CONTINUOUS|binary|integer|semicont|semiint]   |
+-------+-----------------+------------------------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

hpmpc
-----



Interface to HMPC Solver

In order to use this interface, you must:

Decision variables must only by state and control, and the variable ordering
must be [x0 u0 x1 u1 ...]

The constraints must be in order: [ gap0 lincon0 gap1 lincon1 ]

gap: Ak+1 = Ak xk + Bk uk lincon: yk= Ck xk + Dk uk



::

         A0 B0 -I
         C0 D0
                A1 B1 -I
                C1 D1



where I must be a diagonal sparse matrix Either supply all of N, nx, ng, nu
options or rely on automatic detection

>List of available options

+----------------+--------------+------------------------------------------+
|       Id       |     Type     |               Description                |
+================+==============+==========================================+
| N              | OT_INT       | OCP horizon                              |
+----------------+--------------+------------------------------------------+
| blasfeo_target | OT_STRING    | hpmpc target                             |
+----------------+--------------+------------------------------------------+
| inf            | OT_DOUBLE    | HPMPC cannot handle infinities.          |
|                |              | Infinities will be replaced by this      |
|                |              | option's value.                          |
+----------------+--------------+------------------------------------------+
| max_iter       | OT_INT       | Max number of iterations                 |
+----------------+--------------+------------------------------------------+
| mu0            | OT_DOUBLE    | Max element in cost function as estimate |
|                |              | of max multiplier                        |
+----------------+--------------+------------------------------------------+
| ng             | OT_INTVECTOR | Number of non-dynamic constraints,       |
|                |              | length N+1                               |
+----------------+--------------+------------------------------------------+
| nu             | OT_INTVECTOR | Number of controls, length N             |
+----------------+--------------+------------------------------------------+
| nx             | OT_INTVECTOR | Number of states, length N+1             |
+----------------+--------------+------------------------------------------+
| target         | OT_STRING    | hpmpc target                             |
+----------------+--------------+------------------------------------------+
| tol            | OT_DOUBLE    | Tolerance in the duality measure         |
+----------------+--------------+------------------------------------------+
| warm_start     | OT_BOOL      | Use warm-starting                        |
+----------------+--------------+------------------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

ooqp
----



Interface to the OOQP Solver for quadratic programming The current
implementation assumes that OOQP is configured with the MA27 sparse linear
solver.

NOTE: when doing multiple calls to evaluate(), check if you need to
reInit();

>List of available options

+-------------+-----------+------------------------------------------------+
|     Id      |   Type    |                  Description                   |
+=============+===========+================================================+
| artol       | OT_DOUBLE | tolerance as provided with setArTol to OOQP    |
+-------------+-----------+------------------------------------------------+
| mutol       | OT_DOUBLE | tolerance as provided with setMuTol to OOQP    |
+-------------+-----------+------------------------------------------------+
| print_level | OT_INT    | Print level. OOQP listens to print_level 0, 10 |
|             |           | and 100                                        |
+-------------+-----------+------------------------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

qpoases
-------



Interface to QPOases Solver for quadratic programming

>List of available options

+-------------------------------+-----------+------------------------------+
|              Id               |   Type    |         Description          |
+===============================+===========+==============================+
| CPUtime                       | OT_DOUBLE | The maximum allowed CPU time |
|                               |           | in seconds for the whole     |
|                               |           | initialisation (and the      |
|                               |           | actually required one on     |
|                               |           | output). Disabled if unset.  |
+-------------------------------+-----------+------------------------------+
| boundRelaxation               | OT_DOUBLE | Initial relaxation of bounds |
|                               |           | to start homotopy and        |
|                               |           | initial value for far        |
|                               |           | bounds.                      |
+-------------------------------+-----------+------------------------------+
| boundTolerance                | OT_DOUBLE | If upper and lower bounds    |
|                               |           | differ less than this        |
|                               |           | tolerance, they are regarded |
|                               |           | equal, i.e. as equality      |
|                               |           | constraint.                  |
+-------------------------------+-----------+------------------------------+
| enableCholeskyRefactorisation | OT_INT    | Specifies the frequency of a |
|                               |           | full re-factorisation of     |
|                               |           | projected Hessian matrix: 0: |
|                               |           | turns them off, 1: uses them |
|                               |           | at each iteration etc.       |
+-------------------------------+-----------+------------------------------+
| enableDriftCorrection         | OT_INT    | Specifies the frequency of   |
|                               |           | drift corrections: 0: turns  |
|                               |           | them off.                    |
+-------------------------------+-----------+------------------------------+
| enableEqualities              | OT_BOOL   | Specifies whether equalities |
|                               |           | should be treated as always  |
|                               |           | active (True) or not (False) |
+-------------------------------+-----------+------------------------------+
| enableFarBounds               | OT_BOOL   | Enables the use of far       |
|                               |           | bounds.                      |
+-------------------------------+-----------+------------------------------+
| enableFlippingBounds          | OT_BOOL   | Enables the use of flipping  |
|                               |           | bounds.                      |
+-------------------------------+-----------+------------------------------+
| enableFullLITests             | OT_BOOL   | Enables condition-hardened   |
|                               |           | (but more expensive) LI      |
|                               |           | test.                        |
+-------------------------------+-----------+------------------------------+
| enableInertiaCorrection       | OT_BOOL   | Should working set be        |
|                               |           | repaired when negative       |
|                               |           | curvature is discovered      |
|                               |           | during hotstart.             |
+-------------------------------+-----------+------------------------------+
| enableNZCTests                | OT_BOOL   | Enables nonzero curvature    |
|                               |           | tests.                       |
+-------------------------------+-----------+------------------------------+
| enableRamping                 | OT_BOOL   | Enables ramping.             |
+-------------------------------+-----------+------------------------------+
| enableRegularisation          | OT_BOOL   | Enables automatic Hessian    |
|                               |           | regularisation.              |
+-------------------------------+-----------+------------------------------+
| epsDen                        | OT_DOUBLE | Denominator tolerance for    |
|                               |           | ratio tests.                 |
+-------------------------------+-----------+------------------------------+
| epsFlipping                   | OT_DOUBLE | Tolerance of squared         |
|                               |           | Cholesky diagonal factor     |
|                               |           | which triggers flipping      |
|                               |           | bound.                       |
+-------------------------------+-----------+------------------------------+
| epsIterRef                    | OT_DOUBLE | Early termination tolerance  |
|                               |           | for iterative refinement.    |
+-------------------------------+-----------+------------------------------+
| epsLITests                    | OT_DOUBLE | Tolerance for linear         |
|                               |           | independence tests.          |
+-------------------------------+-----------+------------------------------+
| epsNZCTests                   | OT_DOUBLE | Tolerance for nonzero        |
|                               |           | curvature tests.             |
+-------------------------------+-----------+------------------------------+
| epsNum                        | OT_DOUBLE | Numerator tolerance for      |
|                               |           | ratio tests.                 |
+-------------------------------+-----------+------------------------------+
| epsRegularisation             | OT_DOUBLE | Scaling factor of identity   |
|                               |           | matrix used for Hessian      |
|                               |           | regularisation.              |
+-------------------------------+-----------+------------------------------+
| finalRamping                  | OT_DOUBLE | Final value for ramping      |
|                               |           | strategy.                    |
+-------------------------------+-----------+------------------------------+
| growFarBounds                 | OT_DOUBLE | Factor to grow far bounds.   |
+-------------------------------+-----------+------------------------------+
| hessian_type                  | OT_STRING | Type of Hessian - see        |
|                               |           | qpOASES documentation [UNKNO |
|                               |           | WN|posdef|semidef|indef|zero |
|                               |           | |identity]]                  |
+-------------------------------+-----------+------------------------------+
| initialFarBounds              | OT_DOUBLE | Initial size for far bounds. |
+-------------------------------+-----------+------------------------------+
| initialRamping                | OT_DOUBLE | Start value for ramping      |
|                               |           | strategy.                    |
+-------------------------------+-----------+------------------------------+
| initialStatusBounds           | OT_STRING | Initial status of bounds at  |
|                               |           | first iteration.             |
+-------------------------------+-----------+------------------------------+
| linsol_plugin                 | OT_STRING | Linear solver plugin         |
+-------------------------------+-----------+------------------------------+
| maxDualJump                   | OT_DOUBLE | Maximum allowed jump in dual |
|                               |           | variables in linear          |
|                               |           | independence tests.          |
+-------------------------------+-----------+------------------------------+
| maxPrimalJump                 | OT_DOUBLE | Maximum allowed jump in      |
|                               |           | primal variables in nonzero  |
|                               |           | curvature tests.             |
+-------------------------------+-----------+------------------------------+
| max_schur                     | OT_INT    | Maximal number of Schur      |
|                               |           | updates [75]                 |
+-------------------------------+-----------+------------------------------+
| nWSR                          | OT_INT    | The maximum number of        |
|                               |           | working set recalculations   |
|                               |           | to be performed during the   |
|                               |           | initial homotopy. Default is |
|                               |           | 5(nx + nc)                   |
+-------------------------------+-----------+------------------------------+
| numRefinementSteps            | OT_INT    | Maximum number of iterative  |
|                               |           | refinement steps.            |
+-------------------------------+-----------+------------------------------+
| numRegularisationSteps        | OT_INT    | Maximum number of successive |
|                               |           | regularisation steps.        |
+-------------------------------+-----------+------------------------------+
| printLevel                    | OT_STRING | Defines the amount of text   |
|                               |           | output during QP solution,   |
|                               |           | see Section 5.7              |
+-------------------------------+-----------+------------------------------+
| schur                         | OT_BOOL   | Use Schur Complement         |
|                               |           | Approach [false]             |
+-------------------------------+-----------+------------------------------+
| sparse                        | OT_BOOL   | Formulate the QP using       |
|                               |           | sparse matrices. [false]     |
+-------------------------------+-----------+------------------------------+
| terminationTolerance          | OT_DOUBLE | Relative termination         |
|                               |           | tolerance to stop homotopy.  |
+-------------------------------+-----------+------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

sqic
----



Interface to the SQIC solver for quadratic programming

--------------------------------------------------------------------------------





--------------------------------------------------------------------------------

nlpsol
------



Solve QPs using an Nlpsol Use the 'nlpsol' option to specify the NLP solver
to use.

>List of available options

+----------------+-----------+---------------------------------+
|       Id       |   Type    |           Description           |
+================+===========+=================================+
| nlpsol         | OT_STRING | Name of solver.                 |
+----------------+-----------+---------------------------------+
| nlpsol_options | OT_DICT   | Options to be passed to solver. |
+----------------+-----------+---------------------------------+

--------------------------------------------------------------------------------



Joel Andersson

";

%feature("docstring") casadi::doc_conic "

Get the documentation string for a plugin.

";

%feature("docstring") casadi::simpleIRK "

Construct an implicit Runge-Kutta integrator using a collocation scheme The
constructed function has three inputs, corresponding to initial state (x0),
parameter (p) and integration time (h) and one output, corresponding to
final state (xf).

Parameters:
-----------

f:  ODE function with two inputs (x and p) and one output (xdot)

N:  Number of integrator steps

order:  Order of interpolating polynomials

scheme:   Collocation scheme, as excepted by collocationPoints function.

solver:  Solver plugin

solver_options:  Options to be passed to the solver plugin

";

%feature("docstring") casadi::nlpsol_option_type "

Get type info for a particular option.

";

%feature("docstring") casadi::casadi_axpy "[INTERNAL]  AXPY: y <- a*x + y.

";

%feature("docstring") casadi::has_nlpsol "

Check if a particular plugin is available.

";

%feature("docstring") casadi::casadi_getu "[INTERNAL]  Get the nonzeros for
the upper triangular half.

";

%feature("docstring") casadi::doc_nlpsol "

Get the documentation string for a plugin.

";

%feature("docstring") casadi::casadi_ldl_colind "[INTERNAL] ";

%feature("docstring") casadi::casadi_densify "[INTERNAL]  Convert sparse to
dense.

";

%feature("docstring") casadi::zip "[INTERNAL] ";

%feature("docstring") casadi::slicot_mb03wd "";

%feature("docstring") casadi::casadi_max_viol "[INTERNAL]  Largest bound
violation.

";

%feature("docstring") casadi::casadi_etree "[INTERNAL] ";

%feature("docstring") casadi::casadi_qr_counts "[INTERNAL] ";

%feature("docstring") casadi::collocation_interpolators "

Obtain collocation interpolating matrices.

Parameters:
-----------

tau_root:  location of collocation points, as obtained from
collocation_points

output_C:  interpolating coefficients to obtain derivatives Length: order+1,
order + 1



::

dX/dt @collPoint(j) ~ Sum_i C[j][i]*X@collPoint(i)



Parameters:
-----------

output_D:  interpolating coefficients to obtain end state Length: order+1

";

%feature("docstring") casadi::is_nonincreasing "

Check if the vector is non-increasing.

";

%feature("docstring") casadi::nlpsol_n_in "

Number of NLP solver inputs.

";

%feature("docstring") casadi::matrixName "

Get typename.

";

%feature("docstring") casadi::load_dple "

Explicitly load a plugin dynamically.

";

%feature("docstring") casadi::integrator_in "

>  std::vector<std::string> casadi::integrator_in()
------------------------------------------------------------------------

Get input scheme of integrators.

>  std::string casadi::integrator_in(int ind)
------------------------------------------------------------------------

Get integrator input scheme name by index.

";

%feature("docstring") casadi::is_regular "

>  bool casadi::is_regular(const std::vector< T > &v)
------------------------------------------------------------------------

Checks if array does not contain NaN or Inf.

>  bool casadi::is_regular(N_Vector v)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::getcopy "[INTERNAL] ";

%feature("docstring") casadi::casadi_ldl_solve "[INTERNAL] ";

%feature("docstring") casadi::casadi_qr_solve "[INTERNAL] ";

%feature("docstring") casadi::nlpsol_option_info "

Get documentation for a particular option.

";

%feature("docstring") casadi::hash_value "

Hash value of an integer.

";

%feature("docstring") casadi::casadi_polyval "[INTERNAL]  Evaluate a
polynomial.

";

%feature("docstring") casadi::casadi_fill_int "[INTERNAL] ";

%feature("docstring") casadi::dense_mul_nt "[INTERNAL] ";

%feature("docstring") casadi::casadi_flip "[INTERNAL] ";

%feature("docstring") casadi::simpleIntegrator "

Simplified wrapper for the Integrator class Constructs an integrator using
the same syntax as simpleRK and simpleIRK. The constructed function has
three inputs, corresponding to initial state (x0), parameter (p) and
integration time (h) and one output, corresponding to final state (xf).

Parameters:
-----------

f:  ODE function with two inputs (x and p) and one output (xdot)

N:  Number of integrator steps

order:  Order of interpolating polynomials

scheme:   Collocation scheme, as excepted by collocationPoints function.

";

%feature("docstring") casadi::casadi_interpn_interpolate "[INTERNAL] ";

%feature("docstring") casadi::casadi_copy "[INTERNAL]  COPY: y <-x.

";

%feature("docstring") casadi::slicot_mb03vd "";

%feature("docstring") casadi::nlpsol_default_in "

Default input for an NLP solver.

";

%feature("docstring") casadi::einstein_process "";

%feature("docstring") casadi::casadi_interpn_weights "[INTERNAL] ";

%feature("docstring") casadi::casadi_norm_inf "[INTERNAL]  Inf-norm of a
vector * Returns the largest element in absolute value

";

%feature("docstring") casadi::slicot_mb05nd "";

%feature("docstring") casadi::casadi_ldl_trs "[INTERNAL] ";

%feature("docstring") casadi::has_rootfinder "

Check if a particular plugin is available.

";

%feature("docstring") casadi::index_interp1d "";

%feature("docstring") casadi::conic_n_out "

Get the number of QP solver outputs.

";

%feature("docstring") casadi::doc_interpolant "

Get the documentation string for a plugin.

";

%feature("docstring") casadi::hash_combine "

>  void casadi::hash_combine(std::size_t &seed, T v)

>  void casadi::hash_combine(std::size_t &seed, const std::vector< int > &v)
------------------------------------------------------------------------

Generate a hash value incrementally (function taken from boost)

>  void casadi::hash_combine(std::size_t &seed, const int *v, int sz)
------------------------------------------------------------------------

Generate a hash value incrementally, array.

";

%feature("docstring") casadi::casadi_project "[INTERNAL]  Sparse copy: y <-
x, w work vector (length >= number of rows)

";

%feature("docstring") casadi::matrixName< int > "

Get typename.

";

%feature("docstring") casadi::interpolant "

An interpolant function for lookup table data

Parameters:
-----------

name:  label for the resulting Function

solver:  name of the plugin

grid:  collection of 1D grids whose outer product defines the full N-D
rectangular grid

values:  flattened vector of all values for all gridpoints

Syntax 1D

::

  * # Python
  * xgrid = np.linspace(1,6,6)
  * V = [-1,-1,-2,-3,0,2]
  * LUT = casadi.interpolant(\"LUT\",\"bspline\",[xgrid],V)
  * print(LUT(2.5))
  * 



::

  * % Matlab
  * xgrid = 1:6;
  * V = [-1 -1 -2 -3 0 2];
  * LUT = casadi.interpolant('LUT','bspline',{xgrid},V);
  * LUT(2.5)
  * 



Syntax 2D

::

  * # Python
  * xgrid = np.linspace(-5,5,11)
  * ygrid = np.linspace(-4,4,9)
  * X,Y = np.meshgrid(xgrid,ygrid,indexing='ij')
  * R = np.sqrt(5*X**2 + Y**2)+ 1
  * data = np.sin(R)/R
  * data_flat = data.ravel(order='F')
  * LUT = casadi.interpolant('name','bspline',[xgrid,ygrid],data_flat)
  * print(LUT([0.5,1]))
  * \\\\enverbatim
  * \\\\verbatim
  * % Matlab
  * xgrid = -5:1:5;
  * ygrid = -4:1:4;
  * R = sqrt(5*X.^2 + Y.^2)+ 1;
  * V = sin(R)./(R);
  * LUT = interpolant('LUT','bspline',{xgrid, ygrid},V(:));
  * LUT([0.5 1])
  * 



General information
===================



List of plugins
===============



- bspline

- linear

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
Interpolant.doc(\"myextraplugin\")



--------------------------------------------------------------------------------

bspline
-------



>List of available options

+---------------+--------------+-------------------------------------------+
|      Id       |     Type     |                Description                |
+===============+==============+===========================================+
| degree        | OT_INTVECTOR | Sets, for each grid dimenion, the degree  |
|               |              | of the spline.                            |
+---------------+--------------+-------------------------------------------+
| linear_solver | OT_STRING    | Solver used for constructing the          |
|               |              | coefficient tensor.                       |
+---------------+--------------+-------------------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

linear
------



>List of available options

+-------------+-----------------+------------------------------------------+
|     Id      |      Type       |               Description                |
+=============+=================+==========================================+
| lookup_mode | OT_STRINGVECTOR | Sets, for each grid dimenion, the lookup |
|             |                 | algorithm used to find the correct       |
|             |                 | index. 'linear' uses a for-loop + break; |
|             |                 | 'exact' uses floored division (only for  |
|             |                 | uniform grids).                          |
+-------------+-----------------+------------------------------------------+

--------------------------------------------------------------------------------



Joel Andersson

";

%feature("docstring") casadi::casadi_qr_nnz "[INTERNAL] ";

%feature("docstring") casadi::dplesol "

>  Function casadi::dplesol(const std::string &name, const std::string &solver, const SpDict &qp, const Dict &opts=Dict())
------------------------------------------------------------------------

Discrete periodic Lyapunov Equation solver Given matrices $A_k$ and
symmetric $V_k, k = 0..K-1$

::

  A_k in R^(n x n)
  V_k in R^n
  

provides all of $P_k$ that satisfy:

::

  P_0 = A_(K-1)*P_(K-1)*A_(K-1)' + V_k
  P_k+1 = A_k*P_k*A_k' + V_k  for k = 1..K-1
  



General information
===================



>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| const_dim        | OT_BOOL         | Assume constant  | casadi::Dple     |
|                  |                 | dimension of P   |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| enable_fd        | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation by   |                  |
|                  |                 | finite           |                  |
|                  |                 | differencing.    |                  |
|                  |                 | [default:        |                  |
|                  |                 | false]]          |                  |
+------------------+-----------------+------------------+------------------+
| enable_forward   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using forward    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_jacobian  | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobians of all |                  |
|                  |                 | differentiable   |                  |
|                  |                 | outputs with     |                  |
|                  |                 | respect to all   |                  |
|                  |                 | differentiable   |                  |
|                  |                 | inputs - if      |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_reverse   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | transposed       |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using reverse    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| eps_unstable     | OT_DOUBLE       | A margin for     | casadi::Dple     |
|                  |                 | unstability      |                  |
|                  |                 | detection        |                  |
+------------------+-----------------+------------------+------------------+
| error_unstable   | OT_BOOL         | Throw an         | casadi::Dple     |
|                  |                 | exception when   |                  |
|                  |                 | it is detected   |                  |
|                  |                 | that             |                  |
|                  |                 | Product(A_i,     |                  |
|                  |                 | i=N..1)has       |                  |
|                  |                 | eigenvalues      |                  |
|                  |                 | greater than     |                  |
|                  |                 | 1-eps_unstable   |                  |
+------------------+-----------------+------------------+------------------+
| fd_method        | OT_STRING       | Method for       | casadi::Function |
|                  |                 | finite           | Internal         |
|                  |                 | differencing     |                  |
|                  |                 | [default         |                  |
|                  |                 | 'central']       |                  |
+------------------+-----------------+------------------+------------------+
| fd_options       | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | finite           |                  |
|                  |                 | difference       |                  |
|                  |                 | instance         |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| pos_def          | OT_BOOL         | Assume P         | casadi::Dple     |
|                  |                 | positive         |                  |
|                  |                 | definite         |                  |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

>Input scheme: casadi::DpleInput (DPLE_NUM_IN = 2)

+-----------+-------+------------------------------------------------------+
| Full name | Short |                     Description                      |
+===========+=======+======================================================+
| DPLE_A    | a     | A matrices (horzcat when const_dim, diagcat          |
|           |       | otherwise) [a].                                      |
+-----------+-------+------------------------------------------------------+
| DPLE_V    | v     | V matrices (horzcat when const_dim, diagcat          |
|           |       | otherwise) [v].                                      |
+-----------+-------+------------------------------------------------------+

>Output scheme: casadi::DpleOutput (DPLE_NUM_OUT = 1)

+-----------+-------+------------------------------------------------------+
| Full name | Short |                     Description                      |
+===========+=======+======================================================+
| DPLE_P    | p     | Lyapunov matrix (horzcat when const_dim, diagcat     |
|           |       | otherwise) (Cholesky of P if pos_def) [p].           |
+-----------+-------+------------------------------------------------------+

List of plugins
===============



- slicot

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
Dple.doc(\"myextraplugin\")



--------------------------------------------------------------------------------

slicot
------



An efficient solver for Discrete Periodic Lyapunov Equations using SLICOT

Uses Periodic Schur Decomposition ('psd') and does not assume positive
definiteness. Based on Periodic Lyapunov equations: some applications and
new algorithms. Int. J. Control, vol. 67, pp. 69-87, 1997.

Overview of the method: J. Gillis Practical Methods for Approximate Robust
Periodic Optimal Control ofNonlinear Mechanical Systems, PhD Thesis,
KULeuven, 2015

>List of available options

+-----------------------+-----------+--------------------------------------+
|          Id           |   Type    |             Description              |
+=======================+===========+======================================+
| linear_solver         | OT_STRING | User-defined linear solver class.    |
|                       |           | Needed for sensitivities.            |
+-----------------------+-----------+--------------------------------------+
| linear_solver_options | OT_DICT   | Options to be passed to the linear   |
|                       |           | solver.                              |
+-----------------------+-----------+--------------------------------------+
| psd_num_zero          | OT_DOUBLE | Numerical zero used in Periodic      |
|                       |           | Schur decomposition with slicot.This |
|                       |           | option is needed when your systems   |
|                       |           | has Floquet multiplierszero or close |
|                       |           | to zero                              |
+-----------------------+-----------+--------------------------------------+

--------------------------------------------------------------------------------



Joris Gillis

";

%feature("docstring") casadi::is_slice "

>  bool casadi::is_slice(const IM &x, bool ind1=false)
------------------------------------------------------------------------

Is the IM a Slice.

>  bool casadi::is_slice(const std::vector< int > &v, bool ind1=false)
------------------------------------------------------------------------

Check if an index vector can be represented more efficiently as a slice.

";

%feature("docstring") casadi::is_decreasing "

Check if the vector is strictly decreasing.

";

%feature("docstring") casadi::casadi_qr "[INTERNAL] ";

%feature("docstring") casadi::doc_integrator "

Get the documentation string for a plugin.

";

%feature("docstring") casadi::casadi_dot "[INTERNAL]  Inner product.

";

%feature("docstring") casadi::message_prefix "";

%feature("docstring") casadi::casadi_de_boor "[INTERNAL] ";

%feature("docstring") casadi::has_conic "

Check if a particular plugin is available.

";

%feature("docstring") casadi::load_conic "

Explicitly load a plugin dynamically.

";

%feature("docstring") casadi::casadi_smoothing_diff "[INTERNAL] ";

%feature("docstring") casadi::combine "[INTERNAL]  Combine two
dictionaries, giving priority to first one.

";

%feature("docstring") casadi::dple_n_out "

Get the number of QP solver outputs.

";

%feature("docstring") casadi::casadi_low "[INTERNAL] ";

%feature("docstring") casadi::load_rootfinder "

Explicitly load a plugin dynamically.

";

%feature("docstring") casadi::casadi_mv "[INTERNAL]  Sparse matrix-vector
multiplication: z <- z + x*y.

";

%feature("docstring") casadi::casadi_norm_2 "[INTERNAL]  NORM_2: ||x||_2 ->
return.

";

%feature("docstring") casadi::dense_kron_stride "[INTERNAL] ";

%feature("docstring") casadi::casadi_qr_trs "[INTERNAL] ";

%feature("docstring") casadi::_which_depends "[INTERNAL] ";

%feature("docstring") casadi::casadi_bilin "[INTERNAL]  Calculates dot(x,
mul(A, y))

";

%feature("docstring") casadi::casadi_trans "[INTERNAL]  TRANS: y <-
trans(x) , w work vector (length >= rows x)

";

%feature("docstring") casadi::casadi_nd_boor_eval "[INTERNAL] ";

%feature("docstring") casadi::nlpsol_out "

>  std::vector<std::string> casadi::nlpsol_out()
------------------------------------------------------------------------

Get NLP solver output scheme of NLP solvers.

>Output scheme: casadi::NlpsolOutput (NLPSOL_NUM_OUT = 6)

+--------------+-------+---------------------------------------------------+
|  Full name   | Short |                    Description                    |
+==============+=======+===================================================+
| NLPSOL_X     | x     | Decision variables at the optimal solution (nx x  |
|              |       | 1)                                                |
+--------------+-------+---------------------------------------------------+
| NLPSOL_F     | f     | Cost function value at the optimal solution (1 x  |
|              |       | 1)                                                |
+--------------+-------+---------------------------------------------------+
| NLPSOL_G     | g     | Constraints function at the optimal solution (ng  |
|              |       | x 1)                                              |
+--------------+-------+---------------------------------------------------+
| NLPSOL_LAM_X | lam_x | Lagrange multipliers for bounds on X at the       |
|              |       | solution (nx x 1)                                 |
+--------------+-------+---------------------------------------------------+
| NLPSOL_LAM_G | lam_g | Lagrange multipliers for bounds on G at the       |
|              |       | solution (ng x 1)                                 |
+--------------+-------+---------------------------------------------------+
| NLPSOL_LAM_P | lam_p | Lagrange multipliers for bounds on P at the       |
|              |       | solution (np x 1)                                 |
+--------------+-------+---------------------------------------------------+

>  std::string casadi::nlpsol_out(int ind)
------------------------------------------------------------------------

Get output scheme name by index.

>Output scheme: casadi::NlpsolOutput (NLPSOL_NUM_OUT = 6)

+--------------+-------+---------------------------------------------------+
|  Full name   | Short |                    Description                    |
+==============+=======+===================================================+
| NLPSOL_X     | x     | Decision variables at the optimal solution (nx x  |
|              |       | 1)                                                |
+--------------+-------+---------------------------------------------------+
| NLPSOL_F     | f     | Cost function value at the optimal solution (1 x  |
|              |       | 1)                                                |
+--------------+-------+---------------------------------------------------+
| NLPSOL_G     | g     | Constraints function at the optimal solution (ng  |
|              |       | x 1)                                              |
+--------------+-------+---------------------------------------------------+
| NLPSOL_LAM_X | lam_x | Lagrange multipliers for bounds on X at the       |
|              |       | solution (nx x 1)                                 |
+--------------+-------+---------------------------------------------------+
| NLPSOL_LAM_G | lam_g | Lagrange multipliers for bounds on G at the       |
|              |       | solution (ng x 1)                                 |
+--------------+-------+---------------------------------------------------+
| NLPSOL_LAM_P | lam_p | Lagrange multipliers for bounds on P at the       |
|              |       | solution (np x 1)                                 |
+--------------+-------+---------------------------------------------------+

";

%feature("docstring") casadi::is_strictly_monotone "

Check if the vector is strictly monotone.

";

%feature("docstring") casadi::has_linsol "

Check if a particular plugin is available.

";

%feature("docstring") casadi::simpleRK "

Construct an explicit Runge-Kutta integrator The constructed function has
three inputs, corresponding to initial state (x0), parameter (p) and
integration time (h) and one output, corresponding to final state (xf).

Parameters:
-----------

f:  ODE function with two inputs (x and p) and one output (xdot)

N:  Number of integrator steps

order:  Order of interpolating polynomials

";

%feature("docstring") casadi::casadi_house "[INTERNAL] ";

%feature("docstring") casadi::nlpsol_in "

>  std::vector<std::string> casadi::nlpsol_in()
------------------------------------------------------------------------

Get input scheme of NLP solvers.

>Input scheme: casadi::NlpsolInput (NLPSOL_NUM_IN = 8)

+---------------+--------+-------------------------------------------------+
|   Full name   | Short  |                   Description                   |
+===============+========+=================================================+
| NLPSOL_X0     | x0     | Decision variables, initial guess (nx x 1)      |
+---------------+--------+-------------------------------------------------+
| NLPSOL_P      | p      | Value of fixed parameters (np x 1)              |
+---------------+--------+-------------------------------------------------+
| NLPSOL_LBX    | lbx    | Decision variables lower bound (nx x 1),        |
|               |        | default -inf.                                   |
+---------------+--------+-------------------------------------------------+
| NLPSOL_UBX    | ubx    | Decision variables upper bound (nx x 1),        |
|               |        | default +inf.                                   |
+---------------+--------+-------------------------------------------------+
| NLPSOL_LBG    | lbg    | Constraints lower bound (ng x 1), default -inf. |
+---------------+--------+-------------------------------------------------+
| NLPSOL_UBG    | ubg    | Constraints upper bound (ng x 1), default +inf. |
+---------------+--------+-------------------------------------------------+
| NLPSOL_LAM_X0 | lam_x0 | Lagrange multipliers for bounds on X, initial   |
|               |        | guess (nx x 1)                                  |
+---------------+--------+-------------------------------------------------+
| NLPSOL_LAM_G0 | lam_g0 | Lagrange multipliers for bounds on G, initial   |
|               |        | guess (ng x 1)                                  |
+---------------+--------+-------------------------------------------------+

>  std::string casadi::nlpsol_in(int ind)
------------------------------------------------------------------------

Get NLP solver input scheme name by index.

>Input scheme: casadi::NlpsolInput (NLPSOL_NUM_IN = 8)

+---------------+--------+-------------------------------------------------+
|   Full name   | Short  |                   Description                   |
+===============+========+=================================================+
| NLPSOL_X0     | x0     | Decision variables, initial guess (nx x 1)      |
+---------------+--------+-------------------------------------------------+
| NLPSOL_P      | p      | Value of fixed parameters (np x 1)              |
+---------------+--------+-------------------------------------------------+
| NLPSOL_LBX    | lbx    | Decision variables lower bound (nx x 1),        |
|               |        | default -inf.                                   |
+---------------+--------+-------------------------------------------------+
| NLPSOL_UBX    | ubx    | Decision variables upper bound (nx x 1),        |
|               |        | default +inf.                                   |
+---------------+--------+-------------------------------------------------+
| NLPSOL_LBG    | lbg    | Constraints lower bound (ng x 1), default -inf. |
+---------------+--------+-------------------------------------------------+
| NLPSOL_UBG    | ubg    | Constraints upper bound (ng x 1), default +inf. |
+---------------+--------+-------------------------------------------------+
| NLPSOL_LAM_X0 | lam_x0 | Lagrange multipliers for bounds on X, initial   |
|               |        | guess (nx x 1)                                  |
+---------------+--------+-------------------------------------------------+
| NLPSOL_LAM_G0 | lam_g0 | Lagrange multipliers for bounds on G, initial   |
|               |        | guess (ng x 1)                                  |
+---------------+--------+-------------------------------------------------+

";

%feature("docstring") casadi::matrixName< SXElem > " [INTERNAL] ";

%feature("docstring") casadi::conic_n_in "

Get the number of QP solver inputs.

";

%feature("docstring") casadi::qpsol "";

%feature("docstring") casadi::doc_rootfinder "

Get the documentation string for a plugin.

";

%feature("docstring") casadi::casadi_leaf "[INTERNAL] ";

%feature("docstring") casadi::casadi_postorder "[INTERNAL] ";

%feature("docstring") casadi::dple_in "

>  std::vector<std::string> casadi::dple_in()
------------------------------------------------------------------------

Get input scheme of DPLE solvers.

>  std::string casadi::dple_in(int ind)
------------------------------------------------------------------------

Get DPLE input scheme name by index.

";

%feature("docstring") casadi::dense_copy_t_stride "[INTERNAL] ";

%feature("docstring") casadi::dense_mul_nn2 "[INTERNAL] ";

%feature("docstring") casadi::nlpsol "

>  Function casadi::nlpsol(const std::string &name, const std::string &solver, const SXDict &nlp, const Dict &opts=Dict())
------------------------------------------------------------------------

Create an NLP solver Creates a solver for the following parametric nonlinear
program (NLP):

::

  min          F(x, p)
  x
  
  subject to
  LBX <=   x    <= UBX
  LBG <= G(x, p) <= UBG
  p  == P
  
  nx: number of decision variables
  ng: number of constraints
  np: number of parameters



General information
===================



>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| calc_multipliers | OT_BOOL         | Calculate        | casadi::Nlpsol   |
|                  |                 | Lagrange         |                  |
|                  |                 | multipliers in   |                  |
|                  |                 | the Nlpsol base  |                  |
|                  |                 | class            |                  |
+------------------+-----------------+------------------+------------------+
| common_options   | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | auto-generated   | nction           |
|                  |                 | functions        |                  |
+------------------+-----------------+------------------+------------------+
| discrete         | OT_BOOLVECTOR   | Indicates which  | casadi::Nlpsol   |
|                  |                 | of the variables |                  |
|                  |                 | are discrete,    |                  |
|                  |                 | i.e. integer-    |                  |
|                  |                 | valued           |                  |
+------------------+-----------------+------------------+------------------+
| eval_errors_fata | OT_BOOL         | When errors      | casadi::Nlpsol   |
| l                |                 | occur during     |                  |
|                  |                 | evaluation of    |                  |
|                  |                 | f,g,...,stop the |                  |
|                  |                 | iterations       |                  |
+------------------+-----------------+------------------+------------------+
| expand           | OT_BOOL         | Replace MX with  | casadi::Nlpsol   |
|                  |                 | SX expressions   |                  |
|                  |                 | in problem       |                  |
|                  |                 | formulation      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| ignore_check_vec | OT_BOOL         | If set to true,  | casadi::Nlpsol   |
|                  |                 | the input shape  |                  |
|                  |                 | of F will not be |                  |
|                  |                 | checked.         |                  |
+------------------+-----------------+------------------+------------------+
| iteration_callba | OT_FUNCTION     | A function that  | casadi::Nlpsol   |
| ck               |                 | will be called   |                  |
|                  |                 | at each          |                  |
|                  |                 | iteration with   |                  |
|                  |                 | the solver as    |                  |
|                  |                 | input. Check     |                  |
|                  |                 | documentation of |                  |
|                  |                 | Callback .       |                  |
+------------------+-----------------+------------------+------------------+
| iteration_callba | OT_BOOL         | If set to true,  | casadi::Nlpsol   |
| ck_ignore_errors |                 | errors thrown by |                  |
|                  |                 | iteration_callba |                  |
|                  |                 | ck will be       |                  |
|                  |                 | ignored.         |                  |
+------------------+-----------------+------------------+------------------+
| iteration_callba | OT_INT          | Only call the    | casadi::Nlpsol   |
| ck_step          |                 | callback         |                  |
|                  |                 | function every   |                  |
|                  |                 | few iterations.  |                  |
+------------------+-----------------+------------------+------------------+
| monitor          | OT_STRINGVECTOR | Set of user      | casadi::OracleFu |
|                  |                 | problem          | nction           |
|                  |                 | functions to be  |                  |
|                  |                 | monitored        |                  |
+------------------+-----------------+------------------+------------------+
| oracle_options   | OT_DICT         | Options to be    | casadi::Nlpsol   |
|                  |                 | passed to the    |                  |
|                  |                 | oracle function  |                  |
+------------------+-----------------+------------------+------------------+
| specific_options | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | specific auto-   | nction           |
|                  |                 | generated        |                  |
|                  |                 | functions,       |                  |
|                  |                 | overwriting the  |                  |
|                  |                 | defaults from    |                  |
|                  |                 | common_options.  |                  |
|                  |                 | Nested           |                  |
|                  |                 | dictionary.      |                  |
+------------------+-----------------+------------------+------------------+
| verbose_init     | OT_BOOL         | Print out timing | casadi::Nlpsol   |
|                  |                 | information      |                  |
|                  |                 | about the        |                  |
|                  |                 | different stages |                  |
|                  |                 | of               |                  |
|                  |                 | initialization   |                  |
+------------------+-----------------+------------------+------------------+
| warn_initial_bou | OT_BOOL         | Warn if the      | casadi::Nlpsol   |
| nds              |                 | initial guess    |                  |
|                  |                 | does not satisfy |                  |
|                  |                 | LBX and UBX      |                  |
+------------------+-----------------+------------------+------------------+

>Input scheme: casadi::NlpsolInput (NLPSOL_NUM_IN = 8)

+---------------+--------+-------------------------------------------------+
|   Full name   | Short  |                   Description                   |
+===============+========+=================================================+
| NLPSOL_X0     | x0     | Decision variables, initial guess (nx x 1)      |
+---------------+--------+-------------------------------------------------+
| NLPSOL_P      | p      | Value of fixed parameters (np x 1)              |
+---------------+--------+-------------------------------------------------+
| NLPSOL_LBX    | lbx    | Decision variables lower bound (nx x 1),        |
|               |        | default -inf.                                   |
+---------------+--------+-------------------------------------------------+
| NLPSOL_UBX    | ubx    | Decision variables upper bound (nx x 1),        |
|               |        | default +inf.                                   |
+---------------+--------+-------------------------------------------------+
| NLPSOL_LBG    | lbg    | Constraints lower bound (ng x 1), default -inf. |
+---------------+--------+-------------------------------------------------+
| NLPSOL_UBG    | ubg    | Constraints upper bound (ng x 1), default +inf. |
+---------------+--------+-------------------------------------------------+
| NLPSOL_LAM_X0 | lam_x0 | Lagrange multipliers for bounds on X, initial   |
|               |        | guess (nx x 1)                                  |
+---------------+--------+-------------------------------------------------+
| NLPSOL_LAM_G0 | lam_g0 | Lagrange multipliers for bounds on G, initial   |
|               |        | guess (ng x 1)                                  |
+---------------+--------+-------------------------------------------------+

>Output scheme: casadi::NlpsolOutput (NLPSOL_NUM_OUT = 6)

+--------------+-------+---------------------------------------------------+
|  Full name   | Short |                    Description                    |
+==============+=======+===================================================+
| NLPSOL_X     | x     | Decision variables at the optimal solution (nx x  |
|              |       | 1)                                                |
+--------------+-------+---------------------------------------------------+
| NLPSOL_F     | f     | Cost function value at the optimal solution (1 x  |
|              |       | 1)                                                |
+--------------+-------+---------------------------------------------------+
| NLPSOL_G     | g     | Constraints function at the optimal solution (ng  |
|              |       | x 1)                                              |
+--------------+-------+---------------------------------------------------+
| NLPSOL_LAM_X | lam_x | Lagrange multipliers for bounds on X at the       |
|              |       | solution (nx x 1)                                 |
+--------------+-------+---------------------------------------------------+
| NLPSOL_LAM_G | lam_g | Lagrange multipliers for bounds on G at the       |
|              |       | solution (ng x 1)                                 |
+--------------+-------+---------------------------------------------------+
| NLPSOL_LAM_P | lam_p | Lagrange multipliers for bounds on P at the       |
|              |       | solution (np x 1)                                 |
+--------------+-------+---------------------------------------------------+

List of plugins
===============



- AmplInterface

- blocksqp

- bonmin

- ipopt

- knitro

- snopt

- worhp

- scpgen

- sqpmethod

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
Nlpsol.doc(\"myextraplugin\")



--------------------------------------------------------------------------------

AmplInterface
-------------



>List of available options

+--------+-----------+--------------------+
|   Id   |   Type    |    Description     |
+========+===========+====================+
| solver | OT_STRING | AMPL solver binary |
+--------+-----------+--------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

blocksqp
--------



This is a modified version of blockSQP by Janka et al.

Dennis Janka, Joel Andersson

>List of available options

+----------------------------+-----------+---------------------------------+
|             Id             |   Type    |           Description           |
+============================+===========+=================================+
| block_hess                 | OT_INT    | Blockwise Hessian               |
|                            |           | approximation?                  |
+----------------------------+-----------+---------------------------------+
| col_eps                    | OT_DOUBLE | Epsilon for COL scaling         |
|                            |           | strategy                        |
+----------------------------+-----------+---------------------------------+
| col_tau1                   | OT_DOUBLE | tau1 for COL scaling strategy   |
+----------------------------+-----------+---------------------------------+
| col_tau2                   | OT_DOUBLE | tau2 for COL scaling strategy   |
+----------------------------+-----------+---------------------------------+
| conv_strategy              | OT_INT    | Convexification strategy        |
+----------------------------+-----------+---------------------------------+
| delta                      | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| delta_h0                   | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| eps                        | OT_DOUBLE | Values smaller than this are    |
|                            |           | regarded as numerically zero    |
+----------------------------+-----------+---------------------------------+
| eta                        | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| fallback_scaling           | OT_INT    | If indefinite update is used,   |
|                            |           | the type of fallback strategy   |
+----------------------------+-----------+---------------------------------+
| fallback_update            | OT_INT    | If indefinite update is used,   |
|                            |           | the type of fallback strategy   |
+----------------------------+-----------+---------------------------------+
| gamma_f                    | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| gamma_theta                | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| globalization              | OT_BOOL   | Enable globalization            |
+----------------------------+-----------+---------------------------------+
| hess_damp                  | OT_INT    | Activate Powell damping for     |
|                            |           | BFGS                            |
+----------------------------+-----------+---------------------------------+
| hess_damp_fac              | OT_DOUBLE | Damping factor for BFGS Powell  |
|                            |           | modification                    |
+----------------------------+-----------+---------------------------------+
| hess_lim_mem               | OT_INT    | Full or limited memory          |
+----------------------------+-----------+---------------------------------+
| hess_memsize               | OT_INT    | Memory size for L-BFGS updates  |
+----------------------------+-----------+---------------------------------+
| hess_scaling               | OT_INT    | Scaling strategy for Hessian    |
|                            |           | approximation                   |
+----------------------------+-----------+---------------------------------+
| hess_update                | OT_INT    | Type of Hessian approximation   |
+----------------------------+-----------+---------------------------------+
| ini_hess_diag              | OT_DOUBLE | Initial Hessian guess: diagonal |
|                            |           | matrix diag(iniHessDiag)        |
+----------------------------+-----------+---------------------------------+
| kappa_f                    | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| kappa_minus                | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| kappa_plus                 | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| kappa_plus_max             | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| kappa_soc                  | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| linsol                     | OT_STRING | The linear solver to be used by |
|                            |           | the QP method                   |
+----------------------------+-----------+---------------------------------+
| max_consec_reduced_steps   | OT_INT    | Maximum number of consecutive   |
|                            |           | reduced steps                   |
+----------------------------+-----------+---------------------------------+
| max_consec_skipped_updates | OT_INT    | Maximum number of consecutive   |
|                            |           | skipped updates                 |
+----------------------------+-----------+---------------------------------+
| max_conv_qp                | OT_INT    | How many additional QPs may be  |
|                            |           | solved for convexification per  |
|                            |           | iteration?                      |
+----------------------------+-----------+---------------------------------+
| max_it_qp                  | OT_INT    | Maximum number of QP iterations |
|                            |           | per SQP iteration               |
+----------------------------+-----------+---------------------------------+
| max_iter                   | OT_INT    | Maximum number of SQP           |
|                            |           | iterations                      |
+----------------------------+-----------+---------------------------------+
| max_line_search            | OT_INT    | Maximum number of steps in line |
|                            |           | search                          |
+----------------------------+-----------+---------------------------------+
| max_soc_iter               | OT_INT    | Maximum number of SOC line      |
|                            |           | search iterations               |
+----------------------------+-----------+---------------------------------+
| max_time_qp                | OT_DOUBLE | Maximum number of time in       |
|                            |           | seconds per QP solve per SQP    |
|                            |           | iteration                       |
+----------------------------+-----------+---------------------------------+
| nlinfeastol                | OT_DOUBLE | Nonlinear feasibility tolerance |
+----------------------------+-----------+---------------------------------+
| obj_lo                     | OT_DOUBLE | Lower bound on objective        |
|                            |           | function [-inf]                 |
+----------------------------+-----------+---------------------------------+
| obj_up                     | OT_DOUBLE | Upper bound on objective        |
|                            |           | function [inf]                  |
+----------------------------+-----------+---------------------------------+
| opttol                     | OT_DOUBLE | Optimality tolerance            |
+----------------------------+-----------+---------------------------------+
| print_header               | OT_BOOL   | Print solver header at startup  |
+----------------------------+-----------+---------------------------------+
| print_iteration            | OT_BOOL   | Print SQP iterations            |
+----------------------------+-----------+---------------------------------+
| qpsol                      | OT_STRING | The QP solver to be used by the |
|                            |           | SQP method                      |
+----------------------------+-----------+---------------------------------+
| qpsol_options              | OT_DICT   | Options to be passed to the QP  |
|                            |           | solver                          |
+----------------------------+-----------+---------------------------------+
| restore_feas               | OT_BOOL   | Use feasibility restoration     |
|                            |           | phase                           |
+----------------------------+-----------+---------------------------------+
| s_f                        | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| s_theta                    | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| schur                      | OT_BOOL   | Use qpOASES Schur compliment    |
|                            |           | approach                        |
+----------------------------+-----------+---------------------------------+
| skip_first_globalization   | OT_BOOL   | No globalization strategy in    |
|                            |           | first iteration                 |
+----------------------------+-----------+---------------------------------+
| theta_max                  | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| theta_min                  | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| warmstart                  | OT_BOOL   | Use warmstarting                |
+----------------------------+-----------+---------------------------------+
| which_second_derv          | OT_INT    | For which block should second   |
|                            |           | derivatives be provided by the  |
|                            |           | user                            |
+----------------------------+-----------+---------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

bonmin
------



When in warmstart mode, output NLPSOL_LAM_X may be used as input

NOTE: Even when max_iter == 0, it is not guaranteed that input(NLPSOL_X0) ==
output(NLPSOL_X). Indeed if bounds on X or constraints are unmet, they will
differ.

For a good tutorial on BONMIN,
seehttp://drops.dagstuhl.de/volltexte/2009/2089/pdf/09061.WaechterAndreas.Paper.2089.pdf

A good resource about the algorithms in BONMIN is: Wachter and L. T.
Biegler, On the Implementation of an Interior-Point Filter Line-Search
Algorithm for Large-Scale Nonlinear Programming, Mathematical Programming
106(1), pp. 25-57, 2006 (As Research Report RC 23149, IBM T. J. Watson
Research Center, Yorktown, USA

Caveats: with default options, multipliers for the decision variables are
wrong for equality constraints. Change the 'fixed_variable_treatment' to
'make_constraint' or 'relax_bounds' to obtain correct results.

>List of available options

+--------------------------+-------------+---------------------------------+
|            Id            |    Type     |           Description           |
+==========================+=============+=================================+
| bonmin                   | OT_DICT     | Options to be passed to BONMIN  |
+--------------------------+-------------+---------------------------------+
| con_integer_md           | OT_DICT     | Integer metadata (a dictionary  |
|                          |             | with lists of integers) about   |
|                          |             | constraints to be passed to     |
|                          |             | BONMIN                          |
+--------------------------+-------------+---------------------------------+
| con_numeric_md           | OT_DICT     | Numeric metadata (a dictionary  |
|                          |             | with lists of reals) about      |
|                          |             | constraints to be passed to     |
|                          |             | BONMIN                          |
+--------------------------+-------------+---------------------------------+
| con_string_md            | OT_DICT     | String metadata (a dictionary   |
|                          |             | with lists of strings) about    |
|                          |             | constraints to be passed to     |
|                          |             | BONMIN                          |
+--------------------------+-------------+---------------------------------+
| grad_f                   | OT_FUNCTION | Function for calculating the    |
|                          |             | gradient of the objective       |
|                          |             | (column, autogenerated by       |
|                          |             | default)                        |
+--------------------------+-------------+---------------------------------+
| grad_f_options           | OT_DICT     | Options for the autogenerated   |
|                          |             | gradient of the objective.      |
+--------------------------+-------------+---------------------------------+
| hess_lag                 | OT_FUNCTION | Function for calculating the    |
|                          |             | Hessian of the Lagrangian       |
|                          |             | (autogenerated by default)      |
+--------------------------+-------------+---------------------------------+
| hess_lag_options         | OT_DICT     | Options for the autogenerated   |
|                          |             | Hessian of the Lagrangian.      |
+--------------------------+-------------+---------------------------------+
| jac_g                    | OT_FUNCTION | Function for calculating the    |
|                          |             | Jacobian of the constraints     |
|                          |             | (autogenerated by default)      |
+--------------------------+-------------+---------------------------------+
| jac_g_options            | OT_DICT     | Options for the autogenerated   |
|                          |             | Jacobian of the constraints.    |
+--------------------------+-------------+---------------------------------+
| pass_nonlinear_variables | OT_BOOL     | Pass list of variables entering |
|                          |             | nonlinearly to BONMIN           |
+--------------------------+-------------+---------------------------------+
| var_integer_md           | OT_DICT     | Integer metadata (a dictionary  |
|                          |             | with lists of integers) about   |
|                          |             | variables to be passed to       |
|                          |             | BONMIN                          |
+--------------------------+-------------+---------------------------------+
| var_numeric_md           | OT_DICT     | Numeric metadata (a dictionary  |
|                          |             | with lists of reals) about      |
|                          |             | variables to be passed to       |
|                          |             | BONMIN                          |
+--------------------------+-------------+---------------------------------+
| var_string_md            | OT_DICT     | String metadata (a dictionary   |
|                          |             | with lists of strings) about    |
|                          |             | variables to be passed to       |
|                          |             | BONMIN                          |
+--------------------------+-------------+---------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

ipopt
-----



When in warmstart mode, output NLPSOL_LAM_X may be used as input

NOTE: Even when max_iter == 0, it is not guaranteed that input(NLPSOL_X0) ==
output(NLPSOL_X). Indeed if bounds on X or constraints are unmet, they will
differ.

For a good tutorial on IPOPT,
seehttp://drops.dagstuhl.de/volltexte/2009/2089/pdf/09061.WaechterAndreas.Paper.2089.pdf

A good resource about the algorithms in IPOPT is: Wachter and L. T. Biegler,
On the Implementation of an Interior-Point Filter Line-Search Algorithm for
Large-Scale Nonlinear Programming, Mathematical Programming 106(1), pp.
25-57, 2006 (As Research Report RC 23149, IBM T. J. Watson Research Center,
Yorktown, USA

Caveats: with default options, multipliers for the decision variables are
wrong for equality constraints. Change the 'fixed_variable_treatment' to
'make_constraint' or 'relax_bounds' to obtain correct results.

>List of available options

+--------------------------+-------------+---------------------------------+
|            Id            |    Type     |           Description           |
+==========================+=============+=================================+
| con_integer_md           | OT_DICT     | Integer metadata (a dictionary  |
|                          |             | with lists of integers) about   |
|                          |             | constraints to be passed to     |
|                          |             | IPOPT                           |
+--------------------------+-------------+---------------------------------+
| con_numeric_md           | OT_DICT     | Numeric metadata (a dictionary  |
|                          |             | with lists of reals) about      |
|                          |             | constraints to be passed to     |
|                          |             | IPOPT                           |
+--------------------------+-------------+---------------------------------+
| con_string_md            | OT_DICT     | String metadata (a dictionary   |
|                          |             | with lists of strings) about    |
|                          |             | constraints to be passed to     |
|                          |             | IPOPT                           |
+--------------------------+-------------+---------------------------------+
| grad_f                   | OT_FUNCTION | Function for calculating the    |
|                          |             | gradient of the objective       |
|                          |             | (column, autogenerated by       |
|                          |             | default)                        |
+--------------------------+-------------+---------------------------------+
| hess_lag                 | OT_FUNCTION | Function for calculating the    |
|                          |             | Hessian of the Lagrangian       |
|                          |             | (autogenerated by default)      |
+--------------------------+-------------+---------------------------------+
| ipopt                    | OT_DICT     | Options to be passed to IPOPT   |
+--------------------------+-------------+---------------------------------+
| jac_g                    | OT_FUNCTION | Function for calculating the    |
|                          |             | Jacobian of the constraints     |
|                          |             | (autogenerated by default)      |
+--------------------------+-------------+---------------------------------+
| pass_nonlinear_variables | OT_BOOL     | Pass list of variables entering |
|                          |             | nonlinearly to IPOPT            |
+--------------------------+-------------+---------------------------------+
| var_integer_md           | OT_DICT     | Integer metadata (a dictionary  |
|                          |             | with lists of integers) about   |
|                          |             | variables to be passed to IPOPT |
+--------------------------+-------------+---------------------------------+
| var_numeric_md           | OT_DICT     | Numeric metadata (a dictionary  |
|                          |             | with lists of reals) about      |
|                          |             | variables to be passed to IPOPT |
+--------------------------+-------------+---------------------------------+
| var_string_md            | OT_DICT     | String metadata (a dictionary   |
|                          |             | with lists of strings) about    |
|                          |             | variables to be passed to IPOPT |
+--------------------------+-------------+---------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

knitro
------



KNITRO interface

>List of available options

+---------+--------------+--------------------------------+
|   Id    |     Type     |          Description           |
+=========+==============+================================+
| contype | OT_INTVECTOR | Type of constraint             |
+---------+--------------+--------------------------------+
| knitro  | OT_DICT      | Options to be passed to KNITRO |
+---------+--------------+--------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

snopt
-----



SNOPT interface

>List of available options

+-------+-----------+---------------------------------------------+
|  Id   |   Type    |                 Description                 |
+=======+===========+=============================================+
| snopt | OT_DICT   | Options to be passed to SNOPT               |
+-------+-----------+---------------------------------------------+
| start | OT_STRING | Warm-start options for Worhp: cold|warm|hot |
+-------+-----------+---------------------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

worhp
-----



WORHP interface

Designed for Worhp 1.10

>List of available options

+-------+---------+-------------------------------+
|  Id   |  Type   |          Description          |
+=======+=========+===============================+
| worhp | OT_DICT | Options to be passed to WORHP |
+-------+---------+-------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

scpgen
------



A structure-exploiting sequential quadratic programming (to be come
sequential convex programming) method for nonlinear programming.

>List of available options

+-----------------------+-----------------+--------------------------------+
|          Id           |      Type       |          Description           |
+=======================+=================+================================+
| beta                  | OT_DOUBLE       | Line-search parameter,         |
|                       |                 | restoration factor of stepsize |
+-----------------------+-----------------+--------------------------------+
| c1                    | OT_DOUBLE       | Armijo condition, coefficient  |
|                       |                 | of decrease in merit           |
+-----------------------+-----------------+--------------------------------+
| codegen               | OT_BOOL         | C-code generation              |
+-----------------------+-----------------+--------------------------------+
| hessian_approximation | OT_STRING       | gauss-newton|exact             |
+-----------------------+-----------------+--------------------------------+
| lbfgs_memory          | OT_INT          | Size of L-BFGS memory.         |
+-----------------------+-----------------+--------------------------------+
| max_iter              | OT_INT          | Maximum number of SQP          |
|                       |                 | iterations                     |
+-----------------------+-----------------+--------------------------------+
| max_iter_ls           | OT_INT          | Maximum number of linesearch   |
|                       |                 | iterations                     |
+-----------------------+-----------------+--------------------------------+
| merit_memsize         | OT_INT          | Size of memory to store        |
|                       |                 | history of merit function      |
|                       |                 | values                         |
+-----------------------+-----------------+--------------------------------+
| merit_start           | OT_DOUBLE       | Lower bound for the merit      |
|                       |                 | function parameter             |
+-----------------------+-----------------+--------------------------------+
| name_x                | OT_STRINGVECTOR | Names of the variables.        |
+-----------------------+-----------------+--------------------------------+
| print_header          | OT_BOOL         | Print the header with problem  |
|                       |                 | statistics                     |
+-----------------------+-----------------+--------------------------------+
| print_x               | OT_INTVECTOR    | Which variables to print.      |
+-----------------------+-----------------+--------------------------------+
| qpsol                 | OT_STRING       | The QP solver to be used by    |
|                       |                 | the SQP method                 |
+-----------------------+-----------------+--------------------------------+
| qpsol_options         | OT_DICT         | Options to be passed to the QP |
|                       |                 | solver                         |
+-----------------------+-----------------+--------------------------------+
| reg_threshold         | OT_DOUBLE       | Threshold for the              |
|                       |                 | regularization.                |
+-----------------------+-----------------+--------------------------------+
| regularize            | OT_BOOL         | Automatic regularization of    |
|                       |                 | Lagrange Hessian.              |
+-----------------------+-----------------+--------------------------------+
| tol_du                | OT_DOUBLE       | Stopping criterion for dual    |
|                       |                 | infeasability                  |
+-----------------------+-----------------+--------------------------------+
| tol_pr                | OT_DOUBLE       | Stopping criterion for primal  |
|                       |                 | infeasibility                  |
+-----------------------+-----------------+--------------------------------+
| tol_pr_step           | OT_DOUBLE       | Stopping criterion for the     |
|                       |                 | step size                      |
+-----------------------+-----------------+--------------------------------+
| tol_reg               | OT_DOUBLE       | Stopping criterion for         |
|                       |                 | regularization                 |
+-----------------------+-----------------+--------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

sqpmethod
---------



A textbook SQPMethod

>List of available options

+-----------------------+-----------+--------------------------------------+
|          Id           |   Type    |             Description              |
+=======================+===========+======================================+
| beta                  | OT_DOUBLE | Line-search parameter, restoration   |
|                       |           | factor of stepsize                   |
+-----------------------+-----------+--------------------------------------+
| c1                    | OT_DOUBLE | Armijo condition, coefficient of     |
|                       |           | decrease in merit                    |
+-----------------------+-----------+--------------------------------------+
| hessian_approximation | OT_STRING | limited-memory|exact                 |
+-----------------------+-----------+--------------------------------------+
| lbfgs_memory          | OT_INT    | Size of L-BFGS memory.               |
+-----------------------+-----------+--------------------------------------+
| max_iter              | OT_INT    | Maximum number of SQP iterations     |
+-----------------------+-----------+--------------------------------------+
| max_iter_ls           | OT_INT    | Maximum number of linesearch         |
|                       |           | iterations                           |
+-----------------------+-----------+--------------------------------------+
| merit_memory          | OT_INT    | Size of memory to store history of   |
|                       |           | merit function values                |
+-----------------------+-----------+--------------------------------------+
| min_step_size         | OT_DOUBLE | The size (inf-norm) of the step size |
|                       |           | should not become smaller than this. |
+-----------------------+-----------+--------------------------------------+
| print_header          | OT_BOOL   | Print the header with problem        |
|                       |           | statistics                           |
+-----------------------+-----------+--------------------------------------+
| print_iteration       | OT_BOOL   | Print the iterations                 |
+-----------------------+-----------+--------------------------------------+
| qpsol                 | OT_STRING | The QP solver to be used by the SQP  |
|                       |           | method                               |
+-----------------------+-----------+--------------------------------------+
| qpsol_options         | OT_DICT   | Options to be passed to the QP       |
|                       |           | solver                               |
+-----------------------+-----------+--------------------------------------+
| regularize            | OT_BOOL   | Automatic regularization of Lagrange |
|                       |           | Hessian.                             |
+-----------------------+-----------+--------------------------------------+
| tol_du                | OT_DOUBLE | Stopping criterion for dual          |
|                       |           | infeasability                        |
+-----------------------+-----------+--------------------------------------+
| tol_pr                | OT_DOUBLE | Stopping criterion for primal        |
|                       |           | infeasibility                        |
+-----------------------+-----------+--------------------------------------+

--------------------------------------------------------------------------------



Joel Andersson

";

%feature("docstring") casadi::is_monotone "

Check if the vector is monotone.

";

%feature("docstring") casadi::casadi_postorder_dfs "[INTERNAL] ";

%feature("docstring") casadi::casadi_norm_inf_mul "[INTERNAL]  Inf-norm of
a Matrix-matrix product,*

Parameters:
-----------

dwork:  A real work vector that you must allocate Minimum size: y.size1()

iwork:  A integer work vector that you must allocate Minimum size:
y.size1()+x.size2()+1

";

%feature("docstring") casadi::casadi_qr_mv "[INTERNAL] ";

%feature("docstring") casadi::casadi_fill "[INTERNAL]  FILL: x <- alpha.

";

%feature("docstring") casadi::casadi_mv_dense "[INTERNAL] ";

%feature("docstring") casadi::conic_out "

>  std::vector<std::string> casadi::conic_out()
------------------------------------------------------------------------

Get QP solver output scheme of QP solvers.

>  std::string casadi::conic_out(int ind)
------------------------------------------------------------------------

Get output scheme name by index.

";


// File: namespaceIpopt.xml


// File: namespacestd.xml


// File: chapter1.xml


// File: chapter2.xml


// File: chapter3.xml


// File: chapter4.xml


// File: chapter5.xml


// File: chapter6.xml

